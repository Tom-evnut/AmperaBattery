
C:\Users\tomde\AppData\Local\Temp\arduino\sketches\F18E17D99E802212301FDB80DE85E1DB/VoltBMSV2.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
  reset = false;
  moduleAddress = 0;
}

void BMSModule::clearmodule()
{
       0:	00 80 00 20 bd 01 00 00 8d 91 00 00 49 91 00 00     ... ........I...
  }
  moduleVolt = 0.0f;
  temperatures[0] = 0.0f;
  exists = false;
  reset = false;
  moduleAddress = 0;
      10:	49 91 00 00 49 91 00 00 49 91 00 00 49 91 00 00     I...I...I...I...
}
      20:	49 91 00 00 49 91 00 00 49 91 00 00 8d 91 00 00     I...I...I.......
  uint8_t CUV;

  Logger::console(0, "");
  Logger::console(0, "");
  Logger::console(0, "");
  Logger::console(0, "Modules: %i  Cells: %i  Voltage: %fV   Avg Cell Voltage: %fV     Avg Temp: %fC ", numFoundModules, seriescells(),
      30:	8d 91 00 00 49 91 00 00 a1 86 00 00 a5 86 00 00     ....I...........
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
      40:	8d 91 00 00 8d 91 00 00 8d 91 00 00 8d 91 00 00     ................
      spack = spack + modules[y].getscells();
      50:	8d 91 00 00 8d 91 00 00 8d 91 00 00 8d 91 00 00     ................
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
      60:	8d 91 00 00 8d 91 00 00 8d 91 00 00 8d 91 00 00     ................
  Logger::console(0, "Modules: %i  Cells: %i  Voltage: %fV   Avg Cell Voltage: %fV     Avg Temp: %fC ", numFoundModules, seriescells(),
      70:	8d 91 00 00 8d 91 00 00 8d 91 00 00 8d 91 00 00     ................
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
      80:	8d 91 00 00 8d 91 00 00 8d 91 00 00 8d 91 00 00     ................
      avg += modules[x].getAverageV();
      90:	8d 91 00 00 8d 91 00 00 8d 91 00 00 8d 91 00 00     ................
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
      a0:	8d 91 00 00 8d 91 00 00 8d 91 00 00 8d 91 00 00     ................
  avg = avg / (float)numFoundModules;
      b0:	8d 91 00 00 d5 79 00 00 e1 79 00 00 e5 79 00 00     .....y...y...y..
                  getPackVoltage(), getAvgCellVolt(), getAvgTemperature());
      c0:	f1 79 00 00 f5 79 00 00 f9 79 00 00 8d 91 00 00     .y...y...y......
  Logger::console(0, "Modules: %i  Cells: %i  Voltage: %fV   Avg Cell Voltage: %fV     Avg Temp: %fC ", numFoundModules, seriescells(),
      d0:	8d 91 00 00 8d 91 00 00 8d 91 00 00 8d 91 00 00     ................
      e0:	8d 91 00 00 8d 91 00 00 8d 91 00 00 8d 91 00 00     ................
  Logger::console(0, "");
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
      f0:	8d 91 00 00 8d 91 00 00 8d 91 00 00 c5 9f 00 00     ................
  {
    if (modules[y].isExisting())
     100:	8d 91 00 00 ed a6 00 00 8d 91 00 00 8d 91 00 00     ................
    {
      faults = modules[y].getFaults();
     110:	8d 91 00 00 8d 91 00 00 8d 91 00 00 8d 91 00 00     ................
      alerts = modules[y].getAlerts();
      COV = modules[y].getCOVCells();
     120:	8d 91 00 00 8d 91 00 00 8d 91 00 00 8d 91 00 00     ................
      CUV = modules[y].getCUVCells();

      Logger::console(0, "                               Module #%i", y);
     130:	8d 91 00 00 8d 91 00 00 8d 91 00 00 8d 91 00 00     ................

      Logger::console(0, "  Voltage: %fV   (%fV-%fV)     Temperatures: (%fC-%fC)", modules[y].getModuleVoltage(),
                      modules[y].getLowCellV(), modules[y].getHighCellV(), modules[y].getLowTemp(), modules[y].getHighTemp());
     140:	8d 91 00 00 8d 91 00 00 8d 91 00 00 8d 91 00 00     ................
     150:	8d 91 00 00 8d 91 00 00 8d 91 00 00 8d 91 00 00     ................
      Logger::console(0, "  Voltage: %fV   (%fV-%fV)     Temperatures: (%fC-%fC)", modules[y].getModuleVoltage(),
     160:	8d 91 00 00 ed a9 00 00 8d 91 00 00 8d 91 00 00     ................
     170:	8d 91 00 00 8d 91 00 00 8d 91 00 00 8d 91 00 00     ................
     180:	8d 91 00 00 8d 91 00 00 8d 91 00 00 8d 91 00 00     ................
     190:	8d 91 00 00 8d 91 00 00 8d 91 00 00 8d 91 00 00     ................
     1a0:	8d 91 00 00 8d 91 00 00 8d 91 00 00 8d 91 00 00     ................
        }
      }
      if (alerts > 0)
      {
        Logger::console(0, "  MODULE HAS ALERTS:");
        if (alerts & 1)
     1b0:	8d 91 00 00 8d 91 00 00 8d 91 00 00                 ............

000001bc <ResetHandler>:
        }
        if (alerts & 4)
        {
          Logger::console(0, "    Sleep mode active");
        }
        if (alerts & 8)
     1bc:	4b57      	ldr	r3, [pc, #348]	; (31c <ResetHandler+0x160>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
        {
          Logger::console(0, "    Thermal shutdown active");
        }
        if (alerts & 0x10)
     1c2:	b510      	push	{r4, lr}
        {
          Logger::console(0, "    Test Alert");
        }
        if (alerts & 0x20)
     1c4:	81da      	strh	r2, [r3, #14]
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
        {
          Logger::console(0, "    OTP EPROM Uncorrectable Error");
        }
        if (alerts & 0x40)
     1ca:	81da      	strh	r2, [r3, #14]
        {
          Logger::console(0, "    GROUP3 Regs Invalid");
        }
        if (alerts & 0x80)
     1cc:	bf00      	nop
     1ce:	bf00      	nop
        {
          Logger::console(0, "    Address not registered");
        }
      }
      if (faults > 0 || alerts > 0)
        SERIALCONSOLE.println();
     1d0:	f008 ffe0 	bl	9194 <startup_early_hook>
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
     1d4:	4b52      	ldr	r3, [pc, #328]	; (320 <ResetHandler+0x164>)
        SERIALCONSOLE.println();
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
     1da:	631a      	str	r2, [r3, #48]	; 0x30
     1dc:	4a51      	ldr	r2, [pc, #324]	; (324 <ResetHandler+0x168>)
     1de:	639a      	str	r2, [r3, #56]	; 0x38
     1e0:	4a51      	ldr	r2, [pc, #324]	; (328 <ResetHandler+0x16c>)
     1e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }
}
     1e4:	4a51      	ldr	r2, [pc, #324]	; (32c <ResetHandler+0x170>)
     1e6:	6913      	ldr	r3, [r2, #16]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
        Logger::console(0, "  MODULE IS FAULTED:");
     1ec:	d103      	bne.n	1f6 <ResetHandler+0x3a>
     1ee:	6153      	str	r3, [r2, #20]
     1f0:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
        if (faults & 1)
     1f4:	6113      	str	r3, [r2, #16]
     1f6:	4b4e      	ldr	r3, [pc, #312]	; (330 <ResetHandler+0x174>)
        if (faults & 2)
     1f8:	789a      	ldrb	r2, [r3, #2]
     1fa:	0711      	lsls	r1, r2, #28
        if (faults & 4)
     1fc:	d503      	bpl.n	206 <ResetHandler+0x4a>
     1fe:	789a      	ldrb	r2, [r3, #2]
        if (faults & 8)
     200:	f042 0208 	orr.w	r2, r2, #8
        if (faults & 0x10)
     204:	709a      	strb	r2, [r3, #2]
     206:	4b4b      	ldr	r3, [pc, #300]	; (334 <ResetHandler+0x178>)
        if (faults & 0x20)
     208:	484b      	ldr	r0, [pc, #300]	; (338 <ResetHandler+0x17c>)
     20a:	222a      	movs	r2, #42	; 0x2a
      if (alerts > 0)
     20c:	701a      	strb	r2, [r3, #0]
     20e:	4b4b      	ldr	r3, [pc, #300]	; (33c <ResetHandler+0x180>)
     210:	1cda      	adds	r2, r3, #3
          Logger::console(0, "    Internal registers inconsistent");
     212:	1a12      	subs	r2, r2, r0
     214:	1ec1      	subs	r1, r0, #3
     216:	f022 0203 	bic.w	r2, r2, #3
      if (alerts > 0)
     21a:	4299      	cmp	r1, r3
     21c:	bf88      	it	hi
     21e:	2200      	movhi	r2, #0
          Logger::console(0, "    Power on reset has occurred");
     220:	4947      	ldr	r1, [pc, #284]	; (340 <ResetHandler+0x184>)
     222:	f008 febd 	bl	8fa0 <memcpy>
     226:	4b47      	ldr	r3, [pc, #284]	; (344 <ResetHandler+0x188>)
        if (faults & 0x10)
     228:	4847      	ldr	r0, [pc, #284]	; (348 <ResetHandler+0x18c>)
     22a:	1cda      	adds	r2, r3, #3
          Logger::console(0, "    Test fault active");
     22c:	1a12      	subs	r2, r2, r0
     22e:	1ec1      	subs	r1, r0, #3
     230:	f022 0203 	bic.w	r2, r2, #3
     234:	4299      	cmp	r1, r3
          Logger::console(0, "    CRC error in received packet");
     236:	bf88      	it	hi
     238:	2200      	movhi	r2, #0
     23a:	2100      	movs	r1, #0
     23c:	f00d f800 	bl	d240 <memset>
          Logger::console(0, "    GROUP3 Regs Invalid");
     240:	4942      	ldr	r1, [pc, #264]	; (34c <ResetHandler+0x190>)
     242:	4843      	ldr	r0, [pc, #268]	; (350 <ResetHandler+0x194>)
     244:	f44f 72de 	mov.w	r2, #444	; 0x1bc
        if (alerts & 0x80)
     248:	f008 feaa 	bl	8fa0 <memcpy>
          Logger::console(0, "    Address not registered");
     24c:	4b41      	ldr	r3, [pc, #260]	; (354 <ResetHandler+0x198>)
     24e:	4a42      	ldr	r2, [pc, #264]	; (358 <ResetHandler+0x19c>)
     250:	2180      	movs	r1, #128	; 0x80
     252:	f803 1b01 	strb.w	r1, [r3], #1
          Logger::console(0, "    OTP EPROM Uncorrectable Error");
     256:	4293      	cmp	r3, r2
     258:	d1fb      	bne.n	252 <ResetHandler+0x96>
     25a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     25e:	4a3c      	ldr	r2, [pc, #240]	; (350 <ResetHandler+0x194>)
          Logger::console(0, "    Test Alert");
     260:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
     264:	4b3d      	ldr	r3, [pc, #244]	; (35c <ResetHandler+0x1a0>)
     266:	228a      	movs	r2, #138	; 0x8a
     268:	701a      	strb	r2, [r3, #0]
          Logger::console(0, "    Thermal shutdown active");
     26a:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     26e:	2224      	movs	r2, #36	; 0x24
     270:	705a      	strb	r2, [r3, #1]
     272:	22a0      	movs	r2, #160	; 0xa0
          Logger::console(0, "    Sleep mode active");
     274:	701a      	strb	r2, [r3, #0]
     276:	799a      	ldrb	r2, [r3, #6]
     278:	0792      	lsls	r2, r2, #30
     27a:	d5fc      	bpl.n	276 <ResetHandler+0xba>
     27c:	799a      	ldrb	r2, [r3, #6]
          Logger::console(0, "    Over temperature on TS2");
     27e:	06d4      	lsls	r4, r2, #27
     280:	d4fc      	bmi.n	27c <ResetHandler+0xc0>
     282:	4b37      	ldr	r3, [pc, #220]	; (360 <ResetHandler+0x1a4>)
     284:	799a      	ldrb	r2, [r3, #6]
     286:	f002 020c 	and.w	r2, r2, #12
          Logger::console(0, "    Over temperature on TS1");
     28a:	2a08      	cmp	r2, #8
     28c:	d1fa      	bne.n	284 <ResetHandler+0xc8>
     28e:	2203      	movs	r2, #3
     290:	711a      	strb	r2, [r3, #4]
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     292:	2240      	movs	r2, #64	; 0x40
     294:	715a      	strb	r2, [r3, #5]
     296:	799a      	ldrb	r2, [r3, #6]
     298:	0690      	lsls	r0, r2, #26
     29a:	d5fc      	bpl.n	296 <ResetHandler+0xda>
     29c:	4a30      	ldr	r2, [pc, #192]	; (360 <ResetHandler+0x1a4>)
            if (CUV & (1 << i))
     29e:	7993      	ldrb	r3, [r2, #6]
     2a0:	0659      	lsls	r1, r3, #25
     2a2:	d5fc      	bpl.n	29e <ResetHandler+0xe2>
     2a4:	4b1e      	ldr	r3, [pc, #120]	; (320 <ResetHandler+0x164>)
     2a6:	492f      	ldr	r1, [pc, #188]	; (364 <ResetHandler+0x1a8>)
     2a8:	6459      	str	r1, [r3, #68]	; 0x44
     2aa:	2102      	movs	r1, #2
     2ac:	6499      	str	r1, [r3, #72]	; 0x48
     2ae:	2120      	movs	r1, #32
     2b0:	7011      	strb	r1, [r2, #0]
     2b2:	7991      	ldrb	r1, [r2, #6]
     2b4:	f001 010c 	and.w	r1, r1, #12
     2b8:	290c      	cmp	r1, #12
     2ba:	d1fa      	bne.n	2b2 <ResetHandler+0xf6>
     2bc:	4a2a      	ldr	r2, [pc, #168]	; (368 <ResetHandler+0x1ac>)
     2be:	605a      	str	r2, [r3, #4]
     2c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     2c4:	4a29      	ldr	r2, [pc, #164]	; (36c <ResetHandler+0x1b0>)
     2c6:	615a      	str	r2, [r3, #20]
     2c8:	2200      	movs	r2, #0
     2ca:	619a      	str	r2, [r3, #24]
     2cc:	2207      	movs	r2, #7
     2ce:	611a      	str	r2, [r3, #16]
     2d0:	4a27      	ldr	r2, [pc, #156]	; (370 <ResetHandler+0x1b4>)
     2d2:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
     2d6:	b662      	cpsie	i
     2d8:	f009 f810 	bl	92fc <_init_Teensyduino_internal_>
     2dc:	4b13      	ldr	r3, [pc, #76]	; (32c <ResetHandler+0x170>)
     2de:	695b      	ldr	r3, [r3, #20]
     2e0:	07da      	lsls	r2, r3, #31
     2e2:	d505      	bpl.n	2f0 <ResetHandler+0x134>
     2e4:	4823      	ldr	r0, [pc, #140]	; (374 <ResetHandler+0x1b8>)
     2e6:	f008 fffd 	bl	92e4 <rtc_set>
     2ea:	4b23      	ldr	r3, [pc, #140]	; (378 <ResetHandler+0x1bc>)
     2ec:	4a23      	ldr	r2, [pc, #140]	; (37c <ResetHandler+0x1c0>)
     2ee:	61da      	str	r2, [r3, #28]
     2f0:	4b23      	ldr	r3, [pc, #140]	; (380 <ResetHandler+0x1c4>)
     2f2:	781b      	ldrb	r3, [r3, #0]
     2f4:	065b      	lsls	r3, r3, #25
     2f6:	d509      	bpl.n	30c <ResetHandler+0x150>
          for (int i = 0; i < 32; i++)
     2f8:	4c1f      	ldr	r4, [pc, #124]	; (378 <ResetHandler+0x1bc>)
     2fa:	4b20      	ldr	r3, [pc, #128]	; (37c <ResetHandler+0x1c0>)
     2fc:	69e2      	ldr	r2, [r4, #28]
     2fe:	429a      	cmp	r2, r3
     300:	d104      	bne.n	30c <ResetHandler+0x150>
            if (CUV & (1 << i))
     302:	481c      	ldr	r0, [pc, #112]	; (374 <ResetHandler+0x1b8>)
     304:	f008 ffee 	bl	92e4 <rtc_set>
     308:	2300      	movs	r3, #0
     30a:	61e3      	str	r3, [r4, #28]
     30c:	f008 ff48 	bl	91a0 <startup_late_hook>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     310:	f00d f88c 	bl	d42c <__libc_init_array>
     314:	f008 fe3c 	bl	8f90 <main>
          for (int i = 0; i < 32; i++)
     318:	e7fe      	b.n	318 <ResetHandler+0x15c>
     31a:	bf00      	nop
     31c:	40052000 	.word	0x40052000
     320:	40048000 	.word	0x40048000
     324:	00043f82 	.word	0x00043f82
          SERIALCONSOLE.println();
     328:	2b000001 	.word	0x2b000001
     32c:	4003d000 	.word	0x4003d000
     330:	4007d000 	.word	0x4007d000
     334:	4007e000 	.word	0x4007e000
     338:	1fff8720 	.word	0x1fff8720
            if (COV & (1 << i))
     33c:	1fff8f78 	.word	0x1fff8f78
     340:	00014a94 	.word	0x00014a94
          for (int i = 0; i < 32; i++)
     344:	1fffba2c 	.word	0x1fffba2c
     348:	1fff8f78 	.word	0x1fff8f78
            if (COV & (1 << i))
     34c:	00000000 	.word	0x00000000
     350:	1fff8200 	.word	0x1fff8200
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	40065000 	.word	0x40065000
          for (int i = 0; i < 32; i++)
     360:	40064000 	.word	0x40064000
     364:	01030000 	.word	0x01030000
     368:	000510c0 	.word	0x000510c0
     36c:	000176ff 	.word	0x000176ff
     370:	20200000 	.word	0x20200000
          SERIALCONSOLE.println();
     374:	64821d85 	.word	0x64821d85
     378:	4003e000 	.word	0x4003e000
     37c:	5a94c3a5 	.word	0x5a94c3a5
     380:	4007f000 	.word	0x4007f000
     384:	ffffffff 	.word	0xffffffff
     388:	ffffffff 	.word	0xffffffff
     38c:	ffffffff 	.word	0xffffffff
     390:	ffffffff 	.word	0xffffffff
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <register_tm_clones>:
     410:	4805      	ldr	r0, [pc, #20]	; (428 <register_tm_clones+0x18>)
     412:	4b06      	ldr	r3, [pc, #24]	; (42c <register_tm_clones+0x1c>)
     414:	1a1b      	subs	r3, r3, r0
     416:	0fd9      	lsrs	r1, r3, #31
     418:	eb01 01a3 	add.w	r1, r1, r3, asr #2
     41c:	1049      	asrs	r1, r1, #1
     41e:	d002      	beq.n	426 <register_tm_clones+0x16>
     420:	4b03      	ldr	r3, [pc, #12]	; (430 <register_tm_clones+0x20>)
     422:	b103      	cbz	r3, 426 <register_tm_clones+0x16>
     424:	4718      	bx	r3
     426:	4770      	bx	lr
     428:	1fff8f78 	.word	0x1fff8f78
     42c:	1fff8f78 	.word	0x1fff8f78
     430:	00000000 	.word	0x00000000

00000434 <frame_dummy>:
     434:	b508      	push	{r3, lr}
     436:	4b05      	ldr	r3, [pc, #20]	; (44c <frame_dummy+0x18>)
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4905      	ldr	r1, [pc, #20]	; (450 <frame_dummy+0x1c>)
     43c:	4805      	ldr	r0, [pc, #20]	; (454 <frame_dummy+0x20>)
     43e:	f3af 8000 	nop.w
     442:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     446:	f7ff bfe3 	b.w	410 <register_tm_clones>
     44a:	bf00      	nop
     44c:	00000000 	.word	0x00000000
     450:	1fff8f78 	.word	0x1fff8f78
     454:	00014a94 	.word	0x00014a94

00000458 <BMSModule::BMSModule()>:
BMSModule::BMSModule()
     458:	b510      	push	{r4, lr}
    cellVolt[i] = 0.0f;
     45a:	2280      	movs	r2, #128	; 0x80
     45c:	2100      	movs	r1, #0
BMSModule::BMSModule()
     45e:	4604      	mov	r4, r0
    cellVolt[i] = 0.0f;
     460:	f00c feee 	bl	d240 <memset>
    lowestCellVolt[i] = 5.0f;
     464:	4912      	ldr	r1, [pc, #72]	; (4b0 <BMSModule::BMSModule()+0x58>)
     466:	f104 0380 	add.w	r3, r4, #128	; 0x80
     46a:	f504 7280 	add.w	r2, r4, #256	; 0x100
     46e:	f843 1f04 	str.w	r1, [r3, #4]!
  for (int i = 0; i < 32; i++)
     472:	429a      	cmp	r2, r3
     474:	d1fb      	bne.n	46e <BMSModule::BMSModule()+0x16>
    highestCellVolt[i] = 0.0f;
     476:	2280      	movs	r2, #128	; 0x80
     478:	2100      	movs	r1, #0
     47a:	f504 7084 	add.w	r0, r4, #264	; 0x108
     47e:	f00c fedf 	bl	d240 <memset>
  exists = false;
     482:	2200      	movs	r2, #0
  moduleVolt = 0.0f;
     484:	2300      	movs	r3, #0
  lowestTemperature = 200.0f;
     486:	490b      	ldr	r1, [pc, #44]	; (4b4 <BMSModule::BMSModule()+0x5c>)
  highestTemperature = -100.0f;
     488:	480b      	ldr	r0, [pc, #44]	; (4b8 <BMSModule::BMSModule()+0x60>)
  moduleAddress = 0;
     48a:	f884 21d0 	strb.w	r2, [r4, #464]	; 0x1d0
  highestTemperature = -100.0f;
     48e:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
  moduleVolt = 0.0f;
     492:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
  temperatures[0] = 0.0f;
     496:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
  lowestTemperature = 200.0f;
     49a:	f8c4 11a4 	str.w	r1, [r4, #420]	; 0x1a4
  lowestModuleVolt = 200.0f;
     49e:	f8c4 11ac 	str.w	r1, [r4, #428]	; 0x1ac
  highestModuleVolt = 0.0f;
     4a2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
  exists = false;
     4a6:	f8a4 21b8 	strh.w	r2, [r4, #440]	; 0x1b8
}
     4aa:	4620      	mov	r0, r4
     4ac:	bd10      	pop	{r4, pc}
     4ae:	bf00      	nop
     4b0:	40a00000 	.word	0x40a00000
     4b4:	43480000 	.word	0x43480000
     4b8:	c2c80000 	.word	0xc2c80000

000004bc <BMSModule::decodeCellVoltage(int, CAN_message_t&, int, int)>:

float BMSModule::decodeCellVoltage(int cell, CAN_message_t &msg, int msb, int lsb)
{
     4bc:	b508      	push	{r3, lr}
     4be:	9c02      	ldr	r4, [sp, #8]
  if ((((msg.buf[msb] & 0x0F) << 8) + msg.buf[lsb]) > 0)
     4c0:	4413      	add	r3, r2
     4c2:	4422      	add	r2, r4
     4c4:	7a1b      	ldrb	r3, [r3, #8]
     4c6:	7a12      	ldrb	r2, [r2, #8]
     4c8:	021b      	lsls	r3, r3, #8
     4ca:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
{
     4ce:	4604      	mov	r4, r0
  {
    cellVolt[cell] = float((((msg.buf[msb] & 0x0F) << 8) + msg.buf[lsb]) * 0.00125);
     4d0:	1898      	adds	r0, r3, r2
{
     4d2:	460d      	mov	r5, r1
    cellVolt[cell] = float((((msg.buf[msb] & 0x0F) << 8) + msg.buf[lsb]) * 0.00125);
     4d4:	f00b fdde 	bl	c094 <__aeabi_i2f>
     4d8:	4902      	ldr	r1, [pc, #8]	; (4e4 <BMSModule::decodeCellVoltage(int, CAN_message_t&, int, int)+0x28>)
     4da:	f00b fe2f 	bl	c13c <__aeabi_fmul>
     4de:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
     4e2:	bf00      	nop
     4e4:	3aa3d70a 	.word	0x3aa3d70a

000004e8 <BMSModule::decodecan(int, CAN_message_t&)>:
  }
}

void BMSModule::decodecan(int Id, CAN_message_t &msg)
{
     4e8:	b510      	push	{r4, lr}
  if (0x1 < moduleAddress && moduleAddress < 0xC) // handle 8-cell frames
     4ea:	f890 31d0 	ldrb.w	r3, [r0, #464]	; 0x1d0
     4ee:	3b02      	subs	r3, #2
     4f0:	2b09      	cmp	r3, #9
{
     4f2:	b082      	sub	sp, #8
     4f4:	4604      	mov	r4, r0
     4f6:	4694      	mov	ip, r2
  if (0x1 < moduleAddress && moduleAddress < 0xC) // handle 8-cell frames
     4f8:	d81e      	bhi.n	538 <BMSModule::decodecan(int, CAN_message_t&)+0x50>
  {
    switch (Id)
     4fa:	29e0      	cmp	r1, #224	; 0xe0
     4fc:	d111      	bne.n	522 <BMSModule::decodecan(int, CAN_message_t&)+0x3a>
      decodeCellVoltage(5, msg, 2, 3);
      decodeCellVoltage(6, msg, 4, 5);
      break;

    case 0xE0:
      temperatures[0] = float(((msg.buf[6] << 8) + msg.buf[7]) * -0.0324 + 150);
     4fe:	f89c 000e 	ldrb.w	r0, [ip, #14]
     502:	f89c 300f 	ldrb.w	r3, [ip, #15]
     506:	eb03 2000 	add.w	r0, r3, r0, lsl #8
     50a:	f00b fdc3 	bl	c094 <__aeabi_i2f>
     50e:	4914      	ldr	r1, [pc, #80]	; (560 <BMSModule::decodecan(int, CAN_message_t&)+0x78>)
     510:	f00b fe14 	bl	c13c <__aeabi_fmul>
     514:	4913      	ldr	r1, [pc, #76]	; (564 <BMSModule::decodecan(int, CAN_message_t&)+0x7c>)
     516:	f00b fd09 	bl	bf2c <__addsf3>
     51a:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
    {
      highestCellVolt[i] = cellVolt[i];
    }
    }
  */
}
     51e:	b002      	add	sp, #8
     520:	bd10      	pop	{r4, pc}
    switch (Id)
     522:	dcfc      	bgt.n	51e <BMSModule::decodecan(int, CAN_message_t&)+0x36>
     524:	2960      	cmp	r1, #96	; 0x60
     526:	d014      	beq.n	552 <BMSModule::decodecan(int, CAN_message_t&)+0x6a>
     528:	2970      	cmp	r1, #112	; 0x70
     52a:	d1f8      	bne.n	51e <BMSModule::decodecan(int, CAN_message_t&)+0x36>
      decodeCellVoltage(5, msg, 0, 1);
     52c:	2301      	movs	r3, #1
     52e:	9300      	str	r3, [sp, #0]
     530:	2105      	movs	r1, #5
     532:	2300      	movs	r3, #0
     534:	f7ff ffc2 	bl	4bc <BMSModule::decodeCellVoltage(int, CAN_message_t&, int, int)>
    switch (Id)
     538:	29e0      	cmp	r1, #224	; 0xe0
     53a:	d0e0      	beq.n	4fe <BMSModule::decodecan(int, CAN_message_t&)+0x16>
     53c:	dcef      	bgt.n	51e <BMSModule::decodecan(int, CAN_message_t&)+0x36>
     53e:	2960      	cmp	r1, #96	; 0x60
     540:	d007      	beq.n	552 <BMSModule::decodecan(int, CAN_message_t&)+0x6a>
     542:	2970      	cmp	r1, #112	; 0x70
     544:	d1eb      	bne.n	51e <BMSModule::decodecan(int, CAN_message_t&)+0x36>
      decodeCellVoltage(4, msg, 0, 1);
     546:	2301      	movs	r3, #1
     548:	9300      	str	r3, [sp, #0]
     54a:	2104      	movs	r1, #4
     54c:	2300      	movs	r3, #0
     54e:	f7ff ffb5 	bl	4bc <BMSModule::decodeCellVoltage(int, CAN_message_t&, int, int)>
      decodeCellVoltage(1, msg, 0, 1);
     552:	2101      	movs	r1, #1
     554:	9100      	str	r1, [sp, #0]
     556:	2300      	movs	r3, #0
     558:	4662      	mov	r2, ip
     55a:	4620      	mov	r0, r4
     55c:	f7ff ffae 	bl	4bc <BMSModule::decodeCellVoltage(int, CAN_message_t&, int, int)>
     560:	bd04b5dd 	.word	0xbd04b5dd
     564:	43160000 	.word	0x43160000

00000568 <BMSModule::getCellsUsed()>:

int BMSModule::getCellsUsed()
{
  return cellsused;
}
     568:	f8d0 01dc 	ldr.w	r0, [r0, #476]	; 0x1dc
     56c:	4770      	bx	lr
     56e:	bf00      	nop

00000570 <BMSModule::getFaults()>:

uint8_t BMSModule::getFaults()
{
  return faults;
}
     570:	f890 01c0 	ldrb.w	r0, [r0, #448]	; 0x1c0
     574:	4770      	bx	lr
     576:	bf00      	nop

00000578 <BMSModule::getAlerts()>:

uint8_t BMSModule::getAlerts()
{
  return alerts;
}
     578:	f890 01bc 	ldrb.w	r0, [r0, #444]	; 0x1bc
     57c:	4770      	bx	lr
     57e:	bf00      	nop

00000580 <BMSModule::getCOVCells()>:

uint8_t BMSModule::getCOVCells()
{
  return COVFaults;
}
     580:	f890 01c4 	ldrb.w	r0, [r0, #452]	; 0x1c4
     584:	4770      	bx	lr
     586:	bf00      	nop

00000588 <BMSModule::getCUVCells()>:

uint8_t BMSModule::getCUVCells()
{
  return CUVFaults;
}
     588:	f890 01c8 	ldrb.w	r0, [r0, #456]	; 0x1c8
     58c:	4770      	bx	lr
     58e:	bf00      	nop

00000590 <BMSModule::getCellVoltage(int)>:

float BMSModule::getCellVoltage(int cell)
{
  if (cell < 0 || cell > 32)
     590:	2920      	cmp	r1, #32
    return 0.0f;
  return cellVolt[cell];
     592:	bf94      	ite	ls
     594:	f850 0021 	ldrls.w	r0, [r0, r1, lsl #2]
    return 0.0f;
     598:	2000      	movhi	r0, #0
}
     59a:	4770      	bx	lr

0000059c <BMSModule::getLowCellV()>:

float BMSModule::getLowCellV()
{
     59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  float lowVal = 10.0f;
     5a0:	4e0c      	ldr	r6, [pc, #48]	; (5d4 <BMSModule::getLowCellV()+0x38>)
{
     5a2:	4680      	mov	r8, r0
     5a4:	1f05      	subs	r5, r0, #4
     5a6:	f100 077c 	add.w	r7, r0, #124	; 0x7c
  for (int i = 0; i < 32; i++)
    if (cellVolt[i] < lowVal && cellVolt[i] > IgnoreCell)
     5aa:	f855 4f04 	ldr.w	r4, [r5, #4]!
     5ae:	4631      	mov	r1, r6
     5b0:	4620      	mov	r0, r4
     5b2:	f00b ff61 	bl	c478 <__aeabi_fcmplt>
     5b6:	4603      	mov	r3, r0
     5b8:	4620      	mov	r0, r4
     5ba:	b12b      	cbz	r3, 5c8 <BMSModule::getLowCellV()+0x2c>
     5bc:	f8d8 11b4 	ldr.w	r1, [r8, #436]	; 0x1b4
     5c0:	f00b ff78 	bl	c4b4 <__aeabi_fcmpgt>
     5c4:	b100      	cbz	r0, 5c8 <BMSModule::getLowCellV()+0x2c>
      lowVal = cellVolt[i];
     5c6:	4626      	mov	r6, r4
  for (int i = 0; i < 32; i++)
     5c8:	42bd      	cmp	r5, r7
     5ca:	d1ee      	bne.n	5aa <BMSModule::getLowCellV()+0xe>
  return lowVal;
}
     5cc:	4630      	mov	r0, r6
     5ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     5d2:	bf00      	nop
     5d4:	41200000 	.word	0x41200000

000005d8 <BMSModule::getHighCellV()>:

float BMSModule::getHighCellV()
{
     5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  float hiVal = 0.0f;
  for (int i = 0; i < 32; i++)
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 60.0)
     5dc:	f8d0 81b4 	ldr.w	r8, [r0, #436]	; 0x1b4
     5e0:	4f0f      	ldr	r7, [pc, #60]	; (620 <BMSModule::getHighCellV()+0x48>)
  float hiVal = 0.0f;
     5e2:	f04f 0900 	mov.w	r9, #0
     5e6:	1f05      	subs	r5, r0, #4
     5e8:	f100 067c 	add.w	r6, r0, #124	; 0x7c
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 60.0)
     5ec:	f855 4f04 	ldr.w	r4, [r5, #4]!
     5f0:	4641      	mov	r1, r8
     5f2:	4620      	mov	r0, r4
     5f4:	f00b ff5e 	bl	c4b4 <__aeabi_fcmpgt>
     5f8:	4603      	mov	r3, r0
     5fa:	4639      	mov	r1, r7
     5fc:	4620      	mov	r0, r4
     5fe:	b14b      	cbz	r3, 614 <BMSModule::getHighCellV()+0x3c>
     600:	f00b ff3a 	bl	c478 <__aeabi_fcmplt>
     604:	4603      	mov	r3, r0
    {
      if (cellVolt[i] > hiVal)
     606:	4649      	mov	r1, r9
     608:	4620      	mov	r0, r4
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 60.0)
     60a:	b11b      	cbz	r3, 614 <BMSModule::getHighCellV()+0x3c>
      if (cellVolt[i] > hiVal)
     60c:	f00b ff52 	bl	c4b4 <__aeabi_fcmpgt>
     610:	b100      	cbz	r0, 614 <BMSModule::getHighCellV()+0x3c>
        hiVal = cellVolt[i];
     612:	46a1      	mov	r9, r4
  for (int i = 0; i < 32; i++)
     614:	42b5      	cmp	r5, r6
     616:	d1e9      	bne.n	5ec <BMSModule::getHighCellV()+0x14>
    }
  return hiVal;
}
     618:	4648      	mov	r0, r9
     61a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     61e:	bf00      	nop
     620:	42700000 	.word	0x42700000

00000624 <BMSModule::getAverageV()>:

float BMSModule::getAverageV()
{
     624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     628:	b083      	sub	sp, #12
  int x = 0;
  cellsused = 0;
     62a:	2500      	movs	r5, #0
  float avgVal = 0.0f;
  for (int i = 0; i < 32; i++)
  {
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 60.0)
     62c:	f8d0 91b4 	ldr.w	r9, [r0, #436]	; 0x1b4
     630:	4f18      	ldr	r7, [pc, #96]	; (694 <BMSModule::getAverageV()+0x70>)
{
     632:	9001      	str	r0, [sp, #4]
  cellsused = 0;
     634:	f8c0 51dc 	str.w	r5, [r0, #476]	; 0x1dc
  for (int i = 0; i < 32; i++)
     638:	1f04      	subs	r4, r0, #4
     63a:	f100 087c 	add.w	r8, r0, #124	; 0x7c
  float avgVal = 0.0f;
     63e:	2600      	movs	r6, #0
  int x = 0;
     640:	46aa      	mov	sl, r5
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 60.0)
     642:	f854 bf04 	ldr.w	fp, [r4, #4]!
     646:	4649      	mov	r1, r9
     648:	4658      	mov	r0, fp
     64a:	f00b ff33 	bl	c4b4 <__aeabi_fcmpgt>
     64e:	4602      	mov	r2, r0
     650:	4639      	mov	r1, r7
     652:	4658      	mov	r0, fp
     654:	b162      	cbz	r2, 670 <BMSModule::getAverageV()+0x4c>
     656:	f00b ff0f 	bl	c478 <__aeabi_fcmplt>
     65a:	b148      	cbz	r0, 670 <BMSModule::getAverageV()+0x4c>
    {
      x++;
      avgVal += cellVolt[i];
     65c:	4630      	mov	r0, r6
     65e:	4659      	mov	r1, fp
     660:	f00b fc64 	bl	bf2c <__addsf3>
      cellsused = i;
     664:	9b01      	ldr	r3, [sp, #4]
      x++;
     666:	f10a 0a01 	add.w	sl, sl, #1
      cellsused = i;
     66a:	f8c3 51dc 	str.w	r5, [r3, #476]	; 0x1dc
      avgVal += cellVolt[i];
     66e:	4606      	mov	r6, r0
  for (int i = 0; i < 32; i++)
     670:	4544      	cmp	r4, r8
     672:	f105 0501 	add.w	r5, r5, #1
     676:	d1e4      	bne.n	642 <BMSModule::getAverageV()+0x1e>
    }
  }

  scells = x;
     678:	9b01      	ldr	r3, [sp, #4]
  avgVal /= x;
     67a:	4650      	mov	r0, sl
  scells = x;
     67c:	f8c3 a1d4 	str.w	sl, [r3, #468]	; 0x1d4
  avgVal /= x;
     680:	f00b fd08 	bl	c094 <__aeabi_i2f>
     684:	4601      	mov	r1, r0
     686:	4630      	mov	r0, r6
     688:	f00b fe0c 	bl	c2a4 <__aeabi_fdiv>
  return avgVal;
}
     68c:	b003      	add	sp, #12
     68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     692:	bf00      	nop
     694:	42700000 	.word	0x42700000

00000698 <BMSModule::getscells()>:

int BMSModule::getscells()
{
  return scells;
}
     698:	f8d0 01d4 	ldr.w	r0, [r0, #468]	; 0x1d4
     69c:	4770      	bx	lr
     69e:	bf00      	nop

000006a0 <BMSModule::getLowTemp()>:
}

float BMSModule::getLowTemp()
{
  return (temperatures[0]);
}
     6a0:	f8d0 0190 	ldr.w	r0, [r0, #400]	; 0x190
     6a4:	4770      	bx	lr
     6a6:	bf00      	nop

000006a8 <BMSModule::getHighTemp()>:
     6a8:	f8d0 0190 	ldr.w	r0, [r0, #400]	; 0x190
     6ac:	4770      	bx	lr
     6ae:	bf00      	nop

000006b0 <BMSModule::getAvgTemp()>:
     6b0:	f8d0 0190 	ldr.w	r0, [r0, #400]	; 0x190
     6b4:	4770      	bx	lr
     6b6:	bf00      	nop

000006b8 <BMSModule::getModuleVoltage()>:
{
  return (temperatures[0]);
}

float BMSModule::getModuleVoltage()
{
     6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  moduleVolt = 0;
     6bc:	2600      	movs	r6, #0
  for (int I; I < 32; I++)
  {
    if (cellVolt[I] > IgnoreCell && cellVolt[I] < 60.0)
     6be:	f8d0 91b4 	ldr.w	r9, [r0, #436]	; 0x1b4
     6c2:	4f10      	ldr	r7, [pc, #64]	; (704 <BMSModule::getModuleVoltage()+0x4c>)
  moduleVolt = 0;
     6c4:	f8c0 618c 	str.w	r6, [r0, #396]	; 0x18c
{
     6c8:	4682      	mov	sl, r0
     6ca:	1f05      	subs	r5, r0, #4
     6cc:	f100 087c 	add.w	r8, r0, #124	; 0x7c
    if (cellVolt[I] > IgnoreCell && cellVolt[I] < 60.0)
     6d0:	f855 4f04 	ldr.w	r4, [r5, #4]!
     6d4:	4649      	mov	r1, r9
     6d6:	4620      	mov	r0, r4
     6d8:	f00b feec 	bl	c4b4 <__aeabi_fcmpgt>
     6dc:	4603      	mov	r3, r0
     6de:	4639      	mov	r1, r7
     6e0:	4620      	mov	r0, r4
     6e2:	b153      	cbz	r3, 6fa <BMSModule::getModuleVoltage()+0x42>
     6e4:	f00b fec8 	bl	c478 <__aeabi_fcmplt>
     6e8:	4603      	mov	r3, r0
    {
      moduleVolt = moduleVolt + cellVolt[I];
     6ea:	4621      	mov	r1, r4
     6ec:	4630      	mov	r0, r6
    if (cellVolt[I] > IgnoreCell && cellVolt[I] < 60.0)
     6ee:	b123      	cbz	r3, 6fa <BMSModule::getModuleVoltage()+0x42>
      moduleVolt = moduleVolt + cellVolt[I];
     6f0:	f00b fc1c 	bl	bf2c <__addsf3>
     6f4:	4606      	mov	r6, r0
     6f6:	f8ca 018c 	str.w	r0, [sl, #396]	; 0x18c
  for (int I; I < 32; I++)
     6fa:	4545      	cmp	r5, r8
     6fc:	d1e8      	bne.n	6d0 <BMSModule::getModuleVoltage()+0x18>
    }
  }
  return moduleVolt;
}
     6fe:	4630      	mov	r0, r6
     700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     704:	42700000 	.word	0x42700000

00000708 <BMSModule::getTemperature(int)>:

float BMSModule::getTemperature(int temp)
{
  if (temp < 0 || temp > 2)
     708:	2902      	cmp	r1, #2
    return 0.0f;
  return temperatures[temp];
     70a:	bf9a      	itte	ls
     70c:	3164      	addls	r1, #100	; 0x64
     70e:	f850 0021 	ldrls.w	r0, [r0, r1, lsl #2]
    return 0.0f;
     712:	2000      	movhi	r0, #0
}
     714:	4770      	bx	lr
     716:	bf00      	nop

00000718 <BMSModule::setAddress(int)>:

void BMSModule::setAddress(int newAddr)
{
  if (newAddr < 0 || newAddr > MAX_MODULE_ADDR)
     718:	2910      	cmp	r1, #16
    return;
  moduleAddress = newAddr;
     71a:	bf98      	it	ls
     71c:	f880 11d0 	strbls.w	r1, [r0, #464]	; 0x1d0
}
     720:	4770      	bx	lr
     722:	bf00      	nop

00000724 <BMSModule::isExisting()>:
}

bool BMSModule::isExisting()
{
  return exists;
}
     724:	f890 01b8 	ldrb.w	r0, [r0, #440]	; 0x1b8
     728:	4770      	bx	lr
     72a:	bf00      	nop

0000072c <BMSModule::settempsensor(int)>:
  return reset;
}

void BMSModule::settempsensor(int tempsensor)
{
  sensor = tempsensor;
     72c:	f8c0 11cc 	str.w	r1, [r0, #460]	; 0x1cc
}
     730:	4770      	bx	lr
     732:	bf00      	nop

00000734 <BMSModule::setExists(bool)>:

void BMSModule::setExists(bool ex)
{
  exists = ex;
     734:	f880 11b8 	strb.w	r1, [r0, #440]	; 0x1b8
}
     738:	4770      	bx	lr
     73a:	bf00      	nop

0000073c <BMSModule::setReset(bool)>:

void BMSModule::setReset(bool ex)
{
  reset = ex;
     73c:	f880 11b9 	strb.w	r1, [r0, #441]	; 0x1b9
}
     740:	4770      	bx	lr
     742:	bf00      	nop

00000744 <BMSModule::setIgnoreCell(float)>:

void BMSModule::setIgnoreCell(float Ignore)
{
     744:	b510      	push	{r4, lr}
  IgnoreCell = Ignore;
     746:	f8c0 11b4 	str.w	r1, [r0, #436]	; 0x1b4
{
     74a:	b082      	sub	sp, #8
  Serial.print(Ignore);
     74c:	4608      	mov	r0, r1
     74e:	f00b fad1 	bl	bcf4 <__aeabi_f2d>
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int64_t n, int base)		{ return (base == 10) ? print(n) : printNumber64(n, base, 0); }
	size_t print(uint64_t n, int base)		{ return printNumber64(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     752:	4c07      	ldr	r4, [pc, #28]	; (770 <BMSModule::setIgnoreCell(float)+0x2c>)
     754:	460b      	mov	r3, r1
     756:	2102      	movs	r1, #2
     758:	4602      	mov	r2, r0
     75a:	9100      	str	r1, [sp, #0]
     75c:	4620      	mov	r0, r4
     75e:	f008 f987 	bl	8a70 <Print::printFloat(double, unsigned char)>
  Serial.println();
     762:	4620      	mov	r0, r4
}
     764:	b002      	add	sp, #8
     766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial.println();
     76a:	f008 b95d 	b.w	8a28 <Print::println()>
     76e:	bf00      	nop
     770:	1fff880c 	.word	0x1fff880c

00000774 <BMSModuleManager::BMSModuleManager()>:
BMSModuleManager::BMSModuleManager()
     774:	b570      	push	{r4, r5, r6, lr}
     776:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
     77a:	4606      	mov	r6, r0
     77c:	f100 0438 	add.w	r4, r0, #56	; 0x38
     780:	3518      	adds	r5, #24
     782:	4620      	mov	r0, r4
     784:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
     788:	f7ff fe66 	bl	458 <BMSModule::BMSModule()>
     78c:	42ac      	cmp	r4, r5
     78e:	d1f8      	bne.n	782 <BMSModuleManager::BMSModuleManager()+0xe>
     790:	f506 7506 	add.w	r5, r6, #536	; 0x218
  for (int i = 1; i <= MAX_MODULE_ADDR; i++)
     794:	2401      	movs	r4, #1
    modules[i].setExists(false);
     796:	4628      	mov	r0, r5
     798:	2100      	movs	r1, #0
     79a:	f7ff ffcb 	bl	734 <BMSModule::setExists(bool)>
    modules[i].setAddress(i);
     79e:	4621      	mov	r1, r4
     7a0:	4628      	mov	r0, r5
  for (int i = 1; i <= MAX_MODULE_ADDR; i++)
     7a2:	3401      	adds	r4, #1
    modules[i].setAddress(i);
     7a4:	f7ff ffb8 	bl	718 <BMSModule::setAddress(int)>
  for (int i = 1; i <= MAX_MODULE_ADDR; i++)
     7a8:	2c11      	cmp	r4, #17
     7aa:	f505 75f0 	add.w	r5, r5, #480	; 0x1e0
     7ae:	d1f2      	bne.n	796 <BMSModuleManager::BMSModuleManager()+0x22>
  lowestPackVolt = 1000.0f;
     7b0:	4907      	ldr	r1, [pc, #28]	; (7d0 <BMSModuleManager::BMSModuleManager()+0x5c>)
     7b2:	6231      	str	r1, [r6, #32]
  isFaulted = false;
     7b4:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
  highestPackVolt = 0.0f;
     7b8:	2200      	movs	r2, #0
     7ba:	6272      	str	r2, [r6, #36]	; 0x24
  lowestPackTemp = 200.0f;
     7bc:	4805      	ldr	r0, [pc, #20]	; (7d4 <BMSModuleManager::BMSModuleManager()+0x60>)
  highestPackTemp = -100.0f;
     7be:	4906      	ldr	r1, [pc, #24]	; (7d8 <BMSModuleManager::BMSModuleManager()+0x64>)
  lowestPackTemp = 200.0f;
     7c0:	62b0      	str	r0, [r6, #40]	; 0x28
  isFaulted = false;
     7c2:	2200      	movs	r2, #0
  highestPackTemp = -100.0f;
     7c4:	62f1      	str	r1, [r6, #44]	; 0x2c
}
     7c6:	4630      	mov	r0, r6
  isFaulted = false;
     7c8:	f883 2020 	strb.w	r2, [r3, #32]
}
     7cc:	bd70      	pop	{r4, r5, r6, pc}
     7ce:	bf00      	nop
     7d0:	447a0000 	.word	0x447a0000
     7d4:	43480000 	.word	0x43480000
     7d8:	c2c80000 	.word	0xc2c80000

000007dc <BMSModuleManager::seriescells()>:
{
     7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  spack = 0;
     7de:	f500 5700 	add.w	r7, r0, #8192	; 0x2000
     7e2:	2300      	movs	r3, #0
     7e4:	f500 56f1 	add.w	r6, r0, #7712	; 0x1e20
     7e8:	627b      	str	r3, [r7, #36]	; 0x24
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
     7ea:	f500 7406 	add.w	r4, r0, #536	; 0x218
     7ee:	3618      	adds	r6, #24
     7f0:	e003      	b.n	7fa <BMSModuleManager::seriescells()+0x1e>
     7f2:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
     7f6:	42b4      	cmp	r4, r6
     7f8:	d00e      	beq.n	818 <BMSModuleManager::seriescells()+0x3c>
    if (modules[y].isExisting())
     7fa:	4620      	mov	r0, r4
     7fc:	f7ff ff92 	bl	724 <BMSModule::isExisting()>
     800:	2800      	cmp	r0, #0
     802:	d0f6      	beq.n	7f2 <BMSModuleManager::seriescells()+0x16>
      spack = spack + modules[y].getscells();
     804:	4620      	mov	r0, r4
     806:	6a7d      	ldr	r5, [r7, #36]	; 0x24
     808:	f7ff ff46 	bl	698 <BMSModule::getscells()>
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
     80c:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
      spack = spack + modules[y].getscells();
     810:	4405      	add	r5, r0
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
     812:	42b4      	cmp	r4, r6
      spack = spack + modules[y].getscells();
     814:	627d      	str	r5, [r7, #36]	; 0x24
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
     816:	d1f0      	bne.n	7fa <BMSModuleManager::seriescells()+0x1e>
}
     818:	6a78      	ldr	r0, [r7, #36]	; 0x24
     81a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000081c <BMSModuleManager::decodecan(CAN_message_t&)>:
{
     81c:	b570      	push	{r4, r5, r6, lr}
  CMU = (msg.id & 0x00F) + 1;
     81e:	680e      	ldr	r6, [r1, #0]
{
     820:	460d      	mov	r5, r1
  CMU = (msg.id & 0x00F) + 1;
     822:	f006 030f 	and.w	r3, r6, #15
  modules[CMU].setExists(true);
     826:	2101      	movs	r1, #1
  CMU = (msg.id & 0x00F) + 1;
     828:	440b      	add	r3, r1
  modules[CMU].setExists(true);
     82a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
     82e:	eb00 1443 	add.w	r4, r0, r3, lsl #5
     832:	3438      	adds	r4, #56	; 0x38
     834:	4620      	mov	r0, r4
     836:	f7ff ff7d 	bl	734 <BMSModule::setExists(bool)>
  modules[CMU].setReset(true);
     83a:	4620      	mov	r0, r4
     83c:	2101      	movs	r1, #1
     83e:	f7ff ff7d 	bl	73c <BMSModule::setReset(bool)>
  modules[CMU].decodecan(Id, msg);
     842:	462a      	mov	r2, r5
     844:	f006 01f0 	and.w	r1, r6, #240	; 0xf0
     848:	4620      	mov	r0, r4
}
     84a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  modules[CMU].decodecan(Id, msg);
     84e:	f7ff be4b 	b.w	4e8 <BMSModule::decodecan(int, CAN_message_t&)>
     852:	bf00      	nop

00000854 <BMSModuleManager::getAllVoltTemp()>:
{
     854:	b570      	push	{r4, r5, r6, lr}
  packVolt = 0.0f;
     856:	2300      	movs	r3, #0
     858:	f500 5600 	add.w	r6, r0, #8192	; 0x2000
{
     85c:	4605      	mov	r5, r0
  packVolt = 0.0f;
     85e:	6103      	str	r3, [r0, #16]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     860:	f500 7406 	add.w	r4, r0, #536	; 0x218
     864:	3618      	adds	r6, #24
     866:	e003      	b.n	870 <BMSModuleManager::getAllVoltTemp()+0x1c>
     868:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
     86c:	42a6      	cmp	r6, r4
     86e:	d023      	beq.n	8b8 <BMSModuleManager::getAllVoltTemp()+0x64>
    if (modules[x].isExisting())
     870:	4620      	mov	r0, r4
     872:	f7ff ff57 	bl	724 <BMSModule::isExisting()>
     876:	2800      	cmp	r0, #0
     878:	d0f6      	beq.n	868 <BMSModuleManager::getAllVoltTemp()+0x14>
      packVolt += modules[x].getModuleVoltage();
     87a:	4620      	mov	r0, r4
     87c:	f7ff ff1c 	bl	6b8 <BMSModule::getModuleVoltage()>
     880:	4601      	mov	r1, r0
     882:	6928      	ldr	r0, [r5, #16]
     884:	f00b fb52 	bl	bf2c <__addsf3>
     888:	6128      	str	r0, [r5, #16]
      if (modules[x].getLowTemp() < lowestPackTemp)
     88a:	4620      	mov	r0, r4
     88c:	f7ff ff08 	bl	6a0 <BMSModule::getLowTemp()>
     890:	6aa9      	ldr	r1, [r5, #40]	; 0x28
     892:	f00b fdf1 	bl	c478 <__aeabi_fcmplt>
     896:	bb20      	cbnz	r0, 8e2 <BMSModuleManager::getAllVoltTemp()+0x8e>
      if (modules[x].getHighTemp() > highestPackTemp)
     898:	4620      	mov	r0, r4
     89a:	f7ff ff05 	bl	6a8 <BMSModule::getHighTemp()>
     89e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
     8a0:	f00b fe08 	bl	c4b4 <__aeabi_fcmpgt>
     8a4:	2800      	cmp	r0, #0
     8a6:	d0df      	beq.n	868 <BMSModuleManager::getAllVoltTemp()+0x14>
        highestPackTemp = modules[x].getHighTemp();
     8a8:	4620      	mov	r0, r4
     8aa:	f7ff fefd 	bl	6a8 <BMSModule::getHighTemp()>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     8ae:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
     8b2:	42a6      	cmp	r6, r4
        highestPackTemp = modules[x].getHighTemp();
     8b4:	62e8      	str	r0, [r5, #44]	; 0x2c
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     8b6:	d1db      	bne.n	870 <BMSModuleManager::getAllVoltTemp()+0x1c>
  packVolt = packVolt / Pstring;
     8b8:	6968      	ldr	r0, [r5, #20]
     8ba:	f00b fbeb 	bl	c094 <__aeabi_i2f>
     8be:	4601      	mov	r1, r0
     8c0:	6928      	ldr	r0, [r5, #16]
     8c2:	f00b fcef 	bl	c2a4 <__aeabi_fdiv>
  if (packVolt > highestPackVolt)
     8c6:	6a69      	ldr	r1, [r5, #36]	; 0x24
  packVolt = packVolt / Pstring;
     8c8:	6128      	str	r0, [r5, #16]
     8ca:	4604      	mov	r4, r0
  if (packVolt > highestPackVolt)
     8cc:	f00b fdf2 	bl	c4b4 <__aeabi_fcmpgt>
     8d0:	b100      	cbz	r0, 8d4 <BMSModuleManager::getAllVoltTemp()+0x80>
    highestPackVolt = packVolt;
     8d2:	626c      	str	r4, [r5, #36]	; 0x24
  if (packVolt < lowestPackVolt)
     8d4:	6a29      	ldr	r1, [r5, #32]
     8d6:	4620      	mov	r0, r4
     8d8:	f00b fdce 	bl	c478 <__aeabi_fcmplt>
     8dc:	b100      	cbz	r0, 8e0 <BMSModuleManager::getAllVoltTemp()+0x8c>
    lowestPackVolt = packVolt;
     8de:	622c      	str	r4, [r5, #32]
}
     8e0:	bd70      	pop	{r4, r5, r6, pc}
        lowestPackTemp = modules[x].getLowTemp();
     8e2:	4620      	mov	r0, r4
     8e4:	f7ff fedc 	bl	6a0 <BMSModule::getLowTemp()>
     8e8:	62a8      	str	r0, [r5, #40]	; 0x28
     8ea:	e7d5      	b.n	898 <BMSModuleManager::getAllVoltTemp()+0x44>

000008ec <BMSModuleManager::balanceCells()>:
{
     8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8f0:	f100 0308 	add.w	r3, r0, #8
     8f4:	b087      	sub	sp, #28
     8f6:	4607      	mov	r7, r0
    msg.buf[c] = 0;
     8f8:	2208      	movs	r2, #8
     8fa:	4618      	mov	r0, r3
     8fc:	2100      	movs	r1, #0
     8fe:	4699      	mov	r9, r3
     900:	9305      	str	r3, [sp, #20]
     902:	f507 7b06 	add.w	fp, r7, #536	; 0x218
     906:	f00c fc9b 	bl	d240 <memset>
     90a:	f507 5500 	add.w	r5, r7, #8192	; 0x2000
     90e:	f107 0311 	add.w	r3, r7, #17
     912:	9301      	str	r3, [sp, #4]
     914:	3518      	adds	r5, #24
     916:	46d8      	mov	r8, fp
     918:	f8cd b010 	str.w	fp, [sp, #16]
     91c:	9702      	str	r7, [sp, #8]
     91e:	e006      	b.n	92e <BMSModuleManager::balanceCells()+0x42>
  for (int y = 1; y <= 9; y++)
     920:	9b01      	ldr	r3, [sp, #4]
     922:	f109 0901 	add.w	r9, r9, #1
     926:	454b      	cmp	r3, r9
     928:	f508 78f0 	add.w	r8, r8, #480	; 0x1e0
     92c:	d04e      	beq.n	9cc <BMSModuleManager::balanceCells()+0xe0>
    if (modules[y].isExisting() == 1)
     92e:	4640      	mov	r0, r8
     930:	f7ff fef8 	bl	724 <BMSModule::isExisting()>
     934:	2800      	cmp	r0, #0
     936:	d0f3      	beq.n	920 <BMSModuleManager::balanceCells()+0x34>
     938:	9b02      	ldr	r3, [sp, #8]
          balance = balance | (1 << (i - 1));
     93a:	f8dd b010 	ldr.w	fp, [sp, #16]
     93e:	f8cd 900c 	str.w	r9, [sp, #12]
      for (int i = 1; i < 9; i++)
     942:	2601      	movs	r6, #1
      int balance = 0;
     944:	2700      	movs	r7, #0
     946:	f503 5a00 	add.w	sl, r3, #8192	; 0x2000
    msg.buf[c] = 0;
     94a:	46d9      	mov	r9, fp
  float avg = 0.0f;
     94c:	2400      	movs	r4, #0
     94e:	e003      	b.n	958 <BMSModuleManager::balanceCells()+0x6c>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     950:	f509 79f0 	add.w	r9, r9, #480	; 0x1e0
     954:	454d      	cmp	r5, r9
     956:	d010      	beq.n	97a <BMSModuleManager::balanceCells()+0x8e>
    if (modules[x].isExisting())
     958:	4648      	mov	r0, r9
     95a:	f7ff fee3 	bl	724 <BMSModule::isExisting()>
     95e:	2800      	cmp	r0, #0
     960:	d0f6      	beq.n	950 <BMSModuleManager::balanceCells()+0x64>
      avg += modules[x].getAverageV();
     962:	4648      	mov	r0, r9
     964:	f7ff fe5e 	bl	624 <BMSModule::getAverageV()>
     968:	4601      	mov	r1, r0
     96a:	4620      	mov	r0, r4
     96c:	f00b fade 	bl	bf2c <__addsf3>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     970:	f509 79f0 	add.w	r9, r9, #480	; 0x1e0
     974:	454d      	cmp	r5, r9
      avg += modules[x].getAverageV();
     976:	4604      	mov	r4, r0
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     978:	d1ee      	bne.n	958 <BMSModuleManager::balanceCells()+0x6c>
  avg = avg / (float)numFoundModules;
     97a:	f8da 001c 	ldr.w	r0, [sl, #28]
     97e:	f00b fb89 	bl	c094 <__aeabi_i2f>
     982:	4601      	mov	r1, r0
     984:	4620      	mov	r0, r4
     986:	f00b fc8d 	bl	c2a4 <__aeabi_fdiv>
        if (getAvgCellVolt() < modules[y].getCellVoltage(i))
     98a:	4631      	mov	r1, r6
  avg = avg / (float)numFoundModules;
     98c:	4604      	mov	r4, r0
        if (getAvgCellVolt() < modules[y].getCellVoltage(i))
     98e:	4640      	mov	r0, r8
     990:	f7ff fdfe 	bl	590 <BMSModule::getCellVoltage(int)>
     994:	4621      	mov	r1, r4
     996:	f00b fd8d 	bl	c4b4 <__aeabi_fcmpgt>
     99a:	b120      	cbz	r0, 9a6 <BMSModuleManager::balanceCells()+0xba>
          balance = balance | (1 << (i - 1));
     99c:	1e73      	subs	r3, r6, #1
     99e:	2201      	movs	r2, #1
     9a0:	fa02 f303 	lsl.w	r3, r2, r3
     9a4:	431f      	orrs	r7, r3
      for (int i = 1; i < 9; i++)
     9a6:	3601      	adds	r6, #1
     9a8:	2e09      	cmp	r6, #9
     9aa:	d1ce      	bne.n	94a <BMSModuleManager::balanceCells()+0x5e>
      if (y == 9) // hack for missing module #8
     9ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
     9b0:	9b02      	ldr	r3, [sp, #8]
     9b2:	eba9 0303 	sub.w	r3, r9, r3
     9b6:	2b10      	cmp	r3, #16
     9b8:	d00c      	beq.n	9d4 <BMSModuleManager::balanceCells()+0xe8>
  for (int y = 1; y <= 9; y++)
     9ba:	9b01      	ldr	r3, [sp, #4]
        msg.buf[y - 1] = balance;
     9bc:	f889 7000 	strb.w	r7, [r9]
  for (int y = 1; y <= 9; y++)
     9c0:	f109 0901 	add.w	r9, r9, #1
     9c4:	454b      	cmp	r3, r9
     9c6:	f508 78f0 	add.w	r8, r8, #480	; 0x1e0
     9ca:	d1b0      	bne.n	92e <BMSModuleManager::balanceCells()+0x42>
     9cc:	f8dd b010 	ldr.w	fp, [sp, #16]
     9d0:	9f02      	ldr	r7, [sp, #8]
     9d2:	e004      	b.n	9de <BMSModuleManager::balanceCells()+0xf2>
        msg.buf[y - 2] = balance;
     9d4:	463b      	mov	r3, r7
     9d6:	9f02      	ldr	r7, [sp, #8]
     9d8:	f8dd b010 	ldr.w	fp, [sp, #16]
     9dc:	73fb      	strb	r3, [r7, #15]
  msg.id = 0x300;
     9de:	f44f 7240 	mov.w	r2, #768	; 0x300
  msg.len = 8;
     9e2:	2308      	movs	r3, #8
  msg.id = 0x300;
     9e4:	603a      	str	r2, [r7, #0]
  msg.len = 8;
     9e6:	71fb      	strb	r3, [r7, #7]
     9e8:	211a      	movs	r1, #26
     9ea:	4872      	ldr	r0, [pc, #456]	; (bb4 <BMSModuleManager::balanceCells()+0x2c8>)
     9ec:	f00a fcc6 	bl	b37c <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
     9f0:	2300      	movs	r3, #0
     9f2:	2210      	movs	r2, #16
     9f4:	6839      	ldr	r1, [r7, #0]
     9f6:	4870      	ldr	r0, [pc, #448]	; (bb8 <BMSModuleManager::balanceCells()+0x2cc>)
     9f8:	f008 f82e 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     9fc:	2104      	movs	r1, #4
     9fe:	486f      	ldr	r0, [pc, #444]	; (bbc <BMSModuleManager::balanceCells()+0x2d0>)
     a00:	f00a fcbc 	bl	b37c <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     a04:	486c      	ldr	r0, [pc, #432]	; (bb8 <BMSModuleManager::balanceCells()+0x2cc>)
     a06:	f008 f80f 	bl	8a28 <Print::println()>
  for (byte i = 0; i < msg.len; i++)
     a0a:	79fb      	ldrb	r3, [r7, #7]
     a0c:	b323      	cbz	r3, a58 <BMSModuleManager::balanceCells()+0x16c>
     a0e:	2500      	movs	r5, #0
     a10:	f8df 81ac 	ldr.w	r8, [pc, #428]	; bc0 <BMSModuleManager::balanceCells()+0x2d4>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     a14:	4e68      	ldr	r6, [pc, #416]	; (bb8 <BMSModuleManager::balanceCells()+0x2cc>)
     a16:	462c      	mov	r4, r5
     a18:	2109      	movs	r1, #9
     a1a:	4640      	mov	r0, r8
     a1c:	f00a fcae 	bl	b37c <usb_serial_write>
     a20:	2300      	movs	r3, #0
     a22:	220a      	movs	r2, #10
     a24:	4621      	mov	r1, r4
     a26:	4630      	mov	r0, r6
    SERIALCONSOLE.print(msg.buf[i], BIN);
     a28:	443c      	add	r4, r7
     a2a:	f008 f815 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     a2e:	2105      	movs	r1, #5
     a30:	4864      	ldr	r0, [pc, #400]	; (bc4 <BMSModuleManager::balanceCells()+0x2d8>)
     a32:	f00a fca3 	bl	b37c <usb_serial_write>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     a36:	7a21      	ldrb	r1, [r4, #8]
     a38:	2300      	movs	r3, #0
     a3a:	2202      	movs	r2, #2
     a3c:	4630      	mov	r0, r6
     a3e:	f008 f80b 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     a42:	2020      	movs	r0, #32
     a44:	f00a fd1e 	bl	b484 <usb_serial_putchar>
	size_t println(char c)				{ return print(c) + println(); }
     a48:	4630      	mov	r0, r6
     a4a:	f007 ffed 	bl	8a28 <Print::println()>
  for (byte i = 0; i < msg.len; i++)
     a4e:	3501      	adds	r5, #1
     a50:	79fb      	ldrb	r3, [r7, #7]
     a52:	b2ec      	uxtb	r4, r5
     a54:	42a3      	cmp	r3, r4
     a56:	d8df      	bhi.n	a18 <BMSModuleManager::balanceCells()+0x12c>
  Can0.write(msg);
     a58:	4639      	mov	r1, r7
     a5a:	485b      	ldr	r0, [pc, #364]	; (bc8 <BMSModuleManager::balanceCells()+0x2dc>)
     a5c:	f006 fdde 	bl	761c <FlexCAN::write(CAN_message_t const&)>
    msg.buf[c] = 0;
     a60:	9805      	ldr	r0, [sp, #20]
     a62:	2208      	movs	r2, #8
     a64:	2100      	movs	r1, #0
     a66:	f00c fbeb 	bl	d240 <memset>
     a6a:	1dfb      	adds	r3, r7, #7
     a6c:	f507 5897 	add.w	r8, r7, #4832	; 0x12e0
     a70:	f507 5500 	add.w	r5, r7, #8192	; 0x2000
     a74:	9301      	str	r3, [sp, #4]
     a76:	230b      	movs	r3, #11
  float avg = 0.0f;
     a78:	9702      	str	r7, [sp, #8]
     a7a:	f108 0818 	add.w	r8, r8, #24
     a7e:	3518      	adds	r5, #24
     a80:	461f      	mov	r7, r3
     a82:	e007      	b.n	a94 <BMSModuleManager::balanceCells()+0x1a8>
  for (int y = 10; y <= 15; y++)
     a84:	2f10      	cmp	r7, #16
     a86:	d04c      	beq.n	b22 <BMSModuleManager::balanceCells()+0x236>
     a88:	9b01      	ldr	r3, [sp, #4]
     a8a:	3301      	adds	r3, #1
     a8c:	f508 78f0 	add.w	r8, r8, #480	; 0x1e0
     a90:	3701      	adds	r7, #1
     a92:	9301      	str	r3, [sp, #4]
    if (modules[y].isExisting() == 1)
     a94:	4640      	mov	r0, r8
     a96:	f7ff fe45 	bl	724 <BMSModule::isExisting()>
     a9a:	2800      	cmp	r0, #0
     a9c:	d0f2      	beq.n	a84 <BMSModuleManager::balanceCells()+0x198>
     a9e:	9b02      	ldr	r3, [sp, #8]
          balance = balance | (1 << (i - 1)); // 8 cell internal module bitshift correctly
     aa0:	9703      	str	r7, [sp, #12]
      for (int i = 1; i < 9; i++)
     aa2:	2601      	movs	r6, #1
      int balance = 0;
     aa4:	f04f 0900 	mov.w	r9, #0
     aa8:	f503 5a00 	add.w	sl, r3, #8192	; 0x2000
    msg.buf[c] = 0;
     aac:	465f      	mov	r7, fp
  float avg = 0.0f;
     aae:	2400      	movs	r4, #0
     ab0:	e003      	b.n	aba <BMSModuleManager::balanceCells()+0x1ce>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     ab2:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
     ab6:	42bd      	cmp	r5, r7
     ab8:	d010      	beq.n	adc <BMSModuleManager::balanceCells()+0x1f0>
    if (modules[x].isExisting())
     aba:	4638      	mov	r0, r7
     abc:	f7ff fe32 	bl	724 <BMSModule::isExisting()>
     ac0:	2800      	cmp	r0, #0
     ac2:	d0f6      	beq.n	ab2 <BMSModuleManager::balanceCells()+0x1c6>
      avg += modules[x].getAverageV();
     ac4:	4638      	mov	r0, r7
     ac6:	f7ff fdad 	bl	624 <BMSModule::getAverageV()>
     aca:	4601      	mov	r1, r0
     acc:	4620      	mov	r0, r4
     ace:	f00b fa2d 	bl	bf2c <__addsf3>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     ad2:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
     ad6:	42bd      	cmp	r5, r7
      avg += modules[x].getAverageV();
     ad8:	4604      	mov	r4, r0
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     ada:	d1ee      	bne.n	aba <BMSModuleManager::balanceCells()+0x1ce>
  avg = avg / (float)numFoundModules;
     adc:	f8da 001c 	ldr.w	r0, [sl, #28]
     ae0:	f00b fad8 	bl	c094 <__aeabi_i2f>
     ae4:	4601      	mov	r1, r0
     ae6:	4620      	mov	r0, r4
     ae8:	f00b fbdc 	bl	c2a4 <__aeabi_fdiv>
        if (getAvgCellVolt() < modules[y].getCellVoltage(i))
     aec:	4631      	mov	r1, r6
  avg = avg / (float)numFoundModules;
     aee:	4604      	mov	r4, r0
        if (getAvgCellVolt() < modules[y].getCellVoltage(i))
     af0:	4640      	mov	r0, r8
     af2:	f7ff fd4d 	bl	590 <BMSModule::getCellVoltage(int)>
     af6:	4621      	mov	r1, r4
     af8:	f00b fcdc 	bl	c4b4 <__aeabi_fcmpgt>
     afc:	b128      	cbz	r0, b0a <BMSModuleManager::balanceCells()+0x21e>
          balance = balance | (1 << (i - 1)); // 8 cell internal module bitshift correctly
     afe:	1e73      	subs	r3, r6, #1
     b00:	2201      	movs	r2, #1
     b02:	fa02 f303 	lsl.w	r3, r2, r3
     b06:	ea49 0903 	orr.w	r9, r9, r3
      for (int i = 1; i < 9; i++)
     b0a:	3601      	adds	r6, #1
     b0c:	2e09      	cmp	r6, #9
     b0e:	d1cd      	bne.n	aac <BMSModuleManager::balanceCells()+0x1c0>
     b10:	9f03      	ldr	r7, [sp, #12]
      if (y > 11) // hack for missing module #12
     b12:	1e7b      	subs	r3, r7, #1
     b14:	2b0b      	cmp	r3, #11
        msg.buf[y - 11] = balance;
     b16:	9b01      	ldr	r3, [sp, #4]
      if (y > 11) // hack for missing module #12
     b18:	d949      	bls.n	bae <BMSModuleManager::balanceCells()+0x2c2>
  for (int y = 10; y <= 15; y++)
     b1a:	2f10      	cmp	r7, #16
        msg.buf[y - 11] = balance;
     b1c:	f883 9000 	strb.w	r9, [r3]
  for (int y = 10; y <= 15; y++)
     b20:	d1b2      	bne.n	a88 <BMSModuleManager::balanceCells()+0x19c>
  msg.id = 0x310;
     b22:	463c      	mov	r4, r7
     b24:	9f02      	ldr	r7, [sp, #8]
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     b26:	4823      	ldr	r0, [pc, #140]	; (bb4 <BMSModuleManager::balanceCells()+0x2c8>)
     b28:	f44f 7244 	mov.w	r2, #784	; 0x310
  msg.len = 5;
     b2c:	2305      	movs	r3, #5
     b2e:	211a      	movs	r1, #26
  msg.id = 0x310;
     b30:	603a      	str	r2, [r7, #0]
  msg.len = 5;
     b32:	71fb      	strb	r3, [r7, #7]
     b34:	f00a fc22 	bl	b37c <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
     b38:	2300      	movs	r3, #0
     b3a:	4622      	mov	r2, r4
     b3c:	6839      	ldr	r1, [r7, #0]
     b3e:	481e      	ldr	r0, [pc, #120]	; (bb8 <BMSModuleManager::balanceCells()+0x2cc>)
     b40:	f007 ff8a 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     b44:	2104      	movs	r1, #4
     b46:	481d      	ldr	r0, [pc, #116]	; (bbc <BMSModuleManager::balanceCells()+0x2d0>)
     b48:	f00a fc18 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     b4c:	481a      	ldr	r0, [pc, #104]	; (bb8 <BMSModuleManager::balanceCells()+0x2cc>)
     b4e:	f007 ff6b 	bl	8a28 <Print::println()>
  for (byte i = 0; i < msg.len; i++)
     b52:	79fb      	ldrb	r3, [r7, #7]
     b54:	b323      	cbz	r3, ba0 <BMSModuleManager::balanceCells()+0x2b4>
     b56:	2500      	movs	r5, #0
     b58:	f8df 8064 	ldr.w	r8, [pc, #100]	; bc0 <BMSModuleManager::balanceCells()+0x2d4>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     b5c:	4e16      	ldr	r6, [pc, #88]	; (bb8 <BMSModuleManager::balanceCells()+0x2cc>)
     b5e:	462c      	mov	r4, r5
     b60:	2109      	movs	r1, #9
     b62:	4640      	mov	r0, r8
     b64:	f00a fc0a 	bl	b37c <usb_serial_write>
     b68:	2300      	movs	r3, #0
     b6a:	220a      	movs	r2, #10
     b6c:	4621      	mov	r1, r4
     b6e:	4630      	mov	r0, r6
    SERIALCONSOLE.print(msg.buf[i], BIN);
     b70:	443c      	add	r4, r7
     b72:	f007 ff71 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     b76:	2105      	movs	r1, #5
     b78:	4812      	ldr	r0, [pc, #72]	; (bc4 <BMSModuleManager::balanceCells()+0x2d8>)
     b7a:	f00a fbff 	bl	b37c <usb_serial_write>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     b7e:	7a21      	ldrb	r1, [r4, #8]
     b80:	2300      	movs	r3, #0
     b82:	2202      	movs	r2, #2
     b84:	4630      	mov	r0, r6
     b86:	f007 ff67 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     b8a:	2020      	movs	r0, #32
     b8c:	f00a fc7a 	bl	b484 <usb_serial_putchar>
	size_t println(char c)				{ return print(c) + println(); }
     b90:	4630      	mov	r0, r6
     b92:	f007 ff49 	bl	8a28 <Print::println()>
  for (byte i = 0; i < msg.len; i++)
     b96:	3501      	adds	r5, #1
     b98:	79fb      	ldrb	r3, [r7, #7]
     b9a:	b2ec      	uxtb	r4, r5
     b9c:	42a3      	cmp	r3, r4
     b9e:	d8df      	bhi.n	b60 <BMSModuleManager::balanceCells()+0x274>
  Can0.write(msg);
     ba0:	4809      	ldr	r0, [pc, #36]	; (bc8 <BMSModuleManager::balanceCells()+0x2dc>)
     ba2:	4639      	mov	r1, r7
}
     ba4:	b007      	add	sp, #28
     ba6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Can0.write(msg);
     baa:	f006 bd37 	b.w	761c <FlexCAN::write(CAN_message_t const&)>
        msg.buf[y - 10] = balance;
     bae:	f883 9001 	strb.w	r9, [r3, #1]
  for (int y = 10; y <= 15; y++)
     bb2:	e769      	b.n	a88 <BMSModuleManager::balanceCells()+0x19c>
     bb4:	00012e8c 	.word	0x00012e8c
     bb8:	1fff880c 	.word	0x1fff880c
     bbc:	00012ea8 	.word	0x00012ea8
     bc0:	00012eb0 	.word	0x00012eb0
     bc4:	00012ebc 	.word	0x00012ebc
     bc8:	1fffb2ec 	.word	0x1fffb2ec

00000bcc <BMSModuleManager::getLowCellVolt()>:
{
     bcc:	b570      	push	{r4, r5, r6, lr}
  LowCellVolt = 5.0;
     bce:	4b12      	ldr	r3, [pc, #72]	; (c18 <BMSModuleManager::getLowCellVolt()+0x4c>)
     bd0:	6183      	str	r3, [r0, #24]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     bd2:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
{
     bd6:	4606      	mov	r6, r0
     bd8:	f500 7406 	add.w	r4, r0, #536	; 0x218
     bdc:	3518      	adds	r5, #24
     bde:	e003      	b.n	be8 <BMSModuleManager::getLowCellVolt()+0x1c>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     be0:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
     be4:	42ac      	cmp	r4, r5
     be6:	d014      	beq.n	c12 <BMSModuleManager::getLowCellVolt()+0x46>
    if (modules[x].isExisting())
     be8:	4620      	mov	r0, r4
     bea:	f7ff fd9b 	bl	724 <BMSModule::isExisting()>
     bee:	2800      	cmp	r0, #0
     bf0:	d0f6      	beq.n	be0 <BMSModuleManager::getLowCellVolt()+0x14>
      if (modules[x].getLowCellV() < LowCellVolt)
     bf2:	4620      	mov	r0, r4
     bf4:	f7ff fcd2 	bl	59c <BMSModule::getLowCellV()>
     bf8:	69b1      	ldr	r1, [r6, #24]
     bfa:	f00b fc3d 	bl	c478 <__aeabi_fcmplt>
     bfe:	2800      	cmp	r0, #0
     c00:	d0ee      	beq.n	be0 <BMSModuleManager::getLowCellVolt()+0x14>
        LowCellVolt = modules[x].getLowCellV();
     c02:	4620      	mov	r0, r4
     c04:	f7ff fcca 	bl	59c <BMSModule::getLowCellV()>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     c08:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
     c0c:	42ac      	cmp	r4, r5
        LowCellVolt = modules[x].getLowCellV();
     c0e:	61b0      	str	r0, [r6, #24]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     c10:	d1ea      	bne.n	be8 <BMSModuleManager::getLowCellVolt()+0x1c>
}
     c12:	69b0      	ldr	r0, [r6, #24]
     c14:	bd70      	pop	{r4, r5, r6, pc}
     c16:	bf00      	nop
     c18:	40a00000 	.word	0x40a00000

00000c1c <BMSModuleManager::getHighCellVolt()>:
{
     c1c:	b570      	push	{r4, r5, r6, lr}
  HighCellVolt = 0.0;
     c1e:	2300      	movs	r3, #0
     c20:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
{
     c24:	4606      	mov	r6, r0
  HighCellVolt = 0.0;
     c26:	61c3      	str	r3, [r0, #28]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     c28:	f500 7406 	add.w	r4, r0, #536	; 0x218
     c2c:	3518      	adds	r5, #24
     c2e:	e003      	b.n	c38 <BMSModuleManager::getHighCellVolt()+0x1c>
     c30:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
     c34:	42ac      	cmp	r4, r5
     c36:	d014      	beq.n	c62 <BMSModuleManager::getHighCellVolt()+0x46>
    if (modules[x].isExisting())
     c38:	4620      	mov	r0, r4
     c3a:	f7ff fd73 	bl	724 <BMSModule::isExisting()>
     c3e:	2800      	cmp	r0, #0
     c40:	d0f6      	beq.n	c30 <BMSModuleManager::getHighCellVolt()+0x14>
      if (modules[x].getHighCellV() > HighCellVolt)
     c42:	4620      	mov	r0, r4
     c44:	f7ff fcc8 	bl	5d8 <BMSModule::getHighCellV()>
     c48:	69f1      	ldr	r1, [r6, #28]
     c4a:	f00b fc33 	bl	c4b4 <__aeabi_fcmpgt>
     c4e:	2800      	cmp	r0, #0
     c50:	d0ee      	beq.n	c30 <BMSModuleManager::getHighCellVolt()+0x14>
        HighCellVolt = modules[x].getHighCellV();
     c52:	4620      	mov	r0, r4
     c54:	f7ff fcc0 	bl	5d8 <BMSModule::getHighCellV()>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     c58:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
     c5c:	42ac      	cmp	r4, r5
        HighCellVolt = modules[x].getHighCellV();
     c5e:	61f0      	str	r0, [r6, #28]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     c60:	d1ea      	bne.n	c38 <BMSModuleManager::getHighCellVolt()+0x1c>
}
     c62:	69f0      	ldr	r0, [r6, #28]
     c64:	bd70      	pop	{r4, r5, r6, pc}
     c66:	bf00      	nop

00000c68 <BMSModuleManager::getPackVoltage()>:
}
     c68:	6900      	ldr	r0, [r0, #16]
     c6a:	4770      	bx	lr

00000c6c <BMSModuleManager::setPstrings(int)>:
  Pstring = Pstrings;
     c6c:	6141      	str	r1, [r0, #20]
}
     c6e:	4770      	bx	lr

00000c70 <BMSModuleManager::setSensors(int, float)>:
{
     c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t print(int n)				{ return print((long)n); }
     c74:	4e14      	ldr	r6, [pc, #80]	; (cc8 <BMSModuleManager::setSensors(int, float)+0x58>)
     c76:	4688      	mov	r8, r1
     c78:	4617      	mov	r7, r2
     c7a:	f500 7406 	add.w	r4, r0, #536	; 0x218
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     c7e:	2501      	movs	r5, #1
     c80:	e004      	b.n	c8c <BMSModuleManager::setSensors(int, float)+0x1c>
     c82:	3501      	adds	r5, #1
     c84:	2d11      	cmp	r5, #17
     c86:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
     c8a:	d01b      	beq.n	cc4 <BMSModuleManager::setSensors(int, float)+0x54>
    if (modules[x].isExisting())
     c8c:	4620      	mov	r0, r4
     c8e:	f7ff fd49 	bl	724 <BMSModule::isExisting()>
     c92:	2800      	cmp	r0, #0
     c94:	d0f5      	beq.n	c82 <BMSModuleManager::setSensors(int, float)+0x12>
     c96:	4629      	mov	r1, r5
     c98:	4630      	mov	r0, r6
     c9a:	f007 febd 	bl	8a18 <Print::print(long)>
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     c9e:	4630      	mov	r0, r6
     ca0:	f007 fec2 	bl	8a28 <Print::println()>
     ca4:	2078      	movs	r0, #120	; 0x78
     ca6:	f00a fbed 	bl	b484 <usb_serial_putchar>
      modules[x].settempsensor(sensor);
     caa:	4620      	mov	r0, r4
     cac:	4641      	mov	r1, r8
     cae:	f7ff fd3d 	bl	72c <BMSModule::settempsensor(int)>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     cb2:	3501      	adds	r5, #1
      modules[x].setIgnoreCell(Ignore);
     cb4:	4620      	mov	r0, r4
     cb6:	4639      	mov	r1, r7
     cb8:	f7ff fd44 	bl	744 <BMSModule::setIgnoreCell(float)>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     cbc:	2d11      	cmp	r5, #17
     cbe:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
     cc2:	d1e3      	bne.n	c8c <BMSModuleManager::setSensors(int, float)+0x1c>
}
     cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     cc8:	1fff880c 	.word	0x1fff880c

00000ccc <BMSModuleManager::getAvgTemperature()>:
{
     ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  highTemp = -999.0f;
     cd0:	4b2a      	ldr	r3, [pc, #168]	; (d7c <BMSModuleManager::getAvgTemperature()+0xb0>)
     cd2:	6303      	str	r3, [r0, #48]	; 0x30
  numFoundModules = 0;
     cd4:	f500 5800 	add.w	r8, r0, #8192	; 0x2000
  lowTemp = 999.0f;
     cd8:	4a29      	ldr	r2, [pc, #164]	; (d80 <BMSModuleManager::getAvgTemperature()+0xb4>)
     cda:	6342      	str	r2, [r0, #52]	; 0x34
  float avg = 0.0f;
     cdc:	2700      	movs	r7, #0
  numFoundModules = 0;
     cde:	2300      	movs	r3, #0
     ce0:	4645      	mov	r5, r8
{
     ce2:	4606      	mov	r6, r0
  numFoundModules = 0;
     ce4:	f8c8 301c 	str.w	r3, [r8, #28]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     ce8:	f500 7406 	add.w	r4, r0, #536	; 0x218
     cec:	3518      	adds	r5, #24
      if (modules[x].getAvgTemp() > 0)
     cee:	46b9      	mov	r9, r7
     cf0:	e003      	b.n	cfa <BMSModuleManager::getAvgTemperature()+0x2e>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     cf2:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
     cf6:	42a5      	cmp	r5, r4
     cf8:	d031      	beq.n	d5e <BMSModuleManager::getAvgTemperature()+0x92>
    if (modules[x].isExisting())
     cfa:	4620      	mov	r0, r4
     cfc:	f7ff fd12 	bl	724 <BMSModule::isExisting()>
     d00:	2800      	cmp	r0, #0
     d02:	d0f6      	beq.n	cf2 <BMSModuleManager::getAvgTemperature()+0x26>
      if (modules[x].getAvgTemp() > 0)
     d04:	4620      	mov	r0, r4
     d06:	f7ff fcd3 	bl	6b0 <BMSModule::getAvgTemp()>
     d0a:	4649      	mov	r1, r9
     d0c:	f00b fbd2 	bl	c4b4 <__aeabi_fcmpgt>
     d10:	4603      	mov	r3, r0
        avg += modules[x].getAvgTemp();
     d12:	4620      	mov	r0, r4
      if (modules[x].getAvgTemp() > 0)
     d14:	2b00      	cmp	r3, #0
     d16:	d0ec      	beq.n	cf2 <BMSModuleManager::getAvgTemperature()+0x26>
        numFoundModules++;
     d18:	f8d8 301c 	ldr.w	r3, [r8, #28]
     d1c:	3301      	adds	r3, #1
     d1e:	f8c8 301c 	str.w	r3, [r8, #28]
        avg += modules[x].getAvgTemp();
     d22:	f7ff fcc5 	bl	6b0 <BMSModule::getAvgTemp()>
     d26:	4601      	mov	r1, r0
     d28:	4638      	mov	r0, r7
     d2a:	f00b f8ff 	bl	bf2c <__addsf3>
     d2e:	4607      	mov	r7, r0
        if (modules[x].getHighTemp() > highTemp)
     d30:	4620      	mov	r0, r4
     d32:	f7ff fcb9 	bl	6a8 <BMSModule::getHighTemp()>
     d36:	6b31      	ldr	r1, [r6, #48]	; 0x30
     d38:	f00b fbbc 	bl	c4b4 <__aeabi_fcmpgt>
     d3c:	b9c8      	cbnz	r0, d72 <BMSModuleManager::getAvgTemperature()+0xa6>
        if (modules[x].getLowTemp() < lowTemp)
     d3e:	4620      	mov	r0, r4
     d40:	f7ff fcae 	bl	6a0 <BMSModule::getLowTemp()>
     d44:	6b71      	ldr	r1, [r6, #52]	; 0x34
     d46:	f00b fb97 	bl	c478 <__aeabi_fcmplt>
     d4a:	2800      	cmp	r0, #0
     d4c:	d0d1      	beq.n	cf2 <BMSModuleManager::getAvgTemperature()+0x26>
          lowTemp = modules[x].getLowTemp();
     d4e:	4620      	mov	r0, r4
     d50:	f7ff fca6 	bl	6a0 <BMSModule::getLowTemp()>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     d54:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
     d58:	42a5      	cmp	r5, r4
          lowTemp = modules[x].getLowTemp();
     d5a:	6370      	str	r0, [r6, #52]	; 0x34
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     d5c:	d1cd      	bne.n	cfa <BMSModuleManager::getAvgTemperature()+0x2e>
  avg = avg / (float)(numFoundModules);
     d5e:	f8d8 001c 	ldr.w	r0, [r8, #28]
     d62:	f00b f997 	bl	c094 <__aeabi_i2f>
     d66:	4601      	mov	r1, r0
     d68:	4638      	mov	r0, r7
     d6a:	f00b fa9b 	bl	c2a4 <__aeabi_fdiv>
}
     d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          highTemp = modules[x].getHighTemp();
     d72:	4620      	mov	r0, r4
     d74:	f7ff fc98 	bl	6a8 <BMSModule::getHighTemp()>
     d78:	6330      	str	r0, [r6, #48]	; 0x30
     d7a:	e7e0      	b.n	d3e <BMSModuleManager::getAvgTemperature()+0x72>
     d7c:	c479c000 	.word	0xc479c000
     d80:	4479c000 	.word	0x4479c000

00000d84 <BMSModuleManager::getHighTemperature()>:
}
     d84:	6b00      	ldr	r0, [r0, #48]	; 0x30
     d86:	4770      	bx	lr

00000d88 <BMSModuleManager::getLowTemperature()>:
}
     d88:	6b40      	ldr	r0, [r0, #52]	; 0x34
     d8a:	4770      	bx	lr

00000d8c <BMSModuleManager::getAvgCellVolt()>:
{
     d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d8e:	f500 5600 	add.w	r6, r0, #8192	; 0x2000
     d92:	4607      	mov	r7, r0
  float avg = 0.0f;
     d94:	2500      	movs	r5, #0
     d96:	f500 7406 	add.w	r4, r0, #536	; 0x218
     d9a:	3618      	adds	r6, #24
     d9c:	e003      	b.n	da6 <BMSModuleManager::getAvgCellVolt()+0x1a>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     d9e:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
     da2:	42b4      	cmp	r4, r6
     da4:	d010      	beq.n	dc8 <BMSModuleManager::getAvgCellVolt()+0x3c>
    if (modules[x].isExisting())
     da6:	4620      	mov	r0, r4
     da8:	f7ff fcbc 	bl	724 <BMSModule::isExisting()>
     dac:	2800      	cmp	r0, #0
     dae:	d0f6      	beq.n	d9e <BMSModuleManager::getAvgCellVolt()+0x12>
      avg += modules[x].getAverageV();
     db0:	4620      	mov	r0, r4
     db2:	f7ff fc37 	bl	624 <BMSModule::getAverageV()>
     db6:	4601      	mov	r1, r0
     db8:	4628      	mov	r0, r5
     dba:	f00b f8b7 	bl	bf2c <__addsf3>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     dbe:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
     dc2:	42b4      	cmp	r4, r6
      avg += modules[x].getAverageV();
     dc4:	4605      	mov	r5, r0
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     dc6:	d1ee      	bne.n	da6 <BMSModuleManager::getAvgCellVolt()+0x1a>
  avg = avg / (float)numFoundModules;
     dc8:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
     dcc:	69f8      	ldr	r0, [r7, #28]
     dce:	f00b f961 	bl	c094 <__aeabi_i2f>
     dd2:	4601      	mov	r1, r0
     dd4:	4628      	mov	r0, r5
     dd6:	f00b fa65 	bl	c2a4 <__aeabi_fdiv>
}
     dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000ddc <BMSModuleManager::printPackDetails(int, bool)>:

void BMSModuleManager::printPackDetails(int digits, bool port)
{
     ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     de0:	b093      	sub	sp, #76	; 0x4c
     de2:	4606      	mov	r6, r0
     de4:	910e      	str	r1, [sp, #56]	; 0x38
  uint8_t faults;
  uint8_t alerts;
  uint8_t COV;
  uint8_t CUV;
  int cellNum = 0;
  if (port == 0)
     de6:	2a00      	cmp	r2, #0
     de8:	f040 810a 	bne.w	1000 <BMSModuleManager::printPackDetails(int, bool)+0x224>
  {
    Logger::console(0, "");
     dec:	4614      	mov	r4, r2
     dee:	4610      	mov	r0, r2
     df0:	49a3      	ldr	r1, [pc, #652]	; (1080 <BMSModuleManager::printPackDetails(int, bool)+0x2a4>)
     df2:	f000 ff1b 	bl	1c2c <Logger::console(bool, char*, ...)>
    Logger::console(0, "");
    Logger::console(0, "");
    Logger::console(0, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
     df6:	f506 5500 	add.w	r5, r6, #8192	; 0x2000
    Logger::console(0, "");
     dfa:	4620      	mov	r0, r4
     dfc:	49a0      	ldr	r1, [pc, #640]	; (1080 <BMSModuleManager::printPackDetails(int, bool)+0x2a4>)
     dfe:	f000 ff15 	bl	1c2c <Logger::console(bool, char*, ...)>
    Logger::console(0, "");
     e02:	4620      	mov	r0, r4
     e04:	499e      	ldr	r1, [pc, #632]	; (1080 <BMSModuleManager::printPackDetails(int, bool)+0x2a4>)
     e06:	f000 ff11 	bl	1c2c <Logger::console(bool, char*, ...)>
    Logger::console(0, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
     e0a:	f506 58f1 	add.w	r8, r6, #7712	; 0x1e20
  spack = 0;
     e0e:	626c      	str	r4, [r5, #36]	; 0x24
     e10:	f506 7406 	add.w	r4, r6, #536	; 0x218
    Logger::console(0, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
     e14:	f8d5 a01c 	ldr.w	sl, [r5, #28]
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
     e18:	f108 0818 	add.w	r8, r8, #24
  spack = 0;
     e1c:	4627      	mov	r7, r4
     e1e:	46a1      	mov	r9, r4
     e20:	e003      	b.n	e2a <BMSModuleManager::printPackDetails(int, bool)+0x4e>
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
     e22:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
     e26:	45b8      	cmp	r8, r7
     e28:	d00e      	beq.n	e48 <BMSModuleManager::printPackDetails(int, bool)+0x6c>
    if (modules[y].isExisting())
     e2a:	4638      	mov	r0, r7
     e2c:	f7ff fc7a 	bl	724 <BMSModule::isExisting()>
     e30:	2800      	cmp	r0, #0
     e32:	d0f6      	beq.n	e22 <BMSModuleManager::printPackDetails(int, bool)+0x46>
      spack = spack + modules[y].getscells();
     e34:	4638      	mov	r0, r7
     e36:	6a6c      	ldr	r4, [r5, #36]	; 0x24
     e38:	f7ff fc2e 	bl	698 <BMSModule::getscells()>
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
     e3c:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
      spack = spack + modules[y].getscells();
     e40:	4404      	add	r4, r0
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
     e42:	45b8      	cmp	r8, r7
      spack = spack + modules[y].getscells();
     e44:	626c      	str	r4, [r5, #36]	; 0x24
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
     e46:	d1f0      	bne.n	e2a <BMSModuleManager::printPackDetails(int, bool)+0x4e>
    Logger::console(0, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
     e48:	6930      	ldr	r0, [r6, #16]
     e4a:	f00a ff53 	bl	bcf4 <__aeabi_f2d>
     e4e:	464c      	mov	r4, r9
     e50:	6973      	ldr	r3, [r6, #20]
  return spack;
     e52:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
    Logger::console(0, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
     e56:	930f      	str	r3, [sp, #60]	; 0x3c
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     e58:	f506 5900 	add.w	r9, r6, #8192	; 0x2000
    Logger::console(0, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
     e5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
     e60:	f109 0918 	add.w	r9, r9, #24
  float avg = 0.0f;
     e64:	f04f 0800 	mov.w	r8, #0
    Logger::console(0, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
     e68:	4627      	mov	r7, r4
     e6a:	e003      	b.n	e74 <BMSModuleManager::printPackDetails(int, bool)+0x98>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     e6c:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
     e70:	45b9      	cmp	r9, r7
     e72:	d010      	beq.n	e96 <BMSModuleManager::printPackDetails(int, bool)+0xba>
    if (modules[x].isExisting())
     e74:	4638      	mov	r0, r7
     e76:	f7ff fc55 	bl	724 <BMSModule::isExisting()>
     e7a:	2800      	cmp	r0, #0
     e7c:	d0f6      	beq.n	e6c <BMSModuleManager::printPackDetails(int, bool)+0x90>
      avg += modules[x].getAverageV();
     e7e:	4638      	mov	r0, r7
     e80:	f7ff fbd0 	bl	624 <BMSModule::getAverageV()>
     e84:	4601      	mov	r1, r0
     e86:	4640      	mov	r0, r8
     e88:	f00b f850 	bl	bf2c <__addsf3>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     e8c:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
     e90:	45b9      	cmp	r9, r7
      avg += modules[x].getAverageV();
     e92:	4680      	mov	r8, r0
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     e94:	d1ee      	bne.n	e74 <BMSModuleManager::printPackDetails(int, bool)+0x98>
  avg = avg / (float)numFoundModules;
     e96:	69e8      	ldr	r0, [r5, #28]
     e98:	f00b f8fc 	bl	c094 <__aeabi_i2f>
     e9c:	4601      	mov	r1, r0
     e9e:	4640      	mov	r0, r8
     ea0:	f00b fa00 	bl	c2a4 <__aeabi_fdiv>
    Logger::console(0, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
     ea4:	f00a ff26 	bl	bcf4 <__aeabi_f2d>
     ea8:	4680      	mov	r8, r0
                    Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVolt, HighCellVolt, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
     eaa:	4630      	mov	r0, r6
     eac:	69b5      	ldr	r5, [r6, #24]
     eae:	69f7      	ldr	r7, [r6, #28]
    Logger::console(0, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
     eb0:	4689      	mov	r9, r1
                    Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVolt, HighCellVolt, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
     eb2:	f7ff ff0b 	bl	ccc <BMSModuleManager::getAvgTemperature()>
    Logger::console(0, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
     eb6:	f00a ff1d 	bl	bcf4 <__aeabi_f2d>
     eba:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
                    Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVolt, HighCellVolt, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
     ebe:	4629      	mov	r1, r5
     ec0:	4638      	mov	r0, r7
     ec2:	f00b f831 	bl	bf28 <__aeabi_fsub>
     ec6:	496f      	ldr	r1, [pc, #444]	; (1084 <BMSModuleManager::printPackDetails(int, bool)+0x2a8>)
     ec8:	f00b f938 	bl	c13c <__aeabi_fmul>
    Logger::console(0, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
     ecc:	f00a ff12 	bl	bcf4 <__aeabi_f2d>
     ed0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
     ed4:	4638      	mov	r0, r7
     ed6:	f00a ff0d 	bl	bcf4 <__aeabi_f2d>
     eda:	e9cd 0108 	strd	r0, r1, [sp, #32]
     ede:	4628      	mov	r0, r5
     ee0:	f00a ff08 	bl	bcf4 <__aeabi_f2d>
     ee4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
     ee8:	e9cd 0106 	strd	r0, r1, [sp, #24]
     eec:	990f      	ldr	r1, [sp, #60]	; 0x3c
     eee:	9100      	str	r1, [sp, #0]
     ef0:	e9cd 2302 	strd	r2, r3, [sp, #8]
     ef4:	4964      	ldr	r1, [pc, #400]	; (1088 <BMSModuleManager::printPackDetails(int, bool)+0x2ac>)
	size_t print(int n)				{ return print((long)n); }
     ef6:	4d65      	ldr	r5, [pc, #404]	; (108c <BMSModuleManager::printPackDetails(int, bool)+0x2b0>)
     ef8:	465b      	mov	r3, fp
     efa:	4652      	mov	r2, sl
     efc:	2000      	movs	r0, #0
     efe:	e9cd 8904 	strd	r8, r9, [sp, #16]
     f02:	f000 fe93 	bl	1c2c <Logger::console(bool, char*, ...)>
    Logger::console(0, "");
     f06:	495e      	ldr	r1, [pc, #376]	; (1080 <BMSModuleManager::printPackDetails(int, bool)+0x2a4>)
     f08:	2000      	movs	r0, #0
     f0a:	f000 fe8f 	bl	1c2c <Logger::console(bool, char*, ...)>
    for (int y = 1; y < MAX_MODULE_ADDR; y++)
     f0e:	f04f 0b01 	mov.w	fp, #1
  int cellNum = 0;
     f12:	2600      	movs	r6, #0
     f14:	e007      	b.n	f26 <BMSModuleManager::printPackDetails(int, bool)+0x14a>
    for (int y = 1; y < MAX_MODULE_ADDR; y++)
     f16:	f10b 0b01 	add.w	fp, fp, #1
     f1a:	f1bb 0f10 	cmp.w	fp, #16
     f1e:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
     f22:	f000 8225 	beq.w	1370 <BMSModuleManager::printPackDetails(int, bool)+0x594>
    {
      if (modules[y].isExisting())
     f26:	4620      	mov	r0, r4
     f28:	f7ff fbfc 	bl	724 <BMSModule::isExisting()>
     f2c:	2800      	cmp	r0, #0
     f2e:	d0f2      	beq.n	f16 <BMSModuleManager::printPackDetails(int, bool)+0x13a>
      {
        faults = modules[y].getFaults();
     f30:	4620      	mov	r0, r4
     f32:	f7ff fb1d 	bl	570 <BMSModule::getFaults()>
        alerts = modules[y].getAlerts();
     f36:	4620      	mov	r0, r4
     f38:	f7ff fb1e 	bl	578 <BMSModule::getAlerts()>
        COV = modules[y].getCOVCells();
     f3c:	4620      	mov	r0, r4
     f3e:	f7ff fb1f 	bl	580 <BMSModule::getCOVCells()>
        CUV = modules[y].getCUVCells();
     f42:	4620      	mov	r0, r4
     f44:	f7ff fb20 	bl	588 <BMSModule::getCUVCells()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     f48:	2108      	movs	r1, #8
     f4a:	4851      	ldr	r0, [pc, #324]	; (1090 <BMSModuleManager::printPackDetails(int, bool)+0x2b4>)
     f4c:	f00a fa16 	bl	b37c <usb_serial_write>
     f50:	4659      	mov	r1, fp
     f52:	4628      	mov	r0, r5
     f54:	f007 fd60 	bl	8a18 <Print::print(long)>

        SERIALCONSOLE.print("Module #");
        SERIALCONSOLE.print(y);
        if (y < 10)
     f58:	f1bb 0f09 	cmp.w	fp, #9
     f5c:	dc03      	bgt.n	f66 <BMSModuleManager::printPackDetails(int, bool)+0x18a>
     f5e:	484d      	ldr	r0, [pc, #308]	; (1094 <BMSModuleManager::printPackDetails(int, bool)+0x2b8>)
     f60:	2101      	movs	r1, #1
     f62:	f00a fa0b 	bl	b37c <usb_serial_write>
     f66:	2102      	movs	r1, #2
     f68:	484b      	ldr	r0, [pc, #300]	; (1098 <BMSModuleManager::printPackDetails(int, bool)+0x2bc>)
     f6a:	f8df a128 	ldr.w	sl, [pc, #296]	; 1094 <BMSModuleManager::printPackDetails(int, bool)+0x2b8>
     f6e:	f00a fa05 	bl	b37c <usb_serial_write>
          SERIALCONSOLE.print(" ");
        SERIALCONSOLE.print("  ");
        SERIALCONSOLE.print(modules[y].getModuleVoltage(), digits);
     f72:	4620      	mov	r0, r4
     f74:	f7ff fba0 	bl	6b8 <BMSModule::getModuleVoltage()>
     f78:	f00a febc 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     f7c:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
     f80:	9700      	str	r7, [sp, #0]
     f82:	4602      	mov	r2, r0
     f84:	460b      	mov	r3, r1
     f86:	4628      	mov	r0, r5
     f88:	f007 fd72 	bl	8a70 <Print::printFloat(double, unsigned char)>
     f8c:	2101      	movs	r1, #1
     f8e:	4843      	ldr	r0, [pc, #268]	; (109c <BMSModuleManager::printPackDetails(int, bool)+0x2c0>)
     f90:	f00a f9f4 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.print("V");
        if (modules[y].getCellsUsed() > 12)
     f94:	4620      	mov	r0, r4
     f96:	f7ff fae7 	bl	568 <BMSModule::getCellsUsed()>
     f9a:	280c      	cmp	r0, #12
     f9c:	f340 814e 	ble.w	123c <BMSModuleManager::printPackDetails(int, bool)+0x460>
     fa0:	46b1      	mov	r9, r6
        {
          for (int i = 1; i < 12; i++)
     fa2:	f04f 0801 	mov.w	r8, #1
     fa6:	e021      	b.n	fec <BMSModuleManager::printPackDetails(int, bool)+0x210>
     fa8:	2107      	movs	r1, #7
     faa:	483d      	ldr	r0, [pc, #244]	; (10a0 <BMSModuleManager::printPackDetails(int, bool)+0x2c4>)
     fac:	f00a f9e6 	bl	b37c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     fb0:	4649      	mov	r1, r9
     fb2:	4628      	mov	r0, r5
     fb4:	f007 fd30 	bl	8a18 <Print::print(long)>
     fb8:	2102      	movs	r1, #2
     fba:	483a      	ldr	r0, [pc, #232]	; (10a4 <BMSModuleManager::printPackDetails(int, bool)+0x2c8>)
     fbc:	f00a f9de 	bl	b37c <usb_serial_write>
            if (cellNum < 10)
              SERIALCONSOLE.print(" ");
            SERIALCONSOLE.print("  Cell-");
            SERIALCONSOLE.print(1 + cellNum++);
            SERIALCONSOLE.print(": ");
            SERIALCONSOLE.print(modules[y].getCellVoltage(i), digits);
     fc0:	4641      	mov	r1, r8
     fc2:	4620      	mov	r0, r4
     fc4:	f7ff fae4 	bl	590 <BMSModule::getCellVoltage(int)>
     fc8:	f00a fe94 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     fcc:	9700      	str	r7, [sp, #0]
     fce:	4602      	mov	r2, r0
     fd0:	460b      	mov	r3, r1
     fd2:	4628      	mov	r0, r5
     fd4:	f007 fd4c 	bl	8a70 <Print::printFloat(double, unsigned char)>
          for (int i = 1; i < 12; i++)
     fd8:	f108 0801 	add.w	r8, r8, #1
     fdc:	482f      	ldr	r0, [pc, #188]	; (109c <BMSModuleManager::printPackDetails(int, bool)+0x2c0>)
     fde:	2101      	movs	r1, #1
     fe0:	f00a f9cc 	bl	b37c <usb_serial_write>
     fe4:	f1b8 0f0c 	cmp.w	r8, #12
     fe8:	f000 8159 	beq.w	129e <BMSModuleManager::printPackDetails(int, bool)+0x4c2>
            if (cellNum < 10)
     fec:	f1b9 0f09 	cmp.w	r9, #9
            SERIALCONSOLE.print(1 + cellNum++);
     ff0:	f109 0901 	add.w	r9, r9, #1
            if (cellNum < 10)
     ff4:	dcd8      	bgt.n	fa8 <BMSModuleManager::printPackDetails(int, bool)+0x1cc>
     ff6:	2101      	movs	r1, #1
     ff8:	4650      	mov	r0, sl
     ffa:	f00a f9bf 	bl	b37c <usb_serial_write>
     ffe:	e7d3      	b.n	fa8 <BMSModuleManager::printPackDetails(int, bool)+0x1cc>
      }
    }
  }
  else
  {
    Logger::console(1, "");
    1000:	491f      	ldr	r1, [pc, #124]	; (1080 <BMSModuleManager::printPackDetails(int, bool)+0x2a4>)
    1002:	2001      	movs	r0, #1
    1004:	f000 fe12 	bl	1c2c <Logger::console(bool, char*, ...)>
    Logger::console(1, "");
    1008:	491d      	ldr	r1, [pc, #116]	; (1080 <BMSModuleManager::printPackDetails(int, bool)+0x2a4>)
    100a:	2001      	movs	r0, #1
    100c:	f000 fe0e 	bl	1c2c <Logger::console(bool, char*, ...)>
    Logger::console(1, "");
    Logger::console(1, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1010:	f506 5500 	add.w	r5, r6, #8192	; 0x2000
    Logger::console(1, "");
    1014:	491a      	ldr	r1, [pc, #104]	; (1080 <BMSModuleManager::printPackDetails(int, bool)+0x2a4>)
    1016:	2001      	movs	r0, #1
    1018:	f000 fe08 	bl	1c2c <Logger::console(bool, char*, ...)>
    Logger::console(1, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    101c:	f506 7406 	add.w	r4, r6, #536	; 0x218
  spack = 0;
    1020:	2300      	movs	r3, #0
    1022:	f506 58f1 	add.w	r8, r6, #7712	; 0x1e20
    Logger::console(1, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1026:	f8d5 a01c 	ldr.w	sl, [r5, #28]
  spack = 0;
    102a:	626b      	str	r3, [r5, #36]	; 0x24
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
    102c:	f108 0818 	add.w	r8, r8, #24
  spack = 0;
    1030:	4627      	mov	r7, r4
    1032:	46a1      	mov	r9, r4
    1034:	e003      	b.n	103e <BMSModuleManager::printPackDetails(int, bool)+0x262>
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
    1036:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
    103a:	45b8      	cmp	r8, r7
    103c:	d00e      	beq.n	105c <BMSModuleManager::printPackDetails(int, bool)+0x280>
    if (modules[y].isExisting())
    103e:	4638      	mov	r0, r7
    1040:	f7ff fb70 	bl	724 <BMSModule::isExisting()>
    1044:	2800      	cmp	r0, #0
    1046:	d0f6      	beq.n	1036 <BMSModuleManager::printPackDetails(int, bool)+0x25a>
      spack = spack + modules[y].getscells();
    1048:	4638      	mov	r0, r7
    104a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    104c:	f7ff fb24 	bl	698 <BMSModule::getscells()>
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
    1050:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
      spack = spack + modules[y].getscells();
    1054:	4404      	add	r4, r0
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
    1056:	45b8      	cmp	r8, r7
      spack = spack + modules[y].getscells();
    1058:	626c      	str	r4, [r5, #36]	; 0x24
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
    105a:	d1f0      	bne.n	103e <BMSModuleManager::printPackDetails(int, bool)+0x262>
    Logger::console(1, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    105c:	6930      	ldr	r0, [r6, #16]
    105e:	f00a fe49 	bl	bcf4 <__aeabi_f2d>
    1062:	464c      	mov	r4, r9
    1064:	6973      	ldr	r3, [r6, #20]
  return spack;
    1066:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
    Logger::console(1, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    106a:	930f      	str	r3, [sp, #60]	; 0x3c
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    106c:	f506 5900 	add.w	r9, r6, #8192	; 0x2000
    Logger::console(1, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1070:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1074:	f109 0918 	add.w	r9, r9, #24
  float avg = 0.0f;
    1078:	f04f 0800 	mov.w	r8, #0
    Logger::console(1, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    107c:	4627      	mov	r7, r4
    107e:	e017      	b.n	10b0 <BMSModuleManager::printPackDetails(int, bool)+0x2d4>
    1080:	00012eac 	.word	0x00012eac
    1084:	447a0000 	.word	0x447a0000
    1088:	0001314c 	.word	0x0001314c
    108c:	1fff880c 	.word	0x1fff880c
    1090:	000131ec 	.word	0x000131ec
    1094:	00012ec0 	.word	0x00012ec0
    1098:	00012ea4 	.word	0x00012ea4
    109c:	000131f8 	.word	0x000131f8
    10a0:	000131fc 	.word	0x000131fc
    10a4:	00013268 	.word	0x00013268
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    10a8:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
    10ac:	45b9      	cmp	r9, r7
    10ae:	d010      	beq.n	10d2 <BMSModuleManager::printPackDetails(int, bool)+0x2f6>
    if (modules[x].isExisting())
    10b0:	4638      	mov	r0, r7
    10b2:	f7ff fb37 	bl	724 <BMSModule::isExisting()>
    10b6:	2800      	cmp	r0, #0
    10b8:	d0f6      	beq.n	10a8 <BMSModuleManager::printPackDetails(int, bool)+0x2cc>
      avg += modules[x].getAverageV();
    10ba:	4638      	mov	r0, r7
    10bc:	f7ff fab2 	bl	624 <BMSModule::getAverageV()>
    10c0:	4601      	mov	r1, r0
    10c2:	4640      	mov	r0, r8
    10c4:	f00a ff32 	bl	bf2c <__addsf3>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    10c8:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
    10cc:	45b9      	cmp	r9, r7
      avg += modules[x].getAverageV();
    10ce:	4680      	mov	r8, r0
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    10d0:	d1ee      	bne.n	10b0 <BMSModuleManager::printPackDetails(int, bool)+0x2d4>
  avg = avg / (float)numFoundModules;
    10d2:	69e8      	ldr	r0, [r5, #28]
    10d4:	f00a ffde 	bl	c094 <__aeabi_i2f>
    10d8:	4601      	mov	r1, r0
    10da:	4640      	mov	r0, r8
    10dc:	f00b f8e2 	bl	c2a4 <__aeabi_fdiv>
    Logger::console(1, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    10e0:	f00a fe08 	bl	bcf4 <__aeabi_f2d>
    10e4:	4680      	mov	r8, r0
                    Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVolt, HighCellVolt, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
    10e6:	4630      	mov	r0, r6
    10e8:	69b5      	ldr	r5, [r6, #24]
    10ea:	69f7      	ldr	r7, [r6, #28]
    Logger::console(1, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    10ec:	4689      	mov	r9, r1
                    Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVolt, HighCellVolt, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
    10ee:	f7ff fded 	bl	ccc <BMSModuleManager::getAvgTemperature()>
    Logger::console(1, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    10f2:	f00a fdff 	bl	bcf4 <__aeabi_f2d>
    10f6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
                    Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVolt, HighCellVolt, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
    10fa:	4629      	mov	r1, r5
    10fc:	4638      	mov	r0, r7
    10fe:	f00a ff13 	bl	bf28 <__aeabi_fsub>
    1102:	49b5      	ldr	r1, [pc, #724]	; (13d8 <BMSModuleManager::printPackDetails(int, bool)+0x5fc>)
    1104:	f00b f81a 	bl	c13c <__aeabi_fmul>
    Logger::console(1, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1108:	f00a fdf4 	bl	bcf4 <__aeabi_f2d>
    110c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    1110:	4638      	mov	r0, r7
    1112:	f00a fdef 	bl	bcf4 <__aeabi_f2d>
    1116:	e9cd 0108 	strd	r0, r1, [sp, #32]
    111a:	4628      	mov	r0, r5
    111c:	f00a fdea 	bl	bcf4 <__aeabi_f2d>
    1120:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1124:	e9cd 0106 	strd	r0, r1, [sp, #24]
    1128:	990f      	ldr	r1, [sp, #60]	; 0x3c
    112a:	9100      	str	r1, [sp, #0]
    112c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    1130:	49aa      	ldr	r1, [pc, #680]	; (13dc <BMSModuleManager::printPackDetails(int, bool)+0x600>)
	size_t print(int n)				{ return print((long)n); }
    1132:	4dab      	ldr	r5, [pc, #684]	; (13e0 <BMSModuleManager::printPackDetails(int, bool)+0x604>)
    1134:	465b      	mov	r3, fp
    1136:	4652      	mov	r2, sl
    1138:	2001      	movs	r0, #1
    113a:	e9cd 8904 	strd	r8, r9, [sp, #16]
    113e:	f000 fd75 	bl	1c2c <Logger::console(bool, char*, ...)>
    Logger::console(1, "");
    1142:	49a8      	ldr	r1, [pc, #672]	; (13e4 <BMSModuleManager::printPackDetails(int, bool)+0x608>)
    1144:	2001      	movs	r0, #1
    1146:	f000 fd71 	bl	1c2c <Logger::console(bool, char*, ...)>
    for (int y = 1; y < MAX_MODULE_ADDR; y++)
    114a:	f04f 0b01 	mov.w	fp, #1
  int cellNum = 0;
    114e:	2600      	movs	r6, #0
    1150:	e007      	b.n	1162 <BMSModuleManager::printPackDetails(int, bool)+0x386>
    for (int y = 1; y < MAX_MODULE_ADDR; y++)
    1152:	f10b 0b01 	add.w	fp, fp, #1
    1156:	f1bb 0f10 	cmp.w	fp, #16
    115a:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
    115e:	f000 8107 	beq.w	1370 <BMSModuleManager::printPackDetails(int, bool)+0x594>
    {
      if (modules[y].isExisting())
    1162:	4620      	mov	r0, r4
    1164:	f7ff fade 	bl	724 <BMSModule::isExisting()>
    1168:	2800      	cmp	r0, #0
    116a:	d0f2      	beq.n	1152 <BMSModuleManager::printPackDetails(int, bool)+0x376>
      {
        faults = modules[y].getFaults();
    116c:	4620      	mov	r0, r4
    116e:	f7ff f9ff 	bl	570 <BMSModule::getFaults()>
        alerts = modules[y].getAlerts();
    1172:	4620      	mov	r0, r4
    1174:	f7ff fa00 	bl	578 <BMSModule::getAlerts()>
        COV = modules[y].getCOVCells();
    1178:	4620      	mov	r0, r4
    117a:	f7ff fa01 	bl	580 <BMSModule::getCOVCells()>
        CUV = modules[y].getCUVCells();
    117e:	4620      	mov	r0, r4
    1180:	f7ff fa02 	bl	588 <BMSModule::getCUVCells()>
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial2_write(buffer, size); return size; }
    1184:	4898      	ldr	r0, [pc, #608]	; (13e8 <BMSModuleManager::printPackDetails(int, bool)+0x60c>)
    1186:	2108      	movs	r1, #8
    1188:	f008 fdcc 	bl	9d24 <serial2_write>
    118c:	4659      	mov	r1, fp
    118e:	4628      	mov	r0, r5
    1190:	f007 fc42 	bl	8a18 <Print::print(long)>

        Serial2.print("Module #");
        Serial2.print(y);
        if (y < 10)
    1194:	f1bb 0f09 	cmp.w	fp, #9
    1198:	dc03      	bgt.n	11a2 <BMSModuleManager::printPackDetails(int, bool)+0x3c6>
    119a:	4894      	ldr	r0, [pc, #592]	; (13ec <BMSModuleManager::printPackDetails(int, bool)+0x610>)
    119c:	2101      	movs	r1, #1
    119e:	f008 fdc1 	bl	9d24 <serial2_write>
    11a2:	2102      	movs	r1, #2
    11a4:	4892      	ldr	r0, [pc, #584]	; (13f0 <BMSModuleManager::printPackDetails(int, bool)+0x614>)
    11a6:	f8df a244 	ldr.w	sl, [pc, #580]	; 13ec <BMSModuleManager::printPackDetails(int, bool)+0x610>
    11aa:	f008 fdbb 	bl	9d24 <serial2_write>
          Serial2.print(" ");
        Serial2.print("  ");
        Serial2.print(modules[y].getModuleVoltage(), digits);
    11ae:	4620      	mov	r0, r4
    11b0:	f7ff fa82 	bl	6b8 <BMSModule::getModuleVoltage()>
    11b4:	f00a fd9e 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    11b8:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    11bc:	9700      	str	r7, [sp, #0]
    11be:	4602      	mov	r2, r0
    11c0:	460b      	mov	r3, r1
    11c2:	4628      	mov	r0, r5
    11c4:	f007 fc54 	bl	8a70 <Print::printFloat(double, unsigned char)>
    11c8:	488a      	ldr	r0, [pc, #552]	; (13f4 <BMSModuleManager::printPackDetails(int, bool)+0x618>)
    11ca:	2101      	movs	r1, #1
    11cc:	f008 fdaa 	bl	9d24 <serial2_write>
        Serial2.print("V");
        if (modules[y].getCellsUsed() > 12)
    11d0:	4620      	mov	r0, r4
    11d2:	f7ff f9c9 	bl	568 <BMSModule::getCellsUsed()>
    11d6:	280c      	cmp	r0, #12
    11d8:	f340 80cd 	ble.w	1376 <BMSModuleManager::printPackDetails(int, bool)+0x59a>
    11dc:	46b1      	mov	r9, r6
        {
          for (int i = 1; i < 12; i++)
    11de:	f04f 0801 	mov.w	r8, #1
    11e2:	e021      	b.n	1228 <BMSModuleManager::printPackDetails(int, bool)+0x44c>
    11e4:	4884      	ldr	r0, [pc, #528]	; (13f8 <BMSModuleManager::printPackDetails(int, bool)+0x61c>)
    11e6:	2107      	movs	r1, #7
    11e8:	f008 fd9c 	bl	9d24 <serial2_write>
	size_t print(int n)				{ return print((long)n); }
    11ec:	4649      	mov	r1, r9
    11ee:	4628      	mov	r0, r5
    11f0:	f007 fc12 	bl	8a18 <Print::print(long)>
    11f4:	4881      	ldr	r0, [pc, #516]	; (13fc <BMSModuleManager::printPackDetails(int, bool)+0x620>)
    11f6:	2102      	movs	r1, #2
    11f8:	f008 fd94 	bl	9d24 <serial2_write>
            if (cellNum < 10)
              Serial2.print(" ");
            Serial2.print("  Cell-");
            Serial2.print(1 + cellNum++);
            Serial2.print(": ");
            Serial2.print(modules[y].getCellVoltage(i), digits);
    11fc:	4641      	mov	r1, r8
    11fe:	4620      	mov	r0, r4
    1200:	f7ff f9c6 	bl	590 <BMSModule::getCellVoltage(int)>
    1204:	f00a fd76 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1208:	9700      	str	r7, [sp, #0]
    120a:	4602      	mov	r2, r0
    120c:	460b      	mov	r3, r1
    120e:	4628      	mov	r0, r5
    1210:	f007 fc2e 	bl	8a70 <Print::printFloat(double, unsigned char)>
          for (int i = 1; i < 12; i++)
    1214:	f108 0801 	add.w	r8, r8, #1
    1218:	4876      	ldr	r0, [pc, #472]	; (13f4 <BMSModuleManager::printPackDetails(int, bool)+0x618>)
    121a:	2101      	movs	r1, #1
    121c:	f008 fd82 	bl	9d24 <serial2_write>
    1220:	f1b8 0f0c 	cmp.w	r8, #12
    1224:	f000 80f0 	beq.w	1408 <BMSModuleManager::printPackDetails(int, bool)+0x62c>
            if (cellNum < 10)
    1228:	f1b9 0f09 	cmp.w	r9, #9
            Serial2.print(1 + cellNum++);
    122c:	f109 0901 	add.w	r9, r9, #1
            if (cellNum < 10)
    1230:	dcd8      	bgt.n	11e4 <BMSModuleManager::printPackDetails(int, bool)+0x408>
    1232:	2101      	movs	r1, #1
    1234:	4650      	mov	r0, sl
    1236:	f008 fd75 	bl	9d24 <serial2_write>
    123a:	e7d3      	b.n	11e4 <BMSModuleManager::printPackDetails(int, bool)+0x408>
    123c:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 13f8 <BMSModuleManager::printPackDetails(int, bool)+0x61c>
          for (int i = 1; i < modules[y].getCellsUsed() + 1; i++)
    1240:	f04f 0801 	mov.w	r8, #1
    1244:	e01d      	b.n	1282 <BMSModuleManager::printPackDetails(int, bool)+0x4a6>
    1246:	2107      	movs	r1, #7
    1248:	4648      	mov	r0, r9
    124a:	f00a f897 	bl	b37c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    124e:	4631      	mov	r1, r6
    1250:	4628      	mov	r0, r5
    1252:	f007 fbe1 	bl	8a18 <Print::print(long)>
    1256:	2102      	movs	r1, #2
    1258:	4868      	ldr	r0, [pc, #416]	; (13fc <BMSModuleManager::printPackDetails(int, bool)+0x620>)
    125a:	f00a f88f 	bl	b37c <usb_serial_write>
            SERIALCONSOLE.print(modules[y].getCellVoltage(i), digits);
    125e:	4641      	mov	r1, r8
    1260:	4620      	mov	r0, r4
    1262:	f7ff f995 	bl	590 <BMSModule::getCellVoltage(int)>
    1266:	f00a fd45 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    126a:	9700      	str	r7, [sp, #0]
    126c:	4602      	mov	r2, r0
    126e:	460b      	mov	r3, r1
    1270:	4628      	mov	r0, r5
    1272:	f007 fbfd 	bl	8a70 <Print::printFloat(double, unsigned char)>
    1276:	485f      	ldr	r0, [pc, #380]	; (13f4 <BMSModuleManager::printPackDetails(int, bool)+0x618>)
    1278:	2101      	movs	r1, #1
    127a:	f00a f87f 	bl	b37c <usb_serial_write>
          for (int i = 1; i < modules[y].getCellsUsed() + 1; i++)
    127e:	f108 0801 	add.w	r8, r8, #1
    1282:	4620      	mov	r0, r4
    1284:	f7ff f970 	bl	568 <BMSModule::getCellsUsed()>
    1288:	4540      	cmp	r0, r8
    128a:	db4a      	blt.n	1322 <BMSModuleManager::printPackDetails(int, bool)+0x546>
            if (cellNum < 10)
    128c:	2e09      	cmp	r6, #9
            SERIALCONSOLE.print(1 + cellNum++);
    128e:	f106 0601 	add.w	r6, r6, #1
            if (cellNum < 10)
    1292:	dcd8      	bgt.n	1246 <BMSModuleManager::printPackDetails(int, bool)+0x46a>
    1294:	2101      	movs	r1, #1
    1296:	4650      	mov	r0, sl
    1298:	f00a f870 	bl	b37c <usb_serial_write>
    129c:	e7d3      	b.n	1246 <BMSModuleManager::printPackDetails(int, bool)+0x46a>
          if (modules[y].getCellsUsed() > 12 && modules[y].getCellsUsed() < 24)
    129e:	4620      	mov	r0, r4
    12a0:	f7ff f962 	bl	568 <BMSModule::getCellsUsed()>
    12a4:	280c      	cmp	r0, #12
            SERIALCONSOLE.print(1 + cellNum++);
    12a6:	f106 090b 	add.w	r9, r6, #11
          if (modules[y].getCellsUsed() > 12 && modules[y].getCellsUsed() < 24)
    12aa:	dd05      	ble.n	12b8 <BMSModuleManager::printPackDetails(int, bool)+0x4dc>
    12ac:	4620      	mov	r0, r4
    12ae:	f7ff f95b 	bl	568 <BMSModule::getCellsUsed()>
    12b2:	2817      	cmp	r0, #23
    12b4:	f340 8138 	ble.w	1528 <BMSModuleManager::printPackDetails(int, bool)+0x74c>
    12b8:	f8df a140 	ldr.w	sl, [pc, #320]	; 13fc <BMSModuleManager::printPackDetails(int, bool)+0x620>
    12bc:	f04f 080d 	mov.w	r8, #13
    12c0:	2107      	movs	r1, #7
    12c2:	484d      	ldr	r0, [pc, #308]	; (13f8 <BMSModuleManager::printPackDetails(int, bool)+0x61c>)
              SERIALCONSOLE.print(1 + cellNum++);
    12c4:	f109 0901 	add.w	r9, r9, #1
    12c8:	f00a f858 	bl	b37c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    12cc:	4649      	mov	r1, r9
    12ce:	4628      	mov	r0, r5
    12d0:	f007 fba2 	bl	8a18 <Print::print(long)>
    12d4:	2102      	movs	r1, #2
    12d6:	4650      	mov	r0, sl
    12d8:	f00a f850 	bl	b37c <usb_serial_write>
              SERIALCONSOLE.print(modules[y].getCellVoltage(i), digits);
    12dc:	4641      	mov	r1, r8
    12de:	4620      	mov	r0, r4
    12e0:	f7ff f956 	bl	590 <BMSModule::getCellVoltage(int)>
    12e4:	f00a fd06 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    12e8:	9700      	str	r7, [sp, #0]
    12ea:	4602      	mov	r2, r0
    12ec:	460b      	mov	r3, r1
    12ee:	4628      	mov	r0, r5
    12f0:	f007 fbbe 	bl	8a70 <Print::printFloat(double, unsigned char)>
            for (int i = 13; i < 24; i++)
    12f4:	f108 0801 	add.w	r8, r8, #1
    12f8:	483e      	ldr	r0, [pc, #248]	; (13f4 <BMSModuleManager::printPackDetails(int, bool)+0x618>)
    12fa:	2101      	movs	r1, #1
    12fc:	f00a f83e 	bl	b37c <usb_serial_write>
    1300:	f1b8 0f18 	cmp.w	r8, #24
    1304:	d1dc      	bne.n	12c0 <BMSModuleManager::printPackDetails(int, bool)+0x4e4>
              SERIALCONSOLE.print(1 + cellNum++);
    1306:	3616      	adds	r6, #22
    1308:	210f      	movs	r1, #15
    130a:	483d      	ldr	r0, [pc, #244]	; (1400 <BMSModuleManager::printPackDetails(int, bool)+0x624>)
    130c:	f00a f836 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1310:	4628      	mov	r0, r5
    1312:	f007 fb89 	bl	8a28 <Print::println()>
          if (modules[y].getCellsUsed() > 25)
    1316:	4620      	mov	r0, r4
    1318:	f7ff f926 	bl	568 <BMSModule::getCellsUsed()>
    131c:	2819      	cmp	r0, #25
    131e:	f300 8132 	bgt.w	1586 <BMSModuleManager::printPackDetails(int, bool)+0x7aa>
    1322:	210f      	movs	r1, #15
    1324:	4836      	ldr	r0, [pc, #216]	; (1400 <BMSModuleManager::printPackDetails(int, bool)+0x624>)
    1326:	f00a f829 	bl	b37c <usb_serial_write>
    132a:	4628      	mov	r0, r5
    132c:	f007 fb7c 	bl	8a28 <Print::println()>
    1330:	2109      	movs	r1, #9
    1332:	4834      	ldr	r0, [pc, #208]	; (1404 <BMSModuleManager::printPackDetails(int, bool)+0x628>)
    1334:	f00a f822 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.print(modules[y].getTemperature(0));
    1338:	2100      	movs	r1, #0
    133a:	4620      	mov	r0, r4
    133c:	f7ff f9e4 	bl	708 <BMSModule::getTemperature(int)>
    1340:	f00a fcd8 	bl	bcf4 <__aeabi_f2d>
    1344:	460b      	mov	r3, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1346:	2102      	movs	r1, #2
    1348:	4602      	mov	r2, r0
    134a:	9100      	str	r1, [sp, #0]
    134c:	4628      	mov	r0, r5
    134e:	f007 fb8f 	bl	8a70 <Print::printFloat(double, unsigned char)>
    1352:	210f      	movs	r1, #15
    1354:	482a      	ldr	r0, [pc, #168]	; (1400 <BMSModuleManager::printPackDetails(int, bool)+0x624>)
    1356:	f00a f811 	bl	b37c <usb_serial_write>
    for (int y = 1; y < MAX_MODULE_ADDR; y++)
    135a:	f10b 0b01 	add.w	fp, fp, #1
	size_t println(const char s[])			{ return print(s) + println(); }
    135e:	4628      	mov	r0, r5
    1360:	f007 fb62 	bl	8a28 <Print::println()>
    1364:	f1bb 0f10 	cmp.w	fp, #16
    1368:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
    136c:	f47f addb 	bne.w	f26 <BMSModuleManager::printPackDetails(int, bool)+0x14a>
        Serial2.print(modules[y].getTemperature(0));
        Serial2.println("               ");
      }
    }
  }
}
    1370:	b013      	add	sp, #76	; 0x4c
    1372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1376:	f8df 9080 	ldr.w	r9, [pc, #128]	; 13f8 <BMSModuleManager::printPackDetails(int, bool)+0x61c>
          for (int i = 1; i < modules[y].getCellsUsed() + 1; i++)
    137a:	f04f 0801 	mov.w	r8, #1
    137e:	e01d      	b.n	13bc <BMSModuleManager::printPackDetails(int, bool)+0x5e0>
    1380:	2107      	movs	r1, #7
    1382:	4648      	mov	r0, r9
    1384:	f008 fcce 	bl	9d24 <serial2_write>
	size_t print(int n)				{ return print((long)n); }
    1388:	4631      	mov	r1, r6
    138a:	4628      	mov	r0, r5
    138c:	f007 fb44 	bl	8a18 <Print::print(long)>
    1390:	481a      	ldr	r0, [pc, #104]	; (13fc <BMSModuleManager::printPackDetails(int, bool)+0x620>)
    1392:	2102      	movs	r1, #2
    1394:	f008 fcc6 	bl	9d24 <serial2_write>
            Serial2.print(modules[y].getCellVoltage(i), digits);
    1398:	4641      	mov	r1, r8
    139a:	4620      	mov	r0, r4
    139c:	f7ff f8f8 	bl	590 <BMSModule::getCellVoltage(int)>
    13a0:	f00a fca8 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    13a4:	9700      	str	r7, [sp, #0]
    13a6:	4602      	mov	r2, r0
    13a8:	460b      	mov	r3, r1
    13aa:	4628      	mov	r0, r5
    13ac:	f007 fb60 	bl	8a70 <Print::printFloat(double, unsigned char)>
    13b0:	4810      	ldr	r0, [pc, #64]	; (13f4 <BMSModuleManager::printPackDetails(int, bool)+0x618>)
    13b2:	2101      	movs	r1, #1
    13b4:	f008 fcb6 	bl	9d24 <serial2_write>
          for (int i = 1; i < modules[y].getCellsUsed() + 1; i++)
    13b8:	f108 0801 	add.w	r8, r8, #1
    13bc:	4620      	mov	r0, r4
    13be:	f7ff f8d3 	bl	568 <BMSModule::getCellsUsed()>
    13c2:	4540      	cmp	r0, r8
    13c4:	db61      	blt.n	148a <BMSModuleManager::printPackDetails(int, bool)+0x6ae>
            if (cellNum < 10)
    13c6:	2e09      	cmp	r6, #9
            Serial2.print(1 + cellNum++);
    13c8:	f106 0601 	add.w	r6, r6, #1
            if (cellNum < 10)
    13cc:	dcd8      	bgt.n	1380 <BMSModuleManager::printPackDetails(int, bool)+0x5a4>
    13ce:	4650      	mov	r0, sl
    13d0:	2101      	movs	r1, #1
    13d2:	f008 fca7 	bl	9d24 <serial2_write>
    13d6:	e7d3      	b.n	1380 <BMSModuleManager::printPackDetails(int, bool)+0x5a4>
    13d8:	447a0000 	.word	0x447a0000
    13dc:	0001314c 	.word	0x0001314c
    13e0:	1fff87ac 	.word	0x1fff87ac
    13e4:	00012eac 	.word	0x00012eac
    13e8:	000131ec 	.word	0x000131ec
    13ec:	00012ec0 	.word	0x00012ec0
    13f0:	00012ea4 	.word	0x00012ea4
    13f4:	000131f8 	.word	0x000131f8
    13f8:	000131fc 	.word	0x000131fc
    13fc:	00013268 	.word	0x00013268
    1400:	00013204 	.word	0x00013204
    1404:	00013214 	.word	0x00013214
          if (modules[y].getCellsUsed() > 12 && modules[y].getCellsUsed() < 24)
    1408:	4620      	mov	r0, r4
    140a:	f7ff f8ad 	bl	568 <BMSModule::getCellsUsed()>
    140e:	280c      	cmp	r0, #12
            Serial2.print(1 + cellNum++);
    1410:	f106 090b 	add.w	r9, r6, #11
          if (modules[y].getCellsUsed() > 12 && modules[y].getCellsUsed() < 24)
    1414:	dd04      	ble.n	1420 <BMSModuleManager::printPackDetails(int, bool)+0x644>
    1416:	4620      	mov	r0, r4
    1418:	f7ff f8a6 	bl	568 <BMSModule::getCellsUsed()>
    141c:	2817      	cmp	r0, #23
    141e:	dd54      	ble.n	14ca <BMSModuleManager::printPackDetails(int, bool)+0x6ee>
    1420:	f8df a21c 	ldr.w	sl, [pc, #540]	; 1640 <BMSModuleManager::printPackDetails(int, bool)+0x864>
    1424:	f04f 080d 	mov.w	r8, #13
    1428:	4886      	ldr	r0, [pc, #536]	; (1644 <BMSModuleManager::printPackDetails(int, bool)+0x868>)
    142a:	2107      	movs	r1, #7
              Serial2.print(1 + cellNum++);
    142c:	f109 0901 	add.w	r9, r9, #1
    1430:	f008 fc78 	bl	9d24 <serial2_write>
	size_t print(int n)				{ return print((long)n); }
    1434:	4649      	mov	r1, r9
    1436:	4628      	mov	r0, r5
    1438:	f007 faee 	bl	8a18 <Print::print(long)>
    143c:	2102      	movs	r1, #2
    143e:	4650      	mov	r0, sl
    1440:	f008 fc70 	bl	9d24 <serial2_write>
              Serial2.print(modules[y].getCellVoltage(i), digits);
    1444:	4641      	mov	r1, r8
    1446:	4620      	mov	r0, r4
    1448:	f7ff f8a2 	bl	590 <BMSModule::getCellVoltage(int)>
    144c:	f00a fc52 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1450:	9700      	str	r7, [sp, #0]
    1452:	4602      	mov	r2, r0
    1454:	460b      	mov	r3, r1
    1456:	4628      	mov	r0, r5
    1458:	f007 fb0a 	bl	8a70 <Print::printFloat(double, unsigned char)>
            for (int i = 13; i < 24; i++)
    145c:	f108 0801 	add.w	r8, r8, #1
    1460:	4879      	ldr	r0, [pc, #484]	; (1648 <BMSModuleManager::printPackDetails(int, bool)+0x86c>)
    1462:	2101      	movs	r1, #1
    1464:	f008 fc5e 	bl	9d24 <serial2_write>
    1468:	f1b8 0f18 	cmp.w	r8, #24
    146c:	d1dc      	bne.n	1428 <BMSModuleManager::printPackDetails(int, bool)+0x64c>
              Serial2.print(1 + cellNum++);
    146e:	3616      	adds	r6, #22
    1470:	210f      	movs	r1, #15
    1472:	4876      	ldr	r0, [pc, #472]	; (164c <BMSModuleManager::printPackDetails(int, bool)+0x870>)
    1474:	f008 fc56 	bl	9d24 <serial2_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1478:	4628      	mov	r0, r5
    147a:	f007 fad5 	bl	8a28 <Print::println()>
          if (modules[y].getCellsUsed() > 25)
    147e:	4620      	mov	r0, r4
    1480:	f7ff f872 	bl	568 <BMSModule::getCellsUsed()>
    1484:	2819      	cmp	r0, #25
    1486:	f300 80ac 	bgt.w	15e2 <BMSModuleManager::printPackDetails(int, bool)+0x806>
    148a:	210f      	movs	r1, #15
    148c:	486f      	ldr	r0, [pc, #444]	; (164c <BMSModuleManager::printPackDetails(int, bool)+0x870>)
    148e:	f008 fc49 	bl	9d24 <serial2_write>
    1492:	4628      	mov	r0, r5
    1494:	f007 fac8 	bl	8a28 <Print::println()>
    1498:	486d      	ldr	r0, [pc, #436]	; (1650 <BMSModuleManager::printPackDetails(int, bool)+0x874>)
    149a:	2109      	movs	r1, #9
    149c:	f008 fc42 	bl	9d24 <serial2_write>
        Serial2.print(modules[y].getTemperature(0));
    14a0:	2100      	movs	r1, #0
    14a2:	4620      	mov	r0, r4
    14a4:	f7ff f930 	bl	708 <BMSModule::getTemperature(int)>
    14a8:	f00a fc24 	bl	bcf4 <__aeabi_f2d>
    14ac:	460b      	mov	r3, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    14ae:	2102      	movs	r1, #2
    14b0:	4602      	mov	r2, r0
    14b2:	9100      	str	r1, [sp, #0]
    14b4:	4628      	mov	r0, r5
    14b6:	f007 fadb 	bl	8a70 <Print::printFloat(double, unsigned char)>
    14ba:	4864      	ldr	r0, [pc, #400]	; (164c <BMSModuleManager::printPackDetails(int, bool)+0x870>)
    14bc:	210f      	movs	r1, #15
    14be:	f008 fc31 	bl	9d24 <serial2_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    14c2:	4628      	mov	r0, r5
    14c4:	f007 fab0 	bl	8a28 <Print::println()>
    14c8:	e643      	b.n	1152 <BMSModuleManager::printPackDetails(int, bool)+0x376>
            Serial2.print(1 + cellNum++);
    14ca:	464e      	mov	r6, r9
    14cc:	f8df a170 	ldr.w	sl, [pc, #368]	; 1640 <BMSModuleManager::printPackDetails(int, bool)+0x864>
    14d0:	f8df 9170 	ldr.w	r9, [pc, #368]	; 1644 <BMSModuleManager::printPackDetails(int, bool)+0x868>
    14d4:	f04f 080d 	mov.w	r8, #13
    14d8:	e01c      	b.n	1514 <BMSModuleManager::printPackDetails(int, bool)+0x738>
              Serial2.print(1 + cellNum++);
    14da:	3601      	adds	r6, #1
    14dc:	f008 fc22 	bl	9d24 <serial2_write>
	size_t print(int n)				{ return print((long)n); }
    14e0:	4631      	mov	r1, r6
    14e2:	4628      	mov	r0, r5
    14e4:	f007 fa98 	bl	8a18 <Print::print(long)>
    14e8:	2102      	movs	r1, #2
    14ea:	4650      	mov	r0, sl
    14ec:	f008 fc1a 	bl	9d24 <serial2_write>
              Serial2.print(modules[y].getCellVoltage(i), digits);
    14f0:	4641      	mov	r1, r8
    14f2:	4620      	mov	r0, r4
    14f4:	f7ff f84c 	bl	590 <BMSModule::getCellVoltage(int)>
    14f8:	f00a fbfc 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    14fc:	9700      	str	r7, [sp, #0]
    14fe:	4602      	mov	r2, r0
    1500:	460b      	mov	r3, r1
    1502:	4628      	mov	r0, r5
    1504:	f007 fab4 	bl	8a70 <Print::printFloat(double, unsigned char)>
    1508:	484f      	ldr	r0, [pc, #316]	; (1648 <BMSModuleManager::printPackDetails(int, bool)+0x86c>)
    150a:	2101      	movs	r1, #1
    150c:	f008 fc0a 	bl	9d24 <serial2_write>
            for (int i = 13; i < modules[y].getCellsUsed() + 1; i++)
    1510:	f108 0801 	add.w	r8, r8, #1
    1514:	4620      	mov	r0, r4
    1516:	f7ff f827 	bl	568 <BMSModule::getCellsUsed()>
    151a:	4603      	mov	r3, r0
    151c:	4543      	cmp	r3, r8
    151e:	f04f 0107 	mov.w	r1, #7
    1522:	4648      	mov	r0, r9
    1524:	dad9      	bge.n	14da <BMSModuleManager::printPackDetails(int, bool)+0x6fe>
    1526:	e7a3      	b.n	1470 <BMSModuleManager::printPackDetails(int, bool)+0x694>
            SERIALCONSOLE.print(1 + cellNum++);
    1528:	464e      	mov	r6, r9
    152a:	f8df a114 	ldr.w	sl, [pc, #276]	; 1640 <BMSModuleManager::printPackDetails(int, bool)+0x864>
    152e:	f8df 9114 	ldr.w	r9, [pc, #276]	; 1644 <BMSModuleManager::printPackDetails(int, bool)+0x868>
    1532:	f04f 080d 	mov.w	r8, #13
    1536:	e01c      	b.n	1572 <BMSModuleManager::printPackDetails(int, bool)+0x796>
              SERIALCONSOLE.print(1 + cellNum++);
    1538:	3601      	adds	r6, #1
    153a:	f009 ff1f 	bl	b37c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    153e:	4631      	mov	r1, r6
    1540:	4628      	mov	r0, r5
    1542:	f007 fa69 	bl	8a18 <Print::print(long)>
    1546:	2102      	movs	r1, #2
    1548:	4650      	mov	r0, sl
    154a:	f009 ff17 	bl	b37c <usb_serial_write>
              SERIALCONSOLE.print(modules[y].getCellVoltage(i), digits);
    154e:	4641      	mov	r1, r8
    1550:	4620      	mov	r0, r4
    1552:	f7ff f81d 	bl	590 <BMSModule::getCellVoltage(int)>
    1556:	f00a fbcd 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    155a:	9700      	str	r7, [sp, #0]
    155c:	4602      	mov	r2, r0
    155e:	460b      	mov	r3, r1
    1560:	4628      	mov	r0, r5
    1562:	f007 fa85 	bl	8a70 <Print::printFloat(double, unsigned char)>
    1566:	4838      	ldr	r0, [pc, #224]	; (1648 <BMSModuleManager::printPackDetails(int, bool)+0x86c>)
    1568:	2101      	movs	r1, #1
    156a:	f009 ff07 	bl	b37c <usb_serial_write>
            for (int i = 13; i < modules[y].getCellsUsed() + 1; i++)
    156e:	f108 0801 	add.w	r8, r8, #1
    1572:	4620      	mov	r0, r4
    1574:	f7fe fff8 	bl	568 <BMSModule::getCellsUsed()>
    1578:	4603      	mov	r3, r0
    157a:	4543      	cmp	r3, r8
    157c:	f04f 0107 	mov.w	r1, #7
    1580:	4648      	mov	r0, r9
    1582:	dad9      	bge.n	1538 <BMSModuleManager::printPackDetails(int, bool)+0x75c>
    1584:	e6c0      	b.n	1308 <BMSModuleManager::printPackDetails(int, bool)+0x52c>
    1586:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 1644 <BMSModuleManager::printPackDetails(int, bool)+0x868>
    158a:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 1640 <BMSModuleManager::printPackDetails(int, bool)+0x864>
            for (int i = 25; i < modules[y].getCellsUsed() + 1; i++)
    158e:	f04f 0819 	mov.w	r8, #25
    1592:	e01c      	b.n	15ce <BMSModuleManager::printPackDetails(int, bool)+0x7f2>
              SERIALCONSOLE.print(1 + cellNum++);
    1594:	3601      	adds	r6, #1
    1596:	f009 fef1 	bl	b37c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    159a:	4631      	mov	r1, r6
    159c:	4628      	mov	r0, r5
    159e:	f007 fa3b 	bl	8a18 <Print::print(long)>
    15a2:	2102      	movs	r1, #2
    15a4:	4650      	mov	r0, sl
    15a6:	f009 fee9 	bl	b37c <usb_serial_write>
              SERIALCONSOLE.print(modules[y].getCellVoltage(i), digits);
    15aa:	4641      	mov	r1, r8
    15ac:	4620      	mov	r0, r4
    15ae:	f7fe ffef 	bl	590 <BMSModule::getCellVoltage(int)>
    15b2:	f00a fb9f 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    15b6:	9700      	str	r7, [sp, #0]
    15b8:	4602      	mov	r2, r0
    15ba:	460b      	mov	r3, r1
    15bc:	4628      	mov	r0, r5
    15be:	f007 fa57 	bl	8a70 <Print::printFloat(double, unsigned char)>
    15c2:	4821      	ldr	r0, [pc, #132]	; (1648 <BMSModuleManager::printPackDetails(int, bool)+0x86c>)
    15c4:	2101      	movs	r1, #1
    15c6:	f009 fed9 	bl	b37c <usb_serial_write>
            for (int i = 25; i < modules[y].getCellsUsed() + 1; i++)
    15ca:	f108 0801 	add.w	r8, r8, #1
    15ce:	4620      	mov	r0, r4
    15d0:	f7fe ffca 	bl	568 <BMSModule::getCellsUsed()>
    15d4:	4603      	mov	r3, r0
    15d6:	4543      	cmp	r3, r8
    15d8:	f04f 0107 	mov.w	r1, #7
    15dc:	4648      	mov	r0, r9
    15de:	dad9      	bge.n	1594 <BMSModuleManager::printPackDetails(int, bool)+0x7b8>
    15e0:	e69f      	b.n	1322 <BMSModuleManager::printPackDetails(int, bool)+0x546>
    15e2:	f8df 9060 	ldr.w	r9, [pc, #96]	; 1644 <BMSModuleManager::printPackDetails(int, bool)+0x868>
    15e6:	f8df a058 	ldr.w	sl, [pc, #88]	; 1640 <BMSModuleManager::printPackDetails(int, bool)+0x864>
            for (int i = 25; i < modules[y].getCellsUsed() + 1; i++)
    15ea:	f04f 0819 	mov.w	r8, #25
    15ee:	e01c      	b.n	162a <BMSModuleManager::printPackDetails(int, bool)+0x84e>
              Serial2.print(1 + cellNum++);
    15f0:	3601      	adds	r6, #1
    15f2:	f008 fb97 	bl	9d24 <serial2_write>
	size_t print(int n)				{ return print((long)n); }
    15f6:	4631      	mov	r1, r6
    15f8:	4628      	mov	r0, r5
    15fa:	f007 fa0d 	bl	8a18 <Print::print(long)>
    15fe:	2102      	movs	r1, #2
    1600:	4650      	mov	r0, sl
    1602:	f008 fb8f 	bl	9d24 <serial2_write>
              Serial2.print(modules[y].getCellVoltage(i), digits);
    1606:	4641      	mov	r1, r8
    1608:	4620      	mov	r0, r4
    160a:	f7fe ffc1 	bl	590 <BMSModule::getCellVoltage(int)>
    160e:	f00a fb71 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1612:	9700      	str	r7, [sp, #0]
    1614:	4602      	mov	r2, r0
    1616:	460b      	mov	r3, r1
    1618:	4628      	mov	r0, r5
    161a:	f007 fa29 	bl	8a70 <Print::printFloat(double, unsigned char)>
    161e:	480a      	ldr	r0, [pc, #40]	; (1648 <BMSModuleManager::printPackDetails(int, bool)+0x86c>)
    1620:	2101      	movs	r1, #1
    1622:	f008 fb7f 	bl	9d24 <serial2_write>
            for (int i = 25; i < modules[y].getCellsUsed() + 1; i++)
    1626:	f108 0801 	add.w	r8, r8, #1
    162a:	4620      	mov	r0, r4
    162c:	f7fe ff9c 	bl	568 <BMSModule::getCellsUsed()>
    1630:	4603      	mov	r3, r0
    1632:	4543      	cmp	r3, r8
    1634:	f04f 0107 	mov.w	r1, #7
    1638:	4648      	mov	r0, r9
    163a:	dad9      	bge.n	15f0 <BMSModuleManager::printPackDetails(int, bool)+0x814>
    163c:	e725      	b.n	148a <BMSModuleManager::printPackDetails(int, bool)+0x6ae>
    163e:	bf00      	nop
    1640:	00013268 	.word	0x00013268
    1644:	000131fc 	.word	0x000131fc
    1648:	000131f8 	.word	0x000131f8
    164c:	00013204 	.word	0x00013204
    1650:	00013214 	.word	0x00013214

00001654 <BMSModuleManager::printAllCSV(unsigned long, float, int)>:

void BMSModuleManager::printAllCSV(unsigned long timestamp, float current, int SOC)
{
    1654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1658:	b087      	sub	sp, #28
    165a:	f500 7506 	add.w	r5, r0, #536	; 0x218
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    165e:	f8df 9224 	ldr.w	r9, [pc, #548]	; 1884 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x230>
    1662:	f8df a224 	ldr.w	sl, [pc, #548]	; 1888 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x234>
    1666:	9103      	str	r1, [sp, #12]
    1668:	9204      	str	r2, [sp, #16]
    166a:	4698      	mov	r8, r3
    166c:	462e      	mov	r6, r5
  for (int y = 1; y < 63; y++)
    166e:	2701      	movs	r7, #1
    1670:	9505      	str	r5, [sp, #20]
    1672:	4693      	mov	fp, r2
    1674:	e004      	b.n	1680 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x2c>
    1676:	3701      	adds	r7, #1
    1678:	2f3f      	cmp	r7, #63	; 0x3f
    167a:	f506 76f0 	add.w	r6, r6, #480	; 0x1e0
    167e:	d075      	beq.n	176c <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x118>
  {
    if (modules[y].isExisting())
    1680:	4630      	mov	r0, r6
    1682:	f7ff f84f 	bl	724 <BMSModule::isExisting()>
    1686:	2800      	cmp	r0, #0
    1688:	d0f5      	beq.n	1676 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x22>
    168a:	2300      	movs	r3, #0
    168c:	220a      	movs	r2, #10
    168e:	9903      	ldr	r1, [sp, #12]
    1690:	4648      	mov	r0, r9
    1692:	f007 f9e1 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1696:	2101      	movs	r1, #1
    1698:	4650      	mov	r0, sl
    169a:	f009 fe6f 	bl	b37c <usb_serial_write>
    {
      SERIALCONSOLE.print(timestamp);
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(current, 0);
    169e:	4658      	mov	r0, fp
    16a0:	f00a fb28 	bl	bcf4 <__aeabi_f2d>
    16a4:	460b      	mov	r3, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    16a6:	2100      	movs	r1, #0
    16a8:	4602      	mov	r2, r0
    16aa:	9100      	str	r1, [sp, #0]
    16ac:	4648      	mov	r0, r9
    16ae:	f007 f9df 	bl	8a70 <Print::printFloat(double, unsigned char)>
    16b2:	2101      	movs	r1, #1
    16b4:	4650      	mov	r0, sl
    16b6:	f009 fe61 	bl	b37c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    16ba:	4641      	mov	r1, r8
    16bc:	4648      	mov	r0, r9
    16be:	f007 f9ab 	bl	8a18 <Print::print(long)>
    16c2:	2101      	movs	r1, #1
    16c4:	4650      	mov	r0, sl
    16c6:	f009 fe59 	bl	b37c <usb_serial_write>
    16ca:	4639      	mov	r1, r7
    16cc:	4648      	mov	r0, r9
    16ce:	f007 f9a3 	bl	8a18 <Print::print(long)>
    16d2:	2101      	movs	r1, #1
    16d4:	4650      	mov	r0, sl
    16d6:	f009 fe51 	bl	b37c <usb_serial_write>
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(SOC);
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(y);
      SERIALCONSOLE.print(",");
      for (int i = 0; i < 8; i++)
    16da:	2400      	movs	r4, #0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    16dc:	2502      	movs	r5, #2
      {
        SERIALCONSOLE.print(modules[y].getCellVoltage(i));
    16de:	4621      	mov	r1, r4
    16e0:	4630      	mov	r0, r6
    16e2:	f7fe ff55 	bl	590 <BMSModule::getCellVoltage(int)>
    16e6:	f00a fb05 	bl	bcf4 <__aeabi_f2d>
    16ea:	9500      	str	r5, [sp, #0]
    16ec:	4602      	mov	r2, r0
    16ee:	460b      	mov	r3, r1
    16f0:	4648      	mov	r0, r9
    16f2:	f007 f9bd 	bl	8a70 <Print::printFloat(double, unsigned char)>
      for (int i = 0; i < 8; i++)
    16f6:	3401      	adds	r4, #1
    16f8:	2101      	movs	r1, #1
    16fa:	4650      	mov	r0, sl
    16fc:	f009 fe3e 	bl	b37c <usb_serial_write>
    1700:	2c08      	cmp	r4, #8
    1702:	d1ec      	bne.n	16de <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x8a>
        SERIALCONSOLE.print(",");
      }
      SERIALCONSOLE.print(modules[y].getTemperature(0));
    1704:	2100      	movs	r1, #0
    1706:	4630      	mov	r0, r6
    1708:	f7fe fffe 	bl	708 <BMSModule::getTemperature(int)>
    170c:	f00a faf2 	bl	bcf4 <__aeabi_f2d>
    1710:	9500      	str	r5, [sp, #0]
    1712:	4602      	mov	r2, r0
    1714:	460b      	mov	r3, r1
    1716:	4648      	mov	r0, r9
    1718:	f007 f9aa 	bl	8a70 <Print::printFloat(double, unsigned char)>
    171c:	2101      	movs	r1, #1
    171e:	4650      	mov	r0, sl
    1720:	f009 fe2c 	bl	b37c <usb_serial_write>
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(modules[y].getTemperature(1));
    1724:	2101      	movs	r1, #1
    1726:	4630      	mov	r0, r6
    1728:	f7fe ffee 	bl	708 <BMSModule::getTemperature(int)>
    172c:	f00a fae2 	bl	bcf4 <__aeabi_f2d>
    1730:	9500      	str	r5, [sp, #0]
    1732:	4602      	mov	r2, r0
    1734:	460b      	mov	r3, r1
    1736:	4648      	mov	r0, r9
    1738:	f007 f99a 	bl	8a70 <Print::printFloat(double, unsigned char)>
    173c:	2101      	movs	r1, #1
    173e:	4650      	mov	r0, sl
    1740:	f009 fe1c 	bl	b37c <usb_serial_write>
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(modules[y].getTemperature(2));
    1744:	2102      	movs	r1, #2
    1746:	4630      	mov	r0, r6
    1748:	f7fe ffde 	bl	708 <BMSModule::getTemperature(int)>
    174c:	f00a fad2 	bl	bcf4 <__aeabi_f2d>
    1750:	9500      	str	r5, [sp, #0]
    1752:	4602      	mov	r2, r0
    1754:	460b      	mov	r3, r1
    1756:	4648      	mov	r0, r9
    1758:	f007 f98a 	bl	8a70 <Print::printFloat(double, unsigned char)>
  for (int y = 1; y < 63; y++)
    175c:	3701      	adds	r7, #1
      SERIALCONSOLE.println();
    175e:	4648      	mov	r0, r9
    1760:	f007 f962 	bl	8a28 <Print::println()>
  for (int y = 1; y < 63; y++)
    1764:	2f3f      	cmp	r7, #63	; 0x3f
    1766:	f506 76f0 	add.w	r6, r6, #480	; 0x1e0
    176a:	d189      	bne.n	1680 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x2c>
    }
  }
  for (int y = 1; y < 63; y++)
    176c:	9d05      	ldr	r5, [sp, #20]
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    176e:	4f47      	ldr	r7, [pc, #284]	; (188c <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x238>)
    1770:	f8df 9114 	ldr.w	r9, [pc, #276]	; 1888 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x234>
    1774:	2601      	movs	r6, #1
    1776:	f04f 0b00 	mov.w	fp, #0
    177a:	e004      	b.n	1786 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x132>
    177c:	3601      	adds	r6, #1
    177e:	2e3f      	cmp	r6, #63	; 0x3f
    1780:	f505 75f0 	add.w	r5, r5, #480	; 0x1e0
    1784:	d07a      	beq.n	187c <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x228>
  {
    if (modules[y].isExisting())
    1786:	4628      	mov	r0, r5
    1788:	f7fe ffcc 	bl	724 <BMSModule::isExisting()>
    178c:	2800      	cmp	r0, #0
    178e:	d0f5      	beq.n	177c <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x128>
    1790:	2300      	movs	r3, #0
    1792:	220a      	movs	r2, #10
    1794:	9903      	ldr	r1, [sp, #12]
    1796:	4638      	mov	r0, r7
    1798:	f007 f95e 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    179c:	2101      	movs	r1, #1
    179e:	4648      	mov	r0, r9
    17a0:	f008 fac0 	bl	9d24 <serial2_write>
    {
      Serial2.print(timestamp);
      Serial2.print(",");
      Serial2.print(current, 0);
    17a4:	9804      	ldr	r0, [sp, #16]
    17a6:	f00a faa5 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    17aa:	f8cd b000 	str.w	fp, [sp]
    17ae:	4602      	mov	r2, r0
    17b0:	460b      	mov	r3, r1
    17b2:	4638      	mov	r0, r7
    17b4:	f007 f95c 	bl	8a70 <Print::printFloat(double, unsigned char)>
    17b8:	2101      	movs	r1, #1
    17ba:	4648      	mov	r0, r9
    17bc:	f008 fab2 	bl	9d24 <serial2_write>
	size_t print(int n)				{ return print((long)n); }
    17c0:	4641      	mov	r1, r8
    17c2:	4638      	mov	r0, r7
    17c4:	f007 f928 	bl	8a18 <Print::print(long)>
    17c8:	2101      	movs	r1, #1
    17ca:	4648      	mov	r0, r9
    17cc:	f008 faaa 	bl	9d24 <serial2_write>
    17d0:	4631      	mov	r1, r6
    17d2:	4638      	mov	r0, r7
    17d4:	f007 f920 	bl	8a18 <Print::print(long)>
    17d8:	2101      	movs	r1, #1
    17da:	4648      	mov	r0, r9
    17dc:	f008 faa2 	bl	9d24 <serial2_write>
      Serial2.print(",");
      Serial2.print(SOC);
      Serial2.print(",");
      Serial2.print(y);
      Serial2.print(",");
      for (int i = 0; i < 8; i++)
    17e0:	2400      	movs	r4, #0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    17e2:	f04f 0a02 	mov.w	sl, #2
      {
        Serial2.print(modules[y].getCellVoltage(i));
    17e6:	4621      	mov	r1, r4
    17e8:	4628      	mov	r0, r5
    17ea:	f7fe fed1 	bl	590 <BMSModule::getCellVoltage(int)>
    17ee:	f00a fa81 	bl	bcf4 <__aeabi_f2d>
    17f2:	f8cd a000 	str.w	sl, [sp]
    17f6:	4602      	mov	r2, r0
    17f8:	460b      	mov	r3, r1
    17fa:	4638      	mov	r0, r7
    17fc:	f007 f938 	bl	8a70 <Print::printFloat(double, unsigned char)>
      for (int i = 0; i < 8; i++)
    1800:	3401      	adds	r4, #1
    1802:	2101      	movs	r1, #1
    1804:	4648      	mov	r0, r9
    1806:	f008 fa8d 	bl	9d24 <serial2_write>
    180a:	2c08      	cmp	r4, #8
    180c:	d1eb      	bne.n	17e6 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x192>
        Serial2.print(",");
      }
      Serial2.print(modules[y].getTemperature(0));
    180e:	2100      	movs	r1, #0
    1810:	4628      	mov	r0, r5
    1812:	f7fe ff79 	bl	708 <BMSModule::getTemperature(int)>
    1816:	f00a fa6d 	bl	bcf4 <__aeabi_f2d>
    181a:	f8cd a000 	str.w	sl, [sp]
    181e:	4602      	mov	r2, r0
    1820:	460b      	mov	r3, r1
    1822:	4638      	mov	r0, r7
    1824:	f007 f924 	bl	8a70 <Print::printFloat(double, unsigned char)>
    1828:	2101      	movs	r1, #1
    182a:	4648      	mov	r0, r9
    182c:	f008 fa7a 	bl	9d24 <serial2_write>
      Serial2.print(",");
      Serial2.print(modules[y].getTemperature(1));
    1830:	2101      	movs	r1, #1
    1832:	4628      	mov	r0, r5
    1834:	f7fe ff68 	bl	708 <BMSModule::getTemperature(int)>
    1838:	f00a fa5c 	bl	bcf4 <__aeabi_f2d>
    183c:	f8cd a000 	str.w	sl, [sp]
    1840:	4602      	mov	r2, r0
    1842:	460b      	mov	r3, r1
    1844:	4638      	mov	r0, r7
    1846:	f007 f913 	bl	8a70 <Print::printFloat(double, unsigned char)>
    184a:	2101      	movs	r1, #1
    184c:	4648      	mov	r0, r9
    184e:	f008 fa69 	bl	9d24 <serial2_write>
      Serial2.print(",");
      Serial2.print(modules[y].getTemperature(2));
    1852:	2102      	movs	r1, #2
    1854:	4628      	mov	r0, r5
    1856:	f7fe ff57 	bl	708 <BMSModule::getTemperature(int)>
    185a:	f00a fa4b 	bl	bcf4 <__aeabi_f2d>
    185e:	f8cd a000 	str.w	sl, [sp]
    1862:	4602      	mov	r2, r0
    1864:	460b      	mov	r3, r1
    1866:	4638      	mov	r0, r7
    1868:	f007 f902 	bl	8a70 <Print::printFloat(double, unsigned char)>
  for (int y = 1; y < 63; y++)
    186c:	3601      	adds	r6, #1
      Serial2.println();
    186e:	4638      	mov	r0, r7
    1870:	f007 f8da 	bl	8a28 <Print::println()>
  for (int y = 1; y < 63; y++)
    1874:	2e3f      	cmp	r6, #63	; 0x3f
    1876:	f505 75f0 	add.w	r5, r5, #480	; 0x1e0
    187a:	d184      	bne.n	1786 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x132>
    }
  }
}
    187c:	b007      	add	sp, #28
    187e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1882:	bf00      	nop
    1884:	1fff880c 	.word	0x1fff880c
    1888:	00013220 	.word	0x00013220
    188c:	1fff87ac 	.word	0x1fff87ac

00001890 <Logger::setLoglevel(Logger::LogLevel)>:

/*
   Set the log level. Any output below the specified log level will be omitted.
*/
void Logger::setLoglevel(LogLevel level) {
  logLevel = level;
    1890:	4b01      	ldr	r3, [pc, #4]	; (1898 <Logger::setLoglevel(Logger::LogLevel)+0x8>)
    1892:	7018      	strb	r0, [r3, #0]
}
    1894:	4770      	bx	lr
    1896:	bf00      	nop
    1898:	1fff8720 	.word	0x1fff8720

0000189c <Logger::logMessage(char*, std::__va_list, bool)>:
   %l - prints the next parameter as long
   %c - prints the next parameter as a character
   %t - prints the next parameter as boolean ('T' or 'F')
   %T - prints the next parameter as boolean ('true' or 'false')
*/
void Logger::logMessage(char *format, va_list args, bool port) {
    189c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    18a0:	4684      	mov	ip, r0
  for (; *format != 0; ++format) {
    18a2:	7800      	ldrb	r0, [r0, #0]
void Logger::logMessage(char *format, va_list args, bool port) {
    18a4:	b082      	sub	sp, #8
    18a6:	4616      	mov	r6, r2
  for (; *format != 0; ++format) {
    18a8:	b190      	cbz	r0, 18d0 <Logger::logMessage(char*, std::__va_list, bool)+0x34>
    18aa:	f8df 8320 	ldr.w	r8, [pc, #800]	; 1bcc <Logger::logMessage(char*, std::__va_list, bool)+0x330>
    18ae:	f8df 9320 	ldr.w	r9, [pc, #800]	; 1bd0 <Logger::logMessage(char*, std::__va_list, bool)+0x334>
    18b2:	4fc8      	ldr	r7, [pc, #800]	; (1bd4 <Logger::logMessage(char*, std::__va_list, bool)+0x338>)
    18b4:	460d      	mov	r5, r1
    if (*format == '%') {
    18b6:	2825      	cmp	r0, #37	; 0x25
    18b8:	d019      	beq.n	18ee <Logger::logMessage(char*, std::__va_list, bool)+0x52>
      }

    }
    if (port == 0)
    {
      SERIALCONSOLE.print(*format);
    18ba:	f89c 0000 	ldrb.w	r0, [ip]
    18be:	4664      	mov	r4, ip
    if (port == 0)
    18c0:	b996      	cbnz	r6, 18e8 <Logger::logMessage(char*, std::__va_list, bool)+0x4c>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    18c2:	f009 fddf 	bl	b484 <usb_serial_putchar>
  for (; *format != 0; ++format) {
    18c6:	7860      	ldrb	r0, [r4, #1]
    18c8:	f104 0c01 	add.w	ip, r4, #1
    18cc:	2800      	cmp	r0, #0
    18ce:	d1f2      	bne.n	18b6 <Logger::logMessage(char*, std::__va_list, bool)+0x1a>
    else
    {
      Serial2.print(*format);
    }
  }
  if (port == 0)
    18d0:	2e00      	cmp	r6, #0
    18d2:	f040 80cc 	bne.w	1a6e <Logger::logMessage(char*, std::__va_list, bool)+0x1d2>
  {
    SERIALCONSOLE.println();
    18d6:	48c0      	ldr	r0, [pc, #768]	; (1bd8 <Logger::logMessage(char*, std::__va_list, bool)+0x33c>)
  }
  else
  {
    Serial2.println();
  }
}
    18d8:	b002      	add	sp, #8
    18da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    Serial2.println();
    18de:	f007 b8a3 	b.w	8a28 <Print::println()>
    18e2:	2025      	movs	r0, #37	; 0x25
        if (port == 0)
    18e4:	2e00      	cmp	r6, #0
    18e6:	d0ec      	beq.n	18c2 <Logger::logMessage(char*, std::__va_list, bool)+0x26>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    18e8:	f008 f9a0 	bl	9c2c <serial2_putchar>
    18ec:	e7eb      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
      if (*format == '\0')
    18ee:	f89c 0001 	ldrb.w	r0, [ip, #1]
      ++format;
    18f2:	f10c 0401 	add.w	r4, ip, #1
      if (*format == '\0')
    18f6:	2800      	cmp	r0, #0
    18f8:	d0ea      	beq.n	18d0 <Logger::logMessage(char*, std::__va_list, bool)+0x34>
      if (*format == '%') {
    18fa:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
    18fe:	2b55      	cmp	r3, #85	; 0x55
    1900:	d8de      	bhi.n	18c0 <Logger::logMessage(char*, std::__va_list, bool)+0x24>
    1902:	a201      	add	r2, pc, #4	; (adr r2, 1908 <Logger::logMessage(char*, std::__va_list, bool)+0x6c>)
    1904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1908:	000018e3 	.word	0x000018e3
    190c:	000018c1 	.word	0x000018c1
    1910:	000018c1 	.word	0x000018c1
    1914:	000018c1 	.word	0x000018c1
    1918:	000018c1 	.word	0x000018c1
    191c:	000018c1 	.word	0x000018c1
    1920:	000018c1 	.word	0x000018c1
    1924:	000018c1 	.word	0x000018c1
    1928:	000018c1 	.word	0x000018c1
    192c:	000018c1 	.word	0x000018c1
    1930:	000018c1 	.word	0x000018c1
    1934:	000018c1 	.word	0x000018c1
    1938:	000018c1 	.word	0x000018c1
    193c:	000018c1 	.word	0x000018c1
    1940:	000018c1 	.word	0x000018c1
    1944:	000018c1 	.word	0x000018c1
    1948:	000018c1 	.word	0x000018c1
    194c:	000018c1 	.word	0x000018c1
    1950:	000018c1 	.word	0x000018c1
    1954:	000018c1 	.word	0x000018c1
    1958:	000018c1 	.word	0x000018c1
    195c:	000018c1 	.word	0x000018c1
    1960:	000018c1 	.word	0x000018c1
    1964:	000018c1 	.word	0x000018c1
    1968:	000018c1 	.word	0x000018c1
    196c:	000018c1 	.word	0x000018c1
    1970:	000018c1 	.word	0x000018c1
    1974:	000018c1 	.word	0x000018c1
    1978:	000018c1 	.word	0x000018c1
    197c:	00001b53 	.word	0x00001b53
    1980:	000018c1 	.word	0x000018c1
    1984:	000018c1 	.word	0x000018c1
    1988:	000018c1 	.word	0x000018c1
    198c:	000018c1 	.word	0x000018c1
    1990:	000018c1 	.word	0x000018c1
    1994:	000018c1 	.word	0x000018c1
    1998:	000018c1 	.word	0x000018c1
    199c:	000018c1 	.word	0x000018c1
    19a0:	000018c1 	.word	0x000018c1
    19a4:	000018c1 	.word	0x000018c1
    19a8:	000018c1 	.word	0x000018c1
    19ac:	000018c1 	.word	0x000018c1
    19b0:	000018c1 	.word	0x000018c1
    19b4:	000018c1 	.word	0x000018c1
    19b8:	000018c1 	.word	0x000018c1
    19bc:	000018c1 	.word	0x000018c1
    19c0:	000018c1 	.word	0x000018c1
    19c4:	00001b3b 	.word	0x00001b3b
    19c8:	000018c1 	.word	0x000018c1
    19cc:	000018c1 	.word	0x000018c1
    19d0:	000018c1 	.word	0x000018c1
    19d4:	00001b1f 	.word	0x00001b1f
    19d8:	000018c1 	.word	0x000018c1
    19dc:	000018c1 	.word	0x000018c1
    19e0:	000018c1 	.word	0x000018c1
    19e4:	000018c1 	.word	0x000018c1
    19e8:	000018c1 	.word	0x000018c1
    19ec:	000018c1 	.word	0x000018c1
    19f0:	000018c1 	.word	0x000018c1
    19f4:	000018c1 	.word	0x000018c1
    19f8:	000018c1 	.word	0x000018c1
    19fc:	00001b0b 	.word	0x00001b0b
    1a00:	00001a61 	.word	0x00001a61
    1a04:	00001a61 	.word	0x00001a61
    1a08:	000018c1 	.word	0x000018c1
    1a0c:	00001ad9 	.word	0x00001ad9
    1a10:	000018c1 	.word	0x000018c1
    1a14:	000018c1 	.word	0x000018c1
    1a18:	00001a61 	.word	0x00001a61
    1a1c:	000018c1 	.word	0x000018c1
    1a20:	000018c1 	.word	0x000018c1
    1a24:	00001a61 	.word	0x00001a61
    1a28:	000018c1 	.word	0x000018c1
    1a2c:	000018c1 	.word	0x000018c1
    1a30:	000018c1 	.word	0x000018c1
    1a34:	000018c1 	.word	0x000018c1
    1a38:	000018c1 	.word	0x000018c1
    1a3c:	000018c1 	.word	0x000018c1
    1a40:	00001aa1 	.word	0x00001aa1
    1a44:	00001a87 	.word	0x00001a87
    1a48:	000018c1 	.word	0x000018c1
    1a4c:	000018c1 	.word	0x000018c1
    1a50:	000018c1 	.word	0x000018c1
    1a54:	00001ac3 	.word	0x00001ac3
    1a58:	000018c1 	.word	0x000018c1
    1a5c:	00001af1 	.word	0x00001af1
        if (port == 0)
    1a60:	b95e      	cbnz	r6, 1a7a <Logger::logMessage(char*, std::__va_list, bool)+0x1de>
	size_t print(int n)				{ return print((long)n); }
    1a62:	f855 1b04 	ldr.w	r1, [r5], #4
    1a66:	485c      	ldr	r0, [pc, #368]	; (1bd8 <Logger::logMessage(char*, std::__va_list, bool)+0x33c>)
    1a68:	f006 ffd6 	bl	8a18 <Print::print(long)>
    1a6c:	e72b      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
    Serial2.println();
    1a6e:	485b      	ldr	r0, [pc, #364]	; (1bdc <Logger::logMessage(char*, std::__va_list, bool)+0x340>)
}
    1a70:	b002      	add	sp, #8
    1a72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    Serial2.println();
    1a76:	f006 bfd7 	b.w	8a28 <Print::println()>
    1a7a:	f855 1b04 	ldr.w	r1, [r5], #4
    1a7e:	4857      	ldr	r0, [pc, #348]	; (1bdc <Logger::logMessage(char*, std::__va_list, bool)+0x340>)
    1a80:	f006 ffca 	bl	8a18 <Print::print(long)>
    1a84:	e71f      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
          if (va_arg( args, int ) == 1) {
    1a86:	f855 1b04 	ldr.w	r1, [r5], #4
        if (port == 0)
    1a8a:	2e00      	cmp	r6, #0
    1a8c:	f040 80c2 	bne.w	1c14 <Logger::logMessage(char*, std::__va_list, bool)+0x378>
          if (va_arg( args, int ) == 1) {
    1a90:	2901      	cmp	r1, #1
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1a92:	bf0e      	itee	eq
    1a94:	4852      	ldreq	r0, [pc, #328]	; (1be0 <Logger::logMessage(char*, std::__va_list, bool)+0x344>)
    1a96:	2101      	movne	r1, #1
    1a98:	4638      	movne	r0, r7
    1a9a:	f009 fc6f 	bl	b37c <usb_serial_write>
    1a9e:	e712      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
        register char *s = (char *) va_arg( args, int );
    1aa0:	f855 ab04 	ldr.w	sl, [r5], #4
        if (port == 0)
    1aa4:	2e00      	cmp	r6, #0
    1aa6:	f040 80a9 	bne.w	1bfc <Logger::logMessage(char*, std::__va_list, bool)+0x360>
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    1aaa:	f1ba 0f00 	cmp.w	sl, #0
    1aae:	f43f af0a 	beq.w	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
							  return write((const uint8_t *)str, strlen(str)); }
    1ab2:	4650      	mov	r0, sl
    1ab4:	f00b fd04 	bl	d4c0 <strlen>
    1ab8:	4601      	mov	r1, r0
    1aba:	4650      	mov	r0, sl
    1abc:	f009 fc5e 	bl	b37c <usb_serial_write>
    1ac0:	e701      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
        if (port == 0)
    1ac2:	2e00      	cmp	r6, #0
    1ac4:	f040 8092 	bne.w	1bec <Logger::logMessage(char*, std::__va_list, bool)+0x350>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    1ac8:	f855 1b04 	ldr.w	r1, [r5], #4
    1acc:	4842      	ldr	r0, [pc, #264]	; (1bd8 <Logger::logMessage(char*, std::__va_list, bool)+0x33c>)
    1ace:	4633      	mov	r3, r6
    1ad0:	2210      	movs	r2, #16
    1ad2:	f006 ffc1 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1ad6:	e6f6      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
          SERIALCONSOLE.print(va_arg( args, double ), 3);
    1ad8:	3507      	adds	r5, #7
    1ada:	f025 0507 	bic.w	r5, r5, #7
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1ade:	2103      	movs	r1, #3
        if (port == 0)
    1ae0:	b966      	cbnz	r6, 1afc <Logger::logMessage(char*, std::__va_list, bool)+0x260>
    1ae2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
    1ae6:	483c      	ldr	r0, [pc, #240]	; (1bd8 <Logger::logMessage(char*, std::__va_list, bool)+0x33c>)
    1ae8:	9100      	str	r1, [sp, #0]
    1aea:	f006 ffc1 	bl	8a70 <Print::printFloat(double, unsigned char)>
    1aee:	e6ea      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
          SERIALCONSOLE.print(va_arg( args, double ), 0);
    1af0:	3507      	adds	r5, #7
    1af2:	f025 0507 	bic.w	r5, r5, #7
        if (port == 0)
    1af6:	2e00      	cmp	r6, #0
    1af8:	d061      	beq.n	1bbe <Logger::logMessage(char*, std::__va_list, bool)+0x322>
    1afa:	2100      	movs	r1, #0
    1afc:	e8f5 2302 	ldrd	r2, r3, [r5], #8
    1b00:	4836      	ldr	r0, [pc, #216]	; (1bdc <Logger::logMessage(char*, std::__va_list, bool)+0x340>)
    1b02:	9100      	str	r1, [sp, #0]
    1b04:	f006 ffb4 	bl	8a70 <Print::printFloat(double, unsigned char)>
    1b08:	e6dd      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
        if (port == 0)
    1b0a:	2e00      	cmp	r6, #0
    1b0c:	d14f      	bne.n	1bae <Logger::logMessage(char*, std::__va_list, bool)+0x312>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    1b0e:	f855 1b04 	ldr.w	r1, [r5], #4
    1b12:	4831      	ldr	r0, [pc, #196]	; (1bd8 <Logger::logMessage(char*, std::__va_list, bool)+0x33c>)
    1b14:	4633      	mov	r3, r6
    1b16:	2202      	movs	r2, #2
    1b18:	f006 ff9e 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1b1c:	e6d3      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
        if (port == 0)
    1b1e:	2e00      	cmp	r6, #0
    1b20:	d139      	bne.n	1b96 <Logger::logMessage(char*, std::__va_list, bool)+0x2fa>
    1b22:	2102      	movs	r1, #2
    1b24:	482f      	ldr	r0, [pc, #188]	; (1be4 <Logger::logMessage(char*, std::__va_list, bool)+0x348>)
    1b26:	f009 fc29 	bl	b37c <usb_serial_write>
    1b2a:	f855 1b04 	ldr.w	r1, [r5], #4
    1b2e:	482a      	ldr	r0, [pc, #168]	; (1bd8 <Logger::logMessage(char*, std::__va_list, bool)+0x33c>)
    1b30:	4633      	mov	r3, r6
    1b32:	2210      	movs	r2, #16
    1b34:	f006 ff90 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1b38:	e6c5      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
          if (va_arg( args, int ) == 1) {
    1b3a:	f855 3b04 	ldr.w	r3, [r5], #4
        if (port == 0)
    1b3e:	bb0e      	cbnz	r6, 1b84 <Logger::logMessage(char*, std::__va_list, bool)+0x2e8>
          if (va_arg( args, int ) == 1) {
    1b40:	2b01      	cmp	r3, #1
    1b42:	bf07      	ittee	eq
    1b44:	2104      	moveq	r1, #4
    1b46:	4648      	moveq	r0, r9
    1b48:	2105      	movne	r1, #5
    1b4a:	4640      	movne	r0, r8
    1b4c:	f009 fc16 	bl	b37c <usb_serial_write>
    1b50:	e6b9      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
        if (port == 0)
    1b52:	b95e      	cbnz	r6, 1b6c <Logger::logMessage(char*, std::__va_list, bool)+0x2d0>
    1b54:	2102      	movs	r1, #2
    1b56:	4824      	ldr	r0, [pc, #144]	; (1be8 <Logger::logMessage(char*, std::__va_list, bool)+0x34c>)
    1b58:	f009 fc10 	bl	b37c <usb_serial_write>
    1b5c:	f855 1b04 	ldr.w	r1, [r5], #4
    1b60:	481d      	ldr	r0, [pc, #116]	; (1bd8 <Logger::logMessage(char*, std::__va_list, bool)+0x33c>)
    1b62:	4633      	mov	r3, r6
    1b64:	2202      	movs	r2, #2
    1b66:	f006 ff77 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1b6a:	e6ac      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
					{ serial2_write(buffer, size); return size; }
    1b6c:	481e      	ldr	r0, [pc, #120]	; (1be8 <Logger::logMessage(char*, std::__va_list, bool)+0x34c>)
    1b6e:	2102      	movs	r1, #2
    1b70:	f008 f8d8 	bl	9d24 <serial2_write>
    1b74:	f855 1b04 	ldr.w	r1, [r5], #4
    1b78:	4818      	ldr	r0, [pc, #96]	; (1bdc <Logger::logMessage(char*, std::__va_list, bool)+0x340>)
    1b7a:	2300      	movs	r3, #0
    1b7c:	2202      	movs	r2, #2
    1b7e:	f006 ff6b 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1b82:	e6a0      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
          if (va_arg( args, int ) == 1) {
    1b84:	2b01      	cmp	r3, #1
    1b86:	bf07      	ittee	eq
    1b88:	2104      	moveq	r1, #4
    1b8a:	4648      	moveq	r0, r9
    1b8c:	2105      	movne	r1, #5
    1b8e:	4640      	movne	r0, r8
    1b90:	f008 f8c8 	bl	9d24 <serial2_write>
    1b94:	e697      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
    1b96:	4813      	ldr	r0, [pc, #76]	; (1be4 <Logger::logMessage(char*, std::__va_list, bool)+0x348>)
    1b98:	2102      	movs	r1, #2
    1b9a:	f008 f8c3 	bl	9d24 <serial2_write>
    1b9e:	f855 1b04 	ldr.w	r1, [r5], #4
    1ba2:	480e      	ldr	r0, [pc, #56]	; (1bdc <Logger::logMessage(char*, std::__va_list, bool)+0x340>)
    1ba4:	2300      	movs	r3, #0
    1ba6:	2210      	movs	r2, #16
    1ba8:	f006 ff56 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1bac:	e68b      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
    1bae:	f855 1b04 	ldr.w	r1, [r5], #4
    1bb2:	480a      	ldr	r0, [pc, #40]	; (1bdc <Logger::logMessage(char*, std::__va_list, bool)+0x340>)
    1bb4:	2300      	movs	r3, #0
    1bb6:	2202      	movs	r2, #2
    1bb8:	f006 ff4e 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1bbc:	e683      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1bbe:	e8f5 2302 	ldrd	r2, r3, [r5], #8
    1bc2:	4805      	ldr	r0, [pc, #20]	; (1bd8 <Logger::logMessage(char*, std::__va_list, bool)+0x33c>)
    1bc4:	9600      	str	r6, [sp, #0]
    1bc6:	f006 ff53 	bl	8a70 <Print::printFloat(double, unsigned char)>
    1bca:	e67c      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
    1bcc:	0001323c 	.word	0x0001323c
    1bd0:	00013234 	.word	0x00013234
    1bd4:	00013230 	.word	0x00013230
    1bd8:	1fff880c 	.word	0x1fff880c
    1bdc:	1fff87ac 	.word	0x1fff87ac
    1be0:	0001322c 	.word	0x0001322c
    1be4:	00013224 	.word	0x00013224
    1be8:	00013228 	.word	0x00013228
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    1bec:	f855 1b04 	ldr.w	r1, [r5], #4
    1bf0:	480c      	ldr	r0, [pc, #48]	; (1c24 <Logger::logMessage(char*, std::__va_list, bool)+0x388>)
    1bf2:	2300      	movs	r3, #0
    1bf4:	2210      	movs	r2, #16
    1bf6:	f006 ff2f 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1bfa:	e664      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    1bfc:	f1ba 0f00 	cmp.w	sl, #0
    1c00:	f43f ae61 	beq.w	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
							  return write((const uint8_t *)str, strlen(str)); }
    1c04:	4650      	mov	r0, sl
    1c06:	f00b fc5b 	bl	d4c0 <strlen>
    1c0a:	4601      	mov	r1, r0
    1c0c:	4650      	mov	r0, sl
    1c0e:	f008 f889 	bl	9d24 <serial2_write>
    1c12:	e658      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
          if (va_arg( args, int ) == 1) {
    1c14:	2901      	cmp	r1, #1
    1c16:	bf0e      	itee	eq
    1c18:	4803      	ldreq	r0, [pc, #12]	; (1c28 <Logger::logMessage(char*, std::__va_list, bool)+0x38c>)
    1c1a:	2101      	movne	r1, #1
    1c1c:	4638      	movne	r0, r7
    1c1e:	f008 f881 	bl	9d24 <serial2_write>
    1c22:	e650      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
    1c24:	1fff87ac 	.word	0x1fff87ac
    1c28:	0001322c 	.word	0x0001322c

00001c2c <Logger::console(bool, char*, ...)>:
void Logger::console(bool port, char *message, ...) {
    1c2c:	b40e      	push	{r1, r2, r3}
    1c2e:	b500      	push	{lr}
    1c30:	b082      	sub	sp, #8
    1c32:	a903      	add	r1, sp, #12
    1c34:	4602      	mov	r2, r0
    1c36:	f851 0b04 	ldr.w	r0, [r1], #4
  va_start(args, message);
    1c3a:	9101      	str	r1, [sp, #4]
  Logger::logMessage(message, args, port);
    1c3c:	f7ff fe2e 	bl	189c <Logger::logMessage(char*, std::__va_list, bool)>
}
    1c40:	b002      	add	sp, #8
    1c42:	f85d eb04 	ldr.w	lr, [sp], #4
    1c46:	b003      	add	sp, #12
    1c48:	4770      	bx	lr
    1c4a:	bf00      	nop

00001c4c <SerialConsole::SerialConsole()>:

bool printPrettyDisplay;
uint32_t prettyCounter;
int whichDisplay;

SerialConsole::SerialConsole() {
    1c4c:	b430      	push	{r4, r5}
    //State variables for serial console
    ptrBuffer = 0;
    state = STATE_ROOT_MENU;
    loopcount=0;
    cancel=false;
    printPrettyDisplay = false;
    1c4e:	4d07      	ldr	r5, [pc, #28]	; (1c6c <SerialConsole::SerialConsole()+0x20>)
    prettyCounter = 0;
    1c50:	4c07      	ldr	r4, [pc, #28]	; (1c70 <SerialConsole::SerialConsole()+0x24>)
    whichDisplay = 0;
    1c52:	4908      	ldr	r1, [pc, #32]	; (1c74 <SerialConsole::SerialConsole()+0x28>)
    ptrBuffer = 0;
    1c54:	2300      	movs	r3, #0
    printPrettyDisplay = false;
    1c56:	702b      	strb	r3, [r5, #0]
    prettyCounter = 0;
    1c58:	6023      	str	r3, [r4, #0]
    ptrBuffer = 0;
    1c5a:	6503      	str	r3, [r0, #80]	; 0x50
}
    1c5c:	bc30      	pop	{r4, r5}
    state = STATE_ROOT_MENU;
    1c5e:	6543      	str	r3, [r0, #84]	; 0x54
    loopcount=0;
    1c60:	6583      	str	r3, [r0, #88]	; 0x58
    cancel=false;
    1c62:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    whichDisplay = 0;
    1c66:	600b      	str	r3, [r1, #0]
}
    1c68:	4770      	bx	lr
    1c6a:	bf00      	nop
    1c6c:	1fff8f94 	.word	0x1fff8f94
    1c70:	1fff8f90 	.word	0x1fff8f90
    1c74:	1fff8f98 	.word	0x1fff8f98

00001c78 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]>:
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	}
#endif
	long in_range = in_max - in_min;
	long out_range = out_max - out_min;
    1c78:	f8dd c000 	ldr.w	ip, [sp]
	if (in_range == 0) return out_min + out_range / 2;
    1c7c:	1a52      	subs	r2, r2, r1
	long out_range = out_max - out_min;
    1c7e:	ebac 0c03 	sub.w	ip, ip, r3
	if (in_range == 0) return out_min + out_range / 2;
    1c82:	d01c      	beq.n	1cbe <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x46>
	long num = (x - in_min) * out_range;
    1c84:	1a40      	subs	r0, r0, r1
	if (out_range >= 0) {
    1c86:	f1bc 0f00 	cmp.w	ip, #0
	long num = (x - in_min) * out_range;
    1c8a:	fb0c f000 	mul.w	r0, ip, r0
		num += in_range / 2;
    1c8e:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
	if (out_range >= 0) {
    1c92:	db09      	blt.n	1ca8 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x30>
		num += in_range / 2;
    1c94:	eb00 0061 	add.w	r0, r0, r1, asr #1
	} else {
		num -= in_range / 2;
	}
	long result = num / in_range + out_min;
	if (out_range >= 0) {
		if (in_range * num < 0) return result - 1;
    1c98:	fb00 f102 	mul.w	r1, r0, r2
    1c9c:	2900      	cmp	r1, #0
	long result = num / in_range + out_min;
    1c9e:	fb90 f0f2 	sdiv	r0, r0, r2
    1ca2:	4418      	add	r0, r3
		if (in_range * num < 0) return result - 1;
    1ca4:	db10      	blt.n	1cc8 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x50>
		if (in_range * num >= 0) return result + 1;
	}
	return result;
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
}
    1ca6:	4770      	bx	lr
		num -= in_range / 2;
    1ca8:	eba0 0061 	sub.w	r0, r0, r1, asr #1
		if (in_range * num >= 0) return result + 1;
    1cac:	fb00 f102 	mul.w	r1, r0, r2
    1cb0:	2900      	cmp	r1, #0
	long result = num / in_range + out_min;
    1cb2:	fb90 f0f2 	sdiv	r0, r0, r2
    1cb6:	4418      	add	r0, r3
		if (in_range * num >= 0) return result + 1;
    1cb8:	dbf5      	blt.n	1ca6 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x2e>
    1cba:	3001      	adds	r0, #1
}
    1cbc:	4770      	bx	lr
	if (in_range == 0) return out_min + out_range / 2;
    1cbe:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
    1cc2:	eb03 006c 	add.w	r0, r3, ip, asr #1
    1cc6:	4770      	bx	lr
		if (in_range * num < 0) return result - 1;
    1cc8:	3801      	subs	r0, #1
    1cca:	4770      	bx	lr

00001ccc <loadSettings()>:
int menuload = 0;
int debugdigits = 2;  //amount of digits behind decimal for voltage reading


ADC *adc = new ADC();  // adc object
void loadSettings() {
    1ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Logger::console(0, "Resetting to factory defaults");
    1cd0:	494a      	ldr	r1, [pc, #296]	; (1dfc <loadSettings()+0x130>)
  settings.ChargeHys = 0.2f;  // voltage drop required for charger to kick back on
  settings.WarnOff = 0.1f;    //voltage offset to raise a warning
  settings.DischVsetpoint = 3.2f;
  settings.CellGap = 0.2f;  //max delta between high and low cell
  settings.OverTSetpoint = 65.0f;
  settings.UnderTSetpoint = -10.0f;
    1cd2:	4f4b      	ldr	r7, [pc, #300]	; (1e00 <loadSettings()+0x134>)
  settings.OverVSetpoint = 4.2f;
    1cd4:	4c4b      	ldr	r4, [pc, #300]	; (1e04 <loadSettings()+0x138>)
  settings.conthold = 50;         //holding duty cycle for contactor 0-255
  settings.Precurrent = 1000;     //ma before closing main contator
  settings.convhigh = 58;         // mV/A current sensor high range channel
  settings.convlow = 643;         // mV/A current sensor low range channel
  settings.changecur = 20000;     //mA change overpoint
  settings.offset1 = 1750;        //mV mid point of channel 1
    1cd6:	f8df 8130 	ldr.w	r8, [pc, #304]	; 1e08 <loadSettings()+0x13c>
  Logger::console(0, "Resetting to factory defaults");
    1cda:	2000      	movs	r0, #0
    1cdc:	f7ff ffa6 	bl	1c2c <Logger::console(bool, char*, ...)>
  settings.version = EEPROM_VERSION;
    1ce0:	4b4a      	ldr	r3, [pc, #296]	; (1e0c <loadSettings()+0x140>)
  settings.ChargeHys = 0.2f;  // voltage drop required for charger to kick back on
    1ce2:	484b      	ldr	r0, [pc, #300]	; (1e10 <loadSettings()+0x144>)
  settings.UnderTSetpoint = -10.0f;
    1ce4:	62df      	str	r7, [r3, #44]	; 0x2c
  settings.ChargeTSetpoint = 0.0f;
    1ce6:	2700      	movs	r7, #0
    1ce8:	631f      	str	r7, [r3, #48]	; 0x30
  settings.DisTSetpoint = 40.0f;
    1cea:	4f4a      	ldr	r7, [pc, #296]	; (1e14 <loadSettings()+0x148>)
  settings.OverVSetpoint = 4.2f;
    1cec:	60dc      	str	r4, [r3, #12]
  settings.DisTSetpoint = 40.0f;
    1cee:	635f      	str	r7, [r3, #52]	; 0x34
  settings.UnderVSetpoint = 3.0f;
    1cf0:	4c49      	ldr	r4, [pc, #292]	; (1e18 <loadSettings()+0x14c>)
  settings.WarnToff = 5.0f;   //temp offset before raising warning
    1cf2:	4f4a      	ldr	r7, [pc, #296]	; (1e1c <loadSettings()+0x150>)
  settings.UnderVSetpoint = 3.0f;
    1cf4:	611c      	str	r4, [r3, #16]
  settings.batteryID = 0x01;  //in the future should be 0xFF to force it to ask for an address
    1cf6:	f240 2901 	movw	r9, #513	; 0x201
  settings.ChargeVsetpoint = 4.1f;
    1cfa:	4c49      	ldr	r4, [pc, #292]	; (1e20 <loadSettings()+0x154>)
  settings.WarnToff = 5.0f;   //temp offset before raising warning
    1cfc:	639f      	str	r7, [r3, #56]	; 0x38
  settings.batteryID = 0x01;  //in the future should be 0xFF to force it to ask for an address
    1cfe:	f8a3 9008 	strh.w	r9, [r3, #8]
  settings.canSpeed = 125000;
    1d02:	4f48      	ldr	r7, [pc, #288]	; (1e24 <loadSettings()+0x158>)
  settings.ChargeVsetpoint = 4.1f;
    1d04:	615c      	str	r4, [r3, #20]
  settings.Scells = 12;             //Cells in series
    1d06:	f04f 090c 	mov.w	r9, #12
  settings.WarnOff = 0.1f;    //voltage offset to raise a warning
    1d0a:	4c47      	ldr	r4, [pc, #284]	; (1e28 <loadSettings()+0x15c>)
  settings.canSpeed = 125000;
    1d0c:	605f      	str	r7, [r3, #4]
  settings.Scells = 12;             //Cells in series
    1d0e:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
  settings.StoreVsetpoint = 3.8;    // V storage mode charge max
    1d12:	4f46      	ldr	r7, [pc, #280]	; (1e2c <loadSettings()+0x160>)
  settings.WarnOff = 0.1f;    //voltage offset to raise a warning
    1d14:	625c      	str	r4, [r3, #36]	; 0x24
  settings.socvolt[0] = 3100;       //Voltage and SOC curve for voltage based SOC calc
    1d16:	f640 491c 	movw	r9, #3100	; 0xc1c
  settings.DischVsetpoint = 3.2f;
    1d1a:	4c45      	ldr	r4, [pc, #276]	; (1e30 <loadSettings()+0x164>)
  settings.StoreVsetpoint = 3.8;    // V storage mode charge max
    1d1c:	621f      	str	r7, [r3, #32]
  settings.version = EEPROM_VERSION;
    1d1e:	f240 2512 	movw	r5, #530	; 0x212
  settings.IgnoreVolt = 0.5;  //
    1d22:	f04f 577c 	mov.w	r7, #1056964608	; 0x3f000000
  settings.socvolt[0] = 3100;       //Voltage and SOC curve for voltage based SOC calc
    1d26:	f8c3 9068 	str.w	r9, [r3, #104]	; 0x68
  settings.socvolt[1] = 10;         //Voltage and SOC curve for voltage based SOC calc
    1d2a:	f04f 090a 	mov.w	r9, #10
  settings.version = EEPROM_VERSION;
    1d2e:	801d      	strh	r5, [r3, #0]
  settings.DischVsetpoint = 3.2f;
    1d30:	619c      	str	r4, [r3, #24]
  settings.chargecurrentmax = 300;  //max charge current in 0.1A
    1d32:	f44f 7596 	mov.w	r5, #300	; 0x12c
  settings.OverTSetpoint = 65.0f;
    1d36:	4c3f      	ldr	r4, [pc, #252]	; (1e34 <loadSettings()+0x168>)
  settings.IgnoreVolt = 0.5;  //
    1d38:	645f      	str	r7, [r3, #68]	; 0x44
  settings.socvolt[1] = 10;         //Voltage and SOC curve for voltage based SOC calc
    1d3a:	f8c3 906c 	str.w	r9, [r3, #108]	; 0x6c
  settings.balanceVoltage = 3.9f;
    1d3e:	4f3e      	ldr	r7, [pc, #248]	; (1e38 <loadSettings()+0x16c>)
  settings.ChargeHys = 0.2f;  // voltage drop required for charger to kick back on
    1d40:	61d8      	str	r0, [r3, #28]
  settings.socvolt[2] = 4100;       //Voltage and SOC curve for voltage based SOC calc
    1d42:	f241 0904 	movw	r9, #4100	; 0x1004
  settings.IgnoreTemp = 0;    // 0 - use both sensors, 1 or 2 only use that sensor
    1d46:	2200      	movs	r2, #0
  settings.Pstrings = 1;            // strings in parallel used to divide voltage of pack
    1d48:	2101      	movs	r1, #1
  settings.gaugehigh = 255;       //full fuel gauge pwm
  settings.ESSmode = 0;           //activate ESS mode
  settings.ncur = 1;              //number of multiples to use for current measurement
  settings.chargertype = 2;       // 1 - Brusa NLG5xx 2 - Volt charger 0 -No Charger
  settings.chargerspd = 100;      //ms per message
  settings.triptime = 5000;       //ms of allowed undervoltage before throwing open stopping discharge.
    1d4a:	f241 3688 	movw	r6, #5000	; 0x1388
  settings.OverTSetpoint = 65.0f;
    1d4e:	629c      	str	r4, [r3, #40]	; 0x28
  settings.CellGap = 0.2f;  //max delta between high and low cell
    1d50:	63d8      	str	r0, [r3, #60]	; 0x3c
  settings.CAP = 100;               //battery size in Ah
    1d52:	2464      	movs	r4, #100	; 0x64
  settings.chargecurrentend = 50;   //end charge current in 0.1A
    1d54:	2032      	movs	r0, #50	; 0x32
  settings.chargecurrentmax = 300;  //max charge current in 0.1A
    1d56:	65dd      	str	r5, [r3, #92]	; 0x5c
  settings.discurrentmax = 300;     // max discharge current in 0.1A
    1d58:	665d      	str	r5, [r3, #100]	; 0x64
  settings.balanceVoltage = 3.9f;
    1d5a:	649f      	str	r7, [r3, #72]	; 0x48
  settings.cursens = 2;
    1d5c:	2502      	movs	r5, #2
  settings.balanceHyst = 0.04f;
    1d5e:	4f37      	ldr	r7, [pc, #220]	; (1e3c <loadSettings()+0x170>)
  settings.socvolt[2] = 4100;       //Voltage and SOC curve for voltage based SOC calc
    1d60:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
  settings.socvolt[3] = 90;         //Voltage and SOC curve for voltage based SOC calc
    1d64:	f04f 095a 	mov.w	r9, #90	; 0x5a
  settings.IgnoreTemp = 0;    // 0 - use both sensors, 1 or 2 only use that sensor
    1d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  settings.Pstrings = 1;            // strings in parallel used to divide voltage of pack
    1d6c:	6559      	str	r1, [r3, #84]	; 0x54
  settings.invertcur = 0;           //Invert current sensor direction
    1d6e:	679a      	str	r2, [r3, #120]	; 0x78
  settings.chargecurrentend = 50;   //end charge current in 0.1A
    1d70:	6618      	str	r0, [r3, #96]	; 0x60
  settings.CAP = 100;               //battery size in Ah
    1d72:	659c      	str	r4, [r3, #88]	; 0x58
  settings.balanceHyst = 0.04f;
    1d74:	64df      	str	r7, [r3, #76]	; 0x4c
  settings.triptime = 5000;       //ms of allowed undervoltage before throwing open stopping discharge.
    1d76:	f8a3 60ce 	strh.w	r6, [r3, #206]	; 0xce
  settings.socvolt[3] = 90;         //Voltage and SOC curve for voltage based SOC calc
    1d7a:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
  settings.cursens = 2;
    1d7e:	67dd      	str	r5, [r3, #124]	; 0x7c
  settings.voltsoc = 0;           //SOC purely voltage based
    1d80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  settings.ESSmode = 0;           //activate ESS mode
    1d84:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  settings.gaugehigh = 255;       //full fuel gauge pwm
    1d88:	22ff      	movs	r2, #255	; 0xff
    1d8a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  settings.CurDead = 5;           // mV of dead band on current sensor
    1d8e:	2205      	movs	r2, #5
  settings.chargerspd = 100;      //ms per message
    1d90:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
  settings.conthold = 50;         //holding duty cycle for contactor 0-255
    1d94:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  settings.ChargerDirect = 1;     //1 - charger is always connected to HV battery // 0 - Charger is behind the contactors
    1d98:	f240 1401 	movw	r4, #257	; 0x101
  settings.gaugelow = 50;         //empty fuel gauge pwm
    1d9c:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  settings.CurDead = 5;           // mV of dead band on current sensor
    1da0:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
  settings.disp = 1;              // 1 - display is used 0 - mirror serial data onto serial bus
  settings.SerialCan = 1;         // 1- serial can adapter used 0- Not used
  settings.SerialCanSpeed = 500;  //serial can adapter speed
  settings.DCDCreq = 140;         //requested DCDC voltage output in 0.1V
    1da4:	208c      	movs	r0, #140	; 0x8c
  settings.SerialCanBaud = 19200;
    1da6:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
  settings.convhigh = 58;         // mV/A current sensor high range channel
    1daa:	4f25      	ldr	r7, [pc, #148]	; (1e40 <loadSettings()+0x174>)
  settings.convlow = 643;         // mV/A current sensor low range channel
    1dac:	f8df e094 	ldr.w	lr, [pc, #148]	; 1e44 <loadSettings()+0x178>
  settings.DisTaper = 0.3f;         //V offset to bring in discharge taper to Zero Amps at settings.DischVsetpoint
    1db0:	f8df c094 	ldr.w	ip, [pc, #148]	; 1e48 <loadSettings()+0x17c>
  settings.ncur = 1;              //number of multiples to use for current measurement
    1db4:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
  settings.ChargerDirect = 1;     //1 - charger is always connected to HV battery // 0 - Charger is behind the contactors
    1db8:	f8a3 40c0 	strh.w	r4, [r3, #192]	; 0xc0
  settings.SerialCan = 1;         // 1- serial can adapter used 0- Not used
    1dbc:	f883 10c2 	strb.w	r1, [r3, #194]	; 0xc2
  settings.SerialCanSpeed = 500;  //serial can adapter speed
    1dc0:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
  settings.SerialCanBaud = 19200;
    1dc4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  settings.changecur = 20000;     //mA change overpoint
    1dc8:	f644 6120 	movw	r1, #20000	; 0x4e20
  settings.Precurrent = 1000;     //ma before closing main contator
    1dcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  settings.DCDCreq = 140;         //requested DCDC voltage output in 0.1V
    1dd0:	f883 00cc 	strb.w	r0, [r3, #204]	; 0xcc
  settings.offset1 = 1750;        //mV mid point of channel 1
    1dd4:	f8c3 8084 	str.w	r8, [r3, #132]	; 0x84
  settings.convhigh = 58;         // mV/A current sensor high range channel
    1dd8:	f8c3 7088 	str.w	r7, [r3, #136]	; 0x88
  settings.convlow = 643;         // mV/A current sensor low range channel
    1ddc:	f8c3 e08c 	str.w	lr, [r3, #140]	; 0x8c
  settings.Pretime = 5000;        //ms of precharge time
    1de0:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
  settings.chargertype = 2;       // 1 - Brusa NLG5xx 2 - Volt charger 0 -No Charger
    1de4:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
  settings.DisTaper = 0.3f;         //V offset to bring in discharge taper to Zero Amps at settings.DischVsetpoint
    1de8:	f8c3 c0bc 	str.w	ip, [r3, #188]	; 0xbc
  settings.SerialCanSpeed = 500;  //serial can adapter speed
    1dec:	f8a3 40c4 	strh.w	r4, [r3, #196]	; 0xc4
  settings.changecur = 20000;     //mA change overpoint
    1df0:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  settings.Precurrent = 1000;     //ma before closing main contator
    1df4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
    1df8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1dfc:	00013244 	.word	0x00013244
    1e00:	c1200000 	.word	0xc1200000
    1e04:	40866666 	.word	0x40866666
    1e08:	06d606d6 	.word	0x06d606d6
    1e0c:	1fffb20c 	.word	0x1fffb20c
    1e10:	3e4ccccd 	.word	0x3e4ccccd
    1e14:	42200000 	.word	0x42200000
    1e18:	40400000 	.word	0x40400000
    1e1c:	40a00000 	.word	0x40a00000
    1e20:	40833333 	.word	0x40833333
    1e24:	0001e848 	.word	0x0001e848
    1e28:	3dcccccd 	.word	0x3dcccccd
    1e2c:	40733333 	.word	0x40733333
    1e30:	404ccccd 	.word	0x404ccccd
    1e34:	42820000 	.word	0x42820000
    1e38:	4079999a 	.word	0x4079999a
    1e3c:	3d23d70a 	.word	0x3d23d70a
    1e40:	42680000 	.word	0x42680000
    1e44:	4420c000 	.word	0x4420c000
    1e48:	3e99999a 	.word	0x3e99999a

00001e4c <alarmupdate()>:
      }
    }
  }
}

void alarmupdate() {
    1e4c:	b570      	push	{r4, r5, r6, lr}
  alarm[0] = 0x00;
    1e4e:	4d45      	ldr	r5, [pc, #276]	; (1f64 <alarmupdate()+0x118>)
  if (settings.OverVSetpoint < bms.getHighCellVolt()) {
    1e50:	4c45      	ldr	r4, [pc, #276]	; (1f68 <alarmupdate()+0x11c>)
    1e52:	4846      	ldr	r0, [pc, #280]	; (1f6c <alarmupdate()+0x120>)
    1e54:	68e6      	ldr	r6, [r4, #12]
  alarm[0] = 0x00;
    1e56:	2300      	movs	r3, #0
    1e58:	702b      	strb	r3, [r5, #0]
  if (settings.OverVSetpoint < bms.getHighCellVolt()) {
    1e5a:	f7fe fedf 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    1e5e:	4601      	mov	r1, r0
    1e60:	4630      	mov	r0, r6
    1e62:	f00a fb09 	bl	c478 <__aeabi_fcmplt>
    1e66:	b108      	cbz	r0, 1e6c <alarmupdate()+0x20>
    alarm[0] = 0x04;
    1e68:	2304      	movs	r3, #4
    1e6a:	702b      	strb	r3, [r5, #0]
  }
  if (bms.getLowCellVolt() < settings.UnderVSetpoint) {
    1e6c:	483f      	ldr	r0, [pc, #252]	; (1f6c <alarmupdate()+0x120>)
    1e6e:	f7fe fead 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    1e72:	6921      	ldr	r1, [r4, #16]
    1e74:	f00a fb00 	bl	c478 <__aeabi_fcmplt>
    1e78:	b118      	cbz	r0, 1e82 <alarmupdate()+0x36>
    alarm[0] |= 0x10;
    1e7a:	782b      	ldrb	r3, [r5, #0]
    1e7c:	f043 0310 	orr.w	r3, r3, #16
    1e80:	702b      	strb	r3, [r5, #0]
  }
  if (bms.getHighTemperature() > settings.OverTSetpoint) {
    1e82:	483a      	ldr	r0, [pc, #232]	; (1f6c <alarmupdate()+0x120>)
    1e84:	f7fe ff7e 	bl	d84 <BMSModuleManager::getHighTemperature()>
    1e88:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1e8a:	f00a fb13 	bl	c4b4 <__aeabi_fcmpgt>
    1e8e:	b118      	cbz	r0, 1e98 <alarmupdate()+0x4c>
    alarm[0] |= 0x40;
    1e90:	782b      	ldrb	r3, [r5, #0]
    1e92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1e96:	702b      	strb	r3, [r5, #0]
  }
  alarm[1] = 0;
    1e98:	2300      	movs	r3, #0
  if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    1e9a:	4834      	ldr	r0, [pc, #208]	; (1f6c <alarmupdate()+0x120>)
  alarm[1] = 0;
    1e9c:	706b      	strb	r3, [r5, #1]
  if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    1e9e:	f7fe ff73 	bl	d88 <BMSModuleManager::getLowTemperature()>
    1ea2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1ea4:	f00a fae8 	bl	c478 <__aeabi_fcmplt>
    1ea8:	b108      	cbz	r0, 1eae <alarmupdate()+0x62>
    alarm[1] = 0x01;
    1eaa:	2301      	movs	r3, #1
    1eac:	706b      	strb	r3, [r5, #1]
  }
  alarm[3] = 0;
    1eae:	2300      	movs	r3, #0
    1eb0:	70eb      	strb	r3, [r5, #3]
  if ((bms.getHighCellVolt() - bms.getLowCellVolt()) > settings.CellGap) {
    1eb2:	482e      	ldr	r0, [pc, #184]	; (1f6c <alarmupdate()+0x120>)
    1eb4:	f7fe feb2 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    1eb8:	4606      	mov	r6, r0
    1eba:	482c      	ldr	r0, [pc, #176]	; (1f6c <alarmupdate()+0x120>)
    1ebc:	f7fe fe86 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    1ec0:	4601      	mov	r1, r0
    1ec2:	4630      	mov	r0, r6
    1ec4:	f00a f830 	bl	bf28 <__aeabi_fsub>
    1ec8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    1eca:	f00a faf3 	bl	c4b4 <__aeabi_fcmpgt>
    1ece:	b108      	cbz	r0, 1ed4 <alarmupdate()+0x88>
    alarm[3] = 0x01;
    1ed0:	2301      	movs	r3, #1
    1ed2:	70eb      	strb	r3, [r5, #3]
  }

  ///warnings///
  warning[0] = 0;
    1ed4:	4d26      	ldr	r5, [pc, #152]	; (1f70 <alarmupdate()+0x124>)

  if (bms.getHighCellVolt() > (settings.OverVSetpoint - settings.WarnOff)) {
    1ed6:	4825      	ldr	r0, [pc, #148]	; (1f6c <alarmupdate()+0x120>)
  warning[0] = 0;
    1ed8:	2300      	movs	r3, #0
    1eda:	702b      	strb	r3, [r5, #0]
  if (bms.getHighCellVolt() > (settings.OverVSetpoint - settings.WarnOff)) {
    1edc:	f7fe fe9e 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    1ee0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1ee2:	4606      	mov	r6, r0
    1ee4:	68e0      	ldr	r0, [r4, #12]
    1ee6:	f00a f81f 	bl	bf28 <__aeabi_fsub>
    1eea:	4601      	mov	r1, r0
    1eec:	4630      	mov	r0, r6
    1eee:	f00a fae1 	bl	c4b4 <__aeabi_fcmpgt>
    1ef2:	b108      	cbz	r0, 1ef8 <alarmupdate()+0xac>
    warning[0] = 0x04;
    1ef4:	2304      	movs	r3, #4
    1ef6:	702b      	strb	r3, [r5, #0]
  }
  if (bms.getLowCellVolt() < (settings.UnderVSetpoint + settings.WarnOff)) {
    1ef8:	481c      	ldr	r0, [pc, #112]	; (1f6c <alarmupdate()+0x120>)
    1efa:	f7fe fe67 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    1efe:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1f00:	4606      	mov	r6, r0
    1f02:	6920      	ldr	r0, [r4, #16]
    1f04:	f00a f812 	bl	bf2c <__addsf3>
    1f08:	4601      	mov	r1, r0
    1f0a:	4630      	mov	r0, r6
    1f0c:	f00a fab4 	bl	c478 <__aeabi_fcmplt>
    1f10:	b118      	cbz	r0, 1f1a <alarmupdate()+0xce>
    warning[0] |= 0x10;
    1f12:	782b      	ldrb	r3, [r5, #0]
    1f14:	f043 0310 	orr.w	r3, r3, #16
    1f18:	702b      	strb	r3, [r5, #0]
  }

  if (bms.getHighTemperature() > (settings.OverTSetpoint - settings.WarnToff)) {
    1f1a:	4814      	ldr	r0, [pc, #80]	; (1f6c <alarmupdate()+0x120>)
    1f1c:	f7fe ff32 	bl	d84 <BMSModuleManager::getHighTemperature()>
    1f20:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    1f22:	4606      	mov	r6, r0
    1f24:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1f26:	f009 ffff 	bl	bf28 <__aeabi_fsub>
    1f2a:	4601      	mov	r1, r0
    1f2c:	4630      	mov	r0, r6
    1f2e:	f00a fac1 	bl	c4b4 <__aeabi_fcmpgt>
    1f32:	b118      	cbz	r0, 1f3c <alarmupdate()+0xf0>
    warning[0] |= 0x40;
    1f34:	782b      	ldrb	r3, [r5, #0]
    1f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1f3a:	702b      	strb	r3, [r5, #0]
  }
  warning[1] = 0;
    1f3c:	2300      	movs	r3, #0
    1f3e:	706b      	strb	r3, [r5, #1]
  if (bms.getLowTemperature() < (settings.UnderTSetpoint + settings.WarnToff)) {
    1f40:	480a      	ldr	r0, [pc, #40]	; (1f6c <alarmupdate()+0x120>)
    1f42:	f7fe ff21 	bl	d88 <BMSModuleManager::getLowTemperature()>
    1f46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    1f48:	4603      	mov	r3, r0
    1f4a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    1f4c:	461c      	mov	r4, r3
    1f4e:	f009 ffed 	bl	bf2c <__addsf3>
    1f52:	4601      	mov	r1, r0
    1f54:	4620      	mov	r0, r4
    1f56:	f00a fa8f 	bl	c478 <__aeabi_fcmplt>
    1f5a:	b108      	cbz	r0, 1f60 <alarmupdate()+0x114>
    warning[1] = 0x01;
    1f5c:	2301      	movs	r3, #1
    1f5e:	706b      	strb	r3, [r5, #1]
  }
}
    1f60:	bd70      	pop	{r4, r5, r6, pc}
    1f62:	bf00      	nop
    1f64:	1fff8fd4 	.word	0x1fff8fd4
    1f68:	1fffb20c 	.word	0x1fffb20c
    1f6c:	1fff8fe0 	.word	0x1fff8fe0
    1f70:	1fffb2e4 	.word	0x1fffb2e4

00001f74 <gaugeupdate()>:

void gaugeupdate() {
    1f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (gaugedebug == 1) {
    1f78:	4c7f      	ldr	r4, [pc, #508]	; (2178 <gaugeupdate()+0x204>)
    1f7a:	6823      	ldr	r3, [r4, #0]
    1f7c:	2b01      	cmp	r3, #1
void gaugeupdate() {
    1f7e:	b082      	sub	sp, #8
  if (gaugedebug == 1) {
    1f80:	d049      	beq.n	2016 <gaugeupdate()+0xa2>
    SERIALCONSOLE.print(SOCtest * 0.1);
    SERIALCONSOLE.print("  fuel pwm : ");
    SERIALCONSOLE.print(map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    SERIALCONSOLE.println("  ");
  }
  if (gaugedebug == 2) {
    1f82:	2b02      	cmp	r3, #2
    1f84:	f000 80c3 	beq.w	210e <gaugeupdate()+0x19a>
    SOCtest = 0;
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
  }
  if (gaugedebug == 3) {
    1f88:	2b03      	cmp	r3, #3
    1f8a:	d003      	beq.n	1f94 <gaugeupdate()+0x20>
    SOCtest = 1000;
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
  }
  if (gaugedebug == 0) {
    1f8c:	b32b      	cbz	r3, 1fda <gaugeupdate()+0x66>
    analogWrite(OUT8, map(SOC, 0, 100, settings.gaugelow, settings.gaugehigh));
  }
}
    1f8e:	b002      	add	sp, #8
    1f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SOCtest = 1000;
    1f94:	4b79      	ldr	r3, [pc, #484]	; (217c <gaugeupdate()+0x208>)
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    1f96:	4e7a      	ldr	r6, [pc, #488]	; (2180 <gaugeupdate()+0x20c>)
    SOCtest = 1000;
    1f98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1f9c:	601a      	str	r2, [r3, #0]
// when the input is a float or double, do all math using the input's type
template <class T, class A, class B, class C, class D>
T map(T x, A in_min, B in_max, C out_min, D out_max, typename std::enable_if<std::is_floating_point<T>::value >::type* = 0)
{
	return (x - (T)in_min) * ((T)out_max - (T)out_min) / ((T)in_max - (T)in_min) + (T)out_min;
    1f9e:	f8d6 00a4 	ldr.w	r0, [r6, #164]	; 0xa4
    1fa2:	f00a f877 	bl	c094 <__aeabi_i2f>
    1fa6:	4605      	mov	r5, r0
    1fa8:	f8d6 00a8 	ldr.w	r0, [r6, #168]	; 0xa8
    1fac:	f00a f872 	bl	c094 <__aeabi_i2f>
    1fb0:	4629      	mov	r1, r5
    1fb2:	f009 ffb9 	bl	bf28 <__aeabi_fsub>
    1fb6:	4973      	ldr	r1, [pc, #460]	; (2184 <gaugeupdate()+0x210>)
    1fb8:	f00a f8c0 	bl	c13c <__aeabi_fmul>
    1fbc:	4971      	ldr	r1, [pc, #452]	; (2184 <gaugeupdate()+0x210>)
    1fbe:	f00a f971 	bl	c2a4 <__aeabi_fdiv>
    1fc2:	4629      	mov	r1, r5
    1fc4:	f009 ffb2 	bl	bf2c <__addsf3>
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    1fc8:	f00a fa7e 	bl	c4c8 <__aeabi_f2iz>
    1fcc:	4601      	mov	r1, r0
    1fce:	2006      	movs	r0, #6
    1fd0:	f007 f9e6 	bl	93a0 <analogWrite>
  if (gaugedebug == 0) {
    1fd4:	6823      	ldr	r3, [r4, #0]
    1fd6:	2b00      	cmp	r3, #0
    1fd8:	d1d9      	bne.n	1f8e <gaugeupdate()+0x1a>
    analogWrite(OUT8, map(SOC, 0, 100, settings.gaugelow, settings.gaugehigh));
    1fda:	4b69      	ldr	r3, [pc, #420]	; (2180 <gaugeupdate()+0x20c>)
    1fdc:	486a      	ldr	r0, [pc, #424]	; (2188 <gaugeupdate()+0x214>)
    1fde:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
	long out_range = out_max - out_min;
    1fe2:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
	long num = (x - in_min) * out_range;
    1fe6:	6803      	ldr	r3, [r0, #0]
	long result = num / in_range + out_min;
    1fe8:	4868      	ldr	r0, [pc, #416]	; (218c <gaugeupdate()+0x218>)
	long out_range = out_max - out_min;
    1fea:	1a52      	subs	r2, r2, r1
	if (out_range >= 0) {
    1fec:	2a00      	cmp	r2, #0
	long num = (x - in_min) * out_range;
    1fee:	fb02 f303 	mul.w	r3, r2, r3
	if (out_range >= 0) {
    1ff2:	f2c0 80b2 	blt.w	215a <gaugeupdate()+0x1e6>
		num += in_range / 2;
    1ff6:	3332      	adds	r3, #50	; 0x32
	long result = num / in_range + out_min;
    1ff8:	fb80 2003 	smull	r2, r0, r0, r3
    1ffc:	17da      	asrs	r2, r3, #31
    1ffe:	ebc2 1260 	rsb	r2, r2, r0, asr #5
		if (in_range * num < 0) return result - 1;
    2002:	2b00      	cmp	r3, #0
	long result = num / in_range + out_min;
    2004:	4411      	add	r1, r2
		if (in_range * num < 0) return result - 1;
    2006:	f2c0 80b4 	blt.w	2172 <gaugeupdate()+0x1fe>
    200a:	2006      	movs	r0, #6
}
    200c:	b002      	add	sp, #8
    200e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    analogWrite(OUT8, map(SOC, 0, 100, settings.gaugelow, settings.gaugehigh));
    2012:	f007 b9c5 	b.w	93a0 <analogWrite>
    SOCtest = SOCtest + 10;
    2016:	4f59      	ldr	r7, [pc, #356]	; (217c <gaugeupdate()+0x208>)
    2018:	6838      	ldr	r0, [r7, #0]
    201a:	300a      	adds	r0, #10
    if (SOCtest > 1000) {
    201c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    2020:	f300 8096 	bgt.w	2150 <gaugeupdate()+0x1dc>
    SOCtest = SOCtest + 10;
    2024:	6038      	str	r0, [r7, #0]
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    2026:	f00a f835 	bl	c094 <__aeabi_i2f>
    202a:	4959      	ldr	r1, [pc, #356]	; (2190 <gaugeupdate()+0x21c>)
    202c:	f00a f886 	bl	c13c <__aeabi_fmul>
    2030:	4680      	mov	r8, r0
    2032:	4e53      	ldr	r6, [pc, #332]	; (2180 <gaugeupdate()+0x20c>)
	return (x - (T)in_min) * ((T)out_max - (T)out_min) / ((T)in_max - (T)in_min) + (T)out_min;
    2034:	f8d6 00a4 	ldr.w	r0, [r6, #164]	; 0xa4
    2038:	f00a f82c 	bl	c094 <__aeabi_i2f>
    203c:	4605      	mov	r5, r0
    203e:	f8d6 00a8 	ldr.w	r0, [r6, #168]	; 0xa8
    2042:	f00a f827 	bl	c094 <__aeabi_i2f>
    2046:	4629      	mov	r1, r5
    2048:	f009 ff6e 	bl	bf28 <__aeabi_fsub>
    204c:	4641      	mov	r1, r8
    204e:	f00a f875 	bl	c13c <__aeabi_fmul>
    2052:	494c      	ldr	r1, [pc, #304]	; (2184 <gaugeupdate()+0x210>)
    2054:	f00a f926 	bl	c2a4 <__aeabi_fdiv>
    2058:	4629      	mov	r1, r5
    205a:	f009 ff67 	bl	bf2c <__addsf3>
    205e:	f00a fa33 	bl	c4c8 <__aeabi_f2iz>
    2062:	4601      	mov	r1, r0
    2064:	2006      	movs	r0, #6
    2066:	f007 f99b 	bl	93a0 <analogWrite>
    206a:	2102      	movs	r1, #2
    206c:	4849      	ldr	r0, [pc, #292]	; (2194 <gaugeupdate()+0x220>)
    206e:	f009 f985 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    2072:	4849      	ldr	r0, [pc, #292]	; (2198 <gaugeupdate()+0x224>)
    2074:	f006 fcd8 	bl	8a28 <Print::println()>
    2078:	2106      	movs	r1, #6
    207a:	4848      	ldr	r0, [pc, #288]	; (219c <gaugeupdate()+0x228>)
    207c:	f009 f97e 	bl	b37c <usb_serial_write>
    SERIALCONSOLE.print(SOCtest * 0.1);
    2080:	6838      	ldr	r0, [r7, #0]
    2082:	f00a f807 	bl	c094 <__aeabi_i2f>
    2086:	4942      	ldr	r1, [pc, #264]	; (2190 <gaugeupdate()+0x21c>)
    2088:	f00a f858 	bl	c13c <__aeabi_fmul>
    208c:	f009 fe32 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2090:	f04f 0802 	mov.w	r8, #2
    2094:	4602      	mov	r2, r0
    2096:	460b      	mov	r3, r1
    2098:	483f      	ldr	r0, [pc, #252]	; (2198 <gaugeupdate()+0x224>)
    209a:	f8cd 8000 	str.w	r8, [sp]
    209e:	f006 fce7 	bl	8a70 <Print::printFloat(double, unsigned char)>
    20a2:	210d      	movs	r1, #13
    20a4:	483e      	ldr	r0, [pc, #248]	; (21a0 <gaugeupdate()+0x22c>)
    20a6:	f009 f969 	bl	b37c <usb_serial_write>
    20aa:	f8d6 00a4 	ldr.w	r0, [r6, #164]	; 0xa4
    20ae:	f009 fff1 	bl	c094 <__aeabi_i2f>
    20b2:	4605      	mov	r5, r0
    SERIALCONSOLE.print(map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    20b4:	6838      	ldr	r0, [r7, #0]
    20b6:	f009 ffed 	bl	c094 <__aeabi_i2f>
    20ba:	4935      	ldr	r1, [pc, #212]	; (2190 <gaugeupdate()+0x21c>)
    20bc:	f00a f83e 	bl	c13c <__aeabi_fmul>
    20c0:	4603      	mov	r3, r0
    20c2:	f8d6 00a8 	ldr.w	r0, [r6, #168]	; 0xa8
    20c6:	461e      	mov	r6, r3
    20c8:	f009 ffe4 	bl	c094 <__aeabi_i2f>
    20cc:	4629      	mov	r1, r5
    20ce:	f009 ff2b 	bl	bf28 <__aeabi_fsub>
    20d2:	4601      	mov	r1, r0
    20d4:	4630      	mov	r0, r6
    20d6:	f00a f831 	bl	c13c <__aeabi_fmul>
    20da:	492a      	ldr	r1, [pc, #168]	; (2184 <gaugeupdate()+0x210>)
    20dc:	f00a f8e2 	bl	c2a4 <__aeabi_fdiv>
    20e0:	4629      	mov	r1, r5
    20e2:	f009 ff23 	bl	bf2c <__addsf3>
    20e6:	f009 fe05 	bl	bcf4 <__aeabi_f2d>
    20ea:	f8cd 8000 	str.w	r8, [sp]
    20ee:	460b      	mov	r3, r1
    20f0:	4602      	mov	r2, r0
    20f2:	4829      	ldr	r0, [pc, #164]	; (2198 <gaugeupdate()+0x224>)
    20f4:	f006 fcbc 	bl	8a70 <Print::printFloat(double, unsigned char)>
    20f8:	4641      	mov	r1, r8
    20fa:	4826      	ldr	r0, [pc, #152]	; (2194 <gaugeupdate()+0x220>)
    20fc:	f009 f93e 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    2100:	4825      	ldr	r0, [pc, #148]	; (2198 <gaugeupdate()+0x224>)
    2102:	f006 fc91 	bl	8a28 <Print::println()>
  if (gaugedebug == 2) {
    2106:	6823      	ldr	r3, [r4, #0]
    2108:	2b02      	cmp	r3, #2
    210a:	f47f af3d 	bne.w	1f88 <gaugeupdate()+0x14>
    SOCtest = 0;
    210e:	4b1b      	ldr	r3, [pc, #108]	; (217c <gaugeupdate()+0x208>)
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    2110:	4e1b      	ldr	r6, [pc, #108]	; (2180 <gaugeupdate()+0x20c>)
    SOCtest = 0;
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
    2116:	f8d6 00a4 	ldr.w	r0, [r6, #164]	; 0xa4
    211a:	f009 ffbb 	bl	c094 <__aeabi_i2f>
    211e:	4605      	mov	r5, r0
    2120:	f8d6 00a8 	ldr.w	r0, [r6, #168]	; 0xa8
    2124:	f009 ffb6 	bl	c094 <__aeabi_i2f>
    2128:	4629      	mov	r1, r5
    212a:	f009 fefd 	bl	bf28 <__aeabi_fsub>
    212e:	2100      	movs	r1, #0
    2130:	f00a f804 	bl	c13c <__aeabi_fmul>
    2134:	4913      	ldr	r1, [pc, #76]	; (2184 <gaugeupdate()+0x210>)
    2136:	f00a f8b5 	bl	c2a4 <__aeabi_fdiv>
    213a:	4629      	mov	r1, r5
    213c:	f009 fef6 	bl	bf2c <__addsf3>
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    2140:	f00a f9c2 	bl	c4c8 <__aeabi_f2iz>
    2144:	4601      	mov	r1, r0
    2146:	2006      	movs	r0, #6
    2148:	f007 f92a 	bl	93a0 <analogWrite>
  if (gaugedebug == 3) {
    214c:	6823      	ldr	r3, [r4, #0]
    214e:	e71b      	b.n	1f88 <gaugeupdate()+0x14>
      SOCtest = 0;
    2150:	2300      	movs	r3, #0
    2152:	f04f 0800 	mov.w	r8, #0
    2156:	603b      	str	r3, [r7, #0]
    2158:	e76b      	b.n	2032 <gaugeupdate()+0xbe>
		num -= in_range / 2;
    215a:	3b32      	subs	r3, #50	; 0x32
	long result = num / in_range + out_min;
    215c:	fb80 2003 	smull	r2, r0, r0, r3
    2160:	17da      	asrs	r2, r3, #31
    2162:	ebc2 1260 	rsb	r2, r2, r0, asr #5
		if (in_range * num >= 0) return result + 1;
    2166:	2b00      	cmp	r3, #0
	long result = num / in_range + out_min;
    2168:	4411      	add	r1, r2
		if (in_range * num >= 0) return result + 1;
    216a:	f6ff af4e 	blt.w	200a <gaugeupdate()+0x96>
    216e:	3101      	adds	r1, #1
    2170:	e74b      	b.n	200a <gaugeupdate()+0x96>
		if (in_range * num < 0) return result - 1;
    2172:	3901      	subs	r1, #1
    2174:	e749      	b.n	200a <gaugeupdate()+0x96>
    2176:	bf00      	nop
    2178:	1fffb118 	.word	0x1fffb118
    217c:	1fff8fc8 	.word	0x1fff8fc8
    2180:	1fffb20c 	.word	0x1fffb20c
    2184:	42c80000 	.word	0x42c80000
    2188:	1fff8724 	.word	0x1fff8724
    218c:	51eb851f 	.word	0x51eb851f
    2190:	3dcccccd 	.word	0x3dcccccd
    2194:	00012ea4 	.word	0x00012ea4
    2198:	1fff880c 	.word	0x1fff880c
    219c:	00013264 	.word	0x00013264
    21a0:	0001326c 	.word	0x0001326c

000021a4 <printbmsstat()>:

void printbmsstat() {
    21a4:	b570      	push	{r4, r5, r6, lr}
  SERIALCONSOLE.println();
    21a6:	48b2      	ldr	r0, [pc, #712]	; (2470 <printbmsstat()+0x2cc>)
  SERIALCONSOLE.println();
  SERIALCONSOLE.println();
  SERIALCONSOLE.print("BMS Status : ");
  if (settings.ESSmode == 1) {
    21a8:	4cb2      	ldr	r4, [pc, #712]	; (2474 <printbmsstat()+0x2d0>)
  SERIALCONSOLE.println();
    21aa:	f006 fc3d 	bl	8a28 <Print::println()>
  SERIALCONSOLE.println();
    21ae:	48b0      	ldr	r0, [pc, #704]	; (2470 <printbmsstat()+0x2cc>)
    21b0:	f006 fc3a 	bl	8a28 <Print::println()>
  SERIALCONSOLE.println();
    21b4:	48ae      	ldr	r0, [pc, #696]	; (2470 <printbmsstat()+0x2cc>)
    21b6:	f006 fc37 	bl	8a28 <Print::println()>
    21ba:	48af      	ldr	r0, [pc, #700]	; (2478 <printbmsstat()+0x2d4>)
    21bc:	210d      	movs	r1, #13
    21be:	f009 f8dd 	bl	b37c <usb_serial_write>
  if (settings.ESSmode == 1) {
    21c2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    21c6:	2b01      	cmp	r3, #1
    21c8:	d011      	beq.n	21ee <printbmsstat()+0x4a>
          SERIALCONSOLE.print(": Happy ");
        }
      }
    }
  } else {
    SERIALCONSOLE.print(bmsstatus);
    21ca:	4cac      	ldr	r4, [pc, #688]	; (247c <printbmsstat()+0x2d8>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    21cc:	48a8      	ldr	r0, [pc, #672]	; (2470 <printbmsstat()+0x2cc>)
    21ce:	7821      	ldrb	r1, [r4, #0]
    21d0:	2300      	movs	r3, #0
    21d2:	220a      	movs	r2, #10
    21d4:	f006 fc40 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    switch (bmsstatus) {
    21d8:	7823      	ldrb	r3, [r4, #0]
    21da:	2b05      	cmp	r3, #5
    21dc:	d84e      	bhi.n	227c <printbmsstat()+0xd8>
    21de:	e8df f013 	tbh	[pc, r3, lsl #1]
    21e2:	0102      	.short	0x0102
    21e4:	010c0107 	.word	0x010c0107
    21e8:	01160111 	.word	0x01160111
    21ec:	00f8      	.short	0x00f8
    21ee:	2109      	movs	r1, #9
    21f0:	48a3      	ldr	r0, [pc, #652]	; (2480 <printbmsstat()+0x2dc>)
    21f2:	f009 f8c3 	bl	b37c <usb_serial_write>
    if (bms.getLowCellVolt() < settings.UnderVSetpoint) {
    21f6:	48a3      	ldr	r0, [pc, #652]	; (2484 <printbmsstat()+0x2e0>)
    21f8:	f7fe fce8 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    21fc:	6921      	ldr	r1, [r4, #16]
    21fe:	f00a f93b 	bl	c478 <__aeabi_fcmplt>
    2202:	2800      	cmp	r0, #0
    2204:	f040 812a 	bne.w	245c <printbmsstat()+0x2b8>
    if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    2208:	489e      	ldr	r0, [pc, #632]	; (2484 <printbmsstat()+0x2e0>)
    220a:	f7fe fd07 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    220e:	68e1      	ldr	r1, [r4, #12]
    2210:	f00a f950 	bl	c4b4 <__aeabi_fcmpgt>
    2214:	2800      	cmp	r0, #0
    2216:	f040 8167 	bne.w	24e8 <printbmsstat()+0x344>
    if ((bms.getHighCellVolt() - bms.getLowCellVolt()) > settings.CellGap) {
    221a:	489a      	ldr	r0, [pc, #616]	; (2484 <printbmsstat()+0x2e0>)
    221c:	f7fe fcfe 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    2220:	4605      	mov	r5, r0
    2222:	4898      	ldr	r0, [pc, #608]	; (2484 <printbmsstat()+0x2e0>)
    2224:	f7fe fcd2 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    2228:	4601      	mov	r1, r0
    222a:	4628      	mov	r0, r5
    222c:	f009 fe7c 	bl	bf28 <__aeabi_fsub>
    2230:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    2232:	f00a f93f 	bl	c4b4 <__aeabi_fcmpgt>
    2236:	2800      	cmp	r0, #0
    2238:	f040 8115 	bne.w	2466 <printbmsstat()+0x2c2>
    if (bms.getAvgTemperature() > settings.OverTSetpoint) {
    223c:	4891      	ldr	r0, [pc, #580]	; (2484 <printbmsstat()+0x2e0>)
    223e:	f7fe fd45 	bl	ccc <BMSModuleManager::getAvgTemperature()>
    2242:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    2244:	f00a f936 	bl	c4b4 <__aeabi_fcmpgt>
    2248:	2800      	cmp	r0, #0
    224a:	f040 8157 	bne.w	24fc <printbmsstat()+0x358>
    if (bms.getAvgTemperature() < settings.UnderTSetpoint) {
    224e:	488d      	ldr	r0, [pc, #564]	; (2484 <printbmsstat()+0x2e0>)
    2250:	f7fe fd3c 	bl	ccc <BMSModuleManager::getAvgTemperature()>
    2254:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    2256:	f00a f90f 	bl	c478 <__aeabi_fcmplt>
    225a:	2800      	cmp	r0, #0
    225c:	f040 8149 	bne.w	24f2 <printbmsstat()+0x34e>
    if (storagemode == 1) {
    2260:	4b89      	ldr	r3, [pc, #548]	; (2488 <printbmsstat()+0x2e4>)
      if (bms.getLowCellVolt() > settings.StoreVsetpoint) {
    2262:	4888      	ldr	r0, [pc, #544]	; (2484 <printbmsstat()+0x2e0>)
    if (storagemode == 1) {
    2264:	681b      	ldr	r3, [r3, #0]
    2266:	2b01      	cmp	r3, #1
    2268:	f000 80e8 	beq.w	243c <printbmsstat()+0x298>
      if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint) {
    226c:	f7fe fcae 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    2270:	6921      	ldr	r1, [r4, #16]
    2272:	f00a f91f 	bl	c4b4 <__aeabi_fcmpgt>
    2276:	2800      	cmp	r0, #0
    2278:	f040 80ce 	bne.w	2418 <printbmsstat()+0x274>
    227c:	2102      	movs	r1, #2
    227e:	4883      	ldr	r0, [pc, #524]	; (248c <printbmsstat()+0x2e8>)
    2280:	f009 f87c 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.print(ErrorReason);
        break;
    }
  }
  SERIALCONSOLE.print("  ");
  if (digitalRead(IN3) == HIGH) {
    2284:	2012      	movs	r0, #18
    2286:	f007 fa2d 	bl	96e4 <digitalRead>
    228a:	2801      	cmp	r0, #1
    228c:	f000 809c 	beq.w	23c8 <printbmsstat()+0x224>
    SERIALCONSOLE.print("| AC Present |");
  }
  if (digitalRead(IN1) == HIGH) {
    2290:	2011      	movs	r0, #17
    2292:	f007 fa27 	bl	96e4 <digitalRead>
    2296:	2801      	cmp	r0, #1
    2298:	f000 8091 	beq.w	23be <printbmsstat()+0x21a>
    SERIALCONSOLE.print("| Key ON |");
  }
  if (balancecells == 1) {
    229c:	4b7c      	ldr	r3, [pc, #496]	; (2490 <printbmsstat()+0x2ec>)
    229e:	681b      	ldr	r3, [r3, #0]
    22a0:	2b01      	cmp	r3, #1
    22a2:	f000 8087 	beq.w	23b4 <printbmsstat()+0x210>
    22a6:	2102      	movs	r1, #2
    22a8:	4878      	ldr	r0, [pc, #480]	; (248c <printbmsstat()+0x2e8>)
  SERIALCONSOLE.print(digitalRead(OUT1));
  SERIALCONSOLE.print(digitalRead(OUT2));
  SERIALCONSOLE.print(digitalRead(OUT3));
  SERIALCONSOLE.print(digitalRead(OUT4));
  SERIALCONSOLE.print(" Cont:");
  if ((contstat & 1) == 1) {
    22aa:	4c7a      	ldr	r4, [pc, #488]	; (2494 <printbmsstat()+0x2f0>)
    22ac:	f009 f866 	bl	b37c <usb_serial_write>
  SERIALCONSOLE.print(cellspresent);
    22b0:	4b79      	ldr	r3, [pc, #484]	; (2498 <printbmsstat()+0x2f4>)
	size_t print(int n)				{ return print((long)n); }
    22b2:	486f      	ldr	r0, [pc, #444]	; (2470 <printbmsstat()+0x2cc>)
    22b4:	6819      	ldr	r1, [r3, #0]
    22b6:	f006 fbaf 	bl	8a18 <Print::print(long)>
  SERIALCONSOLE.println();
    22ba:	486d      	ldr	r0, [pc, #436]	; (2470 <printbmsstat()+0x2cc>)
    22bc:	f006 fbb4 	bl	8a28 <Print::println()>
    22c0:	2104      	movs	r1, #4
    22c2:	4876      	ldr	r0, [pc, #472]	; (249c <printbmsstat()+0x2f8>)
    22c4:	f009 f85a 	bl	b37c <usb_serial_write>
  SERIALCONSOLE.print(digitalRead(OUT1));
    22c8:	200b      	movs	r0, #11
    22ca:	f007 fa0b 	bl	96e4 <digitalRead>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    22ce:	2300      	movs	r3, #0
    22d0:	4601      	mov	r1, r0
    22d2:	220a      	movs	r2, #10
    22d4:	4866      	ldr	r0, [pc, #408]	; (2470 <printbmsstat()+0x2cc>)
    22d6:	f006 fbbf 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(OUT2));
    22da:	200c      	movs	r0, #12
    22dc:	f007 fa02 	bl	96e4 <digitalRead>
    22e0:	2300      	movs	r3, #0
    22e2:	4601      	mov	r1, r0
    22e4:	220a      	movs	r2, #10
    22e6:	4862      	ldr	r0, [pc, #392]	; (2470 <printbmsstat()+0x2cc>)
    22e8:	f006 fbb6 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(OUT3));
    22ec:	2014      	movs	r0, #20
    22ee:	f007 f9f9 	bl	96e4 <digitalRead>
    22f2:	2300      	movs	r3, #0
    22f4:	4601      	mov	r1, r0
    22f6:	220a      	movs	r2, #10
    22f8:	485d      	ldr	r0, [pc, #372]	; (2470 <printbmsstat()+0x2cc>)
    22fa:	f006 fbad 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(OUT4));
    22fe:	2015      	movs	r0, #21
    2300:	f007 f9f0 	bl	96e4 <digitalRead>
    2304:	220a      	movs	r2, #10
    2306:	4601      	mov	r1, r0
    2308:	2300      	movs	r3, #0
    230a:	4859      	ldr	r0, [pc, #356]	; (2470 <printbmsstat()+0x2cc>)
    230c:	f006 fba4 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2310:	2106      	movs	r1, #6
    2312:	4863      	ldr	r0, [pc, #396]	; (24a0 <printbmsstat()+0x2fc>)
    2314:	f009 f832 	bl	b37c <usb_serial_write>
  if ((contstat & 1) == 1) {
    2318:	6823      	ldr	r3, [r4, #0]
    231a:	07d8      	lsls	r0, r3, #31
    231c:	bf4b      	itete	mi
    231e:	2101      	movmi	r1, #1
    2320:	2101      	movpl	r1, #1
    2322:	4860      	ldrmi	r0, [pc, #384]	; (24a4 <printbmsstat()+0x300>)
    2324:	4860      	ldrpl	r0, [pc, #384]	; (24a8 <printbmsstat()+0x304>)
    2326:	f009 f829 	bl	b37c <usb_serial_write>
    SERIALCONSOLE.print("1");
  } else {
    SERIALCONSOLE.print("0");
  }
  if ((contstat & 2) == 2) {
    232a:	6823      	ldr	r3, [r4, #0]
    232c:	0799      	lsls	r1, r3, #30
    232e:	bf4b      	itete	mi
    2330:	2101      	movmi	r1, #1
    2332:	2101      	movpl	r1, #1
    2334:	485b      	ldrmi	r0, [pc, #364]	; (24a4 <printbmsstat()+0x300>)
    2336:	485c      	ldrpl	r0, [pc, #368]	; (24a8 <printbmsstat()+0x304>)
    2338:	f009 f820 	bl	b37c <usb_serial_write>
    SERIALCONSOLE.print("1");
  } else {
    SERIALCONSOLE.print("0");
  }
  if ((contstat & 4) == 4) {
    233c:	6823      	ldr	r3, [r4, #0]
    233e:	075a      	lsls	r2, r3, #29
    2340:	bf4b      	itete	mi
    2342:	2101      	movmi	r1, #1
    2344:	2101      	movpl	r1, #1
    2346:	4857      	ldrmi	r0, [pc, #348]	; (24a4 <printbmsstat()+0x300>)
    2348:	4857      	ldrpl	r0, [pc, #348]	; (24a8 <printbmsstat()+0x304>)
    234a:	f009 f817 	bl	b37c <usb_serial_write>
    SERIALCONSOLE.print("1");
  } else {
    SERIALCONSOLE.print("0");
  }
  if ((contstat & 8) == 8) {
    234e:	6823      	ldr	r3, [r4, #0]
    2350:	071b      	lsls	r3, r3, #28
    2352:	bf4b      	itete	mi
    2354:	2101      	movmi	r1, #1
    2356:	2101      	movpl	r1, #1
    2358:	4852      	ldrmi	r0, [pc, #328]	; (24a4 <printbmsstat()+0x300>)
    235a:	4853      	ldrpl	r0, [pc, #332]	; (24a8 <printbmsstat()+0x304>)
    235c:	f009 f80e 	bl	b37c <usb_serial_write>
    2360:	2104      	movs	r1, #4
    2362:	4852      	ldr	r0, [pc, #328]	; (24ac <printbmsstat()+0x308>)
    2364:	f009 f80a 	bl	b37c <usb_serial_write>
    SERIALCONSOLE.print("1");
  } else {
    SERIALCONSOLE.print("0");
  }
  SERIALCONSOLE.print(" In:");
  SERIALCONSOLE.print(digitalRead(IN1));
    2368:	2011      	movs	r0, #17
    236a:	f007 f9bb 	bl	96e4 <digitalRead>
    236e:	2300      	movs	r3, #0
    2370:	4601      	mov	r1, r0
    2372:	220a      	movs	r2, #10
    2374:	483e      	ldr	r0, [pc, #248]	; (2470 <printbmsstat()+0x2cc>)
    2376:	f006 fb6f 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(IN2));
    237a:	2010      	movs	r0, #16
    237c:	f007 f9b2 	bl	96e4 <digitalRead>
    2380:	2300      	movs	r3, #0
    2382:	4601      	mov	r1, r0
    2384:	220a      	movs	r2, #10
    2386:	483a      	ldr	r0, [pc, #232]	; (2470 <printbmsstat()+0x2cc>)
    2388:	f006 fb66 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(IN3));
    238c:	2012      	movs	r0, #18
    238e:	f007 f9a9 	bl	96e4 <digitalRead>
    2392:	2300      	movs	r3, #0
    2394:	4601      	mov	r1, r0
    2396:	220a      	movs	r2, #10
    2398:	4835      	ldr	r0, [pc, #212]	; (2470 <printbmsstat()+0x2cc>)
    239a:	f006 fb5d 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(IN4));
    239e:	2013      	movs	r0, #19
    23a0:	f007 f9a0 	bl	96e4 <digitalRead>
}
    23a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SERIALCONSOLE.print(digitalRead(IN4));
    23a8:	4601      	mov	r1, r0
    23aa:	2300      	movs	r3, #0
    23ac:	4830      	ldr	r0, [pc, #192]	; (2470 <printbmsstat()+0x2cc>)
    23ae:	220a      	movs	r2, #10
    23b0:	f006 bb52 	b.w	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    23b4:	2111      	movs	r1, #17
    23b6:	483e      	ldr	r0, [pc, #248]	; (24b0 <printbmsstat()+0x30c>)
    23b8:	f008 ffe0 	bl	b37c <usb_serial_write>
    23bc:	e773      	b.n	22a6 <printbmsstat()+0x102>
    23be:	210a      	movs	r1, #10
    23c0:	483c      	ldr	r0, [pc, #240]	; (24b4 <printbmsstat()+0x310>)
    23c2:	f008 ffdb 	bl	b37c <usb_serial_write>
    23c6:	e769      	b.n	229c <printbmsstat()+0xf8>
    23c8:	210e      	movs	r1, #14
    23ca:	483b      	ldr	r0, [pc, #236]	; (24b8 <printbmsstat()+0x314>)
    23cc:	f008 ffd6 	bl	b37c <usb_serial_write>
    23d0:	e75e      	b.n	2290 <printbmsstat()+0xec>
    23d2:	2107      	movs	r1, #7
    23d4:	4839      	ldr	r0, [pc, #228]	; (24bc <printbmsstat()+0x318>)
    23d6:	f008 ffd1 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.print(ErrorReason);
    23da:	4b39      	ldr	r3, [pc, #228]	; (24c0 <printbmsstat()+0x31c>)
	size_t print(int n)				{ return print((long)n); }
    23dc:	4824      	ldr	r0, [pc, #144]	; (2470 <printbmsstat()+0x2cc>)
    23de:	6819      	ldr	r1, [r3, #0]
    23e0:	f006 fb1a 	bl	8a18 <Print::print(long)>
    23e4:	e74a      	b.n	227c <printbmsstat()+0xd8>
    23e6:	2106      	movs	r1, #6
    23e8:	4836      	ldr	r0, [pc, #216]	; (24c4 <printbmsstat()+0x320>)
    23ea:	f008 ffc7 	bl	b37c <usb_serial_write>
    23ee:	e745      	b.n	227c <printbmsstat()+0xd8>
    23f0:	2107      	movs	r1, #7
    23f2:	4835      	ldr	r0, [pc, #212]	; (24c8 <printbmsstat()+0x324>)
    23f4:	f008 ffc2 	bl	b37c <usb_serial_write>
    23f8:	e740      	b.n	227c <printbmsstat()+0xd8>
    23fa:	2107      	movs	r1, #7
    23fc:	4833      	ldr	r0, [pc, #204]	; (24cc <printbmsstat()+0x328>)
    23fe:	f008 ffbd 	bl	b37c <usb_serial_write>
    2402:	e73b      	b.n	227c <printbmsstat()+0xd8>
    2404:	2108      	movs	r1, #8
    2406:	4832      	ldr	r0, [pc, #200]	; (24d0 <printbmsstat()+0x32c>)
    2408:	f008 ffb8 	bl	b37c <usb_serial_write>
    240c:	e736      	b.n	227c <printbmsstat()+0xd8>
    240e:	210b      	movs	r1, #11
    2410:	4830      	ldr	r0, [pc, #192]	; (24d4 <printbmsstat()+0x330>)
    2412:	f008 ffb3 	bl	b37c <usb_serial_write>
    2416:	e731      	b.n	227c <printbmsstat()+0xd8>
      if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint) {
    2418:	481a      	ldr	r0, [pc, #104]	; (2484 <printbmsstat()+0x2e0>)
    241a:	f7fe fbff 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    241e:	68e1      	ldr	r1, [r4, #12]
    2420:	f00a f82a 	bl	c478 <__aeabi_fcmplt>
    2424:	2800      	cmp	r0, #0
    2426:	f43f af29 	beq.w	227c <printbmsstat()+0xd8>
        if (bmsstatus == Error) {
    242a:	4b14      	ldr	r3, [pc, #80]	; (247c <printbmsstat()+0x2d8>)
    242c:	781b      	ldrb	r3, [r3, #0]
    242e:	2b05      	cmp	r3, #5
    2430:	d169      	bne.n	2506 <printbmsstat()+0x362>
    2432:	210a      	movs	r1, #10
    2434:	4828      	ldr	r0, [pc, #160]	; (24d8 <printbmsstat()+0x334>)
    2436:	f008 ffa1 	bl	b37c <usb_serial_write>
    243a:	e71f      	b.n	227c <printbmsstat()+0xd8>
      if (bms.getLowCellVolt() > settings.StoreVsetpoint) {
    243c:	f7fe fbc6 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    2440:	6a21      	ldr	r1, [r4, #32]
    2442:	f00a f837 	bl	c4b4 <__aeabi_fcmpgt>
    2446:	2800      	cmp	r0, #0
    2448:	d05d      	beq.n	2506 <printbmsstat()+0x362>
    244a:	2116      	movs	r1, #22
    244c:	4823      	ldr	r0, [pc, #140]	; (24dc <printbmsstat()+0x338>)
    244e:	f008 ff95 	bl	b37c <usb_serial_write>
    2452:	210a      	movs	r1, #10
    2454:	4820      	ldr	r0, [pc, #128]	; (24d8 <printbmsstat()+0x334>)
    2456:	f008 ff91 	bl	b37c <usb_serial_write>
    245a:	e70f      	b.n	227c <printbmsstat()+0xd8>
    245c:	210f      	movs	r1, #15
    245e:	4820      	ldr	r0, [pc, #128]	; (24e0 <printbmsstat()+0x33c>)
    2460:	f008 ff8c 	bl	b37c <usb_serial_write>
    2464:	e6d0      	b.n	2208 <printbmsstat()+0x64>
    2466:	2111      	movs	r1, #17
    2468:	481e      	ldr	r0, [pc, #120]	; (24e4 <printbmsstat()+0x340>)
    246a:	f008 ff87 	bl	b37c <usb_serial_write>
    246e:	e6e5      	b.n	223c <printbmsstat()+0x98>
    2470:	1fff880c 	.word	0x1fff880c
    2474:	1fffb20c 	.word	0x1fffb20c
    2478:	0001327c 	.word	0x0001327c
    247c:	1fffb008 	.word	0x1fffb008
    2480:	0001328c 	.word	0x0001328c
    2484:	1fff8fe0 	.word	0x1fff8fe0
    2488:	1fffb2dc 	.word	0x1fffb2dc
    248c:	00012ea4 	.word	0x00012ea4
    2490:	1fff8fdc 	.word	0x1fff8fdc
    2494:	1fffb0ec 	.word	0x1fffb0ec
    2498:	1fffb074 	.word	0x1fffb074
    249c:	00013384 	.word	0x00013384
    24a0:	0001338c 	.word	0x0001338c
    24a4:	00013394 	.word	0x00013394
    24a8:	00013398 	.word	0x00013398
    24ac:	0001339c 	.word	0x0001339c
    24b0:	00013370 	.word	0x00013370
    24b4:	00013364 	.word	0x00013364
    24b8:	00013354 	.word	0x00013354
    24bc:	0001334c 	.word	0x0001334c
    24c0:	1fff8fb0 	.word	0x1fff8fb0
    24c4:	0001331c 	.word	0x0001331c
    24c8:	00013324 	.word	0x00013324
    24cc:	00013338 	.word	0x00013338
    24d0:	00013340 	.word	0x00013340
    24d4:	0001332c 	.word	0x0001332c
    24d8:	00013304 	.word	0x00013304
    24dc:	000132ec 	.word	0x000132ec
    24e0:	00013298 	.word	0x00013298
    24e4:	000132b8 	.word	0x000132b8
    24e8:	210e      	movs	r1, #14
    24ea:	4809      	ldr	r0, [pc, #36]	; (2510 <printbmsstat()+0x36c>)
    24ec:	f008 ff46 	bl	b37c <usb_serial_write>
    24f0:	e693      	b.n	221a <printbmsstat()+0x76>
    24f2:	210d      	movs	r1, #13
    24f4:	4807      	ldr	r0, [pc, #28]	; (2514 <printbmsstat()+0x370>)
    24f6:	f008 ff41 	bl	b37c <usb_serial_write>
    24fa:	e6b1      	b.n	2260 <printbmsstat()+0xbc>
    24fc:	210c      	movs	r1, #12
    24fe:	4806      	ldr	r0, [pc, #24]	; (2518 <printbmsstat()+0x374>)
    2500:	f008 ff3c 	bl	b37c <usb_serial_write>
    2504:	e6a3      	b.n	224e <printbmsstat()+0xaa>
    2506:	2108      	movs	r1, #8
    2508:	4804      	ldr	r0, [pc, #16]	; (251c <printbmsstat()+0x378>)
    250a:	f008 ff37 	bl	b37c <usb_serial_write>
    250e:	e6b5      	b.n	227c <printbmsstat()+0xd8>
    2510:	000132a8 	.word	0x000132a8
    2514:	000132dc 	.word	0x000132dc
    2518:	000132cc 	.word	0x000132cc
    251c:	00013310 	.word	0x00013310

00002520 <getcurrent()>:


void getcurrent() {
    2520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (settings.cursens == Analoguedual || settings.cursens == Analoguesing) {
    2524:	4cb4      	ldr	r4, [pc, #720]	; (27f8 <getcurrent()+0x2d8>)
    2526:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
    2528:	2e01      	cmp	r6, #1
void getcurrent() {
    252a:	b08c      	sub	sp, #48	; 0x30
  if (settings.cursens == Analoguedual || settings.cursens == Analoguesing) {
    252c:	f000 8143 	beq.w	27b6 <getcurrent()+0x296>
    2530:	2e03      	cmp	r6, #3
    2532:	d05b      	beq.n	25ec <getcurrent()+0xcc>
    2534:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 27fc <getcurrent()+0x2dc>
    2538:	4fb1      	ldr	r7, [pc, #708]	; (2800 <getcurrent()+0x2e0>)
    253a:	4eb2      	ldr	r6, [pc, #712]	; (2804 <getcurrent()+0x2e4>)
        SERIALCONSOLE.print("  ");
      }
    }
  }

  if (settings.invertcur == 1) {
    253c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    RawCur = RawCur * -1;
  }

  lowpassFilter.input(RawCur);
    253e:	48b2      	ldr	r0, [pc, #712]	; (2808 <getcurrent()+0x2e8>)
  if (settings.invertcur == 1) {
    2540:	2b01      	cmp	r3, #1
    RawCur = RawCur * -1;
    2542:	bf09      	itett	eq
    2544:	6831      	ldreq	r1, [r6, #0]
    2546:	6831      	ldrne	r1, [r6, #0]
    2548:	f101 4100 	addeq.w	r1, r1, #2147483648	; 0x80000000
    254c:	6031      	streq	r1, [r6, #0]
  lowpassFilter.input(RawCur);
    254e:	f005 fed9 	bl	8304 <FilterOnePole::input(float)>
  if (debugCur != 0) {
    2552:	683b      	ldr	r3, [r7, #0]
    2554:	2b00      	cmp	r3, #0
    2556:	f040 8114 	bne.w	2782 <getcurrent()+0x262>
    SERIALCONSOLE.print(" | ");
    SERIALCONSOLE.print(settings.changecur);
    SERIALCONSOLE.print(" | ");
  }

  currentact = lowpassFilter.output();
    255a:	48ab      	ldr	r0, [pc, #684]	; (2808 <getcurrent()+0x2e8>)
    255c:	f005 fea6 	bl	82ac <FilterOnePole::output()>

  if (debugCur != 0) {
    2560:	683b      	ldr	r3, [r7, #0]
  currentact = lowpassFilter.output();
    2562:	f8c8 0000 	str.w	r0, [r8]
    2566:	4605      	mov	r5, r0
  if (debugCur != 0) {
    2568:	2b00      	cmp	r3, #0
    256a:	f040 80fa 	bne.w	2762 <getcurrent()+0x242>
    SERIALCONSOLE.print(currentact);
    SERIALCONSOLE.print("mA  ");
  }

  if (settings.cursens == Analoguedual) {
    256e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    2570:	2b01      	cmp	r3, #1
    2572:	f000 80ba 	beq.w	26ea <getcurrent()+0x1ca>
      } else {
        lasttime = millis();
      }
    }
  } else {
    if (currentact > 500 || currentact < -500) {
    2576:	49a5      	ldr	r1, [pc, #660]	; (280c <getcurrent()+0x2ec>)
    2578:	4628      	mov	r0, r5
    257a:	f009 ff9b 	bl	c4b4 <__aeabi_fcmpgt>
    257e:	b930      	cbnz	r0, 258e <getcurrent()+0x6e>
    2580:	49a3      	ldr	r1, [pc, #652]	; (2810 <getcurrent()+0x2f0>)
    2582:	4628      	mov	r0, r5
    2584:	f009 ff78 	bl	c478 <__aeabi_fcmplt>
    2588:	2800      	cmp	r0, #0
    258a:	f000 81e0 	beq.w	294e <getcurrent()+0x42e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    258e:	f8df a284 	ldr.w	sl, [pc, #644]	; 2814 <getcurrent()+0x2f4>
      ampsecond = ampsecond + ((currentact * (millis() - lasttime) / 1000) / 1000);
    2592:	f8df 9284 	ldr.w	r9, [pc, #644]	; 2818 <getcurrent()+0x2f8>
    2596:	f8da 3000 	ldr.w	r3, [sl]
    259a:	930a      	str	r3, [sp, #40]	; 0x28
	return ret;
    259c:	980a      	ldr	r0, [sp, #40]	; 0x28
    259e:	f8d9 3000 	ldr.w	r3, [r9]
    25a2:	4f9e      	ldr	r7, [pc, #632]	; (281c <getcurrent()+0x2fc>)
    25a4:	1ac0      	subs	r0, r0, r3
    25a6:	f009 fd71 	bl	c08c <__aeabi_ui2f>
    25aa:	4629      	mov	r1, r5
    25ac:	f009 fdc6 	bl	c13c <__aeabi_fmul>
    25b0:	499b      	ldr	r1, [pc, #620]	; (2820 <getcurrent()+0x300>)
    25b2:	f009 fe77 	bl	c2a4 <__aeabi_fdiv>
    25b6:	499a      	ldr	r1, [pc, #616]	; (2820 <getcurrent()+0x300>)
    25b8:	f009 fe74 	bl	c2a4 <__aeabi_fdiv>
    25bc:	6839      	ldr	r1, [r7, #0]
    25be:	f009 fcb5 	bl	bf2c <__addsf3>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    25c2:	f8da 3000 	ldr.w	r3, [sl]
    25c6:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    25c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    25ca:	6038      	str	r0, [r7, #0]
      lasttime = millis();
    25cc:	f8c9 3000 	str.w	r3, [r9]
    } else {
      lasttime = millis();
    }
  }
  currentact = settings.ncur * currentact;
    25d0:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
    25d4:	f009 fd5e 	bl	c094 <__aeabi_i2f>
    25d8:	4629      	mov	r1, r5
    25da:	f009 fdaf 	bl	c13c <__aeabi_fmul>
  RawCur = 0;
    25de:	2300      	movs	r3, #0
  currentact = settings.ncur * currentact;
    25e0:	f8c8 0000 	str.w	r0, [r8]
  RawCur = 0;
    25e4:	6033      	str	r3, [r6, #0]
      SERIALCONSOLE.print(AverageCurrentTotal);
      SERIALCONSOLE.print(" | ");
      SERIALCONSOLE.print(NextRunningAverage);
    }
  */
}
    25e6:	b00c      	add	sp, #48	; 0x30
    25e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      adc->adc0->startContinuous(ACUR1);
    25ec:	4d8d      	ldr	r5, [pc, #564]	; (2824 <getcurrent()+0x304>)
      sensor = 1;
    25ee:	4f8e      	ldr	r7, [pc, #568]	; (2828 <getcurrent()+0x308>)
      adc->adc0->startContinuous(ACUR1);
    25f0:	682a      	ldr	r2, [r5, #0]
    25f2:	f8df 8208 	ldr.w	r8, [pc, #520]	; 27fc <getcurrent()+0x2dc>
    25f6:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      sensor = 1;
    25fa:	2301      	movs	r3, #1
      adc->adc0->startContinuous(ACUR1);
    25fc:	210f      	movs	r1, #15
      sensor = 1;
    25fe:	603b      	str	r3, [r7, #0]
      adc->adc0->startContinuous(ACUR1);
    2600:	f005 fd3e 	bl	8080 <ADC_Module::startContinuous(unsigned char)>
    if (sensor == 1) {
    2604:	683b      	ldr	r3, [r7, #0]
      if (debugCur != 0) {
    2606:	4f7e      	ldr	r7, [pc, #504]	; (2800 <getcurrent()+0x2e0>)
    if (sensor == 1) {
    2608:	2b01      	cmp	r3, #1
      if (debugCur != 0) {
    260a:	683b      	ldr	r3, [r7, #0]
    if (sensor == 1) {
    260c:	f000 812c 	beq.w	2868 <getcurrent()+0x348>
      if (debugCur != 0) {
    2610:	2b00      	cmp	r3, #0
    2612:	f040 81af 	bne.w	2974 <getcurrent()+0x454>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    2616:	682b      	ldr	r3, [r5, #0]
    2618:	f8df 9210 	ldr.w	r9, [pc, #528]	; 282c <getcurrent()+0x30c>
    261c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    int analogReadContinuous() __attribute__((always_inline))
    {
#ifdef ADC_TEENSY_4
        return (int16_t)(int32_t)adc_regs.R0;
#else
        return (int16_t)(int32_t)adc_regs.RA;
    2620:	6b43      	ldr	r3, [r0, #52]	; 0x34
    2622:	691e      	ldr	r6, [r3, #16]
    2624:	b2b6      	uxth	r6, r6
    2626:	f8c9 6000 	str.w	r6, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.0000066);
    262a:	f005 fa71 	bl	7b10 <ADC_Module::getMaxValue()>
    262e:	f8b4 2086 	ldrh.w	r2, [r4, #134]	; 0x86
    2632:	f640 43e4 	movw	r3, #3300	; 0xce4
    2636:	fb06 f303 	mul.w	r3, r6, r3
    263a:	fbb3 f0f0 	udiv	r0, r3, r0
    263e:	1a80      	subs	r0, r0, r2
    2640:	b200      	sxth	r0, r0
    2642:	f009 fd27 	bl	c094 <__aeabi_i2f>
    2646:	497a      	ldr	r1, [pc, #488]	; (2830 <getcurrent()+0x310>)
    2648:	4606      	mov	r6, r0
    264a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    264e:	f009 fd75 	bl	c13c <__aeabi_fmul>
    2652:	4601      	mov	r1, r0
    2654:	4630      	mov	r0, r6
    2656:	f009 fe25 	bl	c2a4 <__aeabi_fdiv>
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    265a:	f8d9 3000 	ldr.w	r3, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.0000066);
    265e:	4e69      	ldr	r6, [pc, #420]	; (2804 <getcurrent()+0x2e4>)
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    2660:	2b63      	cmp	r3, #99	; 0x63
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.0000066);
    2662:	6030      	str	r0, [r6, #0]
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    2664:	f300 817a 	bgt.w	295c <getcurrent()+0x43c>
        RawCur = 0;
    2668:	2300      	movs	r3, #0
    266a:	6033      	str	r3, [r6, #0]
      if (debugCur != 0) {
    266c:	683b      	ldr	r3, [r7, #0]
    266e:	2b00      	cmp	r3, #0
    2670:	f43f af64 	beq.w	253c <getcurrent()+0x1c>
    2674:	2102      	movs	r1, #2
    2676:	486f      	ldr	r0, [pc, #444]	; (2834 <getcurrent()+0x314>)
    2678:	f008 fe80 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.print((float(value * 3300 / adc->adc0->getMaxValue()) - settings.offset2));
    267c:	682b      	ldr	r3, [r5, #0]
    267e:	f8d9 5000 	ldr.w	r5, [r9]
    2682:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2686:	f640 43e4 	movw	r3, #3300	; 0xce4
    268a:	fb03 f505 	mul.w	r5, r3, r5
    268e:	f005 fa3f 	bl	7b10 <ADC_Module::getMaxValue()>
    2692:	fbb5 f0f0 	udiv	r0, r5, r0
    2696:	f009 fcf9 	bl	c08c <__aeabi_ui2f>
    269a:	4605      	mov	r5, r0
    269c:	f8b4 0086 	ldrh.w	r0, [r4, #134]	; 0x86
    26a0:	f009 fcf8 	bl	c094 <__aeabi_i2f>
    26a4:	4601      	mov	r1, r0
    26a6:	4628      	mov	r0, r5
    26a8:	f009 fc3e 	bl	bf28 <__aeabi_fsub>
    26ac:	f009 fb22 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    26b0:	2502      	movs	r5, #2
    26b2:	4602      	mov	r2, r0
    26b4:	460b      	mov	r3, r1
    26b6:	9500      	str	r5, [sp, #0]
    26b8:	485f      	ldr	r0, [pc, #380]	; (2838 <getcurrent()+0x318>)
    26ba:	f006 f9d9 	bl	8a70 <Print::printFloat(double, unsigned char)>
    26be:	4629      	mov	r1, r5
    26c0:	485c      	ldr	r0, [pc, #368]	; (2834 <getcurrent()+0x314>)
    26c2:	f008 fe5b 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.print(RawCur);
    26c6:	6830      	ldr	r0, [r6, #0]
    26c8:	f009 fb14 	bl	bcf4 <__aeabi_f2d>
    26cc:	9500      	str	r5, [sp, #0]
    26ce:	4602      	mov	r2, r0
    26d0:	460b      	mov	r3, r1
    26d2:	4859      	ldr	r0, [pc, #356]	; (2838 <getcurrent()+0x318>)
    26d4:	f006 f9cc 	bl	8a70 <Print::printFloat(double, unsigned char)>
    26d8:	4629      	mov	r1, r5
    26da:	4858      	ldr	r0, [pc, #352]	; (283c <getcurrent()+0x31c>)
    26dc:	f008 fe4e 	bl	b37c <usb_serial_write>
    26e0:	4629      	mov	r1, r5
    26e2:	4854      	ldr	r0, [pc, #336]	; (2834 <getcurrent()+0x314>)
    26e4:	f008 fe4a 	bl	b37c <usb_serial_write>
    26e8:	e728      	b.n	253c <getcurrent()+0x1c>
    if (sensor == 1) {
    26ea:	4b4f      	ldr	r3, [pc, #316]	; (2828 <getcurrent()+0x308>)
    26ec:	681b      	ldr	r3, [r3, #0]
    26ee:	2b01      	cmp	r3, #1
    26f0:	f000 8175 	beq.w	29de <getcurrent()+0x4be>
    if (sensor == 2) {
    26f4:	2b02      	cmp	r3, #2
    26f6:	f47f af6b 	bne.w	25d0 <getcurrent()+0xb0>
      if (currentact > settings.changecur || currentact < (settings.changecur * -1)) {
    26fa:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
    26fe:	4638      	mov	r0, r7
    2700:	f009 fcc8 	bl	c094 <__aeabi_i2f>
    2704:	4629      	mov	r1, r5
    2706:	f009 feb7 	bl	c478 <__aeabi_fcmplt>
    270a:	b940      	cbnz	r0, 271e <getcurrent()+0x1fe>
    270c:	4278      	negs	r0, r7
    270e:	f009 fcc1 	bl	c094 <__aeabi_i2f>
    2712:	4629      	mov	r1, r5
    2714:	f009 fece 	bl	c4b4 <__aeabi_fcmpgt>
    2718:	2800      	cmp	r0, #0
    271a:	f000 81cd 	beq.w	2ab8 <getcurrent()+0x598>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    271e:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 2814 <getcurrent()+0x2f4>
        ampsecond = ampsecond + ((currentact * (millis() - lasttime) / 1000) / 1000);
    2722:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 2818 <getcurrent()+0x2f8>
    2726:	f8da 3000 	ldr.w	r3, [sl]
    272a:	9307      	str	r3, [sp, #28]
	return ret;
    272c:	9807      	ldr	r0, [sp, #28]
    272e:	f8d9 3000 	ldr.w	r3, [r9]
    2732:	4f3a      	ldr	r7, [pc, #232]	; (281c <getcurrent()+0x2fc>)
    2734:	1ac0      	subs	r0, r0, r3
    2736:	f009 fca9 	bl	c08c <__aeabi_ui2f>
    273a:	4629      	mov	r1, r5
    273c:	f009 fcfe 	bl	c13c <__aeabi_fmul>
    2740:	4937      	ldr	r1, [pc, #220]	; (2820 <getcurrent()+0x300>)
    2742:	f009 fdaf 	bl	c2a4 <__aeabi_fdiv>
    2746:	4936      	ldr	r1, [pc, #216]	; (2820 <getcurrent()+0x300>)
    2748:	f009 fdac 	bl	c2a4 <__aeabi_fdiv>
    274c:	6839      	ldr	r1, [r7, #0]
    274e:	f009 fbed 	bl	bf2c <__addsf3>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2752:	f8da 3000 	ldr.w	r3, [sl]
    2756:	9306      	str	r3, [sp, #24]
	return ret;
    2758:	9b06      	ldr	r3, [sp, #24]
    275a:	6038      	str	r0, [r7, #0]
        lasttime = millis();
    275c:	f8c9 3000 	str.w	r3, [r9]
    2760:	e736      	b.n	25d0 <getcurrent()+0xb0>
    SERIALCONSOLE.print(currentact);
    2762:	f009 fac7 	bl	bcf4 <__aeabi_f2d>
    2766:	460b      	mov	r3, r1
    2768:	2102      	movs	r1, #2
    276a:	4602      	mov	r2, r0
    276c:	9100      	str	r1, [sp, #0]
    276e:	4832      	ldr	r0, [pc, #200]	; (2838 <getcurrent()+0x318>)
    2770:	f006 f97e 	bl	8a70 <Print::printFloat(double, unsigned char)>
    2774:	4832      	ldr	r0, [pc, #200]	; (2840 <getcurrent()+0x320>)
    2776:	2104      	movs	r1, #4
    2778:	f008 fe00 	bl	b37c <usb_serial_write>
      if (currentact > 500 || currentact < -500) {
    277c:	f8d8 5000 	ldr.w	r5, [r8]
    2780:	e6f5      	b.n	256e <getcurrent()+0x4e>
    SERIALCONSOLE.print(lowpassFilter.output());
    2782:	4821      	ldr	r0, [pc, #132]	; (2808 <getcurrent()+0x2e8>)
    2784:	f005 fd92 	bl	82ac <FilterOnePole::output()>
    2788:	f009 fab4 	bl	bcf4 <__aeabi_f2d>
    278c:	460b      	mov	r3, r1
    278e:	2102      	movs	r1, #2
    2790:	4602      	mov	r2, r0
    2792:	9100      	str	r1, [sp, #0]
    2794:	4828      	ldr	r0, [pc, #160]	; (2838 <getcurrent()+0x318>)
    2796:	f006 f96b 	bl	8a70 <Print::printFloat(double, unsigned char)>
    279a:	2103      	movs	r1, #3
    279c:	4829      	ldr	r0, [pc, #164]	; (2844 <getcurrent()+0x324>)
    279e:	f008 fded 	bl	b37c <usb_serial_write>
    SERIALCONSOLE.print(settings.changecur);
    27a2:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
    27a6:	4824      	ldr	r0, [pc, #144]	; (2838 <getcurrent()+0x318>)
    27a8:	f006 f936 	bl	8a18 <Print::print(long)>
    27ac:	2103      	movs	r1, #3
    27ae:	4825      	ldr	r0, [pc, #148]	; (2844 <getcurrent()+0x324>)
    27b0:	f008 fde4 	bl	b37c <usb_serial_write>
    27b4:	e6d1      	b.n	255a <getcurrent()+0x3a>
      if (currentact < settings.changecur && currentact > (settings.changecur * -1)) {
    27b6:	f8df 8044 	ldr.w	r8, [pc, #68]	; 27fc <getcurrent()+0x2dc>
    27ba:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
    27be:	f8d8 5000 	ldr.w	r5, [r8]
    27c2:	4638      	mov	r0, r7
    27c4:	f009 fc66 	bl	c094 <__aeabi_i2f>
    27c8:	4629      	mov	r1, r5
    27ca:	f009 fe73 	bl	c4b4 <__aeabi_fcmpgt>
    27ce:	2800      	cmp	r0, #0
    27d0:	d03a      	beq.n	2848 <getcurrent()+0x328>
    27d2:	4278      	negs	r0, r7
    27d4:	f009 fc5e 	bl	c094 <__aeabi_i2f>
    27d8:	4601      	mov	r1, r0
    27da:	4628      	mov	r0, r5
    27dc:	f009 fe6a 	bl	c4b4 <__aeabi_fcmpgt>
    27e0:	b390      	cbz	r0, 2848 <getcurrent()+0x328>
        adc->adc0->startContinuous(ACUR1);
    27e2:	4d10      	ldr	r5, [pc, #64]	; (2824 <getcurrent()+0x304>)
        sensor = 1;
    27e4:	4f10      	ldr	r7, [pc, #64]	; (2828 <getcurrent()+0x308>)
        adc->adc0->startContinuous(ACUR1);
    27e6:	682b      	ldr	r3, [r5, #0]
        sensor = 1;
    27e8:	603e      	str	r6, [r7, #0]
        adc->adc0->startContinuous(ACUR1);
    27ea:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    27ee:	210f      	movs	r1, #15
    27f0:	f005 fc46 	bl	8080 <ADC_Module::startContinuous(unsigned char)>
    27f4:	e706      	b.n	2604 <getcurrent()+0xe4>
    27f6:	bf00      	nop
    27f8:	1fffb20c 	.word	0x1fffb20c
    27fc:	1fffb0fc 	.word	0x1fffb0fc
    2800:	1fffb100 	.word	0x1fffb100
    2804:	1fff8fc0 	.word	0x1fff8fc0
    2808:	1fffb14c 	.word	0x1fffb14c
    280c:	43fa0000 	.word	0x43fa0000
    2810:	c3fa0000 	.word	0xc3fa0000
    2814:	1fffb4e0 	.word	0x1fffb4e0
    2818:	1fffb140 	.word	0x1fffb140
    281c:	1fff8fd8 	.word	0x1fff8fd8
    2820:	447a0000 	.word	0x447a0000
    2824:	1fff8fd0 	.word	0x1fff8fd0
    2828:	1fff8768 	.word	0x1fff8768
    282c:	1fffb2e0 	.word	0x1fffb2e0
    2830:	36dd7591 	.word	0x36dd7591
    2834:	00012ea4 	.word	0x00012ea4
    2838:	1fff880c 	.word	0x1fff880c
    283c:	000133e0 	.word	0x000133e0
    2840:	000133e8 	.word	0x000133e8
    2844:	000133e4 	.word	0x000133e4
        sensor = 2;
    2848:	4f9f      	ldr	r7, [pc, #636]	; (2ac8 <getcurrent()+0x5a8>)
        adc->adc0->startContinuous(ACUR2);
    284a:	4da0      	ldr	r5, [pc, #640]	; (2acc <getcurrent()+0x5ac>)
        sensor = 2;
    284c:	2302      	movs	r3, #2
    284e:	603b      	str	r3, [r7, #0]
        adc->adc0->startContinuous(ACUR2);
    2850:	682b      	ldr	r3, [r5, #0]
    2852:	210e      	movs	r1, #14
    2854:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2858:	f005 fc12 	bl	8080 <ADC_Module::startContinuous(unsigned char)>
    if (sensor == 1) {
    285c:	683b      	ldr	r3, [r7, #0]
      if (debugCur != 0) {
    285e:	4f9c      	ldr	r7, [pc, #624]	; (2ad0 <getcurrent()+0x5b0>)
    if (sensor == 1) {
    2860:	2b01      	cmp	r3, #1
      if (debugCur != 0) {
    2862:	683b      	ldr	r3, [r7, #0]
    if (sensor == 1) {
    2864:	f47f aed4 	bne.w	2610 <getcurrent()+0xf0>
      if (debugCur != 0) {
    2868:	2b00      	cmp	r3, #0
    286a:	f040 80e5 	bne.w	2a38 <getcurrent()+0x518>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    286e:	682b      	ldr	r3, [r5, #0]
    2870:	f8df 9260 	ldr.w	r9, [pc, #608]	; 2ad4 <getcurrent()+0x5b4>
    2874:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2878:	6b43      	ldr	r3, [r0, #52]	; 0x34
    287a:	691e      	ldr	r6, [r3, #16]
    287c:	b2b6      	uxth	r6, r6
    287e:	f8c9 6000 	str.w	r6, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.0000066);
    2882:	f005 f945 	bl	7b10 <ADC_Module::getMaxValue()>
    2886:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
    288a:	f640 4ae4 	movw	sl, #3300	; 0xce4
    288e:	fb0a f606 	mul.w	r6, sl, r6
    2892:	fbb6 f6f0 	udiv	r6, r6, r0
    2896:	1af0      	subs	r0, r6, r3
    2898:	b200      	sxth	r0, r0
    289a:	f009 fbfb 	bl	c094 <__aeabi_i2f>
    289e:	498e      	ldr	r1, [pc, #568]	; (2ad8 <getcurrent()+0x5b8>)
    28a0:	4606      	mov	r6, r0
    28a2:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    28a6:	f009 fc49 	bl	c13c <__aeabi_fmul>
    28aa:	4601      	mov	r1, r0
    28ac:	4630      	mov	r0, r6
    28ae:	f009 fcf9 	bl	c2a4 <__aeabi_fdiv>
      if (abs((int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1)) < settings.CurDead) {
    28b2:	682b      	ldr	r3, [r5, #0]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.0000066);
    28b4:	4e89      	ldr	r6, [pc, #548]	; (2adc <getcurrent()+0x5bc>)
    28b6:	4602      	mov	r2, r0
      if (abs((int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1)) < settings.CurDead) {
    28b8:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    28bc:	f8d9 3000 	ldr.w	r3, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.0000066);
    28c0:	6032      	str	r2, [r6, #0]
      if (abs((int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1)) < settings.CurDead) {
    28c2:	fb0a fa03 	mul.w	sl, sl, r3
    28c6:	f005 f923 	bl	7b10 <ADC_Module::getMaxValue()>
    28ca:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
    28ce:	fbba f3f0 	udiv	r3, sl, r0
    28d2:	b21b      	sxth	r3, r3
    28d4:	1a9b      	subs	r3, r3, r2
    28d6:	2b00      	cmp	r3, #0
    28d8:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
    28dc:	bfb8      	it	lt
    28de:	425b      	neglt	r3, r3
    28e0:	429a      	cmp	r2, r3
        RawCur = 0;
    28e2:	bfc4      	itt	gt
    28e4:	2300      	movgt	r3, #0
    28e6:	6033      	strgt	r3, [r6, #0]
      if (debugCur != 0) {
    28e8:	683b      	ldr	r3, [r7, #0]
    28ea:	2b00      	cmp	r3, #0
    28ec:	f43f ae26 	beq.w	253c <getcurrent()+0x1c>
    28f0:	2102      	movs	r1, #2
    28f2:	487b      	ldr	r0, [pc, #492]	; (2ae0 <getcurrent()+0x5c0>)
    28f4:	f008 fd42 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.print(int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1);
    28f8:	682b      	ldr	r3, [r5, #0]
    28fa:	f8d9 5000 	ldr.w	r5, [r9]
    28fe:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2902:	f640 43e4 	movw	r3, #3300	; 0xce4
    2906:	fb03 f505 	mul.w	r5, r3, r5
    290a:	f005 f901 	bl	7b10 <ADC_Module::getMaxValue()>
    290e:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
    2912:	fbb5 f5f0 	udiv	r5, r5, r0
    2916:	b22d      	sxth	r5, r5
	size_t print(int n)				{ return print((long)n); }
    2918:	1a69      	subs	r1, r5, r1
    291a:	4872      	ldr	r0, [pc, #456]	; (2ae4 <getcurrent()+0x5c4>)
    291c:	f006 f87c 	bl	8a18 <Print::print(long)>
    2920:	2102      	movs	r1, #2
    2922:	486f      	ldr	r0, [pc, #444]	; (2ae0 <getcurrent()+0x5c0>)
    2924:	f008 fd2a 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.print(RawCur);
    2928:	6830      	ldr	r0, [r6, #0]
    292a:	f009 f9e3 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    292e:	2502      	movs	r5, #2
    2930:	4602      	mov	r2, r0
    2932:	460b      	mov	r3, r1
    2934:	9500      	str	r5, [sp, #0]
    2936:	486b      	ldr	r0, [pc, #428]	; (2ae4 <getcurrent()+0x5c4>)
    2938:	f006 f89a 	bl	8a70 <Print::printFloat(double, unsigned char)>
    293c:	2103      	movs	r1, #3
    293e:	486a      	ldr	r0, [pc, #424]	; (2ae8 <getcurrent()+0x5c8>)
    2940:	f008 fd1c 	bl	b37c <usb_serial_write>
    2944:	4629      	mov	r1, r5
    2946:	4866      	ldr	r0, [pc, #408]	; (2ae0 <getcurrent()+0x5c0>)
    2948:	f008 fd18 	bl	b37c <usb_serial_write>
    294c:	e5f6      	b.n	253c <getcurrent()+0x1c>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    294e:	4b67      	ldr	r3, [pc, #412]	; (2aec <getcurrent()+0x5cc>)
    2950:	681b      	ldr	r3, [r3, #0]
    2952:	930b      	str	r3, [sp, #44]	; 0x2c
      lasttime = millis();
    2954:	4b66      	ldr	r3, [pc, #408]	; (2af0 <getcurrent()+0x5d0>)
	return ret;
    2956:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2958:	601a      	str	r2, [r3, #0]
    295a:	e639      	b.n	25d0 <getcurrent()+0xb0>
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    295c:	682b      	ldr	r3, [r5, #0]
    295e:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2962:	f005 f8d5 	bl	7b10 <ADC_Module::getMaxValue()>
    2966:	f8d9 3000 	ldr.w	r3, [r9]
    296a:	3864      	subs	r0, #100	; 0x64
    296c:	4298      	cmp	r0, r3
    296e:	f4ff ae7b 	bcc.w	2668 <getcurrent()+0x148>
    2972:	e67b      	b.n	266c <getcurrent()+0x14c>
        SERIALCONSOLE.println();
    2974:	485b      	ldr	r0, [pc, #364]	; (2ae4 <getcurrent()+0x5c4>)
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    2976:	f8df 915c 	ldr.w	r9, [pc, #348]	; 2ad4 <getcurrent()+0x5b4>
        SERIALCONSOLE.println();
    297a:	f006 f855 	bl	8a28 <Print::println()>
    297e:	210c      	movs	r1, #12
    2980:	485c      	ldr	r0, [pc, #368]	; (2af4 <getcurrent()+0x5d4>)
    2982:	f008 fcfb 	bl	b37c <usb_serial_write>
    2986:	485c      	ldr	r0, [pc, #368]	; (2af8 <getcurrent()+0x5d8>)
    2988:	210c      	movs	r1, #12
    298a:	f008 fcf7 	bl	b37c <usb_serial_write>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    298e:	682b      	ldr	r3, [r5, #0]
      if (debugCur != 0) {
    2990:	683a      	ldr	r2, [r7, #0]
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    2992:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2996:	6b43      	ldr	r3, [r0, #52]	; 0x34
    2998:	691e      	ldr	r6, [r3, #16]
    299a:	b2b6      	uxth	r6, r6
    299c:	f8c9 6000 	str.w	r6, [r9]
      if (debugCur != 0) {
    29a0:	2a00      	cmp	r2, #0
    29a2:	f43f ae42 	beq.w	262a <getcurrent()+0x10a>
        SERIALCONSOLE.print(value * 3300 / adc->adc0->getMaxValue());  //- settings.offset2)
    29a6:	f005 f8b3 	bl	7b10 <ADC_Module::getMaxValue()>
    29aa:	f640 42e4 	movw	r2, #3300	; 0xce4
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    29ae:	2300      	movs	r3, #0
    29b0:	fb06 f202 	mul.w	r2, r6, r2
    29b4:	fbb2 f1f0 	udiv	r1, r2, r0
    29b8:	220a      	movs	r2, #10
    29ba:	484a      	ldr	r0, [pc, #296]	; (2ae4 <getcurrent()+0x5c4>)
    29bc:	f006 f84c 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    29c0:	2102      	movs	r1, #2
    29c2:	4847      	ldr	r0, [pc, #284]	; (2ae0 <getcurrent()+0x5c0>)
    29c4:	f008 fcda 	bl	b37c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    29c8:	f8b4 1086 	ldrh.w	r1, [r4, #134]	; 0x86
    29cc:	4845      	ldr	r0, [pc, #276]	; (2ae4 <getcurrent()+0x5c4>)
    29ce:	f006 f823 	bl	8a18 <Print::print(long)>
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.0000066);
    29d2:	682b      	ldr	r3, [r5, #0]
    29d4:	f8d9 6000 	ldr.w	r6, [r9]
    29d8:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    29dc:	e625      	b.n	262a <getcurrent()+0x10a>
      if (currentact > 500 || currentact < -500) {
    29de:	4947      	ldr	r1, [pc, #284]	; (2afc <getcurrent()+0x5dc>)
    29e0:	4628      	mov	r0, r5
    29e2:	f009 fd67 	bl	c4b4 <__aeabi_fcmpgt>
    29e6:	b928      	cbnz	r0, 29f4 <getcurrent()+0x4d4>
    29e8:	4945      	ldr	r1, [pc, #276]	; (2b00 <getcurrent()+0x5e0>)
    29ea:	4628      	mov	r0, r5
    29ec:	f009 fd44 	bl	c478 <__aeabi_fcmplt>
    29f0:	2800      	cmp	r0, #0
    29f2:	d05a      	beq.n	2aaa <getcurrent()+0x58a>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    29f4:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 2aec <getcurrent()+0x5cc>
        ampsecond = ampsecond + ((currentact * (millis() - lasttime) / 1000) / 1000);
    29f8:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 2af0 <getcurrent()+0x5d0>
    29fc:	f8da 3000 	ldr.w	r3, [sl]
    2a00:	9304      	str	r3, [sp, #16]
	return ret;
    2a02:	9804      	ldr	r0, [sp, #16]
    2a04:	f8d9 3000 	ldr.w	r3, [r9]
    2a08:	4f3e      	ldr	r7, [pc, #248]	; (2b04 <getcurrent()+0x5e4>)
    2a0a:	1ac0      	subs	r0, r0, r3
    2a0c:	f009 fb3e 	bl	c08c <__aeabi_ui2f>
    2a10:	4629      	mov	r1, r5
    2a12:	f009 fb93 	bl	c13c <__aeabi_fmul>
    2a16:	493c      	ldr	r1, [pc, #240]	; (2b08 <getcurrent()+0x5e8>)
    2a18:	f009 fc44 	bl	c2a4 <__aeabi_fdiv>
    2a1c:	493a      	ldr	r1, [pc, #232]	; (2b08 <getcurrent()+0x5e8>)
    2a1e:	f009 fc41 	bl	c2a4 <__aeabi_fdiv>
    2a22:	6839      	ldr	r1, [r7, #0]
    2a24:	f009 fa82 	bl	bf2c <__addsf3>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2a28:	f8da 3000 	ldr.w	r3, [sl]
    2a2c:	9303      	str	r3, [sp, #12]
	return ret;
    2a2e:	9b03      	ldr	r3, [sp, #12]
    2a30:	6038      	str	r0, [r7, #0]
        lasttime = millis();
    2a32:	f8c9 3000 	str.w	r3, [r9]
    2a36:	e5cb      	b.n	25d0 <getcurrent()+0xb0>
        SERIALCONSOLE.println();
    2a38:	482a      	ldr	r0, [pc, #168]	; (2ae4 <getcurrent()+0x5c4>)
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    2a3a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 2ad4 <getcurrent()+0x5b4>
        SERIALCONSOLE.println();
    2a3e:	f005 fff3 	bl	8a28 <Print::println()>
        if (settings.cursens == Analoguedual) {
    2a42:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    2a44:	2b01      	cmp	r3, #1
    2a46:	bf0c      	ite	eq
    2a48:	4830      	ldreq	r0, [pc, #192]	; (2b0c <getcurrent()+0x5ec>)
    2a4a:	4831      	ldrne	r0, [pc, #196]	; (2b10 <getcurrent()+0x5f0>)
    2a4c:	210b      	movs	r1, #11
    2a4e:	f008 fc95 	bl	b37c <usb_serial_write>
    2a52:	4829      	ldr	r0, [pc, #164]	; (2af8 <getcurrent()+0x5d8>)
    2a54:	210c      	movs	r1, #12
    2a56:	f008 fc91 	bl	b37c <usb_serial_write>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    2a5a:	682a      	ldr	r2, [r5, #0]
      if (debugCur != 0) {
    2a5c:	683b      	ldr	r3, [r7, #0]
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    2a5e:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    2a62:	6b42      	ldr	r2, [r0, #52]	; 0x34
    2a64:	6916      	ldr	r6, [r2, #16]
    2a66:	b2b6      	uxth	r6, r6
    2a68:	f8c9 6000 	str.w	r6, [r9]
      if (debugCur != 0) {
    2a6c:	2b00      	cmp	r3, #0
    2a6e:	f43f af08 	beq.w	2882 <getcurrent()+0x362>
        SERIALCONSOLE.print(value * 3300 / adc->adc0->getMaxValue());  //- settings.offset1)
    2a72:	f005 f84d 	bl	7b10 <ADC_Module::getMaxValue()>
    2a76:	f640 43e4 	movw	r3, #3300	; 0xce4
    2a7a:	fb06 f303 	mul.w	r3, r6, r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    2a7e:	220a      	movs	r2, #10
    2a80:	fbb3 f1f0 	udiv	r1, r3, r0
    2a84:	2300      	movs	r3, #0
    2a86:	4817      	ldr	r0, [pc, #92]	; (2ae4 <getcurrent()+0x5c4>)
    2a88:	f005 ffe6 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2a8c:	2101      	movs	r1, #1
    2a8e:	4821      	ldr	r0, [pc, #132]	; (2b14 <getcurrent()+0x5f4>)
    2a90:	f008 fc74 	bl	b37c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    2a94:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
    2a98:	4812      	ldr	r0, [pc, #72]	; (2ae4 <getcurrent()+0x5c4>)
    2a9a:	f005 ffbd 	bl	8a18 <Print::print(long)>
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.0000066);
    2a9e:	682b      	ldr	r3, [r5, #0]
    2aa0:	f8d9 6000 	ldr.w	r6, [r9]
    2aa4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2aa8:	e6eb      	b.n	2882 <getcurrent()+0x362>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2aaa:	4b10      	ldr	r3, [pc, #64]	; (2aec <getcurrent()+0x5cc>)
    2aac:	681b      	ldr	r3, [r3, #0]
    2aae:	9305      	str	r3, [sp, #20]
        lasttime = millis();
    2ab0:	4b0f      	ldr	r3, [pc, #60]	; (2af0 <getcurrent()+0x5d0>)
	return ret;
    2ab2:	9a05      	ldr	r2, [sp, #20]
    2ab4:	601a      	str	r2, [r3, #0]
    2ab6:	e58b      	b.n	25d0 <getcurrent()+0xb0>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2ab8:	4b0c      	ldr	r3, [pc, #48]	; (2aec <getcurrent()+0x5cc>)
    2aba:	681b      	ldr	r3, [r3, #0]
    2abc:	9308      	str	r3, [sp, #32]
        lasttime = millis();
    2abe:	4b0c      	ldr	r3, [pc, #48]	; (2af0 <getcurrent()+0x5d0>)
	return ret;
    2ac0:	9a08      	ldr	r2, [sp, #32]
    2ac2:	601a      	str	r2, [r3, #0]
    2ac4:	e584      	b.n	25d0 <getcurrent()+0xb0>
    2ac6:	bf00      	nop
    2ac8:	1fff8768 	.word	0x1fff8768
    2acc:	1fff8fd0 	.word	0x1fff8fd0
    2ad0:	1fffb100 	.word	0x1fffb100
    2ad4:	1fffb2e0 	.word	0x1fffb2e0
    2ad8:	36dd7591 	.word	0x36dd7591
    2adc:	1fff8fc0 	.word	0x1fff8fc0
    2ae0:	00012ea4 	.word	0x00012ea4
    2ae4:	1fff880c 	.word	0x1fff880c
    2ae8:	000133cc 	.word	0x000133cc
    2aec:	1fffb4e0 	.word	0x1fffb4e0
    2af0:	1fffb140 	.word	0x1fffb140
    2af4:	000133d0 	.word	0x000133d0
    2af8:	000133bc 	.word	0x000133bc
    2afc:	43fa0000 	.word	0x43fa0000
    2b00:	c3fa0000 	.word	0xc3fa0000
    2b04:	1fff8fd8 	.word	0x1fff8fd8
    2b08:	447a0000 	.word	0x447a0000
    2b0c:	000133a4 	.word	0x000133a4
    2b10:	000133b0 	.word	0x000133b0
    2b14:	00012ec0 	.word	0x00012ec0

00002b18 <updateSOC()>:

void updateSOC() {
    2b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (SOCset == 0) {
    2b1c:	4d8c      	ldr	r5, [pc, #560]	; (2d50 <updateSOC()+0x238>)
    2b1e:	682b      	ldr	r3, [r5, #0]
void updateSOC() {
    2b20:	b084      	sub	sp, #16
  if (SOCset == 0) {
    2b22:	2b00      	cmp	r3, #0
    2b24:	d07b      	beq.n	2c1e <updateSOC()+0x106>
    2b26:	4c8b      	ldr	r4, [pc, #556]	; (2d54 <updateSOC()+0x23c>)
    2b28:	4e8b      	ldr	r6, [pc, #556]	; (2d58 <updateSOC()+0x240>)
    2b2a:	4f8c      	ldr	r7, [pc, #560]	; (2d5c <updateSOC()+0x244>)
    2b2c:	f8df 8230 	ldr.w	r8, [pc, #560]	; 2d60 <updateSOC()+0x248>
        SERIALCONSOLE.println("//////////////////////////////////////// SOC SET ////////////////////////////////////////");
      }
    }
  }

  if (settings.voltsoc == 1) {
    2b30:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    2b34:	2b01      	cmp	r3, #1
    2b36:	f000 808c 	beq.w	2c52 <updateSOC()+0x13a>
    SOC = map(uint16_t(bms.getAvgCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);

    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
  }
  SOC = ((ampsecond * 0.27777777777778) / (settings.CAP * settings.Pstrings * 1000)) * 100;
    2b3a:	f8d7 9000 	ldr.w	r9, [r7]
    2b3e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    2b40:	f8d4 a054 	ldr.w	sl, [r4, #84]	; 0x54
    2b44:	fb0a f505 	mul.w	r5, sl, r5
    2b48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2b4c:	fb05 f000 	mul.w	r0, r5, r0
    2b50:	f009 faa0 	bl	c094 <__aeabi_i2f>
    2b54:	4983      	ldr	r1, [pc, #524]	; (2d64 <updateSOC()+0x24c>)
    2b56:	4605      	mov	r5, r0
    2b58:	4648      	mov	r0, r9
    2b5a:	f009 faef 	bl	c13c <__aeabi_fmul>
    2b5e:	4629      	mov	r1, r5
    2b60:	f009 fba0 	bl	c2a4 <__aeabi_fdiv>
    2b64:	4980      	ldr	r1, [pc, #512]	; (2d68 <updateSOC()+0x250>)
    2b66:	f009 fae9 	bl	c13c <__aeabi_fmul>
    2b6a:	f009 fcad 	bl	c4c8 <__aeabi_f2iz>
  if (SOC >= 100) {
    2b6e:	2863      	cmp	r0, #99	; 0x63
  SOC = ((ampsecond * 0.27777777777778) / (settings.CAP * settings.Pstrings * 1000)) * 100;
    2b70:	6030      	str	r0, [r6, #0]
  if (SOC >= 100) {
    2b72:	dd49      	ble.n	2c08 <updateSOC()+0xf0>
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    2b74:	497b      	ldr	r1, [pc, #492]	; (2d64 <updateSOC()+0x24c>)
    2b76:	4628      	mov	r0, r5
    2b78:	f009 fb94 	bl	c2a4 <__aeabi_fdiv>
    SOC = 100;
    2b7c:	2364      	movs	r3, #100	; 0x64
    2b7e:	6033      	str	r3, [r6, #0]

  if (SOC < 0) {
    SOC = 0;  //reset SOC this way the can messages remain in range for other devices. Ampseconds will keep counting.
  }

  if (debug != 0) {
    2b80:	f8d8 3000 	ldr.w	r3, [r8]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    2b84:	6038      	str	r0, [r7, #0]
  if (debug != 0) {
    2b86:	2b00      	cmp	r3, #0
    2b88:	d046      	beq.n	2c18 <updateSOC()+0x100>
    if (settings.cursens == Analoguedual) {
    2b8a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    2b8c:	2b01      	cmp	r3, #1
    2b8e:	f000 8082 	beq.w	2c96 <updateSOC()+0x17e>
        SERIALCONSOLE.print("Low Range ");
      } else {
        SERIALCONSOLE.print("High Range");
      }
    }
    if (settings.cursens == Analoguesing) {
    2b92:	2b03      	cmp	r3, #3
    2b94:	f000 808c 	beq.w	2cb0 <updateSOC()+0x198>
      SERIALCONSOLE.print("Analogue Single ");
    }
    if (settings.cursens == Canbus) {
    2b98:	2b02      	cmp	r3, #2
    2b9a:	f000 8091 	beq.w	2cc0 <updateSOC()+0x1a8>
    2b9e:	2102      	movs	r1, #2
    2ba0:	4872      	ldr	r0, [pc, #456]	; (2d6c <updateSOC()+0x254>)
    2ba2:	f008 fbeb 	bl	b37c <usb_serial_write>
      SERIALCONSOLE.print("CANbus ");
    }
    SERIALCONSOLE.print("  ");
    SERIALCONSOLE.print(currentact);
    2ba6:	4b72      	ldr	r3, [pc, #456]	; (2d70 <updateSOC()+0x258>)
    2ba8:	6818      	ldr	r0, [r3, #0]
    2baa:	f009 f8a3 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2bae:	2402      	movs	r4, #2
    2bb0:	4602      	mov	r2, r0
    2bb2:	460b      	mov	r3, r1
    2bb4:	9400      	str	r4, [sp, #0]
    2bb6:	486f      	ldr	r0, [pc, #444]	; (2d74 <updateSOC()+0x25c>)
    2bb8:	f005 ff5a 	bl	8a70 <Print::printFloat(double, unsigned char)>
    2bbc:	4621      	mov	r1, r4
    2bbe:	486e      	ldr	r0, [pc, #440]	; (2d78 <updateSOC()+0x260>)
    2bc0:	f008 fbdc 	bl	b37c <usb_serial_write>
    2bc4:	4621      	mov	r1, r4
    2bc6:	4869      	ldr	r0, [pc, #420]	; (2d6c <updateSOC()+0x254>)
    2bc8:	f008 fbd8 	bl	b37c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    2bcc:	6831      	ldr	r1, [r6, #0]
    2bce:	4869      	ldr	r0, [pc, #420]	; (2d74 <updateSOC()+0x25c>)
    2bd0:	f005 ff22 	bl	8a18 <Print::print(long)>
    2bd4:	2106      	movs	r1, #6
    2bd6:	4869      	ldr	r0, [pc, #420]	; (2d7c <updateSOC()+0x264>)
    2bd8:	f008 fbd0 	bl	b37c <usb_serial_write>
    SERIALCONSOLE.print("mA");
    SERIALCONSOLE.print("  ");
    SERIALCONSOLE.print(SOC);
    SERIALCONSOLE.print("% SOC ");
    SERIALCONSOLE.print(ampsecond * 0.27777777777778, 2);
    2bdc:	6838      	ldr	r0, [r7, #0]
    2bde:	4961      	ldr	r1, [pc, #388]	; (2d64 <updateSOC()+0x24c>)
    2be0:	f009 faac 	bl	c13c <__aeabi_fmul>
    2be4:	f009 f886 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2be8:	9400      	str	r4, [sp, #0]
    2bea:	4602      	mov	r2, r0
    2bec:	460b      	mov	r3, r1
    2bee:	4861      	ldr	r0, [pc, #388]	; (2d74 <updateSOC()+0x25c>)
    2bf0:	f005 ff3e 	bl	8a70 <Print::printFloat(double, unsigned char)>
    2bf4:	2103      	movs	r1, #3
    2bf6:	4862      	ldr	r0, [pc, #392]	; (2d80 <updateSOC()+0x268>)
    2bf8:	f008 fbc0 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    2bfc:	485d      	ldr	r0, [pc, #372]	; (2d74 <updateSOC()+0x25c>)
    SERIALCONSOLE.println("mAh");
  }
}
    2bfe:	b004      	add	sp, #16
    2c00:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2c04:	f005 bf10 	b.w	8a28 <Print::println()>
  if (SOC < 0) {
    2c08:	2800      	cmp	r0, #0
    SOC = 0;  //reset SOC this way the can messages remain in range for other devices. Ampseconds will keep counting.
    2c0a:	bfbc      	itt	lt
    2c0c:	2300      	movlt	r3, #0
    2c0e:	6033      	strlt	r3, [r6, #0]
  if (debug != 0) {
    2c10:	f8d8 3000 	ldr.w	r3, [r8]
    2c14:	2b00      	cmp	r3, #0
    2c16:	d1b8      	bne.n	2b8a <updateSOC()+0x72>
}
    2c18:	b004      	add	sp, #16
    2c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2c1e:	4e59      	ldr	r6, [pc, #356]	; (2d84 <updateSOC()+0x26c>)
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt);
    2c20:	4c4c      	ldr	r4, [pc, #304]	; (2d54 <updateSOC()+0x23c>)
    2c22:	6832      	ldr	r2, [r6, #0]
    2c24:	9202      	str	r2, [sp, #8]
	return ret;
    2c26:	9a02      	ldr	r2, [sp, #8]
    if (millis() > 9000) {
    2c28:	f242 3328 	movw	r3, #9000	; 0x2328
    2c2c:	429a      	cmp	r2, r3
    2c2e:	f200 8088 	bhi.w	2d42 <updateSOC()+0x22a>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2c32:	6833      	ldr	r3, [r6, #0]
    2c34:	9303      	str	r3, [sp, #12]
	return ret;
    2c36:	9a03      	ldr	r2, [sp, #12]
    if (millis() > 10000) {
    2c38:	f242 7310 	movw	r3, #10000	; 0x2710
    2c3c:	429a      	cmp	r2, r3
    2c3e:	d844      	bhi.n	2cca <updateSOC()+0x1b2>
  if (settings.voltsoc == 1) {
    2c40:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    2c44:	4e44      	ldr	r6, [pc, #272]	; (2d58 <updateSOC()+0x240>)
    2c46:	4f45      	ldr	r7, [pc, #276]	; (2d5c <updateSOC()+0x244>)
    2c48:	f8df 8114 	ldr.w	r8, [pc, #276]	; 2d60 <updateSOC()+0x248>
    2c4c:	2b01      	cmp	r3, #1
    2c4e:	f47f af74 	bne.w	2b3a <updateSOC()+0x22>
    SOC = map(uint16_t(bms.getAvgCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    2c52:	484d      	ldr	r0, [pc, #308]	; (2d88 <updateSOC()+0x270>)
    2c54:	f7fe f89a 	bl	d8c <BMSModuleManager::getAvgCellVolt()>
    2c58:	494c      	ldr	r1, [pc, #304]	; (2d8c <updateSOC()+0x274>)
    2c5a:	f009 fa6f 	bl	c13c <__aeabi_fmul>
    2c5e:	f009 fc59 	bl	c514 <__aeabi_f2uiz>
    2c62:	6f65      	ldr	r5, [r4, #116]	; 0x74
    2c64:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    2c66:	6f22      	ldr	r2, [r4, #112]	; 0x70
    2c68:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    2c6a:	9500      	str	r5, [sp, #0]
    2c6c:	b280      	uxth	r0, r0
    2c6e:	f7ff f803 	bl	1c78 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]>
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    2c72:	6da5      	ldr	r5, [r4, #88]	; 0x58
    2c74:	f8d4 a054 	ldr.w	sl, [r4, #84]	; 0x54
    2c78:	fb05 f000 	mul.w	r0, r5, r0
    2c7c:	fb0a f000 	mul.w	r0, sl, r0
    2c80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2c84:	0040      	lsls	r0, r0, #1
    2c86:	f009 fa05 	bl	c094 <__aeabi_i2f>
    2c8a:	4936      	ldr	r1, [pc, #216]	; (2d64 <updateSOC()+0x24c>)
    2c8c:	f009 fb0a 	bl	c2a4 <__aeabi_fdiv>
    2c90:	4681      	mov	r9, r0
    2c92:	6038      	str	r0, [r7, #0]
    2c94:	e756      	b.n	2b44 <updateSOC()+0x2c>
      if (sensor == 1) {
    2c96:	4b3e      	ldr	r3, [pc, #248]	; (2d90 <updateSOC()+0x278>)
    2c98:	681b      	ldr	r3, [r3, #0]
    2c9a:	2b01      	cmp	r3, #1
    2c9c:	bf0c      	ite	eq
    2c9e:	483d      	ldreq	r0, [pc, #244]	; (2d94 <updateSOC()+0x27c>)
    2ca0:	483d      	ldrne	r0, [pc, #244]	; (2d98 <updateSOC()+0x280>)
    2ca2:	210a      	movs	r1, #10
    2ca4:	f008 fb6a 	bl	b37c <usb_serial_write>
    if (settings.cursens == Analoguesing) {
    2ca8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    2caa:	2b03      	cmp	r3, #3
    2cac:	f47f af74 	bne.w	2b98 <updateSOC()+0x80>
    2cb0:	483a      	ldr	r0, [pc, #232]	; (2d9c <updateSOC()+0x284>)
    2cb2:	2110      	movs	r1, #16
    2cb4:	f008 fb62 	bl	b37c <usb_serial_write>
    if (settings.cursens == Canbus) {
    2cb8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    2cba:	2b02      	cmp	r3, #2
    2cbc:	f47f af6f 	bne.w	2b9e <updateSOC()+0x86>
    2cc0:	2107      	movs	r1, #7
    2cc2:	4837      	ldr	r0, [pc, #220]	; (2da0 <updateSOC()+0x288>)
    2cc4:	f008 fb5a 	bl	b37c <usb_serial_write>
    2cc8:	e769      	b.n	2b9e <updateSOC()+0x86>
      SOC = map(uint16_t(bms.getAvgCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    2cca:	482f      	ldr	r0, [pc, #188]	; (2d88 <updateSOC()+0x270>)
      if (debug != 0) {
    2ccc:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2d60 <updateSOC()+0x248>
      SOC = map(uint16_t(bms.getAvgCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    2cd0:	f7fe f85c 	bl	d8c <BMSModuleManager::getAvgCellVolt()>
    2cd4:	492d      	ldr	r1, [pc, #180]	; (2d8c <updateSOC()+0x274>)
    2cd6:	6f26      	ldr	r6, [r4, #112]	; 0x70
    2cd8:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
    2cda:	f009 fa2f 	bl	c13c <__aeabi_fmul>
    2cde:	f009 fc19 	bl	c514 <__aeabi_f2uiz>
    2ce2:	4632      	mov	r2, r6
    2ce4:	6f66      	ldr	r6, [r4, #116]	; 0x74
    2ce6:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    2ce8:	9600      	str	r6, [sp, #0]
    2cea:	463b      	mov	r3, r7
    2cec:	b280      	uxth	r0, r0
    2cee:	f7fe ffc3 	bl	1c78 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]>
    2cf2:	4e19      	ldr	r6, [pc, #100]	; (2d58 <updateSOC()+0x240>)
      ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    2cf4:	6da3      	ldr	r3, [r4, #88]	; 0x58
      SOC = map(uint16_t(bms.getAvgCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    2cf6:	6030      	str	r0, [r6, #0]
      ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    2cf8:	fb03 f000 	mul.w	r0, r3, r0
    2cfc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2cfe:	4f17      	ldr	r7, [pc, #92]	; (2d5c <updateSOC()+0x244>)
    2d00:	fb03 f000 	mul.w	r0, r3, r0
    2d04:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2d08:	0040      	lsls	r0, r0, #1
    2d0a:	f009 f9c3 	bl	c094 <__aeabi_i2f>
    2d0e:	4915      	ldr	r1, [pc, #84]	; (2d64 <updateSOC()+0x24c>)
    2d10:	f009 fac8 	bl	c2a4 <__aeabi_fdiv>
      if (debug != 0) {
    2d14:	f8d8 3000 	ldr.w	r3, [r8]
      ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    2d18:	6038      	str	r0, [r7, #0]
      SOCset = 1;
    2d1a:	2201      	movs	r2, #1
    2d1c:	602a      	str	r2, [r5, #0]
      if (debug != 0) {
    2d1e:	2b00      	cmp	r3, #0
    2d20:	f43f af06 	beq.w	2b30 <updateSOC()+0x18>
    2d24:	2102      	movs	r1, #2
    2d26:	4811      	ldr	r0, [pc, #68]	; (2d6c <updateSOC()+0x254>)
    2d28:	f008 fb28 	bl	b37c <usb_serial_write>
    2d2c:	4811      	ldr	r0, [pc, #68]	; (2d74 <updateSOC()+0x25c>)
    2d2e:	f005 fe7b 	bl	8a28 <Print::println()>
    2d32:	2159      	movs	r1, #89	; 0x59
    2d34:	481b      	ldr	r0, [pc, #108]	; (2da4 <updateSOC()+0x28c>)
    2d36:	f008 fb21 	bl	b37c <usb_serial_write>
    2d3a:	480e      	ldr	r0, [pc, #56]	; (2d74 <updateSOC()+0x25c>)
    2d3c:	f005 fe74 	bl	8a28 <Print::println()>
    2d40:	e6f6      	b.n	2b30 <updateSOC()+0x18>
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt);
    2d42:	6c62      	ldr	r2, [r4, #68]	; 0x44
    2d44:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    2d48:	480f      	ldr	r0, [pc, #60]	; (2d88 <updateSOC()+0x270>)
    2d4a:	f7fd ff91 	bl	c70 <BMSModuleManager::setSensors(int, float)>
    2d4e:	e770      	b.n	2c32 <updateSOC()+0x11a>
    2d50:	1fff8fc4 	.word	0x1fff8fc4
    2d54:	1fffb20c 	.word	0x1fffb20c
    2d58:	1fff8724 	.word	0x1fff8724
    2d5c:	1fff8fd8 	.word	0x1fff8fd8
    2d60:	1fff8744 	.word	0x1fff8744
    2d64:	3e8e38e4 	.word	0x3e8e38e4
    2d68:	42c80000 	.word	0x42c80000
    2d6c:	00012ea4 	.word	0x00012ea4
    2d70:	1fffb0fc 	.word	0x1fffb0fc
    2d74:	1fff880c 	.word	0x1fff880c
    2d78:	000133e0 	.word	0x000133e0
    2d7c:	00013480 	.word	0x00013480
    2d80:	00013488 	.word	0x00013488
    2d84:	1fffb4e0 	.word	0x1fffb4e0
    2d88:	1fff8fe0 	.word	0x1fff8fe0
    2d8c:	447a0000 	.word	0x447a0000
    2d90:	1fff8768 	.word	0x1fff8768
    2d94:	0001344c 	.word	0x0001344c
    2d98:	00013458 	.word	0x00013458
    2d9c:	00013464 	.word	0x00013464
    2da0:	00013478 	.word	0x00013478
    2da4:	000133f0 	.word	0x000133f0

00002da8 <Prechargecon()>:
    SOC = 100;
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
  }
}

void Prechargecon() {
    2da8:	b530      	push	{r4, r5, lr}
  if (digitalRead(IN1) == HIGH || digitalRead(IN3) == HIGH)  //detect Key ON or AC present
    2daa:	2011      	movs	r0, #17
void Prechargecon() {
    2dac:	b083      	sub	sp, #12
  if (digitalRead(IN1) == HIGH || digitalRead(IN3) == HIGH)  //detect Key ON or AC present
    2dae:	f006 fc99 	bl	96e4 <digitalRead>
    2db2:	2801      	cmp	r0, #1
    2db4:	d004      	beq.n	2dc0 <Prechargecon()+0x18>
    2db6:	2012      	movs	r0, #18
    2db8:	f006 fc94 	bl	96e4 <digitalRead>
    2dbc:	2801      	cmp	r0, #1
    2dbe:	d122      	bne.n	2e06 <Prechargecon()+0x5e>
  {
    digitalWrite(OUT4, HIGH);  //Negative Contactor Close
    2dc0:	2101      	movs	r1, #1
    2dc2:	2015      	movs	r0, #21
    2dc4:	f006 fc68 	bl	9698 <digitalWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2dc8:	4b2a      	ldr	r3, [pc, #168]	; (2e74 <Prechargecon()+0xcc>)
    contctrl = 2;
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    2dca:	4a2b      	ldr	r2, [pc, #172]	; (2e78 <Prechargecon()+0xd0>)
    2dcc:	4c2b      	ldr	r4, [pc, #172]	; (2e7c <Prechargecon()+0xd4>)
    2dce:	681b      	ldr	r3, [r3, #0]
    contctrl = 2;
    2dd0:	4d2b      	ldr	r5, [pc, #172]	; (2e80 <Prechargecon()+0xd8>)
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    2dd2:	6811      	ldr	r1, [r2, #0]
    2dd4:	9301      	str	r3, [sp, #4]
    contctrl = 2;
    2dd6:	2202      	movs	r2, #2
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    2dd8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    contctrl = 2;
    2ddc:	602a      	str	r2, [r5, #0]
	return ret;
    2dde:	9a01      	ldr	r2, [sp, #4]
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    2de0:	440b      	add	r3, r1
    2de2:	4293      	cmp	r3, r2
    2de4:	d808      	bhi.n	2df8 <Prechargecon()+0x50>
    2de6:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    2dea:	f009 f953 	bl	c094 <__aeabi_i2f>
    2dee:	4b25      	ldr	r3, [pc, #148]	; (2e84 <Prechargecon()+0xdc>)
    2df0:	6819      	ldr	r1, [r3, #0]
    2df2:	f009 fb41 	bl	c478 <__aeabi_fcmplt>
    2df6:	b1d0      	cbz	r0, 2e2e <Prechargecon()+0x86>
      digitalWrite(OUT2, HIGH);  //precharge
    2df8:	2101      	movs	r1, #1
        }
        if (digitalRead(IN1) == HIGH) {
          bmsstatus = Drive;
        }
      }
      digitalWrite(OUT2, LOW);
    2dfa:	200c      	movs	r0, #12
    digitalWrite(OUT2, LOW);
    digitalWrite(OUT4, LOW);
    bmsstatus = Ready;
    contctrl = 0;
  }
}
    2dfc:	b003      	add	sp, #12
    2dfe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      digitalWrite(OUT2, LOW);
    2e02:	f006 bc49 	b.w	9698 <digitalWrite>
    digitalWrite(OUT1, LOW);
    2e06:	2100      	movs	r1, #0
    2e08:	200b      	movs	r0, #11
    2e0a:	f006 fc45 	bl	9698 <digitalWrite>
    digitalWrite(OUT2, LOW);
    2e0e:	2100      	movs	r1, #0
    2e10:	200c      	movs	r0, #12
    2e12:	f006 fc41 	bl	9698 <digitalWrite>
    digitalWrite(OUT4, LOW);
    2e16:	2100      	movs	r1, #0
    2e18:	2015      	movs	r0, #21
    2e1a:	f006 fc3d 	bl	9698 <digitalWrite>
    bmsstatus = Ready;
    2e1e:	491a      	ldr	r1, [pc, #104]	; (2e88 <Prechargecon()+0xe0>)
    contctrl = 0;
    2e20:	4b17      	ldr	r3, [pc, #92]	; (2e80 <Prechargecon()+0xd8>)
    bmsstatus = Ready;
    2e22:	2001      	movs	r0, #1
    contctrl = 0;
    2e24:	2200      	movs	r2, #0
    bmsstatus = Ready;
    2e26:	7008      	strb	r0, [r1, #0]
    contctrl = 0;
    2e28:	601a      	str	r2, [r3, #0]
}
    2e2a:	b003      	add	sp, #12
    2e2c:	bd30      	pop	{r4, r5, pc}
      digitalWrite(OUT1, HIGH);  //Positive Contactor Close
    2e2e:	2101      	movs	r1, #1
    2e30:	200b      	movs	r0, #11
    2e32:	f006 fc31 	bl	9698 <digitalWrite>
      if (settings.ChargerDirect == 1) {
    2e36:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
      contctrl = 3;
    2e3a:	2403      	movs	r4, #3
    2e3c:	602c      	str	r4, [r5, #0]
      if (settings.ChargerDirect == 1) {
    2e3e:	b14b      	cbz	r3, 2e54 <Prechargecon()+0xac>
        bmsstatus = Drive;
    2e40:	4b11      	ldr	r3, [pc, #68]	; (2e88 <Prechargecon()+0xe0>)
    2e42:	2202      	movs	r2, #2
    2e44:	701a      	strb	r2, [r3, #0]
      digitalWrite(OUT2, LOW);
    2e46:	2100      	movs	r1, #0
    2e48:	200c      	movs	r0, #12
}
    2e4a:	b003      	add	sp, #12
    2e4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      digitalWrite(OUT2, LOW);
    2e50:	f006 bc22 	b.w	9698 <digitalWrite>
        if (digitalRead(IN3) == HIGH) {
    2e54:	2012      	movs	r0, #18
    2e56:	f006 fc45 	bl	96e4 <digitalRead>
    2e5a:	2801      	cmp	r0, #1
          bmsstatus = Charge;
    2e5c:	bf08      	it	eq
    2e5e:	4b0a      	ldreq	r3, [pc, #40]	; (2e88 <Prechargecon()+0xe0>)
        if (digitalRead(IN1) == HIGH) {
    2e60:	f04f 0011 	mov.w	r0, #17
          bmsstatus = Charge;
    2e64:	bf08      	it	eq
    2e66:	701c      	strbeq	r4, [r3, #0]
        if (digitalRead(IN1) == HIGH) {
    2e68:	f006 fc3c 	bl	96e4 <digitalRead>
    2e6c:	2801      	cmp	r0, #1
    2e6e:	d1ea      	bne.n	2e46 <Prechargecon()+0x9e>
    2e70:	e7e6      	b.n	2e40 <Prechargecon()+0x98>
    2e72:	bf00      	nop
    2e74:	1fffb4e0 	.word	0x1fffb4e0
    2e78:	1fff8fb8 	.word	0x1fff8fb8
    2e7c:	1fffb20c 	.word	0x1fffb20c
    2e80:	1fffb0e8 	.word	0x1fffb0e8
    2e84:	1fffb0fc 	.word	0x1fffb0fc
    2e88:	1fffb008 	.word	0x1fffb008

00002e8c <contcon()>:

void contcon() {
    2e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (contctrl != contstat)  //check for contactor request change
    2e8e:	4e75      	ldr	r6, [pc, #468]	; (3064 <contcon()+0x1d8>)
    2e90:	4c75      	ldr	r4, [pc, #468]	; (3068 <contcon()+0x1dc>)
    2e92:	6833      	ldr	r3, [r6, #0]
    2e94:	6825      	ldr	r5, [r4, #0]
    2e96:	42ab      	cmp	r3, r5
void contcon() {
    2e98:	b087      	sub	sp, #28
  if (contctrl != contstat)  //check for contactor request change
    2e9a:	d02c      	beq.n	2ef6 <contcon()+0x6a>
  {
    if ((contctrl & 1) == 0) {
    2e9c:	f013 0101 	ands.w	r1, r3, #1
    2ea0:	d04a      	beq.n	2f38 <contcon()+0xac>
      analogWrite(OUT5, 0);
      contstat = contstat & 254;
    }
    if ((contctrl & 2) == 0) {
    2ea2:	f013 0102 	ands.w	r1, r3, #2
    2ea6:	d05e      	beq.n	2f66 <contcon()+0xda>
      analogWrite(OUT6, 0);
      contstat = contstat & 253;
    }
    if ((contctrl & 4) == 0) {
    2ea8:	f013 0104 	ands.w	r1, r3, #4
    2eac:	d050      	beq.n	2f50 <contcon()+0xc4>
      analogWrite(OUT7, 0);
      contstat = contstat & 251;
    }


    if ((contctrl & 1) == 1) {
    2eae:	07da      	lsls	r2, r3, #31
    2eb0:	d50f      	bpl.n	2ed2 <contcon()+0x46>
      if ((contstat & 1) != 1) {
    2eb2:	6822      	ldr	r2, [r4, #0]
    2eb4:	07d7      	lsls	r7, r2, #31
    2eb6:	d40c      	bmi.n	2ed2 <contcon()+0x46>
        if (conttimer1 == 0) {
    2eb8:	4d6c      	ldr	r5, [pc, #432]	; (306c <contcon()+0x1e0>)
    2eba:	682a      	ldr	r2, [r5, #0]
    2ebc:	2a00      	cmp	r2, #0
    2ebe:	f000 80ae 	beq.w	301e <contcon()+0x192>
    2ec2:	4b6b      	ldr	r3, [pc, #428]	; (3070 <contcon()+0x1e4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2ec4:	681b      	ldr	r3, [r3, #0]
    2ec6:	9301      	str	r3, [sp, #4]
	return ret;
    2ec8:	9b01      	ldr	r3, [sp, #4]
          analogWrite(OUT5, 255);
          conttimer1 = millis() + pulltime;
        }
        if (conttimer1 < millis()) {
    2eca:	4293      	cmp	r3, r2
    2ecc:	f200 809a 	bhi.w	3004 <contcon()+0x178>
          conttimer1 = 0;
        }
      }
    }

    if ((contctrl & 2) == 2) {
    2ed0:	6833      	ldr	r3, [r6, #0]
    2ed2:	079d      	lsls	r5, r3, #30
    2ed4:	d412      	bmi.n	2efc <contcon()+0x70>
          contstat = contstat | 2;
          conttimer2 = 0;
        }
      }
    }
    if ((contctrl & 4) == 4) {
    2ed6:	0759      	lsls	r1, r3, #29
    2ed8:	d520      	bpl.n	2f1c <contcon()+0x90>
      if ((contstat & 4) != 4) {
    2eda:	6822      	ldr	r2, [r4, #0]
    2edc:	0752      	lsls	r2, r2, #29
    2ede:	d40b      	bmi.n	2ef8 <contcon()+0x6c>
        if (conttimer3 == 0) {
    2ee0:	4f64      	ldr	r7, [pc, #400]	; (3074 <contcon()+0x1e8>)
    2ee2:	683a      	ldr	r2, [r7, #0]
    2ee4:	2a00      	cmp	r2, #0
    2ee6:	d05e      	beq.n	2fa6 <contcon()+0x11a>
    2ee8:	4b61      	ldr	r3, [pc, #388]	; (3070 <contcon()+0x1e4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2eea:	681b      	ldr	r3, [r3, #0]
    2eec:	9305      	str	r3, [sp, #20]
	return ret;
    2eee:	9b05      	ldr	r3, [sp, #20]
            Serial.println("pull in OUT7");
          }
          analogWrite(OUT7, 255);
          conttimer3 = millis() + pulltime;
        }
        if (conttimer3 < millis()) {
    2ef0:	4293      	cmp	r3, r2
    2ef2:	d876      	bhi.n	2fe2 <contcon()+0x156>
       SERIALCONSOLE.print("  ");
       SERIALCONSOLE.print(contstat);
       SERIALCONSOLE.println("  ");
    */
  }
  if (contctrl == 0) {
    2ef4:	6835      	ldr	r5, [r6, #0]
    2ef6:	b1a5      	cbz	r5, 2f22 <contcon()+0x96>
    analogWrite(OUT5, 0);
    analogWrite(OUT6, 0);
  }
}
    2ef8:	b007      	add	sp, #28
    2efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((contstat & 2) != 2) {
    2efc:	6822      	ldr	r2, [r4, #0]
    2efe:	0790      	lsls	r0, r2, #30
    2f00:	d43d      	bmi.n	2f7e <contcon()+0xf2>
        if (conttimer2 == 0) {
    2f02:	4d5d      	ldr	r5, [pc, #372]	; (3078 <contcon()+0x1ec>)
    2f04:	682a      	ldr	r2, [r5, #0]
    2f06:	2a00      	cmp	r2, #0
    2f08:	d03c      	beq.n	2f84 <contcon()+0xf8>
    2f0a:	4b59      	ldr	r3, [pc, #356]	; (3070 <contcon()+0x1e4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2f0c:	681b      	ldr	r3, [r3, #0]
    2f0e:	9303      	str	r3, [sp, #12]
	return ret;
    2f10:	9b03      	ldr	r3, [sp, #12]
        if (conttimer2 < millis()) {
    2f12:	429a      	cmp	r2, r3
    2f14:	d358      	bcc.n	2fc8 <contcon()+0x13c>
    if ((contctrl & 4) == 4) {
    2f16:	6833      	ldr	r3, [r6, #0]
    2f18:	0759      	lsls	r1, r3, #29
    2f1a:	d4de      	bmi.n	2eda <contcon()+0x4e>
    2f1c:	461d      	mov	r5, r3
  if (contctrl == 0) {
    2f1e:	2d00      	cmp	r5, #0
    2f20:	d1ea      	bne.n	2ef8 <contcon()+0x6c>
    analogWrite(OUT5, 0);
    2f22:	4629      	mov	r1, r5
    2f24:	2016      	movs	r0, #22
    2f26:	f006 fa3b 	bl	93a0 <analogWrite>
    analogWrite(OUT6, 0);
    2f2a:	4629      	mov	r1, r5
    2f2c:	2017      	movs	r0, #23
}
    2f2e:	b007      	add	sp, #28
    2f30:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    analogWrite(OUT6, 0);
    2f34:	f006 ba34 	b.w	93a0 <analogWrite>
      analogWrite(OUT5, 0);
    2f38:	2016      	movs	r0, #22
    2f3a:	f006 fa31 	bl	93a0 <analogWrite>
      contstat = contstat & 254;
    2f3e:	6822      	ldr	r2, [r4, #0]
    if ((contctrl & 2) == 0) {
    2f40:	6833      	ldr	r3, [r6, #0]
      contstat = contstat & 254;
    2f42:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if ((contctrl & 2) == 0) {
    2f46:	f013 0102 	ands.w	r1, r3, #2
      contstat = contstat & 254;
    2f4a:	6022      	str	r2, [r4, #0]
    if ((contctrl & 2) == 0) {
    2f4c:	d1ac      	bne.n	2ea8 <contcon()+0x1c>
    2f4e:	e00a      	b.n	2f66 <contcon()+0xda>
      analogWrite(OUT7, 0);
    2f50:	2005      	movs	r0, #5
    2f52:	f006 fa25 	bl	93a0 <analogWrite>
      contstat = contstat & 251;
    2f56:	6822      	ldr	r2, [r4, #0]
    if ((contctrl & 1) == 1) {
    2f58:	6833      	ldr	r3, [r6, #0]
      contstat = contstat & 251;
    2f5a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    2f5e:	6022      	str	r2, [r4, #0]
    if ((contctrl & 1) == 1) {
    2f60:	07da      	lsls	r2, r3, #31
    2f62:	d5b6      	bpl.n	2ed2 <contcon()+0x46>
    2f64:	e7a5      	b.n	2eb2 <contcon()+0x26>
      analogWrite(OUT6, 0);
    2f66:	2017      	movs	r0, #23
    2f68:	f006 fa1a 	bl	93a0 <analogWrite>
      contstat = contstat & 253;
    2f6c:	6822      	ldr	r2, [r4, #0]
    if ((contctrl & 4) == 0) {
    2f6e:	6833      	ldr	r3, [r6, #0]
      contstat = contstat & 253;
    2f70:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    if ((contctrl & 4) == 0) {
    2f74:	f013 0104 	ands.w	r1, r3, #4
      contstat = contstat & 253;
    2f78:	6022      	str	r2, [r4, #0]
    if ((contctrl & 4) == 0) {
    2f7a:	d198      	bne.n	2eae <contcon()+0x22>
    2f7c:	e7e8      	b.n	2f50 <contcon()+0xc4>
    if ((contctrl & 4) == 4) {
    2f7e:	075b      	lsls	r3, r3, #29
    2f80:	d4ac      	bmi.n	2edc <contcon()+0x50>
    2f82:	e7b9      	b.n	2ef8 <contcon()+0x6c>
          if (debug != 0) {
    2f84:	4b3d      	ldr	r3, [pc, #244]	; (307c <contcon()+0x1f0>)
    2f86:	681b      	ldr	r3, [r3, #0]
    2f88:	2b00      	cmp	r3, #0
    2f8a:	d155      	bne.n	3038 <contcon()+0x1ac>
          analogWrite(OUT6, 255);
    2f8c:	21ff      	movs	r1, #255	; 0xff
    2f8e:	2017      	movs	r0, #23
    2f90:	f006 fa06 	bl	93a0 <analogWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2f94:	4b36      	ldr	r3, [pc, #216]	; (3070 <contcon()+0x1e4>)
          conttimer2 = millis() + pulltime;
    2f96:	493a      	ldr	r1, [pc, #232]	; (3080 <contcon()+0x1f4>)
    2f98:	681a      	ldr	r2, [r3, #0]
    2f9a:	9202      	str	r2, [sp, #8]
	return ret;
    2f9c:	9a02      	ldr	r2, [sp, #8]
    2f9e:	6809      	ldr	r1, [r1, #0]
    2fa0:	440a      	add	r2, r1
    2fa2:	602a      	str	r2, [r5, #0]
    2fa4:	e7b2      	b.n	2f0c <contcon()+0x80>
          if (debug != 0) {
    2fa6:	4b35      	ldr	r3, [pc, #212]	; (307c <contcon()+0x1f0>)
    2fa8:	681b      	ldr	r3, [r3, #0]
    2faa:	2b00      	cmp	r3, #0
    2fac:	d14f      	bne.n	304e <contcon()+0x1c2>
          analogWrite(OUT7, 255);
    2fae:	21ff      	movs	r1, #255	; 0xff
    2fb0:	2005      	movs	r0, #5
    2fb2:	f006 f9f5 	bl	93a0 <analogWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2fb6:	4b2e      	ldr	r3, [pc, #184]	; (3070 <contcon()+0x1e4>)
          conttimer3 = millis() + pulltime;
    2fb8:	4931      	ldr	r1, [pc, #196]	; (3080 <contcon()+0x1f4>)
    2fba:	681a      	ldr	r2, [r3, #0]
    2fbc:	9204      	str	r2, [sp, #16]
	return ret;
    2fbe:	9a04      	ldr	r2, [sp, #16]
    2fc0:	6809      	ldr	r1, [r1, #0]
    2fc2:	440a      	add	r2, r1
    2fc4:	603a      	str	r2, [r7, #0]
    2fc6:	e790      	b.n	2eea <contcon()+0x5e>
          analogWrite(OUT6, settings.conthold);
    2fc8:	4b2e      	ldr	r3, [pc, #184]	; (3084 <contcon()+0x1f8>)
    2fca:	2017      	movs	r0, #23
    2fcc:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    2fd0:	f006 f9e6 	bl	93a0 <analogWrite>
          contstat = contstat | 2;
    2fd4:	6823      	ldr	r3, [r4, #0]
          conttimer2 = 0;
    2fd6:	2200      	movs	r2, #0
          contstat = contstat | 2;
    2fd8:	f043 0302 	orr.w	r3, r3, #2
    2fdc:	6023      	str	r3, [r4, #0]
          conttimer2 = 0;
    2fde:	602a      	str	r2, [r5, #0]
    2fe0:	e799      	b.n	2f16 <contcon()+0x8a>
          analogWrite(OUT7, settings.conthold);
    2fe2:	4b28      	ldr	r3, [pc, #160]	; (3084 <contcon()+0x1f8>)
    2fe4:	2005      	movs	r0, #5
    2fe6:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    2fea:	f006 f9d9 	bl	93a0 <analogWrite>
          contstat = contstat | 4;
    2fee:	6823      	ldr	r3, [r4, #0]
  if (contctrl == 0) {
    2ff0:	6835      	ldr	r5, [r6, #0]
          conttimer3 = 0;
    2ff2:	2200      	movs	r2, #0
          contstat = contstat | 4;
    2ff4:	f043 0304 	orr.w	r3, r3, #4
    2ff8:	6023      	str	r3, [r4, #0]
          conttimer3 = 0;
    2ffa:	603a      	str	r2, [r7, #0]
  if (contctrl == 0) {
    2ffc:	2d00      	cmp	r5, #0
    2ffe:	f47f af7b 	bne.w	2ef8 <contcon()+0x6c>
    3002:	e78e      	b.n	2f22 <contcon()+0x96>
          analogWrite(OUT5, settings.conthold);
    3004:	4b1f      	ldr	r3, [pc, #124]	; (3084 <contcon()+0x1f8>)
    3006:	2016      	movs	r0, #22
    3008:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    300c:	f006 f9c8 	bl	93a0 <analogWrite>
          contstat = contstat | 1;
    3010:	6823      	ldr	r3, [r4, #0]
          conttimer1 = 0;
    3012:	2200      	movs	r2, #0
          contstat = contstat | 1;
    3014:	f043 0301 	orr.w	r3, r3, #1
    3018:	6023      	str	r3, [r4, #0]
          conttimer1 = 0;
    301a:	602a      	str	r2, [r5, #0]
    301c:	e758      	b.n	2ed0 <contcon()+0x44>
          analogWrite(OUT5, 255);
    301e:	21ff      	movs	r1, #255	; 0xff
    3020:	2016      	movs	r0, #22
    3022:	f006 f9bd 	bl	93a0 <analogWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3026:	4b12      	ldr	r3, [pc, #72]	; (3070 <contcon()+0x1e4>)
          conttimer1 = millis() + pulltime;
    3028:	4915      	ldr	r1, [pc, #84]	; (3080 <contcon()+0x1f4>)
    302a:	681a      	ldr	r2, [r3, #0]
    302c:	9200      	str	r2, [sp, #0]
	return ret;
    302e:	9a00      	ldr	r2, [sp, #0]
    3030:	6809      	ldr	r1, [r1, #0]
    3032:	440a      	add	r2, r1
    3034:	602a      	str	r2, [r5, #0]
    3036:	e745      	b.n	2ec4 <contcon()+0x38>
            Serial.println();
    3038:	4813      	ldr	r0, [pc, #76]	; (3088 <contcon()+0x1fc>)
    303a:	f005 fcf5 	bl	8a28 <Print::println()>
    303e:	210c      	movs	r1, #12
    3040:	4812      	ldr	r0, [pc, #72]	; (308c <contcon()+0x200>)
    3042:	f008 f99b 	bl	b37c <usb_serial_write>
    3046:	4810      	ldr	r0, [pc, #64]	; (3088 <contcon()+0x1fc>)
    3048:	f005 fcee 	bl	8a28 <Print::println()>
    304c:	e79e      	b.n	2f8c <contcon()+0x100>
            Serial.println();
    304e:	480e      	ldr	r0, [pc, #56]	; (3088 <contcon()+0x1fc>)
    3050:	f005 fcea 	bl	8a28 <Print::println()>
    3054:	210c      	movs	r1, #12
    3056:	480e      	ldr	r0, [pc, #56]	; (3090 <contcon()+0x204>)
    3058:	f008 f990 	bl	b37c <usb_serial_write>
    305c:	480a      	ldr	r0, [pc, #40]	; (3088 <contcon()+0x1fc>)
    305e:	f005 fce3 	bl	8a28 <Print::println()>
    3062:	e7a4      	b.n	2fae <contcon()+0x122>
    3064:	1fffb0e8 	.word	0x1fffb0e8
    3068:	1fffb0ec 	.word	0x1fffb0ec
    306c:	1fffb0f0 	.word	0x1fffb0f0
    3070:	1fffb4e0 	.word	0x1fffb4e0
    3074:	1fffb0f8 	.word	0x1fffb0f8
    3078:	1fffb0f4 	.word	0x1fffb0f4
    307c:	1fff8744 	.word	0x1fff8744
    3080:	1fff8760 	.word	0x1fff8760
    3084:	1fffb20c 	.word	0x1fffb20c
    3088:	1fff880c 	.word	0x1fff880c
    308c:	0001348c 	.word	0x0001348c
    3090:	0001349c 	.word	0x0001349c

00003094 <calcur()>:

void calcur() {
    3094:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  adc->adc0->startContinuous(ACUR1);
    3098:	4e53      	ldr	r6, [pc, #332]	; (31e8 <calcur()+0x154>)
  sensor = 1;
    309a:	f8df a150 	ldr.w	sl, [pc, #336]	; 31ec <calcur()+0x158>
  adc->adc0->startContinuous(ACUR1);
    309e:	6833      	ldr	r3, [r6, #0]
  x = 0;
    30a0:	f8df 914c 	ldr.w	r9, [pc, #332]	; 31f0 <calcur()+0x15c>
  adc->adc0->startContinuous(ACUR1);
    30a4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    30a8:	4d52      	ldr	r5, [pc, #328]	; (31f4 <calcur()+0x160>)
    30aa:	210f      	movs	r1, #15
    30ac:	f004 ffe8 	bl	8080 <ADC_Module::startContinuous(unsigned char)>
  sensor = 1;
    30b0:	2301      	movs	r3, #1
    30b2:	f8ca 3000 	str.w	r3, [sl]
    30b6:	4850      	ldr	r0, [pc, #320]	; (31f8 <calcur()+0x164>)
  x = 0;
    30b8:	2300      	movs	r3, #0
    30ba:	2122      	movs	r1, #34	; 0x22
    30bc:	f8c9 3000 	str.w	r3, [r9]
    30c0:	f008 f95c 	bl	b37c <usb_serial_write>
  SERIALCONSOLE.print(" Calibrating Current Offset ::::: ");
  while (x < 20) {
    30c4:	f8d9 3000 	ldr.w	r3, [r9]
    30c8:	2b13      	cmp	r3, #19
    30ca:	dc21      	bgt.n	3110 <calcur()+0x7c>
    30cc:	4f4b      	ldr	r7, [pc, #300]	; (31fc <calcur()+0x168>)
    settings.offset1 = settings.offset1 + ((uint16_t)adc->adc0->analogReadContinuous() * 3300 / adc->adc0->getMaxValue());
    30ce:	f640 48e4 	movw	r8, #3300	; 0xce4
    30d2:	6833      	ldr	r3, [r6, #0]
    30d4:	f8b5 b084 	ldrh.w	fp, [r5, #132]	; 0x84
    30d8:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    30dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    30de:	691c      	ldr	r4, [r3, #16]
    30e0:	f004 fd16 	bl	7b10 <ADC_Module::getMaxValue()>
    30e4:	b2a4      	uxth	r4, r4
    30e6:	2101      	movs	r1, #1
    30e8:	fb08 f404 	mul.w	r4, r8, r4
    30ec:	fbb4 f4f0 	udiv	r4, r4, r0
    30f0:	4638      	mov	r0, r7
    30f2:	44a3      	add	fp, r4
    30f4:	f8a5 b084 	strh.w	fp, [r5, #132]	; 0x84
    30f8:	f008 f940 	bl	b37c <usb_serial_write>
    SERIALCONSOLE.print(".");
    delay(100);
    30fc:	2064      	movs	r0, #100	; 0x64
    30fe:	f006 fb5b 	bl	97b8 <delay>
    x++;
    3102:	f8d9 3000 	ldr.w	r3, [r9]
    3106:	3301      	adds	r3, #1
  while (x < 20) {
    3108:	2b13      	cmp	r3, #19
    x++;
    310a:	f8c9 3000 	str.w	r3, [r9]
  while (x < 20) {
    310e:	dde0      	ble.n	30d2 <calcur()+0x3e>
  }
  settings.offset1 = settings.offset1 / 21;
    3110:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
    3114:	493a      	ldr	r1, [pc, #232]	; (3200 <calcur()+0x16c>)
	size_t print(int n)				{ return print((long)n); }
    3116:	483b      	ldr	r0, [pc, #236]	; (3204 <calcur()+0x170>)
    3118:	fba1 2103 	umull	r2, r1, r1, r3
    311c:	1a5b      	subs	r3, r3, r1
    311e:	eb01 0153 	add.w	r1, r1, r3, lsr #1
    3122:	f3c1 110f 	ubfx	r1, r1, #4, #16
    3126:	f8a5 1084 	strh.w	r1, [r5, #132]	; 0x84
    312a:	f005 fc75 	bl	8a18 <Print::print(long)>
    312e:	211d      	movs	r1, #29
    3130:	4835      	ldr	r0, [pc, #212]	; (3208 <calcur()+0x174>)
    3132:	f008 f923 	bl	b37c <usb_serial_write>
    3136:	2102      	movs	r1, #2
    3138:	4834      	ldr	r0, [pc, #208]	; (320c <calcur()+0x178>)
    313a:	f008 f91f 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    313e:	4831      	ldr	r0, [pc, #196]	; (3204 <calcur()+0x170>)
    3140:	f005 fc72 	bl	8a28 <Print::println()>
  SERIALCONSOLE.print(settings.offset1);
  SERIALCONSOLE.print(" current offset 1 calibrated ");
  SERIALCONSOLE.println("  ");
  x = 0;
    3144:	2200      	movs	r2, #0
  adc->startContinuous(ACUR2, ADC_0);
    3146:	210e      	movs	r1, #14
    3148:	6830      	ldr	r0, [r6, #0]
  x = 0;
    314a:	f8c9 2000 	str.w	r2, [r9]
  adc->startContinuous(ACUR2, ADC_0);
    314e:	f004 fc89 	bl	7a64 <ADC::startContinuous(unsigned char, signed char)>
  sensor = 2;
    3152:	2302      	movs	r3, #2
    3154:	4828      	ldr	r0, [pc, #160]	; (31f8 <calcur()+0x164>)
    3156:	f8ca 3000 	str.w	r3, [sl]
    315a:	2122      	movs	r1, #34	; 0x22
    315c:	f008 f90e 	bl	b37c <usb_serial_write>
  SERIALCONSOLE.print(" Calibrating Current Offset ::::: ");
  while (x < 20) {
    3160:	f8d9 3000 	ldr.w	r3, [r9]
    3164:	2b13      	cmp	r3, #19
    3166:	dc22      	bgt.n	31ae <calcur()+0x11a>
    3168:	f8df 8090 	ldr.w	r8, [pc, #144]	; 31fc <calcur()+0x168>
    settings.offset2 = settings.offset2 + ((uint16_t)adc->adc0->analogReadContinuous() * 3300 / adc->adc0->getMaxValue());
    316c:	f640 47e4 	movw	r7, #3300	; 0xce4
    3170:	6833      	ldr	r3, [r6, #0]
    3172:	f8b5 a086 	ldrh.w	sl, [r5, #134]	; 0x86
    3176:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    317a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    317c:	691c      	ldr	r4, [r3, #16]
    317e:	f004 fcc7 	bl	7b10 <ADC_Module::getMaxValue()>
    3182:	b2a4      	uxth	r4, r4
    3184:	2101      	movs	r1, #1
    3186:	fb07 f404 	mul.w	r4, r7, r4
    318a:	fbb4 f4f0 	udiv	r4, r4, r0
    318e:	4640      	mov	r0, r8
    3190:	44a2      	add	sl, r4
    3192:	f8a5 a086 	strh.w	sl, [r5, #134]	; 0x86
    3196:	f008 f8f1 	bl	b37c <usb_serial_write>
    SERIALCONSOLE.print(".");
    delay(100);
    319a:	2064      	movs	r0, #100	; 0x64
    319c:	f006 fb0c 	bl	97b8 <delay>
    x++;
    31a0:	f8d9 3000 	ldr.w	r3, [r9]
    31a4:	3301      	adds	r3, #1
  while (x < 20) {
    31a6:	2b13      	cmp	r3, #19
    x++;
    31a8:	f8c9 3000 	str.w	r3, [r9]
  while (x < 20) {
    31ac:	dde0      	ble.n	3170 <calcur()+0xdc>
  }
  settings.offset2 = settings.offset2 / 21;
    31ae:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
    31b2:	4913      	ldr	r1, [pc, #76]	; (3200 <calcur()+0x16c>)
	size_t print(int n)				{ return print((long)n); }
    31b4:	4813      	ldr	r0, [pc, #76]	; (3204 <calcur()+0x170>)
    31b6:	fba1 2103 	umull	r2, r1, r1, r3
    31ba:	1a5b      	subs	r3, r3, r1
    31bc:	eb01 0153 	add.w	r1, r1, r3, lsr #1
    31c0:	f3c1 110f 	ubfx	r1, r1, #4, #16
    31c4:	f8a5 1086 	strh.w	r1, [r5, #134]	; 0x86
    31c8:	f005 fc26 	bl	8a18 <Print::print(long)>
    31cc:	211d      	movs	r1, #29
    31ce:	4810      	ldr	r0, [pc, #64]	; (3210 <calcur()+0x17c>)
    31d0:	f008 f8d4 	bl	b37c <usb_serial_write>
    31d4:	480d      	ldr	r0, [pc, #52]	; (320c <calcur()+0x178>)
    31d6:	2102      	movs	r1, #2
    31d8:	f008 f8d0 	bl	b37c <usb_serial_write>
  SERIALCONSOLE.print(settings.offset2);
  SERIALCONSOLE.print(" current offset 2 calibrated ");
  SERIALCONSOLE.println("  ");
}
    31dc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t println(const char s[])			{ return print(s) + println(); }
    31e0:	4808      	ldr	r0, [pc, #32]	; (3204 <calcur()+0x170>)
    31e2:	f005 bc21 	b.w	8a28 <Print::println()>
    31e6:	bf00      	nop
    31e8:	1fff8fd0 	.word	0x1fff8fd0
    31ec:	1fff8768 	.word	0x1fff8768
    31f0:	1fffb2e8 	.word	0x1fffb2e8
    31f4:	1fffb20c 	.word	0x1fffb20c
    31f8:	000134ac 	.word	0x000134ac
    31fc:	000134d0 	.word	0x000134d0
    3200:	86186187 	.word	0x86186187
    3204:	1fff880c 	.word	0x1fff880c
    3208:	000134d4 	.word	0x000134d4
    320c:	00012ea4 	.word	0x00012ea4
    3210:	000134f4 	.word	0x000134f4

00003214 <VEcan()>:
void VEcan()  //communication with Victron system over CAN
{
  msg.id = 0x351;
  msg.len = 8;
  if (storagemode == 0) {
    3214:	4b5d      	ldr	r3, [pc, #372]	; (338c <VEcan()+0x178>)
{
    3216:	b570      	push	{r4, r5, r6, lr}
  if (storagemode == 0) {
    3218:	681b      	ldr	r3, [r3, #0]
  msg.id = 0x351;
    321a:	4c5d      	ldr	r4, [pc, #372]	; (3390 <VEcan()+0x17c>)
    msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    321c:	4e5d      	ldr	r6, [pc, #372]	; (3394 <VEcan()+0x180>)
  msg.id = 0x351;
    321e:	f240 3151 	movw	r1, #849	; 0x351
  msg.len = 8;
    3222:	2208      	movs	r2, #8
    msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3224:	6d30      	ldr	r0, [r6, #80]	; 0x50
  msg.id = 0x351;
    3226:	6021      	str	r1, [r4, #0]
  msg.len = 8;
    3228:	71e2      	strb	r2, [r4, #7]
  if (storagemode == 0) {
    322a:	2b00      	cmp	r3, #0
    322c:	f040 80aa 	bne.w	3384 <VEcan()+0x170>
    msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3230:	f008 ff30 	bl	c094 <__aeabi_i2f>
    3234:	6971      	ldr	r1, [r6, #20]
    msg.buf[1] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
  } else {
    msg.buf[0] = lowByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    3236:	4605      	mov	r5, r0
    3238:	f008 ff80 	bl	c13c <__aeabi_fmul>
    323c:	4956      	ldr	r1, [pc, #344]	; (3398 <VEcan()+0x184>)
    323e:	f008 ff7d 	bl	c13c <__aeabi_fmul>
    3242:	f009 f967 	bl	c514 <__aeabi_f2uiz>
    3246:	b2c2      	uxtb	r2, r0
    msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3248:	7222      	strb	r2, [r4, #8]
    msg.buf[1] = highByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
  }
  msg.buf[2] = lowByte(chargecurrent);
    324a:	4a54      	ldr	r2, [pc, #336]	; (339c <VEcan()+0x188>)
  msg.buf[3] = highByte(chargecurrent);
  msg.buf[4] = lowByte(discurrent);
  msg.buf[5] = highByte(discurrent);
  msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    324c:	69b1      	ldr	r1, [r6, #24]
    msg.buf[1] = highByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    324e:	f3c0 2307 	ubfx	r3, r0, #8, #8
    msg.buf[1] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3252:	7263      	strb	r3, [r4, #9]
  msg.buf[2] = lowByte(chargecurrent);
    3254:	8813      	ldrh	r3, [r2, #0]
    3256:	8163      	strh	r3, [r4, #10]
  msg.buf[4] = lowByte(discurrent);
    3258:	4b51      	ldr	r3, [pc, #324]	; (33a0 <VEcan()+0x18c>)
  msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    325a:	4628      	mov	r0, r5
  msg.buf[4] = lowByte(discurrent);
    325c:	881b      	ldrh	r3, [r3, #0]
    325e:	81a3      	strh	r3, [r4, #12]
  msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    3260:	f008 ff6c 	bl	c13c <__aeabi_fmul>
    3264:	494c      	ldr	r1, [pc, #304]	; (3398 <VEcan()+0x184>)
    3266:	f008 ff69 	bl	c13c <__aeabi_fmul>
    326a:	f009 f953 	bl	c514 <__aeabi_f2uiz>
  msg.buf[7] = highByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
  Can0.write(msg);
    326e:	4948      	ldr	r1, [pc, #288]	; (3390 <VEcan()+0x17c>)
  msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    3270:	4603      	mov	r3, r0
  Can0.write(msg);
    3272:	484c      	ldr	r0, [pc, #304]	; (33a4 <VEcan()+0x190>)
  msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    3274:	81e3      	strh	r3, [r4, #14]
  Can0.write(msg);
    3276:	f004 f9d1 	bl	761c <FlexCAN::write(CAN_message_t const&)>

  msg.id = 0x355;
  msg.len = 8;
  msg.buf[0] = lowByte(SOC);
    327a:	4a4b      	ldr	r2, [pc, #300]	; (33a8 <VEcan()+0x194>)
  msg.buf[3] = highByte(SOH);
  msg.buf[4] = lowByte(SOC * 10);
  msg.buf[5] = highByte(SOC * 10);
  msg.buf[6] = 0;
  msg.buf[7] = 0;
  Can0.write(msg);
    327c:	4849      	ldr	r0, [pc, #292]	; (33a4 <VEcan()+0x190>)
  msg.buf[0] = lowByte(SOC);
    327e:	6813      	ldr	r3, [r2, #0]
    3280:	8812      	ldrh	r2, [r2, #0]
    3282:	8122      	strh	r2, [r4, #8]
  msg.buf[2] = lowByte(SOH);
    3284:	4a49      	ldr	r2, [pc, #292]	; (33ac <VEcan()+0x198>)
  msg.buf[4] = lowByte(SOC * 10);
    3286:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  msg.len = 8;
    328a:	2508      	movs	r5, #8
  msg.buf[4] = lowByte(SOC * 10);
    328c:	005b      	lsls	r3, r3, #1
  msg.buf[2] = lowByte(SOH);
    328e:	8812      	ldrh	r2, [r2, #0]
    3290:	8162      	strh	r2, [r4, #10]
  msg.id = 0x355;
    3292:	f240 3155 	movw	r1, #853	; 0x355
  msg.buf[5] = highByte(SOC * 10);
    3296:	fa43 f205 	asr.w	r2, r3, r5
  msg.id = 0x355;
    329a:	6021      	str	r1, [r4, #0]
  msg.buf[6] = 0;
    329c:	2600      	movs	r6, #0
  Can0.write(msg);
    329e:	493c      	ldr	r1, [pc, #240]	; (3390 <VEcan()+0x17c>)
  msg.buf[5] = highByte(SOC * 10);
    32a0:	7362      	strb	r2, [r4, #13]
  msg.buf[4] = lowByte(SOC * 10);
    32a2:	7323      	strb	r3, [r4, #12]
  msg.len = 8;
    32a4:	71e5      	strb	r5, [r4, #7]
  msg.buf[6] = 0;
    32a6:	81e6      	strh	r6, [r4, #14]
  Can0.write(msg);
    32a8:	f004 f9b8 	bl	761c <FlexCAN::write(CAN_message_t const&)>

  msg.id = 0x356;
    32ac:	f240 3356 	movw	r3, #854	; 0x356
  msg.len = 8;
  msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    32b0:	483f      	ldr	r0, [pc, #252]	; (33b0 <VEcan()+0x19c>)
  msg.id = 0x356;
    32b2:	6023      	str	r3, [r4, #0]
  msg.len = 8;
    32b4:	71e5      	strb	r5, [r4, #7]
  msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    32b6:	f7fd fcd7 	bl	c68 <BMSModuleManager::getPackVoltage()>
    32ba:	493e      	ldr	r1, [pc, #248]	; (33b4 <VEcan()+0x1a0>)
    32bc:	f008 ff3e 	bl	c13c <__aeabi_fmul>
    32c0:	f009 f928 	bl	c514 <__aeabi_f2uiz>
    32c4:	4603      	mov	r3, r0
  msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    32c6:	483a      	ldr	r0, [pc, #232]	; (33b0 <VEcan()+0x19c>)
  msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    32c8:	7223      	strb	r3, [r4, #8]
  msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    32ca:	f7fd fccd 	bl	c68 <BMSModuleManager::getPackVoltage()>
    32ce:	4939      	ldr	r1, [pc, #228]	; (33b4 <VEcan()+0x1a0>)
    32d0:	f008 ff34 	bl	c13c <__aeabi_fmul>
    32d4:	f009 f91e 	bl	c514 <__aeabi_f2uiz>
  msg.buf[2] = lowByte(long(currentact / 100));
    32d8:	4a37      	ldr	r2, [pc, #220]	; (33b8 <VEcan()+0x1a4>)
    32da:	4936      	ldr	r1, [pc, #216]	; (33b4 <VEcan()+0x1a0>)
  msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    32dc:	f3c0 2307 	ubfx	r3, r0, #8, #8
  msg.buf[2] = lowByte(long(currentact / 100));
    32e0:	6810      	ldr	r0, [r2, #0]
  msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    32e2:	7263      	strb	r3, [r4, #9]
  msg.buf[2] = lowByte(long(currentact / 100));
    32e4:	f008 ffde 	bl	c2a4 <__aeabi_fdiv>
    32e8:	f009 f8ee 	bl	c4c8 <__aeabi_f2iz>
    32ec:	4603      	mov	r3, r0
  msg.buf[3] = highByte(long(currentact / 100));
  msg.buf[4] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    32ee:	4830      	ldr	r0, [pc, #192]	; (33b0 <VEcan()+0x19c>)
  msg.buf[2] = lowByte(long(currentact / 100));
    32f0:	8163      	strh	r3, [r4, #10]
  msg.buf[4] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    32f2:	f7fd fceb 	bl	ccc <BMSModuleManager::getAvgTemperature()>
    32f6:	4928      	ldr	r1, [pc, #160]	; (3398 <VEcan()+0x184>)
    32f8:	f008 ff20 	bl	c13c <__aeabi_fmul>
    32fc:	f009 f8e4 	bl	c4c8 <__aeabi_f2iz>
    3300:	4603      	mov	r3, r0
  msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    3302:	482b      	ldr	r0, [pc, #172]	; (33b0 <VEcan()+0x19c>)
  msg.buf[4] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    3304:	7323      	strb	r3, [r4, #12]
  msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    3306:	f7fd fce1 	bl	ccc <BMSModuleManager::getAvgTemperature()>
    330a:	4923      	ldr	r1, [pc, #140]	; (3398 <VEcan()+0x184>)
    330c:	f008 ff16 	bl	c13c <__aeabi_fmul>
    3310:	f009 f8da 	bl	c4c8 <__aeabi_f2iz>
    3314:	f340 2007 	sbfx	r0, r0, #8, #8
  msg.buf[6] = 0;
  msg.buf[7] = 0;
  Can0.write(msg);
    3318:	491d      	ldr	r1, [pc, #116]	; (3390 <VEcan()+0x17c>)
  msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    331a:	7360      	strb	r0, [r4, #13]
  Can0.write(msg);
    331c:	4821      	ldr	r0, [pc, #132]	; (33a4 <VEcan()+0x190>)
  msg.buf[6] = 0;
    331e:	81e6      	strh	r6, [r4, #14]
  Can0.write(msg);
    3320:	f004 f97c 	bl	761c <FlexCAN::write(CAN_message_t const&)>

  delay(2);
    3324:	2002      	movs	r0, #2
    3326:	f006 fa47 	bl	97b8 <delay>
  msg.id = 0x35A;
  msg.len = 8;
  msg.buf[0] = alarm[0];    //High temp  Low Voltage | High Voltage
    332a:	4a24      	ldr	r2, [pc, #144]	; (33bc <VEcan()+0x1a8>)
  msg.buf[1] = alarm[1];    // High Discharge Current | Low Temperature
  msg.buf[2] = alarm[2];    //Internal Failure | High Charge current
  msg.buf[3] = alarm[3];    // Cell Imbalance
  msg.buf[4] = warning[0];  //High temp  Low Voltage | High Voltage
    332c:	4b24      	ldr	r3, [pc, #144]	; (33c0 <VEcan()+0x1ac>)
  msg.buf[0] = alarm[0];    //High temp  Low Voltage | High Voltage
    332e:	6812      	ldr	r2, [r2, #0]
  msg.buf[4] = warning[0];  //High temp  Low Voltage | High Voltage
    3330:	681b      	ldr	r3, [r3, #0]
  msg.buf[5] = warning[1];  // High Discharge Current | Low Temperature
  msg.buf[6] = warning[2];  //Internal Failure | High Charge current
  msg.buf[7] = warning[3];  // Cell Imbalance
  Can0.write(msg);
    3332:	4917      	ldr	r1, [pc, #92]	; (3390 <VEcan()+0x17c>)
  msg.buf[0] = alarm[0];    //High temp  Low Voltage | High Voltage
    3334:	60a2      	str	r2, [r4, #8]
  msg.id = 0x35A;
    3336:	f240 305a 	movw	r0, #858	; 0x35a
    333a:	6020      	str	r0, [r4, #0]
  Can0.write(msg);
    333c:	4819      	ldr	r0, [pc, #100]	; (33a4 <VEcan()+0x190>)
  msg.buf[4] = warning[0];  //High temp  Low Voltage | High Voltage
    333e:	60e3      	str	r3, [r4, #12]
  msg.len = 8;
    3340:	71e5      	strb	r5, [r4, #7]
  Can0.write(msg);
    3342:	f004 f96b 	bl	761c <FlexCAN::write(CAN_message_t const&)>

  msg.id = 0x35E;
  msg.len = 8;
  msg.buf[0] = bmsname[0];
    3346:	4b1f      	ldr	r3, [pc, #124]	; (33c4 <VEcan()+0x1b0>)
  msg.buf[3] = bmsname[3];
  msg.buf[4] = bmsname[4];
  msg.buf[5] = bmsname[5];
  msg.buf[6] = bmsname[6];
  msg.buf[7] = bmsname[7];
  Can0.write(msg);
    3348:	4911      	ldr	r1, [pc, #68]	; (3390 <VEcan()+0x17c>)
  msg.len = 8;
    334a:	71e5      	strb	r5, [r4, #7]
  msg.buf[4] = bmsname[4];
    334c:	e9d3 2300 	ldrd	r2, r3, [r3]
  msg.id = 0x35E;
    3350:	f240 305e 	movw	r0, #862	; 0x35e
    3354:	6020      	str	r0, [r4, #0]
  Can0.write(msg);
    3356:	4813      	ldr	r0, [pc, #76]	; (33a4 <VEcan()+0x190>)
  msg.buf[0] = bmsname[0];
    3358:	60a2      	str	r2, [r4, #8]
  msg.buf[4] = bmsname[4];
    335a:	60e3      	str	r3, [r4, #12]
  Can0.write(msg);
    335c:	f004 f95e 	bl	761c <FlexCAN::write(CAN_message_t const&)>

  delay(2);
    3360:	2002      	movs	r0, #2
    3362:	f006 fa29 	bl	97b8 <delay>
  msg.id = 0x370;
  msg.len = 8;
  msg.buf[0] = bmsmanu[0];
    3366:	4b18      	ldr	r3, [pc, #96]	; (33c8 <VEcan()+0x1b4>)
  msg.len = 8;
    3368:	71e5      	strb	r5, [r4, #7]
  msg.buf[1] = bmsmanu[1];
  msg.buf[2] = bmsmanu[2];
  msg.buf[3] = bmsmanu[3];
  msg.buf[4] = bmsmanu[4];
    336a:	e9d3 2300 	ldrd	r2, r3, [r3]
  msg.id = 0x370;
    336e:	f44f 715c 	mov.w	r1, #880	; 0x370
    3372:	6021      	str	r1, [r4, #0]
  msg.buf[0] = bmsmanu[0];
    3374:	60a2      	str	r2, [r4, #8]
  msg.buf[4] = bmsmanu[4];
    3376:	60e3      	str	r3, [r4, #12]
  msg.buf[5] = bmsmanu[5];
  msg.buf[6] = bmsmanu[6];
  msg.buf[7] = bmsmanu[7];
  Can0.write(msg);
    3378:	4905      	ldr	r1, [pc, #20]	; (3390 <VEcan()+0x17c>)
    337a:	480a      	ldr	r0, [pc, #40]	; (33a4 <VEcan()+0x190>)
}
    337c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Can0.write(msg);
    3380:	f004 b94c 	b.w	761c <FlexCAN::write(CAN_message_t const&)>
    msg.buf[0] = lowByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    3384:	f008 fe86 	bl	c094 <__aeabi_i2f>
    3388:	6a31      	ldr	r1, [r6, #32]
    338a:	e754      	b.n	3236 <VEcan()+0x22>
    338c:	1fffb2dc 	.word	0x1fffb2dc
    3390:	1fffb174 	.word	0x1fffb174
    3394:	1fffb20c 	.word	0x1fffb20c
    3398:	41200000 	.word	0x41200000
    339c:	1fffb078 	.word	0x1fffb078
    33a0:	1fffb104 	.word	0x1fffb104
    33a4:	1fffb2ec 	.word	0x1fffb2ec
    33a8:	1fff8724 	.word	0x1fff8724
    33ac:	1fff8728 	.word	0x1fff8728
    33b0:	1fff8fe0 	.word	0x1fff8fe0
    33b4:	42c80000 	.word	0x42c80000
    33b8:	1fffb0fc 	.word	0x1fffb0fc
    33bc:	1fff8fd4 	.word	0x1fff8fd4
    33c0:	1fffb2e4 	.word	0x1fffb2e4
    33c4:	1fff8734 	.word	0x1fff8734
    33c8:	1fff872c 	.word	0x1fff872c

000033cc <CAB300()>:
      Serial.println();
    }
  }
}

void CAB300() {
    33cc:	b538      	push	{r3, r4, r5, lr}
    33ce:	4c17      	ldr	r4, [pc, #92]	; (342c <CAB300()+0x60>)
    33d0:	4b17      	ldr	r3, [pc, #92]	; (3430 <CAB300()+0x64>)
    33d2:	6822      	ldr	r2, [r4, #0]
    33d4:	1d18      	adds	r0, r3, #4
  for (int i = 0; i < 4; i++) {
    inbox = (inbox << 8) | inMsg.buf[i];
    33d6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  for (int i = 0; i < 4; i++) {
    33da:	4298      	cmp	r0, r3
    inbox = (inbox << 8) | inMsg.buf[i];
    33dc:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  for (int i = 0; i < 4; i++) {
    33e0:	d1f9      	bne.n	33d6 <CAB300()+0xa>
  if (CANmilliamps > 0x80000000) {
    CANmilliamps -= 0x80000000;
  } else {
    CANmilliamps = (0x80000000 - CANmilliamps) * -1;
  }
  if (settings.cursens == Canbus) {
    33e2:	4b14      	ldr	r3, [pc, #80]	; (3434 <CAB300()+0x68>)
    33e4:	4d14      	ldr	r5, [pc, #80]	; (3438 <CAB300()+0x6c>)
    33e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    33e8:	6022      	str	r2, [r4, #0]
    CANmilliamps = (0x80000000 - CANmilliamps) * -1;
    33ea:	f102 4000 	add.w	r0, r2, #2147483648	; 0x80000000
  if (settings.cursens == Canbus) {
    33ee:	2b02      	cmp	r3, #2
    33f0:	6028      	str	r0, [r5, #0]
    33f2:	d004      	beq.n	33fe <CAB300()+0x32>
    RawCur = CANmilliamps;
    getcurrent();
  }
  if (candebug == 1) {
    33f4:	4b11      	ldr	r3, [pc, #68]	; (343c <CAB300()+0x70>)
    33f6:	681b      	ldr	r3, [r3, #0]
    33f8:	2b01      	cmp	r3, #1
    33fa:	d00a      	beq.n	3412 <CAB300()+0x46>
    Serial.println();
    Serial.print(CANmilliamps);
    Serial.print("mA ");
  }
}
    33fc:	bd38      	pop	{r3, r4, r5, pc}
    RawCur = CANmilliamps;
    33fe:	f008 fe49 	bl	c094 <__aeabi_i2f>
    3402:	4c0f      	ldr	r4, [pc, #60]	; (3440 <CAB300()+0x74>)
    3404:	6020      	str	r0, [r4, #0]
    getcurrent();
    3406:	f7ff f88b 	bl	2520 <getcurrent()>
  if (candebug == 1) {
    340a:	4b0c      	ldr	r3, [pc, #48]	; (343c <CAB300()+0x70>)
    340c:	681b      	ldr	r3, [r3, #0]
    340e:	2b01      	cmp	r3, #1
    3410:	d1f4      	bne.n	33fc <CAB300()+0x30>
    Serial.println();
    3412:	480c      	ldr	r0, [pc, #48]	; (3444 <CAB300()+0x78>)
    3414:	f005 fb08 	bl	8a28 <Print::println()>
    Serial.print(CANmilliamps);
    3418:	6829      	ldr	r1, [r5, #0]
    341a:	480a      	ldr	r0, [pc, #40]	; (3444 <CAB300()+0x78>)
    341c:	f005 fafc 	bl	8a18 <Print::print(long)>
}
    3420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3424:	4808      	ldr	r0, [pc, #32]	; (3448 <CAB300()+0x7c>)
    3426:	2103      	movs	r1, #3
    3428:	f007 bfa8 	b.w	b37c <usb_serial_write>
    342c:	1fffb130 	.word	0x1fffb130
    3430:	1fffb127 	.word	0x1fffb127
    3434:	1fffb20c 	.word	0x1fffb20c
    3438:	1fff8f9c 	.word	0x1fff8f9c
    343c:	1fffb070 	.word	0x1fffb070
    3440:	1fff8fc0 	.word	0x1fff8fc0
    3444:	1fff880c 	.word	0x1fff880c
    3448:	00013514 	.word	0x00013514

0000344c <canread()>:
void canread() {
    344c:	b5f0      	push	{r4, r5, r6, r7, lr}
  Can0.read(inMsg);
    344e:	4c3d      	ldr	r4, [pc, #244]	; (3544 <canread()+0xf8>)
    3450:	483d      	ldr	r0, [pc, #244]	; (3548 <canread()+0xfc>)
void canread() {
    3452:	b083      	sub	sp, #12
  Can0.read(inMsg);
    3454:	4621      	mov	r1, r4
    3456:	f004 f825 	bl	74a4 <FlexCAN::read(CAN_message_t&)>
  switch (inMsg.id) {
    345a:	6823      	ldr	r3, [r4, #0]
    345c:	f240 32c2 	movw	r2, #962	; 0x3c2
    3460:	4293      	cmp	r3, r2
    3462:	d058      	beq.n	3516 <canread()+0xca>
  if (inMsg.id >= 0x460 && inMsg.id < 0x480)  //do volt magic if ids are ones identified to be modules
    3464:	f5a3 628c 	sub.w	r2, r3, #1120	; 0x460
    3468:	2a1f      	cmp	r2, #31
    346a:	d94e      	bls.n	350a <canread()+0xbe>
  if (inMsg.id >= 0x7E0 && inMsg.id < 0x7F0)  //do volt magic if ids are ones identified to be modules
    346c:	f5a3 63fc 	sub.w	r3, r3, #2016	; 0x7e0
    3470:	2b0f      	cmp	r3, #15
    3472:	d945      	bls.n	3500 <canread()+0xb4>
  if (debug == 1) {
    3474:	4b35      	ldr	r3, [pc, #212]	; (354c <canread()+0x100>)
    3476:	681b      	ldr	r3, [r3, #0]
    3478:	2b01      	cmp	r3, #1
    347a:	d001      	beq.n	3480 <canread()+0x34>
}
    347c:	b003      	add	sp, #12
    347e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (candebug == 1) {
    3480:	4b33      	ldr	r3, [pc, #204]	; (3550 <canread()+0x104>)
    3482:	681b      	ldr	r3, [r3, #0]
    3484:	2b01      	cmp	r3, #1
    3486:	d1f9      	bne.n	347c <canread()+0x30>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3488:	4b32      	ldr	r3, [pc, #200]	; (3554 <canread()+0x108>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    348a:	4833      	ldr	r0, [pc, #204]	; (3558 <canread()+0x10c>)
    348c:	681b      	ldr	r3, [r3, #0]
    348e:	9301      	str	r3, [sp, #4]
	return ret;
    3490:	9901      	ldr	r1, [sp, #4]
    3492:	2300      	movs	r3, #0
    3494:	220a      	movs	r2, #10
    3496:	f005 fadf 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
      if ((inMsg.id & 0x80000000) == 0x80000000)  // Determine if ID is standard (11 bits) or extended (29 bits)
    349a:	6822      	ldr	r2, [r4, #0]
        sprintf(msgString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (inMsg.id & 0x1FFFFFFF), inMsg.len);
    349c:	79e3      	ldrb	r3, [r4, #7]
        sprintf(msgString, ",0x%.3lX,false,%1d", inMsg.id, inMsg.len);
    349e:	482f      	ldr	r0, [pc, #188]	; (355c <canread()+0x110>)
      if ((inMsg.id & 0x80000000) == 0x80000000)  // Determine if ID is standard (11 bits) or extended (29 bits)
    34a0:	2a00      	cmp	r2, #0
        sprintf(msgString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (inMsg.id & 0x1FFFFFFF), inMsg.len);
    34a2:	bfb6      	itet	lt
    34a4:	492e      	ldrlt	r1, [pc, #184]	; (3560 <canread()+0x114>)
        sprintf(msgString, ",0x%.3lX,false,%1d", inMsg.id, inMsg.len);
    34a6:	492f      	ldrge	r1, [pc, #188]	; (3564 <canread()+0x118>)
        sprintf(msgString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (inMsg.id & 0x1FFFFFFF), inMsg.len);
    34a8:	f022 4260 	biclt.w	r2, r2, #3758096384	; 0xe0000000
        sprintf(msgString, ",0x%.3lX,false,%1d", inMsg.id, inMsg.len);
    34ac:	f009 fde6 	bl	d07c <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    34b0:	482a      	ldr	r0, [pc, #168]	; (355c <canread()+0x110>)
    34b2:	f00a f805 	bl	d4c0 <strlen>
    34b6:	4601      	mov	r1, r0
    34b8:	4828      	ldr	r0, [pc, #160]	; (355c <canread()+0x110>)
    34ba:	f007 ff5f 	bl	b37c <usb_serial_write>
      if ((inMsg.id & 0x40000000) == 0x40000000) {  // Determine if message is a remote request frame.
    34be:	6825      	ldr	r5, [r4, #0]
    34c0:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
    34c4:	d12b      	bne.n	351e <canread()+0xd2>
        for (byte i = 0; i < inMsg.len; i++) {
    34c6:	79e3      	ldrb	r3, [r4, #7]
    34c8:	b1a3      	cbz	r3, 34f4 <canread()+0xa8>
          sprintf(msgString, ", 0x%.2X", inMsg.buf[i]);
    34ca:	4f27      	ldr	r7, [pc, #156]	; (3568 <canread()+0x11c>)
    34cc:	4e23      	ldr	r6, [pc, #140]	; (355c <canread()+0x110>)
    34ce:	462b      	mov	r3, r5
    34d0:	4423      	add	r3, r4
    34d2:	4639      	mov	r1, r7
    34d4:	7a1a      	ldrb	r2, [r3, #8]
    34d6:	4630      	mov	r0, r6
    34d8:	f009 fdd0 	bl	d07c <sprintf>
    34dc:	4630      	mov	r0, r6
    34de:	f009 ffef 	bl	d4c0 <strlen>
    34e2:	4601      	mov	r1, r0
    34e4:	4630      	mov	r0, r6
    34e6:	f007 ff49 	bl	b37c <usb_serial_write>
        for (byte i = 0; i < inMsg.len; i++) {
    34ea:	3501      	adds	r5, #1
    34ec:	79e2      	ldrb	r2, [r4, #7]
    34ee:	b2eb      	uxtb	r3, r5
    34f0:	429a      	cmp	r2, r3
    34f2:	d8ed      	bhi.n	34d0 <canread()+0x84>
      Serial.println();
    34f4:	4818      	ldr	r0, [pc, #96]	; (3558 <canread()+0x10c>)
}
    34f6:	b003      	add	sp, #12
    34f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      Serial.println();
    34fc:	f005 ba94 	b.w	8a28 <Print::println()>
    bms.decodecan(inMsg);  //do volt magic if ids are ones identified to be modules
    3500:	4910      	ldr	r1, [pc, #64]	; (3544 <canread()+0xf8>)
    3502:	481a      	ldr	r0, [pc, #104]	; (356c <canread()+0x120>)
    3504:	f7fd f98a 	bl	81c <BMSModuleManager::decodecan(CAN_message_t&)>
    3508:	e7b4      	b.n	3474 <canread()+0x28>
    bms.decodecan(inMsg);  //do volt magic if ids are ones identified to be modules
    350a:	490e      	ldr	r1, [pc, #56]	; (3544 <canread()+0xf8>)
    350c:	4817      	ldr	r0, [pc, #92]	; (356c <canread()+0x120>)
    350e:	f7fd f985 	bl	81c <BMSModuleManager::decodecan(CAN_message_t&)>
  if (inMsg.id >= 0x7E0 && inMsg.id < 0x7F0)  //do volt magic if ids are ones identified to be modules
    3512:	6823      	ldr	r3, [r4, #0]
    3514:	e7aa      	b.n	346c <canread()+0x20>
      CAB300();
    3516:	f7ff ff59 	bl	33cc <CAB300()>
  if (inMsg.id >= 0x460 && inMsg.id < 0x480)  //do volt magic if ids are ones identified to be modules
    351a:	6823      	ldr	r3, [r4, #0]
      break;
    351c:	e7a2      	b.n	3464 <canread()+0x18>
        sprintf(msgString, " REMOTE REQUEST FRAME");
    351e:	4d14      	ldr	r5, [pc, #80]	; (3570 <canread()+0x124>)
    3520:	4c0e      	ldr	r4, [pc, #56]	; (355c <canread()+0x110>)
    3522:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3526:	e895 0003 	ldmia.w	r5, {r0, r1}
    352a:	f844 0b04 	str.w	r0, [r4], #4
    352e:	4620      	mov	r0, r4
    3530:	f820 1914 	strh.w	r1, [r0], #-20
    3534:	f009 ffc4 	bl	d4c0 <strlen>
    3538:	4601      	mov	r1, r0
    353a:	f1a4 0014 	sub.w	r0, r4, #20
    353e:	f007 ff1d 	bl	b37c <usb_serial_write>
    3542:	e7d7      	b.n	34f4 <canread()+0xa8>
    3544:	1fffb120 	.word	0x1fffb120
    3548:	1fffb2ec 	.word	0x1fffb2ec
    354c:	1fff8744 	.word	0x1fff8744
    3550:	1fffb070 	.word	0x1fffb070
    3554:	1fffb4e0 	.word	0x1fffb4e0
    3558:	1fff880c 	.word	0x1fff880c
    355c:	1fffb184 	.word	0x1fffb184
    3560:	00013518 	.word	0x00013518
    3564:	00013540 	.word	0x00013540
    3568:	0001356c 	.word	0x0001356c
    356c:	1fff8fe0 	.word	0x1fff8fe0
    3570:	00013554 	.word	0x00013554

00003574 <currentlimit()>:

void currentlimit() {
    3574:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (bmsstatus == Error) {
    3578:	4b74      	ldr	r3, [pc, #464]	; (374c <currentlimit()+0x1d8>)
    357a:	781b      	ldrb	r3, [r3, #0]
    357c:	2b05      	cmp	r3, #5
    357e:	d106      	bne.n	358e <currentlimit()+0x1a>
    discurrent = 0;
    3580:	4973      	ldr	r1, [pc, #460]	; (3750 <currentlimit()+0x1dc>)
    chargecurrent = 0;
    3582:	4a74      	ldr	r2, [pc, #464]	; (3754 <currentlimit()+0x1e0>)
    discurrent = 0;
    3584:	2300      	movs	r3, #0
    3586:	600b      	str	r3, [r1, #0]
    chargecurrent = 0;
    3588:	6013      	str	r3, [r2, #0]
    discurrent = 0;
  }
  if (chargecurrent < 0) {
    chargecurrent = 0;
  }
}
    358a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    discurrent = settings.discurrentmax;
    358e:	4c72      	ldr	r4, [pc, #456]	; (3758 <currentlimit()+0x1e4>)
    3590:	4e6f      	ldr	r6, [pc, #444]	; (3750 <currentlimit()+0x1dc>)
    chargecurrent = settings.chargecurrentmax;
    3592:	4d70      	ldr	r5, [pc, #448]	; (3754 <currentlimit()+0x1e0>)
    discurrent = settings.discurrentmax;
    3594:	6e62      	ldr	r2, [r4, #100]	; 0x64
    chargecurrent = settings.chargecurrentmax;
    3596:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    3598:	4870      	ldr	r0, [pc, #448]	; (375c <currentlimit()+0x1e8>)
    discurrent = settings.discurrentmax;
    359a:	6032      	str	r2, [r6, #0]
    chargecurrent = settings.chargecurrentmax;
    359c:	602b      	str	r3, [r5, #0]
    if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    359e:	f7fd fbf3 	bl	d88 <BMSModuleManager::getLowTemperature()>
    35a2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    35a4:	f008 ff68 	bl	c478 <__aeabi_fcmplt>
    35a8:	b108      	cbz	r0, 35ae <currentlimit()+0x3a>
      chargecurrent = 0;
    35aa:	2300      	movs	r3, #0
    35ac:	602b      	str	r3, [r5, #0]
    if (bms.getHighTemperature() > settings.OverTSetpoint) {
    35ae:	486b      	ldr	r0, [pc, #428]	; (375c <currentlimit()+0x1e8>)
    35b0:	f7fd fbe8 	bl	d84 <BMSModuleManager::getHighTemperature()>
    35b4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    35b6:	f008 ff7d 	bl	c4b4 <__aeabi_fcmpgt>
    35ba:	b110      	cbz	r0, 35c2 <currentlimit()+0x4e>
      discurrent = 0;
    35bc:	2300      	movs	r3, #0
    35be:	6033      	str	r3, [r6, #0]
      chargecurrent = 0;
    35c0:	602b      	str	r3, [r5, #0]
    if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    35c2:	4866      	ldr	r0, [pc, #408]	; (375c <currentlimit()+0x1e8>)
    35c4:	f7fd fb2a 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    35c8:	68e1      	ldr	r1, [r4, #12]
    35ca:	f008 ff73 	bl	c4b4 <__aeabi_fcmpgt>
    35ce:	b108      	cbz	r0, 35d4 <currentlimit()+0x60>
      chargecurrent = 0;
    35d0:	2300      	movs	r3, #0
    35d2:	602b      	str	r3, [r5, #0]
    if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    35d4:	4861      	ldr	r0, [pc, #388]	; (375c <currentlimit()+0x1e8>)
    35d6:	f7fd fb21 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    35da:	68e1      	ldr	r1, [r4, #12]
    35dc:	f008 ff6a 	bl	c4b4 <__aeabi_fcmpgt>
    35e0:	b108      	cbz	r0, 35e6 <currentlimit()+0x72>
      chargecurrent = 0;
    35e2:	2300      	movs	r3, #0
    35e4:	602b      	str	r3, [r5, #0]
    if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getLowCellVolt() < settings.DischVsetpoint) {
    35e6:	485d      	ldr	r0, [pc, #372]	; (375c <currentlimit()+0x1e8>)
    35e8:	f7fd faf0 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    35ec:	6921      	ldr	r1, [r4, #16]
    35ee:	f008 ff43 	bl	c478 <__aeabi_fcmplt>
    35f2:	2800      	cmp	r0, #0
    35f4:	f000 80b6 	beq.w	3764 <currentlimit()+0x1f0>
      discurrent = 0;
    35f8:	2300      	movs	r3, #0
    35fa:	6033      	str	r3, [r6, #0]
    if (chargecurrent > 0) {
    35fc:	682b      	ldr	r3, [r5, #0]
    35fe:	2b00      	cmp	r3, #0
    3600:	dc0c      	bgt.n	361c <currentlimit()+0xa8>
  if (discurrent < 0) {
    3602:	6833      	ldr	r3, [r6, #0]
    3604:	2b00      	cmp	r3, #0
  if (chargecurrent < 0) {
    3606:	bfb7      	itett	lt
    3608:	682b      	ldrlt	r3, [r5, #0]
    360a:	682b      	ldrge	r3, [r5, #0]
    discurrent = 0;
    360c:	2200      	movlt	r2, #0
    360e:	6032      	strlt	r2, [r6, #0]
  if (chargecurrent < 0) {
    3610:	2b00      	cmp	r3, #0
    chargecurrent = 0;
    3612:	bfbc      	itt	lt
    3614:	2300      	movlt	r3, #0
    3616:	602b      	strlt	r3, [r5, #0]
}
    3618:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (bms.getHighTemperature() < settings.ChargeTSetpoint) {
    361c:	484f      	ldr	r0, [pc, #316]	; (375c <currentlimit()+0x1e8>)
    361e:	f7fd fbb1 	bl	d84 <BMSModuleManager::getHighTemperature()>
    3622:	6b21      	ldr	r1, [r4, #48]	; 0x30
    3624:	f008 ff28 	bl	c478 <__aeabi_fcmplt>
    3628:	2800      	cmp	r0, #0
    362a:	d15f      	bne.n	36ec <currentlimit()+0x178>
      if (storagemode == 1) {
    362c:	4b4c      	ldr	r3, [pc, #304]	; (3760 <currentlimit()+0x1ec>)
        if (bms.getHighCellVolt() > (settings.StoreVsetpoint - settings.ChargeHys)) {
    362e:	484b      	ldr	r0, [pc, #300]	; (375c <currentlimit()+0x1e8>)
      if (storagemode == 1) {
    3630:	681b      	ldr	r3, [r3, #0]
    3632:	2b01      	cmp	r3, #1
    3634:	d042      	beq.n	36bc <currentlimit()+0x148>
        if (bms.getHighCellVolt() > (settings.ChargeVsetpoint - settings.ChargeHys)) {
    3636:	f7fd faf1 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    363a:	69e1      	ldr	r1, [r4, #28]
    363c:	4607      	mov	r7, r0
    363e:	6960      	ldr	r0, [r4, #20]
    3640:	f008 fc72 	bl	bf28 <__aeabi_fsub>
    3644:	4601      	mov	r1, r0
    3646:	4638      	mov	r0, r7
    3648:	f008 ff34 	bl	c4b4 <__aeabi_fcmpgt>
    364c:	2800      	cmp	r0, #0
    364e:	d0d8      	beq.n	3602 <currentlimit()+0x8e>
          chargecurrent = chargecurrent - map(bms.getHighCellVolt(), (settings.ChargeVsetpoint - settings.ChargeHys), settings.ChargeVsetpoint, settings.chargecurrentend, settings.chargecurrentmax);
    3650:	6828      	ldr	r0, [r5, #0]
    3652:	f008 fd1f 	bl	c094 <__aeabi_i2f>
    3656:	4681      	mov	r9, r0
    3658:	4840      	ldr	r0, [pc, #256]	; (375c <currentlimit()+0x1e8>)
    365a:	f7fd fadf 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    365e:	f8d4 a014 	ldr.w	sl, [r4, #20]
    3662:	4683      	mov	fp, r0
    3664:	69e1      	ldr	r1, [r4, #28]
    3666:	4650      	mov	r0, sl
    3668:	f008 fc5e 	bl	bf28 <__aeabi_fsub>
    366c:	4680      	mov	r8, r0
	return (x - (T)in_min) * ((T)out_max - (T)out_min) / ((T)in_max - (T)in_min) + (T)out_min;
    366e:	6e20      	ldr	r0, [r4, #96]	; 0x60
    3670:	f008 fd10 	bl	c094 <__aeabi_i2f>
    3674:	4607      	mov	r7, r0
    3676:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    3678:	f008 fd0c 	bl	c094 <__aeabi_i2f>
    367c:	4639      	mov	r1, r7
    367e:	f008 fc53 	bl	bf28 <__aeabi_fsub>
    3682:	4641      	mov	r1, r8
    3684:	4604      	mov	r4, r0
    3686:	4658      	mov	r0, fp
    3688:	f008 fc4e 	bl	bf28 <__aeabi_fsub>
    368c:	4601      	mov	r1, r0
    368e:	4620      	mov	r0, r4
    3690:	f008 fd54 	bl	c13c <__aeabi_fmul>
    3694:	4641      	mov	r1, r8
    3696:	4604      	mov	r4, r0
    3698:	4650      	mov	r0, sl
    369a:	f008 fc45 	bl	bf28 <__aeabi_fsub>
    369e:	4601      	mov	r1, r0
    36a0:	4620      	mov	r0, r4
    36a2:	f008 fdff 	bl	c2a4 <__aeabi_fdiv>
    36a6:	4639      	mov	r1, r7
    36a8:	f008 fc40 	bl	bf2c <__addsf3>
    36ac:	4601      	mov	r1, r0
    36ae:	4648      	mov	r0, r9
    36b0:	f008 fc3a 	bl	bf28 <__aeabi_fsub>
    36b4:	f008 ff08 	bl	c4c8 <__aeabi_f2iz>
    36b8:	6028      	str	r0, [r5, #0]
    36ba:	e7a2      	b.n	3602 <currentlimit()+0x8e>
        if (bms.getHighCellVolt() > (settings.StoreVsetpoint - settings.ChargeHys)) {
    36bc:	f7fd faae 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    36c0:	69e1      	ldr	r1, [r4, #28]
    36c2:	4607      	mov	r7, r0
    36c4:	6a20      	ldr	r0, [r4, #32]
    36c6:	f008 fc2f 	bl	bf28 <__aeabi_fsub>
    36ca:	4601      	mov	r1, r0
    36cc:	4638      	mov	r0, r7
    36ce:	f008 fef1 	bl	c4b4 <__aeabi_fcmpgt>
    36d2:	2800      	cmp	r0, #0
    36d4:	d095      	beq.n	3602 <currentlimit()+0x8e>
          chargecurrent = chargecurrent - map(bms.getHighCellVolt(), (settings.StoreVsetpoint - settings.ChargeHys), settings.StoreVsetpoint, settings.chargecurrentend, settings.chargecurrentmax);
    36d6:	6828      	ldr	r0, [r5, #0]
    36d8:	f008 fcdc 	bl	c094 <__aeabi_i2f>
    36dc:	4681      	mov	r9, r0
    36de:	481f      	ldr	r0, [pc, #124]	; (375c <currentlimit()+0x1e8>)
    36e0:	f7fd fa9c 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    36e4:	f8d4 a020 	ldr.w	sl, [r4, #32]
    36e8:	4683      	mov	fp, r0
    36ea:	e7bb      	b.n	3664 <currentlimit()+0xf0>
        chargecurrent = chargecurrent - map(bms.getHighTemperature(), settings.UnderTSetpoint, settings.ChargeTSetpoint, settings.chargecurrentmax, 0);
    36ec:	6828      	ldr	r0, [r5, #0]
    36ee:	f008 fcd1 	bl	c094 <__aeabi_i2f>
    36f2:	4680      	mov	r8, r0
    36f4:	4819      	ldr	r0, [pc, #100]	; (375c <currentlimit()+0x1e8>)
    36f6:	f7fd fb45 	bl	d84 <BMSModuleManager::getHighTemperature()>
    36fa:	4681      	mov	r9, r0
    36fc:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    36fe:	f8d4 a02c 	ldr.w	sl, [r4, #44]	; 0x2c
    3702:	f008 fcc7 	bl	c094 <__aeabi_i2f>
    3706:	4651      	mov	r1, sl
    3708:	4607      	mov	r7, r0
    370a:	4648      	mov	r0, r9
    370c:	f008 fc0c 	bl	bf28 <__aeabi_fsub>
    3710:	4639      	mov	r1, r7
    3712:	4681      	mov	r9, r0
    3714:	2000      	movs	r0, #0
    3716:	f008 fc07 	bl	bf28 <__aeabi_fsub>
    371a:	4601      	mov	r1, r0
    371c:	4648      	mov	r0, r9
    371e:	f008 fd0d 	bl	c13c <__aeabi_fmul>
    3722:	4651      	mov	r1, sl
    3724:	4681      	mov	r9, r0
    3726:	6b20      	ldr	r0, [r4, #48]	; 0x30
    3728:	f008 fbfe 	bl	bf28 <__aeabi_fsub>
    372c:	4601      	mov	r1, r0
    372e:	4648      	mov	r0, r9
    3730:	f008 fdb8 	bl	c2a4 <__aeabi_fdiv>
    3734:	4639      	mov	r1, r7
    3736:	f008 fbf9 	bl	bf2c <__addsf3>
    373a:	4601      	mov	r1, r0
    373c:	4640      	mov	r0, r8
    373e:	f008 fbf3 	bl	bf28 <__aeabi_fsub>
    3742:	f008 fec1 	bl	c4c8 <__aeabi_f2iz>
    3746:	6028      	str	r0, [r5, #0]
    3748:	e770      	b.n	362c <currentlimit()+0xb8>
    374a:	bf00      	nop
    374c:	1fffb008 	.word	0x1fffb008
    3750:	1fffb104 	.word	0x1fffb104
    3754:	1fffb078 	.word	0x1fffb078
    3758:	1fffb20c 	.word	0x1fffb20c
    375c:	1fff8fe0 	.word	0x1fff8fe0
    3760:	1fffb2dc 	.word	0x1fffb2dc
    if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getLowCellVolt() < settings.DischVsetpoint) {
    3764:	4848      	ldr	r0, [pc, #288]	; (3888 <currentlimit()+0x314>)
    3766:	f7fd fa31 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    376a:	69a1      	ldr	r1, [r4, #24]
    376c:	f008 fe84 	bl	c478 <__aeabi_fcmplt>
    3770:	2800      	cmp	r0, #0
    3772:	f47f af41 	bne.w	35f8 <currentlimit()+0x84>
    if (discurrent > 0) {
    3776:	6833      	ldr	r3, [r6, #0]
    3778:	2b00      	cmp	r3, #0
    377a:	f77f af3f 	ble.w	35fc <currentlimit()+0x88>
      if (bms.getLowTemperature() > settings.DisTSetpoint) {
    377e:	4842      	ldr	r0, [pc, #264]	; (3888 <currentlimit()+0x314>)
    3780:	f7fd fb02 	bl	d88 <BMSModuleManager::getLowTemperature()>
    3784:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3786:	f008 fe95 	bl	c4b4 <__aeabi_fcmpgt>
    378a:	2800      	cmp	r0, #0
    378c:	d152      	bne.n	3834 <currentlimit()+0x2c0>
      if (bms.getLowCellVolt() > settings.UnderVSetpoint || bms.getLowCellVolt() > settings.DischVsetpoint) {
    378e:	483e      	ldr	r0, [pc, #248]	; (3888 <currentlimit()+0x314>)
    3790:	f7fd fa1c 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    3794:	6921      	ldr	r1, [r4, #16]
    3796:	f008 fe8d 	bl	c4b4 <__aeabi_fcmpgt>
    379a:	b940      	cbnz	r0, 37ae <currentlimit()+0x23a>
    379c:	483a      	ldr	r0, [pc, #232]	; (3888 <currentlimit()+0x314>)
    379e:	f7fd fa15 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    37a2:	69a1      	ldr	r1, [r4, #24]
    37a4:	f008 fe86 	bl	c4b4 <__aeabi_fcmpgt>
    37a8:	2800      	cmp	r0, #0
    37aa:	f43f af27 	beq.w	35fc <currentlimit()+0x88>
        if (bms.getLowCellVolt() < (settings.DischVsetpoint + settings.DisTaper)) {
    37ae:	4836      	ldr	r0, [pc, #216]	; (3888 <currentlimit()+0x314>)
    37b0:	f7fd fa0c 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    37b4:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
    37b8:	4607      	mov	r7, r0
    37ba:	69a0      	ldr	r0, [r4, #24]
    37bc:	f008 fbb6 	bl	bf2c <__addsf3>
    37c0:	4601      	mov	r1, r0
    37c2:	4638      	mov	r0, r7
    37c4:	f008 fe58 	bl	c478 <__aeabi_fcmplt>
    37c8:	2800      	cmp	r0, #0
    37ca:	f43f af17 	beq.w	35fc <currentlimit()+0x88>
          discurrent = discurrent - map(bms.getLowCellVolt(), settings.DischVsetpoint, (settings.DischVsetpoint + settings.DisTaper), settings.discurrentmax, 0);
    37ce:	6830      	ldr	r0, [r6, #0]
    37d0:	f008 fc60 	bl	c094 <__aeabi_i2f>
    37d4:	4680      	mov	r8, r0
    37d6:	482c      	ldr	r0, [pc, #176]	; (3888 <currentlimit()+0x314>)
    37d8:	f7fd f9f8 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    37dc:	4681      	mov	r9, r0
    37de:	6e60      	ldr	r0, [r4, #100]	; 0x64
    37e0:	f8d4 a018 	ldr.w	sl, [r4, #24]
    37e4:	f008 fc56 	bl	c094 <__aeabi_i2f>
    37e8:	4651      	mov	r1, sl
    37ea:	4607      	mov	r7, r0
    37ec:	4648      	mov	r0, r9
    37ee:	f008 fb9b 	bl	bf28 <__aeabi_fsub>
    37f2:	4639      	mov	r1, r7
    37f4:	4681      	mov	r9, r0
    37f6:	2000      	movs	r0, #0
    37f8:	f008 fb96 	bl	bf28 <__aeabi_fsub>
    37fc:	4601      	mov	r1, r0
    37fe:	4648      	mov	r0, r9
    3800:	f008 fc9c 	bl	c13c <__aeabi_fmul>
    3804:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
    3808:	4681      	mov	r9, r0
    380a:	4650      	mov	r0, sl
    380c:	f008 fb8e 	bl	bf2c <__addsf3>
    3810:	4651      	mov	r1, sl
    3812:	f008 fb89 	bl	bf28 <__aeabi_fsub>
    3816:	4601      	mov	r1, r0
    3818:	4648      	mov	r0, r9
    381a:	f008 fd43 	bl	c2a4 <__aeabi_fdiv>
    381e:	4639      	mov	r1, r7
    3820:	f008 fb84 	bl	bf2c <__addsf3>
    3824:	4601      	mov	r1, r0
    3826:	4640      	mov	r0, r8
    3828:	f008 fb7e 	bl	bf28 <__aeabi_fsub>
    382c:	f008 fe4c 	bl	c4c8 <__aeabi_f2iz>
    3830:	6030      	str	r0, [r6, #0]
    3832:	e6e3      	b.n	35fc <currentlimit()+0x88>
        discurrent = discurrent - map(bms.getLowTemperature(), settings.DisTSetpoint, settings.OverTSetpoint, 0, settings.discurrentmax);
    3834:	6830      	ldr	r0, [r6, #0]
    3836:	f008 fc2d 	bl	c094 <__aeabi_i2f>
    383a:	4607      	mov	r7, r0
    383c:	4812      	ldr	r0, [pc, #72]	; (3888 <currentlimit()+0x314>)
    383e:	f7fd faa3 	bl	d88 <BMSModuleManager::getLowTemperature()>
    3842:	4681      	mov	r9, r0
    3844:	6e60      	ldr	r0, [r4, #100]	; 0x64
    3846:	f8d4 a034 	ldr.w	sl, [r4, #52]	; 0x34
    384a:	f008 fc23 	bl	c094 <__aeabi_i2f>
    384e:	4651      	mov	r1, sl
    3850:	4680      	mov	r8, r0
    3852:	4648      	mov	r0, r9
    3854:	f008 fb68 	bl	bf28 <__aeabi_fsub>
    3858:	4601      	mov	r1, r0
    385a:	4640      	mov	r0, r8
    385c:	f008 fc6e 	bl	c13c <__aeabi_fmul>
    3860:	4651      	mov	r1, sl
    3862:	4680      	mov	r8, r0
    3864:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    3866:	f008 fb5f 	bl	bf28 <__aeabi_fsub>
    386a:	4601      	mov	r1, r0
    386c:	4640      	mov	r0, r8
    386e:	f008 fd19 	bl	c2a4 <__aeabi_fdiv>
    3872:	2100      	movs	r1, #0
    3874:	f008 fb5a 	bl	bf2c <__addsf3>
    3878:	4601      	mov	r1, r0
    387a:	4638      	mov	r0, r7
    387c:	f008 fb54 	bl	bf28 <__aeabi_fsub>
    3880:	f008 fe22 	bl	c4c8 <__aeabi_f2iz>
    3884:	6030      	str	r0, [r6, #0]
    3886:	e782      	b.n	378e <currentlimit()+0x21a>
    3888:	1fff8fe0 	.word	0x1fff8fe0

0000388c <inputdebug()>:

void inputdebug() {
    388c:	b508      	push	{r3, lr}
  Serial.println();
    388e:	4828      	ldr	r0, [pc, #160]	; (3930 <inputdebug()+0xa4>)
    3890:	f005 f8ca 	bl	8a28 <Print::println()>
    3894:	4827      	ldr	r0, [pc, #156]	; (3934 <inputdebug()+0xa8>)
    3896:	2107      	movs	r1, #7
    3898:	f007 fd70 	bl	b37c <usb_serial_write>
  Serial.print("Input: ");
  if (digitalRead(IN1)) {
    389c:	2011      	movs	r0, #17
    389e:	f005 ff21 	bl	96e4 <digitalRead>
    38a2:	b300      	cbz	r0, 38e6 <inputdebug()+0x5a>
    38a4:	4824      	ldr	r0, [pc, #144]	; (3938 <inputdebug()+0xac>)
    38a6:	2106      	movs	r1, #6
    38a8:	f007 fd68 	bl	b37c <usb_serial_write>
    Serial.print("1 ON  ");
  } else {
    Serial.print("1 OFF ");
  }
  if (digitalRead(IN3)) {
    38ac:	2012      	movs	r0, #18
    38ae:	f005 ff19 	bl	96e4 <digitalRead>
    38b2:	b308      	cbz	r0, 38f8 <inputdebug()+0x6c>
    38b4:	4821      	ldr	r0, [pc, #132]	; (393c <inputdebug()+0xb0>)
    38b6:	2106      	movs	r1, #6
    38b8:	f007 fd60 	bl	b37c <usb_serial_write>
    Serial.print("2 ON  ");
  } else {
    Serial.print("2 OFF ");
  }
  if (digitalRead(IN3)) {
    38bc:	2012      	movs	r0, #18
    38be:	f005 ff11 	bl	96e4 <digitalRead>
    38c2:	b310      	cbz	r0, 390a <inputdebug()+0x7e>
    38c4:	481e      	ldr	r0, [pc, #120]	; (3940 <inputdebug()+0xb4>)
    38c6:	2106      	movs	r1, #6
    38c8:	f007 fd58 	bl	b37c <usb_serial_write>
    Serial.print("3 ON  ");
  } else {
    Serial.print("3 OFF ");
  }
  if (digitalRead(IN4)) {
    38cc:	2013      	movs	r0, #19
    38ce:	f005 ff09 	bl	96e4 <digitalRead>
    38d2:	b318      	cbz	r0, 391c <inputdebug()+0x90>
    38d4:	481b      	ldr	r0, [pc, #108]	; (3944 <inputdebug()+0xb8>)
    38d6:	2106      	movs	r1, #6
    38d8:	f007 fd50 	bl	b37c <usb_serial_write>
    Serial.print("4 ON  ");
  } else {
    Serial.print("4 OFF ");
  }
  Serial.println();
}
    38dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println();
    38e0:	4813      	ldr	r0, [pc, #76]	; (3930 <inputdebug()+0xa4>)
    38e2:	f005 b8a1 	b.w	8a28 <Print::println()>
    38e6:	4818      	ldr	r0, [pc, #96]	; (3948 <inputdebug()+0xbc>)
    38e8:	2106      	movs	r1, #6
    38ea:	f007 fd47 	bl	b37c <usb_serial_write>
  if (digitalRead(IN3)) {
    38ee:	2012      	movs	r0, #18
    38f0:	f005 fef8 	bl	96e4 <digitalRead>
    38f4:	2800      	cmp	r0, #0
    38f6:	d1dd      	bne.n	38b4 <inputdebug()+0x28>
    38f8:	4814      	ldr	r0, [pc, #80]	; (394c <inputdebug()+0xc0>)
    38fa:	2106      	movs	r1, #6
    38fc:	f007 fd3e 	bl	b37c <usb_serial_write>
  if (digitalRead(IN3)) {
    3900:	2012      	movs	r0, #18
    3902:	f005 feef 	bl	96e4 <digitalRead>
    3906:	2800      	cmp	r0, #0
    3908:	d1dc      	bne.n	38c4 <inputdebug()+0x38>
    390a:	4811      	ldr	r0, [pc, #68]	; (3950 <inputdebug()+0xc4>)
    390c:	2106      	movs	r1, #6
    390e:	f007 fd35 	bl	b37c <usb_serial_write>
  if (digitalRead(IN4)) {
    3912:	2013      	movs	r0, #19
    3914:	f005 fee6 	bl	96e4 <digitalRead>
    3918:	2800      	cmp	r0, #0
    391a:	d1db      	bne.n	38d4 <inputdebug()+0x48>
    391c:	480d      	ldr	r0, [pc, #52]	; (3954 <inputdebug()+0xc8>)
    391e:	2106      	movs	r1, #6
    3920:	f007 fd2c 	bl	b37c <usb_serial_write>
}
    3924:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println();
    3928:	4801      	ldr	r0, [pc, #4]	; (3930 <inputdebug()+0xa4>)
    392a:	f005 b87d 	b.w	8a28 <Print::println()>
    392e:	bf00      	nop
    3930:	1fff880c 	.word	0x1fff880c
    3934:	00013578 	.word	0x00013578
    3938:	00013580 	.word	0x00013580
    393c:	00013590 	.word	0x00013590
    3940:	000135a0 	.word	0x000135a0
    3944:	000135b0 	.word	0x000135b0
    3948:	00013588 	.word	0x00013588
    394c:	00013598 	.word	0x00013598
    3950:	000135a8 	.word	0x000135a8
    3954:	000135b8 	.word	0x000135b8

00003958 <outputdebug()>:

void outputdebug() {
    3958:	b510      	push	{r4, lr}
  if (outputstate < 5) {
    395a:	4c29      	ldr	r4, [pc, #164]	; (3a00 <outputdebug()+0xa8>)
    395c:	6823      	ldr	r3, [r4, #0]
    395e:	2b04      	cmp	r3, #4
    3960:	dc26      	bgt.n	39b0 <outputdebug()+0x58>
    digitalWrite(OUT1, HIGH);
    3962:	2101      	movs	r1, #1
    3964:	200b      	movs	r0, #11
    3966:	f005 fe97 	bl	9698 <digitalWrite>
    digitalWrite(OUT2, HIGH);
    396a:	2101      	movs	r1, #1
    396c:	200c      	movs	r0, #12
    396e:	f005 fe93 	bl	9698 <digitalWrite>
    digitalWrite(OUT3, HIGH);
    3972:	2101      	movs	r1, #1
    3974:	2014      	movs	r0, #20
    3976:	f005 fe8f 	bl	9698 <digitalWrite>
    digitalWrite(OUT4, HIGH);
    397a:	2101      	movs	r1, #1
    397c:	2015      	movs	r0, #21
    397e:	f005 fe8b 	bl	9698 <digitalWrite>
    analogWrite(OUT5, 255);
    3982:	21ff      	movs	r1, #255	; 0xff
    3984:	2016      	movs	r0, #22
    3986:	f005 fd0b 	bl	93a0 <analogWrite>
    analogWrite(OUT6, 255);
    398a:	21ff      	movs	r1, #255	; 0xff
    398c:	2017      	movs	r0, #23
    398e:	f005 fd07 	bl	93a0 <analogWrite>
    analogWrite(OUT7, 255);
    3992:	21ff      	movs	r1, #255	; 0xff
    3994:	2005      	movs	r0, #5
    3996:	f005 fd03 	bl	93a0 <analogWrite>
    analogWrite(OUT8, 255);
    399a:	21ff      	movs	r1, #255	; 0xff
    399c:	2006      	movs	r0, #6
    399e:	f005 fcff 	bl	93a0 <analogWrite>
    outputstate++;
    39a2:	6823      	ldr	r3, [r4, #0]
    39a4:	3301      	adds	r3, #1
    analogWrite(OUT6, 0);
    analogWrite(OUT7, 0);
    analogWrite(OUT8, 0);
    outputstate++;
  }
  if (outputstate > 10) {
    39a6:	2b0a      	cmp	r3, #10
    outputstate = 0;
    39a8:	bfc8      	it	gt
    39aa:	2300      	movgt	r3, #0
    39ac:	6023      	str	r3, [r4, #0]
  }
}
    39ae:	bd10      	pop	{r4, pc}
    digitalWrite(OUT1, LOW);
    39b0:	2100      	movs	r1, #0
    39b2:	200b      	movs	r0, #11
    39b4:	f005 fe70 	bl	9698 <digitalWrite>
    digitalWrite(OUT2, LOW);
    39b8:	2100      	movs	r1, #0
    39ba:	200c      	movs	r0, #12
    39bc:	f005 fe6c 	bl	9698 <digitalWrite>
    digitalWrite(OUT3, LOW);
    39c0:	2100      	movs	r1, #0
    39c2:	2014      	movs	r0, #20
    39c4:	f005 fe68 	bl	9698 <digitalWrite>
    digitalWrite(OUT4, LOW);
    39c8:	2100      	movs	r1, #0
    39ca:	2015      	movs	r0, #21
    39cc:	f005 fe64 	bl	9698 <digitalWrite>
    analogWrite(OUT5, 0);
    39d0:	2100      	movs	r1, #0
    39d2:	2016      	movs	r0, #22
    39d4:	f005 fce4 	bl	93a0 <analogWrite>
    analogWrite(OUT6, 0);
    39d8:	2100      	movs	r1, #0
    39da:	2017      	movs	r0, #23
    39dc:	f005 fce0 	bl	93a0 <analogWrite>
    analogWrite(OUT7, 0);
    39e0:	2100      	movs	r1, #0
    39e2:	2005      	movs	r0, #5
    39e4:	f005 fcdc 	bl	93a0 <analogWrite>
    analogWrite(OUT8, 0);
    39e8:	2100      	movs	r1, #0
    39ea:	2006      	movs	r0, #6
    39ec:	f005 fcd8 	bl	93a0 <analogWrite>
    outputstate++;
    39f0:	6823      	ldr	r3, [r4, #0]
    39f2:	3301      	adds	r3, #1
  if (outputstate > 10) {
    39f4:	2b0a      	cmp	r3, #10
    outputstate = 0;
    39f6:	bfc8      	it	gt
    39f8:	2300      	movgt	r3, #0
    39fa:	6023      	str	r3, [r4, #0]
}
    39fc:	bd10      	pop	{r4, pc}
    39fe:	bf00      	nop
    3a00:	1fffb208 	.word	0x1fffb208

00003a04 <dashupdate()>:
      Serial.print(p);
      Serial.print(" OUT7 ");
  */
}

void dashupdate() {
    3a04:	b570      	push	{r4, r5, r6, lr}
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial2_write((const uint8_t *)str, len);
    3a06:	48ba      	ldr	r0, [pc, #744]	; (3cf0 <dashupdate()+0x2ec>)
    3a08:	b082      	sub	sp, #8
    3a0a:	2109      	movs	r1, #9
    3a0c:	f006 f98a 	bl	9d24 <serial2_write>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3a10:	2022      	movs	r0, #34	; 0x22
    3a12:	f006 f90b 	bl	9c2c <serial2_putchar>
  Serial2.write("stat.txt=");
  Serial2.write(0x22);
  if (settings.ESSmode == 1) {
    3a16:	4bb7      	ldr	r3, [pc, #732]	; (3cf4 <dashupdate()+0x2f0>)
    3a18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    3a1c:	2b01      	cmp	r3, #1
    switch (bmsstatus) {
    3a1e:	4bb6      	ldr	r3, [pc, #728]	; (3cf8 <dashupdate()+0x2f4>)
    3a20:	781b      	ldrb	r3, [r3, #0]
  if (settings.ESSmode == 1) {
    3a22:	d009      	beq.n	3a38 <dashupdate()+0x34>
      case (Error):
        Serial2.print(" Error ");
        break;
    }
  } else {
    switch (bmsstatus) {
    3a24:	2b05      	cmp	r3, #5
    3a26:	d810      	bhi.n	3a4a <dashupdate()+0x46>
    3a28:	e8df f013 	tbh	[pc, r3, lsl #1]
    3a2c:	014d0148 	.word	0x014d0148
    3a30:	01570152 	.word	0x01570152
    3a34:	000b0143 	.word	0x000b0143
    switch (bmsstatus) {
    3a38:	2b00      	cmp	r3, #0
    3a3a:	f000 8153 	beq.w	3ce4 <dashupdate()+0x2e0>
    3a3e:	2b05      	cmp	r3, #5
    3a40:	d103      	bne.n	3a4a <dashupdate()+0x46>
					{ serial2_write(buffer, size); return size; }
    3a42:	48ae      	ldr	r0, [pc, #696]	; (3cfc <dashupdate()+0x2f8>)
    3a44:	2107      	movs	r1, #7
    3a46:	f006 f96d 	bl	9d24 <serial2_write>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3a4a:	2022      	movs	r0, #34	; 0x22
    3a4c:	f006 f8ee 	bl	9c2c <serial2_putchar>
    3a50:	20ff      	movs	r0, #255	; 0xff
    3a52:	f006 f8eb 	bl	9c2c <serial2_putchar>
    3a56:	20ff      	movs	r0, #255	; 0xff
    3a58:	f006 f8e8 	bl	9c2c <serial2_putchar>
  Serial2.write(0x22);
  Serial2.write(0xff);  // We always have to send this three lines after each command sent to the nextion display.
  Serial2.write(0xff);
  Serial2.write(0xff);
  Serial2.print("soc.val=");
  Serial2.print(SOC);
    3a5c:	4ca8      	ldr	r4, [pc, #672]	; (3d00 <dashupdate()+0x2fc>)
    3a5e:	20ff      	movs	r0, #255	; 0xff
    3a60:	f006 f8e4 	bl	9c2c <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3a64:	48a7      	ldr	r0, [pc, #668]	; (3d04 <dashupdate()+0x300>)
    3a66:	2108      	movs	r1, #8
    3a68:	f006 f95c 	bl	9d24 <serial2_write>
	size_t print(int n)				{ return print((long)n); }
    3a6c:	6821      	ldr	r1, [r4, #0]
    3a6e:	48a6      	ldr	r0, [pc, #664]	; (3d08 <dashupdate()+0x304>)
    3a70:	f004 ffd2 	bl	8a18 <Print::print(long)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3a74:	20ff      	movs	r0, #255	; 0xff
    3a76:	f006 f8d9 	bl	9c2c <serial2_putchar>
    3a7a:	20ff      	movs	r0, #255	; 0xff
    3a7c:	f006 f8d6 	bl	9c2c <serial2_putchar>
    3a80:	20ff      	movs	r0, #255	; 0xff
    3a82:	f006 f8d3 	bl	9c2c <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3a86:	48a1      	ldr	r0, [pc, #644]	; (3d0c <dashupdate()+0x308>)
    3a88:	2109      	movs	r1, #9
    3a8a:	f006 f94b 	bl	9d24 <serial2_write>
    3a8e:	6821      	ldr	r1, [r4, #0]
    3a90:	489d      	ldr	r0, [pc, #628]	; (3d08 <dashupdate()+0x304>)
    3a92:	f004 ffc1 	bl	8a18 <Print::print(long)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3a96:	20ff      	movs	r0, #255	; 0xff
    3a98:	f006 f8c8 	bl	9c2c <serial2_putchar>
    3a9c:	20ff      	movs	r0, #255	; 0xff
    3a9e:	f006 f8c5 	bl	9c2c <serial2_putchar>
    3aa2:	20ff      	movs	r0, #255	; 0xff
    3aa4:	f006 f8c2 	bl	9c2c <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3aa8:	4899      	ldr	r0, [pc, #612]	; (3d10 <dashupdate()+0x30c>)
    3aaa:	210c      	movs	r1, #12
    3aac:	f006 f93a 	bl	9d24 <serial2_write>
  Serial2.print(SOC);
  Serial2.write(0xff);  // We always have to send this three lines after each command sent to the nextion display.
  Serial2.write(0xff);
  Serial2.write(0xff);
  Serial2.print("current.val=");
  Serial2.print(currentact / 100, 0);
    3ab0:	4b98      	ldr	r3, [pc, #608]	; (3d14 <dashupdate()+0x310>)
    3ab2:	4999      	ldr	r1, [pc, #612]	; (3d18 <dashupdate()+0x314>)
    3ab4:	6818      	ldr	r0, [r3, #0]
    3ab6:	f008 fbf5 	bl	c2a4 <__aeabi_fdiv>
    3aba:	f008 f91b 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    3abe:	2400      	movs	r4, #0
    3ac0:	4602      	mov	r2, r0
    3ac2:	460b      	mov	r3, r1
    3ac4:	9400      	str	r4, [sp, #0]
    3ac6:	4890      	ldr	r0, [pc, #576]	; (3d08 <dashupdate()+0x304>)
    3ac8:	f004 ffd2 	bl	8a70 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3acc:	20ff      	movs	r0, #255	; 0xff
    3ace:	f006 f8ad 	bl	9c2c <serial2_putchar>
    3ad2:	20ff      	movs	r0, #255	; 0xff
    3ad4:	f006 f8aa 	bl	9c2c <serial2_putchar>
    3ad8:	20ff      	movs	r0, #255	; 0xff
    3ada:	f006 f8a7 	bl	9c2c <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3ade:	2109      	movs	r1, #9
    3ae0:	488e      	ldr	r0, [pc, #568]	; (3d1c <dashupdate()+0x318>)
    3ae2:	f006 f91f 	bl	9d24 <serial2_write>
  Serial2.write(0xff);  // We always have to send this three lines after each command sent to the nextion display.
  Serial2.write(0xff);
  Serial2.write(0xff);
  Serial2.print("temp.val=");
  Serial2.print(bms.getAvgTemperature(), 0);
    3ae6:	488e      	ldr	r0, [pc, #568]	; (3d20 <dashupdate()+0x31c>)
    3ae8:	f7fd f8f0 	bl	ccc <BMSModuleManager::getAvgTemperature()>
    3aec:	f008 f902 	bl	bcf4 <__aeabi_f2d>
    3af0:	9400      	str	r4, [sp, #0]
    3af2:	4602      	mov	r2, r0
    3af4:	460b      	mov	r3, r1
    3af6:	4884      	ldr	r0, [pc, #528]	; (3d08 <dashupdate()+0x304>)
    3af8:	f004 ffba 	bl	8a70 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3afc:	20ff      	movs	r0, #255	; 0xff
    3afe:	f006 f895 	bl	9c2c <serial2_putchar>
    3b02:	20ff      	movs	r0, #255	; 0xff
    3b04:	f006 f892 	bl	9c2c <serial2_putchar>
    3b08:	20ff      	movs	r0, #255	; 0xff
    3b0a:	f006 f88f 	bl	9c2c <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3b0e:	210c      	movs	r1, #12
    3b10:	4884      	ldr	r0, [pc, #528]	; (3d24 <dashupdate()+0x320>)
    3b12:	f006 f907 	bl	9d24 <serial2_write>
  Serial2.write(0xff);  // We always have to send this three lines after each command sent to the nextion display.
  Serial2.write(0xff);
  Serial2.write(0xff);
  Serial2.print("templow.val=");
  Serial2.print(bms.getLowTemperature(), 0);
    3b16:	4882      	ldr	r0, [pc, #520]	; (3d20 <dashupdate()+0x31c>)
    3b18:	f7fd f936 	bl	d88 <BMSModuleManager::getLowTemperature()>
    3b1c:	f008 f8ea 	bl	bcf4 <__aeabi_f2d>
    3b20:	9400      	str	r4, [sp, #0]
    3b22:	4602      	mov	r2, r0
    3b24:	460b      	mov	r3, r1
    3b26:	4878      	ldr	r0, [pc, #480]	; (3d08 <dashupdate()+0x304>)
    3b28:	f004 ffa2 	bl	8a70 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3b2c:	20ff      	movs	r0, #255	; 0xff
    3b2e:	f006 f87d 	bl	9c2c <serial2_putchar>
    3b32:	20ff      	movs	r0, #255	; 0xff
    3b34:	f006 f87a 	bl	9c2c <serial2_putchar>
    3b38:	20ff      	movs	r0, #255	; 0xff
    3b3a:	f006 f877 	bl	9c2c <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3b3e:	210d      	movs	r1, #13
    3b40:	4879      	ldr	r0, [pc, #484]	; (3d28 <dashupdate()+0x324>)
    3b42:	f006 f8ef 	bl	9d24 <serial2_write>
  Serial2.write(0xff);  // We always have to send this three lines after each command sent to the nextion display.
  Serial2.write(0xff);
  Serial2.write(0xff);
  Serial2.print("temphigh.val=");
  Serial2.print(bms.getHighTemperature(), 0);
    3b46:	4876      	ldr	r0, [pc, #472]	; (3d20 <dashupdate()+0x31c>)
    3b48:	f7fd f91c 	bl	d84 <BMSModuleManager::getHighTemperature()>
    3b4c:	f008 f8d2 	bl	bcf4 <__aeabi_f2d>
    3b50:	9400      	str	r4, [sp, #0]
    3b52:	4602      	mov	r2, r0
    3b54:	460b      	mov	r3, r1
    3b56:	486c      	ldr	r0, [pc, #432]	; (3d08 <dashupdate()+0x304>)
    3b58:	f004 ff8a 	bl	8a70 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3b5c:	20ff      	movs	r0, #255	; 0xff
    3b5e:	f006 f865 	bl	9c2c <serial2_putchar>
    3b62:	20ff      	movs	r0, #255	; 0xff
    3b64:	f006 f862 	bl	9c2c <serial2_putchar>
    3b68:	20ff      	movs	r0, #255	; 0xff
    3b6a:	f006 f85f 	bl	9c2c <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3b6e:	2109      	movs	r1, #9
    3b70:	486e      	ldr	r0, [pc, #440]	; (3d2c <dashupdate()+0x328>)
    3b72:	f006 f8d7 	bl	9d24 <serial2_write>
  Serial2.write(0xff);  // We always have to send this three lines after each command sent to the nextion display.
  Serial2.write(0xff);
  Serial2.write(0xff);
  Serial2.print("volt.val=");
  Serial2.print(bms.getPackVoltage() * 10, 0);
    3b76:	486a      	ldr	r0, [pc, #424]	; (3d20 <dashupdate()+0x31c>)
    3b78:	f7fd f876 	bl	c68 <BMSModuleManager::getPackVoltage()>
    3b7c:	496c      	ldr	r1, [pc, #432]	; (3d30 <dashupdate()+0x32c>)
    3b7e:	f008 fadd 	bl	c13c <__aeabi_fmul>
    3b82:	f008 f8b7 	bl	bcf4 <__aeabi_f2d>
    3b86:	9400      	str	r4, [sp, #0]
    3b88:	4602      	mov	r2, r0
    3b8a:	460b      	mov	r3, r1
    3b8c:	485e      	ldr	r0, [pc, #376]	; (3d08 <dashupdate()+0x304>)
    3b8e:	f004 ff6f 	bl	8a70 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3b92:	20ff      	movs	r0, #255	; 0xff
    3b94:	f006 f84a 	bl	9c2c <serial2_putchar>
    3b98:	20ff      	movs	r0, #255	; 0xff
    3b9a:	f006 f847 	bl	9c2c <serial2_putchar>
    3b9e:	20ff      	movs	r0, #255	; 0xff
    3ba0:	f006 f844 	bl	9c2c <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3ba4:	210c      	movs	r1, #12
    3ba6:	4863      	ldr	r0, [pc, #396]	; (3d34 <dashupdate()+0x330>)
    3ba8:	f006 f8bc 	bl	9d24 <serial2_write>
  Serial2.write(0xff);  // We always have to send this three lines after each command sent to the nextion display.
  Serial2.write(0xff);
  Serial2.write(0xff);
  Serial2.print("lowcell.val=");
  Serial2.print(bms.getLowCellVolt() * 1000, 0);
    3bac:	485c      	ldr	r0, [pc, #368]	; (3d20 <dashupdate()+0x31c>)
    3bae:	f7fd f80d 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    3bb2:	4961      	ldr	r1, [pc, #388]	; (3d38 <dashupdate()+0x334>)
    3bb4:	f008 fac2 	bl	c13c <__aeabi_fmul>
    3bb8:	f008 f89c 	bl	bcf4 <__aeabi_f2d>
    3bbc:	9400      	str	r4, [sp, #0]
    3bbe:	4602      	mov	r2, r0
    3bc0:	460b      	mov	r3, r1
    3bc2:	4851      	ldr	r0, [pc, #324]	; (3d08 <dashupdate()+0x304>)
    3bc4:	f004 ff54 	bl	8a70 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3bc8:	20ff      	movs	r0, #255	; 0xff
    3bca:	f006 f82f 	bl	9c2c <serial2_putchar>
    3bce:	20ff      	movs	r0, #255	; 0xff
    3bd0:	f006 f82c 	bl	9c2c <serial2_putchar>
    3bd4:	20ff      	movs	r0, #255	; 0xff
    3bd6:	f006 f829 	bl	9c2c <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3bda:	210d      	movs	r1, #13
    3bdc:	4857      	ldr	r0, [pc, #348]	; (3d3c <dashupdate()+0x338>)
    3bde:	f006 f8a1 	bl	9d24 <serial2_write>
  Serial2.write(0xff);  // We always have to send this three lines after each command sent to the nextion display.
  Serial2.write(0xff);
  Serial2.write(0xff);
  Serial2.print("highcell.val=");
  Serial2.print(bms.getHighCellVolt() * 1000, 0);
    3be2:	484f      	ldr	r0, [pc, #316]	; (3d20 <dashupdate()+0x31c>)
    3be4:	f7fd f81a 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    3be8:	4953      	ldr	r1, [pc, #332]	; (3d38 <dashupdate()+0x334>)
    3bea:	f008 faa7 	bl	c13c <__aeabi_fmul>
    3bee:	f008 f881 	bl	bcf4 <__aeabi_f2d>
    3bf2:	9400      	str	r4, [sp, #0]
    3bf4:	4602      	mov	r2, r0
    3bf6:	460b      	mov	r3, r1
    3bf8:	4843      	ldr	r0, [pc, #268]	; (3d08 <dashupdate()+0x304>)
    3bfa:	f004 ff39 	bl	8a70 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3bfe:	20ff      	movs	r0, #255	; 0xff
    3c00:	f006 f814 	bl	9c2c <serial2_putchar>
    3c04:	20ff      	movs	r0, #255	; 0xff
    3c06:	f006 f811 	bl	9c2c <serial2_putchar>
    3c0a:	20ff      	movs	r0, #255	; 0xff
    3c0c:	f006 f80e 	bl	9c2c <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3c10:	210e      	movs	r1, #14
    3c12:	484b      	ldr	r0, [pc, #300]	; (3d40 <dashupdate()+0x33c>)
    3c14:	f006 f886 	bl	9d24 <serial2_write>
  Serial2.write(0xff);  // We always have to send this three lines after each command sent to the nextion display.
  Serial2.write(0xff);
  Serial2.write(0xff);
  Serial2.print("celldelta.val=");
  Serial2.print(bms.getHighCellVolt() * 1000 - bms.getLowCellVolt() * 1000, 0);
    3c18:	4841      	ldr	r0, [pc, #260]	; (3d20 <dashupdate()+0x31c>)
    3c1a:	f7fc ffff 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    3c1e:	4605      	mov	r5, r0
    3c20:	483f      	ldr	r0, [pc, #252]	; (3d20 <dashupdate()+0x31c>)
    3c22:	f7fc ffd3 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    3c26:	4944      	ldr	r1, [pc, #272]	; (3d38 <dashupdate()+0x334>)
    3c28:	4606      	mov	r6, r0
    3c2a:	4628      	mov	r0, r5
    3c2c:	f008 fa86 	bl	c13c <__aeabi_fmul>
    3c30:	4941      	ldr	r1, [pc, #260]	; (3d38 <dashupdate()+0x334>)
    3c32:	4605      	mov	r5, r0
    3c34:	4630      	mov	r0, r6
    3c36:	f008 fa81 	bl	c13c <__aeabi_fmul>
    3c3a:	4601      	mov	r1, r0
    3c3c:	4628      	mov	r0, r5
    3c3e:	f008 f973 	bl	bf28 <__aeabi_fsub>
    3c42:	f008 f857 	bl	bcf4 <__aeabi_f2d>
    3c46:	9400      	str	r4, [sp, #0]
    3c48:	4602      	mov	r2, r0
    3c4a:	460b      	mov	r3, r1
    3c4c:	482e      	ldr	r0, [pc, #184]	; (3d08 <dashupdate()+0x304>)
    3c4e:	f004 ff0f 	bl	8a70 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3c52:	20ff      	movs	r0, #255	; 0xff
    3c54:	f005 ffea 	bl	9c2c <serial2_putchar>
    3c58:	20ff      	movs	r0, #255	; 0xff
    3c5a:	f005 ffe7 	bl	9c2c <serial2_putchar>
    3c5e:	20ff      	movs	r0, #255	; 0xff
    3c60:	f005 ffe4 	bl	9c2c <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3c64:	4837      	ldr	r0, [pc, #220]	; (3d44 <dashupdate()+0x340>)
    3c66:	210c      	movs	r1, #12
    3c68:	f006 f85c 	bl	9d24 <serial2_write>
  Serial2.write(0xff);  // We always have to send this three lines after each command sent to the nextion display.
  Serial2.write(0xff);
  Serial2.write(0xff);
  Serial2.print("cellbal.val=");
  Serial2.print(balancecells);
    3c6c:	4b36      	ldr	r3, [pc, #216]	; (3d48 <dashupdate()+0x344>)
	size_t print(int n)				{ return print((long)n); }
    3c6e:	4826      	ldr	r0, [pc, #152]	; (3d08 <dashupdate()+0x304>)
    3c70:	6819      	ldr	r1, [r3, #0]
    3c72:	f004 fed1 	bl	8a18 <Print::print(long)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3c76:	20ff      	movs	r0, #255	; 0xff
    3c78:	f005 ffd8 	bl	9c2c <serial2_putchar>
    3c7c:	20ff      	movs	r0, #255	; 0xff
    3c7e:	f005 ffd5 	bl	9c2c <serial2_putchar>
    3c82:	20ff      	movs	r0, #255	; 0xff
    3c84:	f005 ffd2 	bl	9c2c <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3c88:	4830      	ldr	r0, [pc, #192]	; (3d4c <dashupdate()+0x348>)
    3c8a:	2109      	movs	r1, #9
    3c8c:	f006 f84a 	bl	9d24 <serial2_write>
  Serial2.write(0xff);  // We always have to send this three lines after each command sent to the nextion display.
  Serial2.write(0xff);
  Serial2.write(0xff);
  Serial2.print("firm.val=");
  Serial2.print(firmver);
    3c90:	4b2f      	ldr	r3, [pc, #188]	; (3d50 <dashupdate()+0x34c>)
    3c92:	481d      	ldr	r0, [pc, #116]	; (3d08 <dashupdate()+0x304>)
    3c94:	6819      	ldr	r1, [r3, #0]
    3c96:	f004 febf 	bl	8a18 <Print::print(long)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3c9a:	20ff      	movs	r0, #255	; 0xff
    3c9c:	f005 ffc6 	bl	9c2c <serial2_putchar>
    3ca0:	20ff      	movs	r0, #255	; 0xff
    3ca2:	f005 ffc3 	bl	9c2c <serial2_putchar>
    3ca6:	20ff      	movs	r0, #255	; 0xff
  Serial2.write(0xff);  // We always have to send this three lines after each command sent to the nextion display.
  Serial2.write(0xff);
  Serial2.write(0xff);
}
    3ca8:	b002      	add	sp, #8
    3caa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3cae:	f005 bfbd 	b.w	9c2c <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3cb2:	4828      	ldr	r0, [pc, #160]	; (3d54 <dashupdate()+0x350>)
    3cb4:	210b      	movs	r1, #11
    3cb6:	f006 f835 	bl	9d24 <serial2_write>
    3cba:	e6c6      	b.n	3a4a <dashupdate()+0x46>
    3cbc:	4826      	ldr	r0, [pc, #152]	; (3d58 <dashupdate()+0x354>)
    3cbe:	2106      	movs	r1, #6
    3cc0:	f006 f830 	bl	9d24 <serial2_write>
    3cc4:	e6c1      	b.n	3a4a <dashupdate()+0x46>
    3cc6:	4825      	ldr	r0, [pc, #148]	; (3d5c <dashupdate()+0x358>)
    3cc8:	2107      	movs	r1, #7
    3cca:	f006 f82b 	bl	9d24 <serial2_write>
    3cce:	e6bc      	b.n	3a4a <dashupdate()+0x46>
    3cd0:	4823      	ldr	r0, [pc, #140]	; (3d60 <dashupdate()+0x35c>)
    3cd2:	2107      	movs	r1, #7
    3cd4:	f006 f826 	bl	9d24 <serial2_write>
    3cd8:	e6b7      	b.n	3a4a <dashupdate()+0x46>
    3cda:	4822      	ldr	r0, [pc, #136]	; (3d64 <dashupdate()+0x360>)
    3cdc:	2108      	movs	r1, #8
    3cde:	f006 f821 	bl	9d24 <serial2_write>
    3ce2:	e6b2      	b.n	3a4a <dashupdate()+0x46>
    3ce4:	4820      	ldr	r0, [pc, #128]	; (3d68 <dashupdate()+0x364>)
    3ce6:	2108      	movs	r1, #8
    3ce8:	f006 f81c 	bl	9d24 <serial2_write>
    3cec:	e6ad      	b.n	3a4a <dashupdate()+0x46>
    3cee:	bf00      	nop
    3cf0:	000135c0 	.word	0x000135c0
    3cf4:	1fffb20c 	.word	0x1fffb20c
    3cf8:	1fffb008 	.word	0x1fffb008
    3cfc:	0001334c 	.word	0x0001334c
    3d00:	1fff8724 	.word	0x1fff8724
    3d04:	000135d8 	.word	0x000135d8
    3d08:	1fff87ac 	.word	0x1fff87ac
    3d0c:	000135e4 	.word	0x000135e4
    3d10:	000135f0 	.word	0x000135f0
    3d14:	1fffb0fc 	.word	0x1fffb0fc
    3d18:	42c80000 	.word	0x42c80000
    3d1c:	00013600 	.word	0x00013600
    3d20:	1fff8fe0 	.word	0x1fff8fe0
    3d24:	0001360c 	.word	0x0001360c
    3d28:	0001361c 	.word	0x0001361c
    3d2c:	0001362c 	.word	0x0001362c
    3d30:	41200000 	.word	0x41200000
    3d34:	00013638 	.word	0x00013638
    3d38:	447a0000 	.word	0x447a0000
    3d3c:	00013648 	.word	0x00013648
    3d40:	00013658 	.word	0x00013658
    3d44:	00013668 	.word	0x00013668
    3d48:	1fff8fdc 	.word	0x1fff8fdc
    3d4c:	00013678 	.word	0x00013678
    3d50:	1fff8750 	.word	0x1fff8750
    3d54:	0001332c 	.word	0x0001332c
    3d58:	0001331c 	.word	0x0001331c
    3d5c:	00013324 	.word	0x00013324
    3d60:	00013338 	.word	0x00013338
    3d64:	00013340 	.word	0x00013340
    3d68:	000135cc 	.word	0x000135cc

00003d6c <chargercomms()>:

void chargercomms() {
    3d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (settings.chargertype == Elcon) {
    3d6e:	4d8b      	ldr	r5, [pc, #556]	; (3f9c <chargercomms()+0x230>)
    3d70:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
    3d74:	2b04      	cmp	r3, #4
    3d76:	d007      	beq.n	3d88 <chargercomms()+0x1c>

    Can0.write(msg);
    msg.ext = 0;
  }

  if (settings.chargertype == Eltek) {
    3d78:	2b03      	cmp	r3, #3
    3d7a:	d033      	beq.n	3de4 <chargercomms()+0x78>
    msg.buf[5] = lowByte(chargecurrent / ncharger);
    msg.buf[6] = highByte(chargecurrent / ncharger);

    Can0.write(msg);
  }
  if (settings.chargertype == BrusaNLG5) {
    3d7c:	2b01      	cmp	r3, #1
    3d7e:	d05b      	beq.n	3e38 <chargercomms()+0xcc>
    msg.buf[4] = lowByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    msg.buf[5] = highByte(chargecurrent / ncharger);
    msg.buf[6] = lowByte(chargecurrent / ncharger);
    Can0.write(msg);
  }
  if (settings.chargertype == ChevyVolt) {
    3d80:	2b02      	cmp	r3, #2
    3d82:	f000 80cd 	beq.w	3f20 <chargercomms()+0x1b4>
      msg.buf[2] = highByte(400);
      msg.buf[3] = lowByte(400);
    }
    Can0.write(msg);
  }
}
    3d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    msg.id = 0x1806E5F4;  //broadcast to all Elteks
    3d88:	4c85      	ldr	r4, [pc, #532]	; (3fa0 <chargercomms()+0x234>)
    3d8a:	4a86      	ldr	r2, [pc, #536]	; (3fa4 <chargercomms()+0x238>)
    msg.ext = 1;
    3d8c:	88e3      	ldrh	r3, [r4, #6]
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    3d8e:	6d28      	ldr	r0, [r5, #80]	; 0x50
    msg.id = 0x1806E5F4;  //broadcast to all Elteks
    3d90:	6022      	str	r2, [r4, #0]
    msg.ext = 1;
    3d92:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    3d96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    3d9a:	f043 0301 	orr.w	r3, r3, #1
    3d9e:	80e3      	strh	r3, [r4, #6]
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    3da0:	f008 f978 	bl	c094 <__aeabi_i2f>
    3da4:	6969      	ldr	r1, [r5, #20]
    3da6:	f008 f9c9 	bl	c13c <__aeabi_fmul>
    3daa:	497f      	ldr	r1, [pc, #508]	; (3fa8 <chargercomms()+0x23c>)
    3dac:	f008 f9c6 	bl	c13c <__aeabi_fmul>
    3db0:	f008 fbb0 	bl	c514 <__aeabi_f2uiz>
    msg.buf[2] = highByte(chargecurrent / ncharger);
    3db4:	4b7d      	ldr	r3, [pc, #500]	; (3fac <chargercomms()+0x240>)
    3db6:	4a7e      	ldr	r2, [pc, #504]	; (3fb0 <chargercomms()+0x244>)
    3db8:	681b      	ldr	r3, [r3, #0]
    3dba:	6812      	ldr	r2, [r2, #0]
    3dbc:	fb93 f3f2 	sdiv	r3, r3, r2
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    3dc0:	ba40      	rev16	r0, r0
    msg.buf[2] = highByte(chargecurrent / ncharger);
    3dc2:	ba5b      	rev16	r3, r3
    msg.buf[4] = 0x00;
    3dc4:	2600      	movs	r6, #0
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    3dc6:	8120      	strh	r0, [r4, #8]
    Can0.write(msg);
    3dc8:	4621      	mov	r1, r4
    3dca:	487a      	ldr	r0, [pc, #488]	; (3fb4 <chargercomms()+0x248>)
    msg.buf[2] = highByte(chargecurrent / ncharger);
    3dcc:	8163      	strh	r3, [r4, #10]
    msg.buf[4] = 0x00;
    3dce:	60e6      	str	r6, [r4, #12]
    Can0.write(msg);
    3dd0:	f003 fc24 	bl	761c <FlexCAN::write(CAN_message_t const&)>
    msg.ext = 0;
    3dd4:	79a2      	ldrb	r2, [r4, #6]
  if (settings.chargertype == Eltek) {
    3dd6:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
    msg.ext = 0;
    3dda:	f366 0200 	bfi	r2, r6, #0, #1
  if (settings.chargertype == Eltek) {
    3dde:	2b03      	cmp	r3, #3
    msg.ext = 0;
    3de0:	71a2      	strb	r2, [r4, #6]
  if (settings.chargertype == Eltek) {
    3de2:	d1cb      	bne.n	3d7c <chargercomms()+0x10>
    msg.id = 0x2FF;  //broadcast to all Elteks
    3de4:	4c6e      	ldr	r4, [pc, #440]	; (3fa0 <chargercomms()+0x234>)
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    3de6:	6d28      	ldr	r0, [r5, #80]	; 0x50
    msg.buf[2] = highByte(1000);
    3de8:	72a3      	strb	r3, [r4, #10]
    msg.id = 0x2FF;  //broadcast to all Elteks
    3dea:	f240 22ff 	movw	r2, #767	; 0x2ff
    msg.buf[0] = 0x01;
    3dee:	f64e 0301 	movw	r3, #59393	; 0xe801
    msg.id = 0x2FF;  //broadcast to all Elteks
    3df2:	6022      	str	r2, [r4, #0]
    msg.len = 7;
    3df4:	2207      	movs	r2, #7
    3df6:	71e2      	strb	r2, [r4, #7]
    msg.buf[0] = 0x01;
    3df8:	8123      	strh	r3, [r4, #8]
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    3dfa:	f008 f94b 	bl	c094 <__aeabi_i2f>
    3dfe:	6969      	ldr	r1, [r5, #20]
    3e00:	f008 f99c 	bl	c13c <__aeabi_fmul>
    3e04:	4968      	ldr	r1, [pc, #416]	; (3fa8 <chargercomms()+0x23c>)
    3e06:	f008 f999 	bl	c13c <__aeabi_fmul>
    3e0a:	f008 fb83 	bl	c514 <__aeabi_f2uiz>
    msg.buf[5] = lowByte(chargecurrent / ncharger);
    3e0e:	4a68      	ldr	r2, [pc, #416]	; (3fb0 <chargercomms()+0x244>)
    3e10:	4b66      	ldr	r3, [pc, #408]	; (3fac <chargercomms()+0x240>)
    3e12:	6811      	ldr	r1, [r2, #0]
    3e14:	681b      	ldr	r3, [r3, #0]
    3e16:	fb93 f3f1 	sdiv	r3, r3, r1
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    3e1a:	b280      	uxth	r0, r0
    msg.buf[4] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    3e1c:	0a02      	lsrs	r2, r0, #8
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    3e1e:	72e0      	strb	r0, [r4, #11]
    msg.buf[5] = lowByte(chargecurrent / ncharger);
    3e20:	7363      	strb	r3, [r4, #13]
    Can0.write(msg);
    3e22:	4864      	ldr	r0, [pc, #400]	; (3fb4 <chargercomms()+0x248>)
    msg.buf[4] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    3e24:	7322      	strb	r2, [r4, #12]
    msg.buf[6] = highByte(chargecurrent / ncharger);
    3e26:	121b      	asrs	r3, r3, #8
    Can0.write(msg);
    3e28:	4621      	mov	r1, r4
    msg.buf[6] = highByte(chargecurrent / ncharger);
    3e2a:	73a3      	strb	r3, [r4, #14]
    Can0.write(msg);
    3e2c:	f003 fbf6 	bl	761c <FlexCAN::write(CAN_message_t const&)>
  if (settings.chargertype == BrusaNLG5) {
    3e30:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
    3e34:	2b01      	cmp	r3, #1
    3e36:	d1a3      	bne.n	3d80 <chargercomms()+0x14>
    msg.id = chargerid1;
    3e38:	4b5f      	ldr	r3, [pc, #380]	; (3fb8 <chargercomms()+0x24c>)
    3e3a:	4c59      	ldr	r4, [pc, #356]	; (3fa0 <chargercomms()+0x234>)
    3e3c:	6819      	ldr	r1, [r3, #0]
    3e3e:	6021      	str	r1, [r4, #0]
    msg.len = 7;
    3e40:	2207      	movs	r2, #7
    msg.buf[0] = 0x80;
    3e42:	2380      	movs	r3, #128	; 0x80
    if (digitalRead(IN2) == LOW)  //Gen OFF
    3e44:	2010      	movs	r0, #16
    msg.len = 7;
    3e46:	71e2      	strb	r2, [r4, #7]
    msg.buf[0] = 0x80;
    3e48:	7223      	strb	r3, [r4, #8]
    if (digitalRead(IN2) == LOW)  //Gen OFF
    3e4a:	f005 fc4b 	bl	96e4 <digitalRead>
    3e4e:	2800      	cmp	r0, #0
    3e50:	f000 8096 	beq.w	3f80 <chargercomms()+0x214>
      msg.buf[1] = highByte(maxac2 * 10);
    3e54:	4b59      	ldr	r3, [pc, #356]	; (3fbc <chargercomms()+0x250>)
    3e56:	681b      	ldr	r3, [r3, #0]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    3e58:	4e54      	ldr	r6, [pc, #336]	; (3fac <chargercomms()+0x240>)
    3e5a:	4f55      	ldr	r7, [pc, #340]	; (3fb0 <chargercomms()+0x244>)
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    3e5c:	6d28      	ldr	r0, [r5, #80]	; 0x50
      msg.buf[1] = highByte(maxac2 * 10);
    3e5e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3e62:	005a      	lsls	r2, r3, #1
      msg.buf[2] = lowByte(maxac2 * 10);
    3e64:	b2d2      	uxtb	r2, r2
      msg.buf[1] = highByte(maxac2 * 10);
    3e66:	f3c3 13c7 	ubfx	r3, r3, #7, #8
      msg.buf[1] = highByte(maxac1 * 10);
    3e6a:	7263      	strb	r3, [r4, #9]
      msg.buf[2] = lowByte(maxac1 * 10);
    3e6c:	72a2      	strb	r2, [r4, #10]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    3e6e:	6833      	ldr	r3, [r6, #0]
    3e70:	683a      	ldr	r2, [r7, #0]
    3e72:	fb93 f3f2 	sdiv	r3, r3, r2
    msg.buf[6] = lowByte(chargecurrent / ncharger);
    3e76:	73a3      	strb	r3, [r4, #14]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    3e78:	121b      	asrs	r3, r3, #8
    3e7a:	7363      	strb	r3, [r4, #13]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    3e7c:	f008 f90a 	bl	c094 <__aeabi_i2f>
    3e80:	6969      	ldr	r1, [r5, #20]
    3e82:	f008 f95b 	bl	c13c <__aeabi_fmul>
    3e86:	4b4e      	ldr	r3, [pc, #312]	; (3fc0 <chargercomms()+0x254>)
    3e88:	6819      	ldr	r1, [r3, #0]
    3e8a:	f008 f84d 	bl	bf28 <__aeabi_fsub>
    3e8e:	4946      	ldr	r1, [pc, #280]	; (3fa8 <chargercomms()+0x23c>)
    3e90:	f008 f954 	bl	c13c <__aeabi_fmul>
    3e94:	f008 fb3e 	bl	c514 <__aeabi_f2uiz>
    msg.buf[4] = lowByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    3e98:	7320      	strb	r0, [r4, #12]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    3e9a:	f3c0 2007 	ubfx	r0, r0, #8, #8
    Can0.write(msg);
    3e9e:	4940      	ldr	r1, [pc, #256]	; (3fa0 <chargercomms()+0x234>)
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    3ea0:	72e0      	strb	r0, [r4, #11]
    Can0.write(msg);
    3ea2:	4844      	ldr	r0, [pc, #272]	; (3fb4 <chargercomms()+0x248>)
    3ea4:	f003 fbba 	bl	761c <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3ea8:	2002      	movs	r0, #2
    3eaa:	f005 fc85 	bl	97b8 <delay>
    msg.id = chargerid2;
    3eae:	4b45      	ldr	r3, [pc, #276]	; (3fc4 <chargercomms()+0x258>)
    3eb0:	681b      	ldr	r3, [r3, #0]
    3eb2:	6023      	str	r3, [r4, #0]
    msg.len = 7;
    3eb4:	2307      	movs	r3, #7
    3eb6:	71e3      	strb	r3, [r4, #7]
    if (digitalRead(IN2) == LOW)  //Gen OFF
    3eb8:	2010      	movs	r0, #16
    msg.buf[0] = 0x80;
    3eba:	2380      	movs	r3, #128	; 0x80
    3ebc:	7223      	strb	r3, [r4, #8]
    if (digitalRead(IN2) == LOW)  //Gen OFF
    3ebe:	f005 fc11 	bl	96e4 <digitalRead>
    3ec2:	2800      	cmp	r0, #0
    3ec4:	d168      	bne.n	3f98 <chargercomms()+0x22c>
      msg.buf[1] = highByte(maxac1 * 10);
    3ec6:	4b40      	ldr	r3, [pc, #256]	; (3fc8 <chargercomms()+0x25c>)
      msg.buf[1] = highByte(maxac2 * 10);
    3ec8:	681b      	ldr	r3, [r3, #0]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    3eca:	6d28      	ldr	r0, [r5, #80]	; 0x50
      msg.buf[1] = highByte(maxac2 * 10);
    3ecc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3ed0:	005a      	lsls	r2, r3, #1
      msg.buf[2] = lowByte(maxac2 * 10);
    3ed2:	b2d2      	uxtb	r2, r2
      msg.buf[1] = highByte(maxac2 * 10);
    3ed4:	f3c3 13c7 	ubfx	r3, r3, #7, #8
      msg.buf[2] = lowByte(maxac1 * 10);
    3ed8:	72a2      	strb	r2, [r4, #10]
      msg.buf[1] = highByte(maxac1 * 10);
    3eda:	7263      	strb	r3, [r4, #9]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    3edc:	f008 f8da 	bl	c094 <__aeabi_i2f>
    3ee0:	6969      	ldr	r1, [r5, #20]
    3ee2:	f008 f92b 	bl	c13c <__aeabi_fmul>
    3ee6:	4b39      	ldr	r3, [pc, #228]	; (3fcc <chargercomms()+0x260>)
    3ee8:	6819      	ldr	r1, [r3, #0]
    3eea:	f008 f81d 	bl	bf28 <__aeabi_fsub>
    3eee:	492e      	ldr	r1, [pc, #184]	; (3fa8 <chargercomms()+0x23c>)
    3ef0:	f008 f924 	bl	c13c <__aeabi_fmul>
    3ef4:	f008 fb0e 	bl	c514 <__aeabi_f2uiz>
    msg.buf[4] = lowByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    3ef8:	7320      	strb	r0, [r4, #12]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    3efa:	f3c0 2007 	ubfx	r0, r0, #8, #8
    msg.buf[5] = highByte(chargecurrent / ncharger);
    3efe:	683a      	ldr	r2, [r7, #0]
    3f00:	6833      	ldr	r3, [r6, #0]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    3f02:	72e0      	strb	r0, [r4, #11]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    3f04:	fb93 f3f2 	sdiv	r3, r3, r2
    Can0.write(msg);
    3f08:	4925      	ldr	r1, [pc, #148]	; (3fa0 <chargercomms()+0x234>)
    3f0a:	482a      	ldr	r0, [pc, #168]	; (3fb4 <chargercomms()+0x248>)
    msg.buf[6] = lowByte(chargecurrent / ncharger);
    3f0c:	73a3      	strb	r3, [r4, #14]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    3f0e:	121a      	asrs	r2, r3, #8
    3f10:	7362      	strb	r2, [r4, #13]
    Can0.write(msg);
    3f12:	f003 fb83 	bl	761c <FlexCAN::write(CAN_message_t const&)>
  if (settings.chargertype == ChevyVolt) {
    3f16:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
    3f1a:	2b02      	cmp	r3, #2
    3f1c:	f47f af33 	bne.w	3d86 <chargercomms()+0x1a>
    msg.id = 0x30E;
    3f20:	4c1f      	ldr	r4, [pc, #124]	; (3fa0 <chargercomms()+0x234>)
    Can0.write(msg);
    3f22:	4824      	ldr	r0, [pc, #144]	; (3fb4 <chargercomms()+0x248>)
    msg.buf[0] = 0x02;  //only HV charging , 0x03 hv and 12V charging
    3f24:	7223      	strb	r3, [r4, #8]
    msg.id = 0x30E;
    3f26:	f240 320e 	movw	r2, #782	; 0x30e
    3f2a:	6022      	str	r2, [r4, #0]
    Can0.write(msg);
    3f2c:	4621      	mov	r1, r4
    msg.len = 1;
    3f2e:	2201      	movs	r2, #1
    3f30:	71e2      	strb	r2, [r4, #7]
    Can0.write(msg);
    3f32:	f003 fb73 	bl	761c <FlexCAN::write(CAN_message_t const&)>
    if ((chargecurrent * 2) > 255) {
    3f36:	4b1d      	ldr	r3, [pc, #116]	; (3fac <chargercomms()+0x240>)
    if ((settings.ChargeVsetpoint * settings.Scells) > 200) {
    3f38:	6d28      	ldr	r0, [r5, #80]	; 0x50
    if ((chargecurrent * 2) > 255) {
    3f3a:	681b      	ldr	r3, [r3, #0]
    3f3c:	005b      	lsls	r3, r3, #1
    3f3e:	2bff      	cmp	r3, #255	; 0xff
    msg.len = 4;
    3f40:	f04f 0204 	mov.w	r2, #4
      msg.buf[1] = (chargecurrent * 2);
    3f44:	bfd4      	ite	le
    3f46:	b2db      	uxtble	r3, r3
      msg.buf[1] = 255;
    3f48:	23ff      	movgt	r3, #255	; 0xff
    msg.id = 0x304;
    3f4a:	f44f 7141 	mov.w	r1, #772	; 0x304
    msg.len = 4;
    3f4e:	71e2      	strb	r2, [r4, #7]
    msg.buf[0] = 0x40;  //fixed
    3f50:	2240      	movs	r2, #64	; 0x40
    msg.id = 0x304;
    3f52:	6021      	str	r1, [r4, #0]
    msg.buf[0] = 0x40;  //fixed
    3f54:	7222      	strb	r2, [r4, #8]
      msg.buf[1] = (chargecurrent * 2);
    3f56:	7263      	strb	r3, [r4, #9]
    if ((settings.ChargeVsetpoint * settings.Scells) > 200) {
    3f58:	f008 f89c 	bl	c094 <__aeabi_i2f>
    3f5c:	6969      	ldr	r1, [r5, #20]
    3f5e:	f008 f8ed 	bl	c13c <__aeabi_fmul>
    3f62:	491b      	ldr	r1, [pc, #108]	; (3fd0 <chargercomms()+0x264>)
    3f64:	4605      	mov	r5, r0
    3f66:	f008 faa5 	bl	c4b4 <__aeabi_fcmpgt>
    3f6a:	b958      	cbnz	r0, 3f84 <chargercomms()+0x218>
    3f6c:	2201      	movs	r2, #1
    3f6e:	2390      	movs	r3, #144	; 0x90
      msg.buf[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    3f70:	72a2      	strb	r2, [r4, #10]
      msg.buf[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    3f72:	72e3      	strb	r3, [r4, #11]
    Can0.write(msg);
    3f74:	490a      	ldr	r1, [pc, #40]	; (3fa0 <chargercomms()+0x234>)
    3f76:	480f      	ldr	r0, [pc, #60]	; (3fb4 <chargercomms()+0x248>)
}
    3f78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Can0.write(msg);
    3f7c:	f003 bb4e 	b.w	761c <FlexCAN::write(CAN_message_t const&)>
      msg.buf[1] = highByte(maxac1 * 10);
    3f80:	4b11      	ldr	r3, [pc, #68]	; (3fc8 <chargercomms()+0x25c>)
    3f82:	e768      	b.n	3e56 <chargercomms()+0xea>
      msg.buf[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    3f84:	4629      	mov	r1, r5
    3f86:	4628      	mov	r0, r5
    3f88:	f007 ffd0 	bl	bf2c <__addsf3>
    3f8c:	f008 fac2 	bl	c514 <__aeabi_f2uiz>
    3f90:	f3c0 2207 	ubfx	r2, r0, #8, #8
      msg.buf[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    3f94:	b2c3      	uxtb	r3, r0
    3f96:	e7eb      	b.n	3f70 <chargercomms()+0x204>
      msg.buf[1] = highByte(maxac2 * 10);
    3f98:	4b08      	ldr	r3, [pc, #32]	; (3fbc <chargercomms()+0x250>)
    3f9a:	e795      	b.n	3ec8 <chargercomms()+0x15c>
    3f9c:	1fffb20c 	.word	0x1fffb20c
    3fa0:	1fffb174 	.word	0x1fffb174
    3fa4:	1806e5f4 	.word	0x1806e5f4
    3fa8:	41200000 	.word	0x41200000
    3fac:	1fffb078 	.word	0x1fffb078
    3fb0:	1fff875c 	.word	0x1fff875c
    3fb4:	1fffb2ec 	.word	0x1fffb2ec
    3fb8:	1fff873c 	.word	0x1fff873c
    3fbc:	1fff8758 	.word	0x1fff8758
    3fc0:	1fffb080 	.word	0x1fffb080
    3fc4:	1fff8740 	.word	0x1fff8740
    3fc8:	1fff8754 	.word	0x1fff8754
    3fcc:	1fffb07c 	.word	0x1fffb07c
    3fd0:	43480000 	.word	0x43480000

00003fd4 <SerialCanRecieve()>:

void SerialCanRecieve() {
    3fd4:	b570      	push	{r4, r5, r6, lr}
  if (can.recv(&id, dta)) {
    3fd6:	4c17      	ldr	r4, [pc, #92]	; (4034 <SerialCanRecieve()+0x60>)
    3fd8:	4a17      	ldr	r2, [pc, #92]	; (4038 <SerialCanRecieve()+0x64>)
    3fda:	4818      	ldr	r0, [pc, #96]	; (403c <SerialCanRecieve()+0x68>)
    3fdc:	4621      	mov	r1, r4
    3fde:	f004 f9ed 	bl	83bc <Serial_CAN::recv(unsigned long*, unsigned char*)>
    3fe2:	b118      	cbz	r0, 3fec <SerialCanRecieve()+0x18>
    if (CanDebugSerial == 1) {
    3fe4:	4b16      	ldr	r3, [pc, #88]	; (4040 <SerialCanRecieve()+0x6c>)
    3fe6:	681b      	ldr	r3, [r3, #0]
    3fe8:	2b01      	cmp	r3, #1
    3fea:	d000      	beq.n	3fee <SerialCanRecieve()+0x1a>
        Serial.print('\t');
      }
      Serial.println();
    }
  }
}
    3fec:	bd70      	pop	{r4, r5, r6, pc}
    3fee:	2112      	movs	r1, #18
    3ff0:	4814      	ldr	r0, [pc, #80]	; (4044 <SerialCanRecieve()+0x70>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3ff2:	4e15      	ldr	r6, [pc, #84]	; (4048 <SerialCanRecieve()+0x74>)
    3ff4:	f007 f9c2 	bl	b37c <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    3ff8:	6821      	ldr	r1, [r4, #0]
    3ffa:	4813      	ldr	r0, [pc, #76]	; (4048 <SerialCanRecieve()+0x74>)
    3ffc:	4c13      	ldr	r4, [pc, #76]	; (404c <SerialCanRecieve()+0x78>)
    3ffe:	2300      	movs	r3, #0
    4000:	2210      	movs	r2, #16
    4002:	f004 fd29 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    4006:	4810      	ldr	r0, [pc, #64]	; (4048 <SerialCanRecieve()+0x74>)
    4008:	f004 fd0e 	bl	8a28 <Print::println()>
      for (int i = 0; i < 8; i++) {
    400c:	f104 0508 	add.w	r5, r4, #8
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    4010:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    4014:	2300      	movs	r3, #0
    4016:	220a      	movs	r2, #10
    4018:	4630      	mov	r0, r6
    401a:	f004 fd1d 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    401e:	2009      	movs	r0, #9
    4020:	f007 fa30 	bl	b484 <usb_serial_putchar>
    4024:	42ac      	cmp	r4, r5
    4026:	d1f3      	bne.n	4010 <SerialCanRecieve()+0x3c>
}
    4028:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      Serial.println();
    402c:	4806      	ldr	r0, [pc, #24]	; (4048 <SerialCanRecieve()+0x74>)
    402e:	f004 bcfb 	b.w	8a28 <Print::println()>
    4032:	bf00      	nop
    4034:	1fffb11c 	.word	0x1fffb11c
    4038:	1fffb108 	.word	0x1fffb108
    403c:	1fffb00c 	.word	0x1fffb00c
    4040:	1fff8fa4 	.word	0x1fff8fa4
    4044:	00013684 	.word	0x00013684
    4048:	1fff880c 	.word	0x1fff880c
    404c:	1fffb107 	.word	0x1fffb107

00004050 <SetSerialCan(int)>:

void SetSerialCan(int Speed) {
  switch (Speed) {
    4050:	28fa      	cmp	r0, #250	; 0xfa
void SetSerialCan(int Speed) {
    4052:	b510      	push	{r4, lr}
    4054:	4604      	mov	r4, r0
  switch (Speed) {
    4056:	d012      	beq.n	407e <SetSerialCan(int)+0x2e>
    4058:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    405c:	d11e      	bne.n	409c <SetSerialCan(int)+0x4c>
    case 500:
      if (can.canRate(CAN_RATE_500)) {
    405e:	4814      	ldr	r0, [pc, #80]	; (40b0 <SetSerialCan(int)+0x60>)
    4060:	2110      	movs	r1, #16
    4062:	f004 fa7b 	bl	855c <Serial_CAN::canRate(unsigned char)>
    4066:	b180      	cbz	r0, 408a <SetSerialCan(int)+0x3a>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4068:	210f      	movs	r1, #15
    406a:	4812      	ldr	r0, [pc, #72]	; (40b4 <SetSerialCan(int)+0x64>)
    406c:	f007 f986 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4070:	4811      	ldr	r0, [pc, #68]	; (40b8 <SetSerialCan(int)+0x68>)
    4072:	f004 fcd9 	bl	8a28 <Print::println()>
      break;

    case 250:
      if (can.canRate(CAN_RATE_250)) {
        Serial.println("set can rate ok");
        settings.SerialCanSpeed = 250;
    4076:	4b11      	ldr	r3, [pc, #68]	; (40bc <SetSerialCan(int)+0x6c>)
    4078:	f8a3 40c4 	strh.w	r4, [r3, #196]	; 0xc4
      Serial.println("Wrong CAN Speed");
      // if nothing else matches, do the default
      // default is optional
      break;
  }
}
    407c:	bd10      	pop	{r4, pc}
      if (can.canRate(CAN_RATE_250)) {
    407e:	480c      	ldr	r0, [pc, #48]	; (40b0 <SetSerialCan(int)+0x60>)
    4080:	210f      	movs	r1, #15
    4082:	f004 fa6b 	bl	855c <Serial_CAN::canRate(unsigned char)>
    4086:	2800      	cmp	r0, #0
    4088:	d1ee      	bne.n	4068 <SetSerialCan(int)+0x18>
    408a:	480d      	ldr	r0, [pc, #52]	; (40c0 <SetSerialCan(int)+0x70>)
    408c:	2111      	movs	r1, #17
    408e:	f007 f975 	bl	b37c <usb_serial_write>
}
    4092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4096:	4808      	ldr	r0, [pc, #32]	; (40b8 <SetSerialCan(int)+0x68>)
    4098:	f004 bcc6 	b.w	8a28 <Print::println()>
    409c:	4809      	ldr	r0, [pc, #36]	; (40c4 <SetSerialCan(int)+0x74>)
    409e:	210f      	movs	r1, #15
    40a0:	f007 f96c 	bl	b37c <usb_serial_write>
    40a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    40a8:	4803      	ldr	r0, [pc, #12]	; (40b8 <SetSerialCan(int)+0x68>)
    40aa:	f004 bcbd 	b.w	8a28 <Print::println()>
    40ae:	bf00      	nop
    40b0:	1fffb00c 	.word	0x1fffb00c
    40b4:	00013698 	.word	0x00013698
    40b8:	1fff880c 	.word	0x1fff880c
    40bc:	1fffb20c 	.word	0x1fffb20c
    40c0:	000136a8 	.word	0x000136a8
    40c4:	000136bc 	.word	0x000136bc

000040c8 <CanSerial()>:
      break;
  }
}

void CanSerial()  //communication with Victron system over CAN
{
    40c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if (bmsstatus == Charge) {
    40cc:	4bb1      	ldr	r3, [pc, #708]	; (4394 <CanSerial()+0x2cc>)
    40ce:	781b      	ldrb	r3, [r3, #0]
    40d0:	2b03      	cmp	r3, #3
{
    40d2:	b083      	sub	sp, #12
  if (bmsstatus == Charge) {
    40d4:	d014      	beq.n	4100 <CanSerial()+0x38>
    if (settings.chargertype == Elcon) {
      if (mescycl == 0) {
    40d6:	4db0      	ldr	r5, [pc, #704]	; (4398 <CanSerial()+0x2d0>)
    40d8:	682c      	ldr	r4, [r5, #0]
      msg.buf[7] = 0x01;  //HV charging
      Can0.write(msg);
    }
  }

  if (mescycl == 2) {
    40da:	2c02      	cmp	r4, #2
    40dc:	d006      	beq.n	40ec <CanSerial()+0x24>
      dta[1] = settings.DCDCreq * 1.27;

      can.send(0x1D4, 0, 0, 2, dta);
    }
  }
  mescycl++;
    40de:	3401      	adds	r4, #1
  if (mescycl > 2) {
    40e0:	2c02      	cmp	r4, #2
  mescycl++;
    40e2:	602c      	str	r4, [r5, #0]
  if (mescycl > 2) {
    40e4:	dc07      	bgt.n	40f6 <CanSerial()+0x2e>
    mescycl = 0;
  }
}
    40e6:	b003      	add	sp, #12
    40e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (settings.DCDCreq > 0) {
    40ec:	4bab      	ldr	r3, [pc, #684]	; (439c <CanSerial()+0x2d4>)
    40ee:	f893 00cc 	ldrb.w	r0, [r3, #204]	; 0xcc
    40f2:	2800      	cmp	r0, #0
    40f4:	d149      	bne.n	418a <CanSerial()+0xc2>
    mescycl = 0;
    40f6:	2300      	movs	r3, #0
    40f8:	602b      	str	r3, [r5, #0]
}
    40fa:	b003      	add	sp, #12
    40fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (settings.chargertype == Elcon) {
    4100:	4ea6      	ldr	r6, [pc, #664]	; (439c <CanSerial()+0x2d4>)
      if (mescycl == 0) {
    4102:	4da5      	ldr	r5, [pc, #660]	; (4398 <CanSerial()+0x2d0>)
    if (settings.chargertype == Elcon) {
    4104:	f8d6 20b0 	ldr.w	r2, [r6, #176]	; 0xb0
    4108:	2a04      	cmp	r2, #4
    410a:	f000 8112 	beq.w	4332 <CanSerial()+0x26a>
    if (settings.chargertype == Eltek) {
    410e:	2a03      	cmp	r2, #3
    4110:	d00a      	beq.n	4128 <CanSerial()+0x60>
    if (settings.chargertype == BrusaNLG5) {
    4112:	2a01      	cmp	r2, #1
    4114:	f040 8092 	bne.w	423c <CanSerial()+0x174>
      if (mescycl == 0) {
    4118:	682b      	ldr	r3, [r5, #0]
    411a:	2b00      	cmp	r3, #0
    411c:	d04b      	beq.n	41b6 <CanSerial()+0xee>
      if (mescycl == 1) {
    411e:	2b01      	cmp	r3, #1
    4120:	f000 816d 	beq.w	43fe <CanSerial()+0x336>
  if (mescycl == 2) {
    4124:	682c      	ldr	r4, [r5, #0]
    4126:	e7d8      	b.n	40da <CanSerial()+0x12>
      if (mescycl == 0) {
    4128:	682c      	ldr	r4, [r5, #0]
    412a:	2c00      	cmp	r4, #0
    412c:	d1fa      	bne.n	4124 <CanSerial()+0x5c>
        dta[0] = 0x01;
    412e:	4f9c      	ldr	r7, [pc, #624]	; (43a0 <CanSerial()+0x2d8>)
        dta[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    4130:	6d30      	ldr	r0, [r6, #80]	; 0x50
        dta[2] = highByte(1000);
    4132:	70ba      	strb	r2, [r7, #2]
        dta[0] = 0x01;
    4134:	f64e 0301 	movw	r3, #59393	; 0xe801
    4138:	803b      	strh	r3, [r7, #0]
        dta[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    413a:	f007 ffab 	bl	c094 <__aeabi_i2f>
    413e:	6971      	ldr	r1, [r6, #20]
        dta[5] = lowByte(chargecurrent / ncharger);
    4140:	f8df 9260 	ldr.w	r9, [pc, #608]	; 43a4 <CanSerial()+0x2dc>
    4144:	f8df 8260 	ldr.w	r8, [pc, #608]	; 43a8 <CanSerial()+0x2e0>
        dta[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    4148:	f007 fff8 	bl	c13c <__aeabi_fmul>
    414c:	4997      	ldr	r1, [pc, #604]	; (43ac <CanSerial()+0x2e4>)
    414e:	f007 fff5 	bl	c13c <__aeabi_fmul>
    4152:	f008 f9df 	bl	c514 <__aeabi_f2uiz>
        dta[5] = lowByte(chargecurrent / ncharger);
    4156:	f8d8 2000 	ldr.w	r2, [r8]
    415a:	f8d9 3000 	ldr.w	r3, [r9]
    415e:	fb93 f3f2 	sdiv	r3, r3, r2
        dta[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    4162:	b280      	uxth	r0, r0
        dta[5] = lowByte(chargecurrent / ncharger);
    4164:	717b      	strb	r3, [r7, #5]
        dta[6] = highByte(chargecurrent / ncharger);
    4166:	121b      	asrs	r3, r3, #8
        dta[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    4168:	70f8      	strb	r0, [r7, #3]
        dta[6] = highByte(chargecurrent / ncharger);
    416a:	71bb      	strb	r3, [r7, #6]
        dta[4] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    416c:	0a00      	lsrs	r0, r0, #8
        can.send(0x2FF, 0, 0, 7, dta);
    416e:	2307      	movs	r3, #7
        dta[4] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    4170:	7138      	strb	r0, [r7, #4]
        can.send(0x2FF, 0, 0, 7, dta);
    4172:	9300      	str	r3, [sp, #0]
    4174:	4622      	mov	r2, r4
    4176:	488e      	ldr	r0, [pc, #568]	; (43b0 <CanSerial()+0x2e8>)
    4178:	9701      	str	r7, [sp, #4]
    417a:	4623      	mov	r3, r4
    417c:	f240 21ff 	movw	r1, #767	; 0x2ff
    4180:	f004 f8f4 	bl	836c <Serial_CAN::send(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char const*)>
    if (settings.chargertype == BrusaNLG5) {
    4184:	f8d6 20b0 	ldr.w	r2, [r6, #176]	; 0xb0
    4188:	e7c3      	b.n	4112 <CanSerial()+0x4a>
      dta[0] = 0xA0;
    418a:	4e85      	ldr	r6, [pc, #532]	; (43a0 <CanSerial()+0x2d8>)
    418c:	23a0      	movs	r3, #160	; 0xa0
    418e:	7033      	strb	r3, [r6, #0]
      dta[1] = settings.DCDCreq * 1.27;
    4190:	f007 ff80 	bl	c094 <__aeabi_i2f>
    4194:	4987      	ldr	r1, [pc, #540]	; (43b4 <CanSerial()+0x2ec>)
    4196:	f007 ffd1 	bl	c13c <__aeabi_fmul>
    419a:	f008 f9bb 	bl	c514 <__aeabi_f2uiz>
      can.send(0x1D4, 0, 0, 2, dta);
    419e:	2300      	movs	r3, #0
    41a0:	e9cd 4600 	strd	r4, r6, [sp]
    41a4:	461a      	mov	r2, r3
      dta[1] = settings.DCDCreq * 1.27;
    41a6:	7070      	strb	r0, [r6, #1]
      can.send(0x1D4, 0, 0, 2, dta);
    41a8:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
    41ac:	4880      	ldr	r0, [pc, #512]	; (43b0 <CanSerial()+0x2e8>)
    41ae:	f004 f8dd 	bl	836c <Serial_CAN::send(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char const*)>
  mescycl++;
    41b2:	682c      	ldr	r4, [r5, #0]
    41b4:	e793      	b.n	40de <CanSerial()+0x16>
        dta[0] = 0x80;
    41b6:	4f7a      	ldr	r7, [pc, #488]	; (43a0 <CanSerial()+0x2d8>)
    41b8:	2380      	movs	r3, #128	; 0x80
        if (digitalRead(IN2) == LOW)  //Gen OFF
    41ba:	2010      	movs	r0, #16
        dta[0] = 0x80;
    41bc:	703b      	strb	r3, [r7, #0]
        if (digitalRead(IN2) == LOW)  //Gen OFF
    41be:	f005 fa91 	bl	96e4 <digitalRead>
    41c2:	2800      	cmp	r0, #0
    41c4:	f040 815b 	bne.w	447e <CanSerial()+0x3b6>
          dta[1] = highByte(maxac1 * 10);
    41c8:	4b7b      	ldr	r3, [pc, #492]	; (43b8 <CanSerial()+0x2f0>)
          dta[1] = highByte(maxac2 * 10);
    41ca:	681b      	ldr	r3, [r3, #0]
        dta[5] = highByte(chargecurrent / ncharger);
    41cc:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 43a4 <CanSerial()+0x2dc>
    41d0:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 43a8 <CanSerial()+0x2e0>
        dta[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    41d4:	6d30      	ldr	r0, [r6, #80]	; 0x50
          dta[1] = highByte(maxac2 * 10);
    41d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    41da:	005a      	lsls	r2, r3, #1
          dta[2] = lowByte(maxac2 * 10);
    41dc:	b2d2      	uxtb	r2, r2
          dta[1] = highByte(maxac2 * 10);
    41de:	f3c3 13c7 	ubfx	r3, r3, #7, #8
          dta[1] = highByte(maxac1 * 10);
    41e2:	707b      	strb	r3, [r7, #1]
          dta[2] = lowByte(maxac1 * 10);
    41e4:	70ba      	strb	r2, [r7, #2]
        dta[5] = highByte(chargecurrent / ncharger);
    41e6:	f8d9 3000 	ldr.w	r3, [r9]
    41ea:	f8d8 2000 	ldr.w	r2, [r8]
    41ee:	fb93 f3f2 	sdiv	r3, r3, r2
        dta[6] = lowByte(chargecurrent / ncharger);
    41f2:	71bb      	strb	r3, [r7, #6]
        dta[5] = highByte(chargecurrent / ncharger);
    41f4:	121b      	asrs	r3, r3, #8
    41f6:	717b      	strb	r3, [r7, #5]
        dta[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    41f8:	f007 ff4c 	bl	c094 <__aeabi_i2f>
    41fc:	6971      	ldr	r1, [r6, #20]
    41fe:	f007 ff9d 	bl	c13c <__aeabi_fmul>
    4202:	4b6e      	ldr	r3, [pc, #440]	; (43bc <CanSerial()+0x2f4>)
    4204:	6819      	ldr	r1, [r3, #0]
    4206:	f007 fe8f 	bl	bf28 <__aeabi_fsub>
    420a:	4968      	ldr	r1, [pc, #416]	; (43ac <CanSerial()+0x2e4>)
    420c:	f007 ff96 	bl	c13c <__aeabi_fmul>
    4210:	f008 f980 	bl	c514 <__aeabi_f2uiz>
        can.send(chargerid1, 0, 0, 7, dta);
    4214:	4b6a      	ldr	r3, [pc, #424]	; (43c0 <CanSerial()+0x2f8>)
    4216:	9701      	str	r7, [sp, #4]
    4218:	6819      	ldr	r1, [r3, #0]
        dta[4] = lowByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    421a:	7138      	strb	r0, [r7, #4]
        can.send(chargerid1, 0, 0, 7, dta);
    421c:	2300      	movs	r3, #0
        dta[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    421e:	f3c0 2007 	ubfx	r0, r0, #8, #8
        can.send(chargerid1, 0, 0, 7, dta);
    4222:	2207      	movs	r2, #7
        dta[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    4224:	70f8      	strb	r0, [r7, #3]
        can.send(chargerid1, 0, 0, 7, dta);
    4226:	9200      	str	r2, [sp, #0]
    4228:	4861      	ldr	r0, [pc, #388]	; (43b0 <CanSerial()+0x2e8>)
    422a:	461a      	mov	r2, r3
    422c:	f004 f89e 	bl	836c <Serial_CAN::send(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char const*)>
      if (mescycl == 1) {
    4230:	682b      	ldr	r3, [r5, #0]
    4232:	2b01      	cmp	r3, #1
    4234:	f000 80e8 	beq.w	4408 <CanSerial()+0x340>
    if (settings.chargertype == ChevyVolt) {
    4238:	f8d6 20b0 	ldr.w	r2, [r6, #176]	; 0xb0
    423c:	2a02      	cmp	r2, #2
    423e:	d135      	bne.n	42ac <CanSerial()+0x1e4>
      if (mescycl == 0) {
    4240:	682c      	ldr	r4, [r5, #0]
    4242:	2c00      	cmp	r4, #0
    4244:	f000 80ca 	beq.w	43dc <CanSerial()+0x314>
      if (mescycl == 1) {
    4248:	2c01      	cmp	r4, #1
    424a:	f47f af46 	bne.w	40da <CanSerial()+0x12>
    424e:	4f54      	ldr	r7, [pc, #336]	; (43a0 <CanSerial()+0x2d8>)
        if ((chargecurrent * 2) > 255) {
    4250:	4b54      	ldr	r3, [pc, #336]	; (43a4 <CanSerial()+0x2dc>)
        if ((settings.ChargeVsetpoint * settings.Scells) > 200) {
    4252:	6d30      	ldr	r0, [r6, #80]	; 0x50
        if ((chargecurrent * 2) > 255) {
    4254:	681b      	ldr	r3, [r3, #0]
    4256:	005b      	lsls	r3, r3, #1
    4258:	2bff      	cmp	r3, #255	; 0xff
          dta[1] = (chargecurrent * 2);
    425a:	bfd4      	ite	le
    425c:	b2db      	uxtble	r3, r3
          dta[1] = 255;
    425e:	23ff      	movgt	r3, #255	; 0xff
        dta[0] = 0x40;  //fixed
    4260:	2240      	movs	r2, #64	; 0x40
    4262:	703a      	strb	r2, [r7, #0]
          dta[1] = (chargecurrent * 2);
    4264:	707b      	strb	r3, [r7, #1]
        if ((settings.ChargeVsetpoint * settings.Scells) > 200) {
    4266:	f007 ff15 	bl	c094 <__aeabi_i2f>
    426a:	6971      	ldr	r1, [r6, #20]
    426c:	f007 ff66 	bl	c13c <__aeabi_fmul>
    4270:	4954      	ldr	r1, [pc, #336]	; (43c4 <CanSerial()+0x2fc>)
    4272:	4604      	mov	r4, r0
    4274:	f008 f91e 	bl	c4b4 <__aeabi_fcmpgt>
    4278:	2800      	cmp	r0, #0
    427a:	f000 80fd 	beq.w	4478 <CanSerial()+0x3b0>
          dta[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    427e:	4621      	mov	r1, r4
    4280:	4620      	mov	r0, r4
    4282:	f007 fe53 	bl	bf2c <__addsf3>
    4286:	f008 f945 	bl	c514 <__aeabi_f2uiz>
    428a:	f3c0 2307 	ubfx	r3, r0, #8, #8
          dta[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    428e:	b2c0      	uxtb	r0, r0
        can.send(0x304, 0, 0, 4, dta);
    4290:	2204      	movs	r2, #4
          dta[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    4292:	70bb      	strb	r3, [r7, #2]
        can.send(0x304, 0, 0, 4, dta);
    4294:	2300      	movs	r3, #0
    4296:	9200      	str	r2, [sp, #0]
          dta[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    4298:	70f8      	strb	r0, [r7, #3]
        can.send(0x304, 0, 0, 4, dta);
    429a:	9701      	str	r7, [sp, #4]
    429c:	4844      	ldr	r0, [pc, #272]	; (43b0 <CanSerial()+0x2e8>)
    429e:	461a      	mov	r2, r3
    42a0:	f44f 7141 	mov.w	r1, #772	; 0x304
    42a4:	f004 f862 	bl	836c <Serial_CAN::send(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char const*)>
    if (settings.chargertype == Coda) {
    42a8:	f8d6 20b0 	ldr.w	r2, [r6, #176]	; 0xb0
    42ac:	2a06      	cmp	r2, #6
    42ae:	f47f af39 	bne.w	4124 <CanSerial()+0x5c>
      msg.id = 0x050;
    42b2:	4c45      	ldr	r4, [pc, #276]	; (43c8 <CanSerial()+0x300>)
      if ((settings.ChargeVsetpoint * settings.Scells) > 200) {
    42b4:	6d30      	ldr	r0, [r6, #80]	; 0x50
      msg.id = 0x050;
    42b6:	2350      	movs	r3, #80	; 0x50
    42b8:	6023      	str	r3, [r4, #0]
      msg.len = 8;
    42ba:	2308      	movs	r3, #8
    42bc:	71e3      	strb	r3, [r4, #7]
      msg.buf[0] = 0x00;
    42be:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
    42c2:	8123      	strh	r3, [r4, #8]
      if ((settings.ChargeVsetpoint * settings.Scells) > 200) {
    42c4:	f007 fee6 	bl	c094 <__aeabi_i2f>
    42c8:	6971      	ldr	r1, [r6, #20]
    42ca:	f007 ff37 	bl	c13c <__aeabi_fmul>
    42ce:	493d      	ldr	r1, [pc, #244]	; (43c4 <CanSerial()+0x2fc>)
    42d0:	4606      	mov	r6, r0
    42d2:	f008 f8ef 	bl	c4b4 <__aeabi_fcmpgt>
    42d6:	2800      	cmp	r0, #0
    42d8:	d059      	beq.n	438e <CanSerial()+0x2c6>
        msg.buf[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    42da:	4934      	ldr	r1, [pc, #208]	; (43ac <CanSerial()+0x2e4>)
    42dc:	4630      	mov	r0, r6
    42de:	f007 ff2d 	bl	c13c <__aeabi_fmul>
    42e2:	f008 f917 	bl	c514 <__aeabi_f2uiz>
    42e6:	f3c0 2207 	ubfx	r2, r0, #8, #8
        msg.buf[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    42ea:	b2c3      	uxtb	r3, r0
        msg.buf[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    42ec:	72a2      	strb	r2, [r4, #10]
      if ((settings.ChargeVsetpoint * settings.Scells) * chargecurrent < 3300) {
    42ee:	4a2d      	ldr	r2, [pc, #180]	; (43a4 <CanSerial()+0x2dc>)
        msg.buf[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    42f0:	72e3      	strb	r3, [r4, #11]
      msg.buf[4] = 0x00;
    42f2:	2100      	movs	r1, #0
      if ((settings.ChargeVsetpoint * settings.Scells) * chargecurrent < 3300) {
    42f4:	6810      	ldr	r0, [r2, #0]
      msg.buf[4] = 0x00;
    42f6:	7321      	strb	r1, [r4, #12]
      if ((settings.ChargeVsetpoint * settings.Scells) * chargecurrent < 3300) {
    42f8:	f007 fecc 	bl	c094 <__aeabi_i2f>
    42fc:	4631      	mov	r1, r6
    42fe:	f007 ff1d 	bl	c13c <__aeabi_fmul>
    4302:	4932      	ldr	r1, [pc, #200]	; (43cc <CanSerial()+0x304>)
    4304:	4606      	mov	r6, r0
    4306:	f008 f8b7 	bl	c478 <__aeabi_fcmplt>
    430a:	2800      	cmp	r0, #0
    430c:	d03c      	beq.n	4388 <CanSerial()+0x2c0>
        msg.buf[5] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) * chargecurrent) / 240));
    430e:	4930      	ldr	r1, [pc, #192]	; (43d0 <CanSerial()+0x308>)
    4310:	4630      	mov	r0, r6
    4312:	f007 ffc7 	bl	c2a4 <__aeabi_fdiv>
    4316:	f008 f8fd 	bl	c514 <__aeabi_f2uiz>
    431a:	f3c0 2307 	ubfx	r3, r0, #8, #8
        msg.buf[6] = lowByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) * chargecurrent) / 240));
    431e:	b2c0      	uxtb	r0, r0
      msg.buf[7] = 0x01;  //HV charging
    4320:	2201      	movs	r2, #1
        msg.buf[6] = lowByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) * chargecurrent) / 240));
    4322:	73a0      	strb	r0, [r4, #14]
      Can0.write(msg);
    4324:	4928      	ldr	r1, [pc, #160]	; (43c8 <CanSerial()+0x300>)
      msg.buf[7] = 0x01;  //HV charging
    4326:	73e2      	strb	r2, [r4, #15]
        msg.buf[5] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) * chargecurrent) / 240));
    4328:	7363      	strb	r3, [r4, #13]
      Can0.write(msg);
    432a:	482a      	ldr	r0, [pc, #168]	; (43d4 <CanSerial()+0x30c>)
    432c:	f003 f976 	bl	761c <FlexCAN::write(CAN_message_t const&)>
    4330:	e6f8      	b.n	4124 <CanSerial()+0x5c>
      if (mescycl == 0) {
    4332:	682c      	ldr	r4, [r5, #0]
    4334:	2c00      	cmp	r4, #0
    4336:	f47f aef5 	bne.w	4124 <CanSerial()+0x5c>
        dta[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    433a:	6d30      	ldr	r0, [r6, #80]	; 0x50
        dta[2] = highByte(chargecurrent / ncharger);
    433c:	f8df 9064 	ldr.w	r9, [pc, #100]	; 43a4 <CanSerial()+0x2dc>
    4340:	f8df 8064 	ldr.w	r8, [pc, #100]	; 43a8 <CanSerial()+0x2e0>
        dta[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    4344:	4f16      	ldr	r7, [pc, #88]	; (43a0 <CanSerial()+0x2d8>)
    4346:	f007 fea5 	bl	c094 <__aeabi_i2f>
    434a:	6971      	ldr	r1, [r6, #20]
    434c:	f007 fef6 	bl	c13c <__aeabi_fmul>
    4350:	4916      	ldr	r1, [pc, #88]	; (43ac <CanSerial()+0x2e4>)
    4352:	f007 fef3 	bl	c13c <__aeabi_fmul>
    4356:	f008 f8dd 	bl	c514 <__aeabi_f2uiz>
        dta[2] = highByte(chargecurrent / ncharger);
    435a:	f8d8 1000 	ldr.w	r1, [r8]
    435e:	f8d9 2000 	ldr.w	r2, [r9]
    4362:	fb92 f2f1 	sdiv	r2, r2, r1
    4366:	ba52      	rev16	r2, r2
        dta[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    4368:	ba40      	rev16	r0, r0
        dta[2] = highByte(chargecurrent / ncharger);
    436a:	807a      	strh	r2, [r7, #2]
        can.send(0x1806E5F4, 1, 0, 8, dta);
    436c:	2208      	movs	r2, #8
        dta[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    436e:	8038      	strh	r0, [r7, #0]
        can.send(0x1806E5F4, 1, 0, 8, dta);
    4370:	9200      	str	r2, [sp, #0]
    4372:	4919      	ldr	r1, [pc, #100]	; (43d8 <CanSerial()+0x310>)
    4374:	480e      	ldr	r0, [pc, #56]	; (43b0 <CanSerial()+0x2e8>)
    4376:	9701      	str	r7, [sp, #4]
    4378:	2201      	movs	r2, #1
    437a:	4623      	mov	r3, r4
        dta[4] = 0x00;
    437c:	607c      	str	r4, [r7, #4]
        can.send(0x1806E5F4, 1, 0, 8, dta);
    437e:	f003 fff5 	bl	836c <Serial_CAN::send(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char const*)>
    if (settings.chargertype == Eltek) {
    4382:	f8d6 20b0 	ldr.w	r2, [r6, #176]	; 0xb0
    4386:	e6c2      	b.n	410e <CanSerial()+0x46>
    4388:	4603      	mov	r3, r0
    438a:	2096      	movs	r0, #150	; 0x96
    438c:	e7c8      	b.n	4320 <CanSerial()+0x258>
    438e:	2207      	movs	r2, #7
    4390:	23d0      	movs	r3, #208	; 0xd0
    4392:	e7ab      	b.n	42ec <CanSerial()+0x224>
    4394:	1fffb008 	.word	0x1fffb008
    4398:	1fffb170 	.word	0x1fffb170
    439c:	1fffb20c 	.word	0x1fffb20c
    43a0:	1fffb108 	.word	0x1fffb108
    43a4:	1fffb078 	.word	0x1fffb078
    43a8:	1fff875c 	.word	0x1fff875c
    43ac:	41200000 	.word	0x41200000
    43b0:	1fffb00c 	.word	0x1fffb00c
    43b4:	3fa28f5c 	.word	0x3fa28f5c
    43b8:	1fff8754 	.word	0x1fff8754
    43bc:	1fffb080 	.word	0x1fffb080
    43c0:	1fff873c 	.word	0x1fff873c
    43c4:	43480000 	.word	0x43480000
    43c8:	1fffb174 	.word	0x1fffb174
    43cc:	454e4000 	.word	0x454e4000
    43d0:	43700000 	.word	0x43700000
    43d4:	1fffb2ec 	.word	0x1fffb2ec
    43d8:	1806e5f4 	.word	0x1806e5f4
        dta[0] = 0x02;  //only HV charging , 0x03 hv and 12V charging
    43dc:	4f2a      	ldr	r7, [pc, #168]	; (4488 <CanSerial()+0x3c0>)
        can.send(0x30E, 0, 0, 4, dta);
    43de:	482b      	ldr	r0, [pc, #172]	; (448c <CanSerial()+0x3c4>)
        dta[0] = 0x02;  //only HV charging , 0x03 hv and 12V charging
    43e0:	603a      	str	r2, [r7, #0]
        can.send(0x30E, 0, 0, 4, dta);
    43e2:	2304      	movs	r3, #4
    43e4:	9300      	str	r3, [sp, #0]
    43e6:	9701      	str	r7, [sp, #4]
    43e8:	4623      	mov	r3, r4
    43ea:	4622      	mov	r2, r4
    43ec:	f240 310e 	movw	r1, #782	; 0x30e
    43f0:	f003 ffbc 	bl	836c <Serial_CAN::send(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char const*)>
      if (mescycl == 1) {
    43f4:	682b      	ldr	r3, [r5, #0]
    43f6:	2b01      	cmp	r3, #1
    43f8:	f47f af56 	bne.w	42a8 <CanSerial()+0x1e0>
    43fc:	e728      	b.n	4250 <CanSerial()+0x188>
    43fe:	4f22      	ldr	r7, [pc, #136]	; (4488 <CanSerial()+0x3c0>)
    4400:	f8df 908c 	ldr.w	r9, [pc, #140]	; 4490 <CanSerial()+0x3c8>
    4404:	f8df 808c 	ldr.w	r8, [pc, #140]	; 4494 <CanSerial()+0x3cc>
        dta[0] = 0x80;
    4408:	2380      	movs	r3, #128	; 0x80
        if (digitalRead(IN2) == LOW)  //Gen OFF
    440a:	2010      	movs	r0, #16
        dta[0] = 0x80;
    440c:	703b      	strb	r3, [r7, #0]
        if (digitalRead(IN2) == LOW)  //Gen OFF
    440e:	f005 f969 	bl	96e4 <digitalRead>
    4412:	2800      	cmp	r0, #0
    4414:	d135      	bne.n	4482 <CanSerial()+0x3ba>
          dta[1] = highByte(maxac1 * 10);
    4416:	4b20      	ldr	r3, [pc, #128]	; (4498 <CanSerial()+0x3d0>)
          dta[1] = highByte(maxac2 * 10);
    4418:	681b      	ldr	r3, [r3, #0]
        dta[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    441a:	6d30      	ldr	r0, [r6, #80]	; 0x50
          dta[1] = highByte(maxac2 * 10);
    441c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    4420:	005a      	lsls	r2, r3, #1
          dta[2] = lowByte(maxac2 * 10);
    4422:	b2d2      	uxtb	r2, r2
          dta[1] = highByte(maxac2 * 10);
    4424:	f3c3 13c7 	ubfx	r3, r3, #7, #8
          dta[2] = lowByte(maxac1 * 10);
    4428:	70ba      	strb	r2, [r7, #2]
          dta[1] = highByte(maxac1 * 10);
    442a:	707b      	strb	r3, [r7, #1]
        dta[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    442c:	f007 fe32 	bl	c094 <__aeabi_i2f>
    4430:	6971      	ldr	r1, [r6, #20]
    4432:	f007 fe83 	bl	c13c <__aeabi_fmul>
    4436:	4b19      	ldr	r3, [pc, #100]	; (449c <CanSerial()+0x3d4>)
    4438:	6819      	ldr	r1, [r3, #0]
    443a:	f007 fd75 	bl	bf28 <__aeabi_fsub>
    443e:	4918      	ldr	r1, [pc, #96]	; (44a0 <CanSerial()+0x3d8>)
    4440:	f007 fe7c 	bl	c13c <__aeabi_fmul>
    4444:	f008 f866 	bl	c514 <__aeabi_f2uiz>
        dta[5] = highByte(chargecurrent / ncharger);
    4448:	f8d8 2000 	ldr.w	r2, [r8]
    444c:	f8d9 3000 	ldr.w	r3, [r9]
        can.send(chargerid2, 0, 0, 7, dta);
    4450:	4914      	ldr	r1, [pc, #80]	; (44a4 <CanSerial()+0x3dc>)
        dta[5] = highByte(chargecurrent / ncharger);
    4452:	fb93 f3f2 	sdiv	r3, r3, r2
        dta[6] = lowByte(chargecurrent / ncharger);
    4456:	71bb      	strb	r3, [r7, #6]
        dta[5] = highByte(chargecurrent / ncharger);
    4458:	121b      	asrs	r3, r3, #8
        can.send(chargerid2, 0, 0, 7, dta);
    445a:	9701      	str	r7, [sp, #4]
        dta[4] = lowByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    445c:	7138      	strb	r0, [r7, #4]
        dta[5] = highByte(chargecurrent / ncharger);
    445e:	717b      	strb	r3, [r7, #5]
        dta[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    4460:	f3c0 2007 	ubfx	r0, r0, #8, #8
        can.send(chargerid2, 0, 0, 7, dta);
    4464:	2300      	movs	r3, #0
    4466:	2207      	movs	r2, #7
    4468:	6809      	ldr	r1, [r1, #0]
        dta[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    446a:	70f8      	strb	r0, [r7, #3]
        can.send(chargerid2, 0, 0, 7, dta);
    446c:	9200      	str	r2, [sp, #0]
    446e:	4807      	ldr	r0, [pc, #28]	; (448c <CanSerial()+0x3c4>)
    4470:	461a      	mov	r2, r3
    4472:	f003 ff7b 	bl	836c <Serial_CAN::send(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char const*)>
    4476:	e6df      	b.n	4238 <CanSerial()+0x170>
    4478:	2301      	movs	r3, #1
    447a:	2090      	movs	r0, #144	; 0x90
    447c:	e708      	b.n	4290 <CanSerial()+0x1c8>
          dta[1] = highByte(maxac2 * 10);
    447e:	4b0a      	ldr	r3, [pc, #40]	; (44a8 <CanSerial()+0x3e0>)
    4480:	e6a3      	b.n	41ca <CanSerial()+0x102>
          dta[1] = highByte(maxac2 * 10);
    4482:	4b09      	ldr	r3, [pc, #36]	; (44a8 <CanSerial()+0x3e0>)
    4484:	e7c8      	b.n	4418 <CanSerial()+0x350>
    4486:	bf00      	nop
    4488:	1fffb108 	.word	0x1fffb108
    448c:	1fffb00c 	.word	0x1fffb00c
    4490:	1fffb078 	.word	0x1fffb078
    4494:	1fff875c 	.word	0x1fff875c
    4498:	1fff8754 	.word	0x1fff8754
    449c:	1fffb07c 	.word	0x1fffb07c
    44a0:	41200000 	.word	0x41200000
    44a4:	1fff8740 	.word	0x1fff8740
    44a8:	1fff8758 	.word	0x1fff8758

000044ac <_GLOBAL__sub_I_can>:
}
    44ac:	b510      	push	{r4, lr}
***/

struct EEPROMClass{

#if defined(__arm__) && defined(TEENSYDUINO)
    EEPROMClass()                        { eeprom_initialize(); }
    44ae:	f004 fca1 	bl	8df4 <eeprom_initialize>
BMSModuleManager bms;
    44b2:	480b      	ldr	r0, [pc, #44]	; (44e0 <_GLOBAL__sub_I_can+0x34>)
    44b4:	f7fc f95e 	bl	774 <BMSModuleManager::BMSModuleManager()>
SerialConsole console;
    44b8:	480a      	ldr	r0, [pc, #40]	; (44e4 <_GLOBAL__sub_I_can+0x38>)
    44ba:	f7fd fbc7 	bl	1c4c <SerialConsole::SerialConsole()>
FilterOnePole lowpassFilter(LOWPASS, filterFrequency);
    44be:	4a0a      	ldr	r2, [pc, #40]	; (44e8 <_GLOBAL__sub_I_can+0x3c>)
    44c0:	480a      	ldr	r0, [pc, #40]	; (44ec <_GLOBAL__sub_I_can+0x40>)
    44c2:	6812      	ldr	r2, [r2, #0]
    44c4:	2300      	movs	r3, #0
    44c6:	2101      	movs	r1, #1
    44c8:	f003 fed2 	bl	8270 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)>
ADC *adc = new ADC();  // adc object
    44cc:	2094      	movs	r0, #148	; 0x94
    44ce:	f004 feb5 	bl	923c <operator new(unsigned int)>
    44d2:	4604      	mov	r4, r0
    44d4:	f003 fa98 	bl	7a08 <ADC::ADC()>
    44d8:	4b05      	ldr	r3, [pc, #20]	; (44f0 <_GLOBAL__sub_I_can+0x44>)
    44da:	601c      	str	r4, [r3, #0]
}
    44dc:	bd10      	pop	{r4, pc}
    44de:	bf00      	nop
    44e0:	1fff8fe0 	.word	0x1fff8fe0
    44e4:	1fffb088 	.word	0x1fffb088
    44e8:	1fff874c 	.word	0x1fff874c
    44ec:	1fffb14c 	.word	0x1fffb14c
    44f0:	1fff8fd0 	.word	0x1fff8fd0

000044f4 <setup>:
void setup() {
    44f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  delay(4000);  //just for easy debugging. It takes a few seconds for USB to come up properly on most OS's
    44f8:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
void setup() {
    44fc:	b085      	sub	sp, #20
  delay(4000);  //just for easy debugging. It takes a few seconds for USB to come up properly on most OS's
    44fe:	f005 f95b 	bl	97b8 <delay>
  pinMode(IN1, INPUT);
    4502:	2100      	movs	r1, #0
    4504:	2011      	movs	r0, #17
    4506:	f005 f8fb 	bl	9700 <pinMode>
  pinMode(IN2, INPUT);
    450a:	2100      	movs	r1, #0
    450c:	2010      	movs	r0, #16
    450e:	f005 f8f7 	bl	9700 <pinMode>
  pinMode(IN3, INPUT);
    4512:	2100      	movs	r1, #0
    4514:	2012      	movs	r0, #18
    4516:	f005 f8f3 	bl	9700 <pinMode>
  pinMode(IN4, INPUT);
    451a:	2100      	movs	r1, #0
    451c:	2013      	movs	r0, #19
    451e:	f005 f8ef 	bl	9700 <pinMode>
  pinMode(OUT1, OUTPUT);  // drive contactor
    4522:	2101      	movs	r1, #1
    4524:	200b      	movs	r0, #11
    4526:	f005 f8eb 	bl	9700 <pinMode>
  pinMode(OUT2, OUTPUT);  // precharge
    452a:	2101      	movs	r1, #1
    452c:	200c      	movs	r0, #12
    452e:	f005 f8e7 	bl	9700 <pinMode>
  pinMode(OUT3, OUTPUT);  // charge relay
    4532:	2101      	movs	r1, #1
    4534:	2014      	movs	r0, #20
    4536:	f005 f8e3 	bl	9700 <pinMode>
  pinMode(OUT4, OUTPUT);  // Negative contactor
    453a:	2101      	movs	r1, #1
    453c:	2015      	movs	r0, #21
    453e:	f005 f8df 	bl	9700 <pinMode>
  pinMode(OUT5, OUTPUT);  // pwm driver output
    4542:	2101      	movs	r1, #1
    4544:	2016      	movs	r0, #22
    4546:	f005 f8db 	bl	9700 <pinMode>
  pinMode(OUT6, OUTPUT);  // pwm driver output
    454a:	2101      	movs	r1, #1
    454c:	2017      	movs	r0, #23
    454e:	f005 f8d7 	bl	9700 <pinMode>
  pinMode(OUT7, OUTPUT);  // pwm driver output
    4552:	2101      	movs	r1, #1
    4554:	2005      	movs	r0, #5
    4556:	f005 f8d3 	bl	9700 <pinMode>
  analogWriteFrequency(OUT5, pwmfreq);
    455a:	4cb0      	ldr	r4, [pc, #704]	; (481c <L_14041_delayMicroseconds+0xf2>)
    Can0.getFilter(filter, i);
    455c:	4fb0      	ldr	r7, [pc, #704]	; (4820 <L_14041_delayMicroseconds+0xf6>)
  pinMode(OUT8, OUTPUT);  // pwm driver output
    455e:	2101      	movs	r1, #1
    4560:	2006      	movs	r0, #6
    4562:	f005 f8cd 	bl	9700 <pinMode>
  pinMode(led, OUTPUT);
    4566:	2101      	movs	r1, #1
    4568:	200d      	movs	r0, #13
    456a:	f005 f8c9 	bl	9700 <pinMode>
  analogWriteFrequency(OUT5, pwmfreq);
    456e:	8820      	ldrh	r0, [r4, #0]
    4570:	f007 fd8c 	bl	c08c <__aeabi_ui2f>
    4574:	4601      	mov	r1, r0
    4576:	2016      	movs	r0, #22
    4578:	f005 f824 	bl	95c4 <analogWriteFrequency>
  analogWriteFrequency(OUT6, pwmfreq);
    457c:	8820      	ldrh	r0, [r4, #0]
    457e:	f007 fd85 	bl	c08c <__aeabi_ui2f>
    4582:	4601      	mov	r1, r0
    4584:	2017      	movs	r0, #23
    4586:	f005 f81d 	bl	95c4 <analogWriteFrequency>
  analogWriteFrequency(OUT7, pwmfreq);
    458a:	8820      	ldrh	r0, [r4, #0]
    458c:	f007 fd7e 	bl	c08c <__aeabi_ui2f>
    4590:	4601      	mov	r1, r0
    4592:	2005      	movs	r0, #5
    4594:	f005 f816 	bl	95c4 <analogWriteFrequency>
  analogWriteFrequency(OUT8, pwmfreq);
    4598:	8820      	ldrh	r0, [r4, #0]
    459a:	4ca2      	ldr	r4, [pc, #648]	; (4824 <L_14041_delayMicroseconds+0xfa>)
    459c:	f007 fd76 	bl	c08c <__aeabi_ui2f>
  Can0.begin(125000);
    45a0:	2500      	movs	r5, #0
  analogWriteFrequency(OUT8, pwmfreq);
    45a2:	4601      	mov	r1, r0
    45a4:	2006      	movs	r0, #6
    45a6:	f005 f80d 	bl	95c4 <analogWriteFrequency>
  Can0.begin(125000);
    45aa:	4a9f      	ldr	r2, [pc, #636]	; (4828 <L_14041_delayMicroseconds+0xfe>)
    45ac:	499f      	ldr	r1, [pc, #636]	; (482c <L_14041_delayMicroseconds+0x102>)
    45ae:	489c      	ldr	r0, [pc, #624]	; (4820 <L_14041_delayMicroseconds+0xf6>)
    45b0:	9500      	str	r5, [sp, #0]
    45b2:	462b      	mov	r3, r5
    45b4:	f002 fe68 	bl	7288 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)>
    Can0.getFilter(filter, i);
    45b8:	b2ee      	uxtb	r6, r5
    45ba:	4632      	mov	r2, r6
    45bc:	4621      	mov	r1, r4
    45be:	4638      	mov	r0, r7
    45c0:	f002 fe0a 	bl	71d8 <FlexCAN::getFilter(CAN_filter_t&, unsigned char)>
    filter.flags.extended = 0;
    45c4:	7923      	ldrb	r3, [r4, #4]
    Can0.setFilter(filter, i);
    45c6:	4632      	mov	r2, r6
    filter.flags.extended = 0;
    45c8:	f36f 0300 	bfc	r3, #0, #1
    Can0.setFilter(filter, i);
    45cc:	4621      	mov	r1, r4
    45ce:	4638      	mov	r0, r7
  for (int i = 0; i < 8; i++) {
    45d0:	3501      	adds	r5, #1
    filter.flags.extended = 0;
    45d2:	7123      	strb	r3, [r4, #4]
    Can0.setFilter(filter, i);
    45d4:	f002 fdbe 	bl	7154 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>
  for (int i = 0; i < 8; i++) {
    45d8:	2d08      	cmp	r5, #8
    45da:	d1ed      	bne.n	45b8 <setup+0xc4>
    Can0.getFilter(filter, i);
    45dc:	f8df 8244 	ldr.w	r8, [pc, #580]	; 4824 <L_14041_delayMicroseconds+0xfa>
    45e0:	4f8f      	ldr	r7, [pc, #572]	; (4820 <L_14041_delayMicroseconds+0xf6>)
  for (int i = 9; i < 13; i++) {
    45e2:	2509      	movs	r5, #9
    Can0.getFilter(filter, i);
    45e4:	b2ee      	uxtb	r6, r5
    45e6:	4632      	mov	r2, r6
    45e8:	4641      	mov	r1, r8
    45ea:	4638      	mov	r0, r7
    45ec:	f002 fdf4 	bl	71d8 <FlexCAN::getFilter(CAN_filter_t&, unsigned char)>
    filter.flags.extended = 1;
    45f0:	7923      	ldrb	r3, [r4, #4]
    Can0.setFilter(filter, i);
    45f2:	4632      	mov	r2, r6
    filter.flags.extended = 1;
    45f4:	f043 0301 	orr.w	r3, r3, #1
    Can0.setFilter(filter, i);
    45f8:	4641      	mov	r1, r8
    45fa:	4638      	mov	r0, r7
  for (int i = 9; i < 13; i++) {
    45fc:	3501      	adds	r5, #1
    filter.flags.extended = 1;
    45fe:	7123      	strb	r3, [r4, #4]
    Can0.setFilter(filter, i);
    4600:	f002 fda8 	bl	7154 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>
  for (int i = 9; i < 13; i++) {
    4604:	2d0d      	cmp	r5, #13
    4606:	d1ed      	bne.n	45e4 <setup+0xf0>
  adc->adc0->setAveraging(16);   // set number of averages
    4608:	4c89      	ldr	r4, [pc, #548]	; (4830 <L_14041_delayMicroseconds+0x106>)
		uint32_t millis_begin = systick_millis_count;
    460a:	4f8a      	ldr	r7, [pc, #552]	; (4834 <L_14041_delayMicroseconds+0x10a>)
    460c:	6823      	ldr	r3, [r4, #0]
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    460e:	4e8a      	ldr	r6, [pc, #552]	; (4838 <L_14041_delayMicroseconds+0x10e>)
    4610:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    4614:	f8df 9224 	ldr.w	r9, [pc, #548]	; 483c <L_14041_delayMicroseconds+0x112>
    4618:	2110      	movs	r1, #16
    461a:	f003 fccd 	bl	7fb8 <ADC_Module::setAveraging(unsigned char)>
  adc->adc0->setResolution(16);  // set bits of resolution
    461e:	6823      	ldr	r3, [r4, #0]
    4620:	2110      	movs	r1, #16
    4622:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    4626:	f003 fb8d 	bl	7d44 <ADC_Module::setResolution(unsigned char)>
  adc->adc0->setConversionSpeed(ADC_CONVERSION_SPEED::MED_SPEED);
    462a:	6823      	ldr	r3, [r4, #0]
    462c:	2102      	movs	r1, #2
    462e:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    4632:	f003 fa6f 	bl	7b14 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
  adc->adc0->setSamplingSpeed(ADC_SAMPLING_SPEED::MED_SPEED);
    4636:	6823      	ldr	r3, [r4, #0]
    4638:	2102      	movs	r1, #2
    463a:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    463e:	f003 fc67 	bl	7f10 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>
  adc->adc0->startContinuous(ACUR1);
    4642:	6823      	ldr	r3, [r4, #0]
    4644:	4c7e      	ldr	r4, [pc, #504]	; (4840 <L_14041_delayMicroseconds+0x116>)
    4646:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    464a:	210f      	movs	r1, #15
    464c:	f003 fd18 	bl	8080 <ADC_Module::startContinuous(unsigned char)>
		uint32_t millis_begin = systick_millis_count;
    4650:	683d      	ldr	r5, [r7, #0]
				if (elapsed > 750) break;
    4652:	f240 28ee 	movw	r8, #750	; 0x2ee
		yield();
    4656:	f006 ff97 	bl	b588 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    465a:	7823      	ldrb	r3, [r4, #0]
    465c:	2b00      	cmp	r3, #0
    465e:	f000 80b6 	beq.w	47ce <L_14041_delayMicroseconds+0xa4>
    4662:	7833      	ldrb	r3, [r6, #0]
    4664:	07d8      	lsls	r0, r3, #31
    4666:	f140 80b2 	bpl.w	47ce <L_14041_delayMicroseconds+0xa4>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    466a:	683b      	ldr	r3, [r7, #0]
    466c:	f8d9 2000 	ldr.w	r2, [r9]
    4670:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    4672:	2b0e      	cmp	r3, #14
    4674:	f240 80ab 	bls.w	47ce <L_14041_delayMicroseconds+0xa4>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4678:	210c      	movs	r1, #12
    467a:	4872      	ldr	r0, [pc, #456]	; (4844 <L_14041_delayMicroseconds+0x11a>)
    467c:	f006 fe7e 	bl	b37c <usb_serial_write>
    4680:	4871      	ldr	r0, [pc, #452]	; (4848 <L_14041_delayMicroseconds+0x11e>)
    4682:	f004 f9d1 	bl	8a28 <Print::println()>
    4686:	2116      	movs	r1, #22
    4688:	4870      	ldr	r0, [pc, #448]	; (484c <L_14041_delayMicroseconds+0x122>)
    468a:	f006 fe77 	bl	b37c <usb_serial_write>
    468e:	486e      	ldr	r0, [pc, #440]	; (4848 <L_14041_delayMicroseconds+0x11e>)
    4690:	f004 f9ca 	bl	8a28 <Print::println()>
  Serial2.begin(115200);
    4694:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    4698:	486d      	ldr	r0, [pc, #436]	; (4850 <L_14041_delayMicroseconds+0x126>)
    469a:	f004 f80b 	bl	86b4 <HardwareSerial2::begin(unsigned long)>
  Serial.println();
    469e:	486a      	ldr	r0, [pc, #424]	; (4848 <L_14041_delayMicroseconds+0x11e>)
    46a0:	f004 f9c2 	bl	8a28 <Print::println()>
    46a4:	2117      	movs	r1, #23
    46a6:	486b      	ldr	r0, [pc, #428]	; (4854 <L_14041_delayMicroseconds+0x12a>)
    46a8:	f006 fe68 	bl	b37c <usb_serial_write>
    46ac:	4866      	ldr	r0, [pc, #408]	; (4848 <L_14041_delayMicroseconds+0x11e>)
    46ae:	f004 f9bb 	bl	8a28 <Print::println()>
  if (RCM_SRS1 & RCM_SRS1_SACKERR) Serial.println("Stop Mode Acknowledge Error Reset");
    46b2:	4b69      	ldr	r3, [pc, #420]	; (4858 <L_14041_delayMicroseconds+0x12e>)
    46b4:	785b      	ldrb	r3, [r3, #1]
    46b6:	0699      	lsls	r1, r3, #26
    46b8:	f100 811a 	bmi.w	48f0 <L_14041_delayMicroseconds+0x1c6>
  if (RCM_SRS1 & RCM_SRS1_MDM_AP) Serial.println("MDM-AP Reset");
    46bc:	4b66      	ldr	r3, [pc, #408]	; (4858 <L_14041_delayMicroseconds+0x12e>)
    46be:	785b      	ldrb	r3, [r3, #1]
    46c0:	071a      	lsls	r2, r3, #28
    46c2:	f100 810d 	bmi.w	48e0 <L_14041_delayMicroseconds+0x1b6>
  if (RCM_SRS1 & RCM_SRS1_SW) Serial.println("Software Reset");  // reboot with SCB_AIRCR = 0x05FA0004
    46c6:	4b64      	ldr	r3, [pc, #400]	; (4858 <L_14041_delayMicroseconds+0x12e>)
    46c8:	785b      	ldrb	r3, [r3, #1]
    46ca:	075b      	lsls	r3, r3, #29
    46cc:	f100 8100 	bmi.w	48d0 <L_14041_delayMicroseconds+0x1a6>
  if (RCM_SRS1 & RCM_SRS1_LOCKUP) Serial.println("Core Lockup Event Reset");
    46d0:	4b61      	ldr	r3, [pc, #388]	; (4858 <L_14041_delayMicroseconds+0x12e>)
    46d2:	785b      	ldrb	r3, [r3, #1]
    46d4:	079e      	lsls	r6, r3, #30
    46d6:	f100 80e7 	bmi.w	48a8 <L_14041_delayMicroseconds+0x17e>
  if (RCM_SRS0 & RCM_SRS0_POR) Serial.println("Power-on Reset");        // removed / applied power
    46da:	4b5f      	ldr	r3, [pc, #380]	; (4858 <L_14041_delayMicroseconds+0x12e>)
    46dc:	781b      	ldrb	r3, [r3, #0]
    46de:	061d      	lsls	r5, r3, #24
    46e0:	f100 80ee 	bmi.w	48c0 <L_14041_delayMicroseconds+0x196>
  if (RCM_SRS0 & RCM_SRS0_PIN) Serial.println("External Pin Reset");    // Reboot with software download
    46e4:	4b5c      	ldr	r3, [pc, #368]	; (4858 <L_14041_delayMicroseconds+0x12e>)
    46e6:	781b      	ldrb	r3, [r3, #0]
    46e8:	065c      	lsls	r4, r3, #25
    46ea:	f100 80d5 	bmi.w	4898 <L_14041_delayMicroseconds+0x16e>
  if (RCM_SRS0 & RCM_SRS0_WDOG) Serial.println("Watchdog(COP) Reset");  // WDT timed out
    46ee:	4b5a      	ldr	r3, [pc, #360]	; (4858 <L_14041_delayMicroseconds+0x12e>)
    46f0:	781b      	ldrb	r3, [r3, #0]
    46f2:	0698      	lsls	r0, r3, #26
    46f4:	f100 80c8 	bmi.w	4888 <L_14041_delayMicroseconds+0x15e>
  if (RCM_SRS0 & RCM_SRS0_LOC) Serial.println("Loss of External Clock Reset");
    46f8:	4b57      	ldr	r3, [pc, #348]	; (4858 <L_14041_delayMicroseconds+0x12e>)
    46fa:	781b      	ldrb	r3, [r3, #0]
    46fc:	0759      	lsls	r1, r3, #29
    46fe:	f100 8084 	bmi.w	480a <L_14041_delayMicroseconds+0xe0>
  if (RCM_SRS0 & RCM_SRS0_LOL) Serial.println("Loss of Lock in PLL Reset");
    4702:	4b55      	ldr	r3, [pc, #340]	; (4858 <L_14041_delayMicroseconds+0x12e>)
    4704:	781b      	ldrb	r3, [r3, #0]
    4706:	071a      	lsls	r2, r3, #28
    4708:	d477      	bmi.n	47fa <L_14041_delayMicroseconds+0xd0>
  if (RCM_SRS0 & RCM_SRS0_LVD) Serial.println("Low-voltage Detect Reset");
    470a:	4b53      	ldr	r3, [pc, #332]	; (4858 <L_14041_delayMicroseconds+0x12e>)
    470c:	781b      	ldrb	r3, [r3, #0]
    470e:	079b      	lsls	r3, r3, #30
    4710:	d46b      	bmi.n	47ea <L_14041_delayMicroseconds+0xc0>
  Serial.println();
    4712:	484d      	ldr	r0, [pc, #308]	; (4848 <L_14041_delayMicroseconds+0x11e>)
    4714:	f004 f988 	bl	8a28 <Print::println()>
  noInterrupts();                  // don't allow interrupts while setting up WDOG
    4718:	b672      	cpsid	i
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;  // unlock access to WDOG registers
    471a:	4b50      	ldr	r3, [pc, #320]	; (485c <L_14041_delayMicroseconds+0x132>)
    471c:	f24c 5020 	movw	r0, #50464	; 0xc520
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
    4720:	f64d 1128 	movw	r1, #55592	; 0xd928
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;  // unlock access to WDOG registers
    4724:	81d8      	strh	r0, [r3, #14]
#elif F_CPU == 2000000
	uint32_t n = usec >> 1;
#endif
    // changed because a delay of 1 micro Sec @ 2MHz will be 0
	if (n == 0) return;
	__asm__ volatile(
    4726:	2220      	movs	r2, #32
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
    4728:	81d9      	strh	r1, [r3, #14]

0000472a <L_14041_delayMicroseconds>:
    472a:	3a01      	subs	r2, #1
    472c:	d1fd      	bne.n	472a <L_14041_delayMicroseconds>
  WDOG_TOVALL = 0x0000;
    472e:	2200      	movs	r2, #0
  WDOG_TOVALH = 0x1000;
    4730:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    4734:	8099      	strh	r1, [r3, #4]
  WDOG_TOVALL = 0x0000;
    4736:	80da      	strh	r2, [r3, #6]
  WDOG_PRESC = 0;
    4738:	82da      	strh	r2, [r3, #22]
  WDOG_STCTRLH |= WDOG_STCTRLH_ALLOWUPDATE | WDOG_STCTRLH_WDOGEN | WDOG_STCTRLH_WAITEN | WDOG_STCTRLH_STOPEN | WDOG_STCTRLH_CLKSRC;
    473a:	881a      	ldrh	r2, [r3, #0]
    473c:	b292      	uxth	r2, r2
    473e:	f042 02d3 	orr.w	r2, r2, #211	; 0xd3
    4742:	801a      	strh	r2, [r3, #0]
  interrupts();
    4744:	b662      	cpsie	i
    4746:	2118      	movs	r1, #24
    4748:	4845      	ldr	r0, [pc, #276]	; (4860 <L_14041_delayMicroseconds+0x136>)
    474a:	f8df 8118 	ldr.w	r8, [pc, #280]	; 4864 <L_14041_delayMicroseconds+0x13a>
    474e:	f006 fe15 	bl	b37c <usb_serial_write>
    4752:	483d      	ldr	r0, [pc, #244]	; (4848 <L_14041_delayMicroseconds+0x11e>)
    4754:	f004 f968 	bl	8a28 <Print::println()>
        #if defined(__has_include) && __has_include(<type_traits>)
        static_assert(std::is_trivially_copyable<T>::value,"You can not use this type with EEPROM.get" ); // the code below only makes sense if you can "memcpy" T
        #endif
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    4758:	f108 34ff 	add.w	r4, r8, #4294967295
    475c:	f108 06cf 	add.w	r6, r8, #207	; 0xcf
    4760:	f1c8 0501 	rsb	r5, r8, #1
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    4764:	1928      	adds	r0, r5, r4
    4766:	f004 fb7b 	bl	8e60 <eeprom_read_byte>
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    476a:	f804 0f01 	strb.w	r0, [r4, #1]!
    476e:	42b4      	cmp	r4, r6
    4770:	d1f8      	bne.n	4764 <L_14041_delayMicroseconds+0x3a>
  if (settings.version != EEPROM_VERSION) {
    4772:	f898 3000 	ldrb.w	r3, [r8]
    4776:	2b12      	cmp	r3, #18
    4778:	d001      	beq.n	477e <L_14041_delayMicroseconds+0x54>
    loadSettings();
    477a:	f7fd faa7 	bl	1ccc <loadSettings()>
  canSerial.begin(settings.SerialCanBaud);  //Expansion serial bus
    477e:	f8d8 10c8 	ldr.w	r1, [r8, #200]	; 0xc8
    4782:	4839      	ldr	r0, [pc, #228]	; (4868 <L_14041_delayMicroseconds+0x13e>)
    4784:	f004 f84e 	bl	8824 <HardwareSerial3::begin(unsigned long)>
  Logger::setLoglevel(Logger::Off);         //Debug = 0, Info = 1, Warn = 2, Error = 3, Off = 4
    4788:	2004      	movs	r0, #4
    478a:	f7fd f881 	bl	1890 <Logger::setLoglevel(Logger::LogLevel)>
  lastUpdate = 0;
    478e:	4b37      	ldr	r3, [pc, #220]	; (486c <L_14041_delayMicroseconds+0x142>)
    4790:	2200      	movs	r2, #0
  digitalWrite(led, HIGH);
    4792:	2101      	movs	r1, #1
    4794:	200d      	movs	r0, #13
  lastUpdate = 0;
    4796:	601a      	str	r2, [r3, #0]
  digitalWrite(led, HIGH);
    4798:	f004 ff7e 	bl	9698 <digitalWrite>
  bms.setPstrings(settings.Pstrings);
    479c:	f8d8 1054 	ldr.w	r1, [r8, #84]	; 0x54
    47a0:	4833      	ldr	r0, [pc, #204]	; (4870 <L_14041_delayMicroseconds+0x146>)
    47a2:	f7fc fa63 	bl	c6c <BMSModuleManager::setPstrings(int)>
  bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt);
    47a6:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
    47aa:	f898 1040 	ldrb.w	r1, [r8, #64]	; 0x40
    47ae:	4830      	ldr	r0, [pc, #192]	; (4870 <L_14041_delayMicroseconds+0x146>)
    47b0:	f7fc fa5e 	bl	c70 <BMSModuleManager::setSensors(int, float)>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    47b4:	683b      	ldr	r3, [r7, #0]
    47b6:	9303      	str	r3, [sp, #12]
	return ret;
    47b8:	9803      	ldr	r0, [sp, #12]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    47ba:	683a      	ldr	r2, [r7, #0]
    47bc:	9202      	str	r2, [sp, #8]
  Pretimer = millis();
    47be:	492d      	ldr	r1, [pc, #180]	; (4874 <L_14041_delayMicroseconds+0x14a>)
  Pretimer1 = millis();
    47c0:	4b2d      	ldr	r3, [pc, #180]	; (4878 <L_14041_delayMicroseconds+0x14e>)
	return ret;
    47c2:	9a02      	ldr	r2, [sp, #8]
  Pretimer = millis();
    47c4:	6008      	str	r0, [r1, #0]
  Pretimer1 = millis();
    47c6:	601a      	str	r2, [r3, #0]
}
    47c8:	b005      	add	sp, #20
    47ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
    47ce:	683b      	ldr	r3, [r7, #0]
			if (usb_configuration) {
    47d0:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
    47d2:	1b5b      	subs	r3, r3, r5
			if (usb_configuration) {
    47d4:	b132      	cbz	r2, 47e4 <L_14041_delayMicroseconds+0xba>
				if (elapsed > 2000) break;
    47d6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    47da:	f63f af4d 	bhi.w	4678 <setup+0x184>
			yield();
    47de:	f006 fed3 	bl	b588 <yield>
    47e2:	e738      	b.n	4656 <setup+0x162>
				if (elapsed > 750) break;
    47e4:	4543      	cmp	r3, r8
    47e6:	d9fa      	bls.n	47de <L_14041_delayMicroseconds+0xb4>
    47e8:	e746      	b.n	4678 <setup+0x184>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    47ea:	2118      	movs	r1, #24
    47ec:	4823      	ldr	r0, [pc, #140]	; (487c <L_14041_delayMicroseconds+0x152>)
    47ee:	f006 fdc5 	bl	b37c <usb_serial_write>
    47f2:	4815      	ldr	r0, [pc, #84]	; (4848 <L_14041_delayMicroseconds+0x11e>)
    47f4:	f004 f918 	bl	8a28 <Print::println()>
    47f8:	e78b      	b.n	4712 <setup+0x21e>
    47fa:	2119      	movs	r1, #25
    47fc:	4820      	ldr	r0, [pc, #128]	; (4880 <L_14041_delayMicroseconds+0x156>)
    47fe:	f006 fdbd 	bl	b37c <usb_serial_write>
    4802:	4811      	ldr	r0, [pc, #68]	; (4848 <L_14041_delayMicroseconds+0x11e>)
    4804:	f004 f910 	bl	8a28 <Print::println()>
    4808:	e77f      	b.n	470a <setup+0x216>
    480a:	211c      	movs	r1, #28
    480c:	481d      	ldr	r0, [pc, #116]	; (4884 <L_14041_delayMicroseconds+0x15a>)
    480e:	f006 fdb5 	bl	b37c <usb_serial_write>
    4812:	480d      	ldr	r0, [pc, #52]	; (4848 <L_14041_delayMicroseconds+0x11e>)
    4814:	f004 f908 	bl	8a28 <Print::println()>
    4818:	e773      	b.n	4702 <setup+0x20e>
    481a:	bf00      	nop
    481c:	1fff8764 	.word	0x1fff8764
    4820:	1fffb2ec 	.word	0x1fffb2ec
    4824:	1fffb110 	.word	0x1fffb110
    4828:	1fffb488 	.word	0x1fffb488
    482c:	0001e848 	.word	0x0001e848
    4830:	1fff8fd0 	.word	0x1fff8fd0
    4834:	1fffb4e0 	.word	0x1fffb4e0
    4838:	1fffb6fc 	.word	0x1fffb6fc
    483c:	1fffb700 	.word	0x1fffb700
    4840:	1fffb6d8 	.word	0x1fffb6d8
    4844:	000136cc 	.word	0x000136cc
    4848:	1fff880c 	.word	0x1fff880c
    484c:	000136dc 	.word	0x000136dc
    4850:	1fff87ac 	.word	0x1fff87ac
    4854:	000136f4 	.word	0x000136f4
    4858:	4007f000 	.word	0x4007f000
    485c:	40052000 	.word	0x40052000
    4860:	000137f8 	.word	0x000137f8
    4864:	1fffb20c 	.word	0x1fffb20c
    4868:	1fff87c0 	.word	0x1fff87c0
    486c:	1fffb13c 	.word	0x1fffb13c
    4870:	1fff8fe0 	.word	0x1fff8fe0
    4874:	1fff8fb8 	.word	0x1fff8fb8
    4878:	1fff8fbc 	.word	0x1fff8fbc
    487c:	000137dc 	.word	0x000137dc
    4880:	000137c0 	.word	0x000137c0
    4884:	000137a0 	.word	0x000137a0
    4888:	2113      	movs	r1, #19
    488a:	481d      	ldr	r0, [pc, #116]	; (4900 <L_14041_delayMicroseconds+0x1d6>)
    488c:	f006 fd76 	bl	b37c <usb_serial_write>
    4890:	481c      	ldr	r0, [pc, #112]	; (4904 <L_14041_delayMicroseconds+0x1da>)
    4892:	f004 f8c9 	bl	8a28 <Print::println()>
    4896:	e72f      	b.n	46f8 <setup+0x204>
    4898:	2112      	movs	r1, #18
    489a:	481b      	ldr	r0, [pc, #108]	; (4908 <L_14041_delayMicroseconds+0x1de>)
    489c:	f006 fd6e 	bl	b37c <usb_serial_write>
    48a0:	4818      	ldr	r0, [pc, #96]	; (4904 <L_14041_delayMicroseconds+0x1da>)
    48a2:	f004 f8c1 	bl	8a28 <Print::println()>
    48a6:	e722      	b.n	46ee <setup+0x1fa>
    48a8:	2117      	movs	r1, #23
    48aa:	4818      	ldr	r0, [pc, #96]	; (490c <L_14041_delayMicroseconds+0x1e2>)
    48ac:	f006 fd66 	bl	b37c <usb_serial_write>
    48b0:	4814      	ldr	r0, [pc, #80]	; (4904 <L_14041_delayMicroseconds+0x1da>)
    48b2:	f004 f8b9 	bl	8a28 <Print::println()>
  if (RCM_SRS0 & RCM_SRS0_POR) Serial.println("Power-on Reset");        // removed / applied power
    48b6:	4b16      	ldr	r3, [pc, #88]	; (4910 <L_14041_delayMicroseconds+0x1e6>)
    48b8:	781b      	ldrb	r3, [r3, #0]
    48ba:	061d      	lsls	r5, r3, #24
    48bc:	f57f af12 	bpl.w	46e4 <setup+0x1f0>
    48c0:	210e      	movs	r1, #14
    48c2:	4814      	ldr	r0, [pc, #80]	; (4914 <L_14041_delayMicroseconds+0x1ea>)
    48c4:	f006 fd5a 	bl	b37c <usb_serial_write>
    48c8:	480e      	ldr	r0, [pc, #56]	; (4904 <L_14041_delayMicroseconds+0x1da>)
    48ca:	f004 f8ad 	bl	8a28 <Print::println()>
    48ce:	e709      	b.n	46e4 <setup+0x1f0>
    48d0:	210e      	movs	r1, #14
    48d2:	4811      	ldr	r0, [pc, #68]	; (4918 <L_14041_delayMicroseconds+0x1ee>)
    48d4:	f006 fd52 	bl	b37c <usb_serial_write>
    48d8:	480a      	ldr	r0, [pc, #40]	; (4904 <L_14041_delayMicroseconds+0x1da>)
    48da:	f004 f8a5 	bl	8a28 <Print::println()>
    48de:	e6f7      	b.n	46d0 <setup+0x1dc>
    48e0:	210c      	movs	r1, #12
    48e2:	480e      	ldr	r0, [pc, #56]	; (491c <L_14041_delayMicroseconds+0x1f2>)
    48e4:	f006 fd4a 	bl	b37c <usb_serial_write>
    48e8:	4806      	ldr	r0, [pc, #24]	; (4904 <L_14041_delayMicroseconds+0x1da>)
    48ea:	f004 f89d 	bl	8a28 <Print::println()>
    48ee:	e6ea      	b.n	46c6 <setup+0x1d2>
    48f0:	2121      	movs	r1, #33	; 0x21
    48f2:	480b      	ldr	r0, [pc, #44]	; (4920 <L_14041_delayMicroseconds+0x1f6>)
    48f4:	f006 fd42 	bl	b37c <usb_serial_write>
    48f8:	4802      	ldr	r0, [pc, #8]	; (4904 <L_14041_delayMicroseconds+0x1da>)
    48fa:	f004 f895 	bl	8a28 <Print::println()>
    48fe:	e6dd      	b.n	46bc <setup+0x1c8>
    4900:	0001378c 	.word	0x0001378c
    4904:	1fff880c 	.word	0x1fff880c
    4908:	00013778 	.word	0x00013778
    490c:	00013750 	.word	0x00013750
    4910:	4007f000 	.word	0x4007f000
    4914:	00013768 	.word	0x00013768
    4918:	00013740 	.word	0x00013740
    491c:	00013730 	.word	0x00013730
    4920:	0001370c 	.word	0x0001370c

00004924 <SetSerialBaud(unsigned long)>:
void SetSerialBaud(uint32_t Speed) {
    4924:	b510      	push	{r4, lr}
    4926:	4604      	mov	r4, r0
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    4928:	2300      	movs	r3, #0
    492a:	220a      	movs	r2, #10
    492c:	4621      	mov	r1, r4
    492e:	481a      	ldr	r0, [pc, #104]	; (4998 <SetSerialBaud(unsigned long)+0x74>)
    4930:	f004 f892 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    4934:	4818      	ldr	r0, [pc, #96]	; (4998 <SetSerialBaud(unsigned long)+0x74>)
    4936:	f004 f877 	bl	8a28 <Print::println()>
  switch (Speed) {
    493a:	f5b4 4f16 	cmp.w	r4, #38400	; 0x9600
    493e:	d01e      	beq.n	497e <SetSerialBaud(unsigned long)+0x5a>
    4940:	d818      	bhi.n	4974 <SetSerialBaud(unsigned long)+0x50>
    4942:	f5b4 5f16 	cmp.w	r4, #9600	; 0x2580
    4946:	d025      	beq.n	4994 <SetSerialBaud(unsigned long)+0x70>
    4948:	f5b4 4f96 	cmp.w	r4, #19200	; 0x4b00
      can.baudRate(1);
    494c:	bf08      	it	eq
    494e:	2101      	moveq	r1, #1
  switch (Speed) {
    4950:	d117      	bne.n	4982 <SetSerialBaud(unsigned long)+0x5e>
      can.baudRate(1);
    4952:	4812      	ldr	r0, [pc, #72]	; (499c <SetSerialBaud(unsigned long)+0x78>)
    4954:	f003 fdd8 	bl	8508 <Serial_CAN::baudRate(unsigned char)>
      settings.SerialCanBaud = 19200;
    4958:	4b11      	ldr	r3, [pc, #68]	; (49a0 <SetSerialBaud(unsigned long)+0x7c>)
    495a:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
	virtual int peek(void)          { return serial3_peek(); }
	virtual int read(void)          { return serial3_getchar(); }
	virtual void flush(void)        { serial3_flush(); }
    495e:	f005 fe0f 	bl	a580 <serial3_flush>
      canSerial.begin(19200);
    4962:	4810      	ldr	r0, [pc, #64]	; (49a4 <SetSerialBaud(unsigned long)+0x80>)
    4964:	4621      	mov	r1, r4
    4966:	f003 ff5d 	bl	8824 <HardwareSerial3::begin(unsigned long)>
}
    496a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      can.exitSettingMode();
    496e:	480b      	ldr	r0, [pc, #44]	; (499c <SetSerialBaud(unsigned long)+0x78>)
    4970:	f003 be22 	b.w	85b8 <Serial_CAN::exitSettingMode()>
  switch (Speed) {
    4974:	f5b4 3fe1 	cmp.w	r4, #115200	; 0x1c200
    4978:	d103      	bne.n	4982 <SetSerialBaud(unsigned long)+0x5e>
      can.baudRate(4);
    497a:	2104      	movs	r1, #4
    497c:	e7e9      	b.n	4952 <SetSerialBaud(unsigned long)+0x2e>
      can.baudRate(2);
    497e:	2102      	movs	r1, #2
    4980:	e7e7      	b.n	4952 <SetSerialBaud(unsigned long)+0x2e>
    4982:	4809      	ldr	r0, [pc, #36]	; (49a8 <SetSerialBaud(unsigned long)+0x84>)
    4984:	210f      	movs	r1, #15
    4986:	f006 fcf9 	bl	b37c <usb_serial_write>
}
    498a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	size_t println(const char s[])			{ return print(s) + println(); }
    498e:	4802      	ldr	r0, [pc, #8]	; (4998 <SetSerialBaud(unsigned long)+0x74>)
    4990:	f004 b84a 	b.w	8a28 <Print::println()>
      can.baudRate(0);
    4994:	2100      	movs	r1, #0
    4996:	e7dc      	b.n	4952 <SetSerialBaud(unsigned long)+0x2e>
    4998:	1fff880c 	.word	0x1fff880c
    499c:	1fffb00c 	.word	0x1fffb00c
    49a0:	1fffb20c 	.word	0x1fffb20c
    49a4:	1fff87c0 	.word	0x1fff87c0
    49a8:	00013814 	.word	0x00013814

000049ac <menu()>:
void menu() {
    49ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (menuload == 4) {
    49ae:	4cb7      	ldr	r4, [pc, #732]	; (4c8c <menu()+0x2e0>)
  incomingByte = Serial.read();  // read the incoming byte:
    49b0:	4eb7      	ldr	r6, [pc, #732]	; (4c90 <menu()+0x2e4>)
void menu() {
    49b2:	b083      	sub	sp, #12
        virtual int read() { return usb_serial_getchar(); }
    49b4:	f006 fc74 	bl	b2a0 <usb_serial_getchar>
  if (menuload == 4) {
    49b8:	6823      	ldr	r3, [r4, #0]
  incomingByte = Serial.read();  // read the incoming byte:
    49ba:	6030      	str	r0, [r6, #0]
  if (menuload == 4) {
    49bc:	2b04      	cmp	r3, #4
    49be:	d05c      	beq.n	4a7a <menu()+0xce>
  if (menuload == 2) {
    49c0:	2b02      	cmp	r3, #2
    49c2:	f040 8153 	bne.w	4c6c <menu()+0x2c0>
    switch (incomingByte) {
    49c6:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
    49ca:	2a42      	cmp	r2, #66	; 0x42
    49cc:	d84a      	bhi.n	4a64 <menu()+0xb8>
    49ce:	e8df f012 	tbh	[pc, r2, lsl #1]
    49d2:	0664      	.short	0x0664
    49d4:	067d0670 	.word	0x067d0670
    49d8:	06b7069a 	.word	0x06b7069a
    49dc:	004906c6 	.word	0x004906c6
    49e0:	00490709 	.word	0x00490709
    49e4:	00490049 	.word	0x00490049
    49e8:	00490049 	.word	0x00490049
    49ec:	00490049 	.word	0x00490049
    49f0:	00490049 	.word	0x00490049
    49f4:	00490049 	.word	0x00490049
    49f8:	00490049 	.word	0x00490049
    49fc:	00490049 	.word	0x00490049
    4a00:	00490049 	.word	0x00490049
    4a04:	00490049 	.word	0x00490049
    4a08:	00490049 	.word	0x00490049
    4a0c:	00490049 	.word	0x00490049
    4a10:	00490049 	.word	0x00490049
    4a14:	00490049 	.word	0x00490049
    4a18:	00490049 	.word	0x00490049
    4a1c:	00490049 	.word	0x00490049
    4a20:	00490049 	.word	0x00490049
    4a24:	00490049 	.word	0x00490049
    4a28:	00490049 	.word	0x00490049
    4a2c:	00490049 	.word	0x00490049
    4a30:	00490049 	.word	0x00490049
    4a34:	01490049 	.word	0x01490049
    4a38:	00490049 	.word	0x00490049
    4a3c:	00490049 	.word	0x00490049
    4a40:	00490049 	.word	0x00490049
    4a44:	00490049 	.word	0x00490049
    4a48:	00490049 	.word	0x00490049
    4a4c:	00490049 	.word	0x00490049
    4a50:	00450049 	.word	0x00450049
    4a54:	068e0049 	.word	0x068e0049
    switch (incomingByte) {
    4a58:	2871      	cmp	r0, #113	; 0x71
    4a5a:	d103      	bne.n	4a64 <menu()+0xb8>
          menuload = 1;
    4a5c:	2300      	movs	r3, #0
          incomingByte = 'i';
    4a5e:	2073      	movs	r0, #115	; 0x73
          menuload = 1;
    4a60:	6023      	str	r3, [r4, #0]
          incomingByte = 'i';
    4a62:	6030      	str	r0, [r6, #0]
  if (incomingByte == 115 & menuload == 0) {
    4a64:	2873      	cmp	r0, #115	; 0x73
    4a66:	bf08      	it	eq
    4a68:	2b00      	cmpeq	r3, #0
    4a6a:	bf0c      	ite	eq
    4a6c:	2301      	moveq	r3, #1
    4a6e:	2300      	movne	r3, #0
    4a70:	2b00      	cmp	r3, #0
    4a72:	f040 808d 	bne.w	4b90 <menu()+0x1e4>
}
    4a76:	b003      	add	sp, #12
    4a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (incomingByte) {
    4a7a:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    4a7e:	2a41      	cmp	r2, #65	; 0x41
    4a80:	d8f0      	bhi.n	4a64 <menu()+0xb8>
    4a82:	a101      	add	r1, pc, #4	; (adr r1, 4a88 <menu()+0xdc>)
    4a84:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    4a88:	00005323 	.word	0x00005323
    4a8c:	00005625 	.word	0x00005625
    4a90:	0000563b 	.word	0x0000563b
    4a94:	0000563f 	.word	0x0000563f
    4a98:	0000565b 	.word	0x0000565b
    4a9c:	0000565f 	.word	0x0000565f
    4aa0:	00005679 	.word	0x00005679
    4aa4:	0000568f 	.word	0x0000568f
    4aa8:	00005693 	.word	0x00005693
    4aac:	000052ed 	.word	0x000052ed
    4ab0:	00004a65 	.word	0x00004a65
    4ab4:	00004a65 	.word	0x00004a65
    4ab8:	00004a65 	.word	0x00004a65
    4abc:	00004a65 	.word	0x00004a65
    4ac0:	00004a65 	.word	0x00004a65
    4ac4:	00004a65 	.word	0x00004a65
    4ac8:	00004a65 	.word	0x00004a65
    4acc:	00004a65 	.word	0x00004a65
    4ad0:	00004a65 	.word	0x00004a65
    4ad4:	00004a65 	.word	0x00004a65
    4ad8:	00004a65 	.word	0x00004a65
    4adc:	00004a65 	.word	0x00004a65
    4ae0:	00004a65 	.word	0x00004a65
    4ae4:	00004a65 	.word	0x00004a65
    4ae8:	00004a65 	.word	0x00004a65
    4aec:	00004a65 	.word	0x00004a65
    4af0:	00004a65 	.word	0x00004a65
    4af4:	00004a65 	.word	0x00004a65
    4af8:	00004a65 	.word	0x00004a65
    4afc:	00004a65 	.word	0x00004a65
    4b00:	00004a65 	.word	0x00004a65
    4b04:	00004a65 	.word	0x00004a65
    4b08:	00004a65 	.word	0x00004a65
    4b0c:	00004a65 	.word	0x00004a65
    4b10:	00004a65 	.word	0x00004a65
    4b14:	00004a65 	.word	0x00004a65
    4b18:	00004a65 	.word	0x00004a65
    4b1c:	00004a65 	.word	0x00004a65
    4b20:	00004a65 	.word	0x00004a65
    4b24:	00004a65 	.word	0x00004a65
    4b28:	00004a65 	.word	0x00004a65
    4b2c:	00004a65 	.word	0x00004a65
    4b30:	00004a65 	.word	0x00004a65
    4b34:	00004a65 	.word	0x00004a65
    4b38:	00004a65 	.word	0x00004a65
    4b3c:	00004a65 	.word	0x00004a65
    4b40:	00004a65 	.word	0x00004a65
    4b44:	00004a65 	.word	0x00004a65
    4b48:	00004a65 	.word	0x00004a65
    4b4c:	00005697 	.word	0x00005697
    4b50:	00004a65 	.word	0x00004a65
    4b54:	00004a65 	.word	0x00004a65
    4b58:	00004a65 	.word	0x00004a65
    4b5c:	00004a65 	.word	0x00004a65
    4b60:	00004a65 	.word	0x00004a65
    4b64:	00004a65 	.word	0x00004a65
    4b68:	00004a65 	.word	0x00004a65
    4b6c:	00004a65 	.word	0x00004a65
    4b70:	00004a65 	.word	0x00004a65
    4b74:	00004a65 	.word	0x00004a65
    4b78:	00004a65 	.word	0x00004a65
    4b7c:	00004a65 	.word	0x00004a65
    4b80:	00004a65 	.word	0x00004a65
    4b84:	00004a65 	.word	0x00004a65
    4b88:	00004a65 	.word	0x00004a65
    4b8c:	00004a5d 	.word	0x00004a5d
    4b90:	4d40      	ldr	r5, [pc, #256]	; (4c94 <menu()+0x2e8>)
    SERIALCONSOLE.println();
    4b92:	4841      	ldr	r0, [pc, #260]	; (4c98 <menu()+0x2ec>)
    4b94:	f003 ff48 	bl	8a28 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4b98:	2104      	movs	r1, #4
    4b9a:	4840      	ldr	r0, [pc, #256]	; (4c9c <menu()+0x2f0>)
    4b9c:	f006 fbee 	bl	b37c <usb_serial_write>
    4ba0:	483d      	ldr	r0, [pc, #244]	; (4c98 <menu()+0x2ec>)
    4ba2:	f003 ff41 	bl	8a28 <Print::println()>
    4ba6:	2110      	movs	r1, #16
    4ba8:	483d      	ldr	r0, [pc, #244]	; (4ca0 <menu()+0x2f4>)
    4baa:	f006 fbe7 	bl	b37c <usb_serial_write>
    4bae:	483a      	ldr	r0, [pc, #232]	; (4c98 <menu()+0x2ec>)
    4bb0:	f003 ff3a 	bl	8a28 <Print::println()>
    4bb4:	2113      	movs	r1, #19
    4bb6:	483b      	ldr	r0, [pc, #236]	; (4ca4 <menu()+0x2f8>)
    4bb8:	f006 fbe0 	bl	b37c <usb_serial_write>
    SERIALCONSOLE.println(firmver);
    4bbc:	4b3a      	ldr	r3, [pc, #232]	; (4ca8 <menu()+0x2fc>)
	size_t print(int n)				{ return print((long)n); }
    4bbe:	4836      	ldr	r0, [pc, #216]	; (4c98 <menu()+0x2ec>)
    4bc0:	6819      	ldr	r1, [r3, #0]
    4bc2:	f003 ff29 	bl	8a18 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4bc6:	4834      	ldr	r0, [pc, #208]	; (4c98 <menu()+0x2ec>)
    4bc8:	f003 ff2e 	bl	8a28 <Print::println()>
    4bcc:	2114      	movs	r1, #20
    4bce:	4837      	ldr	r0, [pc, #220]	; (4cac <menu()+0x300>)
    4bd0:	f006 fbd4 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4bd4:	4830      	ldr	r0, [pc, #192]	; (4c98 <menu()+0x2ec>)
    4bd6:	f003 ff27 	bl	8a28 <Print::println()>
    4bda:	211e      	movs	r1, #30
    4bdc:	4834      	ldr	r0, [pc, #208]	; (4cb0 <menu()+0x304>)
    4bde:	f006 fbcd 	bl	b37c <usb_serial_write>
    4be2:	482d      	ldr	r0, [pc, #180]	; (4c98 <menu()+0x2ec>)
    4be4:	f003 ff20 	bl	8a28 <Print::println()>
    4be8:	2115      	movs	r1, #21
    4bea:	4832      	ldr	r0, [pc, #200]	; (4cb4 <menu()+0x308>)
    4bec:	f006 fbc6 	bl	b37c <usb_serial_write>
    4bf0:	4829      	ldr	r0, [pc, #164]	; (4c98 <menu()+0x2ec>)
    4bf2:	f003 ff19 	bl	8a28 <Print::println()>
    4bf6:	211e      	movs	r1, #30
    4bf8:	482f      	ldr	r0, [pc, #188]	; (4cb8 <menu()+0x30c>)
    4bfa:	f006 fbbf 	bl	b37c <usb_serial_write>
    4bfe:	4826      	ldr	r0, [pc, #152]	; (4c98 <menu()+0x2ec>)
    4c00:	f003 ff12 	bl	8a28 <Print::println()>
    4c04:	2120      	movs	r1, #32
    4c06:	482d      	ldr	r0, [pc, #180]	; (4cbc <menu()+0x310>)
    4c08:	f006 fbb8 	bl	b37c <usb_serial_write>
    4c0c:	4822      	ldr	r0, [pc, #136]	; (4c98 <menu()+0x2ec>)
    4c0e:	f003 ff0b 	bl	8a28 <Print::println()>
    4c12:	2119      	movs	r1, #25
    4c14:	482a      	ldr	r0, [pc, #168]	; (4cc0 <menu()+0x314>)
    4c16:	f006 fbb1 	bl	b37c <usb_serial_write>
    4c1a:	481f      	ldr	r0, [pc, #124]	; (4c98 <menu()+0x2ec>)
    4c1c:	f003 ff04 	bl	8a28 <Print::println()>
    4c20:	2116      	movs	r1, #22
    4c22:	4828      	ldr	r0, [pc, #160]	; (4cc4 <menu()+0x318>)
    4c24:	f006 fbaa 	bl	b37c <usb_serial_write>
    4c28:	481b      	ldr	r0, [pc, #108]	; (4c98 <menu()+0x2ec>)
    4c2a:	f003 fefd 	bl	8a28 <Print::println()>
    4c2e:	2112      	movs	r1, #18
    4c30:	4825      	ldr	r0, [pc, #148]	; (4cc8 <menu()+0x31c>)
    4c32:	f006 fba3 	bl	b37c <usb_serial_write>
    4c36:	4818      	ldr	r0, [pc, #96]	; (4c98 <menu()+0x2ec>)
    4c38:	f003 fef6 	bl	8a28 <Print::println()>
    4c3c:	210f      	movs	r1, #15
    4c3e:	4823      	ldr	r0, [pc, #140]	; (4ccc <menu()+0x320>)
    4c40:	f006 fb9c 	bl	b37c <usb_serial_write>
    4c44:	4814      	ldr	r0, [pc, #80]	; (4c98 <menu()+0x2ec>)
    4c46:	f003 feef 	bl	8a28 <Print::println()>
    4c4a:	210d      	movs	r1, #13
    4c4c:	4820      	ldr	r0, [pc, #128]	; (4cd0 <menu()+0x324>)
    4c4e:	f006 fb95 	bl	b37c <usb_serial_write>
    4c52:	4811      	ldr	r0, [pc, #68]	; (4c98 <menu()+0x2ec>)
    4c54:	f003 fee8 	bl	8a28 <Print::println()>
    debug = 0;
    4c58:	2200      	movs	r2, #0
    menuload = 1;
    4c5a:	2301      	movs	r3, #1
    debug = 0;
    4c5c:	602a      	str	r2, [r5, #0]
    menuload = 1;
    4c5e:	6023      	str	r3, [r4, #0]
}
    4c60:	b003      	add	sp, #12
    4c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
        calcur();
    4c64:	f7fe fa16 	bl	3094 <calcur()>
  if (menuload == 9) {
    4c68:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    4c6a:	6830      	ldr	r0, [r6, #0]
  if (menuload == 9) {
    4c6c:	2b09      	cmp	r3, #9
    4c6e:	d138      	bne.n	4ce2 <menu()+0x336>
    switch (incomingByte) {
    4c70:	2834      	cmp	r0, #52	; 0x34
    4c72:	f73f aef1 	bgt.w	4a58 <menu()+0xac>
    4c76:	2830      	cmp	r0, #48	; 0x30
    4c78:	f77f aef4 	ble.w	4a64 <menu()+0xb8>
    4c7c:	3832      	subs	r0, #50	; 0x32
    4c7e:	2802      	cmp	r0, #2
    4c80:	f201 8410 	bhi.w	64a4 <menu()+0x1af8>
    4c84:	e8df f000 	tbb	[pc, r0]
    4c88:	2638      	.short	0x2638
    4c8a:	4d          	.byte	0x4d
    4c8b:	00          	.byte	0x00
    4c8c:	1fffb16c 	.word	0x1fffb16c
    4c90:	1fffb134 	.word	0x1fffb134
    4c94:	1fff8744 	.word	0x1fff8744
    4c98:	1fff880c 	.word	0x1fff880c
    4c9c:	0001414c 	.word	0x0001414c
    4ca0:	00014154 	.word	0x00014154
    4ca4:	00014168 	.word	0x00014168
    4ca8:	1fff8750 	.word	0x1fff8750
    4cac:	0001417c 	.word	0x0001417c
    4cb0:	00014194 	.word	0x00014194
    4cb4:	000141b4 	.word	0x000141b4
    4cb8:	000141cc 	.word	0x000141cc
    4cbc:	000141ec 	.word	0x000141ec
    4cc0:	00014210 	.word	0x00014210
    4cc4:	0001422c 	.word	0x0001422c
    4cc8:	00014244 	.word	0x00014244
    4ccc:	00014258 	.word	0x00014258
    4cd0:	00014268 	.word	0x00014268
        virtual int available() { return usb_serial_available(); }
    4cd4:	f006 fb20 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    4cd8:	2800      	cmp	r0, #0
    4cda:	f300 8295 	bgt.w	5208 <menu()+0x85c>
  if (menuload == 8) {
    4cde:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    4ce0:	6830      	ldr	r0, [r6, #0]
  if (menuload == 8) {
    4ce2:	2b08      	cmp	r3, #8
    4ce4:	d133      	bne.n	4d4e <menu()+0x3a2>
    switch (incomingByte) {
    4ce6:	2832      	cmp	r0, #50	; 0x32
    4ce8:	d02a      	beq.n	4d40 <menu()+0x394>
    4cea:	2871      	cmp	r0, #113	; 0x71
    4cec:	f43f aeb6 	beq.w	4a5c <menu()+0xb0>
    4cf0:	2831      	cmp	r0, #49	; 0x31
    4cf2:	d03c      	beq.n	4d6e <menu()+0x3c2>
  if (menuload == 7) {
    4cf4:	2308      	movs	r3, #8
    4cf6:	e6b5      	b.n	4a64 <menu()+0xb8>
        menuload = 1;
    4cf8:	2301      	movs	r3, #1
    4cfa:	6023      	str	r3, [r4, #0]
    4cfc:	f006 fb0c 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    4d00:	2800      	cmp	r0, #0
    4d02:	f300 827b 	bgt.w	51fc <menu()+0x850>
  if (menuload == 8) {
    4d06:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'x';
    4d08:	2078      	movs	r0, #120	; 0x78
  if (menuload == 7) {
    4d0a:	2b07      	cmp	r3, #7
        incomingByte = 'x';
    4d0c:	6030      	str	r0, [r6, #0]
  if (menuload == 7) {
    4d0e:	f43f aea9 	beq.w	4a64 <menu()+0xb8>
  if (menuload == 6)  //Charging settings
    4d12:	2b06      	cmp	r3, #6
    4d14:	f43f aea6 	beq.w	4a64 <menu()+0xb8>
  if (menuload == 5) {
    4d18:	2b05      	cmp	r3, #5
    4d1a:	f041 8384 	bne.w	6426 <menu()+0x1a7a>
          incomingByte = 'a';
    4d1e:	2305      	movs	r3, #5
    4d20:	e6a0      	b.n	4a64 <menu()+0xb8>
        menuload = 1;
    4d22:	2301      	movs	r3, #1
    4d24:	6023      	str	r3, [r4, #0]
    4d26:	f006 faf7 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    4d2a:	2800      	cmp	r0, #0
    4d2c:	ddeb      	ble.n	4d06 <menu()+0x35a>
          SetSerialBaud(Serial.parseInt() * 100);
    4d2e:	4872      	ldr	r0, [pc, #456]	; (4ef8 <menu()+0x54c>)
    4d30:	f003 ffda 	bl	8ce8 <Stream::parseInt()>
    4d34:	2364      	movs	r3, #100	; 0x64
    4d36:	fb03 f000 	mul.w	r0, r3, r0
    4d3a:	f7ff fdf3 	bl	4924 <SetSerialBaud(unsigned long)>
    4d3e:	e7e2      	b.n	4d06 <menu()+0x35a>
    4d40:	f006 faea 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    4d44:	2800      	cmp	r0, #0
    4d46:	f300 81c4 	bgt.w	50d2 <menu()+0x726>
  if (menuload == 7) {
    4d4a:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    4d4c:	6830      	ldr	r0, [r6, #0]
  if (menuload == 7) {
    4d4e:	2b07      	cmp	r3, #7
    4d50:	d176      	bne.n	4e40 <menu()+0x494>
    switch (incomingByte) {
    4d52:	2834      	cmp	r0, #52	; 0x34
    4d54:	f73f ae80 	bgt.w	4a58 <menu()+0xac>
    4d58:	2830      	cmp	r0, #48	; 0x30
    4d5a:	f77f ae83 	ble.w	4a64 <menu()+0xb8>
    4d5e:	3832      	subs	r0, #50	; 0x32
    4d60:	2802      	cmp	r0, #2
    4d62:	f201 838a 	bhi.w	647a <menu()+0x1ace>
    4d66:	e8df f000 	tbb	[pc, r0]
    4d6a:	647f      	.short	0x647f
    4d6c:	92          	.byte	0x92
    4d6d:	00          	.byte	0x00
    4d6e:	f006 fad3 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    4d72:	2800      	cmp	r0, #0
    4d74:	f300 81bb 	bgt.w	50ee <menu()+0x742>
        if (settings.IgnoreTemp > 2) {
    4d78:	4d60      	ldr	r5, [pc, #384]	; (4efc <menu()+0x550>)
    4d7a:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
        bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt);
    4d7e:	6c6a      	ldr	r2, [r5, #68]	; 0x44
        if (settings.IgnoreTemp > 2) {
    4d80:	2902      	cmp	r1, #2
          settings.IgnoreTemp = 0;
    4d82:	bf84      	itt	hi
    4d84:	2100      	movhi	r1, #0
    4d86:	f885 1040 	strbhi.w	r1, [r5, #64]	; 0x40
          bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt);
    4d8a:	485d      	ldr	r0, [pc, #372]	; (4f00 <menu()+0x554>)
    4d8c:	f7fb ff70 	bl	c70 <BMSModuleManager::setSensors(int, float)>
          menuload = 1;
    4d90:	2201      	movs	r2, #1
          incomingByte = 'i';
    4d92:	2369      	movs	r3, #105	; 0x69
          menuload = 1;
    4d94:	6022      	str	r2, [r4, #0]
          incomingByte = 'i';
    4d96:	6033      	str	r3, [r6, #0]
  if (menuload == 1) {
    4d98:	e001      	b.n	4d9e <menu()+0x3f2>
        virtual int read() { return usb_serial_getchar(); }
    4d9a:	f006 fa81 	bl	b2a0 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    4d9e:	f006 fabb 	bl	b318 <usb_serial_available>
        while (Serial.available()) {
    4da2:	4606      	mov	r6, r0
    4da4:	2800      	cmp	r0, #0
    4da6:	d1f8      	bne.n	4d9a <menu()+0x3ee>
        SERIALCONSOLE.println();
    4da8:	4853      	ldr	r0, [pc, #332]	; (4ef8 <menu()+0x54c>)
    4daa:	f003 fe3d 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    4dae:	4852      	ldr	r0, [pc, #328]	; (4ef8 <menu()+0x54c>)
    4db0:	f003 fe3a 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    4db4:	4850      	ldr	r0, [pc, #320]	; (4ef8 <menu()+0x54c>)
    4db6:	f003 fe37 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    4dba:	484f      	ldr	r0, [pc, #316]	; (4ef8 <menu()+0x54c>)
    4dbc:	f003 fe34 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    4dc0:	484d      	ldr	r0, [pc, #308]	; (4ef8 <menu()+0x54c>)
    4dc2:	f003 fe31 	bl	8a28 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4dc6:	2115      	movs	r1, #21
    4dc8:	484e      	ldr	r0, [pc, #312]	; (4f04 <menu()+0x558>)
    4dca:	f006 fad7 	bl	b37c <usb_serial_write>
    4dce:	484a      	ldr	r0, [pc, #296]	; (4ef8 <menu()+0x54c>)
    4dd0:	f003 fe2a 	bl	8a28 <Print::println()>
    4dd4:	2118      	movs	r1, #24
    4dd6:	484c      	ldr	r0, [pc, #304]	; (4f08 <menu()+0x55c>)
    4dd8:	f006 fad0 	bl	b37c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    4ddc:	4633      	mov	r3, r6
    4dde:	220a      	movs	r2, #10
    4de0:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
    4de4:	4844      	ldr	r0, [pc, #272]	; (4ef8 <menu()+0x54c>)
    4de6:	f003 fe37 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(uint8_t b)			{ return print(b) + println(); }
    4dea:	4843      	ldr	r0, [pc, #268]	; (4ef8 <menu()+0x54c>)
    4dec:	f003 fe1c 	bl	8a28 <Print::println()>
    4df0:	2128      	movs	r1, #40	; 0x28
    4df2:	4846      	ldr	r0, [pc, #280]	; (4f0c <menu()+0x560>)
    4df4:	f006 fac2 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.print(settings.IgnoreVolt * 1000, 0);
    4df8:	6c68      	ldr	r0, [r5, #68]	; 0x44
    4dfa:	4945      	ldr	r1, [pc, #276]	; (4f10 <menu()+0x564>)
    4dfc:	f007 f99e 	bl	c13c <__aeabi_fmul>
    4e00:	f006 ff78 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4e04:	9600      	str	r6, [sp, #0]
    4e06:	460b      	mov	r3, r1
    4e08:	4602      	mov	r2, r0
    4e0a:	483b      	ldr	r0, [pc, #236]	; (4ef8 <menu()+0x54c>)
    4e0c:	f003 fe30 	bl	8a70 <Print::printFloat(double, unsigned char)>
    4e10:	2102      	movs	r1, #2
    4e12:	4840      	ldr	r0, [pc, #256]	; (4f14 <menu()+0x568>)
    4e14:	f006 fab2 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4e18:	4837      	ldr	r0, [pc, #220]	; (4ef8 <menu()+0x54c>)
    4e1a:	f003 fe05 	bl	8a28 <Print::println()>
    4e1e:	2113      	movs	r1, #19
    4e20:	483d      	ldr	r0, [pc, #244]	; (4f18 <menu()+0x56c>)
    4e22:	f006 faab 	bl	b37c <usb_serial_write>
    4e26:	4834      	ldr	r0, [pc, #208]	; (4ef8 <menu()+0x54c>)
    4e28:	f003 fdfe 	bl	8a28 <Print::println()>
        menuload = 8;
    4e2c:	2308      	movs	r3, #8
    4e2e:	6023      	str	r3, [r4, #0]
        break;
    4e30:	e621      	b.n	4a76 <menu()+0xca>
        virtual int available() { return usb_serial_available(); }
    4e32:	f006 fa71 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    4e36:	2800      	cmp	r0, #0
    4e38:	f300 8161 	bgt.w	50fe <menu()+0x752>
  if (menuload == 6)  //Charging settings
    4e3c:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    4e3e:	6830      	ldr	r0, [r6, #0]
  if (menuload == 6)  //Charging settings
    4e40:	2b06      	cmp	r3, #6
    4e42:	d13a      	bne.n	4eba <menu()+0x50e>
    switch (incomingByte) {
    4e44:	2837      	cmp	r0, #55	; 0x37
    4e46:	f73f ae07 	bgt.w	4a58 <menu()+0xac>
    4e4a:	2830      	cmp	r0, #48	; 0x30
    4e4c:	f77f ae0a 	ble.w	4a64 <menu()+0xb8>
    4e50:	3832      	subs	r0, #50	; 0x32
    4e52:	2805      	cmp	r0, #5
    4e54:	f201 82fc 	bhi.w	6450 <menu()+0x1aa4>
    4e58:	e8df f010 	tbh	[pc, r0, lsl #1]
    4e5c:	01290115 	.word	0x01290115
    4e60:	003f00f8 	.word	0x003f00f8
    4e64:	010a0028 	.word	0x010a0028
    4e68:	f006 fa56 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    4e6c:	2800      	cmp	r0, #0
    4e6e:	dde5      	ble.n	4e3c <menu()+0x490>
          settings.CellGap = Serial.parseInt();
    4e70:	4821      	ldr	r0, [pc, #132]	; (4ef8 <menu()+0x54c>)
          settings.CellGap = settings.CellGap * 0.001;
    4e72:	4d22      	ldr	r5, [pc, #136]	; (4efc <menu()+0x550>)
          settings.CellGap = Serial.parseInt();
    4e74:	f003 ff38 	bl	8ce8 <Stream::parseInt()>
    4e78:	f007 f90c 	bl	c094 <__aeabi_i2f>
          settings.CellGap = settings.CellGap * 0.001;
    4e7c:	4927      	ldr	r1, [pc, #156]	; (4f1c <menu()+0x570>)
    4e7e:	f007 f95d 	bl	c13c <__aeabi_fmul>
          menuload = 1;
    4e82:	2301      	movs	r3, #1
    4e84:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    4e86:	2361      	movs	r3, #97	; 0x61
          settings.CellGap = settings.CellGap * 0.001;
    4e88:	63e8      	str	r0, [r5, #60]	; 0x3c
          incomingByte = 'a';
    4e8a:	6033      	str	r3, [r6, #0]
    switch (incomingByte) {
    4e8c:	e145      	b.n	511a <menu()+0x76e>
    4e8e:	f006 fa43 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    4e92:	2800      	cmp	r0, #0
    4e94:	ddd2      	ble.n	4e3c <menu()+0x490>
          settings.triptime = Serial.parseInt();
    4e96:	4818      	ldr	r0, [pc, #96]	; (4ef8 <menu()+0x54c>)
    4e98:	4d18      	ldr	r5, [pc, #96]	; (4efc <menu()+0x550>)
    4e9a:	f003 ff25 	bl	8ce8 <Stream::parseInt()>
          menuload = 1;
    4e9e:	2301      	movs	r3, #1
    4ea0:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    4ea2:	2361      	movs	r3, #97	; 0x61
          settings.triptime = Serial.parseInt();
    4ea4:	f8a5 00ce 	strh.w	r0, [r5, #206]	; 0xce
          incomingByte = 'a';
    4ea8:	6033      	str	r3, [r6, #0]
    switch (incomingByte) {
    4eaa:	e136      	b.n	511a <menu()+0x76e>
    4eac:	f006 fa34 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    4eb0:	2800      	cmp	r0, #0
    4eb2:	f301 8192 	bgt.w	61da <menu()+0x182e>
  if (menuload == 5) {
    4eb6:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    4eb8:	6830      	ldr	r0, [r6, #0]
  if (menuload == 5) {
    4eba:	2b05      	cmp	r3, #5
    4ebc:	f040 8747 	bne.w	5d4e <menu()+0x13a2>
    switch (incomingByte) {
    4ec0:	2835      	cmp	r0, #53	; 0x35
    4ec2:	f340 8730 	ble.w	5d26 <menu()+0x137a>
    4ec6:	2871      	cmp	r0, #113	; 0x71
    4ec8:	f47f af29 	bne.w	4d1e <menu()+0x372>
        gaugedebug = 0;
    4ecc:	4a14      	ldr	r2, [pc, #80]	; (4f20 <menu()+0x574>)
    4ece:	2300      	movs	r3, #0
          incomingByte = 'k';
    4ed0:	2073      	movs	r0, #115	; 0x73
        gaugedebug = 0;
    4ed2:	6013      	str	r3, [r2, #0]
          menuload = 1;
    4ed4:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    4ed6:	6030      	str	r0, [r6, #0]
  if (menuload == 1) {
    4ed8:	e5c4      	b.n	4a64 <menu()+0xb8>
        settings.chargertype = settings.chargertype + 1;
    4eda:	4d08      	ldr	r5, [pc, #32]	; (4efc <menu()+0x550>)
    4edc:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
          menuload = 1;
    4ee0:	2201      	movs	r2, #1
        settings.chargertype = settings.chargertype + 1;
    4ee2:	4413      	add	r3, r2
          settings.chargertype = 0;
    4ee4:	2b07      	cmp	r3, #7
          menuload = 1;
    4ee6:	6022      	str	r2, [r4, #0]
          settings.chargertype = 0;
    4ee8:	bfa8      	it	ge
    4eea:	2300      	movge	r3, #0
          incomingByte = 'e';
    4eec:	2265      	movs	r2, #101	; 0x65
    4eee:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
    4ef2:	6032      	str	r2, [r6, #0]
    switch (incomingByte) {
    4ef4:	e018      	b.n	4f28 <menu()+0x57c>
    4ef6:	bf00      	nop
    4ef8:	1fff880c 	.word	0x1fff880c
    4efc:	1fffb20c 	.word	0x1fffb20c
    4f00:	1fff8fe0 	.word	0x1fff8fe0
    4f04:	00014214 	.word	0x00014214
    4f08:	000138e8 	.word	0x000138e8
    4f0c:	00013904 	.word	0x00013904
    4f10:	447a0000 	.word	0x447a0000
    4f14:	00013930 	.word	0x00013930
    4f18:	000138d4 	.word	0x000138d4
    4f1c:	3a83126f 	.word	0x3a83126f
    4f20:	1fffb118 	.word	0x1fffb118
        virtual int read() { return usb_serial_getchar(); }
    4f24:	f006 f9bc 	bl	b2a0 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    4f28:	f006 f9f6 	bl	b318 <usb_serial_available>
        while (Serial.available()) {
    4f2c:	4606      	mov	r6, r0
    4f2e:	2800      	cmp	r0, #0
    4f30:	d1f8      	bne.n	4f24 <menu()+0x578>
        SERIALCONSOLE.println();
    4f32:	48bb      	ldr	r0, [pc, #748]	; (5220 <menu()+0x874>)
    4f34:	f003 fd78 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    4f38:	48b9      	ldr	r0, [pc, #740]	; (5220 <menu()+0x874>)
    4f3a:	f003 fd75 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    4f3e:	48b8      	ldr	r0, [pc, #736]	; (5220 <menu()+0x874>)
    4f40:	f003 fd72 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    4f44:	48b6      	ldr	r0, [pc, #728]	; (5220 <menu()+0x874>)
    4f46:	f003 fd6f 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    4f4a:	48b5      	ldr	r0, [pc, #724]	; (5220 <menu()+0x874>)
    4f4c:	f003 fd6c 	bl	8a28 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4f50:	2111      	movs	r1, #17
    4f52:	48b4      	ldr	r0, [pc, #720]	; (5224 <menu()+0x878>)
    4f54:	f006 fa12 	bl	b37c <usb_serial_write>
    4f58:	48b1      	ldr	r0, [pc, #708]	; (5220 <menu()+0x874>)
    4f5a:	f003 fd65 	bl	8a28 <Print::println()>
    4f5e:	2128      	movs	r1, #40	; 0x28
    4f60:	48b1      	ldr	r0, [pc, #708]	; (5228 <menu()+0x87c>)
    4f62:	f006 fa0b 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.print(settings.ChargeVsetpoint * 1000, 0);
    4f66:	6968      	ldr	r0, [r5, #20]
    4f68:	49b0      	ldr	r1, [pc, #704]	; (522c <menu()+0x880>)
    4f6a:	f007 f8e7 	bl	c13c <__aeabi_fmul>
    4f6e:	f006 fec1 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4f72:	9600      	str	r6, [sp, #0]
    4f74:	4602      	mov	r2, r0
    4f76:	460b      	mov	r3, r1
    4f78:	48a9      	ldr	r0, [pc, #676]	; (5220 <menu()+0x874>)
    4f7a:	f003 fd79 	bl	8a70 <Print::printFloat(double, unsigned char)>
    4f7e:	2102      	movs	r1, #2
    4f80:	48ab      	ldr	r0, [pc, #684]	; (5230 <menu()+0x884>)
    4f82:	f006 f9fb 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4f86:	48a6      	ldr	r0, [pc, #664]	; (5220 <menu()+0x874>)
    4f88:	f003 fd4e 	bl	8a28 <Print::println()>
    4f8c:	2116      	movs	r1, #22
    4f8e:	48a9      	ldr	r0, [pc, #676]	; (5234 <menu()+0x888>)
    4f90:	f006 f9f4 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.print(settings.ChargeHys * 1000, 0);
    4f94:	69e8      	ldr	r0, [r5, #28]
    4f96:	49a5      	ldr	r1, [pc, #660]	; (522c <menu()+0x880>)
    4f98:	f007 f8d0 	bl	c13c <__aeabi_fmul>
    4f9c:	f006 feaa 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4fa0:	9600      	str	r6, [sp, #0]
    4fa2:	460b      	mov	r3, r1
    4fa4:	4602      	mov	r2, r0
    4fa6:	489e      	ldr	r0, [pc, #632]	; (5220 <menu()+0x874>)
    4fa8:	f003 fd62 	bl	8a70 <Print::printFloat(double, unsigned char)>
    4fac:	2102      	movs	r1, #2
    4fae:	48a0      	ldr	r0, [pc, #640]	; (5230 <menu()+0x884>)
    4fb0:	f006 f9e4 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4fb4:	489a      	ldr	r0, [pc, #616]	; (5220 <menu()+0x874>)
    4fb6:	f003 fd37 	bl	8a28 <Print::println()>
        if (settings.chargertype > 0) {
    4fba:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
    4fbe:	2b00      	cmp	r3, #0
    4fc0:	dd32      	ble.n	5028 <menu()+0x67c>
    4fc2:	211d      	movs	r1, #29
    4fc4:	489c      	ldr	r0, [pc, #624]	; (5238 <menu()+0x88c>)
    4fc6:	f006 f9d9 	bl	b37c <usb_serial_write>
          SERIALCONSOLE.print(settings.chargecurrentmax * 0.1);
    4fca:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    4fcc:	f007 f862 	bl	c094 <__aeabi_i2f>
    4fd0:	499a      	ldr	r1, [pc, #616]	; (523c <menu()+0x890>)
    4fd2:	f007 f8b3 	bl	c13c <__aeabi_fmul>
    4fd6:	f006 fe8d 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4fda:	2602      	movs	r6, #2
    4fdc:	4602      	mov	r2, r0
    4fde:	460b      	mov	r3, r1
    4fe0:	488f      	ldr	r0, [pc, #572]	; (5220 <menu()+0x874>)
    4fe2:	9600      	str	r6, [sp, #0]
    4fe4:	f003 fd44 	bl	8a70 <Print::printFloat(double, unsigned char)>
    4fe8:	2101      	movs	r1, #1
    4fea:	4895      	ldr	r0, [pc, #596]	; (5240 <menu()+0x894>)
    4fec:	f006 f9c6 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4ff0:	488b      	ldr	r0, [pc, #556]	; (5220 <menu()+0x874>)
    4ff2:	f003 fd19 	bl	8a28 <Print::println()>
    4ff6:	211f      	movs	r1, #31
    4ff8:	4892      	ldr	r0, [pc, #584]	; (5244 <menu()+0x898>)
    4ffa:	f006 f9bf 	bl	b37c <usb_serial_write>
          SERIALCONSOLE.print(settings.chargecurrentend * 0.1);
    4ffe:	6e28      	ldr	r0, [r5, #96]	; 0x60
    5000:	f007 f848 	bl	c094 <__aeabi_i2f>
    5004:	498d      	ldr	r1, [pc, #564]	; (523c <menu()+0x890>)
    5006:	f007 f899 	bl	c13c <__aeabi_fmul>
    500a:	f006 fe73 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    500e:	9600      	str	r6, [sp, #0]
    5010:	4602      	mov	r2, r0
    5012:	460b      	mov	r3, r1
    5014:	4882      	ldr	r0, [pc, #520]	; (5220 <menu()+0x874>)
    5016:	f003 fd2b 	bl	8a70 <Print::printFloat(double, unsigned char)>
    501a:	4889      	ldr	r0, [pc, #548]	; (5240 <menu()+0x894>)
    501c:	2101      	movs	r1, #1
    501e:	f006 f9ad 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5022:	487f      	ldr	r0, [pc, #508]	; (5220 <menu()+0x874>)
    5024:	f003 fd00 	bl	8a28 <Print::println()>
    5028:	4887      	ldr	r0, [pc, #540]	; (5248 <menu()+0x89c>)
    502a:	2111      	movs	r1, #17
    502c:	f006 f9a6 	bl	b37c <usb_serial_write>
        switch (settings.chargertype) {
    5030:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
    5034:	2b06      	cmp	r3, #6
    5036:	f200 83e7 	bhi.w	5808 <menu()+0xe5c>
    503a:	e8df f013 	tbh	[pc, r3, lsl #1]
    503e:	042e      	.short	0x042e
    5040:	04290433 	.word	0x04290433
    5044:	041f0424 	.word	0x041f0424
    5048:	03e1041a 	.word	0x03e1041a
        virtual int available() { return usb_serial_available(); }
    504c:	f006 f964 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    5050:	2800      	cmp	r0, #0
    5052:	f77f af30 	ble.w	4eb6 <menu()+0x50a>
          settings.chargecurrentend = Serial.parseInt() * 10;
    5056:	4872      	ldr	r0, [pc, #456]	; (5220 <menu()+0x874>)
    5058:	4d7c      	ldr	r5, [pc, #496]	; (524c <menu()+0x8a0>)
    505a:	f003 fe45 	bl	8ce8 <Stream::parseInt()>
    505e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5062:	0040      	lsls	r0, r0, #1
          menuload = 1;
    5064:	2201      	movs	r2, #1
          incomingByte = 'e';
    5066:	2365      	movs	r3, #101	; 0x65
          settings.chargecurrentend = Serial.parseInt() * 10;
    5068:	6628      	str	r0, [r5, #96]	; 0x60
          menuload = 1;
    506a:	6022      	str	r2, [r4, #0]
          incomingByte = 'e';
    506c:	6033      	str	r3, [r6, #0]
    switch (incomingByte) {
    506e:	e75b      	b.n	4f28 <menu()+0x57c>
        if (settings.ChargerDirect == 1) {
    5070:	4d76      	ldr	r5, [pc, #472]	; (524c <menu()+0x8a0>)
    5072:	f895 30c0 	ldrb.w	r3, [r5, #192]	; 0xc0
          menuload = 1;
    5076:	2201      	movs	r2, #1
        if (settings.ChargerDirect == 1) {
    5078:	4053      	eors	r3, r2
          menuload = 1;
    507a:	6022      	str	r2, [r4, #0]
          incomingByte = 'e';
    507c:	2265      	movs	r2, #101	; 0x65
    507e:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
    5082:	6032      	str	r2, [r6, #0]
    switch (incomingByte) {
    5084:	e750      	b.n	4f28 <menu()+0x57c>
    5086:	f006 f947 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    508a:	2800      	cmp	r0, #0
    508c:	f77f af13 	ble.w	4eb6 <menu()+0x50a>
          settings.ChargeHys = Serial.parseInt();
    5090:	4863      	ldr	r0, [pc, #396]	; (5220 <menu()+0x874>)
          settings.ChargeHys = settings.ChargeHys / 1000;
    5092:	4d6e      	ldr	r5, [pc, #440]	; (524c <menu()+0x8a0>)
          settings.ChargeHys = Serial.parseInt();
    5094:	f003 fe28 	bl	8ce8 <Stream::parseInt()>
    5098:	f006 fffc 	bl	c094 <__aeabi_i2f>
          settings.ChargeHys = settings.ChargeHys / 1000;
    509c:	4963      	ldr	r1, [pc, #396]	; (522c <menu()+0x880>)
    509e:	f007 f901 	bl	c2a4 <__aeabi_fdiv>
          menuload = 1;
    50a2:	2301      	movs	r3, #1
    50a4:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    50a6:	2365      	movs	r3, #101	; 0x65
          settings.ChargeHys = settings.ChargeHys / 1000;
    50a8:	61e8      	str	r0, [r5, #28]
          incomingByte = 'e';
    50aa:	6033      	str	r3, [r6, #0]
    switch (incomingByte) {
    50ac:	e73c      	b.n	4f28 <menu()+0x57c>
    50ae:	f006 f933 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    50b2:	2800      	cmp	r0, #0
    50b4:	f77f aeff 	ble.w	4eb6 <menu()+0x50a>
          settings.chargecurrentmax = Serial.parseInt() * 10;
    50b8:	4859      	ldr	r0, [pc, #356]	; (5220 <menu()+0x874>)
    50ba:	4d64      	ldr	r5, [pc, #400]	; (524c <menu()+0x8a0>)
    50bc:	f003 fe14 	bl	8ce8 <Stream::parseInt()>
    50c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    50c4:	0040      	lsls	r0, r0, #1
          menuload = 1;
    50c6:	2201      	movs	r2, #1
          incomingByte = 'e';
    50c8:	2365      	movs	r3, #101	; 0x65
          settings.chargecurrentmax = Serial.parseInt() * 10;
    50ca:	65e8      	str	r0, [r5, #92]	; 0x5c
          menuload = 1;
    50cc:	6022      	str	r2, [r4, #0]
          incomingByte = 'e';
    50ce:	6033      	str	r3, [r6, #0]
    switch (incomingByte) {
    50d0:	e72a      	b.n	4f28 <menu()+0x57c>
          settings.IgnoreVolt = Serial.parseInt();
    50d2:	4853      	ldr	r0, [pc, #332]	; (5220 <menu()+0x874>)
          settings.IgnoreVolt = settings.IgnoreVolt * 0.001;
    50d4:	4d5d      	ldr	r5, [pc, #372]	; (524c <menu()+0x8a0>)
          settings.IgnoreVolt = Serial.parseInt();
    50d6:	f003 fe07 	bl	8ce8 <Stream::parseInt()>
    50da:	f006 ffdb 	bl	c094 <__aeabi_i2f>
          settings.IgnoreVolt = settings.IgnoreVolt * 0.001;
    50de:	495c      	ldr	r1, [pc, #368]	; (5250 <menu()+0x8a4>)
    50e0:	f007 f82c 	bl	c13c <__aeabi_fmul>
          bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt);
    50e4:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
          settings.IgnoreVolt = settings.IgnoreVolt * 0.001;
    50e8:	6468      	str	r0, [r5, #68]	; 0x44
    50ea:	4602      	mov	r2, r0
    50ec:	e64d      	b.n	4d8a <menu()+0x3de>
          settings.IgnoreTemp = Serial.parseInt();
    50ee:	484c      	ldr	r0, [pc, #304]	; (5220 <menu()+0x874>)
    50f0:	4d56      	ldr	r5, [pc, #344]	; (524c <menu()+0x8a0>)
    50f2:	f003 fdf9 	bl	8ce8 <Stream::parseInt()>
    50f6:	b2c1      	uxtb	r1, r0
    50f8:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    50fc:	e63f      	b.n	4d7e <menu()+0x3d2>
          settings.WarnToff = Serial.parseInt();
    50fe:	4848      	ldr	r0, [pc, #288]	; (5220 <menu()+0x874>)
    5100:	4d52      	ldr	r5, [pc, #328]	; (524c <menu()+0x8a0>)
    5102:	f003 fdf1 	bl	8ce8 <Stream::parseInt()>
    5106:	f006 ffc5 	bl	c094 <__aeabi_i2f>
          menuload = 1;
    510a:	2301      	movs	r3, #1
    510c:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    510e:	2361      	movs	r3, #97	; 0x61
          settings.WarnToff = Serial.parseInt();
    5110:	63a8      	str	r0, [r5, #56]	; 0x38
          incomingByte = 'a';
    5112:	6033      	str	r3, [r6, #0]
    switch (incomingByte) {
    5114:	e001      	b.n	511a <menu()+0x76e>
        virtual int read() { return usb_serial_getchar(); }
    5116:	f006 f8c3 	bl	b2a0 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    511a:	f006 f8fd 	bl	b318 <usb_serial_available>
        while (Serial.available()) {
    511e:	4606      	mov	r6, r0
    5120:	2800      	cmp	r0, #0
    5122:	d1f8      	bne.n	5116 <menu()+0x76a>
        SERIALCONSOLE.println();
    5124:	483e      	ldr	r0, [pc, #248]	; (5220 <menu()+0x874>)
    5126:	f003 fc7f 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    512a:	483d      	ldr	r0, [pc, #244]	; (5220 <menu()+0x874>)
    512c:	f003 fc7c 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    5130:	483b      	ldr	r0, [pc, #236]	; (5220 <menu()+0x874>)
    5132:	f003 fc79 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    5136:	483a      	ldr	r0, [pc, #232]	; (5220 <menu()+0x874>)
    5138:	f003 fc76 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    513c:	4838      	ldr	r0, [pc, #224]	; (5220 <menu()+0x874>)
    513e:	f003 fc73 	bl	8a28 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5142:	211f      	movs	r1, #31
    5144:	4843      	ldr	r0, [pc, #268]	; (5254 <menu()+0x8a8>)
    5146:	f006 f919 	bl	b37c <usb_serial_write>
    514a:	4835      	ldr	r0, [pc, #212]	; (5220 <menu()+0x874>)
    514c:	f003 fc6c 	bl	8a28 <Print::println()>
    5150:	211c      	movs	r1, #28
    5152:	4841      	ldr	r0, [pc, #260]	; (5258 <menu()+0x8ac>)
    5154:	f006 f912 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.print(settings.WarnOff * 1000, 0);
    5158:	6a68      	ldr	r0, [r5, #36]	; 0x24
    515a:	4934      	ldr	r1, [pc, #208]	; (522c <menu()+0x880>)
    515c:	f006 ffee 	bl	c13c <__aeabi_fmul>
    5160:	f006 fdc8 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5164:	9600      	str	r6, [sp, #0]
    5166:	4602      	mov	r2, r0
    5168:	460b      	mov	r3, r1
    516a:	482d      	ldr	r0, [pc, #180]	; (5220 <menu()+0x874>)
    516c:	f003 fc80 	bl	8a70 <Print::printFloat(double, unsigned char)>
    5170:	2102      	movs	r1, #2
    5172:	482f      	ldr	r0, [pc, #188]	; (5230 <menu()+0x884>)
    5174:	f006 f902 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5178:	4829      	ldr	r0, [pc, #164]	; (5220 <menu()+0x874>)
    517a:	f003 fc55 	bl	8a28 <Print::println()>
    517e:	2123      	movs	r1, #35	; 0x23
    5180:	4836      	ldr	r0, [pc, #216]	; (525c <menu()+0x8b0>)
    5182:	f006 f8fb 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.print(settings.CellGap * 1000, 0);
    5186:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    5188:	4928      	ldr	r1, [pc, #160]	; (522c <menu()+0x880>)
    518a:	f006 ffd7 	bl	c13c <__aeabi_fmul>
    518e:	f006 fdb1 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5192:	9600      	str	r6, [sp, #0]
    5194:	4602      	mov	r2, r0
    5196:	460b      	mov	r3, r1
    5198:	4821      	ldr	r0, [pc, #132]	; (5220 <menu()+0x874>)
    519a:	f003 fc69 	bl	8a70 <Print::printFloat(double, unsigned char)>
    519e:	2102      	movs	r1, #2
    51a0:	4823      	ldr	r0, [pc, #140]	; (5230 <menu()+0x884>)
    51a2:	f006 f8eb 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    51a6:	481e      	ldr	r0, [pc, #120]	; (5220 <menu()+0x874>)
    51a8:	f003 fc3e 	bl	8a28 <Print::println()>
    51ac:	2119      	movs	r1, #25
    51ae:	482c      	ldr	r0, [pc, #176]	; (5260 <menu()+0x8b4>)
    51b0:	f006 f8e4 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.print(settings.WarnToff);
    51b4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    51b6:	f006 fd9d 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    51ba:	2602      	movs	r6, #2
    51bc:	460b      	mov	r3, r1
    51be:	4602      	mov	r2, r0
    51c0:	9600      	str	r6, [sp, #0]
    51c2:	4817      	ldr	r0, [pc, #92]	; (5220 <menu()+0x874>)
    51c4:	f003 fc54 	bl	8a70 <Print::printFloat(double, unsigned char)>
    51c8:	4631      	mov	r1, r6
    51ca:	4826      	ldr	r0, [pc, #152]	; (5264 <menu()+0x8b8>)
    51cc:	f006 f8d6 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    51d0:	4813      	ldr	r0, [pc, #76]	; (5220 <menu()+0x874>)
    51d2:	f003 fc29 	bl	8a28 <Print::println()>
    51d6:	2122      	movs	r1, #34	; 0x22
    51d8:	4823      	ldr	r0, [pc, #140]	; (5268 <menu()+0x8bc>)
    51da:	f006 f8cf 	bl	b37c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    51de:	f8b5 10ce 	ldrh.w	r1, [r5, #206]	; 0xce
    51e2:	480f      	ldr	r0, [pc, #60]	; (5220 <menu()+0x874>)
    51e4:	f003 fc18 	bl	8a18 <Print::print(long)>
    51e8:	2103      	movs	r1, #3
    51ea:	4820      	ldr	r0, [pc, #128]	; (526c <menu()+0x8c0>)
    51ec:	f006 f8c6 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    51f0:	480b      	ldr	r0, [pc, #44]	; (5220 <menu()+0x874>)
    51f2:	f003 fc19 	bl	8a28 <Print::println()>
        menuload = 7;
    51f6:	2307      	movs	r3, #7
    51f8:	6023      	str	r3, [r4, #0]
        break;
    51fa:	e43c      	b.n	4a76 <menu()+0xca>
          SetSerialCan(Serial.parseInt());
    51fc:	4808      	ldr	r0, [pc, #32]	; (5220 <menu()+0x874>)
    51fe:	f003 fd73 	bl	8ce8 <Stream::parseInt()>
    5202:	f7fe ff25 	bl	4050 <SetSerialCan(int)>
    5206:	e57e      	b.n	4d06 <menu()+0x35a>
          settings.DCDCreq = Serial.parseInt();
    5208:	4805      	ldr	r0, [pc, #20]	; (5220 <menu()+0x874>)
    520a:	4d10      	ldr	r5, [pc, #64]	; (524c <menu()+0x8a0>)
    520c:	f003 fd6c 	bl	8ce8 <Stream::parseInt()>
          menuload = 1;
    5210:	2301      	movs	r3, #1
    5212:	6023      	str	r3, [r4, #0]
          incomingByte = 'x';
    5214:	2378      	movs	r3, #120	; 0x78
          settings.DCDCreq = Serial.parseInt();
    5216:	f885 00cc 	strb.w	r0, [r5, #204]	; 0xcc
          incomingByte = 'x';
    521a:	6033      	str	r3, [r6, #0]
  if (menuload == 1) {
    521c:	e02a      	b.n	5274 <menu()+0x8c8>
    521e:	bf00      	nop
    5220:	1fff880c 	.word	0x1fff880c
    5224:	000141b8 	.word	0x000141b8
    5228:	00013934 	.word	0x00013934
    522c:	447a0000 	.word	0x447a0000
    5230:	00013930 	.word	0x00013930
    5234:	00013960 	.word	0x00013960
    5238:	00013978 	.word	0x00013978
    523c:	3dcccccd 	.word	0x3dcccccd
    5240:	00013e7c 	.word	0x00013e7c
    5244:	00013998 	.word	0x00013998
    5248:	000139b8 	.word	0x000139b8
    524c:	1fffb20c 	.word	0x1fffb20c
    5250:	3a83126f 	.word	0x3a83126f
    5254:	00013a98 	.word	0x00013a98
    5258:	00013ab8 	.word	0x00013ab8
    525c:	00013ad8 	.word	0x00013ad8
    5260:	00013afc 	.word	0x00013afc
    5264:	00013b18 	.word	0x00013b18
    5268:	00013b1c 	.word	0x00013b1c
    526c:	00013b40 	.word	0x00013b40
        virtual int read() { return usb_serial_getchar(); }
    5270:	f006 f816 	bl	b2a0 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    5274:	f006 f850 	bl	b318 <usb_serial_available>
        while (Serial.available()) {
    5278:	4606      	mov	r6, r0
    527a:	2800      	cmp	r0, #0
    527c:	d1f8      	bne.n	5270 <menu()+0x8c4>
        SERIALCONSOLE.println();
    527e:	487b      	ldr	r0, [pc, #492]	; (546c <menu()+0xac0>)
    5280:	f003 fbd2 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    5284:	4879      	ldr	r0, [pc, #484]	; (546c <menu()+0xac0>)
    5286:	f003 fbcf 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    528a:	4878      	ldr	r0, [pc, #480]	; (546c <menu()+0xac0>)
    528c:	f003 fbcc 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    5290:	4876      	ldr	r0, [pc, #472]	; (546c <menu()+0xac0>)
    5292:	f003 fbc9 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    5296:	4875      	ldr	r0, [pc, #468]	; (546c <menu()+0xac0>)
    5298:	f003 fbc6 	bl	8a28 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    529c:	2112      	movs	r1, #18
    529e:	4874      	ldr	r0, [pc, #464]	; (5470 <menu()+0xac4>)
    52a0:	f006 f86c 	bl	b37c <usb_serial_write>
    52a4:	4871      	ldr	r0, [pc, #452]	; (546c <menu()+0xac0>)
    52a6:	f003 fbbf 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    52aa:	4870      	ldr	r0, [pc, #448]	; (546c <menu()+0xac0>)
    52ac:	f003 fbbc 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    52b0:	486e      	ldr	r0, [pc, #440]	; (546c <menu()+0xac0>)
    52b2:	f003 fbb9 	bl	8a28 <Print::println()>
    52b6:	486f      	ldr	r0, [pc, #444]	; (5474 <menu()+0xac8>)
    52b8:	2119      	movs	r1, #25
    52ba:	f006 f85f 	bl	b37c <usb_serial_write>
        if (settings.SerialCan == 0) {
    52be:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
    52c2:	2b00      	cmp	r3, #0
    52c4:	f040 87b2 	bne.w	622c <menu()+0x1880>
    52c8:	486b      	ldr	r0, [pc, #428]	; (5478 <menu()+0xacc>)
    52ca:	2104      	movs	r1, #4
    52cc:	f006 f856 	bl	b37c <usb_serial_write>
    52d0:	4866      	ldr	r0, [pc, #408]	; (546c <menu()+0xac0>)
    52d2:	f003 fba9 	bl	8a28 <Print::println()>
    52d6:	2113      	movs	r1, #19
    52d8:	4868      	ldr	r0, [pc, #416]	; (547c <menu()+0xad0>)
    52da:	f006 f84f 	bl	b37c <usb_serial_write>
    52de:	4863      	ldr	r0, [pc, #396]	; (546c <menu()+0xac0>)
    52e0:	f003 fba2 	bl	8a28 <Print::println()>
        menuload = 9;
    52e4:	2309      	movs	r3, #9
    52e6:	6023      	str	r3, [r4, #0]
        break;
    52e8:	f7ff bbc5 	b.w	4a76 <menu()+0xca>
        menuload = 1;
    52ec:	2301      	movs	r3, #1
    52ee:	6023      	str	r3, [r4, #0]
        virtual int available() { return usb_serial_available(); }
    52f0:	f006 f812 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    52f4:	2800      	cmp	r0, #0
    52f6:	f301 8052 	bgt.w	639e <menu()+0x19f2>
        if (debugdigits > 4) {
    52fa:	4b61      	ldr	r3, [pc, #388]	; (5480 <menu()+0xad4>)
    52fc:	6818      	ldr	r0, [r3, #0]
    52fe:	2804      	cmp	r0, #4
          debugdigits = 2;
    5300:	bfc4      	itt	gt
    5302:	2202      	movgt	r2, #2
    5304:	601a      	strgt	r2, [r3, #0]
        incomingByte = 'd';
    5306:	2264      	movs	r2, #100	; 0x64
  if (menuload == 2) {
    5308:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'd';
    530a:	6032      	str	r2, [r6, #0]
  if (menuload == 9) {
    530c:	2b09      	cmp	r3, #9
    530e:	d005      	beq.n	531c <menu()+0x970>
  if (menuload == 8) {
    5310:	2b08      	cmp	r3, #8
    5312:	f001 804b 	beq.w	63ac <menu()+0x1a00>
  if (menuload == 7) {
    5316:	2b07      	cmp	r3, #7
    5318:	f041 807e 	bne.w	6418 <menu()+0x1a6c>
  if (menuload == 9) {
    531c:	2064      	movs	r0, #100	; 0x64
  if (menuload == 5) {
    531e:	f7ff bba1 	b.w	4a64 <menu()+0xb8>
        settings.disp = !settings.disp;
    5322:	4d58      	ldr	r5, [pc, #352]	; (5484 <menu()+0xad8>)
    5324:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
        menuload = 1;
    5328:	2201      	movs	r2, #1
        incomingByte = 'd';
    532a:	2064      	movs	r0, #100	; 0x64
        settings.disp = !settings.disp;
    532c:	4053      	eors	r3, r2
        menuload = 1;
    532e:	6022      	str	r2, [r4, #0]
        settings.disp = !settings.disp;
    5330:	f885 30c1 	strb.w	r3, [r5, #193]	; 0xc1
        incomingByte = 'd';
    5334:	6030      	str	r0, [r6, #0]
    switch (incomingByte) {
    5336:	f1a0 0352 	sub.w	r3, r0, #82	; 0x52
    533a:	2b26      	cmp	r3, #38	; 0x26
    533c:	f200 8169 	bhi.w	5612 <menu()+0xc66>
    5340:	e8df f013 	tbh	[pc, r3, lsl #1]
    5344:	016702b5 	.word	0x016702b5
    5348:	01670167 	.word	0x01670167
    534c:	01670167 	.word	0x01670167
    5350:	01670167 	.word	0x01670167
    5354:	01670167 	.word	0x01670167
    5358:	01670167 	.word	0x01670167
    535c:	01670167 	.word	0x01670167
    5360:	02cc0167 	.word	0x02cc0167
    5364:	002902ce 	.word	0x002902ce
    5368:	087e00b2 	.word	0x087e00b2
    536c:	01670167 	.word	0x01670167
    5370:	08830167 	.word	0x08830167
    5374:	08810167 	.word	0x08810167
    5378:	01670167 	.word	0x01670167
    537c:	01670167 	.word	0x01670167
    5380:	02bc0167 	.word	0x02bc0167
    5384:	01670167 	.word	0x01670167
    5388:	01670167 	.word	0x01670167
    538c:	01670167 	.word	0x01670167
    5390:	0877      	.short	0x0877
        virtual int read() { return usb_serial_getchar(); }
    5392:	f005 ff85 	bl	b2a0 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    5396:	f005 ffbf 	bl	b318 <usb_serial_available>
        while (Serial.available()) {
    539a:	2800      	cmp	r0, #0
    539c:	d1f9      	bne.n	5392 <menu()+0x9e6>
        SERIALCONSOLE.println();
    539e:	4833      	ldr	r0, [pc, #204]	; (546c <menu()+0xac0>)
        switch (settings.cursens) {
    53a0:	4d38      	ldr	r5, [pc, #224]	; (5484 <menu()+0xad8>)
        SERIALCONSOLE.println();
    53a2:	f003 fb41 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    53a6:	4831      	ldr	r0, [pc, #196]	; (546c <menu()+0xac0>)
    53a8:	f003 fb3e 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    53ac:	482f      	ldr	r0, [pc, #188]	; (546c <menu()+0xac0>)
    53ae:	f003 fb3b 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    53b2:	482e      	ldr	r0, [pc, #184]	; (546c <menu()+0xac0>)
    53b4:	f003 fb38 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    53b8:	482c      	ldr	r0, [pc, #176]	; (546c <menu()+0xac0>)
    53ba:	f003 fb35 	bl	8a28 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    53be:	211f      	movs	r1, #31
    53c0:	4831      	ldr	r0, [pc, #196]	; (5488 <menu()+0xadc>)
    53c2:	f005 ffdb 	bl	b37c <usb_serial_write>
    53c6:	4829      	ldr	r0, [pc, #164]	; (546c <menu()+0xac0>)
    53c8:	f003 fb2e 	bl	8a28 <Print::println()>
    53cc:	211e      	movs	r1, #30
    53ce:	482f      	ldr	r0, [pc, #188]	; (548c <menu()+0xae0>)
    53d0:	f005 ffd4 	bl	b37c <usb_serial_write>
    53d4:	4825      	ldr	r0, [pc, #148]	; (546c <menu()+0xac0>)
    53d6:	f003 fb27 	bl	8a28 <Print::println()>
    53da:	482d      	ldr	r0, [pc, #180]	; (5490 <menu()+0xae4>)
    53dc:	211a      	movs	r1, #26
    53de:	f005 ffcd 	bl	b37c <usb_serial_write>
        switch (settings.cursens) {
    53e2:	6feb      	ldr	r3, [r5, #124]	; 0x7c
    53e4:	2b02      	cmp	r3, #2
    53e6:	f001 800e 	beq.w	6406 <menu()+0x1a5a>
    53ea:	2b03      	cmp	r3, #3
    53ec:	f001 8002 	beq.w	63f4 <menu()+0x1a48>
    53f0:	2b01      	cmp	r3, #1
    53f2:	f000 87f6 	beq.w	63e2 <menu()+0x1a36>
    53f6:	4827      	ldr	r0, [pc, #156]	; (5494 <menu()+0xae8>)
    53f8:	2109      	movs	r1, #9
    53fa:	f005 ffbf 	bl	b37c <usb_serial_write>
    53fe:	481b      	ldr	r0, [pc, #108]	; (546c <menu()+0xac0>)
    5400:	f003 fb12 	bl	8a28 <Print::println()>
    5404:	2114      	movs	r1, #20
    5406:	4824      	ldr	r0, [pc, #144]	; (5498 <menu()+0xaec>)
    5408:	f005 ffb8 	bl	b37c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    540c:	6fa9      	ldr	r1, [r5, #120]	; 0x78
    540e:	4817      	ldr	r0, [pc, #92]	; (546c <menu()+0xac0>)
    5410:	f003 fb02 	bl	8a18 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    5414:	4815      	ldr	r0, [pc, #84]	; (546c <menu()+0xac0>)
    5416:	f003 fb07 	bl	8a28 <Print::println()>
    541a:	211c      	movs	r1, #28
    541c:	481f      	ldr	r0, [pc, #124]	; (549c <menu()+0xaf0>)
    541e:	f005 ffad 	bl	b37c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5422:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
    5426:	4811      	ldr	r0, [pc, #68]	; (546c <menu()+0xac0>)
    5428:	f003 faf6 	bl	8a18 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    542c:	480f      	ldr	r0, [pc, #60]	; (546c <menu()+0xac0>)
    542e:	f003 fafb 	bl	8a28 <Print::println()>
    5432:	211c      	movs	r1, #28
    5434:	481a      	ldr	r0, [pc, #104]	; (54a0 <menu()+0xaf4>)
    5436:	f005 ffa1 	bl	b37c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    543a:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
    543e:	480b      	ldr	r0, [pc, #44]	; (546c <menu()+0xac0>)
    5440:	f003 faea 	bl	8a18 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    5444:	4809      	ldr	r0, [pc, #36]	; (546c <menu()+0xac0>)
    5446:	f003 faef 	bl	8a28 <Print::println()>
        if (settings.cursens == Analoguesing || settings.cursens == Analoguedual) {
    544a:	6fee      	ldr	r6, [r5, #124]	; 0x7c
    544c:	f026 0602 	bic.w	r6, r6, #2
    5450:	2e01      	cmp	r6, #1
    5452:	f000 873a 	beq.w	62ca <menu()+0x191e>
    5456:	2113      	movs	r1, #19
    5458:	4808      	ldr	r0, [pc, #32]	; (547c <menu()+0xad0>)
    545a:	f005 ff8f 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    545e:	4803      	ldr	r0, [pc, #12]	; (546c <menu()+0xac0>)
    5460:	f003 fae2 	bl	8a28 <Print::println()>
        menuload = 2;
    5464:	2302      	movs	r3, #2
    5466:	6023      	str	r3, [r4, #0]
        break;
    5468:	f7ff bb05 	b.w	4a76 <menu()+0xca>
    546c:	1fff880c 	.word	0x1fff880c
    5470:	00014230 	.word	0x00014230
    5474:	00013848 	.word	0x00013848
    5478:	00013864 	.word	0x00013864
    547c:	000138d4 	.word	0x000138d4
    5480:	1fff8748 	.word	0x1fff8748
    5484:	1fffb20c 	.word	0x1fffb20c
    5488:	00013d3c 	.word	0x00013d3c
    548c:	00013d5c 	.word	0x00013d5c
    5490:	00013d7c 	.word	0x00013d7c
    5494:	00013df4 	.word	0x00013df4
    5498:	00013e00 	.word	0x00013e00
    549c:	00013e18 	.word	0x00013e18
    54a0:	00013e38 	.word	0x00013e38
        virtual int read() { return usb_serial_getchar(); }
    54a4:	f005 fefc 	bl	b2a0 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    54a8:	f005 ff36 	bl	b318 <usb_serial_available>
        while (Serial.available()) {
    54ac:	2800      	cmp	r0, #0
    54ae:	d1f9      	bne.n	54a4 <menu()+0xaf8>
        SERIALCONSOLE.println();
    54b0:	48b1      	ldr	r0, [pc, #708]	; (5778 <menu()+0xdcc>)
        SERIALCONSOLE.println(settings.ESSmode);
    54b2:	4db2      	ldr	r5, [pc, #712]	; (577c <menu()+0xdd0>)
        SERIALCONSOLE.println();
    54b4:	f003 fab8 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    54b8:	48af      	ldr	r0, [pc, #700]	; (5778 <menu()+0xdcc>)
    54ba:	f003 fab5 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    54be:	48ae      	ldr	r0, [pc, #696]	; (5778 <menu()+0xdcc>)
    54c0:	f003 fab2 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    54c4:	48ac      	ldr	r0, [pc, #688]	; (5778 <menu()+0xdcc>)
    54c6:	f003 faaf 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    54ca:	48ab      	ldr	r0, [pc, #684]	; (5778 <menu()+0xdcc>)
    54cc:	f003 faac 	bl	8a28 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    54d0:	2113      	movs	r1, #19
    54d2:	48ab      	ldr	r0, [pc, #684]	; (5780 <menu()+0xdd4>)
    54d4:	f005 ff52 	bl	b37c <usb_serial_write>
    54d8:	48a7      	ldr	r0, [pc, #668]	; (5778 <menu()+0xdcc>)
    54da:	f003 faa5 	bl	8a28 <Print::println()>
    54de:	210d      	movs	r1, #13
    54e0:	48a8      	ldr	r0, [pc, #672]	; (5784 <menu()+0xdd8>)
    54e2:	f005 ff4b 	bl	b37c <usb_serial_write>
    54e6:	48a4      	ldr	r0, [pc, #656]	; (5778 <menu()+0xdcc>)
    54e8:	f003 fa9e 	bl	8a28 <Print::println()>
    54ec:	210f      	movs	r1, #15
    54ee:	48a6      	ldr	r0, [pc, #664]	; (5788 <menu()+0xddc>)
    54f0:	f005 ff44 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.println(candebug);
    54f4:	4ba5      	ldr	r3, [pc, #660]	; (578c <menu()+0xde0>)
	size_t print(int n)				{ return print((long)n); }
    54f6:	48a0      	ldr	r0, [pc, #640]	; (5778 <menu()+0xdcc>)
    54f8:	6819      	ldr	r1, [r3, #0]
    54fa:	f003 fa8d 	bl	8a18 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    54fe:	489e      	ldr	r0, [pc, #632]	; (5778 <menu()+0xdcc>)
    5500:	f003 fa92 	bl	8a28 <Print::println()>
    5504:	2113      	movs	r1, #19
    5506:	48a2      	ldr	r0, [pc, #648]	; (5790 <menu()+0xde4>)
    5508:	f005 ff38 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.println(debugCur);
    550c:	4ba1      	ldr	r3, [pc, #644]	; (5794 <menu()+0xde8>)
	size_t print(int n)				{ return print((long)n); }
    550e:	489a      	ldr	r0, [pc, #616]	; (5778 <menu()+0xdcc>)
    5510:	6819      	ldr	r1, [r3, #0]
    5512:	f003 fa81 	bl	8a18 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    5516:	4898      	ldr	r0, [pc, #608]	; (5778 <menu()+0xdcc>)
    5518:	f003 fa86 	bl	8a28 <Print::println()>
    551c:	2112      	movs	r1, #18
    551e:	489e      	ldr	r0, [pc, #632]	; (5798 <menu()+0xdec>)
    5520:	f005 ff2c 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.println(outputcheck);
    5524:	4b9d      	ldr	r3, [pc, #628]	; (579c <menu()+0xdf0>)
	size_t print(int n)				{ return print((long)n); }
    5526:	4894      	ldr	r0, [pc, #592]	; (5778 <menu()+0xdcc>)
    5528:	6819      	ldr	r1, [r3, #0]
    552a:	f003 fa75 	bl	8a18 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    552e:	4892      	ldr	r0, [pc, #584]	; (5778 <menu()+0xdcc>)
    5530:	f003 fa7a 	bl	8a28 <Print::println()>
    5534:	2111      	movs	r1, #17
    5536:	489a      	ldr	r0, [pc, #616]	; (57a0 <menu()+0xdf4>)
    5538:	f005 ff20 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.println(inputcheck);
    553c:	4b99      	ldr	r3, [pc, #612]	; (57a4 <menu()+0xdf8>)
	size_t print(int n)				{ return print((long)n); }
    553e:	488e      	ldr	r0, [pc, #568]	; (5778 <menu()+0xdcc>)
    5540:	6819      	ldr	r1, [r3, #0]
    5542:	f003 fa69 	bl	8a18 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    5546:	488c      	ldr	r0, [pc, #560]	; (5778 <menu()+0xdcc>)
    5548:	f003 fa6e 	bl	8a28 <Print::println()>
    554c:	210e      	movs	r1, #14
    554e:	4896      	ldr	r0, [pc, #600]	; (57a8 <menu()+0xdfc>)
    5550:	f005 ff14 	bl	b37c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5554:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
    5558:	4887      	ldr	r0, [pc, #540]	; (5778 <menu()+0xdcc>)
    555a:	f003 fa5d 	bl	8a18 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    555e:	4886      	ldr	r0, [pc, #536]	; (5778 <menu()+0xdcc>)
    5560:	f003 fa62 	bl	8a28 <Print::println()>
    5564:	2119      	movs	r1, #25
    5566:	4891      	ldr	r0, [pc, #580]	; (57ac <menu()+0xe00>)
    5568:	f005 ff08 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.println(cellspresent);
    556c:	4b90      	ldr	r3, [pc, #576]	; (57b0 <menu()+0xe04>)
	size_t print(int n)				{ return print((long)n); }
    556e:	4882      	ldr	r0, [pc, #520]	; (5778 <menu()+0xdcc>)
    5570:	6819      	ldr	r1, [r3, #0]
    5572:	f003 fa51 	bl	8a18 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    5576:	4880      	ldr	r0, [pc, #512]	; (5778 <menu()+0xdcc>)
    5578:	f003 fa56 	bl	8a28 <Print::println()>
    557c:	2111      	movs	r1, #17
    557e:	488d      	ldr	r0, [pc, #564]	; (57b4 <menu()+0xe08>)
    5580:	f005 fefc 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.println(gaugedebug);
    5584:	4b8c      	ldr	r3, [pc, #560]	; (57b8 <menu()+0xe0c>)
	size_t print(int n)				{ return print((long)n); }
    5586:	487c      	ldr	r0, [pc, #496]	; (5778 <menu()+0xdcc>)
    5588:	6819      	ldr	r1, [r3, #0]
    558a:	f003 fa45 	bl	8a18 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    558e:	487a      	ldr	r0, [pc, #488]	; (5778 <menu()+0xdcc>)
    5590:	f003 fa4a 	bl	8a28 <Print::println()>
    5594:	2110      	movs	r1, #16
    5596:	4889      	ldr	r0, [pc, #548]	; (57bc <menu()+0xe10>)
    5598:	f005 fef0 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.println(CSVdebug);
    559c:	4b88      	ldr	r3, [pc, #544]	; (57c0 <menu()+0xe14>)
	size_t print(int n)				{ return print((long)n); }
    559e:	4876      	ldr	r0, [pc, #472]	; (5778 <menu()+0xdcc>)
    55a0:	6819      	ldr	r1, [r3, #0]
    55a2:	f003 fa39 	bl	8a18 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    55a6:	4874      	ldr	r0, [pc, #464]	; (5778 <menu()+0xdcc>)
    55a8:	f003 fa3e 	bl	8a28 <Print::println()>
    55ac:	211c      	movs	r1, #28
    55ae:	4885      	ldr	r0, [pc, #532]	; (57c4 <menu()+0xe18>)
    55b0:	f005 fee4 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.println(debugdigits);
    55b4:	4b84      	ldr	r3, [pc, #528]	; (57c8 <menu()+0xe1c>)
	size_t print(int n)				{ return print((long)n); }
    55b6:	4870      	ldr	r0, [pc, #448]	; (5778 <menu()+0xdcc>)
    55b8:	6819      	ldr	r1, [r3, #0]
    55ba:	f003 fa2d 	bl	8a18 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    55be:	486e      	ldr	r0, [pc, #440]	; (5778 <menu()+0xdcc>)
    55c0:	f003 fa32 	bl	8a28 <Print::println()>
    55c4:	4881      	ldr	r0, [pc, #516]	; (57cc <menu()+0xe20>)
    55c6:	211e      	movs	r1, #30
    55c8:	f005 fed8 	bl	b37c <usb_serial_write>
        if (settings.disp == 1) {
    55cc:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    55d0:	2b00      	cmp	r3, #0
    55d2:	f000 8671 	beq.w	62b8 <menu()+0x190c>
    55d6:	487e      	ldr	r0, [pc, #504]	; (57d0 <menu()+0xe24>)
    55d8:	210d      	movs	r1, #13
    55da:	f005 fecf 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    55de:	4866      	ldr	r0, [pc, #408]	; (5778 <menu()+0xdcc>)
    55e0:	f003 fa22 	bl	8a28 <Print::println()>
    55e4:	2115      	movs	r1, #21
    55e6:	487b      	ldr	r0, [pc, #492]	; (57d4 <menu()+0xe28>)
    55e8:	f005 fec8 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.println(CanDebugSerial);
    55ec:	4b7a      	ldr	r3, [pc, #488]	; (57d8 <menu()+0xe2c>)
	size_t print(int n)				{ return print((long)n); }
    55ee:	4862      	ldr	r0, [pc, #392]	; (5778 <menu()+0xdcc>)
    55f0:	6819      	ldr	r1, [r3, #0]
    55f2:	f003 fa11 	bl	8a18 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    55f6:	4860      	ldr	r0, [pc, #384]	; (5778 <menu()+0xdcc>)
    55f8:	f003 fa16 	bl	8a28 <Print::println()>
    55fc:	2113      	movs	r1, #19
    55fe:	4877      	ldr	r0, [pc, #476]	; (57dc <menu()+0xe30>)
    5600:	f005 febc 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5604:	485c      	ldr	r0, [pc, #368]	; (5778 <menu()+0xdcc>)
    5606:	f003 fa0f 	bl	8a28 <Print::println()>
        menuload = 4;
    560a:	2304      	movs	r3, #4
    560c:	6023      	str	r3, [r4, #0]
        break;
    560e:	f7ff ba32 	b.w	4a76 <menu()+0xca>
  if (incomingByte == 115 & menuload == 0) {
    5612:	6823      	ldr	r3, [r4, #0]
    5614:	2b00      	cmp	r3, #0
    5616:	bf08      	it	eq
    5618:	2873      	cmpeq	r0, #115	; 0x73
    561a:	bf0c      	ite	eq
    561c:	2301      	moveq	r3, #1
    561e:	2300      	movne	r3, #0
    5620:	f7ff ba26 	b.w	4a70 <menu()+0xc4>
        candebug = !candebug;
    5624:	4a59      	ldr	r2, [pc, #356]	; (578c <menu()+0xde0>)
        CanDebugSerial = !CanDebugSerial;
    5626:	6813      	ldr	r3, [r2, #0]
    5628:	fab3 f383 	clz	r3, r3
        incomingByte = 'd';
    562c:	2064      	movs	r0, #100	; 0x64
        menuload = 1;
    562e:	2101      	movs	r1, #1
        CanDebugSerial = !CanDebugSerial;
    5630:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    5632:	6021      	str	r1, [r4, #0]
        CanDebugSerial = !CanDebugSerial;
    5634:	6013      	str	r3, [r2, #0]
        incomingByte = 'd';
    5636:	6030      	str	r0, [r6, #0]
  if (menuload == 6)  //Charging settings
    5638:	e67d      	b.n	5336 <menu()+0x98a>
        debugCur = !debugCur;
    563a:	4a56      	ldr	r2, [pc, #344]	; (5794 <menu()+0xde8>)
    563c:	e7f3      	b.n	5626 <menu()+0xc7a>
        outputcheck = !outputcheck;
    563e:	4b57      	ldr	r3, [pc, #348]	; (579c <menu()+0xdf0>)
    5640:	681a      	ldr	r2, [r3, #0]
        menuload = 1;
    5642:	2101      	movs	r1, #1
        outputcheck = !outputcheck;
    5644:	2a00      	cmp	r2, #0
    5646:	bf0c      	ite	eq
    5648:	460a      	moveq	r2, r1
    564a:	2200      	movne	r2, #0
        menuload = 1;
    564c:	6021      	str	r1, [r4, #0]
        outputcheck = !outputcheck;
    564e:	601a      	str	r2, [r3, #0]
        if (outputcheck == 0) {
    5650:	f040 86af 	bne.w	63b2 <menu()+0x1a06>
        incomingByte = 'd';
    5654:	2064      	movs	r0, #100	; 0x64
    5656:	6030      	str	r0, [r6, #0]
  if (menuload == 5) {
    5658:	e66d      	b.n	5336 <menu()+0x98a>
        inputcheck = !inputcheck;
    565a:	4a52      	ldr	r2, [pc, #328]	; (57a4 <menu()+0xdf8>)
    565c:	e7e3      	b.n	5626 <menu()+0xc7a>
        settings.ESSmode = !settings.ESSmode;
    565e:	4d47      	ldr	r5, [pc, #284]	; (577c <menu()+0xdd0>)
    5660:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    5664:	fab3 f383 	clz	r3, r3
        incomingByte = 'd';
    5668:	2064      	movs	r0, #100	; 0x64
        menuload = 1;
    566a:	2201      	movs	r2, #1
        settings.ESSmode = !settings.ESSmode;
    566c:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    566e:	6022      	str	r2, [r4, #0]
        settings.ESSmode = !settings.ESSmode;
    5670:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
        incomingByte = 'd';
    5674:	6030      	str	r0, [r6, #0]
  if (menuload == 6)  //Charging settings
    5676:	e65e      	b.n	5336 <menu()+0x98a>
        menuload = 1;
    5678:	2301      	movs	r3, #1
        cellspresent = bms.seriescells();
    567a:	4859      	ldr	r0, [pc, #356]	; (57e0 <menu()+0xe34>)
        menuload = 1;
    567c:	6023      	str	r3, [r4, #0]
        cellspresent = bms.seriescells();
    567e:	f7fb f8ad 	bl	7dc <BMSModuleManager::seriescells()>
    5682:	4b4b      	ldr	r3, [pc, #300]	; (57b0 <menu()+0xe04>)
        incomingByte = 'd';
    5684:	2264      	movs	r2, #100	; 0x64
        cellspresent = bms.seriescells();
    5686:	6018      	str	r0, [r3, #0]
        incomingByte = 'd';
    5688:	6032      	str	r2, [r6, #0]
  if (menuload == 2) {
    568a:	6823      	ldr	r3, [r4, #0]
        break;
    568c:	e63e      	b.n	530c <menu()+0x960>
        gaugedebug = !gaugedebug;
    568e:	4a4a      	ldr	r2, [pc, #296]	; (57b8 <menu()+0xe0c>)
    5690:	e7c9      	b.n	5626 <menu()+0xc7a>
        CSVdebug = !CSVdebug;
    5692:	4a4b      	ldr	r2, [pc, #300]	; (57c0 <menu()+0xe14>)
    5694:	e7c7      	b.n	5626 <menu()+0xc7a>
        CanDebugSerial = !CanDebugSerial;
    5696:	4a50      	ldr	r2, [pc, #320]	; (57d8 <menu()+0xe2c>)
    5698:	e7c5      	b.n	5626 <menu()+0xc7a>
        settings.invertcur = !settings.invertcur;
    569a:	4d38      	ldr	r5, [pc, #224]	; (577c <menu()+0xdd0>)
    569c:	6fab      	ldr	r3, [r5, #120]	; 0x78
    569e:	fab3 f383 	clz	r3, r3
    56a2:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    56a4:	2201      	movs	r2, #1
        settings.invertcur = !settings.invertcur;
    56a6:	67ab      	str	r3, [r5, #120]	; 0x78
        incomingByte = 'c';
    56a8:	2363      	movs	r3, #99	; 0x63
        menuload = 1;
    56aa:	6022      	str	r2, [r4, #0]
        incomingByte = 'c';
    56ac:	6033      	str	r3, [r6, #0]
  if (menuload == 3) {
    56ae:	2063      	movs	r0, #99	; 0x63
    56b0:	e641      	b.n	5336 <menu()+0x98a>
        settings.voltsoc = !settings.voltsoc;
    56b2:	4d32      	ldr	r5, [pc, #200]	; (577c <menu()+0xdd0>)
    56b4:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
    56b8:	fab3 f383 	clz	r3, r3
    56bc:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    56be:	2201      	movs	r2, #1
        settings.voltsoc = !settings.voltsoc;
    56c0:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
        incomingByte = 'c';
    56c4:	2363      	movs	r3, #99	; 0x63
        menuload = 1;
    56c6:	6022      	str	r2, [r4, #0]
        incomingByte = 'c';
    56c8:	6033      	str	r3, [r6, #0]
  if (menuload == 3) {
    56ca:	e7f0      	b.n	56ae <menu()+0xd02>
        menuload = 1;
    56cc:	2301      	movs	r3, #1
    56ce:	6023      	str	r3, [r4, #0]
        virtual int available() { return usb_serial_available(); }
    56d0:	f005 fe22 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    56d4:	2800      	cmp	r0, #0
    56d6:	dd05      	ble.n	56e4 <menu()+0xd38>
          settings.ncur = Serial.parseInt();
    56d8:	4827      	ldr	r0, [pc, #156]	; (5778 <menu()+0xdcc>)
    56da:	4d28      	ldr	r5, [pc, #160]	; (577c <menu()+0xdd0>)
    56dc:	f003 fb04 	bl	8ce8 <Stream::parseInt()>
    56e0:	f8c5 00ac 	str.w	r0, [r5, #172]	; 0xac
        menuload = 1;
    56e4:	2201      	movs	r2, #1
        incomingByte = 'c';
    56e6:	2363      	movs	r3, #99	; 0x63
        menuload = 1;
    56e8:	6022      	str	r2, [r4, #0]
        incomingByte = 'c';
    56ea:	6033      	str	r3, [r6, #0]
  if (menuload == 3) {
    56ec:	e7df      	b.n	56ae <menu()+0xd02>
        settings.cursens++;
    56ee:	4d23      	ldr	r5, [pc, #140]	; (577c <menu()+0xdd0>)
    56f0:	6feb      	ldr	r3, [r5, #124]	; 0x7c
        menuload = 1;
    56f2:	2201      	movs	r2, #1
        settings.cursens++;
    56f4:	4413      	add	r3, r2
          settings.cursens = 0;
    56f6:	2b04      	cmp	r3, #4
        menuload = 1;
    56f8:	6022      	str	r2, [r4, #0]
          settings.cursens = 0;
    56fa:	bfa8      	it	ge
    56fc:	2300      	movge	r3, #0
        incomingByte = 'c';
    56fe:	2263      	movs	r2, #99	; 0x63
    5700:	67eb      	str	r3, [r5, #124]	; 0x7c
    5702:	6032      	str	r2, [r6, #0]
  if (menuload == 3) {
    5704:	e7d3      	b.n	56ae <menu()+0xd02>
        menuload = 1;
    5706:	2301      	movs	r3, #1
    5708:	6023      	str	r3, [r4, #0]
    570a:	f005 fe05 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    570e:	2800      	cmp	r0, #0
    5710:	dd07      	ble.n	5722 <menu()+0xd76>
          settings.convlow = Serial.parseInt();
    5712:	4819      	ldr	r0, [pc, #100]	; (5778 <menu()+0xdcc>)
    5714:	4d19      	ldr	r5, [pc, #100]	; (577c <menu()+0xdd0>)
    5716:	f003 fae7 	bl	8ce8 <Stream::parseInt()>
    571a:	f006 fcbb 	bl	c094 <__aeabi_i2f>
    571e:	f8c5 008c 	str.w	r0, [r5, #140]	; 0x8c
  if (menuload == 9) {
    5722:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'c';
    5724:	2063      	movs	r0, #99	; 0x63
  if (menuload == 8) {
    5726:	2b08      	cmp	r3, #8
        incomingByte = 'c';
    5728:	6030      	str	r0, [r6, #0]
  if (menuload == 8) {
    572a:	f43f a99b 	beq.w	4a64 <menu()+0xb8>
  if (menuload == 7) {
    572e:	2b07      	cmp	r3, #7
    5730:	f43f a998 	beq.w	4a64 <menu()+0xb8>
  if (menuload == 6)  //Charging settings
    5734:	2b06      	cmp	r3, #6
    5736:	f040 867f 	bne.w	6438 <menu()+0x1a8c>
        incomingByte = 'd';
    573a:	2306      	movs	r3, #6
    573c:	f7ff b992 	b.w	4a64 <menu()+0xb8>
        menuload = 1;
    5740:	2301      	movs	r3, #1
    5742:	6023      	str	r3, [r4, #0]
    5744:	f005 fde8 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    5748:	2800      	cmp	r0, #0
    574a:	ddea      	ble.n	5722 <menu()+0xd76>
          settings.convhigh = Serial.parseInt();
    574c:	480a      	ldr	r0, [pc, #40]	; (5778 <menu()+0xdcc>)
    574e:	4d0b      	ldr	r5, [pc, #44]	; (577c <menu()+0xdd0>)
    5750:	f003 faca 	bl	8ce8 <Stream::parseInt()>
    5754:	f006 fc9e 	bl	c094 <__aeabi_i2f>
    5758:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
    575c:	e7e1      	b.n	5722 <menu()+0xd76>
        menuload = 1;
    575e:	2301      	movs	r3, #1
    5760:	6023      	str	r3, [r4, #0]
    5762:	f005 fdd9 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    5766:	2800      	cmp	r0, #0
    5768:	dddb      	ble.n	5722 <menu()+0xd76>
          settings.CurDead = Serial.parseInt();
    576a:	4803      	ldr	r0, [pc, #12]	; (5778 <menu()+0xdcc>)
    576c:	4d03      	ldr	r5, [pc, #12]	; (577c <menu()+0xdd0>)
    576e:	f003 fabb 	bl	8ce8 <Stream::parseInt()>
    5772:	f8a5 00b8 	strh.w	r0, [r5, #184]	; 0xb8
    5776:	e7d4      	b.n	5722 <menu()+0xd76>
    5778:	1fff880c 	.word	0x1fff880c
    577c:	1fffb20c 	.word	0x1fffb20c
    5780:	00013c00 	.word	0x00013c00
    5784:	00013c14 	.word	0x00013c14
    5788:	00013c24 	.word	0x00013c24
    578c:	1fffb070 	.word	0x1fffb070
    5790:	00013c34 	.word	0x00013c34
    5794:	1fffb100 	.word	0x1fffb100
    5798:	00013c48 	.word	0x00013c48
    579c:	1fffb204 	.word	0x1fffb204
    57a0:	00013c5c 	.word	0x00013c5c
    57a4:	1fffb138 	.word	0x1fffb138
    57a8:	00013c70 	.word	0x00013c70
    57ac:	00013c80 	.word	0x00013c80
    57b0:	1fffb074 	.word	0x1fffb074
    57b4:	00013c9c 	.word	0x00013c9c
    57b8:	1fffb118 	.word	0x1fffb118
    57bc:	00013cb0 	.word	0x00013cb0
    57c0:	1fff8fa0 	.word	0x1fff8fa0
    57c4:	00013cc4 	.word	0x00013cc4
    57c8:	1fff8748 	.word	0x1fff8748
    57cc:	00013ce4 	.word	0x00013ce4
    57d0:	00013d04 	.word	0x00013d04
    57d4:	00013d24 	.word	0x00013d24
    57d8:	1fff8fa4 	.word	0x1fff8fa4
    57dc:	000138d4 	.word	0x000138d4
    57e0:	1fff8fe0 	.word	0x1fff8fe0
        menuload = 1;
    57e4:	2301      	movs	r3, #1
    57e6:	6023      	str	r3, [r4, #0]
    57e8:	f005 fd96 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    57ec:	2800      	cmp	r0, #0
    57ee:	f77f af79 	ble.w	56e4 <menu()+0xd38>
          settings.changecur = Serial.parseInt();
    57f2:	483c      	ldr	r0, [pc, #240]	; (58e4 <menu()+0xf38>)
    57f4:	4d3c      	ldr	r5, [pc, #240]	; (58e8 <menu()+0xf3c>)
    57f6:	f003 fa77 	bl	8ce8 <Stream::parseInt()>
    57fa:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
    57fe:	e771      	b.n	56e4 <menu()+0xd38>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5800:	483a      	ldr	r0, [pc, #232]	; (58ec <menu()+0xf40>)
    5802:	2104      	movs	r1, #4
    5804:	f005 fdba 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.println();
    5808:	4836      	ldr	r0, [pc, #216]	; (58e4 <menu()+0xf38>)
    580a:	f003 f90d 	bl	8a28 <Print::println()>
        if (settings.chargertype > 0) {
    580e:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
    5812:	2b00      	cmp	r3, #0
    5814:	dd12      	ble.n	583c <menu()+0xe90>
    5816:	2118      	movs	r1, #24
    5818:	4835      	ldr	r0, [pc, #212]	; (58f0 <menu()+0xf44>)
    581a:	f005 fdaf 	bl	b37c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    581e:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
    5822:	4830      	ldr	r0, [pc, #192]	; (58e4 <menu()+0xf38>)
    5824:	f003 f8f8 	bl	8a18 <Print::print(long)>
    5828:	2102      	movs	r1, #2
    582a:	4832      	ldr	r0, [pc, #200]	; (58f4 <menu()+0xf48>)
    582c:	f005 fda6 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5830:	482c      	ldr	r0, [pc, #176]	; (58e4 <menu()+0xf38>)
    5832:	f003 f8f9 	bl	8a28 <Print::println()>
          SERIALCONSOLE.println();
    5836:	482b      	ldr	r0, [pc, #172]	; (58e4 <menu()+0xf38>)
    5838:	f003 f8f6 	bl	8a28 <Print::println()>
    583c:	482e      	ldr	r0, [pc, #184]	; (58f8 <menu()+0xf4c>)
    583e:	211b      	movs	r1, #27
    5840:	f005 fd9c 	bl	b37c <usb_serial_write>
        switch (settings.ChargerDirect) {
    5844:	f895 30c0 	ldrb.w	r3, [r5, #192]	; 0xc0
    5848:	2b00      	cmp	r3, #0
    584a:	f040 84d2 	bne.w	61f2 <menu()+0x1846>
    584e:	482b      	ldr	r0, [pc, #172]	; (58fc <menu()+0xf50>)
    5850:	2112      	movs	r1, #18
    5852:	f005 fd93 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.println();
    5856:	4823      	ldr	r0, [pc, #140]	; (58e4 <menu()+0xf38>)
    5858:	f003 f8e6 	bl	8a28 <Print::println()>
    585c:	2113      	movs	r1, #19
    585e:	4828      	ldr	r0, [pc, #160]	; (5900 <menu()+0xf54>)
    5860:	f005 fd8c 	bl	b37c <usb_serial_write>
    5864:	481f      	ldr	r0, [pc, #124]	; (58e4 <menu()+0xf38>)
    5866:	f003 f8df 	bl	8a28 <Print::println()>
        menuload = 6;
    586a:	2306      	movs	r3, #6
    586c:	6023      	str	r3, [r4, #0]
        break;
    586e:	f7ff b902 	b.w	4a76 <menu()+0xca>
    5872:	210b      	movs	r1, #11
    5874:	4823      	ldr	r0, [pc, #140]	; (5904 <menu()+0xf58>)
    5876:	f005 fd81 	bl	b37c <usb_serial_write>
    587a:	e7c5      	b.n	5808 <menu()+0xe5c>
    587c:	210d      	movs	r1, #13
    587e:	4822      	ldr	r0, [pc, #136]	; (5908 <menu()+0xf5c>)
    5880:	f005 fd7c 	bl	b37c <usb_serial_write>
    5884:	e7c0      	b.n	5808 <menu()+0xe5c>
    5886:	210d      	movs	r1, #13
    5888:	4820      	ldr	r0, [pc, #128]	; (590c <menu()+0xf60>)
    588a:	f005 fd77 	bl	b37c <usb_serial_write>
    588e:	e7bb      	b.n	5808 <menu()+0xe5c>
    5890:	210c      	movs	r1, #12
    5892:	481f      	ldr	r0, [pc, #124]	; (5910 <menu()+0xf64>)
    5894:	f005 fd72 	bl	b37c <usb_serial_write>
    5898:	e7b6      	b.n	5808 <menu()+0xe5c>
    589a:	210d      	movs	r1, #13
    589c:	481d      	ldr	r0, [pc, #116]	; (5914 <menu()+0xf68>)
    589e:	f005 fd6d 	bl	b37c <usb_serial_write>
    58a2:	e7b1      	b.n	5808 <menu()+0xe5c>
    58a4:	210c      	movs	r1, #12
    58a6:	481c      	ldr	r0, [pc, #112]	; (5918 <menu()+0xf6c>)
    58a8:	f005 fd68 	bl	b37c <usb_serial_write>
    58ac:	e7ac      	b.n	5808 <menu()+0xe5c>
        CPU_REBOOT;
    58ae:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    58b2:	4a1a      	ldr	r2, [pc, #104]	; (591c <menu()+0xf70>)
    58b4:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
        break;
    58b8:	f7ff b8dd 	b.w	4a76 <menu()+0xca>
        #if defined(__has_include) && __has_include(<type_traits>)
        static_assert(std::is_trivially_copyable<T>::value, "You can not use this type with EEPROM.put"); // the code below only makes sense if you can "memcpy" T
        #endif
        const uint8_t *ptr = (const uint8_t*) &t;
#ifdef __arm__
        eeprom_write_block(ptr, (void *)idx, sizeof(T));
    58bc:	22d0      	movs	r2, #208	; 0xd0
    58be:	2100      	movs	r1, #0
    58c0:	4809      	ldr	r0, [pc, #36]	; (58e8 <menu()+0xf3c>)
        debug = 1;
    58c2:	4d17      	ldr	r5, [pc, #92]	; (5920 <menu()+0xf74>)
    58c4:	f003 fae6 	bl	8e94 <eeprom_write_block>
  if (incomingByte == 115 & menuload == 0) {
    58c8:	6833      	ldr	r3, [r6, #0]
        menuload = 0;
    58ca:	2100      	movs	r1, #0
        debug = 1;
    58cc:	2201      	movs	r2, #1
  if (incomingByte == 115 & menuload == 0) {
    58ce:	2b73      	cmp	r3, #115	; 0x73
        menuload = 0;
    58d0:	6021      	str	r1, [r4, #0]
        debug = 1;
    58d2:	602a      	str	r2, [r5, #0]
  if (incomingByte == 115 & menuload == 0) {
    58d4:	f47f a8cf 	bne.w	4a76 <menu()+0xca>
    58d8:	f7ff b95b 	b.w	4b92 <menu()+0x1e6>
    58dc:	4d02      	ldr	r5, [pc, #8]	; (58e8 <menu()+0xf3c>)
    58de:	e41c      	b.n	511a <menu()+0x76e>
    58e0:	4d01      	ldr	r5, [pc, #4]	; (58e8 <menu()+0xf3c>)
    58e2:	e021      	b.n	5928 <menu()+0xf7c>
    58e4:	1fff880c 	.word	0x1fff880c
    58e8:	1fffb20c 	.word	0x1fffb20c
    58ec:	00013a28 	.word	0x00013a28
    58f0:	00013a30 	.word	0x00013a30
    58f4:	00013a4c 	.word	0x00013a4c
    58f8:	00013a50 	.word	0x00013a50
    58fc:	00013a6c 	.word	0x00013a6c
    5900:	000138d4 	.word	0x000138d4
    5904:	00013a1c 	.word	0x00013a1c
    5908:	00013a0c 	.word	0x00013a0c
    590c:	000139fc 	.word	0x000139fc
    5910:	000139ec 	.word	0x000139ec
    5914:	000139cc 	.word	0x000139cc
    5918:	000139dc 	.word	0x000139dc
    591c:	05fa0004 	.word	0x05fa0004
    5920:	1fff8744 	.word	0x1fff8744
        virtual int read() { return usb_serial_getchar(); }
    5924:	f005 fcbc 	bl	b2a0 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    5928:	f005 fcf6 	bl	b318 <usb_serial_available>
        while (Serial.available()) {
    592c:	4606      	mov	r6, r0
    592e:	2800      	cmp	r0, #0
    5930:	d1f8      	bne.n	5924 <menu()+0xf78>
        SERIALCONSOLE.println();
    5932:	48c2      	ldr	r0, [pc, #776]	; (5c3c <menu()+0x1290>)
    5934:	f003 f878 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    5938:	48c0      	ldr	r0, [pc, #768]	; (5c3c <menu()+0x1290>)
    593a:	f003 f875 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    593e:	48bf      	ldr	r0, [pc, #764]	; (5c3c <menu()+0x1290>)
    5940:	f003 f872 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    5944:	48bd      	ldr	r0, [pc, #756]	; (5c3c <menu()+0x1290>)
    5946:	f003 f86f 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    594a:	48bc      	ldr	r0, [pc, #752]	; (5c3c <menu()+0x1290>)
    594c:	f003 f86c 	bl	8a28 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5950:	2115      	movs	r1, #21
    5952:	48bb      	ldr	r0, [pc, #748]	; (5c40 <menu()+0x1294>)
    5954:	f005 fd12 	bl	b37c <usb_serial_write>
    5958:	48b8      	ldr	r0, [pc, #736]	; (5c3c <menu()+0x1290>)
    595a:	f003 f865 	bl	8a28 <Print::println()>
    595e:	2114      	movs	r1, #20
    5960:	48b8      	ldr	r0, [pc, #736]	; (5c44 <menu()+0x1298>)
    5962:	f005 fd0b 	bl	b37c <usb_serial_write>
    5966:	48b5      	ldr	r0, [pc, #724]	; (5c3c <menu()+0x1290>)
    5968:	f003 f85e 	bl	8a28 <Print::println()>
    596c:	211b      	movs	r1, #27
    596e:	48b6      	ldr	r0, [pc, #728]	; (5c48 <menu()+0x129c>)
    5970:	f005 fd04 	bl	b37c <usb_serial_write>
    5974:	48b1      	ldr	r0, [pc, #708]	; (5c3c <menu()+0x1290>)
    5976:	f003 f857 	bl	8a28 <Print::println()>
    597a:	2113      	movs	r1, #19
    597c:	48b3      	ldr	r0, [pc, #716]	; (5c4c <menu()+0x12a0>)
    597e:	f005 fcfd 	bl	b37c <usb_serial_write>
    5982:	48ae      	ldr	r0, [pc, #696]	; (5c3c <menu()+0x1290>)
    5984:	f003 f850 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    5988:	48ac      	ldr	r0, [pc, #688]	; (5c3c <menu()+0x1290>)
    598a:	f003 f84d 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    598e:	48ab      	ldr	r0, [pc, #684]	; (5c3c <menu()+0x1290>)
    5990:	f003 f84a 	bl	8a28 <Print::println()>
    5994:	2120      	movs	r1, #32
    5996:	48ae      	ldr	r0, [pc, #696]	; (5c50 <menu()+0x12a4>)
    5998:	f005 fcf0 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.print(settings.OverVSetpoint * 1000, 0);
    599c:	68e8      	ldr	r0, [r5, #12]
    599e:	49ad      	ldr	r1, [pc, #692]	; (5c54 <menu()+0x12a8>)
    59a0:	f006 fbcc 	bl	c13c <__aeabi_fmul>
    59a4:	f006 f9a6 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    59a8:	9600      	str	r6, [sp, #0]
    59aa:	4602      	mov	r2, r0
    59ac:	460b      	mov	r3, r1
    59ae:	48a3      	ldr	r0, [pc, #652]	; (5c3c <menu()+0x1290>)
    59b0:	f003 f85e 	bl	8a70 <Print::printFloat(double, unsigned char)>
    59b4:	2102      	movs	r1, #2
    59b6:	48a8      	ldr	r0, [pc, #672]	; (5c58 <menu()+0x12ac>)
    59b8:	f005 fce0 	bl	b37c <usb_serial_write>
    59bc:	2102      	movs	r1, #2
    59be:	48a7      	ldr	r0, [pc, #668]	; (5c5c <menu()+0x12b0>)
    59c0:	f005 fcdc 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    59c4:	489d      	ldr	r0, [pc, #628]	; (5c3c <menu()+0x1290>)
    59c6:	f003 f82f 	bl	8a28 <Print::println()>
    59ca:	2121      	movs	r1, #33	; 0x21
    59cc:	48a4      	ldr	r0, [pc, #656]	; (5c60 <menu()+0x12b4>)
    59ce:	f005 fcd5 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.print(settings.UnderVSetpoint * 1000, 0);
    59d2:	6928      	ldr	r0, [r5, #16]
    59d4:	499f      	ldr	r1, [pc, #636]	; (5c54 <menu()+0x12a8>)
    59d6:	f006 fbb1 	bl	c13c <__aeabi_fmul>
    59da:	f006 f98b 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    59de:	9600      	str	r6, [sp, #0]
    59e0:	4602      	mov	r2, r0
    59e2:	460b      	mov	r3, r1
    59e4:	4895      	ldr	r0, [pc, #596]	; (5c3c <menu()+0x1290>)
    59e6:	f003 f843 	bl	8a70 <Print::printFloat(double, unsigned char)>
    59ea:	2102      	movs	r1, #2
    59ec:	489a      	ldr	r0, [pc, #616]	; (5c58 <menu()+0x12ac>)
    59ee:	f005 fcc5 	bl	b37c <usb_serial_write>
    59f2:	2102      	movs	r1, #2
    59f4:	4899      	ldr	r0, [pc, #612]	; (5c5c <menu()+0x12b0>)
    59f6:	f005 fcc1 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    59fa:	4890      	ldr	r0, [pc, #576]	; (5c3c <menu()+0x1290>)
    59fc:	f003 f814 	bl	8a28 <Print::println()>
    5a00:	211f      	movs	r1, #31
    5a02:	4898      	ldr	r0, [pc, #608]	; (5c64 <menu()+0x12b8>)
    5a04:	f005 fcba 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.print(settings.OverTSetpoint);
    5a08:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5a0a:	f006 f973 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5a0e:	2702      	movs	r7, #2
    5a10:	4602      	mov	r2, r0
    5a12:	460b      	mov	r3, r1
    5a14:	4889      	ldr	r0, [pc, #548]	; (5c3c <menu()+0x1290>)
    5a16:	9700      	str	r7, [sp, #0]
    5a18:	f003 f82a 	bl	8a70 <Print::printFloat(double, unsigned char)>
    5a1c:	2101      	movs	r1, #1
    5a1e:	4892      	ldr	r0, [pc, #584]	; (5c68 <menu()+0x12bc>)
    5a20:	f005 fcac 	bl	b37c <usb_serial_write>
    5a24:	4639      	mov	r1, r7
    5a26:	488d      	ldr	r0, [pc, #564]	; (5c5c <menu()+0x12b0>)
    5a28:	f005 fca8 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5a2c:	4883      	ldr	r0, [pc, #524]	; (5c3c <menu()+0x1290>)
    5a2e:	f002 fffb 	bl	8a28 <Print::println()>
    5a32:	2120      	movs	r1, #32
    5a34:	488d      	ldr	r0, [pc, #564]	; (5c6c <menu()+0x12c0>)
    5a36:	f005 fca1 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.print(settings.UnderTSetpoint);
    5a3a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    5a3c:	f006 f95a 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5a40:	9700      	str	r7, [sp, #0]
    5a42:	4602      	mov	r2, r0
    5a44:	460b      	mov	r3, r1
    5a46:	487d      	ldr	r0, [pc, #500]	; (5c3c <menu()+0x1290>)
    5a48:	f003 f812 	bl	8a70 <Print::printFloat(double, unsigned char)>
    5a4c:	2101      	movs	r1, #1
    5a4e:	4886      	ldr	r0, [pc, #536]	; (5c68 <menu()+0x12bc>)
    5a50:	f005 fc94 	bl	b37c <usb_serial_write>
    5a54:	4639      	mov	r1, r7
    5a56:	4881      	ldr	r0, [pc, #516]	; (5c5c <menu()+0x12b0>)
    5a58:	f005 fc90 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5a5c:	4877      	ldr	r0, [pc, #476]	; (5c3c <menu()+0x1290>)
    5a5e:	f002 ffe3 	bl	8a28 <Print::println()>
    5a62:	2123      	movs	r1, #35	; 0x23
    5a64:	4882      	ldr	r0, [pc, #520]	; (5c70 <menu()+0x12c4>)
    5a66:	f005 fc89 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.print(settings.balanceVoltage * 1000, 0);
    5a6a:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    5a6c:	4979      	ldr	r1, [pc, #484]	; (5c54 <menu()+0x12a8>)
    5a6e:	f006 fb65 	bl	c13c <__aeabi_fmul>
    5a72:	f006 f93f 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5a76:	9600      	str	r6, [sp, #0]
    5a78:	4602      	mov	r2, r0
    5a7a:	460b      	mov	r3, r1
    5a7c:	486f      	ldr	r0, [pc, #444]	; (5c3c <menu()+0x1290>)
    5a7e:	f002 fff7 	bl	8a70 <Print::printFloat(double, unsigned char)>
    5a82:	4639      	mov	r1, r7
    5a84:	4874      	ldr	r0, [pc, #464]	; (5c58 <menu()+0x12ac>)
    5a86:	f005 fc79 	bl	b37c <usb_serial_write>
    5a8a:	4639      	mov	r1, r7
    5a8c:	4873      	ldr	r0, [pc, #460]	; (5c5c <menu()+0x12b0>)
    5a8e:	f005 fc75 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5a92:	486a      	ldr	r0, [pc, #424]	; (5c3c <menu()+0x1290>)
    5a94:	f002 ffc8 	bl	8a28 <Print::println()>
    5a98:	211f      	movs	r1, #31
    5a9a:	4876      	ldr	r0, [pc, #472]	; (5c74 <menu()+0x12c8>)
    5a9c:	f005 fc6e 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.print(settings.balanceHyst * 1000, 0);
    5aa0:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    5aa2:	496c      	ldr	r1, [pc, #432]	; (5c54 <menu()+0x12a8>)
    5aa4:	f006 fb4a 	bl	c13c <__aeabi_fmul>
    5aa8:	f006 f924 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5aac:	9600      	str	r6, [sp, #0]
    5aae:	4602      	mov	r2, r0
    5ab0:	460b      	mov	r3, r1
    5ab2:	4862      	ldr	r0, [pc, #392]	; (5c3c <menu()+0x1290>)
    5ab4:	f002 ffdc 	bl	8a70 <Print::printFloat(double, unsigned char)>
    5ab8:	4639      	mov	r1, r7
    5aba:	4867      	ldr	r0, [pc, #412]	; (5c58 <menu()+0x12ac>)
    5abc:	f005 fc5e 	bl	b37c <usb_serial_write>
    5ac0:	4639      	mov	r1, r7
    5ac2:	4866      	ldr	r0, [pc, #408]	; (5c5c <menu()+0x12b0>)
    5ac4:	f005 fc5a 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5ac8:	485c      	ldr	r0, [pc, #368]	; (5c3c <menu()+0x1290>)
    5aca:	f002 ffad 	bl	8a28 <Print::println()>
    5ace:	2119      	movs	r1, #25
    5ad0:	4869      	ldr	r0, [pc, #420]	; (5c78 <menu()+0x12cc>)
    5ad2:	f005 fc53 	bl	b37c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5ad6:	6da9      	ldr	r1, [r5, #88]	; 0x58
    5ad8:	4858      	ldr	r0, [pc, #352]	; (5c3c <menu()+0x1290>)
    5ada:	f002 ff9d 	bl	8a18 <Print::print(long)>
    5ade:	4639      	mov	r1, r7
    5ae0:	4866      	ldr	r0, [pc, #408]	; (5c7c <menu()+0x12d0>)
    5ae2:	f005 fc4b 	bl	b37c <usb_serial_write>
    5ae6:	4639      	mov	r1, r7
    5ae8:	485c      	ldr	r0, [pc, #368]	; (5c5c <menu()+0x12b0>)
    5aea:	f005 fc47 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5aee:	4853      	ldr	r0, [pc, #332]	; (5c3c <menu()+0x1290>)
    5af0:	f002 ff9a 	bl	8a28 <Print::println()>
    5af4:	2118      	movs	r1, #24
    5af6:	4862      	ldr	r0, [pc, #392]	; (5c80 <menu()+0x12d4>)
    5af8:	f005 fc40 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.print(settings.discurrentmax * 0.1);
    5afc:	6e68      	ldr	r0, [r5, #100]	; 0x64
    5afe:	f006 fac9 	bl	c094 <__aeabi_i2f>
    5b02:	4960      	ldr	r1, [pc, #384]	; (5c84 <menu()+0x12d8>)
    5b04:	f006 fb1a 	bl	c13c <__aeabi_fmul>
    5b08:	f006 f8f4 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5b0c:	9700      	str	r7, [sp, #0]
    5b0e:	4602      	mov	r2, r0
    5b10:	460b      	mov	r3, r1
    5b12:	484a      	ldr	r0, [pc, #296]	; (5c3c <menu()+0x1290>)
    5b14:	f002 ffac 	bl	8a70 <Print::printFloat(double, unsigned char)>
    5b18:	2101      	movs	r1, #1
    5b1a:	485b      	ldr	r0, [pc, #364]	; (5c88 <menu()+0x12dc>)
    5b1c:	f005 fc2e 	bl	b37c <usb_serial_write>
    5b20:	4639      	mov	r1, r7
    5b22:	484e      	ldr	r0, [pc, #312]	; (5c5c <menu()+0x12b0>)
    5b24:	f005 fc2a 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5b28:	4844      	ldr	r0, [pc, #272]	; (5c3c <menu()+0x1290>)
    5b2a:	f002 ff7d 	bl	8a28 <Print::println()>
    5b2e:	212b      	movs	r1, #43	; 0x2b
    5b30:	4856      	ldr	r0, [pc, #344]	; (5c8c <menu()+0x12e0>)
    5b32:	f005 fc23 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.print(settings.DischVsetpoint * 1000, 0);
    5b36:	69a8      	ldr	r0, [r5, #24]
    5b38:	4946      	ldr	r1, [pc, #280]	; (5c54 <menu()+0x12a8>)
    5b3a:	f006 faff 	bl	c13c <__aeabi_fmul>
    5b3e:	f006 f8d9 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5b42:	9600      	str	r6, [sp, #0]
    5b44:	4602      	mov	r2, r0
    5b46:	460b      	mov	r3, r1
    5b48:	483c      	ldr	r0, [pc, #240]	; (5c3c <menu()+0x1290>)
    5b4a:	f002 ff91 	bl	8a70 <Print::printFloat(double, unsigned char)>
    5b4e:	4639      	mov	r1, r7
    5b50:	4841      	ldr	r0, [pc, #260]	; (5c58 <menu()+0x12ac>)
    5b52:	f005 fc13 	bl	b37c <usb_serial_write>
    5b56:	4639      	mov	r1, r7
    5b58:	4840      	ldr	r0, [pc, #256]	; (5c5c <menu()+0x12b0>)
    5b5a:	f005 fc0f 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5b5e:	4837      	ldr	r0, [pc, #220]	; (5c3c <menu()+0x1290>)
    5b60:	f002 ff62 	bl	8a28 <Print::println()>
    5b64:	211f      	movs	r1, #31
    5b66:	484a      	ldr	r0, [pc, #296]	; (5c90 <menu()+0x12e4>)
    5b68:	f005 fc08 	bl	b37c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5b6c:	6d69      	ldr	r1, [r5, #84]	; 0x54
    5b6e:	4833      	ldr	r0, [pc, #204]	; (5c3c <menu()+0x1290>)
    5b70:	f002 ff52 	bl	8a18 <Print::print(long)>
    5b74:	4639      	mov	r1, r7
    5b76:	4839      	ldr	r0, [pc, #228]	; (5c5c <menu()+0x12b0>)
    5b78:	f005 fc00 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5b7c:	482f      	ldr	r0, [pc, #188]	; (5c3c <menu()+0x1290>)
    5b7e:	f002 ff53 	bl	8a28 <Print::println()>
    5b82:	2120      	movs	r1, #32
    5b84:	4843      	ldr	r0, [pc, #268]	; (5c94 <menu()+0x12e8>)
    5b86:	f005 fbf9 	bl	b37c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5b8a:	6d29      	ldr	r1, [r5, #80]	; 0x50
    5b8c:	482b      	ldr	r0, [pc, #172]	; (5c3c <menu()+0x1290>)
    5b8e:	f002 ff43 	bl	8a18 <Print::print(long)>
    5b92:	4639      	mov	r1, r7
    5b94:	4831      	ldr	r0, [pc, #196]	; (5c5c <menu()+0x12b0>)
    5b96:	f005 fbf1 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5b9a:	4828      	ldr	r0, [pc, #160]	; (5c3c <menu()+0x1290>)
    5b9c:	f002 ff44 	bl	8a28 <Print::println()>
    5ba0:	2110      	movs	r1, #16
    5ba2:	483d      	ldr	r0, [pc, #244]	; (5c98 <menu()+0x12ec>)
    5ba4:	f005 fbea 	bl	b37c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5ba8:	6ea9      	ldr	r1, [r5, #104]	; 0x68
    5baa:	4824      	ldr	r0, [pc, #144]	; (5c3c <menu()+0x1290>)
    5bac:	f002 ff34 	bl	8a18 <Print::print(long)>
    5bb0:	4639      	mov	r1, r7
    5bb2:	4829      	ldr	r0, [pc, #164]	; (5c58 <menu()+0x12ac>)
    5bb4:	f005 fbe2 	bl	b37c <usb_serial_write>
    5bb8:	4639      	mov	r1, r7
    5bba:	4828      	ldr	r0, [pc, #160]	; (5c5c <menu()+0x12b0>)
    5bbc:	f005 fbde 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5bc0:	481e      	ldr	r0, [pc, #120]	; (5c3c <menu()+0x1290>)
    5bc2:	f002 ff31 	bl	8a28 <Print::println()>
    5bc6:	2113      	movs	r1, #19
    5bc8:	4834      	ldr	r0, [pc, #208]	; (5c9c <menu()+0x12f0>)
    5bca:	f005 fbd7 	bl	b37c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5bce:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
    5bd0:	481a      	ldr	r0, [pc, #104]	; (5c3c <menu()+0x1290>)
    5bd2:	f002 ff21 	bl	8a18 <Print::print(long)>
    5bd6:	2101      	movs	r1, #1
    5bd8:	4831      	ldr	r0, [pc, #196]	; (5ca0 <menu()+0x12f4>)
    5bda:	f005 fbcf 	bl	b37c <usb_serial_write>
    5bde:	4639      	mov	r1, r7
    5be0:	481e      	ldr	r0, [pc, #120]	; (5c5c <menu()+0x12b0>)
    5be2:	f005 fbcb 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5be6:	4815      	ldr	r0, [pc, #84]	; (5c3c <menu()+0x1290>)
    5be8:	f002 ff1e 	bl	8a28 <Print::println()>
    5bec:	2110      	movs	r1, #16
    5bee:	482d      	ldr	r0, [pc, #180]	; (5ca4 <menu()+0x12f8>)
    5bf0:	f005 fbc4 	bl	b37c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5bf4:	6f29      	ldr	r1, [r5, #112]	; 0x70
    5bf6:	4811      	ldr	r0, [pc, #68]	; (5c3c <menu()+0x1290>)
    5bf8:	f002 ff0e 	bl	8a18 <Print::print(long)>
    5bfc:	4639      	mov	r1, r7
    5bfe:	4816      	ldr	r0, [pc, #88]	; (5c58 <menu()+0x12ac>)
    5c00:	f005 fbbc 	bl	b37c <usb_serial_write>
    5c04:	4639      	mov	r1, r7
    5c06:	4815      	ldr	r0, [pc, #84]	; (5c5c <menu()+0x12b0>)
    5c08:	f005 fbb8 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5c0c:	480b      	ldr	r0, [pc, #44]	; (5c3c <menu()+0x1290>)
    5c0e:	f002 ff0b 	bl	8a28 <Print::println()>
    5c12:	2114      	movs	r1, #20
    5c14:	4824      	ldr	r0, [pc, #144]	; (5ca8 <menu()+0x12fc>)
    5c16:	f005 fbb1 	bl	b37c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5c1a:	6f69      	ldr	r1, [r5, #116]	; 0x74
    5c1c:	4807      	ldr	r0, [pc, #28]	; (5c3c <menu()+0x1290>)
    5c1e:	f002 fefb 	bl	8a18 <Print::print(long)>
    5c22:	2101      	movs	r1, #1
    5c24:	481e      	ldr	r0, [pc, #120]	; (5ca0 <menu()+0x12f4>)
    5c26:	f005 fba9 	bl	b37c <usb_serial_write>
    5c2a:	4639      	mov	r1, r7
    5c2c:	480b      	ldr	r0, [pc, #44]	; (5c5c <menu()+0x12b0>)
    5c2e:	f005 fba5 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5c32:	4802      	ldr	r0, [pc, #8]	; (5c3c <menu()+0x1290>)
    5c34:	f002 fef8 	bl	8a28 <Print::println()>
    5c38:	2116      	movs	r1, #22
    5c3a:	e037      	b.n	5cac <menu()+0x1300>
    5c3c:	1fff880c 	.word	0x1fff880c
    5c40:	00013ee8 	.word	0x00013ee8
    5c44:	00013f00 	.word	0x00013f00
    5c48:	00013f18 	.word	0x00013f18
    5c4c:	000138d4 	.word	0x000138d4
    5c50:	00013f34 	.word	0x00013f34
    5c54:	447a0000 	.word	0x447a0000
    5c58:	00013930 	.word	0x00013930
    5c5c:	00012ea4 	.word	0x00012ea4
    5c60:	00013f58 	.word	0x00013f58
    5c64:	00013f7c 	.word	0x00013f7c
    5c68:	00013f9c 	.word	0x00013f9c
    5c6c:	00013fa0 	.word	0x00013fa0
    5c70:	00013fc4 	.word	0x00013fc4
    5c74:	00013fe8 	.word	0x00013fe8
    5c78:	00014008 	.word	0x00014008
    5c7c:	00014024 	.word	0x00014024
    5c80:	00014028 	.word	0x00014028
    5c84:	3dcccccd 	.word	0x3dcccccd
    5c88:	00013e7c 	.word	0x00013e7c
    5c8c:	00014044 	.word	0x00014044
    5c90:	00014070 	.word	0x00014070
    5c94:	00014090 	.word	0x00014090
    5c98:	000140b4 	.word	0x000140b4
    5c9c:	000140c8 	.word	0x000140c8
    5ca0:	000140dc 	.word	0x000140dc
    5ca4:	000140e0 	.word	0x000140e0
    5ca8:	000140f4 	.word	0x000140f4
    5cac:	489a      	ldr	r0, [pc, #616]	; (5f18 <menu()+0x156c>)
    5cae:	f005 fb65 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.print(settings.StoreVsetpoint * 1000, 0);
    5cb2:	6a28      	ldr	r0, [r5, #32]
    5cb4:	4999      	ldr	r1, [pc, #612]	; (5f1c <menu()+0x1570>)
    5cb6:	f006 fa41 	bl	c13c <__aeabi_fmul>
    5cba:	f006 f81b 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5cbe:	9600      	str	r6, [sp, #0]
    5cc0:	4602      	mov	r2, r0
    5cc2:	460b      	mov	r3, r1
    5cc4:	4896      	ldr	r0, [pc, #600]	; (5f20 <menu()+0x1574>)
    5cc6:	f002 fed3 	bl	8a70 <Print::printFloat(double, unsigned char)>
    5cca:	4639      	mov	r1, r7
    5ccc:	4895      	ldr	r0, [pc, #596]	; (5f24 <menu()+0x1578>)
    5cce:	f005 fb55 	bl	b37c <usb_serial_write>
    5cd2:	4639      	mov	r1, r7
    5cd4:	4894      	ldr	r0, [pc, #592]	; (5f28 <menu()+0x157c>)
    5cd6:	f005 fb51 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5cda:	4891      	ldr	r0, [pc, #580]	; (5f20 <menu()+0x1574>)
    5cdc:	f002 fea4 	bl	8a28 <Print::println()>
    5ce0:	2124      	movs	r1, #36	; 0x24
    5ce2:	4892      	ldr	r0, [pc, #584]	; (5f2c <menu()+0x1580>)
    5ce4:	f005 fb4a 	bl	b37c <usb_serial_write>
        SERIALCONSOLE.print(settings.DisTaper * 1000, 0);
    5ce8:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
    5cec:	498b      	ldr	r1, [pc, #556]	; (5f1c <menu()+0x1570>)
    5cee:	f006 fa25 	bl	c13c <__aeabi_fmul>
    5cf2:	f005 ffff 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5cf6:	9600      	str	r6, [sp, #0]
    5cf8:	460b      	mov	r3, r1
    5cfa:	4602      	mov	r2, r0
    5cfc:	4888      	ldr	r0, [pc, #544]	; (5f20 <menu()+0x1574>)
    5cfe:	f002 feb7 	bl	8a70 <Print::printFloat(double, unsigned char)>
    5d02:	4639      	mov	r1, r7
    5d04:	4887      	ldr	r0, [pc, #540]	; (5f24 <menu()+0x1578>)
    5d06:	f005 fb39 	bl	b37c <usb_serial_write>
    5d0a:	4639      	mov	r1, r7
    5d0c:	4886      	ldr	r0, [pc, #536]	; (5f28 <menu()+0x157c>)
    5d0e:	f005 fb35 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5d12:	4883      	ldr	r0, [pc, #524]	; (5f20 <menu()+0x1574>)
    5d14:	f002 fe88 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    5d18:	4881      	ldr	r0, [pc, #516]	; (5f20 <menu()+0x1574>)
    5d1a:	f002 fe85 	bl	8a28 <Print::println()>
        menuload = 3;
    5d1e:	2303      	movs	r3, #3
    5d20:	6023      	str	r3, [r4, #0]
        break;
    5d22:	f7fe bea8 	b.w	4a76 <menu()+0xca>
    switch (incomingByte) {
    5d26:	2830      	cmp	r0, #48	; 0x30
    5d28:	f77e ae9c 	ble.w	4a64 <menu()+0xb8>
    5d2c:	3832      	subs	r0, #50	; 0x32
    5d2e:	2803      	cmp	r0, #3
    5d30:	f200 83c6 	bhi.w	64c0 <menu()+0x1b14>
    5d34:	e8df f010 	tbh	[pc, r0, lsl #1]
    5d38:	005800cb 	.word	0x005800cb
    5d3c:	00db0004 	.word	0x00db0004
        virtual int available() { return usb_serial_available(); }
    5d40:	f005 faea 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    5d44:	2800      	cmp	r0, #0
    5d46:	f300 823f 	bgt.w	61c8 <menu()+0x181c>
  if (menuload == 3) {
    5d4a:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    5d4c:	6830      	ldr	r0, [r6, #0]
  if (menuload == 3) {
    5d4e:	2b03      	cmp	r3, #3
    5d50:	f040 812e 	bne.w	5fb0 <menu()+0x1604>
    switch (incomingByte) {
    5d54:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    5d58:	2b42      	cmp	r3, #66	; 0x42
    5d5a:	f200 822c 	bhi.w	61b6 <menu()+0x180a>
    5d5e:	e8df f013 	tbh	[pc, r3, lsl #1]
    5d62:	0175      	.short	0x0175
    5d64:	01570166 	.word	0x01570166
    5d68:	013f014b 	.word	0x013f014b
    5d6c:	021a012c 	.word	0x021a012c
    5d70:	0201020f 	.word	0x0201020f
    5d74:	022a01f1 	.word	0x022a01f1
    5d78:	022a022a 	.word	0x022a022a
    5d7c:	022a022a 	.word	0x022a022a
    5d80:	022a022a 	.word	0x022a022a
    5d84:	022a022a 	.word	0x022a022a
    5d88:	022a022a 	.word	0x022a022a
    5d8c:	022a022a 	.word	0x022a022a
    5d90:	022a022a 	.word	0x022a022a
    5d94:	022a022a 	.word	0x022a022a
    5d98:	022a022a 	.word	0x022a022a
    5d9c:	022a022a 	.word	0x022a022a
    5da0:	022a022a 	.word	0x022a022a
    5da4:	022a022a 	.word	0x022a022a
    5da8:	022a022a 	.word	0x022a022a
    5dac:	022a022a 	.word	0x022a022a
    5db0:	022a022a 	.word	0x022a022a
    5db4:	022a022a 	.word	0x022a022a
    5db8:	022a022a 	.word	0x022a022a
    5dbc:	022a022a 	.word	0x022a022a
    5dc0:	022a022a 	.word	0x022a022a
    5dc4:	01200189 	.word	0x01200189
    5dc8:	01db01e6 	.word	0x01db01e6
    5dcc:	019301ba 	.word	0x019301ba
    5dd0:	010d00fb 	.word	0x010d00fb
    5dd4:	022a022a 	.word	0x022a022a
    5dd8:	022a022a 	.word	0x022a022a
    5ddc:	022a022a 	.word	0x022a022a
    5de0:	022a022a 	.word	0x022a022a
    5de4:	01c501d4 	.word	0x01c501d4
    5de8:	f005 fa96 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    5dec:	2800      	cmp	r0, #0
    5dee:	ddac      	ble.n	5d4a <menu()+0x139e>
          settings.conthold = Serial.parseInt();
    5df0:	484b      	ldr	r0, [pc, #300]	; (5f20 <menu()+0x1574>)
    5df2:	4d4f      	ldr	r5, [pc, #316]	; (5f30 <menu()+0x1584>)
    5df4:	f002 ff78 	bl	8ce8 <Stream::parseInt()>
          menuload = 1;
    5df8:	2301      	movs	r3, #1
    5dfa:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    5dfc:	236b      	movs	r3, #107	; 0x6b
          settings.conthold = Serial.parseInt();
    5dfe:	f8c5 0098 	str.w	r0, [r5, #152]	; 0x98
          incomingByte = 'k';
    5e02:	6033      	str	r3, [r6, #0]
    switch (incomingByte) {
    5e04:	e001      	b.n	5e0a <menu()+0x145e>
        virtual int read() { return usb_serial_getchar(); }
    5e06:	f005 fa4b 	bl	b2a0 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    5e0a:	f005 fa85 	bl	b318 <usb_serial_available>
        while (Serial.available()) {
    5e0e:	2800      	cmp	r0, #0
    5e10:	d1f9      	bne.n	5e06 <menu()+0x145a>
        SERIALCONSOLE.println();
    5e12:	4843      	ldr	r0, [pc, #268]	; (5f20 <menu()+0x1574>)
    5e14:	f002 fe08 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    5e18:	4841      	ldr	r0, [pc, #260]	; (5f20 <menu()+0x1574>)
    5e1a:	f002 fe05 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    5e1e:	4840      	ldr	r0, [pc, #256]	; (5f20 <menu()+0x1574>)
    5e20:	f002 fe02 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    5e24:	483e      	ldr	r0, [pc, #248]	; (5f20 <menu()+0x1574>)
    5e26:	f002 fdff 	bl	8a28 <Print::println()>
        SERIALCONSOLE.println();
    5e2a:	483d      	ldr	r0, [pc, #244]	; (5f20 <menu()+0x1574>)
    5e2c:	f002 fdfc 	bl	8a28 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5e30:	2121      	movs	r1, #33	; 0x21
    5e32:	4840      	ldr	r0, [pc, #256]	; (5f34 <menu()+0x1588>)
    5e34:	f005 faa2 	bl	b37c <usb_serial_write>
    5e38:	4839      	ldr	r0, [pc, #228]	; (5f20 <menu()+0x1574>)
    5e3a:	f002 fdf5 	bl	8a28 <Print::println()>
    5e3e:	2115      	movs	r1, #21
    5e40:	483d      	ldr	r0, [pc, #244]	; (5f38 <menu()+0x158c>)
    5e42:	f005 fa9b 	bl	b37c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5e46:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
    5e4a:	4835      	ldr	r0, [pc, #212]	; (5f20 <menu()+0x1574>)
    5e4c:	f002 fde4 	bl	8a18 <Print::print(long)>
    5e50:	2102      	movs	r1, #2
    5e52:	483a      	ldr	r0, [pc, #232]	; (5f3c <menu()+0x1590>)
    5e54:	f005 fa92 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5e58:	4831      	ldr	r0, [pc, #196]	; (5f20 <menu()+0x1574>)
    5e5a:	f002 fde5 	bl	8a28 <Print::println()>
    5e5e:	211e      	movs	r1, #30
    5e60:	4837      	ldr	r0, [pc, #220]	; (5f40 <menu()+0x1594>)
    5e62:	f005 fa8b 	bl	b37c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5e66:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
    5e6a:	482d      	ldr	r0, [pc, #180]	; (5f20 <menu()+0x1574>)
    5e6c:	f002 fdd4 	bl	8a18 <Print::print(long)>
    5e70:	2103      	movs	r1, #3
    5e72:	4834      	ldr	r0, [pc, #208]	; (5f44 <menu()+0x1598>)
    5e74:	f005 fa82 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5e78:	4829      	ldr	r0, [pc, #164]	; (5f20 <menu()+0x1574>)
    5e7a:	f002 fdd5 	bl	8a28 <Print::println()>
    5e7e:	211e      	movs	r1, #30
    5e80:	4831      	ldr	r0, [pc, #196]	; (5f48 <menu()+0x159c>)
    5e82:	f005 fa7b 	bl	b37c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5e86:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
    5e8a:	4825      	ldr	r0, [pc, #148]	; (5f20 <menu()+0x1574>)
    5e8c:	f002 fdc4 	bl	8a18 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    5e90:	4823      	ldr	r0, [pc, #140]	; (5f20 <menu()+0x1574>)
    5e92:	f002 fdc9 	bl	8a28 <Print::println()>
    5e96:	211d      	movs	r1, #29
    5e98:	482c      	ldr	r0, [pc, #176]	; (5f4c <menu()+0x15a0>)
    5e9a:	f005 fa6f 	bl	b37c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5e9e:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
    5ea2:	481f      	ldr	r0, [pc, #124]	; (5f20 <menu()+0x1574>)
    5ea4:	f002 fdb8 	bl	8a18 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    5ea8:	481d      	ldr	r0, [pc, #116]	; (5f20 <menu()+0x1574>)
    5eaa:	f002 fdbd 	bl	8a28 <Print::println()>
    5eae:	211e      	movs	r1, #30
    5eb0:	4827      	ldr	r0, [pc, #156]	; (5f50 <menu()+0x15a4>)
    5eb2:	f005 fa63 	bl	b37c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5eb6:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    5eba:	4819      	ldr	r0, [pc, #100]	; (5f20 <menu()+0x1574>)
    5ebc:	f002 fdac 	bl	8a18 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    5ec0:	4817      	ldr	r0, [pc, #92]	; (5f20 <menu()+0x1574>)
    5ec2:	f002 fdb1 	bl	8a28 <Print::println()>
        menuload = 5;
    5ec6:	2305      	movs	r3, #5
    5ec8:	6023      	str	r3, [r4, #0]
        break;
    5eca:	f7fe bdd4 	b.w	4a76 <menu()+0xca>
        virtual int available() { return usb_serial_available(); }
    5ece:	f005 fa23 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    5ed2:	2800      	cmp	r0, #0
    5ed4:	f77f af39 	ble.w	5d4a <menu()+0x139e>
          settings.Precurrent = Serial.parseInt();
    5ed8:	4811      	ldr	r0, [pc, #68]	; (5f20 <menu()+0x1574>)
    5eda:	4d15      	ldr	r5, [pc, #84]	; (5f30 <menu()+0x1584>)
    5edc:	f002 ff04 	bl	8ce8 <Stream::parseInt()>
          menuload = 1;
    5ee0:	2301      	movs	r3, #1
    5ee2:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    5ee4:	236b      	movs	r3, #107	; 0x6b
          settings.Precurrent = Serial.parseInt();
    5ee6:	f8c5 009c 	str.w	r0, [r5, #156]	; 0x9c
          incomingByte = 'k';
    5eea:	6033      	str	r3, [r6, #0]
    switch (incomingByte) {
    5eec:	e78d      	b.n	5e0a <menu()+0x145e>
    5eee:	f005 fa13 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    5ef2:	2800      	cmp	r0, #0
    5ef4:	f77f af29 	ble.w	5d4a <menu()+0x139e>
          settings.gaugehigh = Serial.parseInt();
    5ef8:	4809      	ldr	r0, [pc, #36]	; (5f20 <menu()+0x1574>)
    5efa:	4d0d      	ldr	r5, [pc, #52]	; (5f30 <menu()+0x1584>)
    5efc:	f002 fef4 	bl	8ce8 <Stream::parseInt()>
          gaugedebug = 3;
    5f00:	4b14      	ldr	r3, [pc, #80]	; (5f54 <menu()+0x15a8>)
          settings.gaugehigh = Serial.parseInt();
    5f02:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
          gaugedebug = 3;
    5f06:	2203      	movs	r2, #3
    5f08:	601a      	str	r2, [r3, #0]
          gaugeupdate();
    5f0a:	f7fc f833 	bl	1f74 <gaugeupdate()>
          menuload = 1;
    5f0e:	2201      	movs	r2, #1
          incomingByte = 'k';
    5f10:	236b      	movs	r3, #107	; 0x6b
          menuload = 1;
    5f12:	6022      	str	r2, [r4, #0]
          incomingByte = 'k';
    5f14:	6033      	str	r3, [r6, #0]
    switch (incomingByte) {
    5f16:	e778      	b.n	5e0a <menu()+0x145e>
    5f18:	0001410c 	.word	0x0001410c
    5f1c:	447a0000 	.word	0x447a0000
    5f20:	1fff880c 	.word	0x1fff880c
    5f24:	00013930 	.word	0x00013930
    5f28:	00012ea4 	.word	0x00012ea4
    5f2c:	00014124 	.word	0x00014124
    5f30:	1fffb20c 	.word	0x1fffb20c
    5f34:	00013b44 	.word	0x00013b44
    5f38:	00013b68 	.word	0x00013b68
    5f3c:	00013a4c 	.word	0x00013a4c
    5f40:	00013b80 	.word	0x00013b80
    5f44:	000133cc 	.word	0x000133cc
    5f48:	00013ba0 	.word	0x00013ba0
    5f4c:	00013bc0 	.word	0x00013bc0
    5f50:	00013be0 	.word	0x00013be0
    5f54:	1fffb118 	.word	0x1fffb118
    5f58:	f005 f9de 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    5f5c:	2800      	cmp	r0, #0
    5f5e:	dd0d      	ble.n	5f7c <menu()+0x15d0>
          settings.StoreVsetpoint = Serial.parseInt();
    5f60:	48a7      	ldr	r0, [pc, #668]	; (6200 <menu()+0x1854>)
          settings.StoreVsetpoint = settings.StoreVsetpoint / 1000;
    5f62:	4da8      	ldr	r5, [pc, #672]	; (6204 <menu()+0x1858>)
          settings.StoreVsetpoint = Serial.parseInt();
    5f64:	f002 fec0 	bl	8ce8 <Stream::parseInt()>
    5f68:	f006 f894 	bl	c094 <__aeabi_i2f>
          settings.StoreVsetpoint = settings.StoreVsetpoint / 1000;
    5f6c:	49a6      	ldr	r1, [pc, #664]	; (6208 <menu()+0x185c>)
    5f6e:	f006 f999 	bl	c2a4 <__aeabi_fdiv>
          menuload = 1;
    5f72:	2201      	movs	r2, #1
          incomingByte = 'b';
    5f74:	2362      	movs	r3, #98	; 0x62
          settings.StoreVsetpoint = settings.StoreVsetpoint / 1000;
    5f76:	6228      	str	r0, [r5, #32]
          menuload = 1;
    5f78:	6022      	str	r2, [r4, #0]
          incomingByte = 'b';
    5f7a:	6033      	str	r3, [r6, #0]
    5f7c:	f005 f9cc 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    5f80:	2800      	cmp	r0, #0
    5f82:	dd0e      	ble.n	5fa2 <menu()+0x15f6>
          settings.DisTaper = Serial.parseInt();
    5f84:	489e      	ldr	r0, [pc, #632]	; (6200 <menu()+0x1854>)
          settings.DisTaper = settings.DisTaper / 1000;
    5f86:	4d9f      	ldr	r5, [pc, #636]	; (6204 <menu()+0x1858>)
          settings.DisTaper = Serial.parseInt();
    5f88:	f002 feae 	bl	8ce8 <Stream::parseInt()>
    5f8c:	f006 f882 	bl	c094 <__aeabi_i2f>
          settings.DisTaper = settings.DisTaper / 1000;
    5f90:	499d      	ldr	r1, [pc, #628]	; (6208 <menu()+0x185c>)
    5f92:	f006 f987 	bl	c2a4 <__aeabi_fdiv>
          menuload = 1;
    5f96:	2201      	movs	r2, #1
          incomingByte = 'b';
    5f98:	2362      	movs	r3, #98	; 0x62
          settings.DisTaper = settings.DisTaper / 1000;
    5f9a:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
          menuload = 1;
    5f9e:	6022      	str	r2, [r4, #0]
          incomingByte = 'b';
    5fa0:	6033      	str	r3, [r6, #0]
    5fa2:	f005 f9b9 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    5fa6:	2800      	cmp	r0, #0
    5fa8:	f300 8108 	bgt.w	61bc <menu()+0x1810>
  if (menuload == 1) {
    5fac:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    5fae:	6830      	ldr	r0, [r6, #0]
  if (menuload == 1) {
    5fb0:	2b01      	cmp	r3, #1
    5fb2:	f47e ad57 	bne.w	4a64 <menu()+0xb8>
    5fb6:	f7ff b9be 	b.w	5336 <menu()+0x98a>
    5fba:	f005 f9ad 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    5fbe:	2800      	cmp	r0, #0
    5fc0:	ddf4      	ble.n	5fac <menu()+0x1600>
          settings.balanceVoltage = Serial.parseInt();
    5fc2:	488f      	ldr	r0, [pc, #572]	; (6200 <menu()+0x1854>)
          settings.balanceVoltage = settings.balanceVoltage / 1000;
    5fc4:	4d8f      	ldr	r5, [pc, #572]	; (6204 <menu()+0x1858>)
          settings.balanceVoltage = Serial.parseInt();
    5fc6:	f002 fe8f 	bl	8ce8 <Stream::parseInt()>
    5fca:	f006 f863 	bl	c094 <__aeabi_i2f>
          settings.balanceVoltage = settings.balanceVoltage / 1000;
    5fce:	498e      	ldr	r1, [pc, #568]	; (6208 <menu()+0x185c>)
    5fd0:	f006 f968 	bl	c2a4 <__aeabi_fdiv>
    5fd4:	64a8      	str	r0, [r5, #72]	; 0x48
        menuload = 1;
    5fd6:	2201      	movs	r2, #1
        incomingByte = 'b';
    5fd8:	2362      	movs	r3, #98	; 0x62
        menuload = 1;
    5fda:	6022      	str	r2, [r4, #0]
        incomingByte = 'b';
    5fdc:	6033      	str	r3, [r6, #0]
    switch (incomingByte) {
    5fde:	e4a3      	b.n	5928 <menu()+0xf7c>
    5fe0:	f005 f99a 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    5fe4:	2800      	cmp	r0, #0
    5fe6:	dde1      	ble.n	5fac <menu()+0x1600>
          settings.UnderTSetpoint = Serial.parseInt();
    5fe8:	4885      	ldr	r0, [pc, #532]	; (6200 <menu()+0x1854>)
    5fea:	4d86      	ldr	r5, [pc, #536]	; (6204 <menu()+0x1858>)
    5fec:	f002 fe7c 	bl	8ce8 <Stream::parseInt()>
    5ff0:	f006 f850 	bl	c094 <__aeabi_i2f>
    5ff4:	62e8      	str	r0, [r5, #44]	; 0x2c
          incomingByte = 'b';
    5ff6:	e7ee      	b.n	5fd6 <menu()+0x162a>
    5ff8:	f005 f98e 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    5ffc:	2800      	cmp	r0, #0
    5ffe:	ddd5      	ble.n	5fac <menu()+0x1600>
          settings.OverTSetpoint = Serial.parseInt();
    6000:	487f      	ldr	r0, [pc, #508]	; (6200 <menu()+0x1854>)
    6002:	4d80      	ldr	r5, [pc, #512]	; (6204 <menu()+0x1858>)
    6004:	f002 fe70 	bl	8ce8 <Stream::parseInt()>
    6008:	f006 f844 	bl	c094 <__aeabi_i2f>
    600c:	62a8      	str	r0, [r5, #40]	; 0x28
          incomingByte = 'b';
    600e:	e7e2      	b.n	5fd6 <menu()+0x162a>
    6010:	f005 f982 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    6014:	2800      	cmp	r0, #0
    6016:	ddc9      	ble.n	5fac <menu()+0x1600>
          settings.UnderVSetpoint = Serial.parseInt();
    6018:	4879      	ldr	r0, [pc, #484]	; (6200 <menu()+0x1854>)
          settings.UnderVSetpoint = settings.UnderVSetpoint / 1000;
    601a:	4d7a      	ldr	r5, [pc, #488]	; (6204 <menu()+0x1858>)
          settings.UnderVSetpoint = Serial.parseInt();
    601c:	f002 fe64 	bl	8ce8 <Stream::parseInt()>
    6020:	f006 f838 	bl	c094 <__aeabi_i2f>
          settings.UnderVSetpoint = settings.UnderVSetpoint / 1000;
    6024:	4978      	ldr	r1, [pc, #480]	; (6208 <menu()+0x185c>)
    6026:	f006 f93d 	bl	c2a4 <__aeabi_fdiv>
    602a:	6128      	str	r0, [r5, #16]
          incomingByte = 'b';
    602c:	e7d3      	b.n	5fd6 <menu()+0x162a>
    602e:	f005 f973 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    6032:	2800      	cmp	r0, #0
    6034:	ddba      	ble.n	5fac <menu()+0x1600>
          settings.OverVSetpoint = Serial.parseInt();
    6036:	4872      	ldr	r0, [pc, #456]	; (6200 <menu()+0x1854>)
          settings.OverVSetpoint = settings.OverVSetpoint / 1000;
    6038:	4d72      	ldr	r5, [pc, #456]	; (6204 <menu()+0x1858>)
          settings.OverVSetpoint = Serial.parseInt();
    603a:	f002 fe55 	bl	8ce8 <Stream::parseInt()>
    603e:	f006 f829 	bl	c094 <__aeabi_i2f>
          settings.OverVSetpoint = settings.OverVSetpoint / 1000;
    6042:	4971      	ldr	r1, [pc, #452]	; (6208 <menu()+0x185c>)
    6044:	f006 f92e 	bl	c2a4 <__aeabi_fdiv>
    6048:	60e8      	str	r0, [r5, #12]
          incomingByte = 'b';
    604a:	e7c4      	b.n	5fd6 <menu()+0x162a>
    604c:	f005 f964 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    6050:	2800      	cmp	r0, #0
    6052:	ddab      	ble.n	5fac <menu()+0x1600>
          settings.Pstrings = Serial.parseInt();
    6054:	486a      	ldr	r0, [pc, #424]	; (6200 <menu()+0x1854>)
    6056:	4d6b      	ldr	r5, [pc, #428]	; (6204 <menu()+0x1858>)
    6058:	f002 fe46 	bl	8ce8 <Stream::parseInt()>
          menuload = 1;
    605c:	2301      	movs	r3, #1
          settings.Pstrings = Serial.parseInt();
    605e:	4601      	mov	r1, r0
          menuload = 1;
    6060:	6023      	str	r3, [r4, #0]
          bms.setPstrings(settings.Pstrings);
    6062:	486a      	ldr	r0, [pc, #424]	; (620c <menu()+0x1860>)
          settings.Pstrings = Serial.parseInt();
    6064:	6569      	str	r1, [r5, #84]	; 0x54
          incomingByte = 'b';
    6066:	2362      	movs	r3, #98	; 0x62
    6068:	6033      	str	r3, [r6, #0]
          bms.setPstrings(settings.Pstrings);
    606a:	f7fa fdff 	bl	c6c <BMSModuleManager::setPstrings(int)>
  if (menuload == 1) {
    606e:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    6070:	6830      	ldr	r0, [r6, #0]
    6072:	e79d      	b.n	5fb0 <menu()+0x1604>
    6074:	f005 f950 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    6078:	2800      	cmp	r0, #0
    607a:	dd97      	ble.n	5fac <menu()+0x1600>
          settings.Scells = Serial.parseInt();
    607c:	4860      	ldr	r0, [pc, #384]	; (6200 <menu()+0x1854>)
    607e:	4d61      	ldr	r5, [pc, #388]	; (6204 <menu()+0x1858>)
    6080:	f002 fe32 	bl	8ce8 <Stream::parseInt()>
    6084:	6528      	str	r0, [r5, #80]	; 0x50
          incomingByte = 'b';
    6086:	e7a6      	b.n	5fd6 <menu()+0x162a>
        loadSettings();
    6088:	f7fb fe20 	bl	1ccc <loadSettings()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    608c:	2102      	movs	r1, #2
    608e:	4860      	ldr	r0, [pc, #384]	; (6210 <menu()+0x1864>)
    6090:	f005 f974 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6094:	485a      	ldr	r0, [pc, #360]	; (6200 <menu()+0x1854>)
    6096:	f002 fcc7 	bl	8a28 <Print::println()>
    609a:	2102      	movs	r1, #2
    609c:	485c      	ldr	r0, [pc, #368]	; (6210 <menu()+0x1864>)
    609e:	f005 f96d 	bl	b37c <usb_serial_write>
    60a2:	4857      	ldr	r0, [pc, #348]	; (6200 <menu()+0x1854>)
    60a4:	f002 fcc0 	bl	8a28 <Print::println()>
    60a8:	2102      	movs	r1, #2
    60aa:	4859      	ldr	r0, [pc, #356]	; (6210 <menu()+0x1864>)
    60ac:	f005 f966 	bl	b37c <usb_serial_write>
    60b0:	4853      	ldr	r0, [pc, #332]	; (6200 <menu()+0x1854>)
    60b2:	f002 fcb9 	bl	8a28 <Print::println()>
    60b6:	4857      	ldr	r0, [pc, #348]	; (6214 <menu()+0x1868>)
    60b8:	2117      	movs	r1, #23
    60ba:	f005 f95f 	bl	b37c <usb_serial_write>
    60be:	4850      	ldr	r0, [pc, #320]	; (6200 <menu()+0x1854>)
    60c0:	f002 fcb2 	bl	8a28 <Print::println()>
    60c4:	2102      	movs	r1, #2
    60c6:	4852      	ldr	r0, [pc, #328]	; (6210 <menu()+0x1864>)
    60c8:	4d4e      	ldr	r5, [pc, #312]	; (6204 <menu()+0x1858>)
    60ca:	f005 f957 	bl	b37c <usb_serial_write>
    60ce:	484c      	ldr	r0, [pc, #304]	; (6200 <menu()+0x1854>)
    60d0:	f002 fcaa 	bl	8a28 <Print::println()>
        break;
    60d4:	e77f      	b.n	5fd6 <menu()+0x162a>
        virtual int available() { return usb_serial_available(); }
    60d6:	f005 f91f 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    60da:	2800      	cmp	r0, #0
    60dc:	f77f af66 	ble.w	5fac <menu()+0x1600>
          settings.socvolt[3] = Serial.parseInt();
    60e0:	4847      	ldr	r0, [pc, #284]	; (6200 <menu()+0x1854>)
    60e2:	4d48      	ldr	r5, [pc, #288]	; (6204 <menu()+0x1858>)
    60e4:	f002 fe00 	bl	8ce8 <Stream::parseInt()>
    60e8:	6768      	str	r0, [r5, #116]	; 0x74
          incomingByte = 'b';
    60ea:	e774      	b.n	5fd6 <menu()+0x162a>
        SOCset = 0;
    60ec:	4b4a      	ldr	r3, [pc, #296]	; (6218 <menu()+0x186c>)
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    60ee:	4848      	ldr	r0, [pc, #288]	; (6210 <menu()+0x1864>)
    60f0:	2200      	movs	r2, #0
    60f2:	2102      	movs	r1, #2
    60f4:	601a      	str	r2, [r3, #0]
    60f6:	f005 f941 	bl	b37c <usb_serial_write>
    60fa:	4841      	ldr	r0, [pc, #260]	; (6200 <menu()+0x1854>)
    60fc:	f002 fc94 	bl	8a28 <Print::println()>
    6100:	210b      	movs	r1, #11
    6102:	4846      	ldr	r0, [pc, #280]	; (621c <menu()+0x1870>)
    6104:	f005 f93a 	bl	b37c <usb_serial_write>
    6108:	e7dc      	b.n	60c4 <menu()+0x1718>
        menuload = 0;
    610a:	2200      	movs	r2, #0
        incomingByte = 115;
    610c:	2373      	movs	r3, #115	; 0x73
    610e:	4d44      	ldr	r5, [pc, #272]	; (6220 <menu()+0x1874>)
        menuload = 0;
    6110:	6022      	str	r2, [r4, #0]
        incomingByte = 115;
    6112:	6033      	str	r3, [r6, #0]
  if (incomingByte == 115 & menuload == 0) {
    6114:	f7fe bd3d 	b.w	4b92 <menu()+0x1e6>
        virtual int available() { return usb_serial_available(); }
    6118:	f005 f8fe 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    611c:	2800      	cmp	r0, #0
    611e:	f77f af45 	ble.w	5fac <menu()+0x1600>
          settings.socvolt[2] = Serial.parseInt();
    6122:	4837      	ldr	r0, [pc, #220]	; (6200 <menu()+0x1854>)
    6124:	4d37      	ldr	r5, [pc, #220]	; (6204 <menu()+0x1858>)
    6126:	f002 fddf 	bl	8ce8 <Stream::parseInt()>
    612a:	6728      	str	r0, [r5, #112]	; 0x70
          incomingByte = 'b';
    612c:	e753      	b.n	5fd6 <menu()+0x162a>
    612e:	f005 f8f3 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    6132:	2800      	cmp	r0, #0
    6134:	f77f af3a 	ble.w	5fac <menu()+0x1600>
          settings.socvolt[1] = Serial.parseInt();
    6138:	4831      	ldr	r0, [pc, #196]	; (6200 <menu()+0x1854>)
    613a:	4d32      	ldr	r5, [pc, #200]	; (6204 <menu()+0x1858>)
    613c:	f002 fdd4 	bl	8ce8 <Stream::parseInt()>
    6140:	66e8      	str	r0, [r5, #108]	; 0x6c
          incomingByte = 'b';
    6142:	e748      	b.n	5fd6 <menu()+0x162a>
    6144:	f005 f8e8 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    6148:	2800      	cmp	r0, #0
    614a:	f77f af2f 	ble.w	5fac <menu()+0x1600>
          settings.DischVsetpoint = Serial.parseInt();
    614e:	482c      	ldr	r0, [pc, #176]	; (6200 <menu()+0x1854>)
          settings.DischVsetpoint = settings.DischVsetpoint / 1000;
    6150:	4d2c      	ldr	r5, [pc, #176]	; (6204 <menu()+0x1858>)
          settings.DischVsetpoint = Serial.parseInt();
    6152:	f002 fdc9 	bl	8ce8 <Stream::parseInt()>
    6156:	f005 ff9d 	bl	c094 <__aeabi_i2f>
          settings.DischVsetpoint = settings.DischVsetpoint / 1000;
    615a:	492b      	ldr	r1, [pc, #172]	; (6208 <menu()+0x185c>)
    615c:	f006 f8a2 	bl	c2a4 <__aeabi_fdiv>
    6160:	61a8      	str	r0, [r5, #24]
          incomingByte = 'b';
    6162:	e738      	b.n	5fd6 <menu()+0x162a>
    6164:	f005 f8d8 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    6168:	2800      	cmp	r0, #0
    616a:	f77f af1f 	ble.w	5fac <menu()+0x1600>
          settings.discurrentmax = Serial.parseInt() * 10;
    616e:	4824      	ldr	r0, [pc, #144]	; (6200 <menu()+0x1854>)
    6170:	4d24      	ldr	r5, [pc, #144]	; (6204 <menu()+0x1858>)
    6172:	f002 fdb9 	bl	8ce8 <Stream::parseInt()>
    6176:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    617a:	0040      	lsls	r0, r0, #1
    617c:	6668      	str	r0, [r5, #100]	; 0x64
          incomingByte = 'b';
    617e:	e72a      	b.n	5fd6 <menu()+0x162a>
    6180:	f005 f8ca 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    6184:	2800      	cmp	r0, #0
    6186:	f77f af11 	ble.w	5fac <menu()+0x1600>
          settings.CAP = Serial.parseInt();
    618a:	481d      	ldr	r0, [pc, #116]	; (6200 <menu()+0x1854>)
    618c:	4d1d      	ldr	r5, [pc, #116]	; (6204 <menu()+0x1858>)
    618e:	f002 fdab 	bl	8ce8 <Stream::parseInt()>
    6192:	65a8      	str	r0, [r5, #88]	; 0x58
          incomingByte = 'b';
    6194:	e71f      	b.n	5fd6 <menu()+0x162a>
    6196:	f005 f8bf 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    619a:	2800      	cmp	r0, #0
    619c:	f77f af06 	ble.w	5fac <menu()+0x1600>
          settings.balanceHyst = Serial.parseInt();
    61a0:	4817      	ldr	r0, [pc, #92]	; (6200 <menu()+0x1854>)
          settings.balanceHyst = settings.balanceHyst / 1000;
    61a2:	4d18      	ldr	r5, [pc, #96]	; (6204 <menu()+0x1858>)
          settings.balanceHyst = Serial.parseInt();
    61a4:	f002 fda0 	bl	8ce8 <Stream::parseInt()>
    61a8:	f005 ff74 	bl	c094 <__aeabi_i2f>
          settings.balanceHyst = settings.balanceHyst / 1000;
    61ac:	4916      	ldr	r1, [pc, #88]	; (6208 <menu()+0x185c>)
    61ae:	f006 f879 	bl	c2a4 <__aeabi_fdiv>
    61b2:	64e8      	str	r0, [r5, #76]	; 0x4c
          incomingByte = 'b';
    61b4:	e70f      	b.n	5fd6 <menu()+0x162a>
          incomingByte = 'e';
    61b6:	2303      	movs	r3, #3
    61b8:	f7fe bc54 	b.w	4a64 <menu()+0xb8>
          settings.socvolt[0] = Serial.parseInt();
    61bc:	4810      	ldr	r0, [pc, #64]	; (6200 <menu()+0x1854>)
    61be:	4d11      	ldr	r5, [pc, #68]	; (6204 <menu()+0x1858>)
    61c0:	f002 fd92 	bl	8ce8 <Stream::parseInt()>
    61c4:	66a8      	str	r0, [r5, #104]	; 0x68
          incomingByte = 'b';
    61c6:	e706      	b.n	5fd6 <menu()+0x162a>
          settings.gaugelow = Serial.parseInt();
    61c8:	480d      	ldr	r0, [pc, #52]	; (6200 <menu()+0x1854>)
    61ca:	4d0e      	ldr	r5, [pc, #56]	; (6204 <menu()+0x1858>)
    61cc:	f002 fd8c 	bl	8ce8 <Stream::parseInt()>
          gaugedebug = 2;
    61d0:	4b14      	ldr	r3, [pc, #80]	; (6224 <menu()+0x1878>)
          settings.gaugelow = Serial.parseInt();
    61d2:	f8c5 00a4 	str.w	r0, [r5, #164]	; 0xa4
          gaugedebug = 2;
    61d6:	2202      	movs	r2, #2
    61d8:	e696      	b.n	5f08 <menu()+0x155c>
          settings.chargerspd = Serial.parseInt();
    61da:	4809      	ldr	r0, [pc, #36]	; (6200 <menu()+0x1854>)
    61dc:	4d09      	ldr	r5, [pc, #36]	; (6204 <menu()+0x1858>)
    61de:	f002 fd83 	bl	8ce8 <Stream::parseInt()>
          menuload = 1;
    61e2:	2301      	movs	r3, #1
    61e4:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    61e6:	2365      	movs	r3, #101	; 0x65
          settings.chargerspd = Serial.parseInt();
    61e8:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
          incomingByte = 'e';
    61ec:	6033      	str	r3, [r6, #0]
    switch (incomingByte) {
    61ee:	f7fe be9b 	b.w	4f28 <menu()+0x57c>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    61f2:	2114      	movs	r1, #20
    61f4:	480c      	ldr	r0, [pc, #48]	; (6228 <menu()+0x187c>)
    61f6:	f005 f8c1 	bl	b37c <usb_serial_write>
    61fa:	f7ff bb2c 	b.w	5856 <menu()+0xeaa>
    61fe:	bf00      	nop
    6200:	1fff880c 	.word	0x1fff880c
    6204:	1fffb20c 	.word	0x1fffb20c
    6208:	447a0000 	.word	0x447a0000
    620c:	1fff8fe0 	.word	0x1fff8fe0
    6210:	00012ea4 	.word	0x00012ea4
    6214:	00013824 	.word	0x00013824
    6218:	1fff8fc4 	.word	0x1fff8fc4
    621c:	0001383c 	.word	0x0001383c
    6220:	1fff8744 	.word	0x1fff8744
    6224:	1fffb118 	.word	0x1fffb118
    6228:	00013a80 	.word	0x00013a80
    622c:	2111      	movs	r1, #17
    622e:	48ac      	ldr	r0, [pc, #688]	; (64e0 <menu()+0x1b34>)
    6230:	f005 f8a4 	bl	b37c <usb_serial_write>
    6234:	48ab      	ldr	r0, [pc, #684]	; (64e4 <menu()+0x1b38>)
    6236:	f002 fbf7 	bl	8a28 <Print::println()>
    623a:	2115      	movs	r1, #21
    623c:	48aa      	ldr	r0, [pc, #680]	; (64e8 <menu()+0x1b3c>)
    623e:	f005 f89d 	bl	b37c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    6242:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
    6246:	48a7      	ldr	r0, [pc, #668]	; (64e4 <menu()+0x1b38>)
    6248:	f002 fbe6 	bl	8a18 <Print::print(long)>
    624c:	2105      	movs	r1, #5
    624e:	48a7      	ldr	r0, [pc, #668]	; (64ec <menu()+0x1b40>)
    6250:	f005 f894 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6254:	48a3      	ldr	r0, [pc, #652]	; (64e4 <menu()+0x1b38>)
    6256:	f002 fbe7 	bl	8a28 <Print::println()>
    625a:	2116      	movs	r1, #22
    625c:	48a4      	ldr	r0, [pc, #656]	; (64f0 <menu()+0x1b44>)
    625e:	f005 f88d 	bl	b37c <usb_serial_write>
          SERIALCONSOLE.print(settings.DCDCreq * 0.1, 1);
    6262:	f895 00cc 	ldrb.w	r0, [r5, #204]	; 0xcc
    6266:	f005 ff15 	bl	c094 <__aeabi_i2f>
    626a:	49a2      	ldr	r1, [pc, #648]	; (64f4 <menu()+0x1b48>)
    626c:	f005 ff66 	bl	c13c <__aeabi_fmul>
    6270:	f005 fd40 	bl	bcf4 <__aeabi_f2d>
    6274:	460b      	mov	r3, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    6276:	2101      	movs	r1, #1
    6278:	4602      	mov	r2, r0
    627a:	9100      	str	r1, [sp, #0]
    627c:	4899      	ldr	r0, [pc, #612]	; (64e4 <menu()+0x1b38>)
    627e:	f002 fbf7 	bl	8a70 <Print::printFloat(double, unsigned char)>
    6282:	2102      	movs	r1, #2
    6284:	489c      	ldr	r0, [pc, #624]	; (64f8 <menu()+0x1b4c>)
    6286:	f005 f879 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    628a:	4896      	ldr	r0, [pc, #600]	; (64e4 <menu()+0x1b38>)
    628c:	f002 fbcc 	bl	8a28 <Print::println()>
    6290:	2115      	movs	r1, #21
    6292:	489a      	ldr	r0, [pc, #616]	; (64fc <menu()+0x1b50>)
    6294:	f005 f872 	bl	b37c <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    6298:	f8d5 10c8 	ldr.w	r1, [r5, #200]	; 0xc8
    629c:	4891      	ldr	r0, [pc, #580]	; (64e4 <menu()+0x1b38>)
    629e:	4633      	mov	r3, r6
    62a0:	220a      	movs	r2, #10
    62a2:	f002 fbd9 	bl	8a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    62a6:	2105      	movs	r1, #5
    62a8:	4890      	ldr	r0, [pc, #576]	; (64ec <menu()+0x1b40>)
    62aa:	f005 f867 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    62ae:	488d      	ldr	r0, [pc, #564]	; (64e4 <menu()+0x1b38>)
    62b0:	f002 fbba 	bl	8a28 <Print::println()>
    62b4:	f7ff b80f 	b.w	52d6 <menu()+0x92a>
    62b8:	210e      	movs	r1, #14
    62ba:	4891      	ldr	r0, [pc, #580]	; (6500 <menu()+0x1b54>)
    62bc:	f005 f85e 	bl	b37c <usb_serial_write>
    62c0:	4888      	ldr	r0, [pc, #544]	; (64e4 <menu()+0x1b38>)
    62c2:	f002 fbb1 	bl	8a28 <Print::println()>
    62c6:	f7ff b98d 	b.w	55e4 <menu()+0xc38>
    62ca:	211c      	movs	r1, #28
    62cc:	488d      	ldr	r0, [pc, #564]	; (6504 <menu()+0x1b58>)
    62ce:	f005 f855 	bl	b37c <usb_serial_write>
          SERIALCONSOLE.print(settings.convlow * 0.1, 1);
    62d2:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
    62d6:	4987      	ldr	r1, [pc, #540]	; (64f4 <menu()+0x1b48>)
    62d8:	f005 ff30 	bl	c13c <__aeabi_fmul>
    62dc:	f005 fd0a 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    62e0:	9600      	str	r6, [sp, #0]
    62e2:	4602      	mov	r2, r0
    62e4:	460b      	mov	r3, r1
    62e6:	487f      	ldr	r0, [pc, #508]	; (64e4 <menu()+0x1b38>)
    62e8:	f002 fbc2 	bl	8a70 <Print::printFloat(double, unsigned char)>
    62ec:	2105      	movs	r1, #5
    62ee:	4886      	ldr	r0, [pc, #536]	; (6508 <menu()+0x1b5c>)
    62f0:	f005 f844 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    62f4:	487b      	ldr	r0, [pc, #492]	; (64e4 <menu()+0x1b38>)
    62f6:	f002 fb97 	bl	8a28 <Print::println()>
        if (settings.cursens == Analoguedual) {
    62fa:	6fee      	ldr	r6, [r5, #124]	; 0x7c
    62fc:	2e01      	cmp	r6, #1
    62fe:	d118      	bne.n	6332 <menu()+0x1986>
    6300:	211d      	movs	r1, #29
    6302:	4882      	ldr	r0, [pc, #520]	; (650c <menu()+0x1b60>)
    6304:	f005 f83a 	bl	b37c <usb_serial_write>
          SERIALCONSOLE.print(settings.convhigh * 0.1, 1);
    6308:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
    630c:	4979      	ldr	r1, [pc, #484]	; (64f4 <menu()+0x1b48>)
    630e:	f005 ff15 	bl	c13c <__aeabi_fmul>
    6312:	f005 fcef 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    6316:	9600      	str	r6, [sp, #0]
    6318:	4602      	mov	r2, r0
    631a:	460b      	mov	r3, r1
    631c:	4871      	ldr	r0, [pc, #452]	; (64e4 <menu()+0x1b38>)
    631e:	f002 fba7 	bl	8a70 <Print::printFloat(double, unsigned char)>
    6322:	2105      	movs	r1, #5
    6324:	4878      	ldr	r0, [pc, #480]	; (6508 <menu()+0x1b5c>)
    6326:	f005 f829 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    632a:	486e      	ldr	r0, [pc, #440]	; (64e4 <menu()+0x1b38>)
    632c:	f002 fb7c 	bl	8a28 <Print::println()>
        if (settings.cursens == Analoguesing || settings.cursens == Analoguedual) {
    6330:	6fee      	ldr	r6, [r5, #124]	; 0x7c
    6332:	f026 0602 	bic.w	r6, r6, #2
    6336:	2e01      	cmp	r6, #1
    6338:	f47f a88d 	bne.w	5456 <menu()+0xaaa>
    633c:	211c      	movs	r1, #28
    633e:	4874      	ldr	r0, [pc, #464]	; (6510 <menu()+0x1b64>)
    6340:	f005 f81c 	bl	b37c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    6344:	f8b5 10b8 	ldrh.w	r1, [r5, #184]	; 0xb8
    6348:	4866      	ldr	r0, [pc, #408]	; (64e4 <menu()+0x1b38>)
    634a:	f002 fb65 	bl	8a18 <Print::print(long)>
    634e:	2103      	movs	r1, #3
    6350:	4870      	ldr	r0, [pc, #448]	; (6514 <menu()+0x1b68>)
    6352:	f005 f813 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6356:	4863      	ldr	r0, [pc, #396]	; (64e4 <menu()+0x1b38>)
    6358:	f002 fb66 	bl	8a28 <Print::println()>
        if (settings.cursens == Analoguedual) {
    635c:	6feb      	ldr	r3, [r5, #124]	; 0x7c
    635e:	2b01      	cmp	r3, #1
    6360:	f47f a879 	bne.w	5456 <menu()+0xaaa>
    6364:	211f      	movs	r1, #31
    6366:	486c      	ldr	r0, [pc, #432]	; (6518 <menu()+0x1b6c>)
    6368:	f005 f808 	bl	b37c <usb_serial_write>
          SERIALCONSOLE.print(settings.changecur * 0.001);
    636c:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    6370:	f005 fe90 	bl	c094 <__aeabi_i2f>
    6374:	4969      	ldr	r1, [pc, #420]	; (651c <menu()+0x1b70>)
    6376:	f005 fee1 	bl	c13c <__aeabi_fmul>
    637a:	f005 fcbb 	bl	bcf4 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    637e:	2502      	movs	r5, #2
    6380:	4602      	mov	r2, r0
    6382:	460b      	mov	r3, r1
    6384:	9500      	str	r5, [sp, #0]
    6386:	4857      	ldr	r0, [pc, #348]	; (64e4 <menu()+0x1b38>)
    6388:	f002 fb72 	bl	8a70 <Print::printFloat(double, unsigned char)>
    638c:	4629      	mov	r1, r5
    638e:	4864      	ldr	r0, [pc, #400]	; (6520 <menu()+0x1b74>)
    6390:	f004 fff4 	bl	b37c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6394:	4853      	ldr	r0, [pc, #332]	; (64e4 <menu()+0x1b38>)
    6396:	f002 fb47 	bl	8a28 <Print::println()>
    639a:	f7ff b85c 	b.w	5456 <menu()+0xaaa>
          debugdigits = Serial.parseInt();
    639e:	4851      	ldr	r0, [pc, #324]	; (64e4 <menu()+0x1b38>)
    63a0:	f002 fca2 	bl	8ce8 <Stream::parseInt()>
    63a4:	4b5f      	ldr	r3, [pc, #380]	; (6524 <menu()+0x1b78>)
    63a6:	6018      	str	r0, [r3, #0]
    63a8:	f7fe bfa9 	b.w	52fe <menu()+0x952>
  if (menuload == 8) {
    63ac:	2064      	movs	r0, #100	; 0x64
    63ae:	f7fe bca1 	b.w	4cf4 <menu()+0x348>
          contctrl = 0;
    63b2:	4b5d      	ldr	r3, [pc, #372]	; (6528 <menu()+0x1b7c>)
    63b4:	2500      	movs	r5, #0
          digitalWrite(OUT1, LOW);
    63b6:	200b      	movs	r0, #11
    63b8:	4629      	mov	r1, r5
          contctrl = 0;
    63ba:	601d      	str	r5, [r3, #0]
          digitalWrite(OUT1, LOW);
    63bc:	f003 f96c 	bl	9698 <digitalWrite>
          digitalWrite(OUT2, LOW);
    63c0:	4629      	mov	r1, r5
    63c2:	200c      	movs	r0, #12
    63c4:	f003 f968 	bl	9698 <digitalWrite>
          digitalWrite(OUT3, LOW);
    63c8:	4629      	mov	r1, r5
    63ca:	2014      	movs	r0, #20
    63cc:	f003 f964 	bl	9698 <digitalWrite>
          digitalWrite(OUT4, LOW);
    63d0:	4629      	mov	r1, r5
    63d2:	2015      	movs	r0, #21
    63d4:	f003 f960 	bl	9698 <digitalWrite>
        incomingByte = 'd';
    63d8:	2264      	movs	r2, #100	; 0x64
  if (menuload == 2) {
    63da:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'd';
    63dc:	6032      	str	r2, [r6, #0]
        break;
    63de:	f7fe bf95 	b.w	530c <menu()+0x960>
    63e2:	211e      	movs	r1, #30
    63e4:	4851      	ldr	r0, [pc, #324]	; (652c <menu()+0x1b80>)
    63e6:	f004 ffc9 	bl	b37c <usb_serial_write>
    63ea:	483e      	ldr	r0, [pc, #248]	; (64e4 <menu()+0x1b38>)
    63ec:	f002 fb1c 	bl	8a28 <Print::println()>
    63f0:	f7ff b808 	b.w	5404 <menu()+0xa58>
    63f4:	2120      	movs	r1, #32
    63f6:	484e      	ldr	r0, [pc, #312]	; (6530 <menu()+0x1b84>)
    63f8:	f004 ffc0 	bl	b37c <usb_serial_write>
    63fc:	4839      	ldr	r0, [pc, #228]	; (64e4 <menu()+0x1b38>)
    63fe:	f002 fb13 	bl	8a28 <Print::println()>
    6402:	f7fe bfff 	b.w	5404 <menu()+0xa58>
    6406:	2117      	movs	r1, #23
    6408:	484a      	ldr	r0, [pc, #296]	; (6534 <menu()+0x1b88>)
    640a:	f004 ffb7 	bl	b37c <usb_serial_write>
    640e:	4835      	ldr	r0, [pc, #212]	; (64e4 <menu()+0x1b38>)
    6410:	f002 fb0a 	bl	8a28 <Print::println()>
    6414:	f7fe bff6 	b.w	5404 <menu()+0xa58>
  if (menuload == 6)  //Charging settings
    6418:	2b06      	cmp	r3, #6
    641a:	f04f 0064 	mov.w	r0, #100	; 0x64
    641e:	f43f a98c 	beq.w	573a <menu()+0xd8e>
    6422:	f7fe bd4a 	b.w	4eba <menu()+0x50e>
  if (menuload == 3) {
    6426:	2b03      	cmp	r3, #3
    6428:	f43f aec5 	beq.w	61b6 <menu()+0x180a>
  if (menuload == 1) {
    642c:	2b01      	cmp	r3, #1
    642e:	f47e ab19 	bne.w	4a64 <menu()+0xb8>
    6432:	4d41      	ldr	r5, [pc, #260]	; (6538 <menu()+0x1b8c>)
    6434:	f7fe bf1e 	b.w	5274 <menu()+0x8c8>
  if (menuload == 5) {
    6438:	2b05      	cmp	r3, #5
    643a:	f43e ac70 	beq.w	4d1e <menu()+0x372>
    643e:	e486      	b.n	5d4e <menu()+0x13a2>
    6440:	4d3d      	ldr	r5, [pc, #244]	; (6538 <menu()+0x1b8c>)
    6442:	f7fe bd71 	b.w	4f28 <menu()+0x57c>
    6446:	4d3c      	ldr	r5, [pc, #240]	; (6538 <menu()+0x1b8c>)
    6448:	e4df      	b.n	5e0a <menu()+0x145e>
    644a:	4d3b      	ldr	r5, [pc, #236]	; (6538 <menu()+0x1b8c>)
    644c:	f7fe bca7 	b.w	4d9e <menu()+0x3f2>
        virtual int available() { return usb_serial_available(); }
    6450:	f004 ff62 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    6454:	2800      	cmp	r0, #0
    6456:	f77e ad2e 	ble.w	4eb6 <menu()+0x50a>
          settings.ChargeVsetpoint = Serial.parseInt();
    645a:	4822      	ldr	r0, [pc, #136]	; (64e4 <menu()+0x1b38>)
          settings.ChargeVsetpoint = settings.ChargeVsetpoint / 1000;
    645c:	4d36      	ldr	r5, [pc, #216]	; (6538 <menu()+0x1b8c>)
          settings.ChargeVsetpoint = Serial.parseInt();
    645e:	f002 fc43 	bl	8ce8 <Stream::parseInt()>
    6462:	f005 fe17 	bl	c094 <__aeabi_i2f>
          settings.ChargeVsetpoint = settings.ChargeVsetpoint / 1000;
    6466:	4935      	ldr	r1, [pc, #212]	; (653c <menu()+0x1b90>)
    6468:	f005 ff1c 	bl	c2a4 <__aeabi_fdiv>
          menuload = 1;
    646c:	2301      	movs	r3, #1
    646e:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    6470:	2365      	movs	r3, #101	; 0x65
          settings.ChargeVsetpoint = settings.ChargeVsetpoint / 1000;
    6472:	6168      	str	r0, [r5, #20]
          incomingByte = 'e';
    6474:	6033      	str	r3, [r6, #0]
    switch (incomingByte) {
    6476:	f7fe bd57 	b.w	4f28 <menu()+0x57c>
    647a:	f004 ff4d 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    647e:	2800      	cmp	r0, #0
    6480:	f77e acdc 	ble.w	4e3c <menu()+0x490>
          settings.WarnOff = Serial.parseInt();
    6484:	4817      	ldr	r0, [pc, #92]	; (64e4 <menu()+0x1b38>)
          settings.WarnOff = settings.WarnOff * 0.001;
    6486:	4d2c      	ldr	r5, [pc, #176]	; (6538 <menu()+0x1b8c>)
          settings.WarnOff = Serial.parseInt();
    6488:	f002 fc2e 	bl	8ce8 <Stream::parseInt()>
    648c:	f005 fe02 	bl	c094 <__aeabi_i2f>
          settings.WarnOff = settings.WarnOff * 0.001;
    6490:	4922      	ldr	r1, [pc, #136]	; (651c <menu()+0x1b70>)
    6492:	f005 fe53 	bl	c13c <__aeabi_fmul>
          menuload = 1;
    6496:	2301      	movs	r3, #1
    6498:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    649a:	2361      	movs	r3, #97	; 0x61
          settings.WarnOff = settings.WarnOff * 0.001;
    649c:	6268      	str	r0, [r5, #36]	; 0x24
          incomingByte = 'a';
    649e:	6033      	str	r3, [r6, #0]
    switch (incomingByte) {
    64a0:	f7fe be3b 	b.w	511a <menu()+0x76e>
        settings.SerialCan = !settings.SerialCan;
    64a4:	4d24      	ldr	r5, [pc, #144]	; (6538 <menu()+0x1b8c>)
    64a6:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
    64aa:	fab3 f383 	clz	r3, r3
    64ae:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    64b0:	2201      	movs	r2, #1
        settings.SerialCan = !settings.SerialCan;
    64b2:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
          incomingByte = 'x';
    64b6:	2378      	movs	r3, #120	; 0x78
        menuload = 1;
    64b8:	6022      	str	r2, [r4, #0]
          incomingByte = 'x';
    64ba:	6033      	str	r3, [r6, #0]
  if (menuload == 1) {
    64bc:	f7fe beda 	b.w	5274 <menu()+0x8c8>
    64c0:	f004 ff2a 	bl	b318 <usb_serial_available>
        if (Serial.available() > 0) {
    64c4:	2800      	cmp	r0, #0
    64c6:	f77f ac40 	ble.w	5d4a <menu()+0x139e>
          settings.Pretime = Serial.parseInt();
    64ca:	4806      	ldr	r0, [pc, #24]	; (64e4 <menu()+0x1b38>)
    64cc:	4d1a      	ldr	r5, [pc, #104]	; (6538 <menu()+0x1b8c>)
    64ce:	f002 fc0b 	bl	8ce8 <Stream::parseInt()>
          menuload = 1;
    64d2:	2301      	movs	r3, #1
    64d4:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    64d6:	236b      	movs	r3, #107	; 0x6b
          settings.Pretime = Serial.parseInt();
    64d8:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
          incomingByte = 'k';
    64dc:	6033      	str	r3, [r6, #0]
    switch (incomingByte) {
    64de:	e494      	b.n	5e0a <menu()+0x145e>
    64e0:	0001386c 	.word	0x0001386c
    64e4:	1fff880c 	.word	0x1fff880c
    64e8:	00013880 	.word	0x00013880
    64ec:	00013898 	.word	0x00013898
    64f0:	000138a0 	.word	0x000138a0
    64f4:	3dcccccd 	.word	0x3dcccccd
    64f8:	000138b8 	.word	0x000138b8
    64fc:	000138bc 	.word	0x000138bc
    6500:	00013d14 	.word	0x00013d14
    6504:	00013e58 	.word	0x00013e58
    6508:	00013e78 	.word	0x00013e78
    650c:	00013e80 	.word	0x00013e80
    6510:	00013ea0 	.word	0x00013ea0
    6514:	00013ec0 	.word	0x00013ec0
    6518:	00013ec4 	.word	0x00013ec4
    651c:	3a83126f 	.word	0x3a83126f
    6520:	00013ee4 	.word	0x00013ee4
    6524:	1fff8748 	.word	0x1fff8748
    6528:	1fffb0e8 	.word	0x1fffb0e8
    652c:	00013d98 	.word	0x00013d98
    6530:	00013db8 	.word	0x00013db8
    6534:	00013ddc 	.word	0x00013ddc
    6538:	1fffb20c 	.word	0x1fffb20c
    653c:	447a0000 	.word	0x447a0000

00006540 <loop>:
void loop() {
    6540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (Can0.available()) {
    6544:	4c97      	ldr	r4, [pc, #604]	; (67a4 <loop+0x264>)
void loop() {
    6546:	b09a      	sub	sp, #104	; 0x68
  while (Can0.available()) {
    6548:	e001      	b.n	654e <loop+0xe>
    canread();
    654a:	f7fc ff7f 	bl	344c <canread()>
  while (Can0.available()) {
    654e:	4620      	mov	r0, r4
    6550:	f000 ff76 	bl	7440 <FlexCAN::available()>
    6554:	2800      	cmp	r0, #0
    6556:	d1f8      	bne.n	654a <loop+0xa>
    6558:	f004 fede 	bl	b318 <usb_serial_available>
  if (SERIALCONSOLE.available() > 0) {
    655c:	2800      	cmp	r0, #0
    655e:	dd01      	ble.n	6564 <loop+0x24>
    menu();
    6560:	f7fe fa24 	bl	49ac <menu()>
  if (settings.SerialCan == 1) {
    6564:	4c90      	ldr	r4, [pc, #576]	; (67a8 <loop+0x268>)
    6566:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    656a:	2b01      	cmp	r3, #1
    656c:	f000 80d0 	beq.w	6710 <loop+0x1d0>
  if (outputcheck != 1) {
    6570:	4e8e      	ldr	r6, [pc, #568]	; (67ac <loop+0x26c>)
    6572:	6833      	ldr	r3, [r6, #0]
    6574:	2b01      	cmp	r3, #1
    6576:	d13d      	bne.n	65f4 <loop+0xb4>
    6578:	4d8d      	ldr	r5, [pc, #564]	; (67b0 <loop+0x270>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    657a:	682b      	ldr	r3, [r5, #0]
  if (millis() - looptime > 1000) {
    657c:	4a8d      	ldr	r2, [pc, #564]	; (67b4 <loop+0x274>)
    657e:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    6580:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6582:	6811      	ldr	r1, [r2, #0]
    6584:	1a5b      	subs	r3, r3, r1
    6586:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    658a:	d847      	bhi.n	661c <loop+0xdc>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    658c:	682b      	ldr	r3, [r5, #0]
  if (millis() - cleartime > 5000) {
    658e:	4a8a      	ldr	r2, [pc, #552]	; (67b8 <loop+0x278>)
    6590:	9316      	str	r3, [sp, #88]	; 0x58
    6592:	6811      	ldr	r1, [r2, #0]
	return ret;
    6594:	9b16      	ldr	r3, [sp, #88]	; 0x58
    6596:	1a5b      	subs	r3, r3, r1
    6598:	f241 3188 	movw	r1, #5000	; 0x1388
    659c:	428b      	cmp	r3, r1
    659e:	d903      	bls.n	65a8 <loop+0x68>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    65a0:	682b      	ldr	r3, [r5, #0]
    65a2:	9317      	str	r3, [sp, #92]	; 0x5c
	return ret;
    65a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    cleartime = millis();
    65a6:	6013      	str	r3, [r2, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    65a8:	682b      	ldr	r3, [r5, #0]
  if (millis() - looptime1 > settings.chargerspd) {
    65aa:	4a84      	ldr	r2, [pc, #528]	; (67bc <loop+0x27c>)
    65ac:	9318      	str	r3, [sp, #96]	; 0x60
    65ae:	6811      	ldr	r1, [r2, #0]
	return ret;
    65b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
    65b2:	1a5b      	subs	r3, r3, r1
    65b4:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
    65b8:	428b      	cmp	r3, r1
    65ba:	d918      	bls.n	65ee <loop+0xae>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    65bc:	682b      	ldr	r3, [r5, #0]
    65be:	9319      	str	r3, [sp, #100]	; 0x64
    if (settings.ESSmode == 1) {
    65c0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	return ret;
    65c4:	9919      	ldr	r1, [sp, #100]	; 0x64
    looptime1 = millis();
    65c6:	6011      	str	r1, [r2, #0]
    if (settings.ESSmode == 1) {
    65c8:	2b01      	cmp	r3, #1
    65ca:	d009      	beq.n	65e0 <loop+0xa0>
      if (settings.SerialCan == 1) {
    65cc:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    65d0:	2b01      	cmp	r3, #1
    65d2:	f000 80d2 	beq.w	677a <loop+0x23a>
}
    65d6:	b01a      	add	sp, #104	; 0x68
    65d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        chargercomms();
    65dc:	f7fd bbc6 	b.w	3d6c <chargercomms()>
      chargercomms();
    65e0:	f7fd fbc4 	bl	3d6c <chargercomms()>
      if (settings.SerialCan == 1) {
    65e4:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    65e8:	2b01      	cmp	r3, #1
    65ea:	f000 80c6 	beq.w	677a <loop+0x23a>
}
    65ee:	b01a      	add	sp, #104	; 0x68
    65f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    contcon();
    65f4:	f7fc fc4a 	bl	2e8c <contcon()>
    if (settings.ESSmode == 1) {
    65f8:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
    65fc:	2d01      	cmp	r5, #1
    65fe:	f000 80ff 	beq.w	6800 <loop+0x2c0>
      switch (bmsstatus) {
    6602:	4f6f      	ldr	r7, [pc, #444]	; (67c0 <loop+0x280>)
    6604:	783b      	ldrb	r3, [r7, #0]
    6606:	2b05      	cmp	r3, #5
    6608:	f200 80c1 	bhi.w	678e <loop+0x24e>
    660c:	e8df f013 	tbh	[pc, r3, lsl #1]
    6610:	02a4028b 	.word	0x02a4028b
    6614:	023202e2 	.word	0x023202e2
    6618:	01e10284 	.word	0x01e10284
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    661c:	682b      	ldr	r3, [r5, #0]
    661e:	930c      	str	r3, [sp, #48]	; 0x30
	return ret;
    6620:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bms.getAllVoltTemp();
    6622:	4868      	ldr	r0, [pc, #416]	; (67c4 <loop+0x284>)
    looptime = millis();
    6624:	6013      	str	r3, [r2, #0]
    bms.getAllVoltTemp();
    6626:	f7fa f915 	bl	854 <BMSModuleManager::getAllVoltTemp()>
    if (settings.ESSmode == 1) {
    662a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    662e:	2b01      	cmp	r3, #1
    6630:	d171      	bne.n	6716 <loop+0x1d6>
      if (SOCset != 0) {
    6632:	4b65      	ldr	r3, [pc, #404]	; (67c8 <loop+0x288>)
    6634:	681b      	ldr	r3, [r3, #0]
    6636:	2b00      	cmp	r3, #0
    6638:	f040 819c 	bne.w	6974 <loop+0x434>
    if (balancecells == 1) {
    663c:	4b63      	ldr	r3, [pc, #396]	; (67cc <loop+0x28c>)
    663e:	681b      	ldr	r3, [r3, #0]
    6640:	2b01      	cmp	r3, #1
    6642:	f000 8193 	beq.w	696c <loop+0x42c>
    if (debug != 0) {
    6646:	4b62      	ldr	r3, [pc, #392]	; (67d0 <loop+0x290>)
    6648:	681b      	ldr	r3, [r3, #0]
    664a:	2b00      	cmp	r3, #0
    664c:	f040 8175 	bne.w	693a <loop+0x3fa>
    if (CSVdebug != 0) {
    6650:	4f60      	ldr	r7, [pc, #384]	; (67d4 <loop+0x294>)
    6652:	683b      	ldr	r3, [r7, #0]
    6654:	2b00      	cmp	r3, #0
    6656:	f040 8165 	bne.w	6924 <loop+0x3e4>
    if (inputcheck != 0) {
    665a:	4b5f      	ldr	r3, [pc, #380]	; (67d8 <loop+0x298>)
    665c:	681b      	ldr	r3, [r3, #0]
    665e:	2b00      	cmp	r3, #0
    6660:	f040 815d 	bne.w	691e <loop+0x3de>
    if (outputcheck != 0) {
    6664:	6833      	ldr	r3, [r6, #0]
    6666:	2b00      	cmp	r3, #0
    6668:	f000 8156 	beq.w	6918 <loop+0x3d8>
      outputdebug();
    666c:	f7fd f974 	bl	3958 <outputdebug()>
    updateSOC();
    6670:	f7fc fa52 	bl	2b18 <updateSOC()>
    currentlimit();
    6674:	f7fc ff7e 	bl	3574 <currentlimit()>
    VEcan();
    6678:	f7fc fdcc 	bl	3214 <VEcan()>
  msg.id = 0x200;
    667c:	4957      	ldr	r1, [pc, #348]	; (67dc <loop+0x29c>)
    if (cellspresent == 0 && SOCset == 1) {
    667e:	4e58      	ldr	r6, [pc, #352]	; (67e0 <loop+0x2a0>)
  Can0.write(msg);
    6680:	4848      	ldr	r0, [pc, #288]	; (67a4 <loop+0x264>)
  msg.id = 0x200;
    6682:	f44f 7300 	mov.w	r3, #512	; 0x200
    6686:	600b      	str	r3, [r1, #0]
  msg.len = 3;
    6688:	2303      	movs	r3, #3
    668a:	71cb      	strb	r3, [r1, #7]
  msg.buf[0] = 0x02;
    668c:	2302      	movs	r3, #2
    668e:	810b      	strh	r3, [r1, #8]
  msg.buf[2] = 0x00;
    6690:	2300      	movs	r3, #0
    6692:	728b      	strb	r3, [r1, #10]
  Can0.write(msg);
    6694:	f000 ffc2 	bl	761c <FlexCAN::write(CAN_message_t const&)>
    if (cellspresent == 0 && SOCset == 1) {
    6698:	6833      	ldr	r3, [r6, #0]
      cellspresent = bms.seriescells();
    669a:	484a      	ldr	r0, [pc, #296]	; (67c4 <loop+0x284>)
    if (cellspresent == 0 && SOCset == 1) {
    669c:	b923      	cbnz	r3, 66a8 <loop+0x168>
    669e:	4b4a      	ldr	r3, [pc, #296]	; (67c8 <loop+0x288>)
    66a0:	681b      	ldr	r3, [r3, #0]
    66a2:	2b01      	cmp	r3, #1
    66a4:	f000 82f4 	beq.w	6c90 <loop+0x750>
      if (cellspresent != bms.seriescells() || cellspresent != (settings.Scells * settings.Pstrings))  //detect a fault in cells detected
    66a8:	f7fa f898 	bl	7dc <BMSModuleManager::seriescells()>
    66ac:	6833      	ldr	r3, [r6, #0]
    66ae:	4298      	cmp	r0, r3
    66b0:	d105      	bne.n	66be <loop+0x17e>
    66b2:	6d23      	ldr	r3, [r4, #80]	; 0x50
    66b4:	6d62      	ldr	r2, [r4, #84]	; 0x54
    66b6:	fb02 f303 	mul.w	r3, r2, r3
    66ba:	4298      	cmp	r0, r3
    66bc:	d017      	beq.n	66ee <loop+0x1ae>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    66be:	2102      	movs	r1, #2
    66c0:	4848      	ldr	r0, [pc, #288]	; (67e4 <loop+0x2a4>)
    66c2:	f004 fe5b 	bl	b37c <usb_serial_write>
    66c6:	4848      	ldr	r0, [pc, #288]	; (67e8 <loop+0x2a8>)
    66c8:	f002 f9ae 	bl	8a28 <Print::println()>
    66cc:	211d      	movs	r1, #29
    66ce:	4847      	ldr	r0, [pc, #284]	; (67ec <loop+0x2ac>)
    66d0:	f004 fe54 	bl	b37c <usb_serial_write>
    66d4:	2102      	movs	r1, #2
    66d6:	4843      	ldr	r0, [pc, #268]	; (67e4 <loop+0x2a4>)
    66d8:	f004 fe50 	bl	b37c <usb_serial_write>
    66dc:	4842      	ldr	r0, [pc, #264]	; (67e8 <loop+0x2a8>)
    66de:	f002 f9a3 	bl	8a28 <Print::println()>
        bmsstatus = Error;
    66e2:	4b37      	ldr	r3, [pc, #220]	; (67c0 <loop+0x280>)
    66e4:	2205      	movs	r2, #5
    66e6:	701a      	strb	r2, [r3, #0]
        ErrorReason = 3;
    66e8:	4b41      	ldr	r3, [pc, #260]	; (67f0 <loop+0x2b0>)
    66ea:	2203      	movs	r2, #3
    66ec:	601a      	str	r2, [r3, #0]
    alarmupdate();
    66ee:	f7fb fbad 	bl	1e4c <alarmupdate()>
    if (CSVdebug != 1) {
    66f2:	683b      	ldr	r3, [r7, #0]
    66f4:	2b01      	cmp	r3, #1
    66f6:	d001      	beq.n	66fc <loop+0x1bc>
      dashupdate();
    66f8:	f7fd f984 	bl	3a04 <dashupdate()>
  noInterrupts();  //   No - reset WDT
    66fc:	b672      	cpsid	i
  WDOG_REFRESH = 0xA602;
    66fe:	4b3d      	ldr	r3, [pc, #244]	; (67f4 <loop+0x2b4>)
    6700:	f24a 6102 	movw	r1, #42498	; 0xa602
  WDOG_REFRESH = 0xB480;
    6704:	f24b 4280 	movw	r2, #46208	; 0xb480
  WDOG_REFRESH = 0xA602;
    6708:	8199      	strh	r1, [r3, #12]
  WDOG_REFRESH = 0xB480;
    670a:	819a      	strh	r2, [r3, #12]
  interrupts();
    670c:	b662      	cpsie	i
}
    670e:	e73d      	b.n	658c <loop+0x4c>
    SerialCanRecieve();
    6710:	f7fd fc60 	bl	3fd4 <SerialCanRecieve()>
    6714:	e72c      	b.n	6570 <loop+0x30>
      if (bms.getLowCellVolt() < settings.UnderVSetpoint) {
    6716:	482b      	ldr	r0, [pc, #172]	; (67c4 <loop+0x284>)
    6718:	f7fa fa58 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    671c:	6921      	ldr	r1, [r4, #16]
    671e:	f005 feab 	bl	c478 <__aeabi_fcmplt>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6722:	682b      	ldr	r3, [r5, #0]
    6724:	2800      	cmp	r0, #0
    6726:	f000 8111 	beq.w	694c <loop+0x40c>
        if (UnderTime < millis())  //check is last time not undervoltage is longer thatn UnderDur ago
    672a:	4a33      	ldr	r2, [pc, #204]	; (67f8 <loop+0x2b8>)
    672c:	9311      	str	r3, [sp, #68]	; 0x44
	return ret;
    672e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6730:	6812      	ldr	r2, [r2, #0]
    6732:	429a      	cmp	r2, r3
    6734:	f0c0 8284 	bcc.w	6c40 <loop+0x700>
      if (bms.getHighCellVolt() < settings.UnderVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    6738:	4822      	ldr	r0, [pc, #136]	; (67c4 <loop+0x284>)
    673a:	f7fa fa6f 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    673e:	6921      	ldr	r1, [r4, #16]
    6740:	f005 fe9a 	bl	c478 <__aeabi_fcmplt>
    6744:	2800      	cmp	r0, #0
    6746:	f000 813a 	beq.w	69be <loop+0x47e>
        bmsstatus = Error;
    674a:	4b1d      	ldr	r3, [pc, #116]	; (67c0 <loop+0x280>)
    674c:	2205      	movs	r2, #5
    674e:	701a      	strb	r2, [r3, #0]
      if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    6750:	481c      	ldr	r0, [pc, #112]	; (67c4 <loop+0x284>)
    6752:	f7fa fa63 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6756:	68e1      	ldr	r1, [r4, #12]
    6758:	f005 feac 	bl	c4b4 <__aeabi_fcmpgt>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    675c:	682b      	ldr	r3, [r5, #0]
    675e:	2800      	cmp	r0, #0
    6760:	f000 80fc 	beq.w	695c <loop+0x41c>
        if (OverTime < millis())  //check is last time not undervoltage is longer thatn UnderDur ago
    6764:	4a25      	ldr	r2, [pc, #148]	; (67fc <loop+0x2bc>)
    6766:	9313      	str	r3, [sp, #76]	; 0x4c
	return ret;
    6768:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    676a:	6812      	ldr	r2, [r2, #0]
    676c:	429a      	cmp	r2, r3
    676e:	f4bf af65 	bcs.w	663c <loop+0xfc>
              bmsstatus = Error;
    6772:	4b13      	ldr	r3, [pc, #76]	; (67c0 <loop+0x280>)
    6774:	2205      	movs	r2, #5
    6776:	701a      	strb	r2, [r3, #0]
    6778:	e760      	b.n	663c <loop+0xfc>
}
    677a:	b01a      	add	sp, #104	; 0x68
    677c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        CanSerial();
    6780:	f7fd bca2 	b.w	40c8 <CanSerial()>
        if (SOCset == 1) {
    6784:	4b10      	ldr	r3, [pc, #64]	; (67c8 <loop+0x288>)
    6786:	681b      	ldr	r3, [r3, #0]
    6788:	2b01      	cmp	r3, #1
    678a:	f000 826f 	beq.w	6c6c <loop+0x72c>
    678e:	4d08      	ldr	r5, [pc, #32]	; (67b0 <loop+0x270>)
    if (settings.cursens == Analoguedual || settings.cursens == Analoguesing) {
    6790:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    6792:	f023 0302 	bic.w	r3, r3, #2
    6796:	2b01      	cmp	r3, #1
    6798:	f47f aeef 	bne.w	657a <loop+0x3a>
      getcurrent();
    679c:	f7fb fec0 	bl	2520 <getcurrent()>
    67a0:	e6eb      	b.n	657a <loop+0x3a>
    67a2:	bf00      	nop
    67a4:	1fffb2ec 	.word	0x1fffb2ec
    67a8:	1fffb20c 	.word	0x1fffb20c
    67ac:	1fffb204 	.word	0x1fffb204
    67b0:	1fffb4e0 	.word	0x1fffb4e0
    67b4:	1fffb144 	.word	0x1fffb144
    67b8:	1fffb084 	.word	0x1fffb084
    67bc:	1fffb148 	.word	0x1fffb148
    67c0:	1fffb008 	.word	0x1fffb008
    67c4:	1fff8fe0 	.word	0x1fff8fe0
    67c8:	1fff8fc4 	.word	0x1fff8fc4
    67cc:	1fff8fdc 	.word	0x1fff8fdc
    67d0:	1fff8744 	.word	0x1fff8744
    67d4:	1fff8fa0 	.word	0x1fff8fa0
    67d8:	1fffb138 	.word	0x1fffb138
    67dc:	1fffb174 	.word	0x1fffb174
    67e0:	1fffb074 	.word	0x1fffb074
    67e4:	00012ea4 	.word	0x00012ea4
    67e8:	1fff880c 	.word	0x1fff880c
    67ec:	00014278 	.word	0x00014278
    67f0:	1fff8fb0 	.word	0x1fff8fb0
    67f4:	40052000 	.word	0x40052000
    67f8:	1fff8fcc 	.word	0x1fff8fcc
    67fc:	1fff8fb4 	.word	0x1fff8fb4
      if (bmsstatus != Error) {
    6800:	4b8c      	ldr	r3, [pc, #560]	; (6a34 <loop+0x4f4>)
    6802:	781b      	ldrb	r3, [r3, #0]
    6804:	2b05      	cmp	r3, #5
    6806:	d0bd      	beq.n	6784 <loop+0x244>
        contctrl = contctrl | 4;  //turn on negative contactor
    6808:	4f8b      	ldr	r7, [pc, #556]	; (6a38 <loop+0x4f8>)
          if (storagemode == 1) {
    680a:	f8df 8230 	ldr.w	r8, [pc, #560]	; 6a3c <loop+0x4fc>
        contctrl = contctrl | 4;  //turn on negative contactor
    680e:	683b      	ldr	r3, [r7, #0]
        if (digitalRead(IN1) == LOW)  //Key OFF
    6810:	2011      	movs	r0, #17
        contctrl = contctrl | 4;  //turn on negative contactor
    6812:	f043 0304 	orr.w	r3, r3, #4
    6816:	603b      	str	r3, [r7, #0]
        if (digitalRead(IN1) == LOW)  //Key OFF
    6818:	f002 ff64 	bl	96e4 <digitalRead>
          if (storagemode == 1) {
    681c:	f8d8 3000 	ldr.w	r3, [r8]
        if (digitalRead(IN1) == LOW)  //Key OFF
    6820:	2800      	cmp	r0, #0
    6822:	f000 8207 	beq.w	6c34 <loop+0x6f4>
          if (storagemode == 0) {
    6826:	b90b      	cbnz	r3, 682c <loop+0x2ec>
            storagemode = 1;
    6828:	f8c8 5000 	str.w	r5, [r8]
        if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    682c:	4884      	ldr	r0, [pc, #528]	; (6a40 <loop+0x500>)
    682e:	f7fa f9f5 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6832:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    6834:	f005 fe3e 	bl	c4b4 <__aeabi_fcmpgt>
    6838:	2800      	cmp	r0, #0
    683a:	f040 8299 	bne.w	6d70 <loop+0x830>
        if (storagemode == 1) {
    683e:	f8d8 8000 	ldr.w	r8, [r8]
    6842:	4b80      	ldr	r3, [pc, #512]	; (6a44 <loop+0x504>)
    6844:	f1b8 0f01 	cmp.w	r8, #1
    6848:	6018      	str	r0, [r3, #0]
          if (bms.getHighCellVolt() > settings.StoreVsetpoint) {
    684a:	487d      	ldr	r0, [pc, #500]	; (6a40 <loop+0x500>)
        if (storagemode == 1) {
    684c:	f000 8250 	beq.w	6cf0 <loop+0x7b0>
          if (bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighCellVolt() > settings.ChargeVsetpoint) {
    6850:	f7fa f9e4 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6854:	68e1      	ldr	r1, [r4, #12]
    6856:	f005 fe2d 	bl	c4b4 <__aeabi_fcmpgt>
    685a:	2800      	cmp	r0, #0
    685c:	f040 8222 	bne.w	6ca4 <loop+0x764>
    6860:	4877      	ldr	r0, [pc, #476]	; (6a40 <loop+0x500>)
    6862:	f7fa f9db 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6866:	6961      	ldr	r1, [r4, #20]
    6868:	f005 fe24 	bl	c4b4 <__aeabi_fcmpgt>
    686c:	4605      	mov	r5, r0
    686e:	2800      	cmp	r0, #0
    6870:	f040 8218 	bne.w	6ca4 <loop+0x764>
            if (Charged == 1) {
    6874:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 6a48 <loop+0x508>
    6878:	f8da 9000 	ldr.w	r9, [sl]
    687c:	f1b9 0f01 	cmp.w	r9, #1
    6880:	f000 8328 	beq.w	6ed4 <loop+0x994>
              digitalWrite(OUT3, HIGH);  //turn on charger
    6884:	2101      	movs	r1, #1
    6886:	2014      	movs	r0, #20
    6888:	f002 ff06 	bl	9698 <digitalWrite>
              if (Pretimer + settings.Pretime < millis()) {
    688c:	4a6f      	ldr	r2, [pc, #444]	; (6a4c <loop+0x50c>)
    688e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    6892:	6812      	ldr	r2, [r2, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6894:	4d6e      	ldr	r5, [pc, #440]	; (6a50 <loop+0x510>)
    6896:	4413      	add	r3, r2
    6898:	682a      	ldr	r2, [r5, #0]
    689a:	9206      	str	r2, [sp, #24]
	return ret;
    689c:	9a06      	ldr	r2, [sp, #24]
    689e:	4293      	cmp	r3, r2
    68a0:	d203      	bcs.n	68aa <loop+0x36a>
                contctrl = contctrl | 2;
    68a2:	683b      	ldr	r3, [r7, #0]
    68a4:	f043 0302 	orr.w	r3, r3, #2
    68a8:	603b      	str	r3, [r7, #0]
        if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getLowCellVolt() < settings.DischVsetpoint) {
    68aa:	4865      	ldr	r0, [pc, #404]	; (6a40 <loop+0x500>)
    68ac:	f7fa f98e 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    68b0:	6921      	ldr	r1, [r4, #16]
    68b2:	f005 fde1 	bl	c478 <__aeabi_fcmplt>
    68b6:	b940      	cbnz	r0, 68ca <loop+0x38a>
    68b8:	4861      	ldr	r0, [pc, #388]	; (6a40 <loop+0x500>)
    68ba:	f7fa f987 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    68be:	69a1      	ldr	r1, [r4, #24]
    68c0:	f005 fdda 	bl	c478 <__aeabi_fcmplt>
    68c4:	2800      	cmp	r0, #0
    68c6:	f000 82a1 	beq.w	6e0c <loop+0x8cc>
          digitalWrite(OUT1, LOW);  //turn off discharge
    68ca:	2100      	movs	r1, #0
    68cc:	200b      	movs	r0, #11
    68ce:	f002 fee3 	bl	9698 <digitalWrite>
          contctrl = contctrl & 254;
    68d2:	683b      	ldr	r3, [r7, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    68d4:	682a      	ldr	r2, [r5, #0]
    68d6:	9207      	str	r2, [sp, #28]
    68d8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    68dc:	603b      	str	r3, [r7, #0]
          Pretimer1 = millis();
    68de:	4b5d      	ldr	r3, [pc, #372]	; (6a54 <loop+0x514>)
	return ret;
    68e0:	9a07      	ldr	r2, [sp, #28]
    68e2:	601a      	str	r2, [r3, #0]
        if (SOCset == 1) {
    68e4:	4b5c      	ldr	r3, [pc, #368]	; (6a58 <loop+0x518>)
    68e6:	681b      	ldr	r3, [r3, #0]
    68e8:	2b01      	cmp	r3, #1
    68ea:	f47f af51 	bne.w	6790 <loop+0x250>
          if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    68ee:	4854      	ldr	r0, [pc, #336]	; (6a40 <loop+0x500>)
    68f0:	f7fa f96c 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    68f4:	6921      	ldr	r1, [r4, #16]
    68f6:	f005 fdbf 	bl	c478 <__aeabi_fcmplt>
    68fa:	b940      	cbnz	r0, 690e <loop+0x3ce>
    68fc:	4850      	ldr	r0, [pc, #320]	; (6a40 <loop+0x500>)
    68fe:	f7fa f98d 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6902:	68e1      	ldr	r1, [r4, #12]
    6904:	f005 fdd6 	bl	c4b4 <__aeabi_fcmpgt>
    6908:	2800      	cmp	r0, #0
    690a:	f000 8304 	beq.w	6f16 <loop+0x9d6>
            digitalWrite(OUT2, HIGH);  //trip breaker
    690e:	2101      	movs	r1, #1
    6910:	200c      	movs	r0, #12
    6912:	f002 fec1 	bl	9698 <digitalWrite>
    6916:	e73b      	b.n	6790 <loop+0x250>
      gaugeupdate();
    6918:	f7fb fb2c 	bl	1f74 <gaugeupdate()>
    691c:	e6a8      	b.n	6670 <loop+0x130>
      inputdebug();
    691e:	f7fc ffb5 	bl	388c <inputdebug()>
    6922:	e69f      	b.n	6664 <loop+0x124>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6924:	682b      	ldr	r3, [r5, #0]
    6926:	9315      	str	r3, [sp, #84]	; 0x54
      bms.printAllCSV(millis(), currentact, SOC);
    6928:	4a4c      	ldr	r2, [pc, #304]	; (6a5c <loop+0x51c>)
    692a:	4b4d      	ldr	r3, [pc, #308]	; (6a60 <loop+0x520>)
	return ret;
    692c:	9915      	ldr	r1, [sp, #84]	; 0x54
    692e:	681b      	ldr	r3, [r3, #0]
    6930:	6812      	ldr	r2, [r2, #0]
    6932:	4843      	ldr	r0, [pc, #268]	; (6a40 <loop+0x500>)
    6934:	f7fa fe8e 	bl	1654 <BMSModuleManager::printAllCSV(unsigned long, float, int)>
    6938:	e68f      	b.n	665a <loop+0x11a>
      printbmsstat();
    693a:	f7fb fc33 	bl	21a4 <printbmsstat()>
      bms.printPackDetails(debugdigits, 0);
    693e:	4b49      	ldr	r3, [pc, #292]	; (6a64 <loop+0x524>)
    6940:	483f      	ldr	r0, [pc, #252]	; (6a40 <loop+0x500>)
    6942:	6819      	ldr	r1, [r3, #0]
    6944:	2200      	movs	r2, #0
    6946:	f7fa fa49 	bl	ddc <BMSModuleManager::printPackDetails(int, bool)>
    694a:	e681      	b.n	6650 <loop+0x110>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    694c:	9312      	str	r3, [sp, #72]	; 0x48
	return ret;
    694e:	9912      	ldr	r1, [sp, #72]	; 0x48
        UnderTime = millis() + settings.triptime;
    6950:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    6954:	4a44      	ldr	r2, [pc, #272]	; (6a68 <loop+0x528>)
    6956:	440b      	add	r3, r1
    6958:	6013      	str	r3, [r2, #0]
    695a:	e6ed      	b.n	6738 <loop+0x1f8>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    695c:	9314      	str	r3, [sp, #80]	; 0x50
	return ret;
    695e:	9914      	ldr	r1, [sp, #80]	; 0x50
        OverTime = millis() + settings.triptime;
    6960:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    6964:	4a41      	ldr	r2, [pc, #260]	; (6a6c <loop+0x52c>)
    6966:	440b      	add	r3, r1
    6968:	6013      	str	r3, [r2, #0]
    696a:	e667      	b.n	663c <loop+0xfc>
      bms.balanceCells();
    696c:	4834      	ldr	r0, [pc, #208]	; (6a40 <loop+0x500>)
    696e:	f7f9 ffbd 	bl	8ec <BMSModuleManager::balanceCells()>
    6972:	e668      	b.n	6646 <loop+0x106>
          if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() < settings.UnderVSetpoint) {
    6974:	4832      	ldr	r0, [pc, #200]	; (6a40 <loop+0x500>)
    6976:	f7fa f929 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    697a:	6921      	ldr	r1, [r4, #16]
    697c:	f005 fd7c 	bl	c478 <__aeabi_fcmplt>
    6980:	2800      	cmp	r0, #0
    6982:	f000 8161 	beq.w	6c48 <loop+0x708>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6986:	682b      	ldr	r3, [r5, #0]
            if (UnderTime < millis())  //check is last time not undervoltage is longer thatn UnderDur ago
    6988:	4a37      	ldr	r2, [pc, #220]	; (6a68 <loop+0x528>)
    698a:	930d      	str	r3, [sp, #52]	; 0x34
	return ret;
    698c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    698e:	6812      	ldr	r2, [r2, #0]
    6990:	429a      	cmp	r2, r3
    6992:	d202      	bcs.n	699a <loop+0x45a>
              bmsstatus = Error;
    6994:	4b27      	ldr	r3, [pc, #156]	; (6a34 <loop+0x4f4>)
    6996:	2205      	movs	r2, #5
    6998:	701a      	strb	r2, [r3, #0]
          if (bms.getLowCellVolt() > settings.OverVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint) {
    699a:	4829      	ldr	r0, [pc, #164]	; (6a40 <loop+0x500>)
    699c:	f7fa f916 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    69a0:	68e1      	ldr	r1, [r4, #12]
    69a2:	f005 fd87 	bl	c4b4 <__aeabi_fcmpgt>
    69a6:	2800      	cmp	r0, #0
    69a8:	f000 81f4 	beq.w	6d94 <loop+0x854>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    69ac:	682b      	ldr	r3, [r5, #0]
            if (OverTime < millis())  //check is last time not undervoltage is longer thatn UnderDur ago
    69ae:	4a2f      	ldr	r2, [pc, #188]	; (6a6c <loop+0x52c>)
    69b0:	930f      	str	r3, [sp, #60]	; 0x3c
	return ret;
    69b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    69b4:	6812      	ldr	r2, [r2, #0]
    69b6:	429a      	cmp	r2, r3
    69b8:	f4bf ae40 	bcs.w	663c <loop+0xfc>
    69bc:	e6d9      	b.n	6772 <loop+0x232>
      if (bms.getHighCellVolt() < settings.UnderVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    69be:	4820      	ldr	r0, [pc, #128]	; (6a40 <loop+0x500>)
    69c0:	f7fa f9e0 	bl	d84 <BMSModuleManager::getHighTemperature()>
    69c4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    69c6:	f005 fd75 	bl	c4b4 <__aeabi_fcmpgt>
    69ca:	2800      	cmp	r0, #0
    69cc:	f47f aebd 	bne.w	674a <loop+0x20a>
    69d0:	e6be      	b.n	6750 <loop+0x210>
          Discharge = 0;
    69d2:	4b27      	ldr	r3, [pc, #156]	; (6a70 <loop+0x530>)
    69d4:	2500      	movs	r5, #0
          digitalWrite(OUT4, LOW);
    69d6:	4629      	mov	r1, r5
    69d8:	2015      	movs	r0, #21
          Discharge = 0;
    69da:	601d      	str	r5, [r3, #0]
          digitalWrite(OUT4, LOW);
    69dc:	f002 fe5c 	bl	9698 <digitalWrite>
          digitalWrite(OUT3, LOW);  //turn off charger
    69e0:	4629      	mov	r1, r5
    69e2:	2014      	movs	r0, #20
    69e4:	f002 fe58 	bl	9698 <digitalWrite>
          digitalWrite(OUT2, LOW);
    69e8:	4629      	mov	r1, r5
    69ea:	200c      	movs	r0, #12
    69ec:	f002 fe54 	bl	9698 <digitalWrite>
          digitalWrite(OUT1, LOW);  //turn off discharge
    69f0:	4629      	mov	r1, r5
    69f2:	200b      	movs	r0, #11
    69f4:	f002 fe50 	bl	9698 <digitalWrite>
          contctrl = 0;             //turn off out 5 and 6
    69f8:	4b0f      	ldr	r3, [pc, #60]	; (6a38 <loop+0x4f8>)
          if (bms.getLowCellVolt() >= settings.UnderVSetpoint && bms.getHighCellVolt() <= settings.OverVSetpoint && digitalRead(IN1) == LOW) {
    69fa:	4811      	ldr	r0, [pc, #68]	; (6a40 <loop+0x500>)
          contctrl = 0;             //turn off out 5 and 6
    69fc:	601d      	str	r5, [r3, #0]
          if (bms.getLowCellVolt() >= settings.UnderVSetpoint && bms.getHighCellVolt() <= settings.OverVSetpoint && digitalRead(IN1) == LOW) {
    69fe:	f7fa f8e5 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    6a02:	6921      	ldr	r1, [r4, #16]
    6a04:	f005 fd4c 	bl	c4a0 <__aeabi_fcmpge>
    6a08:	2800      	cmp	r0, #0
    6a0a:	f43f aec0 	beq.w	678e <loop+0x24e>
    6a0e:	480c      	ldr	r0, [pc, #48]	; (6a40 <loop+0x500>)
    6a10:	f7fa f904 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6a14:	68e1      	ldr	r1, [r4, #12]
    6a16:	f005 fd39 	bl	c48c <__aeabi_fcmple>
    6a1a:	2800      	cmp	r0, #0
    6a1c:	f43f aeb7 	beq.w	678e <loop+0x24e>
    6a20:	2011      	movs	r0, #17
    6a22:	f002 fe5f 	bl	96e4 <digitalRead>
    6a26:	2800      	cmp	r0, #0
    6a28:	f47f aeb1 	bne.w	678e <loop+0x24e>
            bmsstatus = Ready;
    6a2c:	2301      	movs	r3, #1
    6a2e:	4d08      	ldr	r5, [pc, #32]	; (6a50 <loop+0x510>)
    6a30:	703b      	strb	r3, [r7, #0]
    6a32:	e6ad      	b.n	6790 <loop+0x250>
    6a34:	1fffb008 	.word	0x1fffb008
    6a38:	1fffb0e8 	.word	0x1fffb0e8
    6a3c:	1fffb2dc 	.word	0x1fffb2dc
    6a40:	1fff8fe0 	.word	0x1fff8fe0
    6a44:	1fff8fdc 	.word	0x1fff8fdc
    6a48:	1fff8fa8 	.word	0x1fff8fa8
    6a4c:	1fff8fb8 	.word	0x1fff8fb8
    6a50:	1fffb4e0 	.word	0x1fffb4e0
    6a54:	1fff8fbc 	.word	0x1fff8fbc
    6a58:	1fff8fc4 	.word	0x1fff8fc4
    6a5c:	1fffb0fc 	.word	0x1fffb0fc
    6a60:	1fff8724 	.word	0x1fff8724
    6a64:	1fff8748 	.word	0x1fff8748
    6a68:	1fff8fcc 	.word	0x1fff8fcc
    6a6c:	1fff8fb4 	.word	0x1fff8fb4
    6a70:	1fff8fac 	.word	0x1fff8fac
          if (settings.ChargerDirect > 0) {
    6a74:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    6a78:	2b00      	cmp	r3, #0
    6a7a:	f040 81a0 	bne.w	6dbe <loop+0x87e>
    6a7e:	4db0      	ldr	r5, [pc, #704]	; (6d40 <loop+0x800>)
          Discharge = 0;
    6a80:	2300      	movs	r3, #0
          digitalWrite(OUT3, HIGH);  //enable charger
    6a82:	2101      	movs	r1, #1
    6a84:	2014      	movs	r0, #20
          Discharge = 0;
    6a86:	602b      	str	r3, [r5, #0]
          digitalWrite(OUT3, HIGH);  //enable charger
    6a88:	f002 fe06 	bl	9698 <digitalWrite>
          if (bms.getHighCellVolt() > settings.balanceVoltage) {
    6a8c:	48ad      	ldr	r0, [pc, #692]	; (6d44 <loop+0x804>)
    6a8e:	4dae      	ldr	r5, [pc, #696]	; (6d48 <loop+0x808>)
    6a90:	f7fa f8c4 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6a94:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    6a96:	f005 fd0d 	bl	c4b4 <__aeabi_fcmpgt>
    6a9a:	3800      	subs	r0, #0
    6a9c:	bf18      	it	ne
    6a9e:	2001      	movne	r0, #1
    6aa0:	6028      	str	r0, [r5, #0]
          if (bms.getHighCellVolt() > settings.ChargeVsetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    6aa2:	48a8      	ldr	r0, [pc, #672]	; (6d44 <loop+0x804>)
    6aa4:	f7fa f8ba 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6aa8:	6961      	ldr	r1, [r4, #20]
    6aaa:	f005 fd03 	bl	c4b4 <__aeabi_fcmpgt>
    6aae:	b930      	cbnz	r0, 6abe <loop+0x57e>
    6ab0:	48a4      	ldr	r0, [pc, #656]	; (6d44 <loop+0x804>)
    6ab2:	f7fa f967 	bl	d84 <BMSModuleManager::getHighTemperature()>
    6ab6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    6ab8:	f005 fcfc 	bl	c4b4 <__aeabi_fcmpgt>
    6abc:	b330      	cbz	r0, 6b0c <loop+0x5cc>
            if (bms.getAvgCellVolt() > (settings.ChargeVsetpoint - settings.ChargeHys)) {
    6abe:	48a1      	ldr	r0, [pc, #644]	; (6d44 <loop+0x804>)
    6ac0:	f7fa f964 	bl	d8c <BMSModuleManager::getAvgCellVolt()>
    6ac4:	69e1      	ldr	r1, [r4, #28]
    6ac6:	4605      	mov	r5, r0
    6ac8:	6960      	ldr	r0, [r4, #20]
    6aca:	f005 fa2d 	bl	bf28 <__aeabi_fsub>
    6ace:	4601      	mov	r1, r0
    6ad0:	4628      	mov	r0, r5
    6ad2:	f005 fcef 	bl	c4b4 <__aeabi_fcmpgt>
    6ad6:	2800      	cmp	r0, #0
    6ad8:	f000 816e 	beq.w	6db8 <loop+0x878>
    SOC = 100;
    6adc:	4b9b      	ldr	r3, [pc, #620]	; (6d4c <loop+0x80c>)
    6ade:	2264      	movs	r2, #100	; 0x64
    SOC = 95;
    6ae0:	601a      	str	r2, [r3, #0]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6ae2:	6d62      	ldr	r2, [r4, #84]	; 0x54
    6ae4:	6da3      	ldr	r3, [r4, #88]	; 0x58
    6ae6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    6aea:	fb02 f303 	mul.w	r3, r2, r3
    6aee:	fb03 f000 	mul.w	r0, r3, r0
    6af2:	f005 facf 	bl	c094 <__aeabi_i2f>
    6af6:	4996      	ldr	r1, [pc, #600]	; (6d50 <loop+0x810>)
    6af8:	f005 fbd4 	bl	c2a4 <__aeabi_fdiv>
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6afc:	4a95      	ldr	r2, [pc, #596]	; (6d54 <loop+0x814>)
            digitalWrite(OUT3, LOW);  //turn off charger
    6afe:	2100      	movs	r1, #0
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6b00:	6010      	str	r0, [r2, #0]
            digitalWrite(OUT3, LOW);  //turn off charger
    6b02:	2014      	movs	r0, #20
    6b04:	f002 fdc8 	bl	9698 <digitalWrite>
            bmsstatus = Ready;
    6b08:	2301      	movs	r3, #1
    6b0a:	703b      	strb	r3, [r7, #0]
          if (digitalRead(IN3) == LOW)  //detect AC not present for charging
    6b0c:	2012      	movs	r0, #18
    6b0e:	f002 fde9 	bl	96e4 <digitalRead>
    6b12:	2800      	cmp	r0, #0
    6b14:	d08a      	beq.n	6a2c <loop+0x4ec>
    6b16:	e63a      	b.n	678e <loop+0x24e>
          Discharge = 0;
    6b18:	4b89      	ldr	r3, [pc, #548]	; (6d40 <loop+0x800>)
    6b1a:	4d8f      	ldr	r5, [pc, #572]	; (6d58 <loop+0x818>)
    6b1c:	2200      	movs	r2, #0
    6b1e:	601a      	str	r2, [r3, #0]
          Prechargecon();
    6b20:	f7fc f942 	bl	2da8 <Prechargecon()>
          break;
    6b24:	e634      	b.n	6790 <loop+0x250>
          Discharge = 0;
    6b26:	2500      	movs	r5, #0
    6b28:	4b85      	ldr	r3, [pc, #532]	; (6d40 <loop+0x800>)
          digitalWrite(OUT4, LOW);
    6b2a:	4629      	mov	r1, r5
    6b2c:	2015      	movs	r0, #21
          Discharge = 0;
    6b2e:	601d      	str	r5, [r3, #0]
          digitalWrite(OUT4, LOW);
    6b30:	f002 fdb2 	bl	9698 <digitalWrite>
          digitalWrite(OUT3, LOW);  //turn off charger
    6b34:	4629      	mov	r1, r5
    6b36:	2014      	movs	r0, #20
    6b38:	f002 fdae 	bl	9698 <digitalWrite>
          digitalWrite(OUT2, LOW);
    6b3c:	4629      	mov	r1, r5
    6b3e:	200c      	movs	r0, #12
    6b40:	f002 fdaa 	bl	9698 <digitalWrite>
          digitalWrite(OUT1, LOW);  //turn off discharge
    6b44:	4629      	mov	r1, r5
    6b46:	200b      	movs	r0, #11
    6b48:	f002 fda6 	bl	9698 <digitalWrite>
          contctrl = 0;
    6b4c:	4b83      	ldr	r3, [pc, #524]	; (6d5c <loop+0x81c>)
    6b4e:	601d      	str	r5, [r3, #0]
          bmsstatus = Ready;
    6b50:	2301      	movs	r3, #1
    6b52:	4d81      	ldr	r5, [pc, #516]	; (6d58 <loop+0x818>)
    6b54:	703b      	strb	r3, [r7, #0]
          break;
    6b56:	e61b      	b.n	6790 <loop+0x250>
          Discharge = 0;
    6b58:	4b79      	ldr	r3, [pc, #484]	; (6d40 <loop+0x800>)
    6b5a:	2500      	movs	r5, #0
          digitalWrite(OUT4, LOW);
    6b5c:	4629      	mov	r1, r5
    6b5e:	2015      	movs	r0, #21
          Discharge = 0;
    6b60:	601d      	str	r5, [r3, #0]
          digitalWrite(OUT4, LOW);
    6b62:	f002 fd99 	bl	9698 <digitalWrite>
          digitalWrite(OUT3, LOW);  //turn off charger
    6b66:	4629      	mov	r1, r5
    6b68:	2014      	movs	r0, #20
    6b6a:	f002 fd95 	bl	9698 <digitalWrite>
          digitalWrite(OUT2, LOW);
    6b6e:	4629      	mov	r1, r5
    6b70:	200c      	movs	r0, #12
    6b72:	f002 fd91 	bl	9698 <digitalWrite>
          digitalWrite(OUT1, LOW);  //turn off discharge
    6b76:	4629      	mov	r1, r5
    6b78:	200b      	movs	r0, #11
    6b7a:	f002 fd8d 	bl	9698 <digitalWrite>
          contctrl = 0;             //turn off out 5 and 6
    6b7e:	4b77      	ldr	r3, [pc, #476]	; (6d5c <loop+0x81c>)
          if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    6b80:	4870      	ldr	r0, [pc, #448]	; (6d44 <loop+0x804>)
          contctrl = 0;             //turn off out 5 and 6
    6b82:	601d      	str	r5, [r3, #0]
          if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    6b84:	f7fa f84a 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6b88:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    6b8a:	f005 fc93 	bl	c4b4 <__aeabi_fcmpgt>
    6b8e:	2800      	cmp	r0, #0
    6b90:	f040 812a 	bne.w	6de8 <loop+0x8a8>
    6b94:	4b6c      	ldr	r3, [pc, #432]	; (6d48 <loop+0x808>)
    6b96:	6018      	str	r0, [r3, #0]
          if (digitalRead(IN3) == HIGH && (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)) && bms.getHighTemperature() < (settings.OverTSetpoint - settings.WarnToff))  //detect AC present for charging and check not balancing
    6b98:	2012      	movs	r0, #18
    6b9a:	f002 fda3 	bl	96e4 <digitalRead>
    6b9e:	2801      	cmp	r0, #1
    6ba0:	f000 8148 	beq.w	6e34 <loop+0x8f4>
    6ba4:	4d6c      	ldr	r5, [pc, #432]	; (6d58 <loop+0x818>)
          if (digitalRead(IN1) == HIGH && bms.getLowCellVolt() > settings.DischVsetpoint)  //detect Key ON
    6ba6:	2011      	movs	r0, #17
    6ba8:	f002 fd9c 	bl	96e4 <digitalRead>
    6bac:	2801      	cmp	r0, #1
    6bae:	f47f adef 	bne.w	6790 <loop+0x250>
    6bb2:	4864      	ldr	r0, [pc, #400]	; (6d44 <loop+0x804>)
    6bb4:	f7fa f80a 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    6bb8:	69a1      	ldr	r1, [r4, #24]
    6bba:	f005 fc7b 	bl	c4b4 <__aeabi_fcmpgt>
    6bbe:	2800      	cmp	r0, #0
    6bc0:	f43f ade6 	beq.w	6790 <loop+0x250>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6bc4:	682a      	ldr	r2, [r5, #0]
    6bc6:	920a      	str	r2, [sp, #40]	; 0x28
            bmsstatus = Precharge;
    6bc8:	2304      	movs	r3, #4
    6bca:	703b      	strb	r3, [r7, #0]
            Pretimer = millis();
    6bcc:	4b64      	ldr	r3, [pc, #400]	; (6d60 <loop+0x820>)
	return ret;
    6bce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6bd0:	601a      	str	r2, [r3, #0]
    6bd2:	e5dd      	b.n	6790 <loop+0x250>
          Discharge = 1;
    6bd4:	4b5a      	ldr	r3, [pc, #360]	; (6d40 <loop+0x800>)
    6bd6:	2501      	movs	r5, #1
          if (digitalRead(IN1) == LOW)  //Key OFF
    6bd8:	2011      	movs	r0, #17
          Discharge = 1;
    6bda:	601d      	str	r5, [r3, #0]
          if (digitalRead(IN1) == LOW)  //Key OFF
    6bdc:	f002 fd82 	bl	96e4 <digitalRead>
    6be0:	b900      	cbnz	r0, 6be4 <loop+0x6a4>
            bmsstatus = Ready;
    6be2:	703d      	strb	r5, [r7, #0]
          if (digitalRead(IN3) == HIGH && (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)) && bms.getHighTemperature() < (settings.OverTSetpoint - settings.WarnToff))  //detect AC present for charging and check not balancing
    6be4:	2012      	movs	r0, #18
    6be6:	f002 fd7d 	bl	96e4 <digitalRead>
    6bea:	2801      	cmp	r0, #1
    6bec:	f47f adcf 	bne.w	678e <loop+0x24e>
    6bf0:	4854      	ldr	r0, [pc, #336]	; (6d44 <loop+0x804>)
    6bf2:	f7fa f813 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6bf6:	69e1      	ldr	r1, [r4, #28]
    6bf8:	4605      	mov	r5, r0
    6bfa:	6960      	ldr	r0, [r4, #20]
    6bfc:	f005 f994 	bl	bf28 <__aeabi_fsub>
    6c00:	4601      	mov	r1, r0
    6c02:	4628      	mov	r0, r5
    6c04:	f005 fc38 	bl	c478 <__aeabi_fcmplt>
    6c08:	2800      	cmp	r0, #0
    6c0a:	f43f adc0 	beq.w	678e <loop+0x24e>
    6c0e:	484d      	ldr	r0, [pc, #308]	; (6d44 <loop+0x804>)
    6c10:	f7fa f8b8 	bl	d84 <BMSModuleManager::getHighTemperature()>
    6c14:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    6c16:	4605      	mov	r5, r0
    6c18:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6c1a:	f005 f985 	bl	bf28 <__aeabi_fsub>
    6c1e:	4601      	mov	r1, r0
    6c20:	4628      	mov	r0, r5
    6c22:	f005 fc29 	bl	c478 <__aeabi_fcmplt>
    6c26:	2800      	cmp	r0, #0
    6c28:	f43f adb1 	beq.w	678e <loop+0x24e>
            bmsstatus = Charge;
    6c2c:	2303      	movs	r3, #3
    6c2e:	4d4a      	ldr	r5, [pc, #296]	; (6d58 <loop+0x818>)
    6c30:	703b      	strb	r3, [r7, #0]
    6c32:	e5ad      	b.n	6790 <loop+0x250>
          if (storagemode == 1) {
    6c34:	2b01      	cmp	r3, #1
    6c36:	f47f adf9 	bne.w	682c <loop+0x2ec>
            storagemode = 0;
    6c3a:	f8c8 0000 	str.w	r0, [r8]
    6c3e:	e5f5      	b.n	682c <loop+0x2ec>
          bmsstatus = Error;
    6c40:	4b48      	ldr	r3, [pc, #288]	; (6d64 <loop+0x824>)
    6c42:	2205      	movs	r2, #5
    6c44:	701a      	strb	r2, [r3, #0]
    6c46:	e577      	b.n	6738 <loop+0x1f8>
          if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() < settings.UnderVSetpoint) {
    6c48:	483e      	ldr	r0, [pc, #248]	; (6d44 <loop+0x804>)
    6c4a:	f7f9 ffe7 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6c4e:	6921      	ldr	r1, [r4, #16]
    6c50:	f005 fc12 	bl	c478 <__aeabi_fcmplt>
    6c54:	2800      	cmp	r0, #0
    6c56:	f47f ae96 	bne.w	6986 <loop+0x446>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6c5a:	682b      	ldr	r3, [r5, #0]
    6c5c:	930e      	str	r3, [sp, #56]	; 0x38
	return ret;
    6c5e:	990e      	ldr	r1, [sp, #56]	; 0x38
            UnderTime = millis() + settings.triptime;
    6c60:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    6c64:	4a40      	ldr	r2, [pc, #256]	; (6d68 <loop+0x828>)
    6c66:	440b      	add	r3, r1
    6c68:	6013      	str	r3, [r2, #0]
    6c6a:	e696      	b.n	699a <loop+0x45a>
          if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    6c6c:	4835      	ldr	r0, [pc, #212]	; (6d44 <loop+0x804>)
    6c6e:	f7f9 ffad 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    6c72:	6921      	ldr	r1, [r4, #16]
    6c74:	f005 fc00 	bl	c478 <__aeabi_fcmplt>
    6c78:	b940      	cbnz	r0, 6c8c <loop+0x74c>
    6c7a:	4832      	ldr	r0, [pc, #200]	; (6d44 <loop+0x804>)
    6c7c:	f7f9 ffce 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6c80:	68e1      	ldr	r1, [r4, #12]
    6c82:	f005 fc17 	bl	c4b4 <__aeabi_fcmpgt>
    6c86:	2800      	cmp	r0, #0
    6c88:	f000 8153 	beq.w	6f32 <loop+0x9f2>
    6c8c:	4d32      	ldr	r5, [pc, #200]	; (6d58 <loop+0x818>)
    6c8e:	e63e      	b.n	690e <loop+0x3ce>
      cellspresent = bms.seriescells();
    6c90:	f7f9 fda4 	bl	7dc <BMSModuleManager::seriescells()>
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt);
    6c94:	6c62      	ldr	r2, [r4, #68]	; 0x44
      cellspresent = bms.seriescells();
    6c96:	6030      	str	r0, [r6, #0]
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt);
    6c98:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    6c9c:	4829      	ldr	r0, [pc, #164]	; (6d44 <loop+0x804>)
    6c9e:	f7f9 ffe7 	bl	c70 <BMSModuleManager::setSensors(int, float)>
    6ca2:	e524      	b.n	66ee <loop+0x1ae>
            digitalWrite(OUT3, LOW);  //turn off charger
    6ca4:	2100      	movs	r1, #0
    6ca6:	2014      	movs	r0, #20
    6ca8:	f002 fcf6 	bl	9698 <digitalWrite>
            contctrl = contctrl & 253;
    6cac:	683b      	ldr	r3, [r7, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6cae:	4d2a      	ldr	r5, [pc, #168]	; (6d58 <loop+0x818>)
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6cb0:	6d62      	ldr	r2, [r4, #84]	; 0x54
            contctrl = contctrl & 253;
    6cb2:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    6cb6:	603b      	str	r3, [r7, #0]
    6cb8:	682b      	ldr	r3, [r5, #0]
    6cba:	9304      	str	r3, [sp, #16]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6cbc:	6da3      	ldr	r3, [r4, #88]	; 0x58
	return ret;
    6cbe:	9904      	ldr	r1, [sp, #16]
    6cc0:	fb02 f303 	mul.w	r3, r2, r3
            Pretimer = millis();
    6cc4:	4a26      	ldr	r2, [pc, #152]	; (6d60 <loop+0x820>)
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6cc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
            Pretimer = millis();
    6cca:	6011      	str	r1, [r2, #0]
            Charged = 1;
    6ccc:	4927      	ldr	r1, [pc, #156]	; (6d6c <loop+0x82c>)
    SOC = 100;
    6cce:	4a1f      	ldr	r2, [pc, #124]	; (6d4c <loop+0x80c>)
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6cd0:	fb03 f000 	mul.w	r0, r3, r0
            Charged = 1;
    6cd4:	2301      	movs	r3, #1
    6cd6:	600b      	str	r3, [r1, #0]
    SOC = 100;
    6cd8:	2364      	movs	r3, #100	; 0x64
    6cda:	6013      	str	r3, [r2, #0]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6cdc:	f005 f9da 	bl	c094 <__aeabi_i2f>
    6ce0:	491b      	ldr	r1, [pc, #108]	; (6d50 <loop+0x810>)
    6ce2:	f8df 8070 	ldr.w	r8, [pc, #112]	; 6d54 <loop+0x814>
    6ce6:	f005 fadd 	bl	c2a4 <__aeabi_fdiv>
    6cea:	f8c8 0000 	str.w	r0, [r8]
    6cee:	e5dc      	b.n	68aa <loop+0x36a>
          if (bms.getHighCellVolt() > settings.StoreVsetpoint) {
    6cf0:	f7f9 ff94 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6cf4:	6a21      	ldr	r1, [r4, #32]
    6cf6:	f005 fbdd 	bl	c4b4 <__aeabi_fcmpgt>
    6cfa:	4681      	mov	r9, r0
    6cfc:	2800      	cmp	r0, #0
    6cfe:	f040 80bf 	bne.w	6e80 <loop+0x940>
            if (Charged == 1) {
    6d02:	f8df a068 	ldr.w	sl, [pc, #104]	; 6d6c <loop+0x82c>
    6d06:	f8da 5000 	ldr.w	r5, [sl]
    6d0a:	2d01      	cmp	r5, #1
    6d0c:	f000 80d2 	beq.w	6eb4 <loop+0x974>
              digitalWrite(OUT3, HIGH);  //turn on charger
    6d10:	4641      	mov	r1, r8
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6d12:	4d11      	ldr	r5, [pc, #68]	; (6d58 <loop+0x818>)
    6d14:	2014      	movs	r0, #20
    6d16:	f002 fcbf 	bl	9698 <digitalWrite>
              if (Pretimer + settings.Pretime < millis()) {
    6d1a:	4a11      	ldr	r2, [pc, #68]	; (6d60 <loop+0x820>)
    6d1c:	682b      	ldr	r3, [r5, #0]
    6d1e:	6811      	ldr	r1, [r2, #0]
    6d20:	9303      	str	r3, [sp, #12]
    6d22:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    6d26:	440b      	add	r3, r1
	return ret;
    6d28:	9903      	ldr	r1, [sp, #12]
    6d2a:	428b      	cmp	r3, r1
    6d2c:	f4bf adbd 	bcs.w	68aa <loop+0x36a>
                contctrl = contctrl | 2;
    6d30:	683b      	ldr	r3, [r7, #0]
                Pretimer = 0;
    6d32:	f8c2 9000 	str.w	r9, [r2]
                contctrl = contctrl | 2;
    6d36:	f043 0302 	orr.w	r3, r3, #2
    6d3a:	603b      	str	r3, [r7, #0]
                Pretimer = 0;
    6d3c:	e5b5      	b.n	68aa <loop+0x36a>
    6d3e:	bf00      	nop
    6d40:	1fff8fac 	.word	0x1fff8fac
    6d44:	1fff8fe0 	.word	0x1fff8fe0
    6d48:	1fff8fdc 	.word	0x1fff8fdc
    6d4c:	1fff8724 	.word	0x1fff8724
    6d50:	3e8e38e4 	.word	0x3e8e38e4
    6d54:	1fff8fd8 	.word	0x1fff8fd8
    6d58:	1fffb4e0 	.word	0x1fffb4e0
    6d5c:	1fffb0e8 	.word	0x1fffb0e8
    6d60:	1fff8fb8 	.word	0x1fff8fb8
    6d64:	1fffb008 	.word	0x1fffb008
    6d68:	1fff8fcc 	.word	0x1fff8fcc
    6d6c:	1fff8fa8 	.word	0x1fff8fa8
        if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    6d70:	4883      	ldr	r0, [pc, #524]	; (6f80 <loop+0xa40>)
    6d72:	f7f9 ff53 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6d76:	4605      	mov	r5, r0
    6d78:	4881      	ldr	r0, [pc, #516]	; (6f80 <loop+0xa40>)
    6d7a:	f7f9 ff27 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    6d7e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    6d80:	f005 f8d4 	bl	bf2c <__addsf3>
    6d84:	4601      	mov	r1, r0
    6d86:	4628      	mov	r0, r5
    6d88:	f005 fb94 	bl	c4b4 <__aeabi_fcmpgt>
    6d8c:	3800      	subs	r0, #0
    6d8e:	bf18      	it	ne
    6d90:	2001      	movne	r0, #1
    6d92:	e554      	b.n	683e <loop+0x2fe>
          if (bms.getLowCellVolt() > settings.OverVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint) {
    6d94:	487a      	ldr	r0, [pc, #488]	; (6f80 <loop+0xa40>)
    6d96:	f7f9 ff41 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6d9a:	68e1      	ldr	r1, [r4, #12]
    6d9c:	f005 fb8a 	bl	c4b4 <__aeabi_fcmpgt>
    6da0:	2800      	cmp	r0, #0
    6da2:	f47f ae03 	bne.w	69ac <loop+0x46c>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6da6:	682b      	ldr	r3, [r5, #0]
    6da8:	9310      	str	r3, [sp, #64]	; 0x40
	return ret;
    6daa:	9910      	ldr	r1, [sp, #64]	; 0x40
            OverTime = millis() + settings.triptime;
    6dac:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    6db0:	4a74      	ldr	r2, [pc, #464]	; (6f84 <loop+0xa44>)
    6db2:	440b      	add	r3, r1
    6db4:	6013      	str	r3, [r2, #0]
    6db6:	e441      	b.n	663c <loop+0xfc>
    SOC = 95;
    6db8:	4b73      	ldr	r3, [pc, #460]	; (6f88 <loop+0xa48>)
    6dba:	225f      	movs	r2, #95	; 0x5f
    6dbc:	e690      	b.n	6ae0 <loop+0x5a0>
            Discharge = 0;
    6dbe:	f04f 0800 	mov.w	r8, #0
    6dc2:	4d72      	ldr	r5, [pc, #456]	; (6f8c <loop+0xa4c>)
            digitalWrite(OUT4, LOW);
    6dc4:	2015      	movs	r0, #21
    6dc6:	4641      	mov	r1, r8
            Discharge = 0;
    6dc8:	f8c5 8000 	str.w	r8, [r5]
            digitalWrite(OUT4, LOW);
    6dcc:	f002 fc64 	bl	9698 <digitalWrite>
            digitalWrite(OUT2, LOW);
    6dd0:	4641      	mov	r1, r8
    6dd2:	200c      	movs	r0, #12
    6dd4:	f002 fc60 	bl	9698 <digitalWrite>
            digitalWrite(OUT1, LOW);  //turn off discharge
    6dd8:	4641      	mov	r1, r8
    6dda:	200b      	movs	r0, #11
    6ddc:	f002 fc5c 	bl	9698 <digitalWrite>
            contctrl = 0;             //turn off out 5 and 6
    6de0:	4b6b      	ldr	r3, [pc, #428]	; (6f90 <loop+0xa50>)
    6de2:	f8c3 8000 	str.w	r8, [r3]
    6de6:	e64b      	b.n	6a80 <loop+0x540>
          if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    6de8:	4865      	ldr	r0, [pc, #404]	; (6f80 <loop+0xa40>)
    6dea:	f7f9 ff17 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6dee:	4605      	mov	r5, r0
    6df0:	4863      	ldr	r0, [pc, #396]	; (6f80 <loop+0xa40>)
    6df2:	f7f9 feeb 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    6df6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    6df8:	f005 f898 	bl	bf2c <__addsf3>
    6dfc:	4601      	mov	r1, r0
    6dfe:	4628      	mov	r0, r5
    6e00:	f005 fb58 	bl	c4b4 <__aeabi_fcmpgt>
    6e04:	3800      	subs	r0, #0
    6e06:	bf18      	it	ne
    6e08:	2001      	movne	r0, #1
    6e0a:	e6c3      	b.n	6b94 <loop+0x654>
          digitalWrite(OUT1, HIGH);  //turn on discharge
    6e0c:	2101      	movs	r1, #1
    6e0e:	200b      	movs	r0, #11
    6e10:	f002 fc42 	bl	9698 <digitalWrite>
          if (Pretimer1 + settings.Pretime < millis()) {
    6e14:	4b5f      	ldr	r3, [pc, #380]	; (6f94 <loop+0xa54>)
    6e16:	681a      	ldr	r2, [r3, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6e18:	682b      	ldr	r3, [r5, #0]
    6e1a:	9308      	str	r3, [sp, #32]
    6e1c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    6e20:	4413      	add	r3, r2
	return ret;
    6e22:	9a08      	ldr	r2, [sp, #32]
    6e24:	4293      	cmp	r3, r2
    6e26:	f4bf ad5d 	bcs.w	68e4 <loop+0x3a4>
            contctrl = contctrl | 1;
    6e2a:	683b      	ldr	r3, [r7, #0]
    6e2c:	f043 0301 	orr.w	r3, r3, #1
    6e30:	603b      	str	r3, [r7, #0]
    6e32:	e557      	b.n	68e4 <loop+0x3a4>
          if (digitalRead(IN3) == HIGH && (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)) && bms.getHighTemperature() < (settings.OverTSetpoint - settings.WarnToff))  //detect AC present for charging and check not balancing
    6e34:	4852      	ldr	r0, [pc, #328]	; (6f80 <loop+0xa40>)
    6e36:	f7f9 fef1 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6e3a:	69e1      	ldr	r1, [r4, #28]
    6e3c:	4605      	mov	r5, r0
    6e3e:	6960      	ldr	r0, [r4, #20]
    6e40:	f005 f872 	bl	bf28 <__aeabi_fsub>
    6e44:	4601      	mov	r1, r0
    6e46:	4628      	mov	r0, r5
    6e48:	f005 fb16 	bl	c478 <__aeabi_fcmplt>
    6e4c:	2800      	cmp	r0, #0
    6e4e:	f43f aea9 	beq.w	6ba4 <loop+0x664>
    6e52:	484b      	ldr	r0, [pc, #300]	; (6f80 <loop+0xa40>)
    6e54:	f7f9 ff96 	bl	d84 <BMSModuleManager::getHighTemperature()>
    6e58:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    6e5a:	4605      	mov	r5, r0
    6e5c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6e5e:	f005 f863 	bl	bf28 <__aeabi_fsub>
    6e62:	4601      	mov	r1, r0
    6e64:	4628      	mov	r0, r5
    6e66:	f005 fb07 	bl	c478 <__aeabi_fcmplt>
    6e6a:	2800      	cmp	r0, #0
    6e6c:	f43f ae9a 	beq.w	6ba4 <loop+0x664>
            if (settings.ChargerDirect == 1) {
    6e70:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    6e74:	2b00      	cmp	r3, #0
    6e76:	d07a      	beq.n	6f6e <loop+0xa2e>
              bmsstatus = Charge;
    6e78:	2303      	movs	r3, #3
    6e7a:	4d47      	ldr	r5, [pc, #284]	; (6f98 <loop+0xa58>)
    6e7c:	703b      	strb	r3, [r7, #0]
    6e7e:	e692      	b.n	6ba6 <loop+0x666>
            digitalWrite(OUT3, LOW);  //turn off charger
    6e80:	2100      	movs	r1, #0
    6e82:	2014      	movs	r0, #20
    6e84:	f002 fc08 	bl	9698 <digitalWrite>
            contctrl = contctrl & 253;
    6e88:	683b      	ldr	r3, [r7, #0]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6e8a:	6d62      	ldr	r2, [r4, #84]	; 0x54
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6e8c:	4d42      	ldr	r5, [pc, #264]	; (6f98 <loop+0xa58>)
            Pretimer = millis();
    6e8e:	4943      	ldr	r1, [pc, #268]	; (6f9c <loop+0xa5c>)
            contctrl = contctrl & 253;
    6e90:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    6e94:	603b      	str	r3, [r7, #0]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6e96:	6da3      	ldr	r3, [r4, #88]	; 0x58
    6e98:	fb02 f303 	mul.w	r3, r2, r3
    6e9c:	682a      	ldr	r2, [r5, #0]
    6e9e:	9201      	str	r2, [sp, #4]
            Charged = 1;
    6ea0:	4a3f      	ldr	r2, [pc, #252]	; (6fa0 <loop+0xa60>)
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6ea2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
            Charged = 1;
    6ea6:	f8c2 8000 	str.w	r8, [r2]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6eaa:	fb03 f000 	mul.w	r0, r3, r0
    SOC = 100;
    6eae:	4a36      	ldr	r2, [pc, #216]	; (6f88 <loop+0xa48>)
	return ret;
    6eb0:	9b01      	ldr	r3, [sp, #4]
    6eb2:	e710      	b.n	6cd6 <loop+0x796>
              if (bms.getHighCellVolt() < (settings.StoreVsetpoint - settings.ChargeHys)) {
    6eb4:	4832      	ldr	r0, [pc, #200]	; (6f80 <loop+0xa40>)
    6eb6:	f7f9 feb1 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6eba:	69e1      	ldr	r1, [r4, #28]
    6ebc:	4680      	mov	r8, r0
    6ebe:	6a20      	ldr	r0, [r4, #32]
    6ec0:	f005 f832 	bl	bf28 <__aeabi_fsub>
    6ec4:	4601      	mov	r1, r0
    6ec6:	4640      	mov	r0, r8
    6ec8:	f005 fad6 	bl	c478 <__aeabi_fcmplt>
    6ecc:	2800      	cmp	r0, #0
    6ece:	d13b      	bne.n	6f48 <loop+0xa08>
    6ed0:	4d31      	ldr	r5, [pc, #196]	; (6f98 <loop+0xa58>)
    6ed2:	e4ea      	b.n	68aa <loop+0x36a>
              if (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)) {
    6ed4:	482a      	ldr	r0, [pc, #168]	; (6f80 <loop+0xa40>)
    6ed6:	f7f9 fea1 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6eda:	69e1      	ldr	r1, [r4, #28]
    6edc:	4680      	mov	r8, r0
    6ede:	6960      	ldr	r0, [r4, #20]
    6ee0:	f005 f822 	bl	bf28 <__aeabi_fsub>
    6ee4:	4601      	mov	r1, r0
    6ee6:	4640      	mov	r0, r8
    6ee8:	f005 fac6 	bl	c478 <__aeabi_fcmplt>
    6eec:	2800      	cmp	r0, #0
    6eee:	d0ef      	beq.n	6ed0 <loop+0x990>
                digitalWrite(OUT3, HIGH);  //turn on charger
    6ef0:	4649      	mov	r1, r9
    6ef2:	2014      	movs	r0, #20
                Charged = 0;
    6ef4:	f8ca 5000 	str.w	r5, [sl]
                digitalWrite(OUT3, HIGH);  //turn on charger
    6ef8:	f002 fbce 	bl	9698 <digitalWrite>
                if (Pretimer + settings.Pretime < millis()) {
    6efc:	4a27      	ldr	r2, [pc, #156]	; (6f9c <loop+0xa5c>)
    6efe:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    6f02:	6812      	ldr	r2, [r2, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6f04:	4d24      	ldr	r5, [pc, #144]	; (6f98 <loop+0xa58>)
    6f06:	4413      	add	r3, r2
    6f08:	682a      	ldr	r2, [r5, #0]
    6f0a:	9205      	str	r2, [sp, #20]
	return ret;
    6f0c:	9a05      	ldr	r2, [sp, #20]
    6f0e:	4293      	cmp	r3, r2
    6f10:	f4bf accb 	bcs.w	68aa <loop+0x36a>
    6f14:	e4c5      	b.n	68a2 <loop+0x362>
          if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    6f16:	481a      	ldr	r0, [pc, #104]	; (6f80 <loop+0xa40>)
    6f18:	f7f9 ff34 	bl	d84 <BMSModuleManager::getHighTemperature()>
    6f1c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    6f1e:	f005 fac9 	bl	c4b4 <__aeabi_fcmpgt>
    6f22:	2800      	cmp	r0, #0
    6f24:	f47f acf3 	bne.w	690e <loop+0x3ce>
            digitalWrite(OUT2, LOW);  //trip breaker
    6f28:	2100      	movs	r1, #0
    6f2a:	200c      	movs	r0, #12
    6f2c:	f002 fbb4 	bl	9698 <digitalWrite>
    6f30:	e42e      	b.n	6790 <loop+0x250>
          if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    6f32:	4813      	ldr	r0, [pc, #76]	; (6f80 <loop+0xa40>)
    6f34:	f7f9 ff26 	bl	d84 <BMSModuleManager::getHighTemperature()>
    6f38:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    6f3a:	f005 fabb 	bl	c4b4 <__aeabi_fcmpgt>
    6f3e:	2800      	cmp	r0, #0
    6f40:	f47f aea4 	bne.w	6c8c <loop+0x74c>
    6f44:	4d14      	ldr	r5, [pc, #80]	; (6f98 <loop+0xa58>)
    6f46:	e7ef      	b.n	6f28 <loop+0x9e8>
                digitalWrite(OUT3, HIGH);  //turn on charger
    6f48:	4629      	mov	r1, r5
    6f4a:	2014      	movs	r0, #20
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6f4c:	4d12      	ldr	r5, [pc, #72]	; (6f98 <loop+0xa58>)
                Charged = 0;
    6f4e:	f8ca 9000 	str.w	r9, [sl]
                digitalWrite(OUT3, HIGH);  //turn on charger
    6f52:	f002 fba1 	bl	9698 <digitalWrite>
                if (Pretimer + settings.Pretime < millis()) {
    6f56:	4a11      	ldr	r2, [pc, #68]	; (6f9c <loop+0xa5c>)
    6f58:	682b      	ldr	r3, [r5, #0]
    6f5a:	6811      	ldr	r1, [r2, #0]
    6f5c:	9302      	str	r3, [sp, #8]
    6f5e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    6f62:	440b      	add	r3, r1
	return ret;
    6f64:	9902      	ldr	r1, [sp, #8]
    6f66:	428b      	cmp	r3, r1
    6f68:	f4bf ac9f 	bcs.w	68aa <loop+0x36a>
    6f6c:	e6e0      	b.n	6d30 <loop+0x7f0>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6f6e:	4d0a      	ldr	r5, [pc, #40]	; (6f98 <loop+0xa58>)
              bmsstatus = Precharge;
    6f70:	2304      	movs	r3, #4
    6f72:	703b      	strb	r3, [r7, #0]
    6f74:	682b      	ldr	r3, [r5, #0]
    6f76:	9309      	str	r3, [sp, #36]	; 0x24
              Pretimer = millis();
    6f78:	4b08      	ldr	r3, [pc, #32]	; (6f9c <loop+0xa5c>)
	return ret;
    6f7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6f7c:	601a      	str	r2, [r3, #0]
    6f7e:	e612      	b.n	6ba6 <loop+0x666>
    6f80:	1fff8fe0 	.word	0x1fff8fe0
    6f84:	1fff8fb4 	.word	0x1fff8fb4
    6f88:	1fff8724 	.word	0x1fff8724
    6f8c:	1fff8fac 	.word	0x1fff8fac
    6f90:	1fffb0e8 	.word	0x1fffb0e8
    6f94:	1fff8fbc 	.word	0x1fff8fbc
    6f98:	1fffb4e0 	.word	0x1fffb4e0
    6f9c:	1fff8fb8 	.word	0x1fff8fb8
    6fa0:	1fff8fa8 	.word	0x1fff8fa8

00006fa4 <CANListener::frameHandler(CAN_message_t&, int, unsigned char)>:
{

    /* default implementation that doesn't handle frames */

    return (false);
}
    6fa4:	2000      	movs	r0, #0
    6fa6:	4770      	bx	lr

00006fa8 <CANListener::txHandler(int, unsigned char)>:
 */

void CANListener::txHandler (int /*mailbox*/, uint8_t /*controller*/)
{

}
    6fa8:	4770      	bx	lr
    6faa:	bf00      	nop

00006fac <FlexCAN::FlexCAN(unsigned char)>:
FlexCAN::FlexCAN (uint8_t id)
    6fac:	b538      	push	{r3, r4, r5, lr}
    defaultMask.id = 0;
    6fae:	4b1b      	ldr	r3, [pc, #108]	; (701c <FlexCAN::FlexCAN(unsigned char)+0x70>)
    flexcanBase = FLEXCAN0_BASE;
    6fb0:	491b      	ldr	r1, [pc, #108]	; (7020 <FlexCAN::FlexCAN(unsigned char)+0x74>)
    defaultMask.flags.extended = 0;
    6fb2:	791a      	ldrb	r2, [r3, #4]
FlexCAN::FlexCAN (uint8_t id)
    6fb4:	4604      	mov	r4, r0
    defaultMask.id = 0;
    6fb6:	2500      	movs	r5, #0
    flexcanBase = FLEXCAN0_BASE;
    6fb8:	6021      	str	r1, [r4, #0]
    defaultMask.flags.extended = 0;
    6fba:	f022 0203 	bic.w	r2, r2, #3
    IrqMessage=IRQ_CAN_MESSAGE;
    6fbe:	211d      	movs	r1, #29
    6fc0:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
    defaultMask.id = 0;
    6fc4:	601d      	str	r5, [r3, #0]
    defaultMask.flags.extended = 0;
    6fc6:	711a      	strb	r2, [r3, #4]
    numTxMailboxes=2;
    6fc8:	2002      	movs	r0, #2
    sizeTxBuffer=SIZE_TX_BUFFER;
    6fca:	2310      	movs	r3, #16
    sizeRxBuffer=SIZE_RX_BUFFER;
    6fcc:	2120      	movs	r1, #32
    sizeTxBuffer=SIZE_TX_BUFFER;
    6fce:	f8a4 3198 	strh.w	r3, [r4, #408]	; 0x198
    numTxMailboxes=2;
    6fd2:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
    sizeRxBuffer=SIZE_RX_BUFFER;
    6fd6:	f8a4 1196 	strh.w	r1, [r4, #406]	; 0x196
    tx_buffer=0;
    6fda:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
      txRings[i]=0;
    6fde:	4629      	mov	r1, r5
    rx_buffer=0;
    6fe0:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
      txRings[i]=0;
    6fe4:	2240      	movs	r2, #64	; 0x40
    6fe6:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    6fea:	f006 f929 	bl	d240 <memset>
        listener[i] = NULL;
    6fee:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    6ff2:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    6ff6:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
    6ffa:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
    memset (&stats, 0, sizeof(stats));
    6ffe:	2298      	movs	r2, #152	; 0x98
    7000:	4629      	mov	r1, r5
    7002:	f104 00fc 	add.w	r0, r4, #252	; 0xfc
    7006:	f006 f91b 	bl	d240 <memset>
    stats.ringRxMax = SIZE_RX_BUFFER - 1;
    700a:	221f      	movs	r2, #31
    stats.ringTxMax = SIZE_TX_BUFFER - 1;
    700c:	230f      	movs	r3, #15
    stats.ringRxMax = SIZE_RX_BUFFER - 1;
    700e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    stats.ringTxMax = SIZE_TX_BUFFER - 1;
    7012:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
}
    7016:	4620      	mov	r0, r4
    7018:	bd38      	pop	{r3, r4, r5, pc}
    701a:	bf00      	nop
    701c:	1fffb488 	.word	0x1fffb488
    7020:	40024000 	.word	0x40024000

00007024 <FlexCAN::setBaudRate(unsigned long)>:
void FlexCAN::setBaudRate(uint32_t baud) {
    7024:	b570      	push	{r4, r5, r6, lr}
    uint32_t result = 16000000 / baud / (divisor + 1);
    7026:	4e2d      	ldr	r6, [pc, #180]	; (70dc <FlexCAN::setBaudRate(unsigned long)+0xb8>)
    7028:	fbb6 fcf1 	udiv	ip, r6, r1
    while (result > 5) {
    702c:	f1bc 0f05 	cmp.w	ip, #5
    int error = baud - (16000000 / (result * (divisor + 1)));
    7030:	fbb6 f4fc 	udiv	r4, r6, ip
    uint32_t bestDivisor = 0;
    7034:	f04f 0500 	mov.w	r5, #0
    int error = baud - (16000000 / (result * (divisor + 1)));
    7038:	eba1 0404 	sub.w	r4, r1, r4
    while (result > 5) {
    703c:	d921      	bls.n	7082 <FlexCAN::setBaudRate(unsigned long)+0x5e>
    uint32_t divisor = 0;
    703e:	462b      	mov	r3, r5
        divisor++;
    7040:	f103 0e01 	add.w	lr, r3, #1
        result = 16000000 / baud / (divisor + 1);
    7044:	3302      	adds	r3, #2
    7046:	fbbc f2f3 	udiv	r2, ip, r3
        if (result <= 25) {
    704a:	2a19      	cmp	r2, #25
            error = baud - (16000000 / (result * (divisor + 1)));
    704c:	fb02 f303 	mul.w	r3, r2, r3
        if (result <= 25) {
    7050:	d80f      	bhi.n	7072 <FlexCAN::setBaudRate(unsigned long)+0x4e>
            error = baud - (16000000 / (result * (divisor + 1)));
    7052:	fbb6 f3f3 	udiv	r3, r6, r3
    7056:	1acb      	subs	r3, r1, r3
            if (error < 0)
    7058:	2b00      	cmp	r3, #0
    705a:	bfb8      	it	lt
    705c:	425b      	neglt	r3, r3
            if (error < bestError) {
    705e:	42a3      	cmp	r3, r4
    7060:	da09      	bge.n	7076 <FlexCAN::setBaudRate(unsigned long)+0x52>
    7062:	461c      	mov	r4, r3
                bestDivisor = divisor;
    7064:	4675      	mov	r5, lr
            if ((error == bestError) && (result > 11) && (result < 19)) {
    7066:	2a0b      	cmp	r2, #11
    7068:	d906      	bls.n	7078 <FlexCAN::setBaudRate(unsigned long)+0x54>
    706a:	2a12      	cmp	r2, #18
    706c:	bf9c      	itt	ls
    706e:	461c      	movls	r4, r3
    7070:	4675      	movls	r5, lr
void FlexCAN::setBaudRate(uint32_t baud) {
    7072:	4673      	mov	r3, lr
    7074:	e7e4      	b.n	7040 <FlexCAN::setBaudRate(unsigned long)+0x1c>
            if ((error == bestError) && (result > 11) && (result < 19)) {
    7076:	d0f6      	beq.n	7066 <FlexCAN::setBaudRate(unsigned long)+0x42>
    while (result > 5) {
    7078:	2a05      	cmp	r2, #5
    707a:	d8fa      	bhi.n	7072 <FlexCAN::setBaudRate(unsigned long)+0x4e>
    result = 16000000 / baud / (divisor + 1);
    707c:	1c6b      	adds	r3, r5, #1
    707e:	fbbc fcf3 	udiv	ip, ip, r3
    if ((result < 5) || (result > 25) || (bestError > 300)) {
    7082:	f1ac 0c05 	sub.w	ip, ip, #5
    7086:	f1bc 0f14 	cmp.w	ip, #20
    708a:	d81e      	bhi.n	70ca <FlexCAN::setBaudRate(unsigned long)+0xa6>
    708c:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
    7090:	dc1b      	bgt.n	70ca <FlexCAN::setBaudRate(unsigned long)+0xa6>
    uint8_t pSeg1   = bitTimingTable[result][1];
    7092:	4b13      	ldr	r3, [pc, #76]	; (70e0 <FlexCAN::setBaudRate(unsigned long)+0xbc>)
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    7094:	6800      	ldr	r0, [r0, #0]
    uint8_t pSeg1   = bitTimingTable[result][1];
    7096:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    709a:	eb03 020c 	add.w	r2, r3, ip
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    709e:	f813 100c 	ldrb.w	r1, [r3, ip]
                                    FLEXCAN_CTRL_PSEG1(pSeg1) | FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_PRESDIV(divisor));
    70a2:	7853      	ldrb	r3, [r2, #1]
    70a4:	7892      	ldrb	r2, [r2, #2]
    70a6:	04db      	lsls	r3, r3, #19
    70a8:	0412      	lsls	r2, r2, #16
    70aa:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
    70ae:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    70b2:	f001 0107 	and.w	r1, r1, #7
                                    FLEXCAN_CTRL_PSEG1(pSeg1) | FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_PRESDIV(divisor));
    70b6:	4313      	orrs	r3, r2
    70b8:	430b      	orrs	r3, r1
    70ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    70be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    70c2:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    70c6:	6043      	str	r3, [r0, #4]
}
    70c8:	bd70      	pop	{r4, r5, r6, pc}
    70ca:	4806      	ldr	r0, [pc, #24]	; (70e4 <FlexCAN::setBaudRate(unsigned long)+0xc0>)
    70cc:	2139      	movs	r1, #57	; 0x39
    70ce:	f004 f955 	bl	b37c <usb_serial_write>
    70d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    70d6:	4804      	ldr	r0, [pc, #16]	; (70e8 <FlexCAN::setBaudRate(unsigned long)+0xc4>)
    70d8:	f001 bca6 	b.w	8a28 <Print::println()>
    70dc:	00f42400 	.word	0x00f42400
    70e0:	1fff876c 	.word	0x1fff876c
    70e4:	00014298 	.word	0x00014298
    70e8:	1fff880c 	.word	0x1fff880c

000070ec <FlexCAN::setNumTxBoxes(unsigned char)>:
{
    70ec:	b530      	push	{r4, r5, lr}
    70ee:	2901      	cmp	r1, #1
    70f0:	4604      	mov	r4, r0
    70f2:	bf38      	it	cc
    70f4:	2101      	movcc	r1, #1
    70f6:	290f      	cmp	r1, #15
    if ( !isInitialized() ) return numTxMailboxes;  // Just set the numTxMailboxes. Begin() will do final initialization.
    70f8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    70fc:	4608      	mov	r0, r1
    70fe:	bf28      	it	cs
    7100:	200f      	movcs	r0, #15
    numTxMailboxes = txboxes;
    7102:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
    if ( !isInitialized() ) return numTxMailboxes;  // Just set the numTxMailboxes. Begin() will do final initialization.
    7106:	b31b      	cbz	r3, 7150 <FlexCAN::setNumTxBoxes(unsigned char)+0x64>
    void setMailBoxTxBufferSize(uint8_t mbox, uint16_t size);

    inline uint8_t getFirstTxBox() { return getNumMailBoxes()-numTxMailboxes; }
    inline uint8_t getLastTxBox() { return getNumMailBoxes()-1; }
    inline uint8_t getNumMailBoxes() { return NUM_MAILBOXES; }
    inline uint8_t getNumRxBoxes() { return getNumMailBoxes()-numTxMailboxes; }
    7108:	f1c0 0e10 	rsb	lr, r0, #16
    710c:	fa5f f58e 	uxtb.w	r5, lr
    7110:	46ae      	mov	lr, r5
    7112:	2200      	movs	r2, #0
    7114:	012d      	lsls	r5, r5, #4
        oldIde = FLEXCANb_MBn_CS(flexcanBase, c) & FLEXCAN_MB_CS_IDE;
    7116:	6823      	ldr	r3, [r4, #0]
    7118:	f103 0c80 	add.w	ip, r3, #128	; 0x80
    711c:	f85c 3002 	ldr.w	r3, [ip, r2]
    7120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | oldIde;
    7124:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    7128:	f84c 3002 	str.w	r3, [ip, r2]
    for (c = 0; c < getNumRxBoxes(); c++) {
    712c:	3210      	adds	r2, #16
    712e:	4295      	cmp	r5, r2
    7130:	d1f1      	bne.n	7116 <FlexCAN::setNumTxBoxes(unsigned char)+0x2a>
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    7132:	2510      	movs	r5, #16
    7134:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    7138:	6823      	ldr	r3, [r4, #0]
    for (c = getFirstTxBox(); c < getNumMailBoxes(); c++) {
    713a:	f10e 0201 	add.w	r2, lr, #1
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    713e:	3380      	adds	r3, #128	; 0x80
    7140:	fb15 330e 	smlabb	r3, r5, lr, r3
    for (c = getFirstTxBox(); c < getNumMailBoxes(); c++) {
    7144:	fa5f fe82 	uxtb.w	lr, r2
    7148:	f1be 0f10 	cmp.w	lr, #16
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    714c:	6019      	str	r1, [r3, #0]
    for (c = getFirstTxBox(); c < getNumMailBoxes(); c++) {
    714e:	d1f3      	bne.n	7138 <FlexCAN::setNumTxBoxes(unsigned char)+0x4c>
}
    7150:	bd30      	pop	{r4, r5, pc}
    7152:	bf00      	nop

00007154 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>:
    7154:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    7158:	f1c3 0310 	rsb	r3, r3, #16
    if ( mbox < getNumRxBoxes() ) {
    715c:	b2db      	uxtb	r3, r3
    715e:	429a      	cmp	r2, r3
    7160:	d222      	bcs.n	71a8 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)+0x54>
{
    7162:	b510      	push	{r4, lr}
    7164:	468c      	mov	ip, r1
    7166:	4686      	mov	lr, r0
        MBFilters[mbox] = filter;
    7168:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
    716c:	e9d1 0100 	ldrd	r0, r1, [r1]
    7170:	3304      	adds	r3, #4
    7172:	e883 0003 	stmia.w	r3, {r0, r1}
        if (filter.flags.extended) {
    7176:	f89c 3004 	ldrb.w	r3, [ip, #4]
            FLEXCANb_MBn_ID(flexcanBase, mbox) = (filter.id & FLEXCAN_MB_ID_EXT_MASK);
    717a:	f8de 1000 	ldr.w	r1, [lr]
        if (filter.flags.extended) {
    717e:	07db      	lsls	r3, r3, #31
    7180:	d513      	bpl.n	71aa <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)+0x56>
            FLEXCANb_MBn_ID(flexcanBase, mbox) = (filter.id & FLEXCAN_MB_ID_EXT_MASK);
    7182:	f8dc 0000 	ldr.w	r0, [ip]
    7186:	2310      	movs	r3, #16
    7188:	3184      	adds	r1, #132	; 0x84
    718a:	fb13 1102 	smlabb	r1, r3, r2, r1
    718e:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
    7192:	6008      	str	r0, [r1, #0]
            FLEXCANb_MBn_CS(flexcanBase, mbox) |= FLEXCAN_MB_CS_IDE;
    7194:	f8de 1000 	ldr.w	r1, [lr]
    7198:	3180      	adds	r1, #128	; 0x80
    719a:	fb13 1302 	smlabb	r3, r3, r2, r1
    719e:	681a      	ldr	r2, [r3, #0]
    71a0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
    71a4:	601a      	str	r2, [r3, #0]
}
    71a6:	bd10      	pop	{r4, pc}
    71a8:	4770      	bx	lr
            FLEXCANb_MBn_ID(flexcanBase, mbox) = FLEXCAN_MB_ID_IDSTD(filter.id);
    71aa:	f8dc 4000 	ldr.w	r4, [ip]
    71ae:	4809      	ldr	r0, [pc, #36]	; (71d4 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)+0x80>)
    71b0:	2310      	movs	r3, #16
    71b2:	3184      	adds	r1, #132	; 0x84
    71b4:	fb13 1102 	smlabb	r1, r3, r2, r1
    71b8:	ea00 4084 	and.w	r0, r0, r4, lsl #18
    71bc:	6008      	str	r0, [r1, #0]
            FLEXCANb_MBn_CS(flexcanBase, mbox) &= ~FLEXCAN_MB_CS_IDE;
    71be:	f8de 1000 	ldr.w	r1, [lr]
    71c2:	3180      	adds	r1, #128	; 0x80
    71c4:	fb13 1302 	smlabb	r3, r3, r2, r1
    71c8:	681a      	ldr	r2, [r3, #0]
    71ca:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    71ce:	601a      	str	r2, [r3, #0]
}
    71d0:	bd10      	pop	{r4, pc}
    71d2:	bf00      	nop
    71d4:	1ffc0000 	.word	0x1ffc0000

000071d8 <FlexCAN::getFilter(CAN_filter_t&, unsigned char)>:
    71d8:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    71dc:	f1c3 0310 	rsb	r3, r3, #16
    if ( mbox < getNumRxBoxes() ) {
    71e0:	b2db      	uxtb	r3, r3
    71e2:	429a      	cmp	r2, r3
    71e4:	d301      	bcc.n	71ea <FlexCAN::getFilter(CAN_filter_t&, unsigned char)+0x12>
    return (false);
    71e6:	2000      	movs	r0, #0
}
    71e8:	4770      	bx	lr
        filter.id = MBFilters[mbox].id;
    71ea:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
        filter.flags.extended = MBFilters[mbox].flags.extended;
    71ee:	790b      	ldrb	r3, [r1, #4]
        filter.id = MBFilters[mbox].id;
    71f0:	6850      	ldr	r0, [r2, #4]
    71f2:	6008      	str	r0, [r1, #0]
        filter.flags.extended = MBFilters[mbox].flags.extended;
    71f4:	f892 c008 	ldrb.w	ip, [r2, #8]
    71f8:	f36c 0300 	bfi	r3, ip, #0, #1
    71fc:	710b      	strb	r3, [r1, #4]
        filter.flags.remote = MBFilters[mbox].flags.remote;
    71fe:	7a13      	ldrb	r3, [r2, #8]
    7200:	f891 c004 	ldrb.w	ip, [r1, #4]
    7204:	f3c3 0340 	ubfx	r3, r3, #1, #1
    7208:	f363 0c41 	bfi	ip, r3, #1, #1
    720c:	f881 c004 	strb.w	ip, [r1, #4]
        filter.flags.reserved = MBFilters[mbox].flags.reserved;
    7210:	7a13      	ldrb	r3, [r2, #8]
    7212:	fa5f f28c 	uxtb.w	r2, ip
    7216:	089b      	lsrs	r3, r3, #2
    7218:	f363 0287 	bfi	r2, r3, #2, #6
        return (true);
    721c:	2001      	movs	r0, #1
        filter.flags.reserved = MBFilters[mbox].flags.reserved;
    721e:	710a      	strb	r2, [r1, #4]
        return (true);
    7220:	4770      	bx	lr
    7222:	bf00      	nop

00007224 <FlexCAN::setMask(unsigned long, unsigned char)>:
    7224:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    7228:	f1c3 0310 	rsb	r3, r3, #16
    if ( mbox < getNumRxBoxes() ) {
    722c:	b2db      	uxtb	r3, r3
    722e:	429a      	cmp	r2, r3
    7230:	d221      	bcs.n	7276 <FlexCAN::setMask(unsigned long, unsigned char)+0x52>
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    7232:	6803      	ldr	r3, [r0, #0]
{
    7234:	b410      	push	{r4}
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    7236:	681c      	ldr	r4, [r3, #0]
      if (!wasFrozen) {
    7238:	01e4      	lsls	r4, r4, #7
    723a:	d41d      	bmi.n	7278 <FlexCAN::setMask(unsigned long, unsigned char)+0x54>
  FLEXCANb_MCR(flexcanBase) |= FLEXCAN_MCR_FRZ;
    723c:	681c      	ldr	r4, [r3, #0]
    723e:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    7242:	601c      	str	r4, [r3, #0]
    FLEXCANb_MCR(flexcanBase) |= (FLEXCAN_MCR_HALT);
    7244:	6804      	ldr	r4, [r0, #0]
    7246:	6823      	ldr	r3, [r4, #0]
    7248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    724c:	6023      	str	r3, [r4, #0]
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    724e:	6804      	ldr	r4, [r0, #0]
    7250:	6823      	ldr	r3, [r4, #0]
  while (!isFrozen());
    7252:	01db      	lsls	r3, r3, #7
    7254:	d5fc      	bpl.n	7250 <FlexCAN::setMask(unsigned long, unsigned char)+0x2c>
      FLEXCANb_MB_MASK(flexcanBase, mbox) = mask;
    7256:	f504 6408 	add.w	r4, r4, #2176	; 0x880
    725a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    725e:	6021      	str	r1, [r4, #0]
    FLEXCANb_MCR(flexcanBase) &= ~(FLEXCAN_MCR_HALT);
    7260:	6802      	ldr	r2, [r0, #0]
    7262:	6813      	ldr	r3, [r2, #0]
    7264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    7268:	6013      	str	r3, [r2, #0]
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    726a:	6802      	ldr	r2, [r0, #0]
    726c:	6813      	ldr	r3, [r2, #0]
  while (isFrozen());
    726e:	01db      	lsls	r3, r3, #7
    7270:	d4fc      	bmi.n	726c <FlexCAN::setMask(unsigned long, unsigned char)+0x48>
}
    7272:	bc10      	pop	{r4}
    7274:	4770      	bx	lr
    7276:	4770      	bx	lr
      FLEXCANb_MB_MASK(flexcanBase, mbox) = mask;
    7278:	f503 6308 	add.w	r3, r3, #2176	; 0x880
    727c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
}
    7280:	bc10      	pop	{r4}
      FLEXCANb_MB_MASK(flexcanBase, mbox) = mask;
    7282:	6019      	str	r1, [r3, #0]
}
    7284:	4770      	bx	lr
    7286:	bf00      	nop

00007288 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)>:
{
    7288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    728c:	4617      	mov	r7, r2
    if ( isInitialized() ) return;
    728e:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
{
    7292:	f89d 8018 	ldrb.w	r8, [sp, #24]
    7296:	4606      	mov	r6, r0
    7298:	460d      	mov	r5, r1
    729a:	461c      	mov	r4, r3
    if ( isInitialized() ) return;
    729c:	2a00      	cmp	r2, #0
    729e:	f000 808f 	beq.w	73c0 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x138>
    if (flexcanBase == FLEXCAN0_BASE) {
    72a2:	4a63      	ldr	r2, [pc, #396]	; (7430 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1a8>)
    72a4:	6831      	ldr	r1, [r6, #0]
    72a6:	4291      	cmp	r1, r2
    72a8:	d07c      	beq.n	73a4 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x11c>
    OSC0_CR |= OSC_ERCLKEN;
    72aa:	4a62      	ldr	r2, [pc, #392]	; (7434 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1ac>)
    72ac:	7813      	ldrb	r3, [r2, #0]
    72ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    72b2:	7013      	strb	r3, [r2, #0]
    if (flexcanBase == FLEXCAN0_BASE) {
    72b4:	6833      	ldr	r3, [r6, #0]
    72b6:	f5a2 2282 	sub.w	r2, r2, #266240	; 0x41000
    72ba:	4293      	cmp	r3, r2
    72bc:	d106      	bne.n	72cc <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x44>
        SIM_SCGC6 |=  SIM_SCGC6_FLEXCAN0;
    72be:	f502 3210 	add.w	r2, r2, #147456	; 0x24000
    72c2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    72c4:	f043 0310 	orr.w	r3, r3, #16
    72c8:	63d3      	str	r3, [r2, #60]	; 0x3c
    FLEXCANb_CTRL1(flexcanBase) &= ~FLEXCAN_CTRL_CLK_SRC;
    72ca:	6833      	ldr	r3, [r6, #0]
    72cc:	685a      	ldr	r2, [r3, #4]
    72ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    72d2:	605a      	str	r2, [r3, #4]
    FLEXCANb_MCR (flexcanBase) |=  FLEXCAN_MCR_FRZ;
    72d4:	6832      	ldr	r2, [r6, #0]
    72d6:	6813      	ldr	r3, [r2, #0]
    72d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    72dc:	6013      	str	r3, [r2, #0]
    FLEXCANb_MCR (flexcanBase) &= ~FLEXCAN_MCR_MDIS;
    72de:	6832      	ldr	r2, [r6, #0]
    72e0:	6813      	ldr	r3, [r2, #0]
    72e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    72e6:	6013      	str	r3, [r2, #0]
    while (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_LPM_ACK)
    72e8:	6832      	ldr	r2, [r6, #0]
    72ea:	6813      	ldr	r3, [r2, #0]
    72ec:	02d9      	lsls	r1, r3, #11
    72ee:	d4fc      	bmi.n	72ea <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x62>
  FLEXCANb_MCR (flexcanBase) ^=  FLEXCAN_MCR_SOFT_RST;
    72f0:	6813      	ldr	r3, [r2, #0]
    72f2:	f083 7300 	eor.w	r3, r3, #33554432	; 0x2000000
    72f6:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR (flexcanBase) & FLEXCAN_MCR_SOFT_RST)
    72f8:	6833      	ldr	r3, [r6, #0]
    72fa:	681c      	ldr	r4, [r3, #0]
    72fc:	f014 7400 	ands.w	r4, r4, #33554432	; 0x2000000
    7300:	d1fb      	bne.n	72fa <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x72>
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    7302:	681a      	ldr	r2, [r3, #0]
  while (!isFrozen());
    7304:	01d2      	lsls	r2, r2, #7
    7306:	d5fc      	bpl.n	7302 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x7a>
    FLEXCANb_MCR (flexcanBase) |= FLEXCAN_MCR_SRX_DIS;
    7308:	681a      	ldr	r2, [r3, #0]
    730a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    730e:	601a      	str	r2, [r3, #0]
    setBaudRate(baud);
    7310:	4629      	mov	r1, r5
    7312:	4630      	mov	r0, r6
    7314:	f7ff fe86 	bl	7024 <FlexCAN::setBaudRate(unsigned long)>
    FLEXCANb_MCR(flexcanBase) |= FLEXCAN_MCR_IRMQ;
    7318:	6832      	ldr	r2, [r6, #0]
    731a:	6813      	ldr	r3, [r2, #0]
    731c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    7320:	6013      	str	r3, [r2, #0]
    7322:	f896 1194 	ldrb.w	r1, [r6, #404]	; 0x194
    for (uint8_t c = 0; c < getNumRxBoxes(); c++) {
    7326:	2910      	cmp	r1, #16
    7328:	d012      	beq.n	7350 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xc8>
    732a:	2500      	movs	r5, #0
        setMask (0, c);
    732c:	462a      	mov	r2, r5
    732e:	4630      	mov	r0, r6
    7330:	2100      	movs	r1, #0
    7332:	f7ff ff77 	bl	7224 <FlexCAN::setMask(unsigned long, unsigned char)>
        setFilter (mask, c);
    7336:	462a      	mov	r2, r5
    7338:	4639      	mov	r1, r7
    733a:	f7ff ff0b 	bl	7154 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>
    733e:	f896 1194 	ldrb.w	r1, [r6, #404]	; 0x194
    for (uint8_t c = 0; c < getNumRxBoxes(); c++) {
    7342:	3401      	adds	r4, #1
    7344:	f1c1 0310 	rsb	r3, r1, #16
    7348:	b2e5      	uxtb	r5, r4
    734a:	b2db      	uxtb	r3, r3
    734c:	429d      	cmp	r5, r3
    734e:	d3ed      	bcc.n	732c <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xa4>
    FLEXCANb_MCR(flexcanBase) &= ~(FLEXCAN_MCR_HALT);
    7350:	6832      	ldr	r2, [r6, #0]
    7352:	6813      	ldr	r3, [r2, #0]
    7354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    7358:	6013      	str	r3, [r2, #0]
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    735a:	6833      	ldr	r3, [r6, #0]
    735c:	681a      	ldr	r2, [r3, #0]
  while (isFrozen());
    735e:	01d0      	lsls	r0, r2, #7
    7360:	d4fc      	bmi.n	735c <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xd4>
  while (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_NOT_RDY);
    7362:	681a      	ldr	r2, [r3, #0]
    7364:	0112      	lsls	r2, r2, #4
    7366:	d4fc      	bmi.n	7362 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xda>
    setNumTxBoxes (numTxMailboxes);
    7368:	4630      	mov	r0, r6
    736a:	f7ff febf 	bl	70ec <FlexCAN::setNumTxBoxes(unsigned char)>
    NVIC_SET_PRIORITY (IrqMessage, IRQ_PRIORITY);
    736e:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
    7372:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    7376:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
    737a:	2240      	movs	r2, #64	; 0x40
    737c:	701a      	strb	r2, [r3, #0]
    NVIC_ENABLE_IRQ (IrqMessage);
    737e:	f8d6 20f8 	ldr.w	r2, [r6, #248]	; 0xf8
    7382:	0953      	lsrs	r3, r2, #5
    7384:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    7388:	3340      	adds	r3, #64	; 0x40
    738a:	009b      	lsls	r3, r3, #2
    738c:	2101      	movs	r1, #1
    738e:	f002 021f 	and.w	r2, r2, #31
    7392:	fa01 f202 	lsl.w	r2, r1, r2
    7396:	601a      	str	r2, [r3, #0]
    FLEXCANb_IMASK1 (flexcanBase) = 0xFFFF;
    7398:	6833      	ldr	r3, [r6, #0]
    739a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    739e:	6298      	str	r0, [r3, #40]	; 0x28
}
    73a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (txAlt == 1)
    73a4:	2c01      	cmp	r4, #1
    73a6:	d02b      	beq.n	7400 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x178>
            CORE_PIN3_CONFIG = PORT_PCR_MUX(2);
    73a8:	4b23      	ldr	r3, [pc, #140]	; (7438 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b0>)
    73aa:	f44f 7200 	mov.w	r2, #512	; 0x200
        if (rxAlt == 1)
    73ae:	f1b8 0f01 	cmp.w	r8, #1
            CORE_PIN3_CONFIG = PORT_PCR_MUX(2);
    73b2:	631a      	str	r2, [r3, #48]	; 0x30
        if (rxAlt == 1)
    73b4:	d02b      	beq.n	740e <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x186>
            CORE_PIN4_CONFIG = PORT_PCR_MUX(2);
    73b6:	4b20      	ldr	r3, [pc, #128]	; (7438 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b0>)
    73b8:	f44f 7200 	mov.w	r2, #512	; 0x200
    73bc:	635a      	str	r2, [r3, #52]	; 0x34
    73be:	e774      	b.n	72aa <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x22>
    if (tx_buffer==0) tx_buffer=new CAN_message_t[sizeTxBuffer];
    73c0:	f8b0 0198 	ldrh.w	r0, [r0, #408]	; 0x198
    73c4:	0100      	lsls	r0, r0, #4
    73c6:	f001 ff3b 	bl	9240 <operator new[](unsigned int)>
    if (rx_buffer==0) rx_buffer=new CAN_message_t[sizeRxBuffer];
    73ca:	f8d6 30b0 	ldr.w	r3, [r6, #176]	; 0xb0
    if (tx_buffer==0) tx_buffer=new CAN_message_t[sizeTxBuffer];
    73ce:	f8c6 00a0 	str.w	r0, [r6, #160]	; 0xa0
    if (rx_buffer==0) rx_buffer=new CAN_message_t[sizeRxBuffer];
    73d2:	b30b      	cbz	r3, 7418 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x190>
    ring.buffer = buffer;
    73d4:	f8c6 30ac 	str.w	r3, [r6, #172]	; 0xac
    ring.head = 0;
    73d8:	2300      	movs	r3, #0
    73da:	f8a6 3094 	strh.w	r3, [r6, #148]	; 0x94
    ring.tail = 0;
    73de:	f8a6 3096 	strh.w	r3, [r6, #150]	; 0x96
    ring.head = 0;
    73e2:	f8a6 30a4 	strh.w	r3, [r6, #164]	; 0xa4
    ring.tail = 0;
    73e6:	f8a6 30a6 	strh.w	r3, [r6, #166]	; 0xa6
    initRingBuffer (txRing, tx_buffer, sizeTxBuffer);
    73ea:	f8b6 3198 	ldrh.w	r3, [r6, #408]	; 0x198
    ring.size = size;
    73ee:	f8a6 3098 	strh.w	r3, [r6, #152]	; 0x98
    initRingBuffer (rxRing, rx_buffer, sizeRxBuffer);
    73f2:	f8b6 3196 	ldrh.w	r3, [r6, #406]	; 0x196
    ring.buffer = buffer;
    73f6:	f8c6 009c 	str.w	r0, [r6, #156]	; 0x9c
    ring.size = size;
    73fa:	f8a6 30a8 	strh.w	r3, [r6, #168]	; 0xa8
    ring.tail = 0;
    73fe:	e750      	b.n	72a2 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1a>
            CORE_PIN32_CONFIG = PORT_PCR_MUX(2);
    7400:	4b0e      	ldr	r3, [pc, #56]	; (743c <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b4>)
    7402:	f44f 7200 	mov.w	r2, #512	; 0x200
        if (rxAlt == 1)
    7406:	f1b8 0f01 	cmp.w	r8, #1
            CORE_PIN32_CONFIG = PORT_PCR_MUX(2);
    740a:	649a      	str	r2, [r3, #72]	; 0x48
        if (rxAlt == 1)
    740c:	d1d3      	bne.n	73b6 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x12e>
            CORE_PIN25_CONFIG = PORT_PCR_MUX(2);
    740e:	4b0b      	ldr	r3, [pc, #44]	; (743c <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b4>)
    7410:	f44f 7200 	mov.w	r2, #512	; 0x200
    7414:	64da      	str	r2, [r3, #76]	; 0x4c
    7416:	e748      	b.n	72aa <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x22>
    if (rx_buffer==0) rx_buffer=new CAN_message_t[sizeRxBuffer];
    7418:	f8b6 0196 	ldrh.w	r0, [r6, #406]	; 0x196
    741c:	0100      	lsls	r0, r0, #4
    741e:	f001 ff0f 	bl	9240 <operator new[](unsigned int)>
    7422:	4603      	mov	r3, r0
    7424:	f8c6 00b0 	str.w	r0, [r6, #176]	; 0xb0
    initRingBuffer (txRing, tx_buffer, sizeTxBuffer);
    7428:	f8d6 00a0 	ldr.w	r0, [r6, #160]	; 0xa0
    742c:	e7d2      	b.n	73d4 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x14c>
    742e:	bf00      	nop
    7430:	40024000 	.word	0x40024000
    7434:	40065000 	.word	0x40065000
    7438:	40049000 	.word	0x40049000
    743c:	4004a000 	.word	0x4004a000

00007440 <FlexCAN::available()>:
{
    7440:	b410      	push	{r4}
    void irqLock() { IrqEnabled=NVIC_IS_ENABLED(IrqMessage); NVIC_DISABLE_IRQ(IrqMessage); }
    7442:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
    7446:	0963      	lsrs	r3, r4, #5
    7448:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    744c:	3340      	adds	r3, #64	; 0x40
    744e:	009b      	lsls	r3, r3, #2
    7450:	4602      	mov	r2, r0
    7452:	f004 041f 	and.w	r4, r4, #31
    7456:	6818      	ldr	r0, [r3, #0]
    7458:	2101      	movs	r1, #1
    745a:	40a1      	lsls	r1, r4
    745c:	ea10 0401 	ands.w	r4, r0, r1
    7460:	bf14      	ite	ne
    7462:	2001      	movne	r0, #1
    7464:	2000      	moveq	r0, #0
    7466:	f882 00f4 	strb.w	r0, [r2, #244]	; 0xf4
    746a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    entries = ring.head - ring.tail;
    746e:	f8b2 00a4 	ldrh.w	r0, [r2, #164]	; 0xa4
    7472:	f8b2 30a6 	ldrh.w	r3, [r2, #166]	; 0xa6
    7476:	b280      	uxth	r0, r0
    7478:	b29b      	uxth	r3, r3
    if (entries < 0) {
    747a:	1ac0      	subs	r0, r0, r3
        entries += ring.size;
    747c:	bf44      	itt	mi
    747e:	f8b2 30a8 	ldrhmi.w	r3, [r2, #168]	; 0xa8
    7482:	18c0      	addmi	r0, r0, r3
    void irqRelease() { if (IrqEnabled) NVIC_ENABLE_IRQ(IrqMessage); }
    7484:	b164      	cbz	r4, 74a0 <FlexCAN::available()+0x60>
    7486:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
    748a:	0953      	lsrs	r3, r2, #5
    748c:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    7490:	3340      	adds	r3, #64	; 0x40
    7492:	2101      	movs	r1, #1
    7494:	009b      	lsls	r3, r3, #2
    7496:	f002 021f 	and.w	r2, r2, #31
    749a:	fa01 f202 	lsl.w	r2, r1, r2
    749e:	601a      	str	r2, [r3, #0]
}
    74a0:	bc10      	pop	{r4}
    74a2:	4770      	bx	lr

000074a4 <FlexCAN::read(CAN_message_t&)>:
    void irqLock() { IrqEnabled=NVIC_IS_ENABLED(IrqMessage); NVIC_DISABLE_IRQ(IrqMessage); }
    74a4:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
{
    74a8:	b538      	push	{r3, r4, r5, lr}
    74aa:	0953      	lsrs	r3, r2, #5
    74ac:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    74b0:	3340      	adds	r3, #64	; 0x40
    74b2:	009b      	lsls	r3, r3, #2
    74b4:	4604      	mov	r4, r0
    74b6:	2501      	movs	r5, #1
    74b8:	4608      	mov	r0, r1
    74ba:	f002 021f 	and.w	r2, r2, #31
    74be:	6819      	ldr	r1, [r3, #0]
    74c0:	fa05 f202 	lsl.w	r2, r5, r2
    74c4:	4211      	tst	r1, r2
    74c6:	bf14      	ite	ne
    74c8:	4629      	movne	r1, r5
    74ca:	2100      	moveq	r1, #0
    74cc:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
    74d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (ring.head == ring.tail) {
    74d4:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    74d8:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    74dc:	b292      	uxth	r2, r2
    74de:	b29b      	uxth	r3, r3
    74e0:	429a      	cmp	r2, r3
    74e2:	d028      	beq.n	7536 <FlexCAN::read(CAN_message_t&)+0x92>
    memcpy ((void *)&msg, (void *)&ring.buffer[ring.tail], sizeof (CAN_message_t));
    74e4:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    74e8:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
    74ec:	b29b      	uxth	r3, r3
    74ee:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    74f2:	2210      	movs	r2, #16
    74f4:	f001 fd54 	bl	8fa0 <memcpy>
    ring.tail = (ring.tail + 1) % ring.size;
    74f8:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    74fc:	f8b4 20a8 	ldrh.w	r2, [r4, #168]	; 0xa8
    7500:	b29b      	uxth	r3, r3
    7502:	442b      	add	r3, r5
    7504:	fbb3 f1f2 	udiv	r1, r3, r2
    7508:	fb02 3311 	mls	r3, r2, r1, r3
    750c:	b29b      	uxth	r3, r3
    void irqRelease() { if (IrqEnabled) NVIC_ENABLE_IRQ(IrqMessage); }
    750e:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
    7512:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
        result=1;
    7516:	4628      	mov	r0, r5
    7518:	b161      	cbz	r1, 7534 <FlexCAN::read(CAN_message_t&)+0x90>
    751a:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
    751e:	0953      	lsrs	r3, r2, #5
    7520:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    7524:	3340      	adds	r3, #64	; 0x40
    7526:	2101      	movs	r1, #1
    7528:	009b      	lsls	r3, r3, #2
    752a:	f002 021f 	and.w	r2, r2, #31
    752e:	fa01 f202 	lsl.w	r2, r1, r2
    7532:	601a      	str	r2, [r3, #0]
}
    7534:	bd38      	pop	{r3, r4, r5, pc}
    int result=0;
    7536:	2000      	movs	r0, #0
    7538:	e7ee      	b.n	7518 <FlexCAN::read(CAN_message_t&)+0x74>
    753a:	bf00      	nop

0000753c <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)>:
{
    753c:	b530      	push	{r4, r5, lr}
    if (msg.flags.extended) {
    753e:	798b      	ldrb	r3, [r1, #6]
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    7540:	6804      	ldr	r4, [r0, #0]
    7542:	f04f 0e10 	mov.w	lr, #16
    7546:	f104 0c84 	add.w	ip, r4, #132	; 0x84
    if (msg.flags.extended) {
    754a:	07dc      	lsls	r4, r3, #31
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    754c:	fb1e cc02 	smlabb	ip, lr, r2, ip
    if (msg.flags.extended) {
    7550:	d525      	bpl.n	759e <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0x62>
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    7552:	680c      	ldr	r4, [r1, #0]
    7554:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
    7558:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD0(flexcanBase, buffer) = (msg.buf[0]<<24)|(msg.buf[1]<<16)|(msg.buf[2]<<8)|msg.buf[3];
    755c:	6804      	ldr	r4, [r0, #0]
    755e:	f104 0c88 	add.w	ip, r4, #136	; 0x88
    7562:	688c      	ldr	r4, [r1, #8]
    7564:	fb1e cc02 	smlabb	ip, lr, r2, ip
    7568:	ba24      	rev	r4, r4
    756a:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    756e:	6804      	ldr	r4, [r0, #0]
    7570:	f104 0c8c 	add.w	ip, r4, #140	; 0x8c
    7574:	fb1e cc02 	smlabb	ip, lr, r2, ip
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    7578:	fb12 fe0e 	smulbb	lr, r2, lr
    757c:	68ca      	ldr	r2, [r1, #12]
    757e:	ba12      	rev	r2, r2
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    7580:	f8cc 2000 	str.w	r2, [ip]
        if (msg.flags.remote) {
    7584:	079a      	lsls	r2, r3, #30
    7586:	d53c      	bpl.n	7602 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0xc6>
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    7588:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    758a:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    758c:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    758e:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    7590:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                                                   FLEXCAN_MB_CS_IDE | FLEXCAN_MB_CS_RTR;
    7594:	f043 6347 	orr.w	r3, r3, #208666624	; 0xc700000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    7598:	f842 300e 	str.w	r3, [r2, lr]
}
    759c:	bd30      	pop	{r4, r5, pc}
        FLEXCANb_MBn_ID(flexcanBase, buffer) = FLEXCAN_MB_ID_IDSTD(msg.id);
    759e:	680d      	ldr	r5, [r1, #0]
    75a0:	4c1d      	ldr	r4, [pc, #116]	; (7618 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0xdc>)
    75a2:	ea04 4485 	and.w	r4, r4, r5, lsl #18
    75a6:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD0(flexcanBase, buffer) = (msg.buf[0]<<24)|(msg.buf[1]<<16)|(msg.buf[2]<<8)|msg.buf[3];
    75aa:	6804      	ldr	r4, [r0, #0]
    75ac:	f104 0c88 	add.w	ip, r4, #136	; 0x88
    75b0:	688c      	ldr	r4, [r1, #8]
    75b2:	fb1e cc02 	smlabb	ip, lr, r2, ip
    75b6:	ba24      	rev	r4, r4
    75b8:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    75bc:	6804      	ldr	r4, [r0, #0]
    75be:	f104 0c8c 	add.w	ip, r4, #140	; 0x8c
    75c2:	fb1e cc02 	smlabb	ip, lr, r2, ip
        FLEXCANb_MBn_ID(flexcanBase, buffer) = FLEXCAN_MB_ID_IDSTD(msg.id);
    75c6:	fb12 fe0e 	smulbb	lr, r2, lr
    75ca:	68ca      	ldr	r2, [r1, #12]
        if (msg.flags.remote) {
    75cc:	079b      	lsls	r3, r3, #30
    75ce:	ba12      	rev	r2, r2
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    75d0:	f8cc 2000 	str.w	r2, [ip]
        if (msg.flags.remote) {
    75d4:	d50a      	bpl.n	75ec <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0xb0>
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_RTR;
    75d6:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    75d8:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_RTR;
    75da:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    75dc:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_RTR;
    75de:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    75e2:	f043 6341 	orr.w	r3, r3, #202375168	; 0xc100000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    75e6:	f842 300e 	str.w	r3, [r2, lr]
}
    75ea:	bd30      	pop	{r4, r5, pc}
                                                   FLEXCAN_MB_CS_LENGTH(msg.len);
    75ec:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    75ee:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len);
    75f0:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    75f2:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len);
    75f4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    75f8:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
    75fc:	f842 300e 	str.w	r3, [r2, lr]
}
    7600:	bd30      	pop	{r4, r5, pc}
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    7602:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    7604:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    7606:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    7608:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    760a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    760e:	f043 6346 	orr.w	r3, r3, #207618048	; 0xc600000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    7612:	f842 300e 	str.w	r3, [r2, lr]
}
    7616:	bd30      	pop	{r4, r5, pc}
    7618:	1ffc0000 	.word	0x1ffc0000

0000761c <FlexCAN::write(CAN_message_t const&)>:
{
    761c:	b570      	push	{r4, r5, r6, lr}
    761e:	4604      	mov	r4, r0
    void irqLock() { IrqEnabled=NVIC_IS_ENABLED(IrqMessage); NVIC_DISABLE_IRQ(IrqMessage); }
    7620:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
    7624:	0943      	lsrs	r3, r0, #5
    7626:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    762a:	3340      	adds	r3, #64	; 0x40
    762c:	009b      	lsls	r3, r3, #2
    762e:	f000 001f 	and.w	r0, r0, #31
    7632:	681d      	ldr	r5, [r3, #0]
    7634:	2201      	movs	r2, #1
    7636:	4082      	lsls	r2, r0
    7638:	4215      	tst	r5, r2
    763a:	bf14      	ite	ne
    763c:	2501      	movne	r5, #1
    763e:	2500      	moveq	r5, #0
    7640:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
    7644:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (ring.head == ring.tail) {
    7648:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    764c:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
    7650:	b29b      	uxth	r3, r3
    7652:	b292      	uxth	r2, r2
    7654:	429a      	cmp	r2, r3
    7656:	d02d      	beq.n	76b4 <FlexCAN::write(CAN_message_t const&)+0x98>
    nextEntry = (ring.head + 1) % ring.size;
    7658:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    765c:	f8b4 0098 	ldrh.w	r0, [r4, #152]	; 0x98
    if (nextEntry == ring.tail) {
    7660:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
    nextEntry = (ring.head + 1) % ring.size;
    7664:	b29b      	uxth	r3, r3
    7666:	3301      	adds	r3, #1
    7668:	fbb3 f6f0 	udiv	r6, r3, r0
    766c:	fb00 3316 	mls	r3, r0, r6, r3
    if (nextEntry == ring.tail) {
    7670:	b292      	uxth	r2, r2
    nextEntry = (ring.head + 1) % ring.size;
    7672:	b29e      	uxth	r6, r3
    if (nextEntry == ring.tail) {
    7674:	4296      	cmp	r6, r2
    7676:	d042      	beq.n	76fe <FlexCAN::write(CAN_message_t const&)+0xe2>
    memcpy ((void *)&ring.buffer[ring.head], (void *)&msg, sizeof (CAN_message_t));
    7678:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    767c:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    7680:	b29b      	uxth	r3, r3
    7682:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    7686:	2210      	movs	r2, #16
    7688:	f001 fc8a 	bl	8fa0 <memcpy>
    void irqRelease() { if (IrqEnabled) NVIC_ENABLE_IRQ(IrqMessage); }
    768c:	f894 50f4 	ldrb.w	r5, [r4, #244]	; 0xf4
    ring.head = nextEntry;
    7690:	f8a4 6094 	strh.w	r6, [r4, #148]	; 0x94
            result=1;
    7694:	2001      	movs	r0, #1
    7696:	b165      	cbz	r5, 76b2 <FlexCAN::write(CAN_message_t const&)+0x96>
    7698:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
    769c:	0953      	lsrs	r3, r2, #5
    769e:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    76a2:	3340      	adds	r3, #64	; 0x40
    76a4:	2101      	movs	r1, #1
    76a6:	009b      	lsls	r3, r3, #2
    76a8:	f002 021f 	and.w	r2, r2, #31
    76ac:	fa01 f202 	lsl.w	r2, r1, r2
    76b0:	601a      	str	r2, [r3, #0]
}
    76b2:	bd70      	pop	{r4, r5, r6, pc}
    inline uint8_t getFirstTxBox() { return getNumMailBoxes()-numTxMailboxes; }
    76b4:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
    76b8:	f1c2 0210 	rsb	r2, r2, #16
      for (index = getFirstTxBox(); index < getNumMailBoxes(); index++) {
    76bc:	b2d2      	uxtb	r2, r2
    76be:	2a0f      	cmp	r2, #15
    76c0:	d8ca      	bhi.n	7658 <FlexCAN::write(CAN_message_t const&)+0x3c>
    76c2:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    76c6:	332c      	adds	r3, #44	; 0x2c
    76c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    76cc:	f104 0cf0 	add.w	ip, r4, #240	; 0xf0
    76d0:	e003      	b.n	76da <FlexCAN::write(CAN_message_t const&)+0xbe>
    76d2:	4563      	cmp	r3, ip
    76d4:	f102 0201 	add.w	r2, r2, #1
    76d8:	d0be      	beq.n	7658 <FlexCAN::write(CAN_message_t const&)+0x3c>
    bool usesGlobalTxRing(uint8_t mbox) { return (mbox<getNumMailBoxes()?txRings[mbox]==0:true); }
    76da:	f853 0f04 	ldr.w	r0, [r3, #4]!
    76de:	2800      	cmp	r0, #0
    76e0:	d1f7      	bne.n	76d2 <FlexCAN::write(CAN_message_t const&)+0xb6>
          if ( usesGlobalTxRing(index) && FLEXCAN_get_code(FLEXCANb_MBn_CS(flexcanBase, index)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    76e2:	6826      	ldr	r6, [r4, #0]
    76e4:	0110      	lsls	r0, r2, #4
    76e6:	3680      	adds	r6, #128	; 0x80
    76e8:	5830      	ldr	r0, [r6, r0]
    76ea:	f3c0 6003 	ubfx	r0, r0, #24, #4
    76ee:	2808      	cmp	r0, #8
    76f0:	d1ef      	bne.n	76d2 <FlexCAN::write(CAN_message_t const&)+0xb6>
        writeTxRegisters (msg, index);
    76f2:	4620      	mov	r0, r4
    76f4:	b2d2      	uxtb	r2, r2
    76f6:	f7ff ff21 	bl	753c <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)>
        result=1;
    76fa:	2001      	movs	r0, #1
    76fc:	e7cb      	b.n	7696 <FlexCAN::write(CAN_message_t const&)+0x7a>
    int result=0;
    76fe:	2000      	movs	r0, #0
    7700:	e7c9      	b.n	7696 <FlexCAN::write(CAN_message_t const&)+0x7a>
    7702:	bf00      	nop

00007704 <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)>:
{
    7704:	460b      	mov	r3, r1
    uint32_t mb_CS = FLEXCANb_MBn_CS(flexcanBase, buffer);
    7706:	6801      	ldr	r1, [r0, #0]
    7708:	f04f 0c10 	mov.w	ip, #16
    770c:	3180      	adds	r1, #128	; 0x80
    770e:	fb1c 1102 	smlabb	r1, ip, r2, r1
{
    7712:	b570      	push	{r4, r5, r6, lr}
    uint32_t mb_CS = FLEXCANb_MBn_CS(flexcanBase, buffer);
    7714:	6809      	ldr	r1, [r1, #0]
    msg.timestamp = FLEXCAN_get_timestamp (mb_CS);
    7716:	8099      	strh	r1, [r3, #4]
    msg.len = FLEXCAN_get_length (mb_CS);
    7718:	f3c1 4603 	ubfx	r6, r1, #16, #4
    771c:	71de      	strb	r6, [r3, #7]
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    771e:	6804      	ldr	r4, [r0, #0]
    7720:	3484      	adds	r4, #132	; 0x84
    uint32_t mb_CS = FLEXCANb_MBn_CS(flexcanBase, buffer);
    7722:	fb12 fe0c 	smulbb	lr, r2, ip
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    7726:	fb1c 4c02 	smlabb	ip, ip, r2, r4
    msg.flags.extended = (mb_CS & FLEXCAN_MB_CS_IDE) ? 1:0;
    772a:	f3c1 5500 	ubfx	r5, r1, #20, #1
    772e:	f3c1 5240 	ubfx	r2, r1, #21, #1
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    7732:	f8dc 4000 	ldr.w	r4, [ip]
    msg.flags.extended = (mb_CS & FLEXCAN_MB_CS_IDE) ? 1:0;
    7736:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    773a:	f3c1 6c03 	ubfx	ip, r1, #24, #4
    msg.flags.extended = (mb_CS & FLEXCAN_MB_CS_IDE) ? 1:0;
    773e:	719a      	strb	r2, [r3, #6]
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    7740:	f1ac 0c06 	sub.w	ip, ip, #6
    if (!msg.flags.extended) {
    7744:	b2d2      	uxtb	r2, r2
    7746:	07d2      	lsls	r2, r2, #31
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    7748:	fabc fc8c 	clz	ip, ip
    774c:	799a      	ldrb	r2, [r3, #6]
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    774e:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    7752:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    7756:	601c      	str	r4, [r3, #0]
    7758:	f36c 0282 	bfi	r2, ip, #2, #1
        msg.id >>= FLEXCAN_MB_ID_STD_BIT_NO;
    775c:	bf5c      	itt	pl
    775e:	0ca4      	lsrpl	r4, r4, #18
    7760:	601c      	strpl	r4, [r3, #0]
    7762:	719a      	strb	r2, [r3, #6]
    uint32_t dataIn = FLEXCANb_MBn_WORD0(flexcanBase, buffer);
    7764:	6802      	ldr	r2, [r0, #0]
    7766:	3288      	adds	r2, #136	; 0x88
    if (msg.len > 4) {
    7768:	2e04      	cmp	r6, #4
    uint32_t dataIn = FLEXCANb_MBn_WORD0(flexcanBase, buffer);
    776a:	f852 200e 	ldr.w	r2, [r2, lr]
    msg.buf[0] = dataIn;
    776e:	ba12      	rev	r2, r2
    msg.len = FLEXCAN_get_length (mb_CS);
    7770:	f3c1 4507 	ubfx	r5, r1, #16, #8
    msg.buf[0] = dataIn;
    7774:	609a      	str	r2, [r3, #8]
    if (msg.len > 4) {
    7776:	d905      	bls.n	7784 <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)+0x80>
        dataIn = FLEXCANb_MBn_WORD1(flexcanBase, buffer);
    7778:	6802      	ldr	r2, [r0, #0]
    777a:	328c      	adds	r2, #140	; 0x8c
    777c:	f852 200e 	ldr.w	r2, [r2, lr]
        msg.buf[4] = dataIn;
    7780:	ba12      	rev	r2, r2
    7782:	60da      	str	r2, [r3, #12]
    for (uint32_t loop=msg.len; loop < 8; loop++ ) {
    7784:	f015 0108 	ands.w	r1, r5, #8
    7788:	d108      	bne.n	779c <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)+0x98>
        msg.buf[loop] = 0;
    778a:	f106 0008 	add.w	r0, r6, #8
    778e:	f1c6 0208 	rsb	r2, r6, #8
    7792:	4418      	add	r0, r3
}
    7794:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        msg.buf[loop] = 0;
    7798:	f005 bd52 	b.w	d240 <memset>
}
    779c:	bd70      	pop	{r4, r5, r6, pc}
    779e:	bf00      	nop

000077a0 <FlexCAN::message_isr()>:
{
    77a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = FLEXCANb_IFLAG1(flexcanBase);
    77a4:	4683      	mov	fp, r0
{
    77a6:	b089      	sub	sp, #36	; 0x24
    uint32_t status = FLEXCANb_IFLAG1(flexcanBase);
    77a8:	f85b 2bb4 	ldr.w	r2, [fp], #180
    77ac:	f8d2 9030 	ldr.w	r9, [r2, #48]	; 0x30
    77b0:	f8cd 900c 	str.w	r9, [sp, #12]
{
    77b4:	4605      	mov	r5, r0
    uint32_t status = FLEXCANb_IFLAG1(flexcanBase);
    77b6:	4682      	mov	sl, r0
    for (i = 0; i < getNumMailBoxes(); i++) {
    77b8:	2400      	movs	r4, #0
    77ba:	e008      	b.n	77ce <FlexCAN::message_isr()+0x2e>
        switch (code) {
    77bc:	2b02      	cmp	r3, #2
    77be:	d04c      	beq.n	785a <FlexCAN::message_isr()+0xba>
    for (i = 0; i < getNumMailBoxes(); i++) {
    77c0:	3401      	adds	r4, #1
    77c2:	2c10      	cmp	r4, #16
    77c4:	f10a 0a08 	add.w	sl, sl, #8
    77c8:	f10b 0b04 	add.w	fp, fp, #4
    77cc:	d040      	beq.n	7850 <FlexCAN::message_isr()+0xb0>
        if ((status & (1UL << i)) == 0) {
    77ce:	fa29 f304 	lsr.w	r3, r9, r4
    77d2:	07d9      	lsls	r1, r3, #31
    77d4:	d5f4      	bpl.n	77c0 <FlexCAN::message_isr()+0x20>
        uint32_t code = FLEXCAN_get_code (FLEXCANb_MBn_CS(flexcanBase, i));
    77d6:	0127      	lsls	r7, r4, #4
    77d8:	f102 0380 	add.w	r3, r2, #128	; 0x80
    77dc:	59db      	ldr	r3, [r3, r7]
    77de:	f3c3 6303 	ubfx	r3, r3, #24, #4
        switch (code) {
    77e2:	2b06      	cmp	r3, #6
    77e4:	d039      	beq.n	785a <FlexCAN::message_isr()+0xba>
    77e6:	2b08      	cmp	r3, #8
    77e8:	d1e8      	bne.n	77bc <FlexCAN::message_isr()+0x1c>
    77ea:	f8db 6000 	ldr.w	r6, [fp]
    77ee:	2e00      	cmp	r6, #0
    77f0:	f000 80b9 	beq.w	7966 <FlexCAN::message_isr()+0x1c6>
    if (ring.head == ring.tail) {
    77f4:	8831      	ldrh	r1, [r6, #0]
    77f6:	8873      	ldrh	r3, [r6, #2]
    77f8:	b289      	uxth	r1, r1
    77fa:	b29b      	uxth	r3, r3
    77fc:	4299      	cmp	r1, r3
    77fe:	f000 80be 	beq.w	797e <FlexCAN::message_isr()+0x1de>
    7802:	8831      	ldrh	r1, [r6, #0]
    7804:	8873      	ldrh	r3, [r6, #2]
    7806:	b289      	uxth	r1, r1
    7808:	b29b      	uxth	r3, r3
    780a:	4299      	cmp	r1, r3
    780c:	d0d8      	beq.n	77c0 <FlexCAN::message_isr()+0x20>
    memcpy ((void *)&msg, (void *)&ring.buffer[ring.tail], sizeof (CAN_message_t));
    780e:	8873      	ldrh	r3, [r6, #2]
    7810:	68b1      	ldr	r1, [r6, #8]
    7812:	b29b      	uxth	r3, r3
    7814:	2210      	movs	r2, #16
    7816:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    781a:	eb0d 0002 	add.w	r0, sp, r2
    781e:	f001 fbbf 	bl	8fa0 <memcpy>
    ring.tail = (ring.tail + 1) % ring.size;
    7822:	8873      	ldrh	r3, [r6, #2]
    7824:	88b2      	ldrh	r2, [r6, #4]
    7826:	b29b      	uxth	r3, r3
    7828:	3301      	adds	r3, #1
    782a:	fbb3 f1f2 	udiv	r1, r3, r2
    782e:	fb02 3311 	mls	r3, r2, r1, r3
    7832:	b29b      	uxth	r3, r3
                    writeTxRegisters (msg, i);
    7834:	b2e2      	uxtb	r2, r4
    ring.tail = (ring.tail + 1) % ring.size;
    7836:	8073      	strh	r3, [r6, #2]
                    writeTxRegisters (msg, i);
    7838:	a904      	add	r1, sp, #16
    783a:	4628      	mov	r0, r5
    for (i = 0; i < getNumMailBoxes(); i++) {
    783c:	3401      	adds	r4, #1
                    writeTxRegisters (msg, i);
    783e:	f7ff fe7d 	bl	753c <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)>
    for (i = 0; i < getNumMailBoxes(); i++) {
    7842:	2c10      	cmp	r4, #16
    FLEXCANb_IFLAG1(flexcanBase) = status;
    7844:	682a      	ldr	r2, [r5, #0]
    for (i = 0; i < getNumMailBoxes(); i++) {
    7846:	f10a 0a08 	add.w	sl, sl, #8
    784a:	f10b 0b04 	add.w	fp, fp, #4
    784e:	d1be      	bne.n	77ce <FlexCAN::message_isr()+0x2e>
    FLEXCANb_IFLAG1(flexcanBase) = status;
    7850:	9b03      	ldr	r3, [sp, #12]
    7852:	6313      	str	r3, [r2, #48]	; 0x30
}
    7854:	b009      	add	sp, #36	; 0x24
    7856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            readRxRegisters (msg, i);
    785a:	b2e2      	uxtb	r2, r4
    785c:	a904      	add	r1, sp, #16
    785e:	4628      	mov	r0, r5
    7860:	f7ff ff50 	bl	7704 <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)>
            if (stats.enabled == true) {
    7864:	f895 30fc 	ldrb.w	r3, [r5, #252]	; 0xfc
    7868:	b16b      	cbz	r3, 7886 <FlexCAN::message_isr()+0xe6>
                stats.mb[i].refCount++;
    786a:	f8da 3114 	ldr.w	r3, [sl, #276]	; 0x114
    786e:	3301      	adds	r3, #1
    7870:	f8ca 3114 	str.w	r3, [sl, #276]	; 0x114
                if (msg.flags.overrun) {
    7874:	f89d 3016 	ldrb.w	r3, [sp, #22]
    7878:	075b      	lsls	r3, r3, #29
    787a:	d504      	bpl.n	7886 <FlexCAN::message_isr()+0xe6>
                    stats.mb[i].overrunCount++;
    787c:	f8da 3118 	ldr.w	r3, [sl, #280]	; 0x118
    7880:	3301      	adds	r3, #1
    7882:	f8ca 3118 	str.w	r3, [sl, #280]	; 0x118
    7886:	2301      	movs	r3, #1
    7888:	40a3      	lsls	r3, r4
    788a:	9300      	str	r3, [sp, #0]
    for (i = 0; i < getNumMailBoxes(); i++) {
    788c:	2300      	movs	r3, #0
    788e:	f105 0680 	add.w	r6, r5, #128	; 0x80
    7892:	f105 0890 	add.w	r8, r5, #144	; 0x90
    7896:	9301      	str	r3, [sp, #4]
    7898:	f8cd b008 	str.w	fp, [sp, #8]
                thisListener = listener[listenerPos];
    789c:	f856 0f04 	ldr.w	r0, [r6, #4]!
                if (thisListener != NULL) {
    78a0:	b148      	cbz	r0, 78b6 <FlexCAN::message_isr()+0x116>
                    if (thisListener->callbacksActive & (1UL << i)) {
    78a2:	6842      	ldr	r2, [r0, #4]
    78a4:	9b00      	ldr	r3, [sp, #0]
    78a6:	4013      	ands	r3, r2
    78a8:	d033      	beq.n	7912 <FlexCAN::message_isr()+0x172>
                        handledFrame |= thisListener->frameHandler (msg, i, controller);
    78aa:	6803      	ldr	r3, [r0, #0]
    78ac:	f8d3 b000 	ldr.w	fp, [r3]
    78b0:	4b45      	ldr	r3, [pc, #276]	; (79c8 <FlexCAN::message_isr()+0x228>)
    78b2:	459b      	cmp	fp, r3
    78b4:	d15a      	bne.n	796c <FlexCAN::message_isr()+0x1cc>
            for (uint32_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    78b6:	45b0      	cmp	r8, r6
    78b8:	d1f0      	bne.n	789c <FlexCAN::message_isr()+0xfc>
            if (handledFrame == false) {
    78ba:	9b01      	ldr	r3, [sp, #4]
    78bc:	f8dd b008 	ldr.w	fp, [sp, #8]
    78c0:	b393      	cbz	r3, 7928 <FlexCAN::message_isr()+0x188>
            if (stats.enabled == true) {
    78c2:	f895 30fc 	ldrb.w	r3, [r5, #252]	; 0xfc
    78c6:	b183      	cbz	r3, 78ea <FlexCAN::message_isr()+0x14a>
    entries = ring.head - ring.tail;
    78c8:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    78cc:	f8b5 20a6 	ldrh.w	r2, [r5, #166]	; 0xa6
    78d0:	b29b      	uxth	r3, r3
    78d2:	b292      	uxth	r2, r2
    if (entries < 0) {
    78d4:	1a9b      	subs	r3, r3, r2
        entries += ring.size;
    78d6:	bf44      	itt	mi
    78d8:	f8b5 20a8 	ldrhmi.w	r2, [r5, #168]	; 0xa8
    78dc:	189b      	addmi	r3, r3, r2
                if (stats.ringRxHighWater < rxEntries) {
    78de:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    78e2:	429a      	cmp	r2, r3
                    stats.ringRxHighWater = rxEntries;
    78e4:	bf38      	it	cc
    78e6:	f8c5 3104 	strcc.w	r3, [r5, #260]	; 0x104
            if (MBFilters[i].flags.extended) {
    78ea:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
                FLEXCANb_MBn_ID(flexcanBase, i) = (MBFilters[i].id & FLEXCAN_MB_ID_EXT_MASK);
    78ee:	f8da 2004 	ldr.w	r2, [sl, #4]
            if (MBFilters[i].flags.extended) {
    78f2:	7a1b      	ldrb	r3, [r3, #8]
    78f4:	f013 0f01 	tst.w	r3, #1
                FLEXCANb_MBn_ID(flexcanBase, i) = (MBFilters[i].id & FLEXCAN_MB_ID_EXT_MASK);
    78f8:	682b      	ldr	r3, [r5, #0]
                FLEXCANb_MBn_ID(flexcanBase, i) = FLEXCAN_MB_ID_IDSTD(MBFilters[i].id);
    78fa:	bf08      	it	eq
    78fc:	4933      	ldreq	r1, [pc, #204]	; (79cc <FlexCAN::message_isr()+0x22c>)
                FLEXCANb_MBn_ID(flexcanBase, i) = (MBFilters[i].id & FLEXCAN_MB_ID_EXT_MASK);
    78fe:	f103 0384 	add.w	r3, r3, #132	; 0x84
    7902:	bf14      	ite	ne
    7904:	f022 4260 	bicne.w	r2, r2, #3758096384	; 0xe0000000
                FLEXCANb_MBn_ID(flexcanBase, i) = FLEXCAN_MB_ID_IDSTD(MBFilters[i].id);
    7908:	ea01 4282 	andeq.w	r2, r1, r2, lsl #18
    790c:	51da      	str	r2, [r3, r7]
    FLEXCANb_IFLAG1(flexcanBase) = status;
    790e:	682a      	ldr	r2, [r5, #0]
    7910:	e756      	b.n	77c0 <FlexCAN::message_isr()+0x20>
                    } else if (thisListener->callbacksActive & (1UL << 31)) {
    7912:	2a00      	cmp	r2, #0
    7914:	dacf      	bge.n	78b6 <FlexCAN::message_isr()+0x116>
                        handledFrame |= thisListener->frameHandler (msg, -1, controller);
    7916:	6802      	ldr	r2, [r0, #0]
    7918:	f8d2 b000 	ldr.w	fp, [r2]
    791c:	4a2a      	ldr	r2, [pc, #168]	; (79c8 <FlexCAN::message_isr()+0x228>)
    791e:	4593      	cmp	fp, r2
    7920:	d0c9      	beq.n	78b6 <FlexCAN::message_isr()+0x116>
    7922:	f04f 32ff 	mov.w	r2, #4294967295
    7926:	e023      	b.n	7970 <FlexCAN::message_isr()+0x1d0>
    nextEntry = (ring.head + 1) % ring.size;
    7928:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    792c:	f8b5 10a8 	ldrh.w	r1, [r5, #168]	; 0xa8
    if (nextEntry == ring.tail) {
    7930:	f8b5 20a6 	ldrh.w	r2, [r5, #166]	; 0xa6
    nextEntry = (ring.head + 1) % ring.size;
    7934:	b29b      	uxth	r3, r3
    7936:	3301      	adds	r3, #1
    7938:	fbb3 f0f1 	udiv	r0, r3, r1
    793c:	fb01 3310 	mls	r3, r1, r0, r3
    if (nextEntry == ring.tail) {
    7940:	b292      	uxth	r2, r2
    nextEntry = (ring.head + 1) % ring.size;
    7942:	b29e      	uxth	r6, r3
    if (nextEntry == ring.tail) {
    7944:	4296      	cmp	r6, r2
    7946:	d031      	beq.n	79ac <FlexCAN::message_isr()+0x20c>
    memcpy ((void *)&ring.buffer[ring.head], (void *)&msg, sizeof (CAN_message_t));
    7948:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    794c:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
    7950:	b29b      	uxth	r3, r3
    7952:	2210      	movs	r2, #16
    7954:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    7958:	eb0d 0102 	add.w	r1, sp, r2
    795c:	f001 fb20 	bl	8fa0 <memcpy>
    ring.head = nextEntry;
    7960:	f8a5 60a4 	strh.w	r6, [r5, #164]	; 0xa4
    return (true);
    7964:	e7ad      	b.n	78c2 <FlexCAN::message_isr()+0x122>
            pRing=( usesGlobalTxRing(i) ? &txRing : txRings[i] );
    7966:	f105 0694 	add.w	r6, r5, #148	; 0x94
    796a:	e743      	b.n	77f4 <FlexCAN::message_isr()+0x54>
                        handledFrame |= thisListener->frameHandler (msg, i, controller);
    796c:	2300      	movs	r3, #0
    796e:	4622      	mov	r2, r4
                        handledFrame |= thisListener->frameHandler (msg, -1, controller);
    7970:	a904      	add	r1, sp, #16
    7972:	47d8      	blx	fp
    7974:	9b01      	ldr	r3, [sp, #4]
    7976:	4318      	orrs	r0, r3
    7978:	b2c3      	uxtb	r3, r0
    797a:	9301      	str	r3, [sp, #4]
    797c:	e79b      	b.n	78b6 <FlexCAN::message_isr()+0x116>
                        if (thisListener->callbacksActive & (1UL << i | 1UL << 31)) {
    797e:	2701      	movs	r7, #1
    7980:	40a7      	lsls	r7, r4
    7982:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
    7986:	f105 0680 	add.w	r6, r5, #128	; 0x80
    798a:	f105 0890 	add.w	r8, r5, #144	; 0x90
                    thisListener = listener[listenerPos];
    798e:	f856 0f04 	ldr.w	r0, [r6, #4]!
                    if (thisListener != NULL) {
    7992:	b138      	cbz	r0, 79a4 <FlexCAN::message_isr()+0x204>
                        if (thisListener->callbacksActive & (1UL << i | 1UL << 31)) {
    7994:	6843      	ldr	r3, [r0, #4]
    7996:	421f      	tst	r7, r3
    7998:	d004      	beq.n	79a4 <FlexCAN::message_isr()+0x204>
                            thisListener->txHandler (i, controller);
    799a:	6803      	ldr	r3, [r0, #0]
    799c:	4a0c      	ldr	r2, [pc, #48]	; (79d0 <FlexCAN::message_isr()+0x230>)
    799e:	685b      	ldr	r3, [r3, #4]
    79a0:	4293      	cmp	r3, r2
    79a2:	d10d      	bne.n	79c0 <FlexCAN::message_isr()+0x220>
                for (uint32_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    79a4:	45b0      	cmp	r8, r6
    79a6:	d1f2      	bne.n	798e <FlexCAN::message_isr()+0x1ee>
    FLEXCANb_IFLAG1(flexcanBase) = status;
    79a8:	682a      	ldr	r2, [r5, #0]
    79aa:	e709      	b.n	77c0 <FlexCAN::message_isr()+0x20>
                    if (stats.enabled == true) {
    79ac:	f895 30fc 	ldrb.w	r3, [r5, #252]	; 0xfc
    79b0:	2b00      	cmp	r3, #0
    79b2:	d09a      	beq.n	78ea <FlexCAN::message_isr()+0x14a>
                        stats.ringRxFramesLost++;
    79b4:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    79b8:	3301      	adds	r3, #1
    79ba:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            if (stats.enabled == true) {
    79be:	e783      	b.n	78c8 <FlexCAN::message_isr()+0x128>
                            thisListener->txHandler (i, controller);
    79c0:	2200      	movs	r2, #0
    79c2:	4621      	mov	r1, r4
    79c4:	4798      	blx	r3
    79c6:	e7ed      	b.n	79a4 <FlexCAN::message_isr()+0x204>
    79c8:	00006fa5 	.word	0x00006fa5
    79cc:	1ffc0000 	.word	0x1ffc0000
    79d0:	00006fa9 	.word	0x00006fa9

000079d4 <can0_message_isr>:
    Can0.message_isr ();
    79d4:	4801      	ldr	r0, [pc, #4]	; (79dc <can0_message_isr+0x8>)
    79d6:	f7ff bee3 	b.w	77a0 <FlexCAN::message_isr()>
    79da:	bf00      	nop
    79dc:	1fffb2ec 	.word	0x1fffb2ec

000079e0 <can0_bus_off_isr>:
}
    79e0:	4770      	bx	lr
    79e2:	bf00      	nop

000079e4 <can0_error_isr>:
    uint32_t status = FLEXCANb_ESR1 (flexcanBase);
    79e4:	4b01      	ldr	r3, [pc, #4]	; (79ec <can0_error_isr+0x8>)
    79e6:	681b      	ldr	r3, [r3, #0]
    79e8:	6a1b      	ldr	r3, [r3, #32]
}
    79ea:	4770      	bx	lr
    79ec:	1fffb2ec 	.word	0x1fffb2ec

000079f0 <can0_tx_warn_isr>:
    79f0:	4770      	bx	lr
    79f2:	bf00      	nop

000079f4 <can0_rx_warn_isr>:
    79f4:	4770      	bx	lr
    79f6:	bf00      	nop

000079f8 <can0_wakeup_isr>:
    79f8:	4770      	bx	lr
    79fa:	bf00      	nop

000079fc <_GLOBAL__sub_I_Can0>:
FlexCAN Can0 (0);
    79fc:	4801      	ldr	r0, [pc, #4]	; (7a04 <_GLOBAL__sub_I_Can0+0x8>)
    79fe:	2100      	movs	r1, #0
    7a00:	f7ff bad4 	b.w	6fac <FlexCAN::FlexCAN(unsigned char)>
    7a04:	1fffb2ec 	.word	0x1fffb2ec

00007a08 <ADC::ADC()>:
    0, 0, 0, 0, 0, 0                                    //22-27
};
#endif

// Constructor
ADC::ADC() : // awkward initialization  so there are no -Wreorder warnings
    7a08:	b530      	push	{r4, r5, lr}
    7a0a:	b083      	sub	sp, #12
#if ADC_DIFF_PAIRS > 0
             adc0_obj(0, channel2sc1aADC0, diff_table_ADC0, ADC0_START)
    7a0c:	490f      	ldr	r1, [pc, #60]	; (7a4c <ADC::ADC()+0x44>)
    7a0e:	9100      	str	r1, [sp, #0]
ADC::ADC() : // awkward initialization  so there are no -Wreorder warnings
    7a10:	4604      	mov	r4, r0
             adc0_obj(0, channel2sc1aADC0, diff_table_ADC0, ADC0_START)
    7a12:	4b0f      	ldr	r3, [pc, #60]	; (7a50 <ADC::ADC()+0x48>)
    7a14:	4a0f      	ldr	r2, [pc, #60]	; (7a54 <ADC::ADC()+0x4c>)
    7a16:	2100      	movs	r1, #0
    7a18:	f000 fa60 	bl	7edc <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)>
#ifdef ADC_DUAL_ADCS
             ,
             adc1_obj(1, channel2sc1aADC1, diff_table_ADC1, ADC1_START)
    7a1c:	f104 0540 	add.w	r5, r4, #64	; 0x40
    7a20:	490d      	ldr	r1, [pc, #52]	; (7a58 <ADC::ADC()+0x50>)
    7a22:	9100      	str	r1, [sp, #0]
    7a24:	4b0d      	ldr	r3, [pc, #52]	; (7a5c <ADC::ADC()+0x54>)
    7a26:	4a0e      	ldr	r2, [pc, #56]	; (7a60 <ADC::ADC()+0x58>)
    7a28:	2101      	movs	r1, #1
    7a2a:	4628      	mov	r0, r5
    7a2c:	f000 fa56 	bl	7edc <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)>
    7a30:	2302      	movs	r3, #2
#endif
{
    //ctor

    //digitalWriteFast(LED_BUILTIN, HIGH);
}
    7a32:	4620      	mov	r0, r4
             adc1_obj(1, channel2sc1aADC1, diff_table_ADC1, ADC1_START)
    7a34:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    7a38:	f8c4 4084 	str.w	r4, [r4, #132]	; 0x84
    7a3c:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    7a40:	f8c4 408c 	str.w	r4, [r4, #140]	; 0x8c
    7a44:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
    7a48:	b003      	add	sp, #12
    7a4a:	bd30      	pop	{r4, r5, pc}
    7a4c:	4003b000 	.word	0x4003b000
    7a50:	000142d4 	.word	0x000142d4
    7a54:	000142dc 	.word	0x000142dc
    7a58:	400bb000 	.word	0x400bb000
    7a5c:	000142d8 	.word	0x000142d8
    7a60:	00014308 	.word	0x00014308

00007a64 <ADC::startContinuous(unsigned char, signed char)>:
#ifdef ADC_SINGLE_ADC
    return adc0->startContinuous(pin); // use ADC0
#else
    /* Teensy 3.1
    */
    if (adc_num == -1)
    7a64:	1c53      	adds	r3, r2, #1
{
    7a66:	b570      	push	{r4, r5, r6, lr}
    7a68:	4604      	mov	r4, r0
    if (adc_num == -1)
    7a6a:	d011      	beq.n	7a90 <ADC::startContinuous(unsigned char, signed char)+0x2c>
            adc0->fail_flag |= ADC_ERROR::WRONG_PIN;
            adc1->fail_flag |= ADC_ERROR::WRONG_PIN;
            return false; // all others are invalid
        }
    }
    else if (adc_num == 0)
    7a6c:	b152      	cbz	r2, 7a84 <ADC::startContinuous(unsigned char, signed char)+0x20>
    { // user wants ADC0
        return adc0->startContinuous(pin);
    }
    else if (adc_num == 1)
    7a6e:	2a01      	cmp	r2, #1
    7a70:	d029      	beq.n	7ac6 <ADC::startContinuous(unsigned char, signed char)+0x62>
    { // user wants ADC 1
        return adc1->startContinuous(pin);
    }
    adc0->fail_flag |= ADC_ERROR::OTHER;
    7a72:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
        return static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) & static_cast<uint16_t>(rhs));
    }
    //! |= operator for ADC_ERRORs, it changes the left hand side ADC_ERROR. @internal
    inline ADC_ERROR operator|=(volatile ADC_ERROR &lhs, ADC_ERROR rhs)
    {
        return lhs = static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) | static_cast<uint16_t>(rhs));
    7a76:	8ad3      	ldrh	r3, [r2, #22]
    7a78:	b29b      	uxth	r3, r3
    7a7a:	f043 0301 	orr.w	r3, r3, #1
    7a7e:	82d3      	strh	r3, [r2, #22]
    return false;
#endif
}
    7a80:	2000      	movs	r0, #0
    7a82:	bd70      	pop	{r4, r5, r6, pc}
    7a84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return adc0->startContinuous(pin);
    7a88:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    7a8c:	f000 baf8 	b.w	8080 <ADC_Module::startContinuous(unsigned char)>
        bool adc0Pin = adc0->checkPin(pin);
    7a90:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    7a94:	460d      	mov	r5, r1
    7a96:	f000 fac9 	bl	802c <ADC_Module::checkPin(unsigned char)>
        bool adc1Pin = adc1->checkPin(pin);
    7a9a:	4629      	mov	r1, r5
        bool adc0Pin = adc0->checkPin(pin);
    7a9c:	4606      	mov	r6, r0
        bool adc1Pin = adc1->checkPin(pin);
    7a9e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    7aa2:	f000 fac3 	bl	802c <ADC_Module::checkPin(unsigned char)>
        if (adc0Pin && adc1Pin)
    7aa6:	b1a6      	cbz	r6, 7ad2 <ADC::startContinuous(unsigned char, signed char)+0x6e>
    7aa8:	b318      	cbz	r0, 7af2 <ADC::startContinuous(unsigned char, signed char)+0x8e>
            if ((adc0->num_measurements) > (adc1->num_measurements))
    7aaa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    7aae:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    7ab2:	7d59      	ldrb	r1, [r3, #21]
    7ab4:	7d42      	ldrb	r2, [r0, #21]
    7ab6:	4291      	cmp	r1, r2
                return adc1->startContinuous(pin);
    7ab8:	4629      	mov	r1, r5
            if ((adc0->num_measurements) > (adc1->num_measurements))
    7aba:	d806      	bhi.n	7aca <ADC::startContinuous(unsigned char, signed char)+0x66>
}
    7abc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                return adc0->startContinuous(pin);
    7ac0:	4618      	mov	r0, r3
    7ac2:	f000 badd 	b.w	8080 <ADC_Module::startContinuous(unsigned char)>
        return adc1->startContinuous(pin);
    7ac6:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
}
    7aca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return adc1->startContinuous(pin);
    7ace:	f000 bad7 	b.w	8080 <ADC_Module::startContinuous(unsigned char)>
        else if (adc1Pin)
    7ad2:	b9a8      	cbnz	r0, 7b00 <ADC::startContinuous(unsigned char, signed char)+0x9c>
            adc0->fail_flag |= ADC_ERROR::WRONG_PIN;
    7ad4:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
            adc1->fail_flag |= ADC_ERROR::WRONG_PIN;
    7ad8:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    7adc:	8acb      	ldrh	r3, [r1, #22]
    7ade:	b29b      	uxth	r3, r3
    7ae0:	f043 0304 	orr.w	r3, r3, #4
    7ae4:	82cb      	strh	r3, [r1, #22]
    7ae6:	8ad3      	ldrh	r3, [r2, #22]
    7ae8:	b29b      	uxth	r3, r3
    7aea:	f043 0304 	orr.w	r3, r3, #4
    7aee:	82d3      	strh	r3, [r2, #22]
            return false; // all others are invalid
    7af0:	e7c6      	b.n	7a80 <ADC::startContinuous(unsigned char, signed char)+0x1c>
            return adc0->startContinuous(pin);
    7af2:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    7af6:	4629      	mov	r1, r5
}
    7af8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return adc0->startContinuous(pin);
    7afc:	f000 bac0 	b.w	8080 <ADC_Module::startContinuous(unsigned char)>
            return adc1->startContinuous(pin);
    7b00:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    7b04:	4629      	mov	r1, r5
}
    7b06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return adc1->startContinuous(pin);
    7b0a:	f000 bab9 	b.w	8080 <ADC_Module::startContinuous(unsigned char)>
    7b0e:	bf00      	nop

00007b10 <ADC_Module::getMaxValue()>:
*
*/
uint32_t ADC_Module::getMaxValue()
{
    return analog_max_val;
}
    7b10:	69c0      	ldr	r0, [r0, #28]
    7b12:	4770      	bx	lr

00007b14 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>:
* VERY_HIGH_SPEED is the highest possible sampling speed (0 ADCK added).
*/
void ADC_Module::setConversionSpeed(ADC_CONVERSION_SPEED speed)
{

    if (speed == conversion_speed)
    7b14:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    7b18:	428b      	cmp	r3, r1
    7b1a:	d00a      	beq.n	7b32 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1e>
{
    7b1c:	b470      	push	{r4, r5, r6}
    //if (calibrating) wait_for_cal();

    bool is_adack = false;
    uint32_t ADC_CFG1_speed = 0; // store the clock and divisor (set to 0 to avoid warnings)

    switch (speed)
    7b1e:	2909      	cmp	r1, #9
    7b20:	f200 8093 	bhi.w	7c4a <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x136>
    7b24:	e8df f001 	tbb	[pc, r1]
    7b28:	06612f2f 	.word	0x06612f2f
    7b2c:	8e817106 	.word	0x8e817106
    7b30:	5440      	.short	0x5440
    7b32:	4770      	bx	lr
    case ADC_CONVERSION_SPEED::HIGH_SPEED:
#ifdef ADC_TEENSY_4
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLPC);
#else
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    7b34:	6b43      	ldr	r3, [r0, #52]	; 0x34
    *   \return A pointer to the aliased address of the bit of reg
    */
    template <typename T>
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    {
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7b36:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    7b3a:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    7b3e:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    7b42:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, bit) = 0;
    }
    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7b46:	2400      	movs	r4, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7b48:	2201      	movs	r2, #1
    7b4a:	f8cc 2008 	str.w	r2, [ip, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7b4e:	4626      	mov	r6, r4
    7b50:	61dc      	str	r4, [r3, #28]
    7b52:	2500      	movs	r5, #0
    7b54:	f8cc 500c 	str.w	r5, [ip, #12]
        bitband_address(reg, bit) = state;
    }
    template <typename T>
    __attribute__((always_inline)) inline void changeBitFlag(volatile T &reg, T flag, T state)
    {
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    7b58:	601e      	str	r6, [r3, #0]
        if (__builtin_popcount(flag) > 1)
        {
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    7b5a:	605d      	str	r5, [r3, #4]
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    7b5c:	615c      	str	r4, [r3, #20]
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    7b5e:	619a      	str	r2, [r3, #24]
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_ADICLK(3), ADC_CFG1_speed & ADC_CFG1_ADICLK(3));
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_ADIV(3), ADC_CFG1_speed & ADC_CFG1_ADIV(3));
#endif
    }

    conversion_speed = speed;
    7b60:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    __disable_irq();
    7b64:	b672      	cpsid	i
    atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_CAL);
    7b66:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7b68:	015b      	lsls	r3, r3, #5
    7b6a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    calibrating = 1;
    7b6e:	2201      	movs	r2, #1
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7b70:	2100      	movs	r1, #0
    7b72:	7642      	strb	r2, [r0, #25]
    7b74:	f8c3 149c 	str.w	r1, [r3, #1180]	; 0x49c
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7b78:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
    7b7c:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
    __enable_irq();
    7b80:	b662      	cpsie	i
    calibrate();
}
    7b82:	bc70      	pop	{r4, r5, r6}
    7b84:	4770      	bx	lr
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    7b86:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7b88:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    7b8c:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    7b90:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    7b94:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7b98:	2200      	movs	r2, #0
    7b9a:	f8cc 2008 	str.w	r2, [ip, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7b9e:	2201      	movs	r2, #1
    7ba0:	61da      	str	r2, [r3, #28]
    7ba2:	4614      	mov	r4, r2
    7ba4:	4616      	mov	r6, r2
    7ba6:	e7d4      	b.n	7b52 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x3e>
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    7ba8:	6b43      	ldr	r3, [r0, #52]	; 0x34
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7baa:	2400      	movs	r4, #0
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7bac:	015a      	lsls	r2, r3, #5
    7bae:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    7bb2:	f502 7380 	add.w	r3, r2, #256	; 0x100
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7bb6:	f8c2 4188 	str.w	r4, [r2, #392]	; 0x188
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7bba:	f502 72c0 	add.w	r2, r2, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7bbe:	61dc      	str	r4, [r3, #28]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7bc0:	2401      	movs	r4, #1
    7bc2:	60d4      	str	r4, [r2, #12]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7bc4:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7bc6:	605c      	str	r4, [r3, #4]
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    7bc8:	601c      	str	r4, [r3, #0]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7bca:	619a      	str	r2, [r3, #24]
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    7bcc:	615a      	str	r2, [r3, #20]
    }
    7bce:	e7c7      	b.n	7b60 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x4c>
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    7bd0:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7bd2:	015a      	lsls	r2, r3, #5
    7bd4:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    7bd8:	f502 7380 	add.w	r3, r2, #256	; 0x100
    7bdc:	f502 72c0 	add.w	r2, r2, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7be0:	2401      	movs	r4, #1
    7be2:	6094      	str	r4, [r2, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7be4:	2400      	movs	r4, #0
    7be6:	61dc      	str	r4, [r3, #28]
    if (is_adack)
    7be8:	e7ea      	b.n	7bc0 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xac>
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    7bea:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7bec:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    7bf0:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    7bf4:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    7bf8:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7bfc:	2600      	movs	r6, #0
    7bfe:	2201      	movs	r2, #1
    7c00:	f8cc 6008 	str.w	r6, [ip, #8]
    7c04:	4614      	mov	r4, r2
    7c06:	61de      	str	r6, [r3, #28]
    if (is_adack)
    7c08:	e7a3      	b.n	7b52 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x3e>
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    7c0a:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7c0c:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    7c10:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    7c14:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    7c18:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7c1c:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7c1e:	2401      	movs	r4, #1
    7c20:	f8cc 4008 	str.w	r4, [ip, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7c24:	4616      	mov	r6, r2
    7c26:	61da      	str	r2, [r3, #28]
    if (is_adack)
    7c28:	e793      	b.n	7b52 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x3e>
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    7c2a:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7c2c:	015a      	lsls	r2, r3, #5
    7c2e:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    7c32:	f502 7380 	add.w	r3, r2, #256	; 0x100
    7c36:	f502 72c0 	add.w	r2, r2, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7c3a:	2400      	movs	r4, #0
    7c3c:	6094      	str	r4, [r2, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7c3e:	2401      	movs	r4, #1
    7c40:	61dc      	str	r4, [r3, #28]
    if (is_adack)
    7c42:	e7bd      	b.n	7bc0 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xac>
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    7c44:	6b43      	ldr	r3, [r0, #52]	; 0x34
    7c46:	2401      	movs	r4, #1
    7c48:	e7b0      	b.n	7bac <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x98>
    7c4a:	8ac3      	ldrh	r3, [r0, #22]
    7c4c:	b29b      	uxth	r3, r3
    7c4e:	f043 0301 	orr.w	r3, r3, #1
    7c52:	82c3      	strh	r3, [r0, #22]
    7c54:	e795      	b.n	7b82 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x6e>
    7c56:	bf00      	nop

00007c58 <ADC_Module::wait_for_cal()>:
    while (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CAL))
    7c58:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7c5a:	015b      	lsls	r3, r3, #5
    7c5c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
{
    7c60:	b510      	push	{r4, lr}
        return (volatile bool)bitband_address(reg, bit);
    }
    template <typename T>
    __attribute__((always_inline)) inline volatile bool getBitFlag(volatile T &reg, T flag)
    {
        return (volatile bool)bitband_address(reg, 31 - __builtin_clzl(flag));
    7c62:	f8d3 249c 	ldr.w	r2, [r3, #1180]	; 0x49c
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7c66:	f503 6390 	add.w	r3, r3, #1152	; 0x480
    7c6a:	4604      	mov	r4, r0
    while (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CAL))
    7c6c:	b152      	cbz	r2, 7c84 <ADC_Module::wait_for_cal()+0x2c>
        yield();
    7c6e:	f003 fc8b 	bl	b588 <yield>
    while (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CAL))
    7c72:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7c74:	015b      	lsls	r3, r3, #5
    7c76:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    7c7a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
        return (volatile bool)bitband_address(reg, 31 - __builtin_clzl(flag));
    7c7e:	69da      	ldr	r2, [r3, #28]
    7c80:	2a00      	cmp	r2, #0
    7c82:	d1f4      	bne.n	7c6e <ADC_Module::wait_for_cal()+0x16>
    7c84:	699b      	ldr	r3, [r3, #24]
    if (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CALF))
    7c86:	b123      	cbz	r3, 7c92 <ADC_Module::wait_for_cal()+0x3a>
    7c88:	8ae3      	ldrh	r3, [r4, #22]
    7c8a:	b29b      	uxth	r3, r3
    7c8c:	f043 0302 	orr.w	r3, r3, #2
    7c90:	82e3      	strh	r3, [r4, #22]
    __disable_irq();
    7c92:	b672      	cpsid	i
    if (calibrating)
    7c94:	7e63      	ldrb	r3, [r4, #25]
    7c96:	b303      	cbz	r3, 7cda <ADC_Module::wait_for_cal()+0x82>
        sum = adc_regs.CLPS + adc_regs.CLP4 + adc_regs.CLP3 + adc_regs.CLP2 + adc_regs.CLP1 + adc_regs.CLP0;
    7c98:	6b62      	ldr	r2, [r4, #52]	; 0x34
    7c9a:	6b93      	ldr	r3, [r2, #56]	; 0x38
    7c9c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    7c9e:	440b      	add	r3, r1
    7ca0:	6c11      	ldr	r1, [r2, #64]	; 0x40
    7ca2:	6c50      	ldr	r0, [r2, #68]	; 0x44
    7ca4:	440b      	add	r3, r1
    7ca6:	6c91      	ldr	r1, [r2, #72]	; 0x48
    7ca8:	4403      	add	r3, r0
    7caa:	440b      	add	r3, r1
    7cac:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    7cae:	440b      	add	r3, r1
        sum = (sum / 2) | 0x8000;
    7cb0:	f3c3 034e 	ubfx	r3, r3, #1, #15
        adc_regs.PG = sum;
    7cb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    7cb8:	62d3      	str	r3, [r2, #44]	; 0x2c
        sum = adc_regs.CLMS + adc_regs.CLM4 + adc_regs.CLM3 + adc_regs.CLM2 + adc_regs.CLM1 + adc_regs.CLM0;
    7cba:	6d93      	ldr	r3, [r2, #88]	; 0x58
    7cbc:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
    7cbe:	440b      	add	r3, r1
    7cc0:	6e11      	ldr	r1, [r2, #96]	; 0x60
    7cc2:	6e50      	ldr	r0, [r2, #100]	; 0x64
    7cc4:	440b      	add	r3, r1
    7cc6:	6e91      	ldr	r1, [r2, #104]	; 0x68
    7cc8:	4403      	add	r3, r0
    7cca:	440b      	add	r3, r1
    7ccc:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
    7cce:	440b      	add	r3, r1
        sum = (sum / 2) | 0x8000;
    7cd0:	f3c3 034e 	ubfx	r3, r3, #1, #15
        adc_regs.MG = sum;
    7cd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    7cd8:	6313      	str	r3, [r2, #48]	; 0x30
    __enable_irq();
    7cda:	b662      	cpsie	i
    if (init_calib)
    7cdc:	7ea3      	ldrb	r3, [r4, #26]
    calibrating = 0;
    7cde:	2200      	movs	r2, #0
    7ce0:	7662      	strb	r2, [r4, #25]
    if (init_calib)
    7ce2:	b903      	cbnz	r3, 7ce6 <ADC_Module::wait_for_cal()+0x8e>
}
    7ce4:	bd10      	pop	{r4, pc}
        setConversionSpeed(ADC_CONVERSION_SPEED::MED_SPEED);
    7ce6:	2102      	movs	r1, #2
    7ce8:	4620      	mov	r0, r4
    7cea:	f7ff ff13 	bl	7b14 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
* HIGH_SPEED adds +6 ADCK.
* VERY_HIGH_SPEED is the highest possible sampling speed (0 ADCK added).
*/
void ADC_Module::setSamplingSpeed(ADC_SAMPLING_SPEED speed)
{
    if (calibrating)
    7cee:	7e63      	ldrb	r3, [r4, #25]
    7cf0:	bb03      	cbnz	r3, 7d34 <ADC_Module::wait_for_cal()+0xdc>
    case ADC_SAMPLING_SPEED::LOW_SPEED:
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
        atomic::changeBitFlag(adc_regs.CFG2, ADC_CFG2_ADLSTS(3), ADC_CFG2_ADLSTS(1)); // high sampling time (+16 ADCK)
        break;
    case ADC_SAMPLING_SPEED::MED_SPEED:
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    7cf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7cf4:	0159      	lsls	r1, r3, #5
    7cf6:	f101 4284 	add.w	r2, r1, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7cfa:	2001      	movs	r0, #1
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    7cfc:	2100      	movs	r1, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7cfe:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    7d02:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    7d06:	f8c2 0184 	str.w	r0, [r2, #388]	; 0x184
*
*/
void ADC_Module::setAveraging(uint8_t num)
{

    if (calibrating)
    7d0a:	7e62      	ldrb	r2, [r4, #25]
    sampling_speed = speed;
    7d0c:	2102      	movs	r1, #2
    7d0e:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    if (calibrating)
    7d12:	b992      	cbnz	r2, 7d3a <ADC_Module::wait_for_cal()+0xe2>
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7d14:	015b      	lsls	r3, r3, #5
    7d16:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7d1a:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7d1c:	2001      	movs	r0, #1
#else
            atomic::setBitFlag(adc_regs.SC3, ADC_SC3_AVGS(3));
#endif
        }
    }
    analog_num_average = num;
    7d1e:	2104      	movs	r1, #4
    7d20:	f8c3 0488 	str.w	r0, [r3, #1160]	; 0x488
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7d24:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    7d28:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
    7d2c:	f884 1020 	strb.w	r1, [r4, #32]
        init_calib = 0; // clear
    7d30:	76a2      	strb	r2, [r4, #26]
}
    7d32:	bd10      	pop	{r4, pc}
        wait_for_cal();
    7d34:	f7ff ff90 	bl	7c58 <ADC_Module::wait_for_cal()>
    7d38:	e7db      	b.n	7cf2 <ADC_Module::wait_for_cal()+0x9a>
        wait_for_cal();
    7d3a:	4620      	mov	r0, r4
    7d3c:	f7ff ff8c 	bl	7c58 <ADC_Module::wait_for_cal()>
        atomic::setBitFlag(adc_regs.SC3, ADC_SC3_AVGE);
    7d40:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7d42:	e7e7      	b.n	7d14 <ADC_Module::wait_for_cal()+0xbc>

00007d44 <ADC_Module::setResolution(unsigned char)>:
{
    7d44:	b538      	push	{r3, r4, r5, lr}
    if (analog_res_bits == bits)
    7d46:	7ec3      	ldrb	r3, [r0, #27]
    7d48:	428b      	cmp	r3, r1
    7d4a:	d012      	beq.n	7d72 <ADC_Module::setResolution(unsigned char)+0x2e>
    if (calibrating)
    7d4c:	7e43      	ldrb	r3, [r0, #25]
    7d4e:	4604      	mov	r4, r0
    7d50:	460d      	mov	r5, r1
    7d52:	bb0b      	cbnz	r3, 7d98 <ADC_Module::setResolution(unsigned char)+0x54>
    if (bits <= 9)
    7d54:	2d09      	cmp	r5, #9
    7d56:	d80d      	bhi.n	7d74 <ADC_Module::setResolution(unsigned char)+0x30>
        atomic::clearBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3));
    7d58:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7d5a:	015b      	lsls	r3, r3, #5
    7d5c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7d60:	2000      	movs	r0, #0
    7d62:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    7d66:	21ff      	movs	r1, #255	; 0xff
        config = 8;
    7d68:	2208      	movs	r2, #8
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    7d6a:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
        analog_max_val = 255; // diff mode 9 bits has 1 bit for sign, so max value is the same as single 8 bits
    7d6e:	61e1      	str	r1, [r4, #28]
    analog_res_bits = config;
    7d70:	76e2      	strb	r2, [r4, #27]
}
    7d72:	bd38      	pop	{r3, r4, r5, pc}
    else if (bits <= 11)
    7d74:	2d0b      	cmp	r5, #11
    7d76:	d912      	bls.n	7d9e <ADC_Module::setResolution(unsigned char)+0x5a>
    else if (bits <= 13)
    7d78:	2d0d      	cmp	r5, #13
    7d7a:	d81e      	bhi.n	7dba <ADC_Module::setResolution(unsigned char)+0x76>
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3), ADC_CFG1_MODE(1));
    7d7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7d7e:	015b      	lsls	r3, r3, #5
    7d80:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    7d84:	2200      	movs	r2, #0
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    7d86:	2001      	movs	r0, #1
    7d88:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    7d8c:	f640 71ff 	movw	r1, #4095	; 0xfff
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    7d90:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        config = 12;
    7d94:	220c      	movs	r2, #12
    7d96:	e7ea      	b.n	7d6e <ADC_Module::setResolution(unsigned char)+0x2a>
        wait_for_cal();
    7d98:	f7ff ff5e 	bl	7c58 <ADC_Module::wait_for_cal()>
    7d9c:	e7da      	b.n	7d54 <ADC_Module::setResolution(unsigned char)+0x10>
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3), ADC_CFG1_MODE(2));
    7d9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7da0:	015b      	lsls	r3, r3, #5
    7da2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    7da6:	2201      	movs	r2, #1
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    7da8:	2000      	movs	r0, #0
    7daa:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    7dae:	f240 31ff 	movw	r1, #1023	; 0x3ff
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    7db2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        config = 10;
    7db6:	220a      	movs	r2, #10
    7db8:	e7d9      	b.n	7d6e <ADC_Module::setResolution(unsigned char)+0x2a>
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3));
    7dba:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7dbc:	015b      	lsls	r3, r3, #5
    7dbe:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7dc2:	2001      	movs	r0, #1
    7dc4:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    7dc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
        config = 16;
    7dcc:	2210      	movs	r2, #16
    7dce:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
        analog_max_val = 65535;
    7dd2:	e7cc      	b.n	7d6e <ADC_Module::setResolution(unsigned char)+0x2a>

00007dd4 <ADC_Module::analog_init()>:
{
    7dd4:	b538      	push	{r3, r4, r5, lr}
        else
        {
            CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
        }
#else
        if (ADC_num == 0)
    7dd6:	7e03      	ldrb	r3, [r0, #24]
        {
            SIM_SCGC6 |= SIM_SCGC6_ADC0;
    7dd8:	4a3d      	ldr	r2, [pc, #244]	; (7ed0 <ADC_Module::analog_init()+0xfc>)
    7dda:	4604      	mov	r4, r0
        if (ADC_num == 0)
    7ddc:	2b00      	cmp	r3, #0
    7dde:	d16a      	bne.n	7eb6 <ADC_Module::analog_init()+0xe2>
            SIM_SCGC6 |= SIM_SCGC6_ADC0;
    7de0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    7de2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    7de6:	63d3      	str	r3, [r2, #60]	; 0x3c
    atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_MUXSEL);
    7de8:	6b62      	ldr	r2, [r4, #52]	; 0x34
    //! Stops the internal reference
    /** This is called automatically by ADC_Module::setReference(ref) when ref is any other than REF_1V2
    */
    __attribute__((always_inline)) inline void stop()
    {
        VREF_SC = 0;
    7dea:	483a      	ldr	r0, [pc, #232]	; (7ed4 <ADC_Module::analog_init()+0x100>)
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7dec:	493a      	ldr	r1, [pc, #232]	; (7ed8 <ADC_Module::analog_init()+0x104>)
    pga_value = 1;
    7dee:	f240 4501 	movw	r5, #1025	; 0x401
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7df2:	0152      	lsls	r2, r2, #5
    7df4:	8465      	strh	r5, [r4, #34]	; 0x22
    7df6:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    sampling_speed = ADC_SAMPLING_SPEED::VERY_HIGH_SPEED;
    7dfa:	2504      	movs	r5, #4
    analog_res_bits = 0;
    7dfc:	2300      	movs	r3, #0
    sampling_speed = ADC_SAMPLING_SPEED::VERY_HIGH_SPEED;
    7dfe:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7e02:	2501      	movs	r5, #1
    analog_res_bits = 0;
    7e04:	76e3      	strb	r3, [r4, #27]
    analog_max_val = 0;
    7e06:	61e3      	str	r3, [r4, #28]
    analog_num_average = 0;
    7e08:	f884 3020 	strb.w	r3, [r4, #32]
    interrupts_enabled = false;
    7e0c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    calibrating = 0;
    7e10:	7663      	strb	r3, [r4, #25]
    fail_flag = ADC_ERROR::CLEAR; // clear all errors
    7e12:	82e3      	strh	r3, [r4, #22]
    num_measurements = 0;
    7e14:	7563      	strb	r3, [r4, #21]
    7e16:	f8c2 5190 	str.w	r5, [r2, #400]	; 0x190
    7e1a:	7043      	strb	r3, [r0, #1]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7e1c:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
        atomic::clearBitFlag(adc_regs.SC2, ADC_SC2_REFSEL(1));
    7e20:	6b62      	ldr	r2, [r4, #52]	; 0x34
        analog_reference_internal = ADC_REF_SOURCE::REF_DEFAULT;
    7e22:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7e26:	0152      	lsls	r2, r2, #5
    7e28:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7e2c:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
    __disable_irq();
    7e30:	b672      	cpsid	i
    atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_CAL);
    7e32:	6b62      	ldr	r2, [r4, #52]	; 0x34
    calibrating = 1;
    7e34:	7665      	strb	r5, [r4, #25]
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7e36:	0152      	lsls	r2, r2, #5
    7e38:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7e3c:	f8c2 349c 	str.w	r3, [r2, #1180]	; 0x49c
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7e40:	f8c2 5498 	str.w	r5, [r2, #1176]	; 0x498
    7e44:	f8c2 549c 	str.w	r5, [r2, #1180]	; 0x49c
    __enable_irq();
    7e48:	b662      	cpsie	i
    setResolution(10);
    7e4a:	210a      	movs	r1, #10
    7e4c:	4620      	mov	r0, r4
    7e4e:	f7ff ff79 	bl	7d44 <ADC_Module::setResolution(unsigned char)>
    if (calibrating)
    7e52:	7e63      	ldrb	r3, [r4, #25]
    init_calib = 1;
    7e54:	76a5      	strb	r5, [r4, #26]
    if (calibrating)
    7e56:	bb9b      	cbnz	r3, 7ec0 <ADC_Module::analog_init()+0xec>
        atomic::setBitFlag(adc_regs.SC3, ADC_SC3_AVGE);
    7e58:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7e5a:	015b      	lsls	r3, r3, #5
    7e5c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7e60:	2101      	movs	r1, #1
    analog_num_average = num;
    7e62:	2220      	movs	r2, #32
    7e64:	f8c3 1488 	str.w	r1, [r3, #1160]	; 0x488
    setConversionSpeed(ADC_CONVERSION_SPEED::LOW_SPEED);
    7e68:	4620      	mov	r0, r4
    7e6a:	f8c3 1484 	str.w	r1, [r3, #1156]	; 0x484
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    7e6e:	f8c3 1480 	str.w	r1, [r3, #1152]	; 0x480
    analog_num_average = num;
    7e72:	f884 2020 	strb.w	r2, [r4, #32]
    setConversionSpeed(ADC_CONVERSION_SPEED::LOW_SPEED);
    7e76:	f7ff fe4d 	bl	7b14 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
    if (calibrating)
    7e7a:	7e63      	ldrb	r3, [r4, #25]
    7e7c:	bb23      	cbnz	r3, 7ec8 <ADC_Module::analog_init()+0xf4>
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    7e7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7e80:	0159      	lsls	r1, r3, #5
    7e82:	f101 4384 	add.w	r3, r1, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7e86:	2201      	movs	r2, #1
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    7e88:	2000      	movs	r0, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7e8a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    7e8e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    7e92:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
    sampling_speed = speed;
    7e96:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __disable_irq();
    7e9a:	b672      	cpsid	i
    atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_CAL);
    7e9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    calibrating = 1;
    7e9e:	7662      	strb	r2, [r4, #25]
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7ea0:	015b      	lsls	r3, r3, #5
    7ea2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7ea6:	f8c3 049c 	str.w	r0, [r3, #1180]	; 0x49c
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7eaa:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
    7eae:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
    __enable_irq();
    7eb2:	b662      	cpsie	i
}
    7eb4:	bd38      	pop	{r3, r4, r5, pc}
        }
        else
        {
            SIM_SCGC3 |= SIM_SCGC3_ADC1;
    7eb6:	6b13      	ldr	r3, [r2, #48]	; 0x30
    7eb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    7ebc:	6313      	str	r3, [r2, #48]	; 0x30
    7ebe:	e793      	b.n	7de8 <ADC_Module::analog_init()+0x14>
        wait_for_cal();
    7ec0:	4620      	mov	r0, r4
    7ec2:	f7ff fec9 	bl	7c58 <ADC_Module::wait_for_cal()>
    7ec6:	e7c7      	b.n	7e58 <ADC_Module::analog_init()+0x84>
        wait_for_cal();
    7ec8:	f7ff fec6 	bl	7c58 <ADC_Module::wait_for_cal()>
    7ecc:	e7d7      	b.n	7e7e <ADC_Module::analog_init()+0xaa>
    7ece:	bf00      	nop
    7ed0:	40048000 	.word	0x40048000
    7ed4:	40074000 	.word	0x40074000
    7ed8:	42fa0000 	.word	0x42fa0000

00007edc <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)>:
ADC_Module::ADC_Module(uint8_t ADC_number,
    7edc:	b510      	push	{r4, lr}
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    7ede:	2900      	cmp	r1, #0
                       ADC_REGS_t &a_adc_regs) : ADC_num(ADC_number), channel2sc1a(a_channel2sc1a)
    7ee0:	6282      	str	r2, [r0, #40]	; 0x28
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    7ee2:	4a09      	ldr	r2, [pc, #36]	; (7f08 <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)+0x2c>)
                                                 diff_table(a_diff_table)
    7ee4:	6303      	str	r3, [r0, #48]	; 0x30
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    7ee6:	bf0c      	ite	eq
    7ee8:	2339      	moveq	r3, #57	; 0x39
    7eea:	233a      	movne	r3, #58	; 0x3a
                       ADC_REGS_t &a_adc_regs) : ADC_num(ADC_number), channel2sc1a(a_channel2sc1a)
    7eec:	7601      	strb	r1, [r0, #24]
                                                 IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC1 : IRQ_NUMBER_t::IRQ_ADC0)
    7eee:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    7ef2:	4906      	ldr	r1, [pc, #24]	; (7f0c <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)+0x30>)
ADC_Module::ADC_Module(uint8_t ADC_number,
    7ef4:	9b02      	ldr	r3, [sp, #8]
                                                 adc_regs(a_adc_regs)
    7ef6:	6343      	str	r3, [r0, #52]	; 0x34
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    7ef8:	bf18      	it	ne
    7efa:	4611      	movne	r1, r2
ADC_Module::ADC_Module(uint8_t ADC_number,
    7efc:	4604      	mov	r4, r0
    7efe:	6381      	str	r1, [r0, #56]	; 0x38
    analog_init();
    7f00:	f7ff ff68 	bl	7dd4 <ADC_Module::analog_init()>
}
    7f04:	4620      	mov	r0, r4
    7f06:	bd10      	pop	{r4, pc}
    7f08:	40036038 	.word	0x40036038
    7f0c:	40036010 	.word	0x40036010

00007f10 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>:
{
    7f10:	b538      	push	{r3, r4, r5, lr}
    if (calibrating)
    7f12:	7e43      	ldrb	r3, [r0, #25]
{
    7f14:	4605      	mov	r5, r0
    7f16:	460c      	mov	r4, r1
    if (calibrating)
    7f18:	b9a3      	cbnz	r3, 7f44 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x34>
    switch (speed)
    7f1a:	2c04      	cmp	r4, #4
    7f1c:	d80f      	bhi.n	7f3e <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x2e>
    7f1e:	e8df f004 	tbb	[pc, r4]
    7f22:	2d1e      	.short	0x2d1e
    7f24:	033c      	.short	0x033c
    7f26:	14          	.byte	0x14
    7f27:	00          	.byte	0x00
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);    // long sampling time enable
    7f28:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7f2a:	015a      	lsls	r2, r3, #5
    7f2c:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7f30:	2101      	movs	r1, #1
    7f32:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
    7f36:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    7f3a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    sampling_speed = speed;
    7f3e:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    7f42:	bd38      	pop	{r3, r4, r5, pc}
        wait_for_cal();
    7f44:	f7ff fe88 	bl	7c58 <ADC_Module::wait_for_cal()>
    7f48:	e7e7      	b.n	7f1a <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0xa>
        atomic::clearBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP); // shortest sampling time
    7f4a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7f4c:	015b      	lsls	r3, r3, #5
    7f4e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7f52:	2200      	movs	r2, #0
    7f54:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    sampling_speed = speed;
    7f58:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    7f5c:	bd38      	pop	{r3, r4, r5, pc}
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);      // long sampling time enable
    7f5e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7f60:	015a      	lsls	r2, r3, #5
    7f62:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7f66:	2101      	movs	r1, #1
    7f68:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7f6c:	2100      	movs	r1, #0
    7f6e:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    7f72:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    sampling_speed = speed;
    7f76:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    7f7a:	bd38      	pop	{r3, r4, r5, pc}
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    7f7c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7f7e:	015a      	lsls	r2, r3, #5
    7f80:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7f84:	2101      	movs	r1, #1
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    7f86:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7f88:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    7f8c:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    7f90:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    sampling_speed = speed;
    7f94:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    7f98:	bd38      	pop	{r3, r4, r5, pc}
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    7f9a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7f9c:	015a      	lsls	r2, r3, #5
    7f9e:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7fa2:	2101      	movs	r1, #1
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    7fa4:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7fa6:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    7faa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    7fae:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
    sampling_speed = speed;
    7fb2:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    7fb6:	bd38      	pop	{r3, r4, r5, pc}

00007fb8 <ADC_Module::setAveraging(unsigned char)>:
{
    7fb8:	b538      	push	{r3, r4, r5, lr}
    if (calibrating)
    7fba:	7e43      	ldrb	r3, [r0, #25]
{
    7fbc:	4604      	mov	r4, r0
    7fbe:	460d      	mov	r5, r1
    if (calibrating)
    7fc0:	bb2b      	cbnz	r3, 800e <ADC_Module::setAveraging(unsigned char)+0x56>
    if (num <= 1)
    7fc2:	2d01      	cmp	r5, #1
        atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_AVGE);
    7fc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    if (num <= 1)
    7fc6:	d918      	bls.n	7ffa <ADC_Module::setAveraging(unsigned char)+0x42>
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7fc8:	015b      	lsls	r3, r3, #5
    7fca:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    7fce:	f503 6390 	add.w	r3, r3, #1152	; 0x480
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7fd2:	2101      	movs	r1, #1
        if (num <= 4)
    7fd4:	2d04      	cmp	r5, #4
    7fd6:	6099      	str	r1, [r3, #8]
    7fd8:	d806      	bhi.n	7fe8 <ADC_Module::setAveraging(unsigned char)+0x30>
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7fda:	2100      	movs	r1, #0
    7fdc:	6059      	str	r1, [r3, #4]
            num = 4;
    7fde:	2204      	movs	r2, #4
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    7fe0:	6019      	str	r1, [r3, #0]
    analog_num_average = num;
    7fe2:	f884 2020 	strb.w	r2, [r4, #32]
}
    7fe6:	bd38      	pop	{r3, r4, r5, pc}
        else if (num <= 8)
    7fe8:	2d08      	cmp	r5, #8
    7fea:	d913      	bls.n	8014 <ADC_Module::setAveraging(unsigned char)+0x5c>
        else if (num <= 16)
    7fec:	2d10      	cmp	r5, #16
    7fee:	d818      	bhi.n	8022 <ADC_Module::setAveraging(unsigned char)+0x6a>
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    7ff0:	2200      	movs	r2, #0
    7ff2:	601a      	str	r2, [r3, #0]
            num = 16;
    7ff4:	2210      	movs	r2, #16
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    7ff6:	6059      	str	r1, [r3, #4]
    }
    7ff8:	e7f3      	b.n	7fe2 <ADC_Module::setAveraging(unsigned char)+0x2a>
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7ffa:	015b      	lsls	r3, r3, #5
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7ffc:	2100      	movs	r1, #0
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7ffe:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        num = 0;
    8002:	460a      	mov	r2, r1
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8004:	f8c3 1488 	str.w	r1, [r3, #1160]	; 0x488
    analog_num_average = num;
    8008:	f884 2020 	strb.w	r2, [r4, #32]
}
    800c:	bd38      	pop	{r3, r4, r5, pc}
        wait_for_cal();
    800e:	f7ff fe23 	bl	7c58 <ADC_Module::wait_for_cal()>
    8012:	e7d6      	b.n	7fc2 <ADC_Module::setAveraging(unsigned char)+0xa>
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8014:	2000      	movs	r0, #0
            num = 8;
    8016:	2208      	movs	r2, #8
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8018:	6019      	str	r1, [r3, #0]
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    801a:	6058      	str	r0, [r3, #4]
    analog_num_average = num;
    801c:	f884 2020 	strb.w	r2, [r4, #32]
}
    8020:	bd38      	pop	{r3, r4, r5, pc}
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8022:	6059      	str	r1, [r3, #4]
            num = 32;
    8024:	2220      	movs	r2, #32
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    8026:	6019      	str	r1, [r3, #0]
    }
    8028:	e7db      	b.n	7fe2 <ADC_Module::setAveraging(unsigned char)+0x2a>
    802a:	bf00      	nop

0000802c <ADC_Module::checkPin(unsigned char)>:

// check whether the pin is a valid analog pin
bool ADC_Module::checkPin(uint8_t pin)
{

    if (pin > ADC_MAX_PIN)
    802c:	292b      	cmp	r1, #43	; 0x2b
    802e:	d807      	bhi.n	8040 <ADC_Module::checkPin(unsigned char)+0x14>
    {
        return false; // all others are invalid
    }

    // translate pin number to SC1A number, that also contains MUX a or b info.
    const uint8_t sc1a_pin = channel2sc1a[pin];
    8030:	6a83      	ldr	r3, [r0, #40]	; 0x28

    // check for valid pin
    if ((sc1a_pin & ADC_SC1A_CHANNELS) == ADC_SC1A_PIN_INVALID)
    8032:	5c58      	ldrb	r0, [r3, r1]
    8034:	f000 001f 	and.w	r0, r0, #31
    8038:	381f      	subs	r0, #31
    803a:	bf18      	it	ne
    803c:	2001      	movne	r0, #1
    803e:	4770      	bx	lr
        return false; // all others are invalid
    8040:	2000      	movs	r0, #0
    {
        return false; // all others are invalid
    }

    return true;
}
    8042:	4770      	bx	lr

00008044 <ADC_Module::startReadFast(unsigned char)>:
// It doesn't change the continuous conversion bit
void ADC_Module::startReadFast(uint8_t pin)
{

    // translate pin number to SC1A number, that also contains MUX a or b info.
    const uint8_t sc1a_pin = channel2sc1a[pin];
    8044:	6a83      	ldr	r3, [r0, #40]	; 0x28

#ifdef ADC_TEENSY_4
// Teensy 4 has no a or b channels
#else
    if (sc1a_pin & ADC_SC1A_PIN_MUX)
    8046:	565a      	ldrsb	r2, [r3, r1]
    const uint8_t sc1a_pin = channel2sc1a[pin];
    8048:	5c5b      	ldrb	r3, [r3, r1]
    if (sc1a_pin & ADC_SC1A_PIN_MUX)
    804a:	2a00      	cmp	r2, #0
    { // mux a
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_MUXSEL);
    804c:	6b42      	ldr	r2, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    804e:	ea4f 1242 	mov.w	r2, r2, lsl #5
    8052:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8056:	bfb4      	ite	lt
    8058:	2100      	movlt	r1, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    805a:	2101      	movge	r1, #1
    805c:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_MUXSEL);
    }
#endif

    // select pin for single-ended mode and start conversion, enable interrupts if requested
    __disable_irq();
    8060:	b672      	cpsid	i
#ifdef ADC_TEENSY_4
    adc_regs.HC0 = (sc1a_pin & ADC_SC1A_CHANNELS) + interrupts_enabled * ADC_HC_AIEN;
#else
    adc_regs.SC1A = (sc1a_pin & ADC_SC1A_CHANNELS) + atomic::getBitFlag(adc_regs.SC1A, ADC_SC1_AIEN) * ADC_SC1_AIEN;
    8062:	6b41      	ldr	r1, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8064:	014a      	lsls	r2, r1, #5
    8066:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    806a:	f003 031f 	and.w	r3, r3, #31
        return (volatile bool)bitband_address(reg, 31 - __builtin_clzl(flag));
    806e:	6992      	ldr	r2, [r2, #24]
    8070:	3a00      	subs	r2, #0
    8072:	bf18      	it	ne
    8074:	2201      	movne	r2, #1
    8076:	eb03 1382 	add.w	r3, r3, r2, lsl #6
    807a:	600b      	str	r3, [r1, #0]
#endif
    __enable_irq();
    807c:	b662      	cpsie	i
}
    807e:	4770      	bx	lr

00008080 <ADC_Module::startContinuous(unsigned char)>:
/* Starts continuous conversion on the pin
 * It returns as soon as the ADC is set, use analogReadContinuous() to read the values
 * Set the resolution, number of averages and voltage reference using the appropriate functions BEFORE calling this function
*/
bool ADC_Module::startContinuous(uint8_t pin)
{
    8080:	b550      	push	{r4, r6, lr}
    if (pin > ADC_MAX_PIN)
    8082:	292b      	cmp	r1, #43	; 0x2b
{
    8084:	b083      	sub	sp, #12
    8086:	4604      	mov	r4, r0
    if (pin > ADC_MAX_PIN)
    8088:	d817      	bhi.n	80ba <ADC_Module::startContinuous(unsigned char)+0x3a>
    const uint8_t sc1a_pin = channel2sc1a[pin];
    808a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((sc1a_pin & ADC_SC1A_CHANNELS) == ADC_SC1A_PIN_INVALID)
    808c:	5c5b      	ldrb	r3, [r3, r1]
    808e:	f003 031f 	and.w	r3, r3, #31
    8092:	2b1f      	cmp	r3, #31
    8094:	d011      	beq.n	80ba <ADC_Module::startContinuous(unsigned char)+0x3a>
        fail_flag |= ADC_ERROR::WRONG_PIN;
        return false;
    }

    // check for calibration before setting channels,
    if (calibrating)
    8096:	7e43      	ldrb	r3, [r0, #25]
    8098:	b9bb      	cbnz	r3, 80ca <ADC_Module::startContinuous(unsigned char)+0x4a>
        atomic::setBitFlag(adc_regs.SC3, ADC_SC3_ADCO);
    809a:	6b63      	ldr	r3, [r4, #52]	; 0x34
        wait_for_cal();

    // increase the counter of measurements
    num_measurements++;
    809c:	7d62      	ldrb	r2, [r4, #21]
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    809e:	015b      	lsls	r3, r3, #5
    80a0:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    80a4:	3201      	adds	r2, #1
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    80a6:	2601      	movs	r6, #1
    80a8:	7562      	strb	r2, [r4, #21]

    // set continuous conversion flag
    continuousMode();

    startReadFast(pin);
    80aa:	4620      	mov	r0, r4
    80ac:	f8c3 648c 	str.w	r6, [r3, #1164]	; 0x48c
    80b0:	f7ff ffc8 	bl	8044 <ADC_Module::startReadFast(unsigned char)>

    return true;
    80b4:	4630      	mov	r0, r6
}
    80b6:	b003      	add	sp, #12
    80b8:	bd50      	pop	{r4, r6, pc}
    80ba:	8ae3      	ldrh	r3, [r4, #22]
    80bc:	b29b      	uxth	r3, r3
        return false;
    80be:	2000      	movs	r0, #0
    80c0:	f043 0304 	orr.w	r3, r3, #4
    80c4:	82e3      	strh	r3, [r4, #22]
}
    80c6:	b003      	add	sp, #12
    80c8:	bd50      	pop	{r4, r6, pc}
    80ca:	9101      	str	r1, [sp, #4]
        wait_for_cal();
    80cc:	f7ff fdc4 	bl	7c58 <ADC_Module::wait_for_cal()>
    80d0:	9901      	ldr	r1, [sp, #4]
    80d2:	e7e2      	b.n	809a <ADC_Module::startContinuous(unsigned char)+0x1a>

000080d4 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    80d4:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    80d8:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    80da:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    80de:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    80e0:	d101      	bne.n	80e6 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    80e2:	6883      	ldr	r3, [r0, #8]
    80e4:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    80e6:	f000 ba77 	b.w	85d8 <EventResponder::triggerEventNotImmediate()>
    80ea:	bf00      	nop

000080ec <SPIClass::dma_rxisr()>:


//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
    80ec:	b470      	push	{r4, r5, r6}
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    80ee:	6b01      	ldr	r1, [r0, #48]	; 0x30
    80f0:	4a4a      	ldr	r2, [pc, #296]	; (821c <SPIClass::dma_rxisr()+0x130>)
    80f2:	7909      	ldrb	r1, [r1, #4]
    80f4:	77d1      	strb	r1, [r2, #31]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    80f6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    80f8:	7909      	ldrb	r1, [r1, #4]
    80fa:	7711      	strb	r1, [r2, #28]
    80fc:	6b01      	ldr	r1, [r0, #48]	; 0x30
    80fe:	7909      	ldrb	r1, [r1, #4]
    8100:	7711      	strb	r1, [r2, #28]
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    8102:	6a82      	ldr	r2, [r0, #40]	; 0x28
void SPIClass::dma_rxisr(void) {
    8104:	4603      	mov	r3, r0
	if (_dma_count_remaining) {
    8106:	b32a      	cbz	r2, 8154 <SPIClass::dma_rxisr()+0x68>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    8108:	6841      	ldr	r1, [r0, #4]
    810a:	68c9      	ldr	r1, [r1, #12]
    810c:	428a      	cmp	r2, r1
    810e:	d943      	bls.n	8198 <SPIClass::dma_rxisr()+0xac>
			_dma_count_remaining -= hardware().max_dma_count;
    8110:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    8112:	6b00      	ldr	r0, [r0, #48]	; 0x30
			_dma_count_remaining -= hardware().max_dma_count;
    8114:	1a52      	subs	r2, r2, r1
    8116:	6821      	ldr	r1, [r4, #0]
    8118:	629a      	str	r2, [r3, #40]	; 0x28
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    811a:	680d      	ldr	r5, [r1, #0]
    811c:	f103 0424 	add.w	r4, r3, #36	; 0x24
    8120:	42a5      	cmp	r5, r4
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    8122:	f04f 0201 	mov.w	r2, #1
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    8126:	d059      	beq.n	81dc <SPIClass::dma_rxisr()+0xf0>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    8128:	681c      	ldr	r4, [r3, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    812a:	68e5      	ldr	r5, [r4, #12]
    812c:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    8130:	680d      	ldr	r5, [r1, #0]
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    8132:	d129      	bne.n	8188 <SPIClass::dma_rxisr()+0x9c>
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    8134:	782d      	ldrb	r5, [r5, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    8136:	680e      	ldr	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    8138:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    813c:	3601      	adds	r6, #1
    813e:	600e      	str	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    8140:	6365      	str	r5, [r4, #52]	; 0x34
		DMA_SERQ = channel;
    8142:	4936      	ldr	r1, [pc, #216]	; (821c <SPIClass::dma_rxisr()+0x130>)
    8144:	7900      	ldrb	r0, [r0, #4]
    8146:	76c8      	strb	r0, [r1, #27]
			}
		}
		_dmaRX->enable();
		if (should_reenable_tx)
    8148:	b112      	cbz	r2, 8150 <SPIClass::dma_rxisr()+0x64>
    814a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    814c:	791b      	ldrb	r3, [r3, #4]
    814e:	76cb      	strb	r3, [r1, #27]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();

	}
}
    8150:	bc70      	pop	{r4, r5, r6}
    8152:	4770      	bx	lr
    8154:	6801      	ldr	r1, [r0, #0]
		port().SR = 0xFF0F0000;
    8156:	4c32      	ldr	r4, [pc, #200]	; (8220 <SPIClass::dma_rxisr()+0x134>)
		_dma_event_responder->triggerEvent();
    8158:	6b40      	ldr	r0, [r0, #52]	; 0x34
		port().RSER = 0;
    815a:	630a      	str	r2, [r1, #48]	; 0x30
		port().SR = 0xFF0F0000;
    815c:	62cc      	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    815e:	68cc      	ldr	r4, [r1, #12]
    8160:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
    8164:	60cc      	str	r4, [r1, #12]
		_dma_event_responder->triggerEvent();
    8166:	6804      	ldr	r4, [r0, #0]
    8168:	492e      	ldr	r1, [pc, #184]	; (8224 <SPIClass::dma_rxisr()+0x138>)
    816a:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    816c:	f04f 0c03 	mov.w	ip, #3
    8170:	428c      	cmp	r4, r1
    8172:	f883 c025 	strb.w	ip, [r3, #37]	; 0x25
		_dma_event_responder->triggerEvent();
    8176:	d139      	bne.n	81ec <SPIClass::dma_rxisr()+0x100>
		if (_type == EventTypeImmediate) {
    8178:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    817a:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    817c:	2b02      	cmp	r3, #2
		_data = data;
    817e:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    8180:	d138      	bne.n	81f4 <SPIClass::dma_rxisr()+0x108>
}
    8182:	bc70      	pop	{r4, r5, r6}
			(*_function)(*this);
    8184:	6883      	ldr	r3, [r0, #8]
    8186:	4718      	bx	r3
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    8188:	882d      	ldrh	r5, [r5, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    818a:	680e      	ldr	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    818c:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    8190:	3602      	adds	r6, #2
    8192:	600e      	str	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    8194:	6365      	str	r5, [r4, #52]	; 0x34
    8196:	e7d4      	b.n	8142 <SPIClass::dma_rxisr()+0x56>
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    8198:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    819a:	6809      	ldr	r1, [r1, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    819c:	8bcc      	ldrh	r4, [r1, #30]
    819e:	0426      	lsls	r6, r4, #16
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    81a0:	f102 30ff 	add.w	r0, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    81a4:	d431      	bmi.n	820a <SPIClass::dma_rxisr()+0x11e>
		tcd->BITER = len & 0x7fff;
    81a6:	f3c0 000e 	ubfx	r0, r0, #0, #15
    81aa:	83c8      	strh	r0, [r1, #30]
	tcd->CITER = tcd->BITER; 
    81ac:	8bcc      	ldrh	r4, [r1, #30]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    81ae:	6b18      	ldr	r0, [r3, #48]	; 0x30
	tcd->CITER = tcd->BITER; 
    81b0:	b2a4      	uxth	r4, r4
    81b2:	82cc      	strh	r4, [r1, #22]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    81b4:	6804      	ldr	r4, [r0, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    81b6:	8be5      	ldrh	r5, [r4, #30]
    81b8:	042d      	lsls	r5, r5, #16
    81ba:	d41e      	bmi.n	81fa <SPIClass::dma_rxisr()+0x10e>
		tcd->BITER = len & 0x7fff;
    81bc:	f3c2 050e 	ubfx	r5, r2, #0, #15
    81c0:	83e5      	strh	r5, [r4, #30]
	tcd->CITER = tcd->BITER; 
    81c2:	8be5      	ldrh	r5, [r4, #30]
    81c4:	b2ad      	uxth	r5, r5
    81c6:	82e5      	strh	r5, [r4, #22]
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    81c8:	680d      	ldr	r5, [r1, #0]
			_dma_count_remaining = 0;
    81ca:	2400      	movs	r4, #0
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    81cc:	3a01      	subs	r2, #1
			_dma_count_remaining = 0;
    81ce:	629c      	str	r4, [r3, #40]	; 0x28
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    81d0:	f103 0424 	add.w	r4, r3, #36	; 0x24
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    81d4:	bf18      	it	ne
    81d6:	2201      	movne	r2, #1
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    81d8:	42a5      	cmp	r5, r4
    81da:	d1a5      	bne.n	8128 <SPIClass::dma_rxisr()+0x3c>
    81dc:	6819      	ldr	r1, [r3, #0]
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    81de:	68cc      	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    81e0:	f893 4024 	ldrb.w	r4, [r3, #36]	; 0x24
    81e4:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
    81e8:	634c      	str	r4, [r1, #52]	; 0x34
    81ea:	e7aa      	b.n	8142 <SPIClass::dma_rxisr()+0x56>
		_dma_event_responder->triggerEvent();
    81ec:	4623      	mov	r3, r4
    81ee:	4611      	mov	r1, r2
}
    81f0:	bc70      	pop	{r4, r5, r6}
		_dma_event_responder->triggerEvent();
    81f2:	4718      	bx	r3
}
    81f4:	bc70      	pop	{r4, r5, r6}
			triggerEventNotImmediate();
    81f6:	f000 b9ef 	b.w	85d8 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    81fa:	8be5      	ldrh	r5, [r4, #30]
    81fc:	f3c2 0608 	ubfx	r6, r2, #0, #9
    8200:	f405 457e 	and.w	r5, r5, #65024	; 0xfe00
    8204:	4335      	orrs	r5, r6
    8206:	83e5      	strh	r5, [r4, #30]
    8208:	e7db      	b.n	81c2 <SPIClass::dma_rxisr()+0xd6>
    820a:	8bcc      	ldrh	r4, [r1, #30]
    820c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    8210:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    8214:	4320      	orrs	r0, r4
    8216:	83c8      	strh	r0, [r1, #30]
    8218:	e7c8      	b.n	81ac <SPIClass::dma_rxisr()+0xc0>
    821a:	bf00      	nop
    821c:	40008000 	.word	0x40008000
    8220:	ff0f0000 	.word	0xff0f0000
    8224:	000080d5 	.word	0x000080d5

00008228 <_spi_dma_rxISR0()>:
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    8228:	b508      	push	{r3, lr}
    822a:	4802      	ldr	r0, [pc, #8]	; (8234 <_spi_dma_rxISR0()+0xc>)
    822c:	f7ff ff5e 	bl	80ec <SPIClass::dma_rxisr()>
    8230:	bd08      	pop	{r3, pc}
    8232:	bf00      	nop
    8234:	1fffb490 	.word	0x1fffb490

00008238 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v>:
		: port_addr(myport), hardware_addr(myhardware) {
    8238:	4a0a      	ldr	r2, [pc, #40]	; (8264 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x2c>)
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);
    823a:	490b      	ldr	r1, [pc, #44]	; (8268 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x30>)
    823c:	2300      	movs	r3, #0
}
    823e:	b410      	push	{r4}
    8240:	4c0a      	ldr	r4, [pc, #40]	; (826c <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x34>)
    8242:	6093      	str	r3, [r2, #8]
    8244:	8493      	strh	r3, [r2, #36]	; 0x24
    8246:	6014      	str	r4, [r2, #0]
    8248:	6051      	str	r1, [r2, #4]
    824a:	bc10      	pop	{r4}
    824c:	60d3      	str	r3, [r2, #12]
    824e:	6193      	str	r3, [r2, #24]
    8250:	6293      	str	r3, [r2, #40]	; 0x28
    8252:	62d3      	str	r3, [r2, #44]	; 0x2c
    8254:	6313      	str	r3, [r2, #48]	; 0x30
    8256:	6353      	str	r3, [r2, #52]	; 0x34
    8258:	6113      	str	r3, [r2, #16]
    825a:	6153      	str	r3, [r2, #20]
    825c:	61d3      	str	r3, [r2, #28]
    825e:	6213      	str	r3, [r2, #32]
    8260:	4770      	bx	lr
    8262:	bf00      	nop
    8264:	1fffb490 	.word	0x1fffb490
    8268:	00014334 	.word	0x00014334
    826c:	4002c000 	.word	0x4002c000

00008270 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)>:
#include "FilterOnePole.h"
#include "FloatDefine.h"

FilterOnePole::FilterOnePole( FILTER_TYPE ft, float fc, float initialValue ) {
    8270:	b538      	push	{r3, r4, r5, lr}
    8272:	4604      	mov	r4, r0
    8274:	4608      	mov	r0, r1
  setFilter( ft, fc, initialValue );
}

void FilterOnePole::setFilter( FILTER_TYPE ft, float fc, float initialValue ) {
  FT = ft;
    8276:	7020      	strb	r0, [r4, #0]

  return output();
}

void FilterOnePole::setFrequency( float newFrequency ) {
  setTau( 1.0/(TWO_PI*newFrequency ) ); // τ=1/ω
    8278:	490a      	ldr	r1, [pc, #40]	; (82a4 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)+0x34>)
    827a:	4610      	mov	r0, r2
FilterOnePole::FilterOnePole( FILTER_TYPE ft, float fc, float initialValue ) {
    827c:	461d      	mov	r5, r3
  setTau( 1.0/(TWO_PI*newFrequency ) ); // τ=1/ω
    827e:	f003 ff5d 	bl	c13c <__aeabi_fmul>
    8282:	4601      	mov	r1, r0
    8284:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    8288:	f004 f80c 	bl	c2a4 <__aeabi_fdiv>
}

void FilterOnePole::setTau( float newTau ) {
  TauUS = newTau * 1e6;
    828c:	4906      	ldr	r1, [pc, #24]	; (82a8 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)+0x38>)
    828e:	f003 ff55 	bl	c13c <__aeabi_fmul>
  Y = initialValue;
    8292:	60e5      	str	r5, [r4, #12]
  TauUS = newTau * 1e6;
    8294:	6060      	str	r0, [r4, #4]
  Ylast = initialValue;
    8296:	6125      	str	r5, [r4, #16]
  X = initialValue;
    8298:	6165      	str	r5, [r4, #20]
  LastUS = micros();
    829a:	f001 fa6d 	bl	9778 <micros>
    829e:	61e0      	str	r0, [r4, #28]
}
    82a0:	4620      	mov	r0, r4
    82a2:	bd38      	pop	{r3, r4, r5, pc}
    82a4:	40c90fdb 	.word	0x40c90fdb
    82a8:	49742400 	.word	0x49742400

000082ac <FilterOnePole::output()>:
}

float FilterOnePole::output() {
    // figure out which button to read
  switch (FT) {
    82ac:	7803      	ldrb	r3, [r0, #0]
float FilterOnePole::output() {
    82ae:	b510      	push	{r4, lr}
    82b0:	4604      	mov	r4, r0
  switch (FT) {
    82b2:	2b03      	cmp	r3, #3
    82b4:	d821      	bhi.n	82fa <FilterOnePole::output()+0x4e>
    82b6:	e8df f003 	tbb	[pc, r3]
    82ba:	1e19      	.short	0x1e19
    82bc:	0211      	.short	0x0211
      // highpass is the _difference_
      return X-Y;
      break;
    case DIFFERENTIATOR:
      // like a highpass, but normalize
      return (X-Y)/(TauUS/1.0e6);
    82be:	68c1      	ldr	r1, [r0, #12]
    82c0:	6940      	ldr	r0, [r0, #20]
    82c2:	f003 fe31 	bl	bf28 <__aeabi_fsub>
    82c6:	490e      	ldr	r1, [pc, #56]	; (8300 <FilterOnePole::output()+0x54>)
    82c8:	4603      	mov	r3, r0
    82ca:	6860      	ldr	r0, [r4, #4]
    82cc:	461c      	mov	r4, r3
    82ce:	f003 ffe9 	bl	c2a4 <__aeabi_fdiv>
    82d2:	4601      	mov	r1, r0
    82d4:	4620      	mov	r0, r4
    82d6:	f003 ffe5 	bl	c2a4 <__aeabi_fdiv>
      break;
    default:
      // should never get to here, return 0 just in case
      return 0;
  }
}
    82da:	bd10      	pop	{r4, pc}
      return Y * (TauUS/1.0e6);
    82dc:	4908      	ldr	r1, [pc, #32]	; (8300 <FilterOnePole::output()+0x54>)
    82de:	6840      	ldr	r0, [r0, #4]
    82e0:	f003 ffe0 	bl	c2a4 <__aeabi_fdiv>
    82e4:	68e1      	ldr	r1, [r4, #12]
    82e6:	f003 ff29 	bl	c13c <__aeabi_fmul>
}
    82ea:	bd10      	pop	{r4, pc}
      return X-Y;
    82ec:	68c1      	ldr	r1, [r0, #12]
    82ee:	6940      	ldr	r0, [r0, #20]
    82f0:	f003 fe1a 	bl	bf28 <__aeabi_fsub>
}
    82f4:	bd10      	pop	{r4, pc}
      return Y; 
    82f6:	68c0      	ldr	r0, [r0, #12]
}
    82f8:	bd10      	pop	{r4, pc}
  switch (FT) {
    82fa:	2000      	movs	r0, #0
}
    82fc:	bd10      	pop	{r4, pc}
    82fe:	bf00      	nop
    8300:	49742400 	.word	0x49742400

00008304 <FilterOnePole::input(float)>:
float FilterOnePole::input( float inVal ) {
    8304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8306:	4604      	mov	r4, r0
    8308:	460e      	mov	r6, r1
  long time = micros();
    830a:	f001 fa35 	bl	9778 <micros>
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    830e:	69e3      	ldr	r3, [r4, #28]
  long time = micros();
    8310:	4605      	mov	r5, r0
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    8312:	1ac0      	subs	r0, r0, r3
    8314:	f003 febe 	bl	c094 <__aeabi_i2f>
  Ylast = Y;
    8318:	68e7      	ldr	r7, [r4, #12]
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    831a:	61a0      	str	r0, [r4, #24]
    831c:	4601      	mov	r1, r0
  LastUS = time;                      // update this now
    831e:	61e5      	str	r5, [r4, #28]
  TauSamps = TauUS / ElapsedUS;
    8320:	6860      	ldr	r0, [r4, #4]
  X = inVal;                          // this is now the most recent input value
    8322:	6166      	str	r6, [r4, #20]
  Ylast = Y;
    8324:	6127      	str	r7, [r4, #16]
  TauSamps = TauUS / ElapsedUS;
    8326:	f003 ffbd 	bl	c2a4 <__aeabi_fdiv>
    832a:	4601      	mov	r1, r0
    832c:	60a0      	str	r0, [r4, #8]
  ampFactor = exp( -1.0 / TauSamps );      // this is 1 if called quickly
    832e:	480e      	ldr	r0, [pc, #56]	; (8368 <FilterOnePole::input(float)+0x64>)
    8330:	f003 ffb8 	bl	c2a4 <__aeabi_fdiv>
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
    8334:	f003 fa02 	bl	b73c <expf>
    8338:	4605      	mov	r5, r0
  Y = (1.0-ampFactor)*X + ampFactor*Ylast;     // set the new value
    833a:	4601      	mov	r1, r0
    833c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    8340:	f003 fdf2 	bl	bf28 <__aeabi_fsub>
    8344:	4631      	mov	r1, r6
    8346:	f003 fef9 	bl	c13c <__aeabi_fmul>
    834a:	4629      	mov	r1, r5
    834c:	4606      	mov	r6, r0
    834e:	4638      	mov	r0, r7
    8350:	f003 fef4 	bl	c13c <__aeabi_fmul>
    8354:	4601      	mov	r1, r0
    8356:	4630      	mov	r0, r6
    8358:	f003 fde8 	bl	bf2c <__addsf3>
    835c:	60e0      	str	r0, [r4, #12]
  return output();
    835e:	4620      	mov	r0, r4
}
    8360:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return output();
    8364:	f7ff bfa2 	b.w	82ac <FilterOnePole::output()>
    8368:	bf800000 	.word	0xbf800000

0000836c <Serial_CAN::send(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char const*)>:
*/

#define canSerial Serial3

unsigned char Serial_CAN::send(unsigned long id, uchar extend, uchar rtrBit, uchar len, const uchar *buf)
{
    836c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unsigned char dta[14] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    8370:	4811      	ldr	r0, [pc, #68]	; (83b8 <Serial_CAN::send(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char const*)+0x4c>)
{
    8372:	4696      	mov	lr, r2
    8374:	469c      	mov	ip, r3
    
    dta[0] = id>>24;        // id3
    dta[1] = id>>16&0xff;   // id2
    8376:	ea4f 4811 	mov.w	r8, r1, lsr #16
    dta[2] = id>>8&0xff;    // id1
    837a:	ba4f      	rev16	r7, r1
    dta[0] = id>>24;        // id3
    837c:	0e0c      	lsrs	r4, r1, #24
    unsigned char dta[14] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    837e:	c80f      	ldmia	r0, {r0, r1, r2, r3}
{
    8380:	b084      	sub	sp, #16
    unsigned char dta[14] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    8382:	466d      	mov	r5, sp
    8384:	c507      	stmia	r5!, {r0, r1, r2}
{
    8386:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
    unsigned char dta[14] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    838a:	802b      	strh	r3, [r5, #0]
    dta[1] = id>>16&0xff;   // id2
    838c:	f88d 8001 	strb.w	r8, [sp, #1]
    dta[2] = id>>8&0xff;    // id1
    8390:	f8ad 7002 	strh.w	r7, [sp, #2]
    dta[3] = id&0xff;       // id0
    
    dta[4] = extend;
    8394:	f88d e004 	strb.w	lr, [sp, #4]
    dta[5] = rtrBit;
    8398:	f88d c005 	strb.w	ip, [sp, #5]
    
    for(int i=0; i<len; i++)
    839c:	b12e      	cbz	r6, 83aa <Serial_CAN::send(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char const*)+0x3e>
    {
        dta[6+i] = buf[i];
    839e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    83a0:	4632      	mov	r2, r6
    83a2:	f10d 0006 	add.w	r0, sp, #6
    83a6:	f000 fdfb 	bl	8fa0 <memcpy>
    83aa:	466d      	mov	r5, sp
	virtual void clear(void)	{ serial3_clear(); }
	virtual int availableForWrite(void) { return serial3_write_buffer_free(); }
 	virtual void addMemoryForRead(void *buffer, size_t length) {serial3_add_memory_for_read(buffer, length);}
	virtual void addMemoryForWrite(void *buffer, size_t length){serial3_add_memory_for_write(buffer, length);}
	using Print::write;
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    83ac:	4620      	mov	r0, r4
    83ae:	f002 f8c9 	bl	a544 <serial3_putchar>
    }
    
    for(int i=0; i<14; i++)
    {
        canSerial.write(dta[i]);
    83b2:	f815 4f01 	ldrb.w	r4, [r5, #1]!
    83b6:	e7f9      	b.n	83ac <Serial_CAN::send(unsigned long, unsigned char, unsigned char, unsigned char, unsigned char const*)+0x40>
    83b8:	000143dc 	.word	0x000143dc

000083bc <Serial_CAN::recv(unsigned long*, unsigned char*)>:


// 0: no data
// 1: get data
unsigned char Serial_CAN::recv(unsigned long *id, uchar *buf)
{
    83bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    83be:	b089      	sub	sp, #36	; 0x24
    83c0:	460e      	mov	r6, r1
    83c2:	4615      	mov	r5, r2
	virtual int available(void)     { return serial3_available(); }
    83c4:	f002 f900 	bl	a5c8 <serial3_available>
    if(canSerial.available())
    83c8:	b1c0      	cbz	r0, 83fc <Serial_CAN::recv(unsigned long*, unsigned char*)+0x40>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    83ca:	4f19      	ldr	r7, [pc, #100]	; (8430 <Serial_CAN::recv(unsigned long*, unsigned char*)+0x74>)
    83cc:	683b      	ldr	r3, [r7, #0]
    83ce:	9300      	str	r3, [sp, #0]
	return ret;
    83d0:	9b00      	ldr	r3, [sp, #0]
    {
        unsigned long timer_s = millis();
        
        int len = 0;
    83d2:	2400      	movs	r4, #0
    83d4:	f002 f8f8 	bl	a5c8 <serial3_available>
        uchar dta[20];
        
        while(1)
        {
            while(canSerial.available())
    83d8:	b990      	cbnz	r0, 8400 <Serial_CAN::recv(unsigned long*, unsigned char*)+0x44>
                timer_s = millis();
            	if((millis()-timer_s) > 10)
                    return 0; // Reading 12 bytes should be faster than 10ms, abort if it takes longer, we loose the partial message in this case
            }
            
            if(len == 12) // Just to be sure, must be 12 here
    83da:	2c0c      	cmp	r4, #12
    83dc:	d1fa      	bne.n	83d4 <Serial_CAN::recv(unsigned long*, unsigned char*)+0x18>
    83de:	ab03      	add	r3, sp, #12
    83e0:	a904      	add	r1, sp, #16
            {
                unsigned long __id = 0;
    83e2:	2200      	movs	r2, #0
                
                for(int i=0; i<4; i++) // Store the id of the sender
                {
                    __id <<= 8;
                    __id += dta[i];
    83e4:	f813 0b01 	ldrb.w	r0, [r3], #1
                for(int i=0; i<4; i++) // Store the id of the sender
    83e8:	4299      	cmp	r1, r3
                    __id += dta[i];
    83ea:	eb00 2202 	add.w	r2, r0, r2, lsl #8
                for(int i=0; i<4; i++) // Store the id of the sender
    83ee:	d1f9      	bne.n	83e4 <Serial_CAN::recv(unsigned long*, unsigned char*)+0x28>
                }
                
                *id = __id;
    83f0:	6032      	str	r2, [r6, #0]
                
                for(int i=0; i<8; i++) // Store the message in the buffer
                {
                    buf[i] = dta[i+4];
    83f2:	4628      	mov	r0, r5
    83f4:	2208      	movs	r2, #8
    83f6:	f000 fdd3 	bl	8fa0 <memcpy>
                }
                return 1;
    83fa:	2001      	movs	r0, #1
            }
        }
    }
    
    return 0;
}
    83fc:	b009      	add	sp, #36	; 0x24
    83fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	virtual int read(void)          { return serial3_getchar(); }
    8400:	f002 f8f6 	bl	a5f0 <serial3_getchar>
                dta[len++] = canSerial.read();
    8404:	f104 0320 	add.w	r3, r4, #32
    8408:	446b      	add	r3, sp
		if(len == 12)
    840a:	2c0b      	cmp	r4, #11
                dta[len++] = canSerial.read();
    840c:	f104 0201 	add.w	r2, r4, #1
    8410:	f803 0c14 	strb.w	r0, [r3, #-20]
		if(len == 12)
    8414:	d0e3      	beq.n	83de <Serial_CAN::recv(unsigned long*, unsigned char*)+0x22>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8416:	683b      	ldr	r3, [r7, #0]
    8418:	9302      	str	r3, [sp, #8]
	return ret;
    841a:	9902      	ldr	r1, [sp, #8]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    841c:	683b      	ldr	r3, [r7, #0]
    841e:	9301      	str	r3, [sp, #4]
	return ret;
    8420:	9b01      	ldr	r3, [sp, #4]
            	if((millis()-timer_s) > 10)
    8422:	1a5b      	subs	r3, r3, r1
    8424:	2b0a      	cmp	r3, #10
    8426:	4614      	mov	r4, r2
    8428:	d9d4      	bls.n	83d4 <Serial_CAN::recv(unsigned long*, unsigned char*)+0x18>
                    return 0; // Reading 12 bytes should be faster than 10ms, abort if it takes longer, we loose the partial message in this case
    842a:	2000      	movs	r0, #0
}
    842c:	b009      	add	sp, #36	; 0x24
    842e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8430:	1fffb4e0 	.word	0x1fffb4e0

00008434 <Serial_CAN::clear()>:
    return ret;
}


void Serial_CAN::clear()
{
    8434:	b530      	push	{r4, r5, lr}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8436:	4c0b      	ldr	r4, [pc, #44]	; (8464 <Serial_CAN::clear()+0x30>)
    8438:	b085      	sub	sp, #20
    843a:	6823      	ldr	r3, [r4, #0]
    843c:	9301      	str	r3, [sp, #4]
	return ret;
    843e:	9d01      	ldr	r5, [sp, #4]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8440:	6823      	ldr	r3, [r4, #0]
    8442:	9302      	str	r3, [sp, #8]
	return ret;
    8444:	9b02      	ldr	r3, [sp, #8]
    unsigned long timer_s = millis();
    while(1)
    {
        if(millis()-timer_s > 50)return;
    8446:	1b5b      	subs	r3, r3, r5
    8448:	2b32      	cmp	r3, #50	; 0x32
    844a:	d809      	bhi.n	8460 <Serial_CAN::clear()+0x2c>
	virtual int available(void)     { return serial3_available(); }
    844c:	f002 f8bc 	bl	a5c8 <serial3_available>
        while(canSerial.available())
    8450:	2800      	cmp	r0, #0
    8452:	d0f5      	beq.n	8440 <Serial_CAN::clear()+0xc>
	virtual int read(void)          { return serial3_getchar(); }
    8454:	f002 f8cc 	bl	a5f0 <serial3_getchar>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8458:	6823      	ldr	r3, [r4, #0]
    845a:	9303      	str	r3, [sp, #12]
	return ret;
    845c:	9d03      	ldr	r5, [sp, #12]
    845e:	e7f5      	b.n	844c <Serial_CAN::clear()+0x18>
        {
            canSerial.read();
            timer_s = millis();
        }
    }
}
    8460:	b005      	add	sp, #20
    8462:	bd30      	pop	{r4, r5, pc}
    8464:	1fffb4e0 	.word	0x1fffb4e0

00008468 <Serial_CAN::cmdOk(char*)>:
{
    8468:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    846a:	4e25      	ldr	r6, [pc, #148]	; (8500 <Serial_CAN::cmdOk(char*)+0x98>)
    846c:	b085      	sub	sp, #20
    846e:	6833      	ldr	r3, [r6, #0]
    8470:	9301      	str	r3, [sp, #4]
	return ret;
    8472:	9f01      	ldr	r7, [sp, #4]
    8474:	4605      	mov	r5, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    8476:	b139      	cbz	r1, 8488 <Serial_CAN::cmdOk(char*)+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    8478:	4608      	mov	r0, r1
    847a:	460c      	mov	r4, r1
    847c:	f005 f820 	bl	d4c0 <strlen>
    8480:	4601      	mov	r1, r0
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial3_write(buffer, size); return size; }
    8482:	4620      	mov	r0, r4
    8484:	f002 f868 	bl	a558 <serial3_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    8488:	481e      	ldr	r0, [pc, #120]	; (8504 <Serial_CAN::cmdOk(char*)+0x9c>)
    848a:	f000 facd 	bl	8a28 <Print::println()>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    848e:	6833      	ldr	r3, [r6, #0]
    8490:	9302      	str	r3, [sp, #8]
	return ret;
    8492:	9b02      	ldr	r3, [sp, #8]
        if(millis()-timer_s > 500)
    8494:	1bdb      	subs	r3, r3, r7
    8496:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    unsigned char len = 0;
    849a:	bf98      	it	ls
    849c:	2400      	movls	r4, #0
        if(millis()-timer_s > 500)
    849e:	d908      	bls.n	84b2 <Serial_CAN::cmdOk(char*)+0x4a>
    84a0:	e01a      	b.n	84d8 <Serial_CAN::cmdOk(char*)+0x70>
	virtual int read(void)          { return serial3_getchar(); }
    84a2:	f002 f8a5 	bl	a5f0 <serial3_getchar>
            str_tmp[len++] = canSerial.read();
    84a6:	5528      	strb	r0, [r5, r4]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    84a8:	6833      	ldr	r3, [r6, #0]
    84aa:	9303      	str	r3, [sp, #12]
    84ac:	3401      	adds	r4, #1
	return ret;
    84ae:	9f03      	ldr	r7, [sp, #12]
    84b0:	b2e4      	uxtb	r4, r4
	virtual int available(void)     { return serial3_available(); }
    84b2:	f002 f889 	bl	a5c8 <serial3_available>
        while(canSerial.available())
    84b6:	2800      	cmp	r0, #0
    84b8:	d1f3      	bne.n	84a2 <Serial_CAN::cmdOk(char*)+0x3a>
        if(len >= 4 && str_tmp[len-1] == '\n' && str_tmp[len-2] == '\r' && str_tmp[len-3] == 'K' && str_tmp[len-4] == 'O')
    84ba:	2c03      	cmp	r4, #3
    84bc:	eb05 0304 	add.w	r3, r5, r4
    84c0:	d903      	bls.n	84ca <Serial_CAN::cmdOk(char*)+0x62>
    84c2:	f813 2c01 	ldrb.w	r2, [r3, #-1]
    84c6:	2a0a      	cmp	r2, #10
    84c8:	d009      	beq.n	84de <Serial_CAN::cmdOk(char*)+0x76>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    84ca:	6833      	ldr	r3, [r6, #0]
    84cc:	9302      	str	r3, [sp, #8]
	return ret;
    84ce:	9b02      	ldr	r3, [sp, #8]
        if(millis()-timer_s > 500)
    84d0:	1bdb      	subs	r3, r3, r7
    84d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    84d6:	d9ec      	bls.n	84b2 <Serial_CAN::cmdOk(char*)+0x4a>
            return 0;
    84d8:	2000      	movs	r0, #0
}
    84da:	b005      	add	sp, #20
    84dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(len >= 4 && str_tmp[len-1] == '\n' && str_tmp[len-2] == '\r' && str_tmp[len-3] == 'K' && str_tmp[len-4] == 'O')
    84de:	f813 2c02 	ldrb.w	r2, [r3, #-2]
    84e2:	2a0d      	cmp	r2, #13
    84e4:	d1f1      	bne.n	84ca <Serial_CAN::cmdOk(char*)+0x62>
    84e6:	f813 2c03 	ldrb.w	r2, [r3, #-3]
    84ea:	2a4b      	cmp	r2, #75	; 0x4b
    84ec:	d1ed      	bne.n	84ca <Serial_CAN::cmdOk(char*)+0x62>
    84ee:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    84f2:	2b4f      	cmp	r3, #79	; 0x4f
    84f4:	d1e9      	bne.n	84ca <Serial_CAN::cmdOk(char*)+0x62>
            clear();
    84f6:	4628      	mov	r0, r5
    84f8:	f7ff ff9c 	bl	8434 <Serial_CAN::clear()>
            return 1;        
    84fc:	2001      	movs	r0, #1
    84fe:	e7ec      	b.n	84da <Serial_CAN::cmdOk(char*)+0x72>
    8500:	1fffb4e0 	.word	0x1fffb4e0
    8504:	1fff87c0 	.word	0x1fff87c0

00008508 <Serial_CAN::baudRate(unsigned char)>:
{
    8508:	b538      	push	{r3, r4, r5, lr}
    850a:	4604      	mov	r4, r0
    850c:	460d      	mov	r5, r1
					{ serial3_write(buffer, size); return size; }
    850e:	4810      	ldr	r0, [pc, #64]	; (8550 <Serial_CAN::baudRate(unsigned char)+0x48>)
    8510:	2103      	movs	r1, #3
    8512:	f002 f821 	bl	a558 <serial3_write>

unsigned char Serial_CAN::enterSettingMode()
{
    canSerial.print("+++");
	delay(50);
    8516:	2032      	movs	r0, #50	; 0x32
    8518:	f001 f94e 	bl	97b8 <delay>
    clear();
    851c:	4620      	mov	r0, r4
    851e:	f7ff ff89 	bl	8434 <Serial_CAN::clear()>
    sprintf(str_tmp, "AT+S=%d\r\n", rate);
    8522:	462a      	mov	r2, r5
    8524:	490b      	ldr	r1, [pc, #44]	; (8554 <Serial_CAN::baudRate(unsigned char)+0x4c>)
    8526:	4620      	mov	r0, r4
    8528:	f004 fda8 	bl	d07c <sprintf>
    int ret = cmdOk(str_tmp);
    852c:	4621      	mov	r1, r4
    852e:	4620      	mov	r0, r4
    8530:	f7ff ff9a 	bl	8468 <Serial_CAN::cmdOk(char*)>
    8534:	4605      	mov	r5, r0
    return 1;
}

unsigned char Serial_CAN::exitSettingMode()
{
    clear();
    8536:	4620      	mov	r0, r4
    8538:	f7ff ff7c 	bl	8434 <Serial_CAN::clear()>
    int ret = cmdOk("AT+Q\r\n");
    853c:	4906      	ldr	r1, [pc, #24]	; (8558 <Serial_CAN::baudRate(unsigned char)+0x50>)
    853e:	4620      	mov	r0, r4
    8540:	f7ff ff92 	bl	8468 <Serial_CAN::cmdOk(char*)>
    clear();
    8544:	4620      	mov	r0, r4
    8546:	f7ff ff75 	bl	8434 <Serial_CAN::clear()>
}
    854a:	4628      	mov	r0, r5
    854c:	bd38      	pop	{r3, r4, r5, pc}
    854e:	bf00      	nop
    8550:	000143ac 	.word	0x000143ac
    8554:	000143b0 	.word	0x000143b0
    8558:	000143bc 	.word	0x000143bc

0000855c <Serial_CAN::canRate(unsigned char)>:
{
    855c:	b538      	push	{r3, r4, r5, lr}
    855e:	4604      	mov	r4, r0
    8560:	460d      	mov	r5, r1
    8562:	4811      	ldr	r0, [pc, #68]	; (85a8 <Serial_CAN::canRate(unsigned char)+0x4c>)
    8564:	2103      	movs	r1, #3
    8566:	f001 fff7 	bl	a558 <serial3_write>
	delay(50);
    856a:	2032      	movs	r0, #50	; 0x32
    856c:	f001 f924 	bl	97b8 <delay>
    clear();
    8570:	4620      	mov	r0, r4
    8572:	f7ff ff5f 	bl	8434 <Serial_CAN::clear()>
    if(rate < 10)
    8576:	2d09      	cmp	r5, #9
        sprintf(str_tmp, "AT+C=0%d\r\n", rate);
    8578:	bf94      	ite	ls
    857a:	490c      	ldrls	r1, [pc, #48]	; (85ac <Serial_CAN::canRate(unsigned char)+0x50>)
        sprintf(str_tmp, "AT+C=%d\r\n", rate);
    857c:	490c      	ldrhi	r1, [pc, #48]	; (85b0 <Serial_CAN::canRate(unsigned char)+0x54>)
    857e:	462a      	mov	r2, r5
    8580:	4620      	mov	r0, r4
    8582:	f004 fd7b 	bl	d07c <sprintf>
    int ret = cmdOk(str_tmp);
    8586:	4621      	mov	r1, r4
    8588:	4620      	mov	r0, r4
    858a:	f7ff ff6d 	bl	8468 <Serial_CAN::cmdOk(char*)>
    858e:	4605      	mov	r5, r0
    clear();
    8590:	4620      	mov	r0, r4
    8592:	f7ff ff4f 	bl	8434 <Serial_CAN::clear()>
    int ret = cmdOk("AT+Q\r\n");
    8596:	4907      	ldr	r1, [pc, #28]	; (85b4 <Serial_CAN::canRate(unsigned char)+0x58>)
    8598:	4620      	mov	r0, r4
    859a:	f7ff ff65 	bl	8468 <Serial_CAN::cmdOk(char*)>
    clear();
    859e:	4620      	mov	r0, r4
    85a0:	f7ff ff48 	bl	8434 <Serial_CAN::clear()>
}
    85a4:	4628      	mov	r0, r5
    85a6:	bd38      	pop	{r3, r4, r5, pc}
    85a8:	000143ac 	.word	0x000143ac
    85ac:	000143c4 	.word	0x000143c4
    85b0:	000143d0 	.word	0x000143d0
    85b4:	000143bc 	.word	0x000143bc

000085b8 <Serial_CAN::exitSettingMode()>:
{
    85b8:	b538      	push	{r3, r4, r5, lr}
    85ba:	4604      	mov	r4, r0
    clear();
    85bc:	f7ff ff3a 	bl	8434 <Serial_CAN::clear()>
    int ret = cmdOk("AT+Q\r\n");
    85c0:	4904      	ldr	r1, [pc, #16]	; (85d4 <Serial_CAN::exitSettingMode()+0x1c>)
    85c2:	4620      	mov	r0, r4
    85c4:	f7ff ff50 	bl	8468 <Serial_CAN::cmdOk(char*)>
    85c8:	4605      	mov	r5, r0
    clear();
    85ca:	4620      	mov	r0, r4
    85cc:	f7ff ff32 	bl	8434 <Serial_CAN::clear()>
    return ret;
}
    85d0:	4628      	mov	r0, r5
    85d2:	bd38      	pop	{r3, r4, r5, pc}
    85d4:	000143bc 	.word	0x000143bc

000085d8 <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    85d8:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    85dc:	b672      	cpsid	i
extern const uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;

void EventResponder::triggerEventNotImmediate()
{
	bool irq = disableInterrupts();
	if (_triggered == false) {
    85de:	7f43      	ldrb	r3, [r0, #29]
    85e0:	b95b      	cbnz	r3, 85fa <EventResponder::triggerEventNotImmediate()+0x22>
		// not already triggered
		if (_type == EventTypeYield) {
    85e2:	7f01      	ldrb	r1, [r0, #28]
    85e4:	2901      	cmp	r1, #1
{
    85e6:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    85e8:	d00b      	beq.n	8602 <EventResponder::triggerEventNotImmediate()+0x2a>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    85ea:	2903      	cmp	r1, #3
    85ec:	d013      	beq.n	8616 <EventResponder::triggerEventNotImmediate()+0x3e>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    85ee:	2301      	movs	r3, #1
    85f0:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    85f2:	b902      	cbnz	r2, 85f6 <EventResponder::triggerEventNotImmediate()+0x1e>
    85f4:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    85f6:	bc30      	pop	{r4, r5}
    85f8:	4770      	bx	lr
    85fa:	b90a      	cbnz	r2, 8600 <EventResponder::triggerEventNotImmediate()+0x28>
    85fc:	b662      	cpsie	i
    85fe:	4770      	bx	lr
    8600:	4770      	bx	lr
			if (firstYield == nullptr) {
    8602:	4c12      	ldr	r4, [pc, #72]	; (864c <EventResponder::triggerEventNotImmediate()+0x74>)
    8604:	6821      	ldr	r1, [r4, #0]
    8606:	b1b1      	cbz	r1, 8636 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    8608:	4911      	ldr	r1, [pc, #68]	; (8650 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    860a:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    860c:	680b      	ldr	r3, [r1, #0]
    860e:	6183      	str	r3, [r0, #24]
				lastYield = this;
    8610:	6008      	str	r0, [r1, #0]
				_prev->_next = this;
    8612:	6158      	str	r0, [r3, #20]
				lastYield = this;
    8614:	e7eb      	b.n	85ee <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    8616:	4d0f      	ldr	r5, [pc, #60]	; (8654 <EventResponder::triggerEventNotImmediate()+0x7c>)
    8618:	490f      	ldr	r1, [pc, #60]	; (8658 <EventResponder::triggerEventNotImmediate()+0x80>)
    861a:	682c      	ldr	r4, [r5, #0]
    861c:	b18c      	cbz	r4, 8642 <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    861e:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    8620:	680b      	ldr	r3, [r1, #0]
    8622:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    8624:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    8626:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    862a:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    862e:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    8630:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    8634:	e7db      	b.n	85ee <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    8636:	4b06      	ldr	r3, [pc, #24]	; (8650 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    8638:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    863a:	6181      	str	r1, [r0, #24]
				firstYield = this;
    863c:	6020      	str	r0, [r4, #0]
				lastYield = this;
    863e:	6018      	str	r0, [r3, #0]
    8640:	e7d5      	b.n	85ee <EventResponder::triggerEventNotImmediate()+0x16>
				_next = nullptr;
    8642:	6144      	str	r4, [r0, #20]
				_prev = nullptr;
    8644:	6184      	str	r4, [r0, #24]
				firstInterrupt = this;
    8646:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    8648:	e7ed      	b.n	8626 <EventResponder::triggerEventNotImmediate()+0x4e>
    864a:	bf00      	nop
    864c:	1fffb4c8 	.word	0x1fffb4c8
    8650:	1fffb4d8 	.word	0x1fffb4d8
    8654:	1fffb4d0 	.word	0x1fffb4d0
    8658:	1fffb4cc 	.word	0x1fffb4cc

0000865c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    865c:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    865e:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    8662:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    8664:	4c0c      	ldr	r4, [pc, #48]	; (8698 <EventResponder::runFromInterrupt()+0x3c>)
    8666:	6820      	ldr	r0, [r4, #0]
		if (first) {
    8668:	b180      	cbz	r0, 868c <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    866a:	4e0c      	ldr	r6, [pc, #48]	; (869c <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    866c:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    866e:	6943      	ldr	r3, [r0, #20]
    8670:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    8672:	b173      	cbz	r3, 8692 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    8674:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    8676:	b902      	cbnz	r2, 867a <EventResponder::runFromInterrupt()+0x1e>
    8678:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    867a:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    867c:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    867e:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    8680:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    8684:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    8686:	6820      	ldr	r0, [r4, #0]
		if (first) {
    8688:	2800      	cmp	r0, #0
    868a:	d1f0      	bne.n	866e <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    868c:	b902      	cbnz	r2, 8690 <EventResponder::runFromInterrupt()+0x34>
    868e:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    8690:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    8692:	6033      	str	r3, [r6, #0]
    8694:	e7ef      	b.n	8676 <EventResponder::runFromInterrupt()+0x1a>
    8696:	bf00      	nop
    8698:	1fffb4d0 	.word	0x1fffb4d0
    869c:	1fffb4cc 	.word	0x1fffb4cc

000086a0 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    86a0:	f7ff bfdc 	b.w	865c <EventResponder::runFromInterrupt()>

000086a4 <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    86a4:	4a02      	ldr	r2, [pc, #8]	; (86b0 <systick_isr+0xc>)
    86a6:	6813      	ldr	r3, [r2, #0]
    86a8:	3301      	adds	r3, #1
    86aa:	6013      	str	r3, [r2, #0]
}
    86ac:	4770      	bx	lr
    86ae:	bf00      	nop
    86b0:	1fffb4e0 	.word	0x1fffb4e0

000086b4 <HardwareSerial2::begin(unsigned long)>:
HardwareSerial2 Serial2(&serialEvent2);

uint8_t _serialEvent2_default __attribute__((weak)) PROGMEM = 0 ;

void HardwareSerial2::begin(uint32_t baud) {
	serial2_begin(BAUD2DIV2(baud));
    86b4:	084b      	lsrs	r3, r1, #1
    86b6:	f103 6337 	add.w	r3, r3, #191889408	; 0xb700000
    86ba:	f503 33d8 	add.w	r3, r3, #110592	; 0x1b000
void HardwareSerial2::begin(uint32_t baud) {
    86be:	b510      	push	{r4, lr}
    86c0:	4604      	mov	r4, r0
	serial2_begin(BAUD2DIV2(baud));
    86c2:	fbb3 f0f1 	udiv	r0, r3, r1
    86c6:	f001 f8c3 	bl	9850 <serial2_begin>
	if (!_serialEvent2_default) addToSerialEventsList();
    86ca:	4b04      	ldr	r3, [pc, #16]	; (86dc <HardwareSerial2::begin(unsigned long)+0x28>)
    86cc:	781b      	ldrb	r3, [r3, #0]
    86ce:	b103      	cbz	r3, 86d2 <HardwareSerial2::begin(unsigned long)+0x1e>
}
    86d0:	bd10      	pop	{r4, pc}
	if (!_serialEvent2_default) addToSerialEventsList();
    86d2:	4620      	mov	r0, r4
}
    86d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!_serialEvent2_default) addToSerialEventsList();
    86d8:	f002 bfce 	b.w	b678 <HardwareSerial::addToSerialEventsList()>
    86dc:	1fff8809 	.word	0x1fff8809

000086e0 <HardwareSerial2::write9bit(unsigned long)>:
	virtual size_t write9bit(uint32_t c)	{ serial2_putchar(c); return 1; }
    86e0:	b508      	push	{r3, lr}
    86e2:	4608      	mov	r0, r1
    86e4:	f001 faa2 	bl	9c2c <serial2_putchar>
    86e8:	2001      	movs	r0, #1
    86ea:	bd08      	pop	{r3, pc}

000086ec <HardwareSerial2::write(unsigned char)>:
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    86ec:	b508      	push	{r3, lr}
    86ee:	4608      	mov	r0, r1
    86f0:	f001 fa9c 	bl	9c2c <serial2_putchar>
    86f4:	2001      	movs	r0, #1
    86f6:	bd08      	pop	{r3, pc}

000086f8 <HardwareSerial2::write(char const*)>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    86f8:	b538      	push	{r3, r4, r5, lr}
    86fa:	4608      	mov	r0, r1
    86fc:	460d      	mov	r5, r1
    86fe:	f004 fedf 	bl	d4c0 <strlen>
    8702:	4604      	mov	r4, r0
					  serial2_write((const uint8_t *)str, len);
    8704:	4601      	mov	r1, r0
    8706:	4628      	mov	r0, r5
    8708:	f001 fb0c 	bl	9d24 <serial2_write>
					  return len; }
    870c:	4620      	mov	r0, r4
    870e:	bd38      	pop	{r3, r4, r5, pc}

00008710 <HardwareSerial2::write(unsigned char const*, unsigned int)>:
	virtual size_t write(const uint8_t *buffer, size_t size)
    8710:	b510      	push	{r4, lr}
    8712:	4608      	mov	r0, r1
    8714:	4614      	mov	r4, r2
					{ serial2_write(buffer, size); return size; }
    8716:	4611      	mov	r1, r2
    8718:	f001 fb04 	bl	9d24 <serial2_write>
    871c:	4620      	mov	r0, r4
    871e:	bd10      	pop	{r4, pc}

00008720 <HardwareSerial2::addMemoryForWrite(void*, unsigned int)>:
	virtual void addMemoryForWrite(void *buffer, size_t length){serial2_add_memory_for_write(buffer, length);}
    8720:	4608      	mov	r0, r1
    8722:	4611      	mov	r1, r2
    8724:	f001 bd2c 	b.w	a180 <serial2_add_memory_for_write>

00008728 <HardwareSerial2::addMemoryForRead(void*, unsigned int)>:
 	virtual void addMemoryForRead(void *buffer, size_t length) {serial2_add_memory_for_read(buffer, length);}
    8728:	4608      	mov	r0, r1
    872a:	4611      	mov	r1, r2
    872c:	f001 bd0c 	b.w	a148 <serial2_add_memory_for_read>

00008730 <HardwareSerial2::clear()>:
	virtual void clear(void)	{ serial2_clear(); }
    8730:	f001 bc24 	b.w	9f7c <serial2_clear>

00008734 <HardwareSerial2::attachCts(unsigned char)>:
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
    8734:	b508      	push	{r3, lr}
    8736:	4608      	mov	r0, r1
    8738:	f001 fa58 	bl	9bec <serial2_set_cts>
    873c:	3800      	subs	r0, #0
    873e:	bf18      	it	ne
    8740:	2001      	movne	r0, #1
    8742:	bd08      	pop	{r3, pc}

00008744 <HardwareSerial2::attachRts(unsigned char)>:
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
    8744:	b508      	push	{r3, lr}
    8746:	4608      	mov	r0, r1
    8748:	f001 fa2e 	bl	9ba8 <serial2_set_rts>
    874c:	3800      	subs	r0, #0
    874e:	bf18      	it	ne
    8750:	2001      	movne	r0, #1
    8752:	bd08      	pop	{r3, pc}

00008754 <HardwareSerial2::setTX(unsigned char, bool)>:
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
    8754:	4608      	mov	r0, r1
    8756:	4611      	mov	r1, r2
    8758:	f001 b9ba 	b.w	9ad0 <serial2_set_tx>

0000875c <HardwareSerial2::setRX(unsigned char)>:
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
    875c:	4608      	mov	r0, r1
    875e:	f001 b9f5 	b.w	9b4c <serial2_set_rx>
    8762:	bf00      	nop

00008764 <HardwareSerial2::transmitterEnable(unsigned char)>:
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
    8764:	4608      	mov	r0, r1
    8766:	f001 b997 	b.w	9a98 <serial2_set_transmit_pin>
    876a:	bf00      	nop

0000876c <HardwareSerial2::end()>:
	virtual void end(void)		{ serial2_end(); }
    876c:	f001 b92c 	b.w	99c8 <serial2_end>

00008770 <HardwareSerial2::begin(unsigned long, unsigned long)>:
	virtual void begin(uint32_t baud, uint32_t format) {
    8770:	b510      	push	{r4, lr}
					  serial2_begin(BAUD2DIV2(baud));
    8772:	084b      	lsrs	r3, r1, #1
    8774:	f103 6337 	add.w	r3, r3, #191889408	; 0xb700000
	virtual void begin(uint32_t baud, uint32_t format) {
    8778:	4614      	mov	r4, r2
					  serial2_begin(BAUD2DIV2(baud));
    877a:	f503 33d8 	add.w	r3, r3, #110592	; 0x1b000
    877e:	fbb3 f0f1 	udiv	r0, r3, r1
    8782:	f001 f865 	bl	9850 <serial2_begin>
					  serial2_format(format); }
    8786:	4620      	mov	r0, r4
    8788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    878c:	f001 b8ce 	b.w	992c <serial2_format>

00008790 <HardwareSerial2::peek()>:
	virtual int peek(void)          { return serial2_peek(); }
    8790:	f001 bbce 	b.w	9f30 <serial2_peek>

00008794 <HardwareSerial2::read()>:
	virtual int read(void)          { return serial2_getchar(); }
    8794:	f001 bb86 	b.w	9ea4 <serial2_getchar>

00008798 <HardwareSerial2::available()>:
	virtual int available(void)     { return serial2_available(); }
    8798:	f001 bb70 	b.w	9e7c <serial2_available>

0000879c <HardwareSerial2::flush()>:
	virtual void flush(void)        { serial2_flush(); }
    879c:	f001 bb4a 	b.w	9e34 <serial2_flush>

000087a0 <HardwareSerial2::availableForWrite()>:
	virtual int availableForWrite(void) { return serial2_write_buffer_free(); }
    87a0:	f001 bb54 	b.w	9e4c <serial2_write_buffer_free>

000087a4 <HardwareSerial2::write(int)>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    87a4:	6803      	ldr	r3, [r0, #0]
    87a6:	4a06      	ldr	r2, [pc, #24]	; (87c0 <HardwareSerial2::write(int)+0x1c>)
    87a8:	681b      	ldr	r3, [r3, #0]
    87aa:	4293      	cmp	r3, r2
    87ac:	d105      	bne.n	87ba <HardwareSerial2::write(int)+0x16>
    87ae:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    87b0:	b2c8      	uxtb	r0, r1
    87b2:	f001 fa3b 	bl	9c2c <serial2_putchar>
	virtual size_t write(int n)             { return write((uint8_t)n); }
    87b6:	2001      	movs	r0, #1
    87b8:	bd10      	pop	{r4, pc}
    87ba:	b2c9      	uxtb	r1, r1
    87bc:	4718      	bx	r3
    87be:	bf00      	nop
    87c0:	000086ed 	.word	0x000086ed

000087c4 <HardwareSerial2::write(unsigned long)>:
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    87c4:	6803      	ldr	r3, [r0, #0]
    87c6:	4a06      	ldr	r2, [pc, #24]	; (87e0 <HardwareSerial2::write(unsigned long)+0x1c>)
    87c8:	681b      	ldr	r3, [r3, #0]
    87ca:	4293      	cmp	r3, r2
    87cc:	d105      	bne.n	87da <HardwareSerial2::write(unsigned long)+0x16>
    87ce:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    87d0:	b2c8      	uxtb	r0, r1
    87d2:	f001 fa2b 	bl	9c2c <serial2_putchar>
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    87d6:	2001      	movs	r0, #1
    87d8:	bd10      	pop	{r4, pc}
    87da:	b2c9      	uxtb	r1, r1
    87dc:	4718      	bx	r3
    87de:	bf00      	nop
    87e0:	000086ed 	.word	0x000086ed

000087e4 <HardwareSerial2::write(long)>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    87e4:	6803      	ldr	r3, [r0, #0]
    87e6:	4a06      	ldr	r2, [pc, #24]	; (8800 <HardwareSerial2::write(long)+0x1c>)
    87e8:	681b      	ldr	r3, [r3, #0]
    87ea:	4293      	cmp	r3, r2
    87ec:	d105      	bne.n	87fa <HardwareSerial2::write(long)+0x16>
    87ee:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    87f0:	b2c8      	uxtb	r0, r1
    87f2:	f001 fa1b 	bl	9c2c <serial2_putchar>
	virtual size_t write(long n)            { return write((uint8_t)n); }
    87f6:	2001      	movs	r0, #1
    87f8:	bd10      	pop	{r4, pc}
    87fa:	b2c9      	uxtb	r1, r1
    87fc:	4718      	bx	r3
    87fe:	bf00      	nop
    8800:	000086ed 	.word	0x000086ed

00008804 <HardwareSerial2::write(unsigned int)>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    8804:	6803      	ldr	r3, [r0, #0]
    8806:	4a06      	ldr	r2, [pc, #24]	; (8820 <HardwareSerial2::write(unsigned int)+0x1c>)
    8808:	681b      	ldr	r3, [r3, #0]
    880a:	4293      	cmp	r3, r2
    880c:	d105      	bne.n	881a <HardwareSerial2::write(unsigned int)+0x16>
    880e:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    8810:	b2c8      	uxtb	r0, r1
    8812:	f001 fa0b 	bl	9c2c <serial2_putchar>
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    8816:	2001      	movs	r0, #1
    8818:	bd10      	pop	{r4, pc}
    881a:	b2c9      	uxtb	r1, r1
    881c:	4718      	bx	r3
    881e:	bf00      	nop
    8820:	000086ed 	.word	0x000086ed

00008824 <HardwareSerial3::begin(unsigned long)>:
HardwareSerial3 Serial3(&serialEvent3);

uint8_t _serialEvent3_default __attribute__((weak)) PROGMEM = 0 ;

void HardwareSerial3::begin(uint32_t baud) { 
	serial3_begin(BAUD2DIV3(baud));
    8824:	084b      	lsrs	r3, r1, #1
    8826:	f103 63b7 	add.w	r3, r3, #95944704	; 0x5b80000
    882a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
void HardwareSerial3::begin(uint32_t baud) { 
    882e:	b510      	push	{r4, lr}
    8830:	4604      	mov	r4, r0
	serial3_begin(BAUD2DIV3(baud));
    8832:	fbb3 f0f1 	udiv	r0, r3, r1
    8836:	f001 fd29 	bl	a28c <serial3_begin>
	if (!_serialEvent3_default) addToSerialEventsList();
    883a:	4b04      	ldr	r3, [pc, #16]	; (884c <HardwareSerial3::begin(unsigned long)+0x28>)
    883c:	781b      	ldrb	r3, [r3, #0]
    883e:	b103      	cbz	r3, 8842 <HardwareSerial3::begin(unsigned long)+0x1e>
}
    8840:	bd10      	pop	{r4, pc}
	if (!_serialEvent3_default) addToSerialEventsList();
    8842:	4620      	mov	r0, r4
}
    8844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!_serialEvent3_default) addToSerialEventsList();
    8848:	f002 bf16 	b.w	b678 <HardwareSerial::addToSerialEventsList()>
    884c:	1fff880a 	.word	0x1fff880a

00008850 <HardwareSerial3::write9bit(unsigned long)>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial3_write((const uint8_t *)str, len);
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial3_putchar(c); return 1; }
    8850:	b508      	push	{r3, lr}
    8852:	4608      	mov	r0, r1
    8854:	f001 fe76 	bl	a544 <serial3_putchar>
    8858:	2001      	movs	r0, #1
    885a:	bd08      	pop	{r3, pc}

0000885c <HardwareSerial3::write(unsigned char)>:
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    885c:	b508      	push	{r3, lr}
    885e:	4608      	mov	r0, r1
    8860:	f001 fe70 	bl	a544 <serial3_putchar>
    8864:	2001      	movs	r0, #1
    8866:	bd08      	pop	{r3, pc}

00008868 <HardwareSerial3::write(char const*)>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    8868:	b538      	push	{r3, r4, r5, lr}
    886a:	4608      	mov	r0, r1
    886c:	460d      	mov	r5, r1
    886e:	f004 fe27 	bl	d4c0 <strlen>
    8872:	4604      	mov	r4, r0
					  serial3_write((const uint8_t *)str, len);
    8874:	4601      	mov	r1, r0
    8876:	4628      	mov	r0, r5
    8878:	f001 fe6e 	bl	a558 <serial3_write>
					  return len; }
    887c:	4620      	mov	r0, r4
    887e:	bd38      	pop	{r3, r4, r5, pc}

00008880 <HardwareSerial3::write(unsigned char const*, unsigned int)>:
	virtual size_t write(const uint8_t *buffer, size_t size)
    8880:	b510      	push	{r4, lr}
    8882:	4608      	mov	r0, r1
    8884:	4614      	mov	r4, r2
					{ serial3_write(buffer, size); return size; }
    8886:	4611      	mov	r1, r2
    8888:	f001 fe66 	bl	a558 <serial3_write>
    888c:	4620      	mov	r0, r4
    888e:	bd10      	pop	{r4, pc}

00008890 <HardwareSerial3::addMemoryForWrite(void*, unsigned int)>:
	virtual void addMemoryForWrite(void *buffer, size_t length){serial3_add_memory_for_write(buffer, length);}
    8890:	4608      	mov	r0, r1
    8892:	4611      	mov	r1, r2
    8894:	f001 bfda 	b.w	a84c <serial3_add_memory_for_write>

00008898 <HardwareSerial3::addMemoryForRead(void*, unsigned int)>:
 	virtual void addMemoryForRead(void *buffer, size_t length) {serial3_add_memory_for_read(buffer, length);}
    8898:	4608      	mov	r0, r1
    889a:	4611      	mov	r1, r2
    889c:	f001 bfba 	b.w	a814 <serial3_add_memory_for_read>

000088a0 <HardwareSerial3::clear()>:
	virtual void clear(void)	{ serial3_clear(); }
    88a0:	f001 bf12 	b.w	a6c8 <serial3_clear>

000088a4 <HardwareSerial3::attachCts(unsigned char)>:
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
    88a4:	b508      	push	{r3, lr}
    88a6:	4608      	mov	r0, r1
    88a8:	f001 fe2c 	bl	a504 <serial3_set_cts>
    88ac:	3800      	subs	r0, #0
    88ae:	bf18      	it	ne
    88b0:	2001      	movne	r0, #1
    88b2:	bd08      	pop	{r3, pc}

000088b4 <HardwareSerial3::attachRts(unsigned char)>:
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
    88b4:	b508      	push	{r3, lr}
    88b6:	4608      	mov	r0, r1
    88b8:	f001 fe02 	bl	a4c0 <serial3_set_rts>
    88bc:	3800      	subs	r0, #0
    88be:	bf18      	it	ne
    88c0:	2001      	movne	r0, #1
    88c2:	bd08      	pop	{r3, pc}

000088c4 <HardwareSerial3::setTX(unsigned char, bool)>:
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
    88c4:	4608      	mov	r0, r1
    88c6:	4611      	mov	r1, r2
    88c8:	f001 bdcc 	b.w	a464 <serial3_set_tx>

000088cc <HardwareSerial3::setRX(unsigned char)>:
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
    88cc:	4608      	mov	r0, r1
    88ce:	f001 bdf5 	b.w	a4bc <serial3_set_rx>
    88d2:	bf00      	nop

000088d4 <HardwareSerial3::transmitterEnable(unsigned char)>:
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
    88d4:	4608      	mov	r0, r1
    88d6:	f001 bda9 	b.w	a42c <serial3_set_transmit_pin>
    88da:	bf00      	nop

000088dc <HardwareSerial3::end()>:
	virtual void end(void)          { serial3_end(); }
    88dc:	f001 bd70 	b.w	a3c0 <serial3_end>

000088e0 <HardwareSerial3::begin(unsigned long, unsigned long)>:
	virtual void begin(uint32_t baud, uint32_t format) {
    88e0:	b510      	push	{r4, lr}
					  serial3_begin(BAUD2DIV3(baud));
    88e2:	084b      	lsrs	r3, r1, #1
    88e4:	f103 63b7 	add.w	r3, r3, #95944704	; 0x5b80000
	virtual void begin(uint32_t baud, uint32_t format) {
    88e8:	4614      	mov	r4, r2
					  serial3_begin(BAUD2DIV3(baud));
    88ea:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    88ee:	fbb3 f0f1 	udiv	r0, r3, r1
    88f2:	f001 fccb 	bl	a28c <serial3_begin>
					  serial3_format(format); }
    88f6:	4620      	mov	r0, r4
    88f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    88fc:	f001 bd12 	b.w	a324 <serial3_format>

00008900 <HardwareSerial3::peek()>:
	virtual int peek(void)          { return serial3_peek(); }
    8900:	f001 bebc 	b.w	a67c <serial3_peek>

00008904 <HardwareSerial3::read()>:
	virtual int read(void)          { return serial3_getchar(); }
    8904:	f001 be74 	b.w	a5f0 <serial3_getchar>

00008908 <HardwareSerial3::available()>:
	virtual int available(void)     { return serial3_available(); }
    8908:	f001 be5e 	b.w	a5c8 <serial3_available>

0000890c <HardwareSerial3::flush()>:
	virtual void flush(void)        { serial3_flush(); }
    890c:	f001 be38 	b.w	a580 <serial3_flush>

00008910 <HardwareSerial3::availableForWrite()>:
	virtual int availableForWrite(void) { return serial3_write_buffer_free(); }
    8910:	f001 be42 	b.w	a598 <serial3_write_buffer_free>

00008914 <HardwareSerial3::write(int)>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    8914:	6803      	ldr	r3, [r0, #0]
    8916:	4a06      	ldr	r2, [pc, #24]	; (8930 <HardwareSerial3::write(int)+0x1c>)
    8918:	681b      	ldr	r3, [r3, #0]
    891a:	4293      	cmp	r3, r2
    891c:	d105      	bne.n	892a <HardwareSerial3::write(int)+0x16>
    891e:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    8920:	b2c8      	uxtb	r0, r1
    8922:	f001 fe0f 	bl	a544 <serial3_putchar>
	virtual size_t write(int n)             { return write((uint8_t)n); }
    8926:	2001      	movs	r0, #1
    8928:	bd10      	pop	{r4, pc}
    892a:	b2c9      	uxtb	r1, r1
    892c:	4718      	bx	r3
    892e:	bf00      	nop
    8930:	0000885d 	.word	0x0000885d

00008934 <HardwareSerial3::write(unsigned long)>:
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    8934:	6803      	ldr	r3, [r0, #0]
    8936:	4a06      	ldr	r2, [pc, #24]	; (8950 <HardwareSerial3::write(unsigned long)+0x1c>)
    8938:	681b      	ldr	r3, [r3, #0]
    893a:	4293      	cmp	r3, r2
    893c:	d105      	bne.n	894a <HardwareSerial3::write(unsigned long)+0x16>
    893e:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    8940:	b2c8      	uxtb	r0, r1
    8942:	f001 fdff 	bl	a544 <serial3_putchar>
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    8946:	2001      	movs	r0, #1
    8948:	bd10      	pop	{r4, pc}
    894a:	b2c9      	uxtb	r1, r1
    894c:	4718      	bx	r3
    894e:	bf00      	nop
    8950:	0000885d 	.word	0x0000885d

00008954 <HardwareSerial3::write(long)>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    8954:	6803      	ldr	r3, [r0, #0]
    8956:	4a06      	ldr	r2, [pc, #24]	; (8970 <HardwareSerial3::write(long)+0x1c>)
    8958:	681b      	ldr	r3, [r3, #0]
    895a:	4293      	cmp	r3, r2
    895c:	d105      	bne.n	896a <HardwareSerial3::write(long)+0x16>
    895e:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    8960:	b2c8      	uxtb	r0, r1
    8962:	f001 fdef 	bl	a544 <serial3_putchar>
	virtual size_t write(long n)            { return write((uint8_t)n); }
    8966:	2001      	movs	r0, #1
    8968:	bd10      	pop	{r4, pc}
    896a:	b2c9      	uxtb	r1, r1
    896c:	4718      	bx	r3
    896e:	bf00      	nop
    8970:	0000885d 	.word	0x0000885d

00008974 <HardwareSerial3::write(unsigned int)>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    8974:	6803      	ldr	r3, [r0, #0]
    8976:	4a06      	ldr	r2, [pc, #24]	; (8990 <HardwareSerial3::write(unsigned int)+0x1c>)
    8978:	681b      	ldr	r3, [r3, #0]
    897a:	4293      	cmp	r3, r2
    897c:	d105      	bne.n	898a <HardwareSerial3::write(unsigned int)+0x16>
    897e:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    8980:	b2c8      	uxtb	r0, r1
    8982:	f001 fddf 	bl	a544 <serial3_putchar>
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    8986:	2001      	movs	r0, #1
    8988:	bd10      	pop	{r4, pc}
    898a:	b2c9      	uxtb	r1, r1
    898c:	4718      	bx	r3
    898e:	bf00      	nop
    8990:	0000885d 	.word	0x0000885d

00008994 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
        return write(p, sizeof(buf) - (p - buf));
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    8994:	b570      	push	{r4, r5, r6, lr}
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    8996:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    8998:	b08a      	sub	sp, #40	; 0x28
		base = 10;
    899a:	bf08      	it	eq
    899c:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    899e:	b3a1      	cbz	r1, 8a0a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x76>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    89a0:	f04f 0e21 	mov.w	lr, #33	; 0x21
    89a4:	e002      	b.n	89ac <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    89a6:	fa5f fe86 	uxtb.w	lr, r6
			n /= base;
    89aa:	4629      	mov	r1, r5
			digit = n % base;
    89ac:	fbb1 f5f2 	udiv	r5, r1, r2
    89b0:	fb02 1415 	mls	r4, r2, r5, r1
    89b4:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    89b8:	2c09      	cmp	r4, #9
    89ba:	f10c 0430 	add.w	r4, ip, #48	; 0x30
    89be:	bf98      	it	ls
    89c0:	fa5f fc84 	uxtbls.w	ip, r4
    89c4:	f10e 0428 	add.w	r4, lr, #40	; 0x28
    89c8:	bf88      	it	hi
    89ca:	f10c 0c37 	addhi.w	ip, ip, #55	; 0x37
    89ce:	446c      	add	r4, sp
    89d0:	bf88      	it	hi
    89d2:	fa5f fc8c 	uxtbhi.w	ip, ip
			if (n == 0) break;
    89d6:	4291      	cmp	r1, r2
			i--;
    89d8:	f10e 36ff 	add.w	r6, lr, #4294967295
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    89dc:	f804 cc24 	strb.w	ip, [r4, #-36]
			if (n == 0) break;
    89e0:	d2e1      	bcs.n	89a6 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
    89e2:	b14b      	cbz	r3, 89f8 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x64>
		i--;
    89e4:	f10e 3eff 	add.w	lr, lr, #4294967295
    89e8:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    89ec:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    89f0:	446b      	add	r3, sp
    89f2:	222d      	movs	r2, #45	; 0x2d
    89f4:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    89f8:	6803      	ldr	r3, [r0, #0]
    89fa:	a901      	add	r1, sp, #4
    89fc:	685b      	ldr	r3, [r3, #4]
    89fe:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    8a02:	4471      	add	r1, lr
    8a04:	4798      	blx	r3
}
    8a06:	b00a      	add	sp, #40	; 0x28
    8a08:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    8a0a:	2230      	movs	r2, #48	; 0x30
    8a0c:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    8a10:	f04f 0e21 	mov.w	lr, #33	; 0x21
    8a14:	e7e5      	b.n	89e2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4e>
    8a16:	bf00      	nop

00008a18 <Print::print(long)>:
	if (n < 0) {
    8a18:	2900      	cmp	r1, #0
		n = -n;
    8a1a:	bfba      	itte	lt
    8a1c:	4249      	neglt	r1, r1
		sign = '-';
    8a1e:	232d      	movlt	r3, #45	; 0x2d
	uint8_t sign=0;
    8a20:	2300      	movge	r3, #0
	if (base == 0) {
    8a22:	220a      	movs	r2, #10
    8a24:	f7ff bfb6 	b.w	8994 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

00008a28 <Print::println()>:
{
    8a28:	b500      	push	{lr}
	return write(buf, 2);
    8a2a:	6803      	ldr	r3, [r0, #0]
{
    8a2c:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    8a2e:	f640 220d 	movw	r2, #2573	; 0xa0d
    8a32:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    8a36:	685b      	ldr	r3, [r3, #4]
    8a38:	2202      	movs	r2, #2
    8a3a:	a901      	add	r1, sp, #4
    8a3c:	4798      	blx	r3
}
    8a3e:	b003      	add	sp, #12
    8a40:	f85d fb04 	ldr.w	pc, [sp], #4

00008a44 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    8a44:	4b03      	ldr	r3, [pc, #12]	; (8a54 <_write+0x10>)
    8a46:	2802      	cmp	r0, #2
    8a48:	bf88      	it	hi
    8a4a:	4603      	movhi	r3, r0
    8a4c:	4618      	mov	r0, r3
    8a4e:	681b      	ldr	r3, [r3, #0]
    8a50:	685b      	ldr	r3, [r3, #4]
    8a52:	4718      	bx	r3
    8a54:	1fff880c 	.word	0x1fff880c

00008a58 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    8a58:	b932      	cbnz	r2, 8a68 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x10>
		return write((uint8_t)n);
    8a5a:	6803      	ldr	r3, [r0, #0]
{
    8a5c:	b500      	push	{lr}
		return write((uint8_t)n);
    8a5e:	681b      	ldr	r3, [r3, #0]
}
    8a60:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    8a64:	b2c9      	uxtb	r1, r1
    8a66:	4718      	bx	r3
    8a68:	f7ff bf94 	b.w	8994 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    8a6c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00008a70 <Print::printFloat(double, unsigned char)>:
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    8a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    8a74:	4619      	mov	r1, r3
{
    8a76:	b087      	sub	sp, #28
    8a78:	4606      	mov	r6, r0
	if (isnan(number)) return print("nan");
    8a7a:	4610      	mov	r0, r2
{
    8a7c:	4614      	mov	r4, r2
    8a7e:	469a      	mov	sl, r3
	if (isnan(number)) return print("nan");
    8a80:	f003 fa18 	bl	beb4 <__aeabi_dcmpun>
{
    8a84:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
	if (isnan(number)) return print("nan");
    8a88:	2800      	cmp	r0, #0
    8a8a:	f040 80a9 	bne.w	8be0 <Print::printFloat(double, unsigned char)+0x170>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    8a8e:	f02a 4500 	bic.w	r5, sl, #2147483648	; 0x80000000
    	if (isinf(number)) return print("inf");
    8a92:	4b5f      	ldr	r3, [pc, #380]	; (8c10 <Print::printFloat(double, unsigned char)+0x1a0>)
    8a94:	4620      	mov	r0, r4
    8a96:	4629      	mov	r1, r5
    8a98:	f04f 32ff 	mov.w	r2, #4294967295
    8a9c:	f003 fa0a 	bl	beb4 <__aeabi_dcmpun>
    8aa0:	b948      	cbnz	r0, 8ab6 <Print::printFloat(double, unsigned char)+0x46>
    8aa2:	4b5b      	ldr	r3, [pc, #364]	; (8c10 <Print::printFloat(double, unsigned char)+0x1a0>)
    8aa4:	4620      	mov	r0, r4
    8aa6:	4629      	mov	r1, r5
    8aa8:	f04f 32ff 	mov.w	r2, #4294967295
    8aac:	f003 f9e4 	bl	be78 <__aeabi_dcmple>
    8ab0:	2800      	cmp	r0, #0
    8ab2:	f000 808e 	beq.w	8bd2 <Print::printFloat(double, unsigned char)+0x162>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    8ab6:	4b57      	ldr	r3, [pc, #348]	; (8c14 <Print::printFloat(double, unsigned char)+0x1a4>)
    8ab8:	4620      	mov	r0, r4
    8aba:	4651      	mov	r1, sl
    8abc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    8ac0:	f003 f9ee 	bl	bea0 <__aeabi_dcmpgt>
    8ac4:	2800      	cmp	r0, #0
    8ac6:	d17b      	bne.n	8bc0 <Print::printFloat(double, unsigned char)+0x150>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    8ac8:	4b53      	ldr	r3, [pc, #332]	; (8c18 <Print::printFloat(double, unsigned char)+0x1a8>)
    8aca:	4620      	mov	r0, r4
    8acc:	4651      	mov	r1, sl
    8ace:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    8ad2:	f003 f9c7 	bl	be64 <__aeabi_dcmplt>
    8ad6:	2800      	cmp	r0, #0
    8ad8:	d172      	bne.n	8bc0 <Print::printFloat(double, unsigned char)+0x150>
	
	// Handle negative numbers
	if (number < 0.0) {
    8ada:	4620      	mov	r0, r4
    8adc:	4651      	mov	r1, sl
    8ade:	2200      	movs	r2, #0
    8ae0:	2300      	movs	r3, #0
    8ae2:	f003 f9bf 	bl	be64 <__aeabi_dcmplt>
    8ae6:	4605      	mov	r5, r0
    8ae8:	2800      	cmp	r0, #0
    8aea:	d175      	bne.n	8bd8 <Print::printFloat(double, unsigned char)+0x168>
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    8aec:	2f00      	cmp	r7, #0
    8aee:	d07a      	beq.n	8be6 <Print::printFloat(double, unsigned char)+0x176>
		rounding *= 0.1;
    8af0:	f20f 1914 	addw	r9, pc, #276	; 0x114
    8af4:	e9d9 8900 	ldrd	r8, r9, [r9]
	double rounding = 0.5;
    8af8:	4948      	ldr	r1, [pc, #288]	; (8c1c <Print::printFloat(double, unsigned char)+0x1ac>)
	for (uint8_t i=0; i<digits; ++i) {
    8afa:	f04f 0b00 	mov.w	fp, #0
	double rounding = 0.5;
    8afe:	2000      	movs	r0, #0
		rounding *= 0.1;
    8b00:	464b      	mov	r3, r9
	for (uint8_t i=0; i<digits; ++i) {
    8b02:	f10b 0b01 	add.w	fp, fp, #1
		rounding *= 0.1;
    8b06:	4642      	mov	r2, r8
    8b08:	f009 ff86 	bl	12a18 <__aeabi_dmul>
	for (uint8_t i=0; i<digits; ++i) {
    8b0c:	fa5f f38b 	uxtb.w	r3, fp
    8b10:	42bb      	cmp	r3, r7
    8b12:	d3f5      	bcc.n	8b00 <Print::printFloat(double, unsigned char)+0x90>
	}
	number += rounding;
    8b14:	4602      	mov	r2, r0
    8b16:	460b      	mov	r3, r1
    8b18:	4620      	mov	r0, r4
    8b1a:	4651      	mov	r1, sl
    8b1c:	f002 ff8c 	bl	ba38 <__adddf3>
    8b20:	4689      	mov	r9, r1
    8b22:	4680      	mov	r8, r0

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    8b24:	f003 f9dc 	bl	bee0 <__aeabi_d2uiz>
    8b28:	2f0f      	cmp	r7, #15
    8b2a:	bf28      	it	cs
    8b2c:	270f      	movcs	r7, #15
    8b2e:	4682      	mov	sl, r0
	double remainder = number - (double)int_part;
    8b30:	9701      	str	r7, [sp, #4]
    8b32:	f003 f8bd 	bl	bcb0 <__aeabi_ui2d>
    8b36:	4602      	mov	r2, r0
    8b38:	460b      	mov	r3, r1
    8b3a:	4640      	mov	r0, r8
    8b3c:	4649      	mov	r1, r9
    8b3e:	f002 ff79 	bl	ba34 <__aeabi_dsub>
    8b42:	462b      	mov	r3, r5
    8b44:	4680      	mov	r8, r0
    8b46:	4689      	mov	r9, r1
    8b48:	220a      	movs	r2, #10
    8b4a:	4651      	mov	r1, sl
    8b4c:	4630      	mov	r0, r6
    8b4e:	f7ff ff21 	bl	8994 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    8b52:	232e      	movs	r3, #46	; 0x2e
	double remainder = number - (double)int_part;
    8b54:	464d      	mov	r5, r9
		buf[0] = '.';
    8b56:	f88d 3008 	strb.w	r3, [sp, #8]
    8b5a:	f10d 0209 	add.w	r2, sp, #9

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    8b5e:	1e7b      	subs	r3, r7, #1
			remainder *= 10.0;
    8b60:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8c20 <Print::printFloat(double, unsigned char)+0x1b0>
	double remainder = number - (double)int_part;
    8b64:	4644      	mov	r4, r8
	if (base == 0) {
    8b66:	4683      	mov	fp, r0
		while (digits-- > 0) {
    8b68:	fa52 fa83 	uxtab	sl, r2, r3
    8b6c:	af02      	add	r7, sp, #8
			remainder *= 10.0;
    8b6e:	f04f 0800 	mov.w	r8, #0
    8b72:	4642      	mov	r2, r8
    8b74:	464b      	mov	r3, r9
    8b76:	4620      	mov	r0, r4
    8b78:	4629      	mov	r1, r5
    8b7a:	f009 ff4d 	bl	12a18 <__aeabi_dmul>
    8b7e:	460d      	mov	r5, r1
    8b80:	4604      	mov	r4, r0
			n = (uint8_t)(remainder);
    8b82:	f003 f9ad 	bl	bee0 <__aeabi_d2uiz>
    8b86:	b2c0      	uxtb	r0, r0
			buf[count++] = '0' + n;
    8b88:	f100 0330 	add.w	r3, r0, #48	; 0x30
    8b8c:	f807 3f01 	strb.w	r3, [r7, #1]!
			remainder -= n; 
    8b90:	f003 f89e 	bl	bcd0 <__aeabi_i2d>
    8b94:	4602      	mov	r2, r0
    8b96:	460b      	mov	r3, r1
    8b98:	4620      	mov	r0, r4
    8b9a:	4629      	mov	r1, r5
    8b9c:	f002 ff4a 	bl	ba34 <__aeabi_dsub>
		while (digits-- > 0) {
    8ba0:	45ba      	cmp	sl, r7
			remainder -= n; 
    8ba2:	4604      	mov	r4, r0
    8ba4:	460d      	mov	r5, r1
		while (digits-- > 0) {
    8ba6:	d1e4      	bne.n	8b72 <Print::printFloat(double, unsigned char)+0x102>
			buf[count++] = '0' + n;
    8ba8:	9a01      	ldr	r2, [sp, #4]
		}
		count += write(buf, count);
    8baa:	6833      	ldr	r3, [r6, #0]
			buf[count++] = '0' + n;
    8bac:	3201      	adds	r2, #1
		count += write(buf, count);
    8bae:	685b      	ldr	r3, [r3, #4]
    8bb0:	b2d2      	uxtb	r2, r2
    8bb2:	a902      	add	r1, sp, #8
    8bb4:	4630      	mov	r0, r6
    8bb6:	4798      	blx	r3
	}
	return count;
}
    8bb8:	4658      	mov	r0, fp
    8bba:	b007      	add	sp, #28
    8bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							  return write((const uint8_t *)str, strlen(str)); }
    8bc0:	6833      	ldr	r3, [r6, #0]
    8bc2:	4918      	ldr	r1, [pc, #96]	; (8c24 <Print::printFloat(double, unsigned char)+0x1b4>)
    8bc4:	685b      	ldr	r3, [r3, #4]
    8bc6:	2203      	movs	r2, #3
    8bc8:	4630      	mov	r0, r6
    8bca:	b007      	add	sp, #28
    8bcc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8bd0:	4718      	bx	r3
    8bd2:	6833      	ldr	r3, [r6, #0]
    8bd4:	4914      	ldr	r1, [pc, #80]	; (8c28 <Print::printFloat(double, unsigned char)+0x1b8>)
    8bd6:	e7f5      	b.n	8bc4 <Print::printFloat(double, unsigned char)+0x154>
		number = -number;
    8bd8:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
		sign = 1;
    8bdc:	2501      	movs	r5, #1
    8bde:	e785      	b.n	8aec <Print::printFloat(double, unsigned char)+0x7c>
    8be0:	6833      	ldr	r3, [r6, #0]
    8be2:	4912      	ldr	r1, [pc, #72]	; (8c2c <Print::printFloat(double, unsigned char)+0x1bc>)
    8be4:	e7ee      	b.n	8bc4 <Print::printFloat(double, unsigned char)+0x154>
	number += rounding;
    8be6:	4b0d      	ldr	r3, [pc, #52]	; (8c1c <Print::printFloat(double, unsigned char)+0x1ac>)
    8be8:	2200      	movs	r2, #0
    8bea:	4620      	mov	r0, r4
    8bec:	4651      	mov	r1, sl
    8bee:	f002 ff23 	bl	ba38 <__adddf3>
	unsigned long int_part = (unsigned long)number;
    8bf2:	f003 f975 	bl	bee0 <__aeabi_d2uiz>
    8bf6:	462b      	mov	r3, r5
    8bf8:	4601      	mov	r1, r0
    8bfa:	220a      	movs	r2, #10
    8bfc:	4630      	mov	r0, r6
}
    8bfe:	b007      	add	sp, #28
    8c00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8c04:	f7ff bec6 	b.w	8994 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    8c08:	a0000000 	.word	0xa0000000
    8c0c:	3fb99999 	.word	0x3fb99999
    8c10:	7fefffff 	.word	0x7fefffff
    8c14:	41efffff 	.word	0x41efffff
    8c18:	c1efffff 	.word	0xc1efffff
    8c1c:	3fe00000 	.word	0x3fe00000
    8c20:	40240000 	.word	0x40240000
    8c24:	000144dc 	.word	0x000144dc
    8c28:	000144d8 	.word	0x000144d8
    8c2c:	000144d4 	.word	0x000144d4

00008c30 <Stream::timedPeek()>:
  return -1;     // -1 indicates timeout
}

// private method to peek stream with timeout
int Stream::timedPeek()
{
    8c30:	b570      	push	{r4, r5, r6, lr}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8c32:	4d0e      	ldr	r5, [pc, #56]	; (8c6c <Stream::timedPeek()+0x3c>)
    8c34:	b082      	sub	sp, #8
    8c36:	682b      	ldr	r3, [r5, #0]
    8c38:	9300      	str	r3, [sp, #0]
	return ret;
    8c3a:	9e00      	ldr	r6, [sp, #0]
    8c3c:	4604      	mov	r4, r0
    8c3e:	e008      	b.n	8c52 <Stream::timedPeek()+0x22>
  int c;
  unsigned long startMillis = millis();
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
    8c40:	f002 fca2 	bl	b588 <yield>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8c44:	682b      	ldr	r3, [r5, #0]
    8c46:	9301      	str	r3, [sp, #4]
	return ret;
    8c48:	9b01      	ldr	r3, [sp, #4]
  } while(millis() - startMillis < _timeout);
    8c4a:	68a2      	ldr	r2, [r4, #8]
    8c4c:	1b9b      	subs	r3, r3, r6
    8c4e:	4293      	cmp	r3, r2
    8c50:	d207      	bcs.n	8c62 <Stream::timedPeek()+0x32>
    c = peek();
    8c52:	6823      	ldr	r3, [r4, #0]
    8c54:	4620      	mov	r0, r4
    8c56:	699b      	ldr	r3, [r3, #24]
    8c58:	4798      	blx	r3
    if (c >= 0) return c;
    8c5a:	2800      	cmp	r0, #0
    8c5c:	dbf0      	blt.n	8c40 <Stream::timedPeek()+0x10>
  return -1;     // -1 indicates timeout
}
    8c5e:	b002      	add	sp, #8
    8c60:	bd70      	pop	{r4, r5, r6, pc}
  return -1;     // -1 indicates timeout
    8c62:	f04f 30ff 	mov.w	r0, #4294967295
}
    8c66:	b002      	add	sp, #8
    8c68:	bd70      	pop	{r4, r5, r6, pc}
    8c6a:	bf00      	nop
    8c6c:	1fffb4e0 	.word	0x1fffb4e0

00008c70 <Stream::parseInt(char)>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
    8c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8c72:	4604      	mov	r4, r0
    8c74:	460d      	mov	r5, r1
int Stream::peekNextDigit()
    8c76:	e006      	b.n	8c86 <Stream::parseInt(char)+0x16>
    if (c == '-') return c;
    8c78:	2b2d      	cmp	r3, #45	; 0x2d
    8c7a:	d00f      	beq.n	8c9c <Stream::parseInt(char)+0x2c>
    if (c >= '0' && c <= '9') return c;
    8c7c:	2a09      	cmp	r2, #9
    8c7e:	d90d      	bls.n	8c9c <Stream::parseInt(char)+0x2c>
    read();  // discard non-numeric
    8c80:	6823      	ldr	r3, [r4, #0]
    8c82:	695b      	ldr	r3, [r3, #20]
    8c84:	4798      	blx	r3
    c = timedPeek();
    8c86:	4620      	mov	r0, r4
    8c88:	f7ff ffd2 	bl	8c30 <Stream::timedPeek()>
    if (c < 0) return c;  // timeout
    8c8c:	1e03      	subs	r3, r0, #0
    if (c >= '0' && c <= '9') return c;
    8c8e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    read();  // discard non-numeric
    8c92:	4620      	mov	r0, r4
    if (c < 0) return c;  // timeout
    8c94:	daf0      	bge.n	8c78 <Stream::parseInt(char)+0x8>
  int c;

  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
    8c96:	2700      	movs	r7, #0
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    value = -value;
  return value;
}
    8c98:	4638      	mov	r0, r7
    8c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(c == skipChar)
    8c9c:	2700      	movs	r7, #0
    8c9e:	463e      	mov	r6, r7
    8ca0:	42ab      	cmp	r3, r5
    8ca2:	d00b      	beq.n	8cbc <Stream::parseInt(char)+0x4c>
    else if(c == '-')
    8ca4:	2b2d      	cmp	r3, #45	; 0x2d
    8ca6:	d01c      	beq.n	8ce2 <Stream::parseInt(char)+0x72>
    else if(c >= '0' && c <= '9')        // is c a digit?
    8ca8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    8cac:	2a09      	cmp	r2, #9
    8cae:	d805      	bhi.n	8cbc <Stream::parseInt(char)+0x4c>
      value = value * 10 + c - '0';
    8cb0:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    8cb4:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    8cb8:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
    read();  // consume the character we got with peek
    8cbc:	6823      	ldr	r3, [r4, #0]
    8cbe:	4620      	mov	r0, r4
    8cc0:	695b      	ldr	r3, [r3, #20]
    8cc2:	4798      	blx	r3
    c = timedPeek();
    8cc4:	4620      	mov	r0, r4
    8cc6:	f7ff ffb3 	bl	8c30 <Stream::timedPeek()>
  while( (c >= '0' && c <= '9') || c == skipChar );
    8cca:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    8cce:	2a09      	cmp	r2, #9
    c = timedPeek();
    8cd0:	4603      	mov	r3, r0
  while( (c >= '0' && c <= '9') || c == skipChar );
    8cd2:	d9e5      	bls.n	8ca0 <Stream::parseInt(char)+0x30>
    8cd4:	42a8      	cmp	r0, r5
    8cd6:	d0f1      	beq.n	8cbc <Stream::parseInt(char)+0x4c>
  if(isNegative)
    8cd8:	2e00      	cmp	r6, #0
    8cda:	d0dd      	beq.n	8c98 <Stream::parseInt(char)+0x28>
    value = -value;
    8cdc:	427f      	negs	r7, r7
}
    8cde:	4638      	mov	r0, r7
    8ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      isNegative = true;
    8ce2:	2601      	movs	r6, #1
    8ce4:	e7ea      	b.n	8cbc <Stream::parseInt(char)+0x4c>
    8ce6:	bf00      	nop

00008ce8 <Stream::parseInt()>:
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
    8ce8:	2101      	movs	r1, #1
    8cea:	f7ff bfc1 	b.w	8c70 <Stream::parseInt(char)>
    8cee:	bf00      	nop

00008cf0 <analog_init>:
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    8cf0:	4b2a      	ldr	r3, [pc, #168]	; (8d9c <analog_init+0xac>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    8cf2:	4a2b      	ldr	r2, [pc, #172]	; (8da0 <analog_init+0xb0>)
	VREF_TRM = 0x60;
    8cf4:	2060      	movs	r0, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    8cf6:	21e1      	movs	r1, #225	; 0xe1
	VREF_TRM = 0x60;
    8cf8:	7018      	strb	r0, [r3, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    8cfa:	7059      	strb	r1, [r3, #1]
	if (analog_config_bits == 8) {
    8cfc:	7813      	ldrb	r3, [r2, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    8cfe:	4829      	ldr	r0, [pc, #164]	; (8da4 <analog_init+0xb4>)
	if (analog_config_bits == 8) {
    8d00:	2b08      	cmp	r3, #8
    8d02:	d034      	beq.n	8d6e <analog_init+0x7e>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    8d04:	2b0a      	cmp	r3, #10
    8d06:	d020      	beq.n	8d4a <analog_init+0x5a>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    8d08:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    8d0a:	4b27      	ldr	r3, [pc, #156]	; (8da8 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    8d0c:	bf0c      	ite	eq
    8d0e:	2135      	moveq	r1, #53	; 0x35
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    8d10:	213d      	movne	r1, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    8d12:	2212      	movs	r2, #18
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    8d14:	6081      	str	r1, [r0, #8]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    8d16:	60c2      	str	r2, [r0, #12]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    8d18:	6099      	str	r1, [r3, #8]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    8d1a:	60da      	str	r2, [r3, #12]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    8d1c:	4b23      	ldr	r3, [pc, #140]	; (8dac <analog_init+0xbc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    8d1e:	4921      	ldr	r1, [pc, #132]	; (8da4 <analog_init+0xb4>)
	if (analog_reference_internal) {
    8d20:	781b      	ldrb	r3, [r3, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    8d22:	4a21      	ldr	r2, [pc, #132]	; (8da8 <analog_init+0xb8>)
	if (analog_reference_internal) {
    8d24:	b1cb      	cbz	r3, 8d5a <analog_init+0x6a>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    8d26:	2301      	movs	r3, #1
    8d28:	620b      	str	r3, [r1, #32]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    8d2a:	6213      	str	r3, [r2, #32]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    8d2c:	4b20      	ldr	r3, [pc, #128]	; (8db0 <analog_init+0xc0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    8d2e:	491d      	ldr	r1, [pc, #116]	; (8da4 <analog_init+0xb4>)
	num = analog_num_average;
    8d30:	781b      	ldrb	r3, [r3, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    8d32:	4a1d      	ldr	r2, [pc, #116]	; (8da8 <analog_init+0xb8>)
	if (num <= 1) {
    8d34:	2b01      	cmp	r3, #1
    8d36:	d913      	bls.n	8d60 <analog_init+0x70>
		#endif
	} else if (num <= 4) {
    8d38:	2b04      	cmp	r3, #4
    8d3a:	d81b      	bhi.n	8d74 <analog_init+0x84>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    8d3c:	2384      	movs	r3, #132	; 0x84
    8d3e:	624b      	str	r3, [r1, #36]	; 0x24
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    8d40:	6253      	str	r3, [r2, #36]	; 0x24
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
		#endif
	}
	calibrating = 1;
    8d42:	4b1c      	ldr	r3, [pc, #112]	; (8db4 <analog_init+0xc4>)
    8d44:	2201      	movs	r2, #1
    8d46:	701a      	strb	r2, [r3, #0]
}
    8d48:	4770      	bx	lr
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    8d4a:	4b17      	ldr	r3, [pc, #92]	; (8da8 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    8d4c:	2139      	movs	r1, #57	; 0x39
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8d4e:	2213      	movs	r2, #19
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    8d50:	6081      	str	r1, [r0, #8]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8d52:	60c2      	str	r2, [r0, #12]
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    8d54:	6099      	str	r1, [r3, #8]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8d56:	60da      	str	r2, [r3, #12]
    8d58:	e7e0      	b.n	8d1c <analog_init+0x2c>
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    8d5a:	620b      	str	r3, [r1, #32]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    8d5c:	6213      	str	r3, [r2, #32]
    8d5e:	e7e5      	b.n	8d2c <analog_init+0x3c>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    8d60:	2380      	movs	r3, #128	; 0x80
    8d62:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    8d64:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    8d66:	4b13      	ldr	r3, [pc, #76]	; (8db4 <analog_init+0xc4>)
    8d68:	2201      	movs	r2, #1
    8d6a:	701a      	strb	r2, [r3, #0]
}
    8d6c:	4770      	bx	lr
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    8d6e:	4b0e      	ldr	r3, [pc, #56]	; (8da8 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    8d70:	2101      	movs	r1, #1
    8d72:	e7ec      	b.n	8d4e <analog_init+0x5e>
	} else if (num <= 8) {
    8d74:	2b08      	cmp	r3, #8
    8d76:	d806      	bhi.n	8d86 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    8d78:	2385      	movs	r3, #133	; 0x85
    8d7a:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    8d7c:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    8d7e:	4b0d      	ldr	r3, [pc, #52]	; (8db4 <analog_init+0xc4>)
    8d80:	2201      	movs	r2, #1
    8d82:	701a      	strb	r2, [r3, #0]
}
    8d84:	4770      	bx	lr
	} else if (num <= 16) {
    8d86:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    8d88:	bf94      	ite	ls
    8d8a:	2386      	movls	r3, #134	; 0x86
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    8d8c:	2387      	movhi	r3, #135	; 0x87
    8d8e:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    8d90:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    8d92:	4b08      	ldr	r3, [pc, #32]	; (8db4 <analog_init+0xc4>)
    8d94:	2201      	movs	r2, #1
    8d96:	701a      	strb	r2, [r3, #0]
}
    8d98:	4770      	bx	lr
    8d9a:	bf00      	nop
    8d9c:	40074000 	.word	0x40074000
    8da0:	1fff87d4 	.word	0x1fff87d4
    8da4:	4003b000 	.word	0x4003b000
    8da8:	400bb000 	.word	0x400bb000
    8dac:	1fffb4dc 	.word	0x1fffb4dc
    8db0:	1fff87d5 	.word	0x1fff87d5
    8db4:	1fffb4dd 	.word	0x1fffb4dd

00008db8 <analogWriteDAC0>:
typedef int16_t __attribute__((__may_alias__)) aliased_int16_t;

void analogWriteDAC0(int val)
{
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_DAC0;
    8db8:	4a0b      	ldr	r2, [pc, #44]	; (8de8 <analogWriteDAC0+0x30>)
	if (analog_reference_internal) {
    8dba:	490c      	ldr	r1, [pc, #48]	; (8dec <analogWriteDAC0+0x34>)
	SIM_SCGC2 |= SIM_SCGC2_DAC0;
    8dbc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    8dbe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    8dc2:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (analog_reference_internal) {
    8dc4:	780b      	ldrb	r3, [r1, #0]
    8dc6:	b14b      	cbz	r3, 8ddc <analogWriteDAC0+0x24>
		DAC0_C0 = DAC_C0_DACEN;  // 1.2V ref is DACREF_1
    8dc8:	4b09      	ldr	r3, [pc, #36]	; (8df0 <analogWriteDAC0+0x38>)
    8dca:	2280      	movs	r2, #128	; 0x80
    8dcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	} else {
		DAC0_C0 = DAC_C0_DACEN | DAC_C0_DACRFS; // 3.3V VDDA is DACREF_2
	}
	__asm__ ("usat    %[value], #12, %[value]\n\t" : [value] "+r" (val));  // 0 <= val <= 4095

	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
    8dd0:	4b07      	ldr	r3, [pc, #28]	; (8df0 <analogWriteDAC0+0x38>)
	__asm__ ("usat    %[value], #12, %[value]\n\t" : [value] "+r" (val));  // 0 <= val <= 4095
    8dd2:	f380 000c 	usat	r0, #12, r0
	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
    8dd6:	b200      	sxth	r0, r0
    8dd8:	8018      	strh	r0, [r3, #0]
	if (val < 0) val = 0;
	else if (val > 4095) val = 4095;

	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
#endif
}
    8dda:	4770      	bx	lr
		DAC0_C0 = DAC_C0_DACEN | DAC_C0_DACRFS; // 3.3V VDDA is DACREF_2
    8ddc:	4b04      	ldr	r3, [pc, #16]	; (8df0 <analogWriteDAC0+0x38>)
    8dde:	22c0      	movs	r2, #192	; 0xc0
    8de0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    8de4:	e7f4      	b.n	8dd0 <analogWriteDAC0+0x18>
    8de6:	bf00      	nop
    8de8:	40048000 	.word	0x40048000
    8dec:	1fffb4dc 	.word	0x1fffb4dc
    8df0:	400cc000 	.word	0x400cc000

00008df4 <eeprom_initialize>:
//
#define HANDLE_UNALIGNED_WRITES


void eeprom_initialize(void)
{
    8df4:	b510      	push	{r4, lr}
	uint32_t count=0;
	uint16_t do_flash_cmd[] = {
    8df6:	4b17      	ldr	r3, [pc, #92]	; (8e54 <eeprom_initialize+0x60>)
    8df8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
{
    8dfa:	b084      	sub	sp, #16
	uint16_t do_flash_cmd[] = {
    8dfc:	46ec      	mov	ip, sp
    8dfe:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		0xf06f, 0x037f, 0x7003, 0x7803,
		0xf013, 0x0f80, 0xd0fb, 0x4770};
	uint8_t status;

	if (FTFL_FCNFG & FTFL_FCNFG_RAMRDY) {
    8e02:	4b15      	ldr	r3, [pc, #84]	; (8e58 <eeprom_initialize+0x64>)
    8e04:	785a      	ldrb	r2, [r3, #1]
    8e06:	0791      	lsls	r1, r2, #30
    8e08:	d517      	bpl.n	8e3a <eeprom_initialize+0x46>
		uint8_t stat = FTFL_FSTAT & 0x70;
    8e0a:	781a      	ldrb	r2, [r3, #0]
		if (stat) FTFL_FSTAT = stat;
		// FlexRAM is configured as traditional RAM
		// We need to reconfigure for EEPROM usage
		kinetis_hsrun_disable();
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    8e0c:	4c12      	ldr	r4, [pc, #72]	; (8e58 <eeprom_initialize+0x64>)
		if (stat) FTFL_FSTAT = stat;
    8e0e:	f012 0270 	ands.w	r2, r2, #112	; 0x70
    8e12:	bf18      	it	ne
    8e14:	701a      	strbne	r2, [r3, #0]
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    8e16:	2180      	movs	r1, #128	; 0x80
		FTFL_FCCOB3 = 0;
    8e18:	2300      	movs	r3, #0
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    8e1a:	71e1      	strb	r1, [r4, #7]
		FTFL_FCCOB4 = EEESPLIT | EEESIZE;
    8e1c:	2233      	movs	r2, #51	; 0x33
		FTFL_FCCOB3 = 0;
    8e1e:	7123      	strb	r3, [r4, #4]
		FTFL_FCCOB5 = EEPARTITION;
    8e20:	2303      	movs	r3, #3
		FTFL_FCCOB4 = EEESPLIT | EEESIZE;
    8e22:	72e2      	strb	r2, [r4, #11]
		FTFL_FCCOB5 = EEPARTITION;
    8e24:	72a3      	strb	r3, [r4, #10]
		__disable_irq();
    8e26:	b672      	cpsid	i
		// do_flash_cmd() must execute from RAM.  Luckily the C syntax is simple...
		(*((void (*)(volatile uint8_t *))((uint32_t)do_flash_cmd | 1)))(&FTFL_FSTAT);
    8e28:	f04c 0301 	orr.w	r3, ip, #1
    8e2c:	4620      	mov	r0, r4
    8e2e:	4798      	blx	r3
		__enable_irq();
    8e30:	b662      	cpsie	i
		kinetis_hsrun_enable();
		status = FTFL_FSTAT;
    8e32:	7823      	ldrb	r3, [r4, #0]
		if (status & 0x70) {
    8e34:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    8e38:	d109      	bne.n	8e4e <eeprom_initialize+0x5a>
{
    8e3a:	4b08      	ldr	r3, [pc, #32]	; (8e5c <eeprom_initialize+0x68>)
			FTFL_FSTAT = (status & 0x70);
			return; // error
		}
	}
	// wait for eeprom to become ready (is this really necessary?)
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    8e3c:	4906      	ldr	r1, [pc, #24]	; (8e58 <eeprom_initialize+0x64>)
    8e3e:	e001      	b.n	8e44 <eeprom_initialize+0x50>
		if (++count > 200000) break;
    8e40:	3b01      	subs	r3, #1
    8e42:	d002      	beq.n	8e4a <eeprom_initialize+0x56>
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    8e44:	784a      	ldrb	r2, [r1, #1]
    8e46:	07d2      	lsls	r2, r2, #31
    8e48:	d5fa      	bpl.n	8e40 <eeprom_initialize+0x4c>
	}
}
    8e4a:	b004      	add	sp, #16
    8e4c:	bd10      	pop	{r4, pc}
			FTFL_FSTAT = (status & 0x70);
    8e4e:	7023      	strb	r3, [r4, #0]
}
    8e50:	b004      	add	sp, #16
    8e52:	bd10      	pop	{r4, pc}
    8e54:	000144e0 	.word	0x000144e0
    8e58:	40020000 	.word	0x40020000
    8e5c:	00030d41 	.word	0x00030d41

00008e60 <eeprom_read_byte>:
#define FlexRAM ((volatile uint8_t *)0x14000000)

uint8_t eeprom_read_byte(const uint8_t *addr)
{
	uint32_t offset = (uint32_t)addr;
	if (offset >= EEPROM_SIZE) return 0;
    8e60:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    8e64:	d211      	bcs.n	8e8a <eeprom_read_byte+0x2a>
{
    8e66:	b510      	push	{r4, lr}
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    8e68:	4b09      	ldr	r3, [pc, #36]	; (8e90 <eeprom_read_byte+0x30>)
    8e6a:	785b      	ldrb	r3, [r3, #1]
    8e6c:	07db      	lsls	r3, r3, #31
    8e6e:	4604      	mov	r4, r0
    8e70:	d504      	bpl.n	8e7c <eeprom_read_byte+0x1c>
	return FlexRAM[offset];
    8e72:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
    8e76:	7820      	ldrb	r0, [r4, #0]
    8e78:	b2c0      	uxtb	r0, r0
}
    8e7a:	bd10      	pop	{r4, pc}
	return FlexRAM[offset];
    8e7c:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    8e80:	f7ff ffb8 	bl	8df4 <eeprom_initialize>
	return FlexRAM[offset];
    8e84:	7820      	ldrb	r0, [r4, #0]
    8e86:	b2c0      	uxtb	r0, r0
}
    8e88:	bd10      	pop	{r4, pc}
	if (offset >= EEPROM_SIZE) return 0;
    8e8a:	2000      	movs	r0, #0
}
    8e8c:	4770      	bx	lr
    8e8e:	bf00      	nop
    8e90:	40020000 	.word	0x40020000

00008e94 <eeprom_write_block>:
void eeprom_write_block(const void *buf, void *addr, uint32_t len)
{
	uint32_t offset = (uint32_t)addr;
	const uint8_t *src = (const uint8_t *)buf;

	if (offset >= EEPROM_SIZE) return;
    8e94:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    8e98:	d276      	bcs.n	8f88 <eeprom_write_block+0xf4>
{
    8e9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    8e9c:	4b3b      	ldr	r3, [pc, #236]	; (8f8c <eeprom_write_block+0xf8>)
    8e9e:	785b      	ldrb	r3, [r3, #1]
    8ea0:	07db      	lsls	r3, r3, #31
    8ea2:	460e      	mov	r6, r1
    8ea4:	4604      	mov	r4, r0
    8ea6:	4617      	mov	r7, r2
    8ea8:	460d      	mov	r5, r1
    8eaa:	d51f      	bpl.n	8eec <eeprom_write_block+0x58>
	if (len >= EEPROM_SIZE) len = EEPROM_SIZE;
    8eac:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
    8eb0:	4638      	mov	r0, r7
    8eb2:	bf28      	it	cs
    8eb4:	f44f 6000 	movcs.w	r0, #2048	; 0x800
	if (offset + len >= EEPROM_SIZE) len = EEPROM_SIZE - offset;
    8eb8:	1833      	adds	r3, r6, r0
    8eba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    8ebe:	d212      	bcs.n	8ee6 <eeprom_write_block+0x52>
	while (len > 0) {
    8ec0:	b187      	cbz	r7, 8ee4 <eeprom_write_block+0x50>
		} else {
			// write 8 bits
			uint8_t val8 = *src++;
			if (FlexRAM[offset] != val8) {
				kinetis_hsrun_disable();
				uint8_t stat = FTFL_FSTAT & 0x70;
    8ec2:	4a32      	ldr	r2, [pc, #200]	; (8f8c <eeprom_write_block+0xf8>)
		if (lsb == 0 && len >= 4) {
    8ec4:	f015 0303 	ands.w	r3, r5, #3
    8ec8:	d026      	beq.n	8f18 <eeprom_write_block+0x84>
		} else if ((lsb == 0 || lsb == 2) && len >= 2) {
    8eca:	2b02      	cmp	r3, #2
    8ecc:	d011      	beq.n	8ef2 <eeprom_write_block+0x5e>
			if (FlexRAM[offset] != val8) {
    8ece:	f105 53a0 	add.w	r3, r5, #335544320	; 0x14000000
			uint8_t val8 = *src++;
    8ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
			if (FlexRAM[offset] != val8) {
    8ed6:	781e      	ldrb	r6, [r3, #0]
    8ed8:	428e      	cmp	r6, r1
    8eda:	d137      	bne.n	8f4c <eeprom_write_block+0xb8>
				FlexRAM[offset] = val8;
				flexram_wait();
				kinetis_hsrun_enable();
			}
			offset++;
			len--;
    8edc:	3801      	subs	r0, #1
			offset++;
    8ede:	3501      	adds	r5, #1
	while (len > 0) {
    8ee0:	2800      	cmp	r0, #0
    8ee2:	d1ef      	bne.n	8ec4 <eeprom_write_block+0x30>
		}
	}
}
    8ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (offset + len >= EEPROM_SIZE) len = EEPROM_SIZE - offset;
    8ee6:	f5c6 6000 	rsb	r0, r6, #2048	; 0x800
	while (len > 0) {
    8eea:	e7ea      	b.n	8ec2 <eeprom_write_block+0x2e>
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    8eec:	f7ff ff82 	bl	8df4 <eeprom_initialize>
    8ef0:	e7dc      	b.n	8eac <eeprom_write_block+0x18>
		} else if ((lsb == 0 || lsb == 2) && len >= 2) {
    8ef2:	2801      	cmp	r0, #1
    8ef4:	d0eb      	beq.n	8ece <eeprom_write_block+0x3a>
			val16 |= (*src++ << 8);
    8ef6:	4621      	mov	r1, r4
			if (*(uint16_t *)(&FlexRAM[offset]) != val16) {
    8ef8:	f105 56a0 	add.w	r6, r5, #335544320	; 0x14000000
    8efc:	7867      	ldrb	r7, [r4, #1]
    8efe:	f811 3b02 	ldrb.w	r3, [r1], #2
    8f02:	8834      	ldrh	r4, [r6, #0]
    8f04:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    8f08:	429c      	cmp	r4, r3
    8f0a:	d129      	bne.n	8f60 <eeprom_write_block+0xcc>
			len -= 2;
    8f0c:	3802      	subs	r0, #2
			offset += 2;
    8f0e:	3502      	adds	r5, #2
			val16 |= (*src++ << 8);
    8f10:	460c      	mov	r4, r1
	while (len > 0) {
    8f12:	2800      	cmp	r0, #0
    8f14:	d1d6      	bne.n	8ec4 <eeprom_write_block+0x30>
    8f16:	e7e5      	b.n	8ee4 <eeprom_write_block+0x50>
		if (lsb == 0 && len >= 4) {
    8f18:	2803      	cmp	r0, #3
    8f1a:	d9ea      	bls.n	8ef2 <eeprom_write_block+0x5e>
			val32 |= (*src++ << 24);
    8f1c:	4621      	mov	r1, r4
    8f1e:	f894 c001 	ldrb.w	ip, [r4, #1]
    8f22:	f811 3b04 	ldrb.w	r3, [r1], #4
    8f26:	78a7      	ldrb	r7, [r4, #2]
    8f28:	78e6      	ldrb	r6, [r4, #3]
    8f2a:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
			if (*(uint32_t *)(&FlexRAM[offset]) != val32) {
    8f2e:	f105 54a0 	add.w	r4, r5, #335544320	; 0x14000000
			val32 |= (*src++ << 24);
    8f32:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
    8f36:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
			if (*(uint32_t *)(&FlexRAM[offset]) != val32) {
    8f3a:	6826      	ldr	r6, [r4, #0]
    8f3c:	429e      	cmp	r6, r3
    8f3e:	d119      	bne.n	8f74 <eeprom_write_block+0xe0>
			len -= 4;
    8f40:	3804      	subs	r0, #4
			offset += 4;
    8f42:	3504      	adds	r5, #4
			val32 |= (*src++ << 24);
    8f44:	460c      	mov	r4, r1
	while (len > 0) {
    8f46:	2800      	cmp	r0, #0
    8f48:	d1bc      	bne.n	8ec4 <eeprom_write_block+0x30>
    8f4a:	e7cb      	b.n	8ee4 <eeprom_write_block+0x50>
				uint8_t stat = FTFL_FSTAT & 0x70;
    8f4c:	7816      	ldrb	r6, [r2, #0]
				if (stat) FTFL_FSTAT = stat;
    8f4e:	f016 0670 	ands.w	r6, r6, #112	; 0x70
    8f52:	bf18      	it	ne
    8f54:	7016      	strbne	r6, [r2, #0]
				FlexRAM[offset] = val8;
    8f56:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    8f58:	7853      	ldrb	r3, [r2, #1]
    8f5a:	07db      	lsls	r3, r3, #31
    8f5c:	d5fc      	bpl.n	8f58 <eeprom_write_block+0xc4>
    8f5e:	e7bd      	b.n	8edc <eeprom_write_block+0x48>
				uint8_t stat = FTFL_FSTAT & 0x70;
    8f60:	7814      	ldrb	r4, [r2, #0]
				if (stat) FTFL_FSTAT = stat;
    8f62:	f014 0470 	ands.w	r4, r4, #112	; 0x70
    8f66:	bf18      	it	ne
    8f68:	7014      	strbne	r4, [r2, #0]
				*(uint16_t *)(&FlexRAM[offset]) = val16;
    8f6a:	8033      	strh	r3, [r6, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    8f6c:	7853      	ldrb	r3, [r2, #1]
    8f6e:	07dc      	lsls	r4, r3, #31
    8f70:	d5fc      	bpl.n	8f6c <eeprom_write_block+0xd8>
    8f72:	e7cb      	b.n	8f0c <eeprom_write_block+0x78>
				uint8_t stat = FTFL_FSTAT & 0x70;
    8f74:	7816      	ldrb	r6, [r2, #0]
				if (stat) FTFL_FSTAT = stat;
    8f76:	f016 0670 	ands.w	r6, r6, #112	; 0x70
    8f7a:	bf18      	it	ne
    8f7c:	7016      	strbne	r6, [r2, #0]
				*(uint32_t *)(&FlexRAM[offset]) = val32;
    8f7e:	6023      	str	r3, [r4, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    8f80:	7853      	ldrb	r3, [r2, #1]
    8f82:	07de      	lsls	r6, r3, #31
    8f84:	d5fc      	bpl.n	8f80 <eeprom_write_block+0xec>
    8f86:	e7db      	b.n	8f40 <eeprom_write_block+0xac>
    8f88:	4770      	bx	lr
    8f8a:	bf00      	nop
    8f8c:	40020000 	.word	0x40020000

00008f90 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    8f90:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    8f92:	f7fb faaf 	bl	44f4 <setup>
	while (1) {
		loop();
    8f96:	f7fd fad3 	bl	6540 <loop>
		yield();
    8f9a:	f002 faf5 	bl	b588 <yield>
	while (1) {
    8f9e:	e7fa      	b.n	8f96 <main+0x6>

00008fa0 <memcpy>:
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
#else
	push	{r0}
    8fa0:	b401      	push	{r0}
#endif
	orr	r3, r1, r0
    8fa2:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    8fa6:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    8faa:	d16f      	bne.n	908c <memcpy+0xec>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8fac:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    8fae:	d341      	bcc.n	9034 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8fb0:	f851 3b04 	ldr.w	r3, [r1], #4
    8fb4:	f840 3b04 	str.w	r3, [r0], #4
    8fb8:	f851 3b04 	ldr.w	r3, [r1], #4
    8fbc:	f840 3b04 	str.w	r3, [r0], #4
    8fc0:	f851 3b04 	ldr.w	r3, [r1], #4
    8fc4:	f840 3b04 	str.w	r3, [r0], #4
    8fc8:	f851 3b04 	ldr.w	r3, [r1], #4
    8fcc:	f840 3b04 	str.w	r3, [r0], #4
    8fd0:	f851 3b04 	ldr.w	r3, [r1], #4
    8fd4:	f840 3b04 	str.w	r3, [r0], #4
    8fd8:	f851 3b04 	ldr.w	r3, [r1], #4
    8fdc:	f840 3b04 	str.w	r3, [r0], #4
    8fe0:	f851 3b04 	ldr.w	r3, [r1], #4
    8fe4:	f840 3b04 	str.w	r3, [r0], #4
    8fe8:	f851 3b04 	ldr.w	r3, [r1], #4
    8fec:	f840 3b04 	str.w	r3, [r0], #4
    8ff0:	f851 3b04 	ldr.w	r3, [r1], #4
    8ff4:	f840 3b04 	str.w	r3, [r0], #4
    8ff8:	f851 3b04 	ldr.w	r3, [r1], #4
    8ffc:	f840 3b04 	str.w	r3, [r0], #4
    9000:	f851 3b04 	ldr.w	r3, [r1], #4
    9004:	f840 3b04 	str.w	r3, [r0], #4
    9008:	f851 3b04 	ldr.w	r3, [r1], #4
    900c:	f840 3b04 	str.w	r3, [r0], #4
    9010:	f851 3b04 	ldr.w	r3, [r1], #4
    9014:	f840 3b04 	str.w	r3, [r0], #4
    9018:	f851 3b04 	ldr.w	r3, [r1], #4
    901c:	f840 3b04 	str.w	r3, [r0], #4
    9020:	f851 3b04 	ldr.w	r3, [r1], #4
    9024:	f840 3b04 	str.w	r3, [r0], #4
    9028:	f851 3b04 	ldr.w	r3, [r1], #4
    902c:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9030:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    9032:	d2bd      	bcs.n	8fb0 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    9034:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    9036:	d311      	bcc.n	905c <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9038:	f851 3b04 	ldr.w	r3, [r1], #4
    903c:	f840 3b04 	str.w	r3, [r0], #4
    9040:	f851 3b04 	ldr.w	r3, [r1], #4
    9044:	f840 3b04 	str.w	r3, [r0], #4
    9048:	f851 3b04 	ldr.w	r3, [r1], #4
    904c:	f840 3b04 	str.w	r3, [r0], #4
    9050:	f851 3b04 	ldr.w	r3, [r1], #4
    9054:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    9058:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    905a:	d2ed      	bcs.n	9038 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    905c:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    905e:	d305      	bcc.n	906c <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    9060:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    9064:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    9068:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    906a:	d2f9      	bcs.n	9060 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    906c:	3204      	adds	r2, #4
	beq	.Ldone
    906e:	d00a      	beq.n	9086 <memcpy+0xe6>

	lsls	r2, r2, #31
    9070:	07d2      	lsls	r2, r2, #31
	itt ne
    9072:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    9074:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9078:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    907c:	d303      	bcc.n	9086 <memcpy+0xe6>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
	strh	r3, [r0]
#else
	ldrb	r3, [r1]
    907e:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    9080:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    9082:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    9084:	7043      	strb	r3, [r0, #1]

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    9086:	bc01      	pop	{r0}
#endif
	bx	lr
    9088:	4770      	bx	lr
    908a:	bf00      	nop
	beq	.Ldst_aligned
#else
	/* if len < 12, misalignment adjustment has more overhead than
	just byte-to-byte copy.  Also, len must >=8 to guarantee code
	afterward work correctly.  */
	cmp	r2, #12
    908c:	2a0c      	cmp	r2, #12
	blo	.Lbyte_copy
    908e:	d34a      	bcc.n	9126 <memcpy+0x186>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    9090:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    9094:	d011      	beq.n	90ba <memcpy+0x11a>

	rsb	r3, #4
    9096:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    909a:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    909c:	07db      	lsls	r3, r3, #31
	itt ne
    909e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    90a0:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    90a4:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    90a8:	d307      	bcc.n	90ba <memcpy+0x11a>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
	strh    r3, [r0], #2
	b	.Ldst_aligned
#else
	ldrb    r3, [r1], #1
    90aa:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    90ae:	f800 3b01 	strb.w	r3, [r0], #1
	ldrb    r3, [r1], #1
    90b2:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    90b6:	f800 3b01 	strb.w	r3, [r0], #1
	/* Now that dst is aligned */
.Ldst_aligned:
	/* if r1 is aligned now, it means r0/r1 has the same misalignment,
	and they are both aligned now.  Go aligned copy.  */
	ands	r3, r1, #3
    90ba:	f011 0303 	ands.w	r3, r1, #3
	beq	.Lbig_block
    90be:	f43f af75 	beq.w	8fac <memcpy+0xc>

	/* dst is aligned, but src isn't.  Misaligned copy.  */

	push	{r4, r5}
    90c2:	b430      	push	{r4, r5}
	subs	r2, #4
    90c4:	3a04      	subs	r2, #4

	/* Backward r1 by misaligned bytes, to make r1 aligned.
	Since we need to restore r1 to unaligned address after the loop,
	we need keep the offset bytes to ip and sub it from r1 afterward.  */
	subs	r1, r3
    90c6:	1ac9      	subs	r1, r1, r3
	rsb	ip, r3, #4
    90c8:	f1c3 0c04 	rsb	ip, r3, #4

	/* Pre-load on word */
	ldr	r4, [r1], #4
    90cc:	f851 4b04 	ldr.w	r4, [r1], #4

	cmp	r3, #2
    90d0:	2b02      	cmp	r3, #2
	beq	.Lmisaligned_copy_2_2
    90d2:	d019      	beq.n	9108 <memcpy+0x168>
	cmp	r3, #3
    90d4:	2b03      	cmp	r3, #3
	beq	.Lmisaligned_copy_3_1
    90d6:	d00b      	beq.n	90f0 <memcpy+0x150>
	subs	r2, #4
	bhs	1b
	.endm

.Lmisaligned_copy_1_3:
	mis_src_copy shift=8
    90d8:	0a24      	lsrs	r4, r4, #8
    90da:	f851 3b04 	ldr.w	r3, [r1], #4
    90de:	061d      	lsls	r5, r3, #24
    90e0:	ea44 0405 	orr.w	r4, r4, r5
    90e4:	f840 4b04 	str.w	r4, [r0], #4
    90e8:	461c      	mov	r4, r3
    90ea:	3a04      	subs	r2, #4
    90ec:	d2f4      	bcs.n	90d8 <memcpy+0x138>
	b	.Lsrc_misaligned_tail
    90ee:	e016      	b.n	911e <memcpy+0x17e>

.Lmisaligned_copy_3_1:
	mis_src_copy shift=24
    90f0:	0e24      	lsrs	r4, r4, #24
    90f2:	f851 3b04 	ldr.w	r3, [r1], #4
    90f6:	021d      	lsls	r5, r3, #8
    90f8:	ea44 0405 	orr.w	r4, r4, r5
    90fc:	f840 4b04 	str.w	r4, [r0], #4
    9100:	461c      	mov	r4, r3
    9102:	3a04      	subs	r2, #4
    9104:	d2f4      	bcs.n	90f0 <memcpy+0x150>
	b	.Lsrc_misaligned_tail
    9106:	e00a      	b.n	911e <memcpy+0x17e>

.Lmisaligned_copy_2_2:
	/* For 2_2 misalignment, ldr is still faster than 2 x ldrh.  */
	mis_src_copy shift=16
    9108:	0c24      	lsrs	r4, r4, #16
    910a:	f851 3b04 	ldr.w	r3, [r1], #4
    910e:	041d      	lsls	r5, r3, #16
    9110:	ea44 0405 	orr.w	r4, r4, r5
    9114:	f840 4b04 	str.w	r4, [r0], #4
    9118:	461c      	mov	r4, r3
    911a:	3a04      	subs	r2, #4
    911c:	d2f4      	bcs.n	9108 <memcpy+0x168>

.Lsrc_misaligned_tail:
	adds	r2, #4
    911e:	3204      	adds	r2, #4
	subs	r1, ip
    9120:	ebb1 010c 	subs.w	r1, r1, ip
	pop	{r4, r5}
    9124:	bc30      	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    9126:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    9128:	d3a0      	bcc.n	906c <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    912a:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    912c:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    9130:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    9134:	d2f9      	bcs.n	912a <memcpy+0x18a>

	ldrb	r3, [r1]
    9136:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    9138:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    913a:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    913c:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    913e:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    9140:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    9142:	bc01      	pop	{r0}
#endif
	bx	lr
    9144:	4770      	bx	lr
    9146:	bf00      	nop

00009148 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    9148:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    914a:	4c0f      	ldr	r4, [pc, #60]	; (9188 <fault_isr+0x40>)
    914c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    914e:	0358      	lsls	r0, r3, #13
    9150:	d40d      	bmi.n	916e <fault_isr+0x26>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    9152:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9154:	0559      	lsls	r1, r3, #21
    9156:	d40f      	bmi.n	9178 <fault_isr+0x30>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    9158:	6b63      	ldr	r3, [r4, #52]	; 0x34
    915a:	051a      	lsls	r2, r3, #20
    915c:	d411      	bmi.n	9182 <fault_isr+0x3a>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    915e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9160:	04db      	lsls	r3, r3, #19
    9162:	d5f3      	bpl.n	914c <fault_isr+0x4>
    9164:	f001 fac2 	bl	a6ec <uart2_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    9168:	6b63      	ldr	r3, [r4, #52]	; 0x34
    916a:	0358      	lsls	r0, r3, #13
    916c:	d5f1      	bpl.n	9152 <fault_isr+0xa>
    916e:	f001 fc3d 	bl	a9ec <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    9172:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9174:	0559      	lsls	r1, r3, #21
    9176:	d5ef      	bpl.n	9158 <fault_isr+0x10>
    9178:	f000 f808 	bl	918c <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    917c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    917e:	051a      	lsls	r2, r3, #20
    9180:	d5ed      	bpl.n	915e <fault_isr+0x16>
    9182:	f000 ff1f 	bl	9fc4 <uart1_status_isr>
    9186:	e7ea      	b.n	915e <fault_isr+0x16>
    9188:	40048000 	.word	0x40048000

0000918c <unused_isr>:
	}
}

void unused_isr(void)
{
    918c:	b508      	push	{r3, lr}
	fault_isr();
    918e:	f7ff ffdb 	bl	9148 <fault_isr>
    9192:	bf00      	nop

00009194 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    9194:	4b01      	ldr	r3, [pc, #4]	; (919c <startup_early_hook+0x8>)
    9196:	2210      	movs	r2, #16
    9198:	801a      	strh	r2, [r3, #0]
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
    919a:	4770      	bx	lr
    919c:	40052000 	.word	0x40052000

000091a0 <startup_late_hook>:
static void startup_default_late_hook(void) {}
    91a0:	4770      	bx	lr
    91a2:	bf00      	nop

000091a4 <_sbrk>:
__attribute__((weak))
void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    91a4:	4a09      	ldr	r2, [pc, #36]	; (91cc <_sbrk+0x28>)
{
    91a6:	b508      	push	{r3, lr}
    91a8:	4603      	mov	r3, r0
	prev = __brkval;
    91aa:	6810      	ldr	r0, [r2, #0]
	if (incr != 0) {
    91ac:	b133      	cbz	r3, 91bc <_sbrk+0x18>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    91ae:	4669      	mov	r1, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    91b0:	4403      	add	r3, r0
    91b2:	f5a1 5180 	sub.w	r1, r1, #4096	; 0x1000
    91b6:	428b      	cmp	r3, r1
    91b8:	d201      	bcs.n	91be <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    91ba:	6013      	str	r3, [r2, #0]
	}
	return prev;
}
    91bc:	bd08      	pop	{r3, pc}
			errno = ENOMEM;
    91be:	f004 f92f 	bl	d420 <__errno>
    91c2:	230c      	movs	r3, #12
    91c4:	6003      	str	r3, [r0, #0]
			return (void *)-1;
    91c6:	f04f 30ff 	mov.w	r0, #4294967295
}
    91ca:	bd08      	pop	{r3, pc}
    91cc:	1fff87d8 	.word	0x1fff87d8

000091d0 <_read>:

__attribute__((weak)) 
int _read(int file, char *ptr, int len)
{
	return 0;
}
    91d0:	2000      	movs	r0, #0
    91d2:	4770      	bx	lr

000091d4 <_close>:

__attribute__((weak)) 
int _close(int fd)
{
	return -1;
}
    91d4:	f04f 30ff 	mov.w	r0, #4294967295
    91d8:	4770      	bx	lr
    91da:	bf00      	nop

000091dc <_fstat>:
#include <sys/stat.h>

__attribute__((weak)) 
int _fstat(int fd, struct stat *st)
{
	st->st_mode = S_IFCHR;
    91dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    91e0:	604b      	str	r3, [r1, #4]
	return 0;
}
    91e2:	2000      	movs	r0, #0
    91e4:	4770      	bx	lr
    91e6:	bf00      	nop

000091e8 <_isatty>:

__attribute__((weak)) 
int _isatty(int fd)
{
	return 1;
}
    91e8:	2001      	movs	r0, #1
    91ea:	4770      	bx	lr

000091ec <_lseek>:

__attribute__((weak)) 
int _lseek(int fd, long long offset, int whence)
{
	return -1;
}
    91ec:	f04f 30ff 	mov.w	r0, #4294967295
    91f0:	4770      	bx	lr
    91f2:	bf00      	nop

000091f4 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) ;
    91f4:	e7fe      	b.n	91f4 <abort>
    91f6:	Address 0x000091f6 is out of bounds.


000091f8 <nvic_execution_priority>:
	uint32_t priority=256;
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    91f8:	f3ef 8313 	mrs	r3, FAULTMASK
	if (faultmask) return -1;
    91fc:	b9cb      	cbnz	r3, 9232 <nvic_execution_priority+0x3a>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    91fe:	f3ef 8010 	mrs	r0, PRIMASK
	if (primask) return 0;
    9202:	b9a0      	cbnz	r0, 922e <nvic_execution_priority+0x36>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    9204:	f3ef 8305 	mrs	r3, IPSR
	if (ipsr) {
    9208:	b943      	cbnz	r3, 921c <nvic_execution_priority+0x24>
	uint32_t priority=256;
    920a:	f44f 7080 	mov.w	r0, #256	; 0x100
		if (ipsr < 16) priority = 0; // could be non-zero
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    920e:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    9212:	b15b      	cbz	r3, 922c <nvic_execution_priority+0x34>
    9214:	4298      	cmp	r0, r3
    9216:	bf28      	it	cs
    9218:	4618      	movcs	r0, r3
	return priority;
    921a:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    921c:	2b0f      	cmp	r3, #15
    921e:	d9f6      	bls.n	920e <nvic_execution_priority+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    9220:	4a05      	ldr	r2, [pc, #20]	; (9238 <nvic_execution_priority+0x40>)
    9222:	5cd0      	ldrb	r0, [r2, r3]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    9224:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    9228:	2b00      	cmp	r3, #0
    922a:	d1f3      	bne.n	9214 <nvic_execution_priority+0x1c>
}
    922c:	4770      	bx	lr
	if (primask) return 0;
    922e:	4618      	mov	r0, r3
}
    9230:	4770      	bx	lr
	if (faultmask) return -1;
    9232:	f04f 30ff 	mov.w	r0, #4294967295
    9236:	4770      	bx	lr
    9238:	e000e3f0 	.word	0xe000e3f0

0000923c <operator new(unsigned int)>:

#include "new.h"

void * operator new(size_t size)
{
  return malloc(size);
    923c:	f003 b98a 	b.w	c554 <malloc>

00009240 <operator new[](unsigned int)>:
    9240:	f003 b988 	b.w	c554 <malloc>

00009244 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    9244:	f101 3cff 	add.w	ip, r1, #4294967295
{
    9248:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    924a:	4665      	mov	r5, ip
	int i=0, j;
    924c:	2400      	movs	r4, #0
    924e:	e001      	b.n	9254 <ultoa+0x10>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
    9250:	4670      	mov	r0, lr
		if (val == 0) break;
		i++;
    9252:	3401      	adds	r4, #1
		digit = val % radix;
    9254:	fbb0 fef2 	udiv	lr, r0, r2
    9258:	fb02 031e 	mls	r3, r2, lr, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    925c:	2b09      	cmp	r3, #9
    925e:	f103 0630 	add.w	r6, r3, #48	; 0x30
    9262:	bf8a      	itet	hi
    9264:	3337      	addhi	r3, #55	; 0x37
    9266:	b2f3      	uxtbls	r3, r6
    9268:	b2db      	uxtbhi	r3, r3
		if (val == 0) break;
    926a:	4290      	cmp	r0, r2
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    926c:	f805 3f01 	strb.w	r3, [r5, #1]!
		if (val == 0) break;
    9270:	d2ee      	bcs.n	9250 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    9272:	1c63      	adds	r3, r4, #1
    9274:	2200      	movs	r2, #0
    9276:	54ca      	strb	r2, [r1, r3]
    9278:	18c8      	adds	r0, r1, r3
	for (j=0; j < i; j++, i--) {
    927a:	b17c      	cbz	r4, 929c <ultoa+0x58>
		t = buf[j];
    927c:	4662      	mov	r2, ip
    927e:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    9282:	f810 ed01 	ldrb.w	lr, [r0, #-1]!
    9286:	f88c e000 	strb.w	lr, [ip]
	for (j=0; j < i; j++, i--) {
    928a:	eba1 030c 	sub.w	r3, r1, ip
    928e:	3202      	adds	r2, #2
    9290:	3b01      	subs	r3, #1
    9292:	1a52      	subs	r2, r2, r1
    9294:	4423      	add	r3, r4
    9296:	429a      	cmp	r2, r3
		buf[i] = t;
    9298:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    929a:	dbef      	blt.n	927c <ultoa+0x38>
	}
	return buf;
}
    929c:	4608      	mov	r0, r1
    929e:	bd70      	pop	{r4, r5, r6, pc}

000092a0 <digitalWrite.part.0>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    92a0:	b410      	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    92a2:	4b0f      	ldr	r3, [pc, #60]	; (92e0 <digitalWrite.part.0+0x40>)
    92a4:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    92a8:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    92ac:	b12c      	cbz	r4, 92ba <digitalWrite.part.0+0x1a>
		if (val) {
			*portSetRegister(pin) = 1;
    92ae:	2301      	movs	r3, #1
		if (val) {
    92b0:	b191      	cbz	r1, 92d8 <digitalWrite.part.0+0x38>
			*portSetRegister(pin) = 1;
    92b2:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    92b6:	bc10      	pop	{r4}
    92b8:	4770      	bx	lr
		volatile uint32_t *config = portConfigRegister(pin);
    92ba:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    92be:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    92c0:	681a      	ldr	r2, [r3, #0]
		if (val) {
    92c2:	b921      	cbnz	r1, 92ce <digitalWrite.part.0+0x2e>
			*config &= ~(PORT_PCR_PE);
    92c4:	f022 0202 	bic.w	r2, r2, #2
}
    92c8:	bc10      	pop	{r4}
			*config &= ~(PORT_PCR_PE);
    92ca:	601a      	str	r2, [r3, #0]
}
    92cc:	4770      	bx	lr
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    92ce:	f042 0203 	orr.w	r2, r2, #3
}
    92d2:	bc10      	pop	{r4}
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    92d4:	601a      	str	r2, [r3, #0]
}
    92d6:	4770      	bx	lr
			*portClearRegister(pin) = 1;
    92d8:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
}
    92dc:	bc10      	pop	{r4}
    92de:	4770      	bx	lr
    92e0:	000144f0 	.word	0x000144f0

000092e4 <rtc_set>:
	RTC_SR = 0;
    92e4:	4b03      	ldr	r3, [pc, #12]	; (92f4 <rtc_set+0x10>)
    92e6:	2200      	movs	r2, #0
	RTC_SR = RTC_SR_TCE;
    92e8:	2110      	movs	r1, #16
	RTC_SR = 0;
    92ea:	615a      	str	r2, [r3, #20]
	RTC_TPR = 0;
    92ec:	605a      	str	r2, [r3, #4]
	RTC_TSR = t;
    92ee:	6018      	str	r0, [r3, #0]
	RTC_SR = RTC_SR_TCE;
    92f0:	6159      	str	r1, [r3, #20]
}
    92f2:	4770      	bx	lr
    92f4:	4003d000 	.word	0x4003d000

000092f8 <startup_middle_hook>:
static void startup_default_middle_hook(void) {}
    92f8:	4770      	bx	lr
    92fa:	bf00      	nop

000092fc <_init_Teensyduino_internal_>:
{
    92fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    92fe:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    9302:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    9306:	f04f 7c80 	mov.w	ip, #16777216	; 0x1000000
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    930a:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    930e:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    9312:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
    9316:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	FTM0_CNT = 0;
    931a:	4a1d      	ldr	r2, [pc, #116]	; (9390 <_init_Teensyduino_internal_+0x94>)
	FTM1_CNT = 0;
    931c:	481d      	ldr	r0, [pc, #116]	; (9394 <_init_Teensyduino_internal_+0x98>)
	FTM2_CNT = 0;
    931e:	491e      	ldr	r1, [pc, #120]	; (9398 <_init_Teensyduino_internal_+0x9c>)
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    9320:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
    9324:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    9328:	2328      	movs	r3, #40	; 0x28
	FTM0_CNT = 0;
    932a:	2700      	movs	r7, #0
	FTM0_MOD = DEFAULT_FTM_MOD;
    932c:	f64b 76ff 	movw	r6, #49151	; 0xbfff
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9330:	2509      	movs	r5, #9
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    9332:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    9336:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
{
    933a:	b083      	sub	sp, #12
	FTM0_CNT = 0;
    933c:	6057      	str	r7, [r2, #4]
	FTM0_MOD = DEFAULT_FTM_MOD;
    933e:	6096      	str	r6, [r2, #8]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    9340:	60d3      	str	r3, [r2, #12]
	FTM0_C1SC = 0x28;
    9342:	6153      	str	r3, [r2, #20]
	FTM0_C2SC = 0x28;
    9344:	61d3      	str	r3, [r2, #28]
	FTM0_C3SC = 0x28;
    9346:	6253      	str	r3, [r2, #36]	; 0x24
	FTM0_C4SC = 0x28;
    9348:	62d3      	str	r3, [r2, #44]	; 0x2c
	FTM0_C5SC = 0x28;
    934a:	6353      	str	r3, [r2, #52]	; 0x34
	FTM0_C6SC = 0x28;
    934c:	63d3      	str	r3, [r2, #60]	; 0x3c
	FTM0_C7SC = 0x28;
    934e:	6453      	str	r3, [r2, #68]	; 0x44
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9350:	6015      	str	r5, [r2, #0]
	FTM1_CNT = 0;
    9352:	6047      	str	r7, [r0, #4]
	FTM1_MOD = DEFAULT_FTM_MOD;
    9354:	6086      	str	r6, [r0, #8]
	FTM1_C0SC = 0x28;
    9356:	60c3      	str	r3, [r0, #12]
	FTM1_C1SC = 0x28;
    9358:	6143      	str	r3, [r0, #20]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    935a:	6005      	str	r5, [r0, #0]
	FTM2_CNT = 0;
    935c:	604f      	str	r7, [r1, #4]
	FTM2_MOD = DEFAULT_FTM_MOD;
    935e:	608e      	str	r6, [r1, #8]
	FTM2_C0SC = 0x28;
    9360:	60cb      	str	r3, [r1, #12]
	FTM2_C1SC = 0x28;
    9362:	614b      	str	r3, [r1, #20]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9364:	600d      	str	r5, [r1, #0]
	analog_init();
    9366:	f7ff fcc3 	bl	8cf0 <analog_init>
	startup_middle_hook();
    936a:	f7ff ffc5 	bl	92f8 <startup_middle_hook>
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
    936e:	4c0b      	ldr	r4, [pc, #44]	; (939c <_init_Teensyduino_internal_+0xa0>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9370:	6823      	ldr	r3, [r4, #0]
    9372:	9300      	str	r3, [sp, #0]
	return ret;
    9374:	9b00      	ldr	r3, [sp, #0]
    9376:	2b13      	cmp	r3, #19
    9378:	d9fa      	bls.n	9370 <_init_Teensyduino_internal_+0x74>
	usb_init();
    937a:	f001 fef1 	bl	b160 <usb_init>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    937e:	6823      	ldr	r3, [r4, #0]
    9380:	9301      	str	r3, [sp, #4]
	return ret;
    9382:	9b01      	ldr	r3, [sp, #4]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
    9384:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    9388:	d3f9      	bcc.n	937e <_init_Teensyduino_internal_+0x82>
}
    938a:	b003      	add	sp, #12
    938c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    938e:	bf00      	nop
    9390:	40038000 	.word	0x40038000
    9394:	40039000 	.word	0x40039000
    9398:	400b8000 	.word	0x400b8000
    939c:	1fffb4e0 	.word	0x1fffb4e0

000093a0 <analogWrite>:
	if (pin == A14) {
    93a0:	2828      	cmp	r0, #40	; 0x28
		uint8_t res = analog_write_res;
    93a2:	4b7f      	ldr	r3, [pc, #508]	; (95a0 <analogWrite+0x200>)
	if (pin == A14) {
    93a4:	d036      	beq.n	9414 <analogWrite+0x74>
	if (val <= 0) {
    93a6:	2900      	cmp	r1, #0
	max = 1 << analog_write_res;
    93a8:	781b      	ldrb	r3, [r3, #0]
	if (val <= 0) {
    93aa:	dd3f      	ble.n	942c <analogWrite+0x8c>
	max = 1 << analog_write_res;
    93ac:	2201      	movs	r2, #1
    93ae:	fa02 fc03 	lsl.w	ip, r2, r3
	} else if (val >= max) {
    93b2:	4561      	cmp	r1, ip
{
    93b4:	b510      	push	{r4, lr}
	} else if (val >= max) {
    93b6:	d254      	bcs.n	9462 <analogWrite+0xc2>
	if (pin == FTM1_CH0_PIN || pin == FTM1_CH1_PIN) {
    93b8:	1ec2      	subs	r2, r0, #3
    93ba:	2a01      	cmp	r2, #1
    93bc:	d970      	bls.n	94a0 <analogWrite+0x100>
	} else if (pin == FTM2_CH0_PIN || pin == FTM2_CH1_PIN) {
    93be:	2820      	cmp	r0, #32
    93c0:	d067      	beq.n	9492 <analogWrite+0xf2>
    93c2:	2819      	cmp	r0, #25
    93c4:	d065      	beq.n	9492 <analogWrite+0xf2>
		cval = ((uint32_t)val * (uint32_t)(FTM0_MOD + 1)) >> analog_write_res;
    93c6:	4a77      	ldr	r2, [pc, #476]	; (95a4 <analogWrite+0x204>)
    93c8:	6892      	ldr	r2, [r2, #8]
    93ca:	fb02 1201 	mla	r2, r2, r1, r1
    93ce:	fa22 f303 	lsr.w	r3, r2, r3
	switch (pin) {
    93d2:	1f42      	subs	r2, r0, #5
    93d4:	2a1b      	cmp	r2, #27
    93d6:	d87d      	bhi.n	94d4 <analogWrite+0x134>
    93d8:	e8df f012 	tbh	[pc, r2, lsl #1]
    93dc:	00bf00c6 	.word	0x00bf00c6
    93e0:	007c007c 	.word	0x007c007c
    93e4:	00b100b8 	.word	0x00b100b8
    93e8:	007c007c 	.word	0x007c007c
    93ec:	007c007c 	.word	0x007c007c
    93f0:	007c007c 	.word	0x007c007c
    93f4:	007c007c 	.word	0x007c007c
    93f8:	00aa007c 	.word	0x00aa007c
    93fc:	009c00a3 	.word	0x009c00a3
    9400:	007c0095 	.word	0x007c0095
    9404:	007c00cd 	.word	0x007c00cd
    9408:	007c007c 	.word	0x007c007c
    940c:	007c007c 	.word	0x007c007c
    9410:	00d4007c 	.word	0x00d4007c
		uint8_t res = analog_write_res;
    9414:	7818      	ldrb	r0, [r3, #0]
		if (res < 12) {
    9416:	280b      	cmp	r0, #11
			val <<= 12 - res;
    9418:	bf95      	itete	ls
    941a:	f1c0 000c 	rsbls	r0, r0, #12
			val >>= res - 12;
    941e:	380c      	subhi	r0, #12
			val <<= 12 - res;
    9420:	fa01 f000 	lslls.w	r0, r1, r0
			val >>= res - 12;
    9424:	fa41 f000 	asrhi.w	r0, r1, r0
		analogWriteDAC0(val);
    9428:	f7ff bcc6 	b.w	8db8 <analogWriteDAC0>
	if (pin >= CORE_NUM_DIGITAL) return;
    942c:	2821      	cmp	r0, #33	; 0x21
    942e:	d817      	bhi.n	9460 <analogWrite+0xc0>
	if (*portModeRegister(pin)) {
    9430:	4b5d      	ldr	r3, [pc, #372]	; (95a8 <analogWrite+0x208>)
    9432:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    9436:	f892 1280 	ldrb.w	r1, [r2, #640]	; 0x280
		volatile uint32_t *config = portConfigRegister(pin);
    943a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	if (*portModeRegister(pin)) {
    943e:	2900      	cmp	r1, #0
    9440:	d03c      	beq.n	94bc <analogWrite+0x11c>
			*portClearRegister(pin) = 1;
    9442:	2101      	movs	r1, #1
		volatile uint32_t *config = portConfigRegister(pin);
    9444:	685b      	ldr	r3, [r3, #4]
			*portClearRegister(pin) = 1;
    9446:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    944a:	2001      	movs	r0, #1
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    944c:	f44f 71a2 	mov.w	r1, #324	; 0x144
		*portModeRegister(pin) = 1;
    9450:	f882 0280 	strb.w	r0, [r2, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9454:	6019      	str	r1, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    9456:	681a      	ldr	r2, [r3, #0]
    9458:	f022 0220 	bic.w	r2, r2, #32
    945c:	601a      	str	r2, [r3, #0]
    945e:	4770      	bx	lr
    9460:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
    9462:	2821      	cmp	r0, #33	; 0x21
    9464:	d814      	bhi.n	9490 <analogWrite+0xf0>
	if (*portModeRegister(pin)) {
    9466:	4b50      	ldr	r3, [pc, #320]	; (95a8 <analogWrite+0x208>)
    9468:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
    946c:	f891 4280 	ldrb.w	r4, [r1, #640]	; 0x280
		volatile uint32_t *config = portConfigRegister(pin);
    9470:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	if (*portModeRegister(pin)) {
    9474:	b344      	cbz	r4, 94c8 <analogWrite+0x128>
		volatile uint32_t *config = portConfigRegister(pin);
    9476:	685b      	ldr	r3, [r3, #4]
			*portSetRegister(pin) = 1;
    9478:	f881 2080 	strb.w	r2, [r1, #128]	; 0x80
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    947c:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    9480:	2001      	movs	r0, #1
    9482:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9486:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    9488:	681a      	ldr	r2, [r3, #0]
    948a:	f022 0220 	bic.w	r2, r2, #32
    948e:	601a      	str	r2, [r3, #0]
}
    9490:	bd10      	pop	{r4, pc}
		cval = ((uint32_t)val * (uint32_t)(FTM2_MOD + 1)) >> analog_write_res;
    9492:	4a46      	ldr	r2, [pc, #280]	; (95ac <analogWrite+0x20c>)
    9494:	6892      	ldr	r2, [r2, #8]
    9496:	fb02 1201 	mla	r2, r2, r1, r1
    949a:	fa22 f303 	lsr.w	r3, r2, r3
    949e:	e798      	b.n	93d2 <analogWrite+0x32>
		cval = ((uint32_t)val * (uint32_t)(FTM1_MOD + 1)) >> analog_write_res;
    94a0:	4c43      	ldr	r4, [pc, #268]	; (95b0 <analogWrite+0x210>)
    94a2:	68a2      	ldr	r2, [r4, #8]
	switch (pin) {
    94a4:	2804      	cmp	r0, #4
		cval = ((uint32_t)val * (uint32_t)(FTM1_MOD + 1)) >> analog_write_res;
    94a6:	fb02 1201 	mla	r2, r2, r1, r1
    94aa:	fa22 f203 	lsr.w	r2, r2, r3
	switch (pin) {
    94ae:	d170      	bne.n	9592 <analogWrite+0x1f2>
		FTM_PINCFG(FTM1_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    94b0:	4b40      	ldr	r3, [pc, #256]	; (95b4 <analogWrite+0x214>)
		FTM1_C1V = cval;
    94b2:	61a2      	str	r2, [r4, #24]
		FTM_PINCFG(FTM1_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    94b4:	f44f 7151 	mov.w	r1, #836	; 0x344
    94b8:	6359      	str	r1, [r3, #52]	; 0x34
}
    94ba:	bd10      	pop	{r4, pc}
		volatile uint32_t *config = portConfigRegister(pin);
    94bc:	685b      	ldr	r3, [r3, #4]
			*config &= ~(PORT_PCR_PE);
    94be:	6819      	ldr	r1, [r3, #0]
    94c0:	f021 0102 	bic.w	r1, r1, #2
    94c4:	6019      	str	r1, [r3, #0]
    94c6:	e7c0      	b.n	944a <analogWrite+0xaa>
		volatile uint32_t *config = portConfigRegister(pin);
    94c8:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    94ca:	681a      	ldr	r2, [r3, #0]
    94cc:	f042 0203 	orr.w	r2, r2, #3
    94d0:	601a      	str	r2, [r3, #0]
    94d2:	e7d3      	b.n	947c <analogWrite+0xdc>
	if (pin >= CORE_NUM_DIGITAL) return;
    94d4:	2821      	cmp	r0, #33	; 0x21
    94d6:	d8db      	bhi.n	9490 <analogWrite+0xf0>
    94d8:	297f      	cmp	r1, #127	; 0x7f
    94da:	bfd4      	ite	le
    94dc:	2100      	movle	r1, #0
    94de:	2101      	movgt	r1, #1
    94e0:	f7ff fede 	bl	92a0 <digitalWrite.part.0>
	config = portConfigRegister(pin);
    94e4:	4b30      	ldr	r3, [pc, #192]	; (95a8 <analogWrite+0x208>)
    94e6:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
		*portModeRegister(pin) = 1;
    94ea:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
	config = portConfigRegister(pin);
    94ee:	6853      	ldr	r3, [r2, #4]
		*portModeRegister(pin) = 1;
    94f0:	2401      	movs	r4, #1
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    94f2:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    94f6:	f881 4280 	strb.w	r4, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    94fa:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    94fc:	681a      	ldr	r2, [r3, #0]
    94fe:	f022 0220 	bic.w	r2, r2, #32
    9502:	601a      	str	r2, [r3, #0]
}
    9504:	bd10      	pop	{r4, pc}
		FTM0_C1V = cval;
    9506:	4827      	ldr	r0, [pc, #156]	; (95a4 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    9508:	4a2b      	ldr	r2, [pc, #172]	; (95b8 <analogWrite+0x218>)
		FTM0_C1V = cval;
    950a:	6183      	str	r3, [r0, #24]
		FTM_PINCFG(FTM0_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    950c:	f240 4144 	movw	r1, #1092	; 0x444
    9510:	6091      	str	r1, [r2, #8]
}
    9512:	bd10      	pop	{r4, pc}
		FTM0_C0V = cval;
    9514:	4823      	ldr	r0, [pc, #140]	; (95a4 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    9516:	4a28      	ldr	r2, [pc, #160]	; (95b8 <analogWrite+0x218>)
		FTM0_C0V = cval;
    9518:	6103      	str	r3, [r0, #16]
		FTM_PINCFG(FTM0_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    951a:	f240 4144 	movw	r1, #1092	; 0x444
    951e:	6051      	str	r1, [r2, #4]
}
    9520:	bd10      	pop	{r4, pc}
		FTM0_C6V = cval;
    9522:	4820      	ldr	r0, [pc, #128]	; (95a4 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH6_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    9524:	4a25      	ldr	r2, [pc, #148]	; (95bc <analogWrite+0x21c>)
		FTM0_C6V = cval;
    9526:	6403      	str	r3, [r0, #64]	; 0x40
		FTM_PINCFG(FTM0_CH6_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    9528:	f240 4144 	movw	r1, #1092	; 0x444
    952c:	6191      	str	r1, [r2, #24]
}
    952e:	bd10      	pop	{r4, pc}
		FTM0_C5V = cval;
    9530:	481c      	ldr	r0, [pc, #112]	; (95a4 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH5_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    9532:	4a22      	ldr	r2, [pc, #136]	; (95bc <analogWrite+0x21c>)
		FTM0_C5V = cval;
    9534:	6383      	str	r3, [r0, #56]	; 0x38
		FTM_PINCFG(FTM0_CH5_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    9536:	f240 4144 	movw	r1, #1092	; 0x444
    953a:	6151      	str	r1, [r2, #20]
}
    953c:	bd10      	pop	{r4, pc}
		FTM0_C3V = cval;
    953e:	4819      	ldr	r0, [pc, #100]	; (95a4 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    9540:	4a1d      	ldr	r2, [pc, #116]	; (95b8 <analogWrite+0x218>)
		FTM0_C3V = cval;
    9542:	6283      	str	r3, [r0, #40]	; 0x28
		FTM_PINCFG(FTM0_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    9544:	f240 4144 	movw	r1, #1092	; 0x444
    9548:	6111      	str	r1, [r2, #16]
}
    954a:	bd10      	pop	{r4, pc}
		FTM0_C2V = cval;
    954c:	4815      	ldr	r0, [pc, #84]	; (95a4 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    954e:	4a1a      	ldr	r2, [pc, #104]	; (95b8 <analogWrite+0x218>)
		FTM0_C2V = cval;
    9550:	6203      	str	r3, [r0, #32]
		FTM_PINCFG(FTM0_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    9552:	f240 4144 	movw	r1, #1092	; 0x444
    9556:	60d1      	str	r1, [r2, #12]
}
    9558:	bd10      	pop	{r4, pc}
		FTM0_C4V = cval;
    955a:	4812      	ldr	r0, [pc, #72]	; (95a4 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH4_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    955c:	4a17      	ldr	r2, [pc, #92]	; (95bc <analogWrite+0x21c>)
		FTM0_C4V = cval;
    955e:	6303      	str	r3, [r0, #48]	; 0x30
		FTM_PINCFG(FTM0_CH4_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    9560:	f240 4144 	movw	r1, #1092	; 0x444
    9564:	6111      	str	r1, [r2, #16]
}
    9566:	bd10      	pop	{r4, pc}
		FTM0_C7V = cval;
    9568:	480e      	ldr	r0, [pc, #56]	; (95a4 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH7_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    956a:	4a14      	ldr	r2, [pc, #80]	; (95bc <analogWrite+0x21c>)
		FTM0_C7V = cval;
    956c:	6483      	str	r3, [r0, #72]	; 0x48
		FTM_PINCFG(FTM0_CH7_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    956e:	f240 4144 	movw	r1, #1092	; 0x444
    9572:	61d1      	str	r1, [r2, #28]
}
    9574:	bd10      	pop	{r4, pc}
		FTM2_C1V = cval;
    9576:	480d      	ldr	r0, [pc, #52]	; (95ac <analogWrite+0x20c>)
		FTM_PINCFG(FTM2_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    9578:	4a11      	ldr	r2, [pc, #68]	; (95c0 <analogWrite+0x220>)
		FTM2_C1V = cval;
    957a:	6183      	str	r3, [r0, #24]
		FTM_PINCFG(FTM2_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    957c:	f44f 7151 	mov.w	r1, #836	; 0x344
    9580:	64d1      	str	r1, [r2, #76]	; 0x4c
}
    9582:	bd10      	pop	{r4, pc}
		FTM2_C0V = cval;
    9584:	4809      	ldr	r0, [pc, #36]	; (95ac <analogWrite+0x20c>)
		FTM_PINCFG(FTM2_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    9586:	4a0e      	ldr	r2, [pc, #56]	; (95c0 <analogWrite+0x220>)
		FTM2_C0V = cval;
    9588:	6103      	str	r3, [r0, #16]
		FTM_PINCFG(FTM2_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    958a:	f44f 7151 	mov.w	r1, #836	; 0x344
    958e:	6491      	str	r1, [r2, #72]	; 0x48
}
    9590:	bd10      	pop	{r4, pc}
		FTM_PINCFG(FTM1_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    9592:	4b08      	ldr	r3, [pc, #32]	; (95b4 <analogWrite+0x214>)
		FTM1_C0V = cval;
    9594:	6122      	str	r2, [r4, #16]
		FTM_PINCFG(FTM1_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    9596:	f44f 7151 	mov.w	r1, #836	; 0x344
    959a:	6319      	str	r1, [r3, #48]	; 0x30
}
    959c:	bd10      	pop	{r4, pc}
    959e:	bf00      	nop
    95a0:	1fff87dc 	.word	0x1fff87dc
    95a4:	40038000 	.word	0x40038000
    95a8:	000144f0 	.word	0x000144f0
    95ac:	400b8000 	.word	0x400b8000
    95b0:	40039000 	.word	0x40039000
    95b4:	40049000 	.word	0x40049000
    95b8:	4004b000 	.word	0x4004b000
    95bc:	4004c000 	.word	0x4004c000
    95c0:	4004a000 	.word	0x4004a000

000095c4 <analogWriteFrequency>:
{
    95c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    95c8:	460e      	mov	r6, r1
    95ca:	4680      	mov	r8, r0
	if (frequency < (float)(F_TIMER >> 7) / 65536.0f) {
    95cc:	492c      	ldr	r1, [pc, #176]	; (9680 <analogWriteFrequency+0xbc>)
    95ce:	4630      	mov	r0, r6
    95d0:	f002 ff52 	bl	c478 <__aeabi_fcmplt>
		ftmClockSource = 1; 	// Use default F_TIMER clock source
    95d4:	4b2b      	ldr	r3, [pc, #172]	; (9684 <analogWriteFrequency+0xc0>)
    95d6:	2800      	cmp	r0, #0
    95d8:	f647 2712 	movw	r7, #31250	; 0x7a12
    95dc:	bf12      	itee	ne
    95de:	f04f 0a02 	movne.w	sl, #2
    95e2:	f04f 0a01 	moveq.w	sl, #1
    95e6:	461f      	moveq	r7, r3
	for (prescale = 0; prescale < 7; prescale++) {
    95e8:	2400      	movs	r4, #0
		minfreq = (float)(ftmClock >> prescale) / 65536.0f;	//Use ftmClock instead of F_TIMER
    95ea:	f04f 595e 	mov.w	r9, #931135488	; 0x37800000
    95ee:	fa27 f004 	lsr.w	r0, r7, r4
    95f2:	f002 fd4b 	bl	c08c <__aeabi_ui2f>
    95f6:	4649      	mov	r1, r9
    95f8:	4605      	mov	r5, r0
    95fa:	f002 fd9f 	bl	c13c <__aeabi_fmul>
    95fe:	4601      	mov	r1, r0
		if (frequency >= minfreq) break;
    9600:	4630      	mov	r0, r6
    9602:	f002 ff4d 	bl	c4a0 <__aeabi_fcmpge>
    9606:	b930      	cbnz	r0, 9616 <analogWriteFrequency+0x52>
	for (prescale = 0; prescale < 7; prescale++) {
    9608:	3401      	adds	r4, #1
    960a:	2c07      	cmp	r4, #7
    960c:	d1ef      	bne.n	95ee <analogWriteFrequency+0x2a>
	mod = (float)(ftmClock >> prescale) / frequency - 0.5f;	//Use ftmClock instead of F_TIMER
    960e:	09f8      	lsrs	r0, r7, #7
    9610:	f002 fd3c 	bl	c08c <__aeabi_ui2f>
    9614:	4605      	mov	r5, r0
    9616:	4631      	mov	r1, r6
    9618:	4628      	mov	r0, r5
    961a:	f002 fe43 	bl	c2a4 <__aeabi_fdiv>
    961e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    9622:	f002 fc81 	bl	bf28 <__aeabi_fsub>
    9626:	f002 ff75 	bl	c514 <__aeabi_f2uiz>
    962a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    962e:	4298      	cmp	r0, r3
    9630:	bf28      	it	cs
    9632:	4618      	movcs	r0, r3
	if (pin == FTM1_CH0_PIN || pin == FTM1_CH1_PIN) {
    9634:	f1a8 0303 	sub.w	r3, r8, #3
    9638:	2b01      	cmp	r3, #1
    963a:	d911      	bls.n	9660 <analogWriteFrequency+0x9c>
	} else if (pin == FTM0_CH0_PIN || pin == FTM0_CH1_PIN
    963c:	f1a8 0805 	sub.w	r8, r8, #5
    9640:	fa5f f888 	uxtb.w	r8, r8
    9644:	f1b8 0f1b 	cmp.w	r8, #27
    9648:	d808      	bhi.n	965c <analogWriteFrequency+0x98>
    964a:	4a0f      	ldr	r2, [pc, #60]	; (9688 <analogWriteFrequency+0xc4>)
    964c:	2301      	movs	r3, #1
    964e:	fa03 f308 	lsl.w	r3, r3, r8
    9652:	401a      	ands	r2, r3
    9654:	d110      	bne.n	9678 <analogWriteFrequency+0xb4>
    9656:	f013 6f01 	tst.w	r3, #135266304	; 0x8100000
    965a:	d10b      	bne.n	9674 <analogWriteFrequency+0xb0>
}
    965c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		FTM1_SC = 0;
    9660:	4b0a      	ldr	r3, [pc, #40]	; (968c <analogWriteFrequency+0xc8>)
    9662:	2200      	movs	r2, #0
		FTM2_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
    9664:	ea44 04ca 	orr.w	r4, r4, sl, lsl #3
		FTM2_SC = 0;
    9668:	601a      	str	r2, [r3, #0]
		FTM2_CNT = 0;
    966a:	605a      	str	r2, [r3, #4]
		FTM2_MOD = mod;
    966c:	6098      	str	r0, [r3, #8]
		FTM2_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
    966e:	601c      	str	r4, [r3, #0]
}
    9670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		FTM2_SC = 0;
    9674:	4b06      	ldr	r3, [pc, #24]	; (9690 <analogWriteFrequency+0xcc>)
    9676:	e7f5      	b.n	9664 <analogWriteFrequency+0xa0>
		FTM0_SC = 0;
    9678:	4b06      	ldr	r3, [pc, #24]	; (9694 <analogWriteFrequency+0xd0>)
    967a:	2200      	movs	r2, #0
    967c:	e7f2      	b.n	9664 <analogWriteFrequency+0xa0>
    967e:	bf00      	nop
    9680:	40b71b00 	.word	0x40b71b00
    9684:	02dc6c00 	.word	0x02dc6c00
    9688:	00078033 	.word	0x00078033
    968c:	40039000 	.word	0x40039000
    9690:	400b8000 	.word	0x400b8000
    9694:	40038000 	.word	0x40038000

00009698 <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    9698:	2821      	cmp	r0, #33	; 0x21
    969a:	d816      	bhi.n	96ca <digitalWrite+0x32>
{
    969c:	b410      	push	{r4}
	if (*portModeRegister(pin)) {
    969e:	4b10      	ldr	r3, [pc, #64]	; (96e0 <digitalWrite+0x48>)
    96a0:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    96a4:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    96a8:	b12c      	cbz	r4, 96b6 <digitalWrite+0x1e>
			*portSetRegister(pin) = 1;
    96aa:	2301      	movs	r3, #1
		if (val) {
    96ac:	b971      	cbnz	r1, 96cc <digitalWrite+0x34>
			*portClearRegister(pin) = 1;
    96ae:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
}
    96b2:	bc10      	pop	{r4}
    96b4:	4770      	bx	lr
		volatile uint32_t *config = portConfigRegister(pin);
    96b6:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    96ba:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    96bc:	681a      	ldr	r2, [r3, #0]
		if (val) {
    96be:	b149      	cbz	r1, 96d4 <digitalWrite+0x3c>
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    96c0:	f042 0203 	orr.w	r2, r2, #3
}
    96c4:	bc10      	pop	{r4}
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    96c6:	601a      	str	r2, [r3, #0]
}
    96c8:	4770      	bx	lr
    96ca:	4770      	bx	lr
			*portSetRegister(pin) = 1;
    96cc:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
}
    96d0:	bc10      	pop	{r4}
    96d2:	4770      	bx	lr
			*config &= ~(PORT_PCR_PE);
    96d4:	f022 0202 	bic.w	r2, r2, #2
}
    96d8:	bc10      	pop	{r4}
			*config &= ~(PORT_PCR_PE);
    96da:	601a      	str	r2, [r3, #0]
}
    96dc:	4770      	bx	lr
    96de:	bf00      	nop
    96e0:	000144f0 	.word	0x000144f0

000096e4 <digitalRead>:
	if (pin >= CORE_NUM_DIGITAL) return 0;
    96e4:	2821      	cmp	r0, #33	; 0x21
    96e6:	d806      	bhi.n	96f6 <digitalRead+0x12>
	return *portInputRegister(pin);
    96e8:	4b04      	ldr	r3, [pc, #16]	; (96fc <digitalRead+0x18>)
    96ea:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    96ee:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
    96f2:	b2c0      	uxtb	r0, r0
    96f4:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    96f6:	2000      	movs	r0, #0
}
    96f8:	4770      	bx	lr
    96fa:	bf00      	nop
    96fc:	000144f0 	.word	0x000144f0

00009700 <pinMode>:
	if (pin >= CORE_NUM_DIGITAL) return;
    9700:	2821      	cmp	r0, #33	; 0x21
    9702:	d820      	bhi.n	9746 <pinMode+0x46>
	config = portConfigRegister(pin);
    9704:	4a1b      	ldr	r2, [pc, #108]	; (9774 <pinMode+0x74>)
    9706:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    970a:	2901      	cmp	r1, #1
	config = portConfigRegister(pin);
    970c:	685b      	ldr	r3, [r3, #4]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    970e:	d00f      	beq.n	9730 <pinMode+0x30>
    9710:	2904      	cmp	r1, #4
    9712:	d01d      	beq.n	9750 <pinMode+0x50>
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    9714:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    9718:	2200      	movs	r2, #0
    971a:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    971e:	b199      	cbz	r1, 9748 <pinMode+0x48>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    9720:	2902      	cmp	r1, #2
    9722:	d022      	beq.n	976a <pinMode+0x6a>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    9724:	2903      	cmp	r1, #3
    9726:	d10d      	bne.n	9744 <pinMode+0x44>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    9728:	f44f 7281 	mov.w	r2, #258	; 0x102
    972c:	601a      	str	r2, [r3, #0]
    972e:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    9730:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9734:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    9738:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    973c:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    973e:	681a      	ldr	r2, [r3, #0]
    9740:	f022 0220 	bic.w	r2, r2, #32
    9744:	601a      	str	r2, [r3, #0]
		} else { // INPUT_DISABLE
			*config = 0;
		}
	}
}
    9746:	4770      	bx	lr
			*config = PORT_PCR_MUX(1);
    9748:	f44f 7280 	mov.w	r2, #256	; 0x100
    974c:	601a      	str	r2, [r3, #0]
    974e:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    9750:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9754:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    9758:	2001      	movs	r0, #1
    975a:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    975e:	601a      	str	r2, [r3, #0]
		    *config |= PORT_PCR_ODE;
    9760:	681a      	ldr	r2, [r3, #0]
    9762:	f042 0220 	orr.w	r2, r2, #32
    9766:	601a      	str	r2, [r3, #0]
    9768:	4770      	bx	lr
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    976a:	f240 1203 	movw	r2, #259	; 0x103
    976e:	601a      	str	r2, [r3, #0]
    9770:	4770      	bx	lr
    9772:	bf00      	nop
    9774:	000144f0 	.word	0x000144f0

00009778 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9778:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    977a:	490d      	ldr	r1, [pc, #52]	; (97b0 <micros+0x38>)
	current = SYST_CVR;
    977c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    9780:	6993      	ldr	r3, [r2, #24]
	count = systick_millis_count;
    9782:	6808      	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9784:	f8d2 2d04 	ldr.w	r2, [r2, #3332]	; 0xd04
	__enable_irq();
    9788:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    978a:	0152      	lsls	r2, r2, #5
    978c:	d502      	bpl.n	9794 <micros+0x1c>
    978e:	2b32      	cmp	r3, #50	; 0x32
    9790:	bf88      	it	hi
    9792:	3001      	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9794:	4a07      	ldr	r2, [pc, #28]	; (97b4 <micros+0x3c>)
	current = ((F_CPU / 1000) - 1) - current;
    9796:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
	return count * 1000 + current / (F_CPU / 1000000);
    979a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	current = ((F_CPU / 1000) - 1) - current;
    979e:	33ff      	adds	r3, #255	; 0xff
	return count * 1000 + current / (F_CPU / 1000000);
    97a0:	fba2 2303 	umull	r2, r3, r2, r3
    97a4:	fb01 f000 	mul.w	r0, r1, r0
}
    97a8:	eb00 1093 	add.w	r0, r0, r3, lsr #6
    97ac:	4770      	bx	lr
    97ae:	bf00      	nop
    97b0:	1fffb4e0 	.word	0x1fffb4e0
    97b4:	aaaaaaab 	.word	0xaaaaaaab

000097b8 <delay>:

void delay(uint32_t ms)
{
    97b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    97bc:	4604      	mov	r4, r0
	__disable_irq();
    97be:	b672      	cpsid	i
	count = systick_millis_count;
    97c0:	4f20      	ldr	r7, [pc, #128]	; (9844 <delay+0x8c>)
	current = SYST_CVR;
    97c2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    97c6:	6993      	ldr	r3, [r2, #24]
	count = systick_millis_count;
    97c8:	683d      	ldr	r5, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    97ca:	f8d2 2d04 	ldr.w	r2, [r2, #3332]	; 0xd04
	__enable_irq();
    97ce:	b662      	cpsie	i
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    97d0:	0152      	lsls	r2, r2, #5
    97d2:	d502      	bpl.n	97da <delay+0x22>
    97d4:	2b32      	cmp	r3, #50	; 0x32
    97d6:	bf88      	it	hi
    97d8:	3501      	addhi	r5, #1
	uint32_t start = micros();

	if (ms > 0) {
    97da:	b90c      	cbnz	r4, 97e0 <delay+0x28>
				start += 1000;
			}
			yield();
		}
	}
}
    97dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	current = ((F_CPU / 1000) - 1) - current;
    97e0:	f8df 9064 	ldr.w	r9, [pc, #100]	; 9848 <delay+0x90>
	return count * 1000 + current / (F_CPU / 1000000);
    97e4:	f8df 8064 	ldr.w	r8, [pc, #100]	; 984c <delay+0x94>
	current = ((F_CPU / 1000) - 1) - current;
    97e8:	eba9 0303 	sub.w	r3, r9, r3
	return count * 1000 + current / (F_CPU / 1000000);
    97ec:	fba8 2303 	umull	r2, r3, r8, r3
    97f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    97f4:	fb02 f505 	mul.w	r5, r2, r5
    97f8:	eb05 1593 	add.w	r5, r5, r3, lsr #6
	current = SYST_CVR;
    97fc:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
	__disable_irq();
    9800:	b672      	cpsid	i
	current = SYST_CVR;
    9802:	69b1      	ldr	r1, [r6, #24]
	count = systick_millis_count;
    9804:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9806:	f8d6 cd04 	ldr.w	ip, [r6, #3332]	; 0xd04
	__enable_irq();
    980a:	b662      	cpsie	i
	current = ((F_CPU / 1000) - 1) - current;
    980c:	eba9 0301 	sub.w	r3, r9, r1
	return count * 1000 + current / (F_CPU / 1000000);
    9810:	fba8 0303 	umull	r0, r3, r8, r3
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9814:	f01c 6f80 	tst.w	ip, #67108864	; 0x4000000
			while ((micros() - start) >= 1000) {
    9818:	ebc5 1393 	rsb	r3, r5, r3, lsr #6
	return count * 1000 + current / (F_CPU / 1000000);
    981c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9820:	d002      	beq.n	9828 <delay+0x70>
    9822:	2932      	cmp	r1, #50	; 0x32
    9824:	bf88      	it	hi
    9826:	3201      	addhi	r2, #1
			while ((micros() - start) >= 1000) {
    9828:	fb00 3302 	mla	r3, r0, r2, r3
    982c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    9830:	d304      	bcc.n	983c <delay+0x84>
				if (ms == 0) return;
    9832:	3c01      	subs	r4, #1
    9834:	d0d2      	beq.n	97dc <delay+0x24>
				start += 1000;
    9836:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
    983a:	e7e1      	b.n	9800 <delay+0x48>
			yield();
    983c:	f001 fea4 	bl	b588 <yield>
			while ((micros() - start) >= 1000) {
    9840:	e7de      	b.n	9800 <delay+0x48>
    9842:	bf00      	nop
    9844:	1fffb4e0 	.word	0x1fffb4e0
    9848:	000176ff 	.word	0x000176ff
    984c:	aaaaaaab 	.word	0xaaaaaaab

00009850 <serial2_begin>:
#define GPIO_BITBAND_PTR(reg, bit) ((uint32_t *)GPIO_BITBAND_ADDR((reg), (bit)))
#define C3_TXDIR_BIT 5

void serial2_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    9850:	4a2a      	ldr	r2, [pc, #168]	; (98fc <serial2_begin+0xac>)
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
    9852:	492b      	ldr	r1, [pc, #172]	; (9900 <serial2_begin+0xb0>)
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    9854:	6b53      	ldr	r3, [r2, #52]	; 0x34
{
    9856:	b470      	push	{r4, r5, r6}
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    9858:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
	rx_buffer_head = 0;
    985c:	4d29      	ldr	r5, [pc, #164]	; (9904 <serial2_begin+0xb4>)
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    985e:	6353      	str	r3, [r2, #52]	; 0x34
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
#if defined(KINETISK)
	switch (rx_pin_num) {
    9860:	4e29      	ldr	r6, [pc, #164]	; (9908 <serial2_begin+0xb8>)
	tx_buffer_head = 0;
    9862:	4c2a      	ldr	r4, [pc, #168]	; (990c <serial2_begin+0xbc>)
	switch (rx_pin_num) {
    9864:	7832      	ldrb	r2, [r6, #0]
	rx_buffer_head = 0;
    9866:	2300      	movs	r3, #0
    9868:	702b      	strb	r3, [r5, #0]
	rx_buffer_tail = 0;
    986a:	700b      	strb	r3, [r1, #0]
	tx_buffer_tail = 0;
    986c:	4928      	ldr	r1, [pc, #160]	; (9910 <serial2_begin+0xc0>)
	tx_buffer_head = 0;
    986e:	7023      	strb	r3, [r4, #0]
	tx_buffer_tail = 0;
    9870:	700b      	strb	r3, [r1, #0]
	transmitting = 0;
    9872:	4928      	ldr	r1, [pc, #160]	; (9914 <serial2_begin+0xc4>)
	switch (rx_pin_num) {
    9874:	2a09      	cmp	r2, #9
	transmitting = 0;
    9876:	700b      	strb	r3, [r1, #0]
	switch (rx_pin_num) {
    9878:	d033      	beq.n	98e2 <serial2_begin+0x92>
    987a:	2a1a      	cmp	r2, #26
    987c:	d103      	bne.n	9886 <serial2_begin+0x36>
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#if defined(__MK20DX128__) || defined(__MK20DX256__)    // T3.0, T3.1, T3.2
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    987e:	4b26      	ldr	r3, [pc, #152]	; (9918 <serial2_begin+0xc8>)
    9880:	f240 3213 	movw	r2, #787	; 0x313
    9884:	605a      	str	r2, [r3, #4]
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)  // T3.5 or T3.6
		case 59: CORE_PIN59_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
    9886:	4b25      	ldr	r3, [pc, #148]	; (991c <serial2_begin+0xcc>)
    9888:	781b      	ldrb	r3, [r3, #0]
    988a:	2b0a      	cmp	r3, #10
    988c:	d031      	beq.n	98f2 <serial2_begin+0xa2>
    988e:	2b1f      	cmp	r3, #31
    9890:	d103      	bne.n	989a <serial2_begin+0x4a>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#if defined(__MK20DX128__) || defined(__MK20DX256__)    // T3.0, T3.1, T3.2
		case 31: CORE_PIN31_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    9892:	4b21      	ldr	r3, [pc, #132]	; (9918 <serial2_begin+0xc8>)
    9894:	f44f 7251 	mov.w	r2, #836	; 0x344
    9898:	601a      	str	r2, [r3, #0]
#elif defined(KINETISL)
	CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
#endif
#if defined(HAS_KINETISK_UART1)
	if (divisor < 32) divisor = 32;
    989a:	2820      	cmp	r0, #32
	UART1_BDH = (divisor >> 13) & 0x1F;
    989c:	4b20      	ldr	r3, [pc, #128]	; (9920 <serial2_begin+0xd0>)
	UART1_BDH = (divisor >> 8) & 0x1F;
	UART1_BDL = divisor & 0xFF;
	UART1_C1 = 0;
#endif
	UART1_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    989e:	4c21      	ldr	r4, [pc, #132]	; (9924 <serial2_begin+0xd4>)
    98a0:	bf38      	it	cc
    98a2:	2020      	movcc	r0, #32
	UART1_BDH = (divisor >> 13) & 0x1F;
    98a4:	f3c0 3c44 	ubfx	ip, r0, #13, #5
    98a8:	f883 c000 	strb.w	ip, [r3]
	UART1_BDL = (divisor >> 5) & 0xFF;
    98ac:	f3c0 1c47 	ubfx	ip, r0, #5, #8
	UART1_C4 = divisor & 0x1F;
    98b0:	f000 001f 	and.w	r0, r0, #31
	UART1_BDL = (divisor >> 5) & 0xFF;
    98b4:	f883 c001 	strb.w	ip, [r3, #1]
	UART1_C1 = UART_C1_ILT;
    98b8:	2204      	movs	r2, #4
	UART1_C4 = divisor & 0x1F;
    98ba:	7298      	strb	r0, [r3, #10]
	UART1_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    98bc:	2002      	movs	r0, #2
	UART1_C1 = UART_C1_ILT;
    98be:	709a      	strb	r2, [r3, #2]
	UART1_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    98c0:	74d8      	strb	r0, [r3, #19]
	UART1_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    98c2:	2088      	movs	r0, #136	; 0x88
	UART1_RWFIFO = 4; // rx watermark, causes S1_RDRF to set
    98c4:	755a      	strb	r2, [r3, #21]
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    98c6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	UART1_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    98ca:	7418      	strb	r0, [r3, #16]
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    98cc:	2240      	movs	r2, #64	; 0x40
	UART1_C2 = C2_TX_INACTIVE;
    98ce:	203c      	movs	r0, #60	; 0x3c
    98d0:	70d8      	strb	r0, [r3, #3]
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    98d2:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    98d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
}
    98da:	bc70      	pop	{r4, r5, r6}
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    98dc:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
}
    98e0:	4770      	bx	lr
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    98e2:	4b11      	ldr	r3, [pc, #68]	; (9928 <serial2_begin+0xd8>)
    98e4:	f240 3213 	movw	r2, #787	; 0x313
    98e8:	60da      	str	r2, [r3, #12]
	switch (tx_pin_num) {
    98ea:	4b0c      	ldr	r3, [pc, #48]	; (991c <serial2_begin+0xcc>)
    98ec:	781b      	ldrb	r3, [r3, #0]
    98ee:	2b0a      	cmp	r3, #10
    98f0:	d1cd      	bne.n	988e <serial2_begin+0x3e>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    98f2:	4b0d      	ldr	r3, [pc, #52]	; (9928 <serial2_begin+0xd8>)
    98f4:	f44f 7251 	mov.w	r2, #836	; 0x344
    98f8:	611a      	str	r2, [r3, #16]
    98fa:	e7ce      	b.n	989a <serial2_begin+0x4a>
    98fc:	40048000 	.word	0x40048000
    9900:	1fffb530 	.word	0x1fffb530
    9904:	1fffb528 	.word	0x1fffb528
    9908:	1fff87ec 	.word	0x1fff87ec
    990c:	1fffb564 	.word	0x1fffb564
    9910:	1fffb56c 	.word	0x1fffb56c
    9914:	1fffb538 	.word	0x1fffb538
    9918:	4004d000 	.word	0x4004d000
    991c:	1fff87f4 	.word	0x1fff87f4
    9920:	4006b000 	.word	0x4006b000
    9924:	e000e400 	.word	0xe000e400
    9928:	4004b000 	.word	0x4004b000

0000992c <serial2_format>:

void serial2_format(uint32_t format)
{
	uint8_t c;

	c = UART1_C1;
    992c:	4b21      	ldr	r3, [pc, #132]	; (99b4 <serial2_format+0x88>)
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART1_C1 = c;
    992e:	4921      	ldr	r1, [pc, #132]	; (99b4 <serial2_format+0x88>)
	c = UART1_C1;
    9930:	789b      	ldrb	r3, [r3, #2]
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    9932:	f000 0203 	and.w	r2, r0, #3
    9936:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    993a:	4313      	orrs	r3, r2
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    993c:	0742      	lsls	r2, r0, #29
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    993e:	f000 020f 	and.w	r2, r0, #15
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    9942:	bf48      	it	mi
    9944:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    9948:	2a04      	cmp	r2, #4
	UART1_C1 = c;
    994a:	708b      	strb	r3, [r1, #2]
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    994c:	d103      	bne.n	9956 <serial2_format+0x2a>
    994e:	798b      	ldrb	r3, [r1, #6]
    9950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9954:	718b      	strb	r3, [r1, #6]
	c = UART1_S2 & ~0x10;
    9956:	4b17      	ldr	r3, [pc, #92]	; (99b4 <serial2_format+0x88>)
	if (format & 0x10) c |= 0x10;		// rx invert
	UART1_S2 = c;
    9958:	4a16      	ldr	r2, [pc, #88]	; (99b4 <serial2_format+0x88>)
	c = UART1_S2 & ~0x10;
    995a:	795b      	ldrb	r3, [r3, #5]
	if (format & 0x10) c |= 0x10;		// rx invert
    995c:	06c1      	lsls	r1, r0, #27
	c = UART1_S2 & ~0x10;
    995e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	if (format & 0x10) c |= 0x10;		// rx invert
    9962:	bf48      	it	mi
    9964:	f043 0310 	orrmi.w	r3, r3, #16
	UART1_S2 = c;
    9968:	7153      	strb	r3, [r2, #5]
	c = UART1_C3 & ~0x10;
    996a:	7993      	ldrb	r3, [r2, #6]
	if (format & 0x20) c |= 0x10;		// tx invert
    996c:	0682      	lsls	r2, r0, #26
	c = UART1_C3 & ~0x10;
    996e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	UART1_C3 = c;
    9972:	4a10      	ldr	r2, [pc, #64]	; (99b4 <serial2_format+0x88>)
	if (format & 0x20) c |= 0x10;		// tx invert
    9974:	bf48      	it	mi
    9976:	f043 0310 	orrmi.w	r3, r3, #16
		UART1_BDH |= UART_BDH_SBNS;		// Turn on 2 stop bits - was turned off by set baud
		UART1_BDL = bdl;		// Says BDH not acted on until BDL is written
	}
#endif
	// process request for half duplex.
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    997a:	f410 7000 	ands.w	r0, r0, #512	; 0x200
	UART1_C3 = c;
    997e:	7193      	strb	r3, [r2, #6]
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    9980:	d010      	beq.n	99a4 <serial2_format+0x78>
		c = UART1_C1;
    9982:	7893      	ldrb	r3, [r2, #2]
		#if defined(KINETISL)
		//CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		CORE_PIN10_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
		half_duplex_mode = 1;
		#else
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    9984:	490c      	ldr	r1, [pc, #48]	; (99b8 <serial2_format+0x8c>)
		c |= UART_C1_LOOPS | UART_C1_RSRC;
    9986:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		UART1_C1 = c;
    998a:	7093      	strb	r3, [r2, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    998c:	7809      	ldrb	r1, [r1, #0]
    998e:	4b0b      	ldr	r3, [pc, #44]	; (99bc <serial2_format+0x90>)
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT);
    9990:	4a0b      	ldr	r2, [pc, #44]	; (99c0 <serial2_format+0x94>)
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    9992:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    9996:	f240 3047 	movw	r0, #839	; 0x347
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    999a:	685b      	ldr	r3, [r3, #4]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT);
    999c:	4909      	ldr	r1, [pc, #36]	; (99c4 <serial2_format+0x98>)
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    999e:	6018      	str	r0, [r3, #0]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT);
    99a0:	6011      	str	r1, [r2, #0]
    99a2:	4770      	bx	lr

	} else {
		#if defined(KINETISL)
		half_duplex_mode = 0;
		#else
		if (transmit_pin == (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT)) transmit_pin = NULL;
    99a4:	4b06      	ldr	r3, [pc, #24]	; (99c0 <serial2_format+0x94>)
    99a6:	4a07      	ldr	r2, [pc, #28]	; (99c4 <serial2_format+0x98>)
    99a8:	6819      	ldr	r1, [r3, #0]
    99aa:	4291      	cmp	r1, r2
    99ac:	bf08      	it	eq
    99ae:	6018      	streq	r0, [r3, #0]
		#endif
	}
}
    99b0:	4770      	bx	lr
    99b2:	bf00      	nop
    99b4:	4006b000 	.word	0x4006b000
    99b8:	1fff87f4 	.word	0x1fff87f4
    99bc:	000144f0 	.word	0x000144f0
    99c0:	1fffb534 	.word	0x1fffb534
    99c4:	42d600d4 	.word	0x42d600d4

000099c8 <serial2_end>:

void serial2_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    99c8:	4b29      	ldr	r3, [pc, #164]	; (9a70 <serial2_end+0xa8>)
    99ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    99cc:	051b      	lsls	r3, r3, #20
    99ce:	d54d      	bpl.n	9a6c <serial2_end+0xa4>
{
    99d0:	b510      	push	{r4, lr}
	while (transmitting) yield();  // wait for buffered data to send
    99d2:	4c28      	ldr	r4, [pc, #160]	; (9a74 <serial2_end+0xac>)
    99d4:	7823      	ldrb	r3, [r4, #0]
    99d6:	b123      	cbz	r3, 99e2 <serial2_end+0x1a>
    99d8:	f001 fdd6 	bl	b588 <yield>
    99dc:	7823      	ldrb	r3, [r4, #0]
    99de:	2b00      	cmp	r3, #0
    99e0:	d1fa      	bne.n	99d8 <serial2_end+0x10>
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
	UART1_C2 = 0;
    99e2:	4a25      	ldr	r2, [pc, #148]	; (9a78 <serial2_end+0xb0>)
#if defined(KINETISK)
	switch (rx_pin_num) {
    99e4:	4b25      	ldr	r3, [pc, #148]	; (9a7c <serial2_end+0xb4>)
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
    99e6:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    99ea:	f44f 4400 	mov.w	r4, #32768	; 0x8000
	UART1_C2 = 0;
    99ee:	2100      	movs	r1, #0
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
    99f0:	f8c0 4184 	str.w	r4, [r0, #388]	; 0x184
	UART1_C2 = 0;
    99f4:	70d1      	strb	r1, [r2, #3]
	switch (rx_pin_num) {
    99f6:	781b      	ldrb	r3, [r3, #0]
    99f8:	2b09      	cmp	r3, #9
    99fa:	d02c      	beq.n	9a56 <serial2_end+0x8e>
    99fc:	2b1a      	cmp	r3, #26
    99fe:	d01b      	beq.n	9a38 <serial2_end+0x70>
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE1
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
		case 59: CORE_PIN59_CONFIG = 0; break;
		#endif
	}
	switch (tx_pin_num & 127) {
    9a00:	4b1f      	ldr	r3, [pc, #124]	; (9a80 <serial2_end+0xb8>)
    9a02:	781b      	ldrb	r3, [r3, #0]
    9a04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9a08:	2b0a      	cmp	r3, #10
    9a0a:	d01f      	beq.n	9a4c <serial2_end+0x84>
    9a0c:	2b1f      	cmp	r3, #31
    9a0e:	d00e      	beq.n	9a2e <serial2_end+0x66>
#endif
	UART1_S1;
	UART1_D; // clear leftover error status
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	if (rts_pin) rts_deassert();
    9a10:	4b1c      	ldr	r3, [pc, #112]	; (9a84 <serial2_end+0xbc>)
	UART1_S1;
    9a12:	4a19      	ldr	r2, [pc, #100]	; (9a78 <serial2_end+0xb0>)
	rx_buffer_head = 0;
    9a14:	4c1c      	ldr	r4, [pc, #112]	; (9a88 <serial2_end+0xc0>)
	rx_buffer_tail = 0;
    9a16:	481d      	ldr	r0, [pc, #116]	; (9a8c <serial2_end+0xc4>)
	if (rts_pin) rts_deassert();
    9a18:	6819      	ldr	r1, [r3, #0]
	UART1_S1;
    9a1a:	f892 c004 	ldrb.w	ip, [r2, #4]
	UART1_D; // clear leftover error status
    9a1e:	79d2      	ldrb	r2, [r2, #7]
	rx_buffer_head = 0;
    9a20:	2300      	movs	r3, #0
    9a22:	7023      	strb	r3, [r4, #0]
	rx_buffer_tail = 0;
    9a24:	7003      	strb	r3, [r0, #0]
	if (rts_pin) rts_deassert();
    9a26:	b109      	cbz	r1, 9a2c <serial2_end+0x64>
    9a28:	2301      	movs	r3, #1
    9a2a:	700b      	strb	r3, [r1, #0]
}
    9a2c:	bd10      	pop	{r4, pc}
		case 31: CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE0
    9a2e:	4b18      	ldr	r3, [pc, #96]	; (9a90 <serial2_end+0xc8>)
    9a30:	f240 1203 	movw	r2, #259	; 0x103
    9a34:	601a      	str	r2, [r3, #0]
    9a36:	e7eb      	b.n	9a10 <serial2_end+0x48>
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE1
    9a38:	4b15      	ldr	r3, [pc, #84]	; (9a90 <serial2_end+0xc8>)
    9a3a:	f240 1203 	movw	r2, #259	; 0x103
    9a3e:	605a      	str	r2, [r3, #4]
	switch (tx_pin_num & 127) {
    9a40:	4b0f      	ldr	r3, [pc, #60]	; (9a80 <serial2_end+0xb8>)
    9a42:	781b      	ldrb	r3, [r3, #0]
    9a44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9a48:	2b0a      	cmp	r3, #10
    9a4a:	d1df      	bne.n	9a0c <serial2_end+0x44>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC4
    9a4c:	4b11      	ldr	r3, [pc, #68]	; (9a94 <serial2_end+0xcc>)
    9a4e:	f240 1203 	movw	r2, #259	; 0x103
    9a52:	611a      	str	r2, [r3, #16]
    9a54:	e7dc      	b.n	9a10 <serial2_end+0x48>
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC3
    9a56:	4b0f      	ldr	r3, [pc, #60]	; (9a94 <serial2_end+0xcc>)
    9a58:	f240 1203 	movw	r2, #259	; 0x103
    9a5c:	60da      	str	r2, [r3, #12]
	switch (tx_pin_num & 127) {
    9a5e:	4b08      	ldr	r3, [pc, #32]	; (9a80 <serial2_end+0xb8>)
    9a60:	781b      	ldrb	r3, [r3, #0]
    9a62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9a66:	2b0a      	cmp	r3, #10
    9a68:	d1d0      	bne.n	9a0c <serial2_end+0x44>
    9a6a:	e7ef      	b.n	9a4c <serial2_end+0x84>
    9a6c:	4770      	bx	lr
    9a6e:	bf00      	nop
    9a70:	40048000 	.word	0x40048000
    9a74:	1fffb538 	.word	0x1fffb538
    9a78:	4006b000 	.word	0x4006b000
    9a7c:	1fff87ec 	.word	0x1fff87ec
    9a80:	1fff87f4 	.word	0x1fff87f4
    9a84:	1fffb4e4 	.word	0x1fffb4e4
    9a88:	1fffb528 	.word	0x1fffb528
    9a8c:	1fffb530 	.word	0x1fffb530
    9a90:	4004d000 	.word	0x4004d000
    9a94:	4004b000 	.word	0x4004b000

00009a98 <serial2_set_transmit_pin>:

void serial2_set_transmit_pin(uint8_t pin)
{
	while (transmitting) ;
    9a98:	4a0a      	ldr	r2, [pc, #40]	; (9ac4 <serial2_set_transmit_pin+0x2c>)
{
    9a9a:	b538      	push	{r3, r4, r5, lr}
    9a9c:	4605      	mov	r5, r0
	while (transmitting) ;
    9a9e:	7813      	ldrb	r3, [r2, #0]
    9aa0:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    9aa4:	2b00      	cmp	r3, #0
    9aa6:	d1fa      	bne.n	9a9e <serial2_set_transmit_pin+0x6>
	pinMode(pin, OUTPUT);
    9aa8:	2101      	movs	r1, #1
    9aaa:	4628      	mov	r0, r5
    9aac:	f7ff fe28 	bl	9700 <pinMode>
	digitalWrite(pin, LOW);
    9ab0:	4621      	mov	r1, r4
    9ab2:	4628      	mov	r0, r5
    9ab4:	f7ff fdf0 	bl	9698 <digitalWrite>
	transmit_pin = portOutputRegister(pin);
    9ab8:	4a03      	ldr	r2, [pc, #12]	; (9ac8 <serial2_set_transmit_pin+0x30>)
    9aba:	4b04      	ldr	r3, [pc, #16]	; (9acc <serial2_set_transmit_pin+0x34>)
    9abc:	f852 2035 	ldr.w	r2, [r2, r5, lsl #3]
    9ac0:	601a      	str	r2, [r3, #0]
	#if defined(KINETISL)
	transmit_mask = digitalPinToBitMask(pin);
	#endif
}
    9ac2:	bd38      	pop	{r3, r4, r5, pc}
    9ac4:	1fffb538 	.word	0x1fffb538
    9ac8:	000144f0 	.word	0x000144f0
    9acc:	1fffb534 	.word	0x1fffb534

00009ad0 <serial2_set_tx>:
void serial2_set_tx(uint8_t pin, uint8_t opendrain)
{
	#if defined(KINETISK)
	uint32_t cfg;

	if (opendrain) pin |= 128;
    9ad0:	b109      	cbz	r1, 9ad6 <serial2_set_tx+0x6>
    9ad2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	if (pin == tx_pin_num) return;
    9ad6:	4a19      	ldr	r2, [pc, #100]	; (9b3c <serial2_set_tx+0x6c>)
    9ad8:	7813      	ldrb	r3, [r2, #0]
    9ada:	4283      	cmp	r3, r0
    9adc:	d017      	beq.n	9b0e <serial2_set_tx+0x3e>
{
    9ade:	b410      	push	{r4}
	if ((SIM_SCGC4 & SIM_SCGC4_UART1)) {
    9ae0:	4c17      	ldr	r4, [pc, #92]	; (9b40 <serial2_set_tx+0x70>)
    9ae2:	6b64      	ldr	r4, [r4, #52]	; 0x34
    9ae4:	0524      	lsls	r4, r4, #20
    9ae6:	d50f      	bpl.n	9b08 <serial2_set_tx+0x38>
		switch (tx_pin_num & 127) {
    9ae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9aec:	2b0a      	cmp	r3, #10
    9aee:	d021      	beq.n	9b34 <serial2_set_tx+0x64>
    9af0:	2b1f      	cmp	r3, #31
    9af2:	d014      	beq.n	9b1e <serial2_set_tx+0x4e>
			#endif
		}
		if (opendrain) {
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    9af4:	2900      	cmp	r1, #0
    9af6:	f000 037f 	and.w	r3, r0, #127	; 0x7f
    9afa:	bf14      	ite	ne
    9afc:	2160      	movne	r1, #96	; 0x60
    9afe:	2144      	moveq	r1, #68	; 0x44
		}
		switch (pin & 127) {
    9b00:	2b0a      	cmp	r3, #10
    9b02:	d010      	beq.n	9b26 <serial2_set_tx+0x56>
    9b04:	2b1f      	cmp	r3, #31
    9b06:	d003      	beq.n	9b10 <serial2_set_tx+0x40>
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 58: CORE_PIN58_CONFIG = cfg | PORT_PCR_MUX(3); break;
			#endif
		}
	}
	tx_pin_num = pin;
    9b08:	7010      	strb	r0, [r2, #0]
	#endif
}
    9b0a:	bc10      	pop	{r4}
    9b0c:	4770      	bx	lr
    9b0e:	4770      	bx	lr
			case 31: CORE_PIN31_CONFIG = cfg | PORT_PCR_MUX(3); break;
    9b10:	4b0c      	ldr	r3, [pc, #48]	; (9b44 <serial2_set_tx+0x74>)
    9b12:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    9b16:	6019      	str	r1, [r3, #0]
	tx_pin_num = pin;
    9b18:	7010      	strb	r0, [r2, #0]
}
    9b1a:	bc10      	pop	{r4}
    9b1c:	4770      	bx	lr
			case 31: CORE_PIN31_CONFIG = 0; break; // PTE0
    9b1e:	4b09      	ldr	r3, [pc, #36]	; (9b44 <serial2_set_tx+0x74>)
    9b20:	2400      	movs	r4, #0
    9b22:	601c      	str	r4, [r3, #0]
    9b24:	e7e6      	b.n	9af4 <serial2_set_tx+0x24>
			case 10: CORE_PIN10_CONFIG = cfg | PORT_PCR_MUX(3); break;
    9b26:	4b08      	ldr	r3, [pc, #32]	; (9b48 <serial2_set_tx+0x78>)
    9b28:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    9b2c:	6119      	str	r1, [r3, #16]
	tx_pin_num = pin;
    9b2e:	7010      	strb	r0, [r2, #0]
}
    9b30:	bc10      	pop	{r4}
    9b32:	4770      	bx	lr
			case 10: CORE_PIN10_CONFIG = 0; break; // PTC4
    9b34:	4b04      	ldr	r3, [pc, #16]	; (9b48 <serial2_set_tx+0x78>)
    9b36:	2400      	movs	r4, #0
    9b38:	611c      	str	r4, [r3, #16]
    9b3a:	e7db      	b.n	9af4 <serial2_set_tx+0x24>
    9b3c:	1fff87f4 	.word	0x1fff87f4
    9b40:	40048000 	.word	0x40048000
    9b44:	4004d000 	.word	0x4004d000
    9b48:	4004b000 	.word	0x4004b000

00009b4c <serial2_set_rx>:

void serial2_set_rx(uint8_t pin)
{
	#if defined(KINETISK)
	if (pin == rx_pin_num) return;
    9b4c:	4b12      	ldr	r3, [pc, #72]	; (9b98 <serial2_set_rx+0x4c>)
    9b4e:	781a      	ldrb	r2, [r3, #0]
    9b50:	4282      	cmp	r2, r0
    9b52:	d00c      	beq.n	9b6e <serial2_set_rx+0x22>
	if ((SIM_SCGC4 & SIM_SCGC4_UART1)) {
    9b54:	4911      	ldr	r1, [pc, #68]	; (9b9c <serial2_set_rx+0x50>)
    9b56:	6b49      	ldr	r1, [r1, #52]	; 0x34
    9b58:	0509      	lsls	r1, r1, #20
    9b5a:	d507      	bpl.n	9b6c <serial2_set_rx+0x20>
		switch (rx_pin_num) {
    9b5c:	2a09      	cmp	r2, #9
    9b5e:	d016      	beq.n	9b8e <serial2_set_rx+0x42>
    9b60:	2a1a      	cmp	r2, #26
    9b62:	d00a      	beq.n	9b7a <serial2_set_rx+0x2e>
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 59: CORE_PIN59_CONFIG = 0; break;
			#endif
		}
		switch (pin) {
    9b64:	2809      	cmp	r0, #9
    9b66:	d00d      	beq.n	9b84 <serial2_set_rx+0x38>
    9b68:	281a      	cmp	r0, #26
    9b6a:	d001      	beq.n	9b70 <serial2_set_rx+0x24>
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 59: CORE_PIN59_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
			#endif
		}
	}
	rx_pin_num = pin;
    9b6c:	7018      	strb	r0, [r3, #0]
	#endif
}
    9b6e:	4770      	bx	lr
			case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    9b70:	4a0b      	ldr	r2, [pc, #44]	; (9ba0 <serial2_set_rx+0x54>)
    9b72:	f240 3113 	movw	r1, #787	; 0x313
    9b76:	6051      	str	r1, [r2, #4]
    9b78:	e7f8      	b.n	9b6c <serial2_set_rx+0x20>
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
    9b7a:	4a09      	ldr	r2, [pc, #36]	; (9ba0 <serial2_set_rx+0x54>)
    9b7c:	2100      	movs	r1, #0
		switch (pin) {
    9b7e:	2809      	cmp	r0, #9
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
    9b80:	6051      	str	r1, [r2, #4]
		switch (pin) {
    9b82:	d1f1      	bne.n	9b68 <serial2_set_rx+0x1c>
			case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    9b84:	4a07      	ldr	r2, [pc, #28]	; (9ba4 <serial2_set_rx+0x58>)
    9b86:	f240 3113 	movw	r1, #787	; 0x313
    9b8a:	60d1      	str	r1, [r2, #12]
    9b8c:	e7ee      	b.n	9b6c <serial2_set_rx+0x20>
			case 9: CORE_PIN9_CONFIG = 0; break; // PTC3
    9b8e:	4a05      	ldr	r2, [pc, #20]	; (9ba4 <serial2_set_rx+0x58>)
    9b90:	2100      	movs	r1, #0
    9b92:	60d1      	str	r1, [r2, #12]
    9b94:	e7e6      	b.n	9b64 <serial2_set_rx+0x18>
    9b96:	bf00      	nop
    9b98:	1fff87ec 	.word	0x1fff87ec
    9b9c:	40048000 	.word	0x40048000
    9ba0:	4004d000 	.word	0x4004d000
    9ba4:	4004b000 	.word	0x4004b000

00009ba8 <serial2_set_rts>:

int serial2_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    9ba8:	4b0d      	ldr	r3, [pc, #52]	; (9be0 <serial2_set_rts+0x38>)
    9baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9bac:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
    9bb0:	d013      	beq.n	9bda <serial2_set_rts+0x32>
	if (pin < CORE_NUM_DIGITAL) {
    9bb2:	2821      	cmp	r0, #33	; 0x21
    9bb4:	d903      	bls.n	9bbe <serial2_set_rts+0x16>
		rts_mask = digitalPinToBitMask(pin);
		#endif
		pinMode(pin, OUTPUT);
		rts_assert();
	} else {
		rts_pin = NULL;
    9bb6:	4b0b      	ldr	r3, [pc, #44]	; (9be4 <serial2_set_rts+0x3c>)
    9bb8:	2000      	movs	r0, #0
    9bba:	6018      	str	r0, [r3, #0]
		return 0;
    9bbc:	4770      	bx	lr
		rts_pin = portOutputRegister(pin);
    9bbe:	4b0a      	ldr	r3, [pc, #40]	; (9be8 <serial2_set_rts+0x40>)
{
    9bc0:	b510      	push	{r4, lr}
		rts_pin = portOutputRegister(pin);
    9bc2:	4c08      	ldr	r4, [pc, #32]	; (9be4 <serial2_set_rts+0x3c>)
    9bc4:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    9bc8:	6023      	str	r3, [r4, #0]
		pinMode(pin, OUTPUT);
    9bca:	2101      	movs	r1, #1
    9bcc:	f7ff fd98 	bl	9700 <pinMode>
		rts_assert();
    9bd0:	6823      	ldr	r3, [r4, #0]
    9bd2:	2200      	movs	r2, #0
    9bd4:	701a      	strb	r2, [r3, #0]
		UART1_MODEM &= ~UART_MODEM_RXRTSE;
		return 0;
	}
	UART1_MODEM |= UART_MODEM_RXRTSE;
*/
	return 1;
    9bd6:	2001      	movs	r0, #1
}
    9bd8:	bd10      	pop	{r4, pc}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    9bda:	4618      	mov	r0, r3
}
    9bdc:	4770      	bx	lr
    9bde:	bf00      	nop
    9be0:	40048000 	.word	0x40048000
    9be4:	1fffb4e4 	.word	0x1fffb4e4
    9be8:	000144f0 	.word	0x000144f0

00009bec <serial2_set_cts>:

int serial2_set_cts(uint8_t pin)
{
#if defined(KINETISK)
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    9bec:	4b0c      	ldr	r3, [pc, #48]	; (9c20 <serial2_set_cts+0x34>)
    9bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9bf0:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
    9bf4:	d012      	beq.n	9c1c <serial2_set_cts+0x30>
	if (pin == 23) {
    9bf6:	2817      	cmp	r0, #23
    9bf8:	d109      	bne.n	9c0e <serial2_set_cts+0x22>
		CORE_PIN23_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    9bfa:	4b0a      	ldr	r3, [pc, #40]	; (9c24 <serial2_set_cts+0x38>)
	#endif
	} else {
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
		return 0;
	}
	UART1_MODEM |= UART_MODEM_TXCTSE;
    9bfc:	4a0a      	ldr	r2, [pc, #40]	; (9c28 <serial2_set_cts+0x3c>)
		CORE_PIN23_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    9bfe:	f240 3102 	movw	r1, #770	; 0x302
    9c02:	6099      	str	r1, [r3, #8]
	UART1_MODEM |= UART_MODEM_TXCTSE;
    9c04:	7b53      	ldrb	r3, [r2, #13]
	return 1;
    9c06:	2001      	movs	r0, #1
	UART1_MODEM |= UART_MODEM_TXCTSE;
    9c08:	4303      	orrs	r3, r0
    9c0a:	7353      	strb	r3, [r2, #13]
	return 1;
    9c0c:	4770      	bx	lr
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
    9c0e:	4a06      	ldr	r2, [pc, #24]	; (9c28 <serial2_set_cts+0x3c>)
    9c10:	7b53      	ldrb	r3, [r2, #13]
    9c12:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		return 0;
    9c16:	2000      	movs	r0, #0
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
    9c18:	7353      	strb	r3, [r2, #13]
		return 0;
    9c1a:	4770      	bx	lr
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    9c1c:	4618      	mov	r0, r3
#else
	return 0;
#endif
}
    9c1e:	4770      	bx	lr
    9c20:	40048000 	.word	0x40048000
    9c24:	4004b000 	.word	0x4004b000
    9c28:	4006b000 	.word	0x4006b000

00009c2c <serial2_putchar>:

void serial2_putchar(uint32_t c)
{
    9c2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    9c30:	4b33      	ldr	r3, [pc, #204]	; (9d00 <serial2_putchar+0xd4>)
    9c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9c34:	051a      	lsls	r2, r3, #20
    9c36:	d53a      	bpl.n	9cae <serial2_putchar+0x82>
	if (transmit_pin) transmit_assert();
    9c38:	4b32      	ldr	r3, [pc, #200]	; (9d04 <serial2_putchar+0xd8>)
    9c3a:	681b      	ldr	r3, [r3, #0]
    9c3c:	4606      	mov	r6, r0
    9c3e:	b10b      	cbz	r3, 9c44 <serial2_putchar+0x18>
    9c40:	2201      	movs	r2, #1
    9c42:	701a      	strb	r2, [r3, #0]
		reg |= UART_C3_TXDIR;
		UART1_C3 = reg;
		__enable_irq();
	}
	#endif 
	head = tx_buffer_head;
    9c44:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 9d08 <serial2_putchar+0xdc>
	if (++head >= tx_buffer_total_size_) head = 0;
    9c48:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 9d0c <serial2_putchar+0xe0>
	head = tx_buffer_head;
    9c4c:	f899 4000 	ldrb.w	r4, [r9]
	if (++head >= tx_buffer_total_size_) head = 0;
    9c50:	f8d8 3000 	ldr.w	r3, [r8]
	while (tx_buffer_tail == head) {
    9c54:	4d2e      	ldr	r5, [pc, #184]	; (9d10 <serial2_putchar+0xe4>)
	if (++head >= tx_buffer_total_size_) head = 0;
    9c56:	3401      	adds	r4, #1
    9c58:	42a3      	cmp	r3, r4
	while (tx_buffer_tail == head) {
    9c5a:	782b      	ldrb	r3, [r5, #0]
	if (++head >= tx_buffer_total_size_) head = 0;
    9c5c:	d929      	bls.n	9cb2 <serial2_putchar+0x86>
	while (tx_buffer_tail == head) {
    9c5e:	429c      	cmp	r4, r3
		tx_buffer[head] = c;
	} else {
		tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = c;
	}
	transmitting = 1;
	tx_buffer_head = head;
    9c60:	fa5f fa84 	uxtb.w	sl, r4
	while (tx_buffer_tail == head) {
    9c64:	d114      	bne.n	9c90 <serial2_putchar+0x64>
			if ((UART1_S1 & UART_S1_TDRE)) {
    9c66:	4f2b      	ldr	r7, [pc, #172]	; (9d14 <serial2_putchar+0xe8>)
					n = tx_buffer[tail];
    9c68:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 9d18 <serial2_putchar+0xec>
    9c6c:	e005      	b.n	9c7a <serial2_putchar+0x4e>
			if ((UART1_S1 & UART_S1_TDRE)) {
    9c6e:	793b      	ldrb	r3, [r7, #4]
    9c70:	061b      	lsls	r3, r3, #24
    9c72:	d423      	bmi.n	9cbc <serial2_putchar+0x90>
	while (tx_buffer_tail == head) {
    9c74:	782b      	ldrb	r3, [r5, #0]
    9c76:	42a3      	cmp	r3, r4
    9c78:	d10a      	bne.n	9c90 <serial2_putchar+0x64>
		int priority = nvic_execution_priority();
    9c7a:	f7ff fabd 	bl	91f8 <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    9c7e:	2840      	cmp	r0, #64	; 0x40
    9c80:	ddf5      	ble.n	9c6e <serial2_putchar+0x42>
		} else if (priority >= 256) {
    9c82:	28ff      	cmp	r0, #255	; 0xff
    9c84:	ddf6      	ble.n	9c74 <serial2_putchar+0x48>
			yield(); // wait
    9c86:	f001 fc7f 	bl	b588 <yield>
	while (tx_buffer_tail == head) {
    9c8a:	782b      	ldrb	r3, [r5, #0]
    9c8c:	42a3      	cmp	r3, r4
    9c8e:	d0f4      	beq.n	9c7a <serial2_putchar+0x4e>
	if (head < SERIAL2_TX_BUFFER_SIZE) {
    9c90:	2c27      	cmp	r4, #39	; 0x27
    9c92:	d929      	bls.n	9ce8 <serial2_putchar+0xbc>
		tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = c;
    9c94:	4b21      	ldr	r3, [pc, #132]	; (9d1c <serial2_putchar+0xf0>)
    9c96:	3c28      	subs	r4, #40	; 0x28
    9c98:	681b      	ldr	r3, [r3, #0]
    9c9a:	b2f6      	uxtb	r6, r6
    9c9c:	551e      	strb	r6, [r3, r4]
	transmitting = 1;
    9c9e:	4a20      	ldr	r2, [pc, #128]	; (9d20 <serial2_putchar+0xf4>)
	UART1_C2 = C2_TX_ACTIVE;
    9ca0:	4b1c      	ldr	r3, [pc, #112]	; (9d14 <serial2_putchar+0xe8>)
	transmitting = 1;
    9ca2:	2101      	movs	r1, #1
    9ca4:	7011      	strb	r1, [r2, #0]
	UART1_C2 = C2_TX_ACTIVE;
    9ca6:	22bc      	movs	r2, #188	; 0xbc
	tx_buffer_head = head;
    9ca8:	f889 a000 	strb.w	sl, [r9]
	UART1_C2 = C2_TX_ACTIVE;
    9cac:	70da      	strb	r2, [r3, #3]
}
    9cae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (tx_buffer_tail == head) {
    9cb2:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    9cb6:	b9a3      	cbnz	r3, 9ce2 <serial2_putchar+0xb6>
	if (++head >= tx_buffer_total_size_) head = 0;
    9cb8:	4654      	mov	r4, sl
    9cba:	e7d4      	b.n	9c66 <serial2_putchar+0x3a>
				uint32_t tail = tx_buffer_tail;
    9cbc:	782b      	ldrb	r3, [r5, #0]
				if (++tail >= tx_buffer_total_size_) tail = 0;
    9cbe:	f8d8 1000 	ldr.w	r1, [r8]
    9cc2:	1c5a      	adds	r2, r3, #1
    9cc4:	4291      	cmp	r1, r2
				uint32_t tail = tx_buffer_tail;
    9cc6:	b2db      	uxtb	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    9cc8:	d908      	bls.n	9cdc <serial2_putchar+0xb0>
				if (tail < SERIAL2_TX_BUFFER_SIZE) {
    9cca:	2a27      	cmp	r2, #39	; 0x27
    9ccc:	d810      	bhi.n	9cf0 <serial2_putchar+0xc4>
				tx_buffer_tail = tail;
    9cce:	b2d1      	uxtb	r1, r2
					n = tx_buffer[tail];
    9cd0:	f81b 3002 	ldrb.w	r3, [fp, r2]
    9cd4:	b2db      	uxtb	r3, r3
				UART1_D = n;
    9cd6:	71fb      	strb	r3, [r7, #7]
				tx_buffer_tail = tail;
    9cd8:	7029      	strb	r1, [r5, #0]
    9cda:	e7cb      	b.n	9c74 <serial2_putchar+0x48>
    9cdc:	2100      	movs	r1, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    9cde:	460a      	mov	r2, r1
    9ce0:	e7f6      	b.n	9cd0 <serial2_putchar+0xa4>
	while (tx_buffer_tail == head) {
    9ce2:	f04f 0a00 	mov.w	sl, #0
	if (++head >= tx_buffer_total_size_) head = 0;
    9ce6:	4654      	mov	r4, sl
		tx_buffer[head] = c;
    9ce8:	4b0b      	ldr	r3, [pc, #44]	; (9d18 <serial2_putchar+0xec>)
    9cea:	b2f6      	uxtb	r6, r6
    9cec:	551e      	strb	r6, [r3, r4]
    9cee:	e7d6      	b.n	9c9e <serial2_putchar+0x72>
				tx_buffer_tail = tail;
    9cf0:	b2d1      	uxtb	r1, r2
					n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    9cf2:	4a0a      	ldr	r2, [pc, #40]	; (9d1c <serial2_putchar+0xf0>)
    9cf4:	3b27      	subs	r3, #39	; 0x27
    9cf6:	6812      	ldr	r2, [r2, #0]
    9cf8:	5cd3      	ldrb	r3, [r2, r3]
    9cfa:	b2db      	uxtb	r3, r3
    9cfc:	e7eb      	b.n	9cd6 <serial2_putchar+0xaa>
    9cfe:	bf00      	nop
    9d00:	40048000 	.word	0x40048000
    9d04:	1fffb534 	.word	0x1fffb534
    9d08:	1fffb564 	.word	0x1fffb564
    9d0c:	1fff87f0 	.word	0x1fff87f0
    9d10:	1fffb56c 	.word	0x1fffb56c
    9d14:	4006b000 	.word	0x4006b000
    9d18:	1fffb53c 	.word	0x1fffb53c
    9d1c:	1fffb568 	.word	0x1fffb568
    9d20:	1fffb538 	.word	0x1fffb538

00009d24 <serial2_write>:

#ifdef HAS_KINETISK_UART1_FIFO
void serial2_write(const void *buf, unsigned int count)
{
    9d24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const uint8_t *p = (const uint8_t *)buf;
	const uint8_t *end = p + count;
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    9d28:	4b39      	ldr	r3, [pc, #228]	; (9e10 <serial2_write+0xec>)
    9d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9d2c:	051a      	lsls	r2, r3, #20
    9d2e:	d53c      	bpl.n	9daa <serial2_write+0x86>
	if (transmit_pin) transmit_assert();
    9d30:	4b38      	ldr	r3, [pc, #224]	; (9e14 <serial2_write+0xf0>)
    9d32:	681b      	ldr	r3, [r3, #0]
    9d34:	b10b      	cbz	r3, 9d3a <serial2_write+0x16>
    9d36:	2201      	movs	r2, #1
    9d38:	701a      	strb	r2, [r3, #0]
	const uint8_t *end = p + count;
    9d3a:	1847      	adds	r7, r0, r1
	while (p < end) {
    9d3c:	42b8      	cmp	r0, r7
    9d3e:	d231      	bcs.n	9da4 <serial2_write+0x80>
    9d40:	4e35      	ldr	r6, [pc, #212]	; (9e18 <serial2_write+0xf4>)
    9d42:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 9e1c <serial2_write+0xf8>
    9d46:	4c36      	ldr	r4, [pc, #216]	; (9e20 <serial2_write+0xfc>)
		head = tx_buffer_head;
		if (++head >= tx_buffer_total_size_) head = 0;
		if (tx_buffer_tail == head) {
			UART1_C2 = C2_TX_ACTIVE;
    9d48:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 9e24 <serial2_write+0x100>
    9d4c:	f100 0a01 	add.w	sl, r0, #1
    9d50:	e013      	b.n	9d7a <serial2_write+0x56>
		if (tx_buffer_tail == head) {
    9d52:	f003 0bff 	and.w	fp, r3, #255	; 0xff
    9d56:	b353      	cbz	r3, 9dae <serial2_write+0x8a>
    9d58:	f04f 0b00 	mov.w	fp, #0
    9d5c:	465d      	mov	r5, fp
					yield();
				}
			} while (tx_buffer_tail == head);
		}
		if (head < SERIAL2_TX_BUFFER_SIZE) {
			tx_buffer[head] = *p++;
    9d5e:	4a32      	ldr	r2, [pc, #200]	; (9e28 <serial2_write+0x104>)
    9d60:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    9d64:	5553      	strb	r3, [r2, r5]
    9d66:	4652      	mov	r2, sl
		} else {
			tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = *p++;
		}
		transmitting = 1;
    9d68:	4930      	ldr	r1, [pc, #192]	; (9e2c <serial2_write+0x108>)
    9d6a:	2301      	movs	r3, #1
	while (p < end) {
    9d6c:	42ba      	cmp	r2, r7
		transmitting = 1;
    9d6e:	700b      	strb	r3, [r1, #0]
	while (p < end) {
    9d70:	f10a 0a01 	add.w	sl, sl, #1
		tx_buffer_head = head;
    9d74:	f886 b000 	strb.w	fp, [r6]
	while (p < end) {
    9d78:	d214      	bcs.n	9da4 <serial2_write+0x80>
		head = tx_buffer_head;
    9d7a:	7835      	ldrb	r5, [r6, #0]
		if (++head >= tx_buffer_total_size_) head = 0;
    9d7c:	f8d8 3000 	ldr.w	r3, [r8]
    9d80:	3501      	adds	r5, #1
    9d82:	42ab      	cmp	r3, r5
		if (tx_buffer_tail == head) {
    9d84:	7823      	ldrb	r3, [r4, #0]
		if (++head >= tx_buffer_total_size_) head = 0;
    9d86:	d9e4      	bls.n	9d52 <serial2_write+0x2e>
		if (tx_buffer_tail == head) {
    9d88:	42ab      	cmp	r3, r5
		tx_buffer_head = head;
    9d8a:	fa5f fb85 	uxtb.w	fp, r5
		if (tx_buffer_tail == head) {
    9d8e:	d00f      	beq.n	9db0 <serial2_write+0x8c>
		if (head < SERIAL2_TX_BUFFER_SIZE) {
    9d90:	2d27      	cmp	r5, #39	; 0x27
    9d92:	d9e4      	bls.n	9d5e <serial2_write+0x3a>
			tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = *p++;
    9d94:	4b26      	ldr	r3, [pc, #152]	; (9e30 <serial2_write+0x10c>)
    9d96:	f81a 2c01 	ldrb.w	r2, [sl, #-1]
    9d9a:	681b      	ldr	r3, [r3, #0]
    9d9c:	3d28      	subs	r5, #40	; 0x28
    9d9e:	555a      	strb	r2, [r3, r5]
    9da0:	4652      	mov	r2, sl
    9da2:	e7e1      	b.n	9d68 <serial2_write+0x44>
	}
	UART1_C2 = C2_TX_ACTIVE;
    9da4:	4b1f      	ldr	r3, [pc, #124]	; (9e24 <serial2_write+0x100>)
    9da6:	22bc      	movs	r2, #188	; 0xbc
    9da8:	70da      	strb	r2, [r3, #3]
}
    9daa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (tx_buffer_tail == head) {
    9dae:	465d      	mov	r5, fp
			UART1_C2 = C2_TX_ACTIVE;
    9db0:	f06f 0343 	mvn.w	r3, #67	; 0x43
    9db4:	f889 3003 	strb.w	r3, [r9, #3]
    9db8:	e006      	b.n	9dc8 <serial2_write+0xa4>
					if ((UART1_S1 & UART_S1_TDRE)) {
    9dba:	f899 3004 	ldrb.w	r3, [r9, #4]
    9dbe:	061b      	lsls	r3, r3, #24
    9dc0:	d40b      	bmi.n	9dda <serial2_write+0xb6>
			} while (tx_buffer_tail == head);
    9dc2:	7823      	ldrb	r3, [r4, #0]
    9dc4:	42ab      	cmp	r3, r5
    9dc6:	d1e3      	bne.n	9d90 <serial2_write+0x6c>
				int priority = nvic_execution_priority();
    9dc8:	f7ff fa16 	bl	91f8 <nvic_execution_priority>
				if (priority <= IRQ_PRIORITY) {
    9dcc:	2840      	cmp	r0, #64	; 0x40
    9dce:	ddf4      	ble.n	9dba <serial2_write+0x96>
				} else if (priority >= 256) {
    9dd0:	28ff      	cmp	r0, #255	; 0xff
    9dd2:	ddf6      	ble.n	9dc2 <serial2_write+0x9e>
					yield();
    9dd4:	f001 fbd8 	bl	b588 <yield>
    9dd8:	e7f3      	b.n	9dc2 <serial2_write+0x9e>
						uint32_t tail = tx_buffer_tail;
    9dda:	7823      	ldrb	r3, [r4, #0]
						if (++tail >= tx_buffer_total_size_) tail = 0;
    9ddc:	f8d8 1000 	ldr.w	r1, [r8]
    9de0:	1c5a      	adds	r2, r3, #1
    9de2:	4291      	cmp	r1, r2
						uint32_t tail = tx_buffer_tail;
    9de4:	b2db      	uxtb	r3, r3
						if (++tail >= tx_buffer_total_size_) tail = 0;
    9de6:	d903      	bls.n	9df0 <serial2_write+0xcc>
						if (tail < SERIAL2_TX_BUFFER_SIZE) {
    9de8:	2a27      	cmp	r2, #39	; 0x27
    9dea:	d80a      	bhi.n	9e02 <serial2_write+0xde>
						tx_buffer_tail = tail;
    9dec:	b2d1      	uxtb	r1, r2
    9dee:	e001      	b.n	9df4 <serial2_write+0xd0>
    9df0:	2100      	movs	r1, #0
						if (++tail >= tx_buffer_total_size_) tail = 0;
    9df2:	460a      	mov	r2, r1
							n = tx_buffer[tail];
    9df4:	4b0c      	ldr	r3, [pc, #48]	; (9e28 <serial2_write+0x104>)
    9df6:	5c9b      	ldrb	r3, [r3, r2]
    9df8:	b2db      	uxtb	r3, r3
						UART1_D = n;
    9dfa:	f889 3007 	strb.w	r3, [r9, #7]
						tx_buffer_tail = tail;
    9dfe:	7021      	strb	r1, [r4, #0]
    9e00:	e7df      	b.n	9dc2 <serial2_write+0x9e>
    9e02:	b2d1      	uxtb	r1, r2
							n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    9e04:	4a0a      	ldr	r2, [pc, #40]	; (9e30 <serial2_write+0x10c>)
    9e06:	3b27      	subs	r3, #39	; 0x27
    9e08:	6812      	ldr	r2, [r2, #0]
    9e0a:	5cd3      	ldrb	r3, [r2, r3]
    9e0c:	b2db      	uxtb	r3, r3
    9e0e:	e7f4      	b.n	9dfa <serial2_write+0xd6>
    9e10:	40048000 	.word	0x40048000
    9e14:	1fffb534 	.word	0x1fffb534
    9e18:	1fffb564 	.word	0x1fffb564
    9e1c:	1fff87f0 	.word	0x1fff87f0
    9e20:	1fffb56c 	.word	0x1fffb56c
    9e24:	4006b000 	.word	0x4006b000
    9e28:	1fffb53c 	.word	0x1fffb53c
    9e2c:	1fffb538 	.word	0x1fffb538
    9e30:	1fffb568 	.word	0x1fffb568

00009e34 <serial2_flush>:
	while (count-- > 0) serial2_putchar(*p++);
}
#endif

void serial2_flush(void)
{
    9e34:	b510      	push	{r4, lr}
	while (transmitting) yield(); // wait
    9e36:	4c04      	ldr	r4, [pc, #16]	; (9e48 <serial2_flush+0x14>)
    9e38:	7823      	ldrb	r3, [r4, #0]
    9e3a:	b123      	cbz	r3, 9e46 <serial2_flush+0x12>
    9e3c:	f001 fba4 	bl	b588 <yield>
    9e40:	7823      	ldrb	r3, [r4, #0]
    9e42:	2b00      	cmp	r3, #0
    9e44:	d1fa      	bne.n	9e3c <serial2_flush+0x8>
}
    9e46:	bd10      	pop	{r4, pc}
    9e48:	1fffb538 	.word	0x1fffb538

00009e4c <serial2_write_buffer_free>:

int serial2_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    9e4c:	4a08      	ldr	r2, [pc, #32]	; (9e70 <serial2_write_buffer_free+0x24>)
	tail = tx_buffer_tail;
    9e4e:	4b09      	ldr	r3, [pc, #36]	; (9e74 <serial2_write_buffer_free+0x28>)
	head = tx_buffer_head;
    9e50:	7811      	ldrb	r1, [r2, #0]
	tail = tx_buffer_tail;
    9e52:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    9e54:	4291      	cmp	r1, r2
	head = tx_buffer_head;
    9e56:	b2c8      	uxtb	r0, r1
	tail = tx_buffer_tail;
    9e58:	b2d3      	uxtb	r3, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    9e5a:	d202      	bcs.n	9e62 <serial2_write_buffer_free+0x16>
	return tail - head - 1;
    9e5c:	3b01      	subs	r3, #1
    9e5e:	1a18      	subs	r0, r3, r0
}
    9e60:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    9e62:	4a05      	ldr	r2, [pc, #20]	; (9e78 <serial2_write_buffer_free+0x2c>)
    9e64:	6812      	ldr	r2, [r2, #0]
    9e66:	3a01      	subs	r2, #1
    9e68:	4413      	add	r3, r2
    9e6a:	1a18      	subs	r0, r3, r0
    9e6c:	4770      	bx	lr
    9e6e:	bf00      	nop
    9e70:	1fffb564 	.word	0x1fffb564
    9e74:	1fffb56c 	.word	0x1fffb56c
    9e78:	1fff87f0 	.word	0x1fff87f0

00009e7c <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    9e7c:	4a06      	ldr	r2, [pc, #24]	; (9e98 <serial2_available+0x1c>)
	tail = rx_buffer_tail;
    9e7e:	4b07      	ldr	r3, [pc, #28]	; (9e9c <serial2_available+0x20>)
	head = rx_buffer_head;
    9e80:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    9e82:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return head - tail;
    9e84:	4291      	cmp	r1, r2
	tail = rx_buffer_tail;
    9e86:	b2d0      	uxtb	r0, r2
	return rx_buffer_total_size_ + head - tail;
    9e88:	bf3c      	itt	cc
    9e8a:	4a05      	ldrcc	r2, [pc, #20]	; (9ea0 <serial2_available+0x24>)
    9e8c:	6812      	ldrcc	r2, [r2, #0]
	head = rx_buffer_head;
    9e8e:	b2cb      	uxtb	r3, r1
	return rx_buffer_total_size_ + head - tail;
    9e90:	bf38      	it	cc
    9e92:	189b      	addcc	r3, r3, r2
    9e94:	1a18      	subs	r0, r3, r0
}
    9e96:	4770      	bx	lr
    9e98:	1fffb528 	.word	0x1fffb528
    9e9c:	1fffb530 	.word	0x1fffb530
    9ea0:	1fff87e8 	.word	0x1fff87e8

00009ea4 <serial2_getchar>:
int serial2_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    9ea4:	4b1b      	ldr	r3, [pc, #108]	; (9f14 <serial2_getchar+0x70>)
	tail = rx_buffer_tail;
    9ea6:	491c      	ldr	r1, [pc, #112]	; (9f18 <serial2_getchar+0x74>)
	head = rx_buffer_head;
    9ea8:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    9eaa:	780b      	ldrb	r3, [r1, #0]
	if (head == tail) return -1;
    9eac:	429a      	cmp	r2, r3
    9eae:	d02e      	beq.n	9f0e <serial2_getchar+0x6a>
{
    9eb0:	b510      	push	{r4, lr}
    9eb2:	fa5f fe82 	uxtb.w	lr, r2
	if (++tail >= rx_buffer_total_size_) tail = 0;
    9eb6:	4a19      	ldr	r2, [pc, #100]	; (9f1c <serial2_getchar+0x78>)
    9eb8:	b2d8      	uxtb	r0, r3
    9eba:	6812      	ldr	r2, [r2, #0]
    9ebc:	1c43      	adds	r3, r0, #1
    9ebe:	429a      	cmp	r2, r3
    9ec0:	d919      	bls.n	9ef6 <serial2_getchar+0x52>
	if (tail < SERIAL2_RX_BUFFER_SIZE) {
    9ec2:	2b3f      	cmp	r3, #63	; 0x3f
    9ec4:	d81b      	bhi.n	9efe <serial2_getchar+0x5a>
		c = rx_buffer[tail];
	} else {
		c = rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
	}
	rx_buffer_tail = tail;
    9ec6:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer[tail];
    9eca:	4815      	ldr	r0, [pc, #84]	; (9f20 <serial2_getchar+0x7c>)
    9ecc:	5cc0      	ldrb	r0, [r0, r3]
    9ece:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    9ed0:	f881 c000 	strb.w	ip, [r1]
	if (rts_pin) {
    9ed4:	4913      	ldr	r1, [pc, #76]	; (9f24 <serial2_getchar+0x80>)
    9ed6:	6809      	ldr	r1, [r1, #0]
    9ed8:	b161      	cbz	r1, 9ef4 <serial2_getchar+0x50>
		int avail;
		if (head >= tail) avail = head - tail;
    9eda:	459e      	cmp	lr, r3
		else avail = rx_buffer_total_size_ + head - tail;
    9edc:	bf3c      	itt	cc
    9ede:	4472      	addcc	r2, lr
    9ee0:	1ad3      	subcc	r3, r2, r3
		if (avail <= rts_low_watermark_) rts_assert();
    9ee2:	4a11      	ldr	r2, [pc, #68]	; (9f28 <serial2_getchar+0x84>)
    9ee4:	6812      	ldr	r2, [r2, #0]
		if (head >= tail) avail = head - tail;
    9ee6:	bf28      	it	cs
    9ee8:	ebae 0303 	subcs.w	r3, lr, r3
		if (avail <= rts_low_watermark_) rts_assert();
    9eec:	429a      	cmp	r2, r3
    9eee:	d301      	bcc.n	9ef4 <serial2_getchar+0x50>
    9ef0:	2300      	movs	r3, #0
    9ef2:	700b      	strb	r3, [r1, #0]
	}
	return c;
}
    9ef4:	bd10      	pop	{r4, pc}
    9ef6:	f04f 0c00 	mov.w	ip, #0
	if (++tail >= rx_buffer_total_size_) tail = 0;
    9efa:	4663      	mov	r3, ip
    9efc:	e7e5      	b.n	9eca <serial2_getchar+0x26>
		c = rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
    9efe:	4c0b      	ldr	r4, [pc, #44]	; (9f2c <serial2_getchar+0x88>)
    9f00:	383f      	subs	r0, #63	; 0x3f
    9f02:	6824      	ldr	r4, [r4, #0]
    9f04:	5c20      	ldrb	r0, [r4, r0]
	rx_buffer_tail = tail;
    9f06:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
    9f0a:	b2c0      	uxtb	r0, r0
    9f0c:	e7e0      	b.n	9ed0 <serial2_getchar+0x2c>
	if (head == tail) return -1;
    9f0e:	f04f 30ff 	mov.w	r0, #4294967295
}
    9f12:	4770      	bx	lr
    9f14:	1fffb528 	.word	0x1fffb528
    9f18:	1fffb530 	.word	0x1fffb530
    9f1c:	1fff87e8 	.word	0x1fff87e8
    9f20:	1fffb4e8 	.word	0x1fffb4e8
    9f24:	1fffb4e4 	.word	0x1fffb4e4
    9f28:	1fff87e4 	.word	0x1fff87e4
    9f2c:	1fffb52c 	.word	0x1fffb52c

00009f30 <serial2_peek>:

int serial2_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    9f30:	4a0d      	ldr	r2, [pc, #52]	; (9f68 <serial2_peek+0x38>)
	tail = rx_buffer_tail;
    9f32:	4b0e      	ldr	r3, [pc, #56]	; (9f6c <serial2_peek+0x3c>)
	head = rx_buffer_head;
    9f34:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    9f36:	781b      	ldrb	r3, [r3, #0]
	if (head == tail) return -1;
    9f38:	4299      	cmp	r1, r3
	tail = rx_buffer_tail;
    9f3a:	b2da      	uxtb	r2, r3
	if (head == tail) return -1;
    9f3c:	d011      	beq.n	9f62 <serial2_peek+0x32>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    9f3e:	490c      	ldr	r1, [pc, #48]	; (9f70 <serial2_peek+0x40>)
    9f40:	6809      	ldr	r1, [r1, #0]
    9f42:	1c53      	adds	r3, r2, #1
    9f44:	4299      	cmp	r1, r3
    9f46:	d907      	bls.n	9f58 <serial2_peek+0x28>
	if (tail < SERIAL2_RX_BUFFER_SIZE) {
    9f48:	2b3f      	cmp	r3, #63	; 0x3f
    9f4a:	d906      	bls.n	9f5a <serial2_peek+0x2a>
		return rx_buffer[tail];
	}
	return rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
    9f4c:	4b09      	ldr	r3, [pc, #36]	; (9f74 <serial2_peek+0x44>)
    9f4e:	3a3f      	subs	r2, #63	; 0x3f
    9f50:	681b      	ldr	r3, [r3, #0]
    9f52:	5c98      	ldrb	r0, [r3, r2]
    9f54:	b2c0      	uxtb	r0, r0
    9f56:	4770      	bx	lr
	if (++tail >= rx_buffer_total_size_) tail = 0;
    9f58:	2300      	movs	r3, #0
		return rx_buffer[tail];
    9f5a:	4a07      	ldr	r2, [pc, #28]	; (9f78 <serial2_peek+0x48>)
    9f5c:	5cd0      	ldrb	r0, [r2, r3]
    9f5e:	b2c0      	uxtb	r0, r0
    9f60:	4770      	bx	lr
	if (head == tail) return -1;
    9f62:	f04f 30ff 	mov.w	r0, #4294967295
}
    9f66:	4770      	bx	lr
    9f68:	1fffb528 	.word	0x1fffb528
    9f6c:	1fffb530 	.word	0x1fffb530
    9f70:	1fff87e8 	.word	0x1fff87e8
    9f74:	1fffb52c 	.word	0x1fffb52c
    9f78:	1fffb4e8 	.word	0x1fffb4e8

00009f7c <serial2_clear>:

void serial2_clear(void)
{
#ifdef HAS_KINETISK_UART1_FIFO
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    9f7c:	4b0c      	ldr	r3, [pc, #48]	; (9fb0 <serial2_clear+0x34>)
    9f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9f80:	051b      	lsls	r3, r3, #20
    9f82:	d514      	bpl.n	9fae <serial2_clear+0x32>
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    9f84:	4b0b      	ldr	r3, [pc, #44]	; (9fb4 <serial2_clear+0x38>)
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
#endif
	rx_buffer_head = rx_buffer_tail;
    9f86:	480c      	ldr	r0, [pc, #48]	; (9fb8 <serial2_clear+0x3c>)
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    9f88:	78da      	ldrb	r2, [r3, #3]
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
    9f8a:	2140      	movs	r1, #64	; 0x40
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    9f8c:	f002 02cb 	and.w	r2, r2, #203	; 0xcb
    9f90:	70da      	strb	r2, [r3, #3]
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
    9f92:	7459      	strb	r1, [r3, #17]
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    9f94:	78da      	ldrb	r2, [r3, #3]
	rx_buffer_head = rx_buffer_tail;
    9f96:	4909      	ldr	r1, [pc, #36]	; (9fbc <serial2_clear+0x40>)
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    9f98:	f042 0234 	orr.w	r2, r2, #52	; 0x34
    9f9c:	70da      	strb	r2, [r3, #3]
	if (rts_pin) rts_assert();
    9f9e:	4a08      	ldr	r2, [pc, #32]	; (9fc0 <serial2_clear+0x44>)
	rx_buffer_head = rx_buffer_tail;
    9fa0:	7803      	ldrb	r3, [r0, #0]
	if (rts_pin) rts_assert();
    9fa2:	6812      	ldr	r2, [r2, #0]
	rx_buffer_head = rx_buffer_tail;
    9fa4:	b2db      	uxtb	r3, r3
    9fa6:	700b      	strb	r3, [r1, #0]
	if (rts_pin) rts_assert();
    9fa8:	b10a      	cbz	r2, 9fae <serial2_clear+0x32>
    9faa:	2300      	movs	r3, #0
    9fac:	7013      	strb	r3, [r2, #0]
}
    9fae:	4770      	bx	lr
    9fb0:	40048000 	.word	0x40048000
    9fb4:	4006b000 	.word	0x4006b000
    9fb8:	1fffb530 	.word	0x1fffb530
    9fbc:	1fffb528 	.word	0x1fffb528
    9fc0:	1fffb4e4 	.word	0x1fffb4e4

00009fc4 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    9fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    9fc8:	4c50      	ldr	r4, [pc, #320]	; (a10c <uart1_status_isr+0x148>)
    9fca:	7923      	ldrb	r3, [r4, #4]
    9fcc:	f013 0f30 	tst.w	r3, #48	; 0x30
    9fd0:	d047      	beq.n	a062 <uart1_status_isr+0x9e>
		__disable_irq();
    9fd2:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    9fd4:	7da3      	ldrb	r3, [r4, #22]
		if (avail == 0) {
    9fd6:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    9fda:	2b00      	cmp	r3, #0
    9fdc:	d058      	beq.n	a090 <uart1_status_isr+0xcc>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    9fde:	b662      	cpsie	i
			head = rx_buffer_head;
    9fe0:	f8df 812c 	ldr.w	r8, [pc, #300]	; a110 <uart1_status_isr+0x14c>
			tail = rx_buffer_tail;
    9fe4:	484b      	ldr	r0, [pc, #300]	; (a114 <uart1_status_isr+0x150>)
			head = rx_buffer_head;
    9fe6:	f898 3000 	ldrb.w	r3, [r8]
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    9fea:	4a4b      	ldr	r2, [pc, #300]	; (a118 <uart1_status_isr+0x154>)
			tail = rx_buffer_tail;
    9fec:	7805      	ldrb	r5, [r0, #0]
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    9fee:	6816      	ldr	r6, [r2, #0]
				if (newhead != tail) {
					head = newhead;
					if (newhead < SERIAL2_RX_BUFFER_SIZE) {
						rx_buffer[head] = n;
    9ff0:	4f4a      	ldr	r7, [pc, #296]	; (a11c <uart1_status_isr+0x158>)
			head = rx_buffer_head;
    9ff2:	fa5f fc83 	uxtb.w	ip, r3
					} else {
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    9ff6:	4b4a      	ldr	r3, [pc, #296]	; (a120 <uart1_status_isr+0x15c>)
			tail = rx_buffer_tail;
    9ff8:	b2ed      	uxtb	r5, r5
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    9ffa:	f8d3 e000 	ldr.w	lr, [r3]
    9ffe:	e008      	b.n	a012 <uart1_status_isr+0x4e>
				if (newhead != tail) {
    a000:	b11d      	cbz	r5, a00a <uart1_status_isr+0x46>
    a002:	f04f 0c00 	mov.w	ip, #0
						rx_buffer[head] = n;
    a006:	f807 300c 	strb.w	r3, [r7, ip]
					}
				}
			} while (--avail > 0);
    a00a:	1e4a      	subs	r2, r1, #1
    a00c:	f012 01ff 	ands.w	r1, r2, #255	; 0xff
    a010:	d012      	beq.n	a038 <uart1_status_isr+0x74>
					n = UART1_D;
    a012:	79e3      	ldrb	r3, [r4, #7]
				newhead = head + 1;
    a014:	f10c 0201 	add.w	r2, ip, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    a018:	4296      	cmp	r6, r2
					n = UART1_D;
    a01a:	b2db      	uxtb	r3, r3
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    a01c:	d9f0      	bls.n	a000 <uart1_status_isr+0x3c>
				if (newhead != tail) {
    a01e:	4295      	cmp	r5, r2
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    a020:	f1ac 003f 	sub.w	r0, ip, #63	; 0x3f
				if (newhead != tail) {
    a024:	d0f1      	beq.n	a00a <uart1_status_isr+0x46>
					if (newhead < SERIAL2_RX_BUFFER_SIZE) {
    a026:	2a3f      	cmp	r2, #63	; 0x3f
    a028:	d96d      	bls.n	a106 <uart1_status_isr+0x142>
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    a02a:	4694      	mov	ip, r2
			} while (--avail > 0);
    a02c:	1e4a      	subs	r2, r1, #1
    a02e:	f012 01ff 	ands.w	r1, r2, #255	; 0xff
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    a032:	f80e 3000 	strb.w	r3, [lr, r0]
			} while (--avail > 0);
    a036:	d1ec      	bne.n	a012 <uart1_status_isr+0x4e>
			rx_buffer_head = head;
    a038:	fa5f f38c 	uxtb.w	r3, ip
    a03c:	f888 3000 	strb.w	r3, [r8]
			if (rts_pin) {
    a040:	4b38      	ldr	r3, [pc, #224]	; (a124 <uart1_status_isr+0x160>)
    a042:	6819      	ldr	r1, [r3, #0]
    a044:	b169      	cbz	r1, a062 <uart1_status_isr+0x9e>
				int avail;
				if (head >= tail) avail = head - tail;
    a046:	45ac      	cmp	ip, r5
				else avail = rx_buffer_total_size_ + head - tail;
    a048:	bf3c      	itt	cc
    a04a:	1b72      	subcc	r2, r6, r5
    a04c:	eb02 030c 	addcc.w	r3, r2, ip
				if (avail >= rts_high_watermark_) rts_deassert();
    a050:	4a35      	ldr	r2, [pc, #212]	; (a128 <uart1_status_isr+0x164>)
    a052:	6812      	ldr	r2, [r2, #0]
				if (head >= tail) avail = head - tail;
    a054:	bf28      	it	cs
    a056:	ebac 0305 	subcs.w	r3, ip, r5
				if (avail >= rts_high_watermark_) rts_deassert();
    a05a:	429a      	cmp	r2, r3
    a05c:	bf9c      	itt	ls
    a05e:	2301      	movls	r3, #1
    a060:	700b      	strbls	r3, [r1, #0]
			}
		}
	}
	c = UART1_C2;
    a062:	482a      	ldr	r0, [pc, #168]	; (a10c <uart1_status_isr+0x148>)
    a064:	78c3      	ldrb	r3, [r0, #3]
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    a066:	061e      	lsls	r6, r3, #24
	c = UART1_C2;
    a068:	b2dd      	uxtb	r5, r3
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    a06a:	d416      	bmi.n	a09a <uart1_status_isr+0xd6>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    a06c:	066a      	lsls	r2, r5, #25
    a06e:	d50d      	bpl.n	a08c <uart1_status_isr+0xc8>
    a070:	4b26      	ldr	r3, [pc, #152]	; (a10c <uart1_status_isr+0x148>)
    a072:	791b      	ldrb	r3, [r3, #4]
    a074:	065b      	lsls	r3, r3, #25
    a076:	d509      	bpl.n	a08c <uart1_status_isr+0xc8>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    a078:	4b2c      	ldr	r3, [pc, #176]	; (a12c <uart1_status_isr+0x168>)
		transmitting = 0;
    a07a:	492d      	ldr	r1, [pc, #180]	; (a130 <uart1_status_isr+0x16c>)
		if (transmit_pin) transmit_deassert();
    a07c:	681b      	ldr	r3, [r3, #0]
		transmitting = 0;
    a07e:	2200      	movs	r2, #0
    a080:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    a082:	b103      	cbz	r3, a086 <uart1_status_isr+0xc2>
    a084:	701a      	strb	r2, [r3, #0]
			reg &= ~UART_C3_TXDIR;
			UART1_C3 = reg;
			__enable_irq();
		}
		#endif		
		UART1_C2 = C2_TX_INACTIVE;
    a086:	4b21      	ldr	r3, [pc, #132]	; (a10c <uart1_status_isr+0x148>)
    a088:	223c      	movs	r2, #60	; 0x3c
    a08a:	70da      	strb	r2, [r3, #3]
	}
}
    a08c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    a090:	2340      	movs	r3, #64	; 0x40
			c = UART1_D;
    a092:	79e2      	ldrb	r2, [r4, #7]
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    a094:	7463      	strb	r3, [r4, #17]
			__enable_irq();
    a096:	b662      	cpsie	i
    a098:	e7e3      	b.n	a062 <uart1_status_isr+0x9e>
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    a09a:	7903      	ldrb	r3, [r0, #4]
    a09c:	061c      	lsls	r4, r3, #24
    a09e:	d5e5      	bpl.n	a06c <uart1_status_isr+0xa8>
		head = tx_buffer_head;
    a0a0:	4b24      	ldr	r3, [pc, #144]	; (a134 <uart1_status_isr+0x170>)
			if (++tail >= tx_buffer_total_size_) tail = 0;
    a0a2:	4a25      	ldr	r2, [pc, #148]	; (a138 <uart1_status_isr+0x174>)
		tail = tx_buffer_tail;
    a0a4:	f8df e094 	ldr.w	lr, [pc, #148]	; a13c <uart1_status_isr+0x178>
		head = tx_buffer_head;
    a0a8:	781c      	ldrb	r4, [r3, #0]
			if (++tail >= tx_buffer_total_size_) tail = 0;
    a0aa:	6816      	ldr	r6, [r2, #0]
		tail = tx_buffer_tail;
    a0ac:	f89e 3000 	ldrb.w	r3, [lr]
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    a0b0:	4a23      	ldr	r2, [pc, #140]	; (a140 <uart1_status_isr+0x17c>)
				n = tx_buffer[tail];
    a0b2:	4f24      	ldr	r7, [pc, #144]	; (a144 <uart1_status_isr+0x180>)
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    a0b4:	f8d2 c000 	ldr.w	ip, [r2]
		head = tx_buffer_head;
    a0b8:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    a0ba:	b2db      	uxtb	r3, r3
    a0bc:	e007      	b.n	a0ce <uart1_status_isr+0x10a>
			avail = UART1_S1;
    a0be:	7903      	ldrb	r3, [r0, #4]
			if (++tail >= tx_buffer_total_size_) tail = 0;
    a0c0:	2300      	movs	r3, #0
				n = tx_buffer[tail];
    a0c2:	5cfa      	ldrb	r2, [r7, r3]
    a0c4:	b2d2      	uxtb	r2, r2
			UART1_D = n;
    a0c6:	71c2      	strb	r2, [r0, #7]
		} while (UART1_TCFIFO < 8);
    a0c8:	7d02      	ldrb	r2, [r0, #20]
    a0ca:	2a07      	cmp	r2, #7
    a0cc:	d811      	bhi.n	a0f2 <uart1_status_isr+0x12e>
			if (tail == head) break;
    a0ce:	42a3      	cmp	r3, r4
			if (++tail >= tx_buffer_total_size_) tail = 0;
    a0d0:	f103 0101 	add.w	r1, r3, #1
			if (tail == head) break;
    a0d4:	d00e      	beq.n	a0f4 <uart1_status_isr+0x130>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    a0d6:	428e      	cmp	r6, r1
    a0d8:	d9f1      	bls.n	a0be <uart1_status_isr+0xfa>
			if (tail < SERIAL2_TX_BUFFER_SIZE) {
    a0da:	2927      	cmp	r1, #39	; 0x27
			avail = UART1_S1;
    a0dc:	7902      	ldrb	r2, [r0, #4]
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    a0de:	f1a3 0327 	sub.w	r3, r3, #39	; 0x27
			if (tail < SERIAL2_TX_BUFFER_SIZE) {
    a0e2:	d801      	bhi.n	a0e8 <uart1_status_isr+0x124>
    a0e4:	460b      	mov	r3, r1
    a0e6:	e7ec      	b.n	a0c2 <uart1_status_isr+0xfe>
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    a0e8:	f81c 2003 	ldrb.w	r2, [ip, r3]
    a0ec:	460b      	mov	r3, r1
    a0ee:	b2d2      	uxtb	r2, r2
    a0f0:	e7e9      	b.n	a0c6 <uart1_status_isr+0x102>
		tx_buffer_tail = tail;
    a0f2:	b2dc      	uxtb	r4, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    a0f4:	4b05      	ldr	r3, [pc, #20]	; (a10c <uart1_status_isr+0x148>)
		tx_buffer_tail = tail;
    a0f6:	f88e 4000 	strb.w	r4, [lr]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    a0fa:	791a      	ldrb	r2, [r3, #4]
    a0fc:	0611      	lsls	r1, r2, #24
    a0fe:	bf44      	itt	mi
    a100:	227c      	movmi	r2, #124	; 0x7c
    a102:	70da      	strbmi	r2, [r3, #3]
    a104:	e7b2      	b.n	a06c <uart1_status_isr+0xa8>
    a106:	4694      	mov	ip, r2
    a108:	e77d      	b.n	a006 <uart1_status_isr+0x42>
    a10a:	bf00      	nop
    a10c:	4006b000 	.word	0x4006b000
    a110:	1fffb528 	.word	0x1fffb528
    a114:	1fffb530 	.word	0x1fffb530
    a118:	1fff87e8 	.word	0x1fff87e8
    a11c:	1fffb4e8 	.word	0x1fffb4e8
    a120:	1fffb52c 	.word	0x1fffb52c
    a124:	1fffb4e4 	.word	0x1fffb4e4
    a128:	1fff87e0 	.word	0x1fff87e0
    a12c:	1fffb534 	.word	0x1fffb534
    a130:	1fffb538 	.word	0x1fffb538
    a134:	1fffb564 	.word	0x1fffb564
    a138:	1fff87f0 	.word	0x1fff87f0
    a13c:	1fffb56c 	.word	0x1fffb56c
    a140:	1fffb568 	.word	0x1fffb568
    a144:	1fffb53c 	.word	0x1fffb53c

0000a148 <serial2_add_memory_for_read>:

void serial2_add_memory_for_read(void *buffer, size_t length)
{
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    a148:	4b09      	ldr	r3, [pc, #36]	; (a170 <serial2_add_memory_for_read+0x28>)
{
    a14a:	b410      	push	{r4}
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    a14c:	6018      	str	r0, [r3, #0]
	if (buffer) {
    a14e:	b160      	cbz	r0, a16a <serial2_add_memory_for_read+0x22>
		rx_buffer_total_size_ = SERIAL2_RX_BUFFER_SIZE + length;
    a150:	f101 0440 	add.w	r4, r1, #64	; 0x40
	} else {
		rx_buffer_total_size_ = SERIAL2_RX_BUFFER_SIZE;
	} 

	rts_low_watermark_ = RTS_LOW_WATERMARK + length;
    a154:	4b07      	ldr	r3, [pc, #28]	; (a174 <serial2_add_memory_for_read+0x2c>)
    a156:	4808      	ldr	r0, [pc, #32]	; (a178 <serial2_add_memory_for_read+0x30>)
    a158:	f101 021a 	add.w	r2, r1, #26
    a15c:	601a      	str	r2, [r3, #0]
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    a15e:	4b07      	ldr	r3, [pc, #28]	; (a17c <serial2_add_memory_for_read+0x34>)
    a160:	6004      	str	r4, [r0, #0]
    a162:	3128      	adds	r1, #40	; 0x28
}
    a164:	bc10      	pop	{r4}
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    a166:	6019      	str	r1, [r3, #0]
}
    a168:	4770      	bx	lr
		rx_buffer_total_size_ = SERIAL2_RX_BUFFER_SIZE;
    a16a:	2440      	movs	r4, #64	; 0x40
    a16c:	e7f2      	b.n	a154 <serial2_add_memory_for_read+0xc>
    a16e:	bf00      	nop
    a170:	1fffb52c 	.word	0x1fffb52c
    a174:	1fff87e4 	.word	0x1fff87e4
    a178:	1fff87e8 	.word	0x1fff87e8
    a17c:	1fff87e0 	.word	0x1fff87e0

0000a180 <serial2_add_memory_for_write>:

void serial2_add_memory_for_write(void *buffer, size_t length)
{
	tx_buffer_storage_ = (BUFTYPE*)buffer;
    a180:	4b05      	ldr	r3, [pc, #20]	; (a198 <serial2_add_memory_for_write+0x18>)
    a182:	6018      	str	r0, [r3, #0]
	if (buffer) {
    a184:	b118      	cbz	r0, a18e <serial2_add_memory_for_write+0xe>
		tx_buffer_total_size_ = SERIAL2_TX_BUFFER_SIZE + length;
    a186:	4b05      	ldr	r3, [pc, #20]	; (a19c <serial2_add_memory_for_write+0x1c>)
    a188:	3128      	adds	r1, #40	; 0x28
    a18a:	6019      	str	r1, [r3, #0]
	} else {
		tx_buffer_total_size_ = SERIAL2_TX_BUFFER_SIZE;
	} 
}
    a18c:	4770      	bx	lr
    a18e:	4b03      	ldr	r3, [pc, #12]	; (a19c <serial2_add_memory_for_write+0x1c>)
		tx_buffer_total_size_ = SERIAL2_TX_BUFFER_SIZE;
    a190:	2128      	movs	r1, #40	; 0x28
    a192:	6019      	str	r1, [r3, #0]
}
    a194:	4770      	bx	lr
    a196:	bf00      	nop
    a198:	1fffb568 	.word	0x1fffb568
    a19c:	1fff87f0 	.word	0x1fff87f0

0000a1a0 <serial3_putchar.part.0>:
#else
	return 0;
#endif
}

void serial3_putchar(uint32_t c)
    a1a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
	if (transmit_pin) transmit_assert();
    a1a4:	4b31      	ldr	r3, [pc, #196]	; (a26c <serial3_putchar.part.0+0xcc>)
    a1a6:	681b      	ldr	r3, [r3, #0]
void serial3_putchar(uint32_t c)
    a1a8:	4607      	mov	r7, r0
	if (transmit_pin) transmit_assert();
    a1aa:	b10b      	cbz	r3, a1b0 <serial3_putchar.part.0+0x10>
    a1ac:	2201      	movs	r2, #1
    a1ae:	701a      	strb	r2, [r3, #0]
		reg |= UART_C3_TXDIR;
		UART2_C3 = reg;
		__enable_irq();
	}
	#endif 
	head = tx_buffer_head;
    a1b0:	f8df 90bc 	ldr.w	r9, [pc, #188]	; a270 <serial3_putchar.part.0+0xd0>
	if (++head >= tx_buffer_total_size_) head = 0;
    a1b4:	f8df 80bc 	ldr.w	r8, [pc, #188]	; a274 <serial3_putchar.part.0+0xd4>
	head = tx_buffer_head;
    a1b8:	f899 4000 	ldrb.w	r4, [r9]
	if (++head >= tx_buffer_total_size_) head = 0;
    a1bc:	f8d8 3000 	ldr.w	r3, [r8]
	while (tx_buffer_tail == head) {
    a1c0:	4d2d      	ldr	r5, [pc, #180]	; (a278 <serial3_putchar.part.0+0xd8>)
	if (++head >= tx_buffer_total_size_) head = 0;
    a1c2:	3401      	adds	r4, #1
    a1c4:	429c      	cmp	r4, r3
	while (tx_buffer_tail == head) {
    a1c6:	782b      	ldrb	r3, [r5, #0]
	if (++head >= tx_buffer_total_size_) head = 0;
    a1c8:	d32a      	bcc.n	a220 <serial3_putchar.part.0+0x80>
	while (tx_buffer_tail == head) {
    a1ca:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    a1ce:	2b00      	cmp	r3, #0
    a1d0:	d13e      	bne.n	a250 <serial3_putchar.part.0+0xb0>
	if (++head >= tx_buffer_total_size_) head = 0;
    a1d2:	4654      	mov	r4, sl
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART2_S1 & UART_S1_TDRE)) {
    a1d4:	4e29      	ldr	r6, [pc, #164]	; (a27c <serial3_putchar.part.0+0xdc>)
				uint32_t tail = tx_buffer_tail;
				if (++tail >= tx_buffer_total_size_) tail = 0;
				if (tail < SERIAL3_TX_BUFFER_SIZE) {
					n = tx_buffer[tail];
    a1d6:	f8df b0a8 	ldr.w	fp, [pc, #168]	; a280 <serial3_putchar.part.0+0xe0>
    a1da:	e005      	b.n	a1e8 <serial3_putchar.part.0+0x48>
			if ((UART2_S1 & UART_S1_TDRE)) {
    a1dc:	7933      	ldrb	r3, [r6, #4]
    a1de:	061b      	lsls	r3, r3, #24
    a1e0:	d423      	bmi.n	a22a <serial3_putchar.part.0+0x8a>
	while (tx_buffer_tail == head) {
    a1e2:	782b      	ldrb	r3, [r5, #0]
    a1e4:	42a3      	cmp	r3, r4
    a1e6:	d10a      	bne.n	a1fe <serial3_putchar.part.0+0x5e>
		int priority = nvic_execution_priority();
    a1e8:	f7ff f806 	bl	91f8 <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    a1ec:	2840      	cmp	r0, #64	; 0x40
    a1ee:	ddf5      	ble.n	a1dc <serial3_putchar.part.0+0x3c>
				}
				if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART2_D = n;
				tx_buffer_tail = tail;
			}
		} else if (priority >= 256) {
    a1f0:	28ff      	cmp	r0, #255	; 0xff
    a1f2:	ddf6      	ble.n	a1e2 <serial3_putchar.part.0+0x42>
			yield(); // wait
    a1f4:	f001 f9c8 	bl	b588 <yield>
	while (tx_buffer_tail == head) {
    a1f8:	782b      	ldrb	r3, [r5, #0]
    a1fa:	42a3      	cmp	r3, r4
    a1fc:	d0f4      	beq.n	a1e8 <serial3_putchar.part.0+0x48>
		}
	}
	if (head < SERIAL3_TX_BUFFER_SIZE) {
    a1fe:	2c27      	cmp	r4, #39	; 0x27
    a200:	d929      	bls.n	a256 <serial3_putchar.part.0+0xb6>
		tx_buffer[head] = c;
	} else {
		tx_buffer_storage_[head - SERIAL3_TX_BUFFER_SIZE] = c;
    a202:	4b20      	ldr	r3, [pc, #128]	; (a284 <serial3_putchar.part.0+0xe4>)
    a204:	3c28      	subs	r4, #40	; 0x28
    a206:	681b      	ldr	r3, [r3, #0]
    a208:	b2ff      	uxtb	r7, r7
    a20a:	551f      	strb	r7, [r3, r4]
	}
	transmitting = 1;
    a20c:	4a1e      	ldr	r2, [pc, #120]	; (a288 <serial3_putchar.part.0+0xe8>)
	tx_buffer_head = head;
	UART2_C2 = C2_TX_ACTIVE;
    a20e:	4b1b      	ldr	r3, [pc, #108]	; (a27c <serial3_putchar.part.0+0xdc>)
	transmitting = 1;
    a210:	2101      	movs	r1, #1
    a212:	7011      	strb	r1, [r2, #0]
	UART2_C2 = C2_TX_ACTIVE;
    a214:	22ac      	movs	r2, #172	; 0xac
	tx_buffer_head = head;
    a216:	f889 a000 	strb.w	sl, [r9]
	UART2_C2 = C2_TX_ACTIVE;
    a21a:	70da      	strb	r2, [r3, #3]
}
    a21c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (tx_buffer_tail == head) {
    a220:	429c      	cmp	r4, r3
	tx_buffer_head = head;
    a222:	fa5f fa84 	uxtb.w	sl, r4
	while (tx_buffer_tail == head) {
    a226:	d0d5      	beq.n	a1d4 <serial3_putchar.part.0+0x34>
    a228:	e7e9      	b.n	a1fe <serial3_putchar.part.0+0x5e>
				uint32_t tail = tx_buffer_tail;
    a22a:	782b      	ldrb	r3, [r5, #0]
				if (++tail >= tx_buffer_total_size_) tail = 0;
    a22c:	f8d8 1000 	ldr.w	r1, [r8]
    a230:	1c5a      	adds	r2, r3, #1
    a232:	428a      	cmp	r2, r1
				uint32_t tail = tx_buffer_tail;
    a234:	b2db      	uxtb	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    a236:	d203      	bcs.n	a240 <serial3_putchar.part.0+0xa0>
				if (tail < SERIAL3_TX_BUFFER_SIZE) {
    a238:	2a27      	cmp	r2, #39	; 0x27
    a23a:	d810      	bhi.n	a25e <serial3_putchar.part.0+0xbe>
				tx_buffer_tail = tail;
    a23c:	b2d1      	uxtb	r1, r2
    a23e:	e001      	b.n	a244 <serial3_putchar.part.0+0xa4>
    a240:	2100      	movs	r1, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    a242:	460a      	mov	r2, r1
					n = tx_buffer[tail];
    a244:	f81b 3002 	ldrb.w	r3, [fp, r2]
    a248:	b2db      	uxtb	r3, r3
				UART2_D = n;
    a24a:	71f3      	strb	r3, [r6, #7]
				tx_buffer_tail = tail;
    a24c:	7029      	strb	r1, [r5, #0]
    a24e:	e7c8      	b.n	a1e2 <serial3_putchar.part.0+0x42>
	while (tx_buffer_tail == head) {
    a250:	f04f 0a00 	mov.w	sl, #0
	if (++head >= tx_buffer_total_size_) head = 0;
    a254:	4654      	mov	r4, sl
		tx_buffer[head] = c;
    a256:	4b0a      	ldr	r3, [pc, #40]	; (a280 <serial3_putchar.part.0+0xe0>)
    a258:	b2ff      	uxtb	r7, r7
    a25a:	551f      	strb	r7, [r3, r4]
    a25c:	e7d6      	b.n	a20c <serial3_putchar.part.0+0x6c>
				tx_buffer_tail = tail;
    a25e:	b2d1      	uxtb	r1, r2
					n = tx_buffer_storage_[tail-SERIAL3_TX_BUFFER_SIZE];
    a260:	4a08      	ldr	r2, [pc, #32]	; (a284 <serial3_putchar.part.0+0xe4>)
    a262:	3b27      	subs	r3, #39	; 0x27
    a264:	6812      	ldr	r2, [r2, #0]
    a266:	5cd3      	ldrb	r3, [r2, r3]
    a268:	b2db      	uxtb	r3, r3
    a26a:	e7ee      	b.n	a24a <serial3_putchar.part.0+0xaa>
    a26c:	1fffb5c0 	.word	0x1fffb5c0
    a270:	1fffb5f0 	.word	0x1fffb5f0
    a274:	1fff8804 	.word	0x1fff8804
    a278:	1fffb5f8 	.word	0x1fffb5f8
    a27c:	4006c000 	.word	0x4006c000
    a280:	1fffb5c8 	.word	0x1fffb5c8
    a284:	1fffb5f4 	.word	0x1fffb5f4
    a288:	1fffb5c4 	.word	0x1fffb5c4

0000a28c <serial3_begin>:
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    a28c:	4a1d      	ldr	r2, [pc, #116]	; (a304 <serial3_begin+0x78>)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    a28e:	491e      	ldr	r1, [pc, #120]	; (a308 <serial3_begin+0x7c>)
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    a290:	6b53      	ldr	r3, [r2, #52]	; 0x34
{
    a292:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    a296:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
	transmitting = 0;
    a29a:	4d1c      	ldr	r5, [pc, #112]	; (a30c <serial3_begin+0x80>)
	rx_buffer_head = 0;
    a29c:	f8df 8070 	ldr.w	r8, [pc, #112]	; a310 <serial3_begin+0x84>
	rx_buffer_tail = 0;
    a2a0:	f8df 9070 	ldr.w	r9, [pc, #112]	; a314 <serial3_begin+0x88>
	tx_buffer_head = 0;
    a2a4:	4f1c      	ldr	r7, [pc, #112]	; (a318 <serial3_begin+0x8c>)
	tx_buffer_tail = 0;
    a2a6:	4e1d      	ldr	r6, [pc, #116]	; (a31c <serial3_begin+0x90>)
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    a2a8:	6353      	str	r3, [r2, #52]	; 0x34
	rx_buffer_head = 0;
    a2aa:	2300      	movs	r3, #0
    a2ac:	f888 3000 	strb.w	r3, [r8]
	rx_buffer_tail = 0;
    a2b0:	2820      	cmp	r0, #32
    a2b2:	f889 3000 	strb.w	r3, [r9]
	tx_buffer_head = 0;
    a2b6:	703b      	strb	r3, [r7, #0]
	tx_buffer_tail = 0;
    a2b8:	7033      	strb	r3, [r6, #0]
	transmitting = 0;
    a2ba:	702b      	strb	r3, [r5, #0]
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    a2bc:	f240 3513 	movw	r5, #787	; 0x313
    a2c0:	608d      	str	r5, [r1, #8]
	UART2_BDH = (divisor >> 13) & 0x1F;
    a2c2:	f502 3210 	add.w	r2, r2, #147456	; 0x24000
    a2c6:	bf38      	it	cc
    a2c8:	2020      	movcc	r0, #32
	CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    a2ca:	f44f 7551 	mov.w	r5, #836	; 0x344
    a2ce:	60cd      	str	r5, [r1, #12]
	UART2_BDH = (divisor >> 13) & 0x1F;
    a2d0:	f3c0 3144 	ubfx	r1, r0, #13, #5
    a2d4:	7011      	strb	r1, [r2, #0]
	UART2_BDL = (divisor >> 5) & 0xFF;
    a2d6:	f3c0 1e47 	ubfx	lr, r0, #5, #8
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    a2da:	4c11      	ldr	r4, [pc, #68]	; (a320 <serial3_begin+0x94>)
	UART2_BDL = (divisor >> 5) & 0xFF;
    a2dc:	f882 e001 	strb.w	lr, [r2, #1]
	UART2_C4 = divisor & 0x1F;
    a2e0:	f000 001f 	and.w	r0, r0, #31
	UART2_C2 = C2_TX_INACTIVE;
    a2e4:	212c      	movs	r1, #44	; 0x2c
	UART2_C4 = divisor & 0x1F;
    a2e6:	7290      	strb	r0, [r2, #10]
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    a2e8:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
	UART2_C1 = 0;
    a2ec:	7093      	strb	r3, [r2, #2]
	UART2_PFIFO = 0;
    a2ee:	7413      	strb	r3, [r2, #16]
	UART2_C2 = C2_TX_INACTIVE;
    a2f0:	70d1      	strb	r1, [r2, #3]
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    a2f2:	2240      	movs	r2, #64	; 0x40
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    a2f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    a2f8:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    a2fc:	f8cc 3104 	str.w	r3, [ip, #260]	; 0x104
}
    a300:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a304:	40048000 	.word	0x40048000
    a308:	4004c000 	.word	0x4004c000
    a30c:	1fffb5c4 	.word	0x1fffb5c4
    a310:	1fffb5b4 	.word	0x1fffb5b4
    a314:	1fffb5bc 	.word	0x1fffb5bc
    a318:	1fffb5f0 	.word	0x1fffb5f0
    a31c:	1fffb5f8 	.word	0x1fffb5f8
    a320:	e000e400 	.word	0xe000e400

0000a324 <serial3_format>:
	c = UART2_C1;
    a324:	4b21      	ldr	r3, [pc, #132]	; (a3ac <serial3_format+0x88>)
	UART2_C1 = c;
    a326:	4921      	ldr	r1, [pc, #132]	; (a3ac <serial3_format+0x88>)
	c = UART2_C1;
    a328:	789b      	ldrb	r3, [r3, #2]
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    a32a:	f000 0203 	and.w	r2, r0, #3
    a32e:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    a332:	4313      	orrs	r3, r2
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    a334:	0742      	lsls	r2, r0, #29
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    a336:	f000 020f 	and.w	r2, r0, #15
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    a33a:	bf48      	it	mi
    a33c:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    a340:	2a04      	cmp	r2, #4
	UART2_C1 = c;
    a342:	708b      	strb	r3, [r1, #2]
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    a344:	d103      	bne.n	a34e <serial3_format+0x2a>
    a346:	798b      	ldrb	r3, [r1, #6]
    a348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a34c:	718b      	strb	r3, [r1, #6]
	c = UART2_S2 & ~0x10;
    a34e:	4b17      	ldr	r3, [pc, #92]	; (a3ac <serial3_format+0x88>)
	UART2_S2 = c;
    a350:	4a16      	ldr	r2, [pc, #88]	; (a3ac <serial3_format+0x88>)
	c = UART2_S2 & ~0x10;
    a352:	795b      	ldrb	r3, [r3, #5]
	if (format & 0x10) c |= 0x10;		// rx invert
    a354:	06c1      	lsls	r1, r0, #27
	c = UART2_S2 & ~0x10;
    a356:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	if (format & 0x10) c |= 0x10;		// rx invert
    a35a:	bf48      	it	mi
    a35c:	f043 0310 	orrmi.w	r3, r3, #16
	UART2_S2 = c;
    a360:	7153      	strb	r3, [r2, #5]
	c = UART2_C3 & ~0x10;
    a362:	7993      	ldrb	r3, [r2, #6]
	if (format & 0x20) c |= 0x10;		// tx invert
    a364:	0682      	lsls	r2, r0, #26
	c = UART2_C3 & ~0x10;
    a366:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	UART2_C3 = c;
    a36a:	4a10      	ldr	r2, [pc, #64]	; (a3ac <serial3_format+0x88>)
	if (format & 0x20) c |= 0x10;		// tx invert
    a36c:	bf48      	it	mi
    a36e:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    a372:	f410 7000 	ands.w	r0, r0, #512	; 0x200
	UART2_C3 = c;
    a376:	7193      	strb	r3, [r2, #6]
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    a378:	d010      	beq.n	a39c <serial3_format+0x78>
		c = UART2_C1;
    a37a:	7893      	ldrb	r3, [r2, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    a37c:	490c      	ldr	r1, [pc, #48]	; (a3b0 <serial3_format+0x8c>)
		c |= UART_C1_LOOPS | UART_C1_RSRC;
    a37e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		UART2_C1 = c;
    a382:	7093      	strb	r3, [r2, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    a384:	7809      	ldrb	r1, [r1, #0]
    a386:	4b0b      	ldr	r3, [pc, #44]	; (a3b4 <serial3_format+0x90>)
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT);
    a388:	4a0b      	ldr	r2, [pc, #44]	; (a3b8 <serial3_format+0x94>)
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    a38a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    a38e:	f240 3047 	movw	r0, #839	; 0x347
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    a392:	685b      	ldr	r3, [r3, #4]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT);
    a394:	4909      	ldr	r1, [pc, #36]	; (a3bc <serial3_format+0x98>)
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    a396:	6018      	str	r0, [r3, #0]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT);
    a398:	6011      	str	r1, [r2, #0]
    a39a:	4770      	bx	lr
		if (transmit_pin == (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT)) transmit_pin = NULL;
    a39c:	4b06      	ldr	r3, [pc, #24]	; (a3b8 <serial3_format+0x94>)
    a39e:	4a07      	ldr	r2, [pc, #28]	; (a3bc <serial3_format+0x98>)
    a3a0:	6819      	ldr	r1, [r3, #0]
    a3a2:	4291      	cmp	r1, r2
    a3a4:	bf08      	it	eq
    a3a6:	6018      	streq	r0, [r3, #0]
}
    a3a8:	4770      	bx	lr
    a3aa:	bf00      	nop
    a3ac:	4006c000 	.word	0x4006c000
    a3b0:	1fff8808 	.word	0x1fff8808
    a3b4:	000144f0 	.word	0x000144f0
    a3b8:	1fffb5c0 	.word	0x1fffb5c0
    a3bc:	42d800d4 	.word	0x42d800d4

0000a3c0 <serial3_end>:
{
    a3c0:	b538      	push	{r3, r4, r5, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    a3c2:	4b13      	ldr	r3, [pc, #76]	; (a410 <serial3_end+0x50>)
    a3c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a3c6:	04db      	lsls	r3, r3, #19
    a3c8:	d520      	bpl.n	a40c <serial3_end+0x4c>
	while (transmitting) yield();  // wait for buffered data to send
    a3ca:	4c12      	ldr	r4, [pc, #72]	; (a414 <serial3_end+0x54>)
    a3cc:	7823      	ldrb	r3, [r4, #0]
    a3ce:	b123      	cbz	r3, a3da <serial3_end+0x1a>
    a3d0:	f001 f8da 	bl	b588 <yield>
    a3d4:	7823      	ldrb	r3, [r4, #0]
    a3d6:	2b00      	cmp	r3, #0
    a3d8:	d1fa      	bne.n	a3d0 <serial3_end+0x10>
	UART2_C2 = 0;
    a3da:	4a0f      	ldr	r2, [pc, #60]	; (a418 <serial3_end+0x58>)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    a3dc:	490f      	ldr	r1, [pc, #60]	; (a41c <serial3_end+0x5c>)
	NVIC_DISABLE_IRQ(IRQ_UART2_STATUS);
    a3de:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	UART2_C2 = 0;
    a3e2:	2300      	movs	r3, #0
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    a3e4:	f240 1003 	movw	r0, #259	; 0x103
	NVIC_DISABLE_IRQ(IRQ_UART2_STATUS);
    a3e8:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    a3ec:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
	UART2_C2 = 0;
    a3f0:	70d3      	strb	r3, [r2, #3]
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    a3f2:	6088      	str	r0, [r1, #8]
	CORE_PIN8_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    a3f4:	60c8      	str	r0, [r1, #12]
	if (rts_pin) rts_deassert();
    a3f6:	490a      	ldr	r1, [pc, #40]	; (a420 <serial3_end+0x60>)
	rx_buffer_head = 0;
    a3f8:	4c0a      	ldr	r4, [pc, #40]	; (a424 <serial3_end+0x64>)
	rx_buffer_tail = 0;
    a3fa:	480b      	ldr	r0, [pc, #44]	; (a428 <serial3_end+0x68>)
	if (rts_pin) rts_deassert();
    a3fc:	6809      	ldr	r1, [r1, #0]
	UART2_S1;
    a3fe:	7915      	ldrb	r5, [r2, #4]
	UART2_D; // clear leftover error status
    a400:	79d2      	ldrb	r2, [r2, #7]
	rx_buffer_head = 0;
    a402:	7023      	strb	r3, [r4, #0]
	rx_buffer_tail = 0;
    a404:	7003      	strb	r3, [r0, #0]
	if (rts_pin) rts_deassert();
    a406:	b109      	cbz	r1, a40c <serial3_end+0x4c>
    a408:	2301      	movs	r3, #1
    a40a:	700b      	strb	r3, [r1, #0]
}
    a40c:	bd38      	pop	{r3, r4, r5, pc}
    a40e:	bf00      	nop
    a410:	40048000 	.word	0x40048000
    a414:	1fffb5c4 	.word	0x1fffb5c4
    a418:	4006c000 	.word	0x4006c000
    a41c:	4004c000 	.word	0x4004c000
    a420:	1fffb570 	.word	0x1fffb570
    a424:	1fffb5b4 	.word	0x1fffb5b4
    a428:	1fffb5bc 	.word	0x1fffb5bc

0000a42c <serial3_set_transmit_pin>:
	while (transmitting) ;
    a42c:	4a0a      	ldr	r2, [pc, #40]	; (a458 <serial3_set_transmit_pin+0x2c>)
{
    a42e:	b538      	push	{r3, r4, r5, lr}
    a430:	4605      	mov	r5, r0
	while (transmitting) ;
    a432:	7813      	ldrb	r3, [r2, #0]
    a434:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    a438:	2b00      	cmp	r3, #0
    a43a:	d1fa      	bne.n	a432 <serial3_set_transmit_pin+0x6>
	pinMode(pin, OUTPUT);
    a43c:	2101      	movs	r1, #1
    a43e:	4628      	mov	r0, r5
    a440:	f7ff f95e 	bl	9700 <pinMode>
	digitalWrite(pin, LOW);
    a444:	4621      	mov	r1, r4
    a446:	4628      	mov	r0, r5
    a448:	f7ff f926 	bl	9698 <digitalWrite>
	transmit_pin = portOutputRegister(pin);
    a44c:	4a03      	ldr	r2, [pc, #12]	; (a45c <serial3_set_transmit_pin+0x30>)
    a44e:	4b04      	ldr	r3, [pc, #16]	; (a460 <serial3_set_transmit_pin+0x34>)
    a450:	f852 2035 	ldr.w	r2, [r2, r5, lsl #3]
    a454:	601a      	str	r2, [r3, #0]
}
    a456:	bd38      	pop	{r3, r4, r5, pc}
    a458:	1fffb5c4 	.word	0x1fffb5c4
    a45c:	000144f0 	.word	0x000144f0
    a460:	1fffb5c0 	.word	0x1fffb5c0

0000a464 <serial3_set_tx>:
	if (opendrain) pin |= 128;
    a464:	b109      	cbz	r1, a46a <serial3_set_tx+0x6>
    a466:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	if (pin == tx_pin_num) return;
    a46a:	4a11      	ldr	r2, [pc, #68]	; (a4b0 <serial3_set_tx+0x4c>)
    a46c:	7813      	ldrb	r3, [r2, #0]
    a46e:	4283      	cmp	r3, r0
    a470:	d016      	beq.n	a4a0 <serial3_set_tx+0x3c>
{
    a472:	b410      	push	{r4}
	if ((SIM_SCGC4 & SIM_SCGC4_UART2)) {
    a474:	4c0f      	ldr	r4, [pc, #60]	; (a4b4 <serial3_set_tx+0x50>)
    a476:	6b64      	ldr	r4, [r4, #52]	; 0x34
    a478:	04e4      	lsls	r4, r4, #19
    a47a:	d50e      	bpl.n	a49a <serial3_set_tx+0x36>
		switch (tx_pin_num & 127) {
    a47c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a480:	2b08      	cmp	r3, #8
    a482:	d102      	bne.n	a48a <serial3_set_tx+0x26>
			case 8:  CORE_PIN8_CONFIG = 0; break; // PTD3
    a484:	4b0c      	ldr	r3, [pc, #48]	; (a4b8 <serial3_set_tx+0x54>)
    a486:	2400      	movs	r4, #0
    a488:	60dc      	str	r4, [r3, #12]
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    a48a:	2900      	cmp	r1, #0
		switch (pin & 127) {
    a48c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    a490:	bf14      	ite	ne
    a492:	2160      	movne	r1, #96	; 0x60
    a494:	2144      	moveq	r1, #68	; 0x44
		switch (pin & 127) {
    a496:	2b08      	cmp	r3, #8
    a498:	d003      	beq.n	a4a2 <serial3_set_tx+0x3e>
	tx_pin_num = pin;
    a49a:	7010      	strb	r0, [r2, #0]
}
    a49c:	bc10      	pop	{r4}
    a49e:	4770      	bx	lr
    a4a0:	4770      	bx	lr
			case 8:  CORE_PIN8_CONFIG = cfg | PORT_PCR_MUX(3); break;
    a4a2:	4b05      	ldr	r3, [pc, #20]	; (a4b8 <serial3_set_tx+0x54>)
    a4a4:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    a4a8:	60d9      	str	r1, [r3, #12]
	tx_pin_num = pin;
    a4aa:	7010      	strb	r0, [r2, #0]
}
    a4ac:	bc10      	pop	{r4}
    a4ae:	4770      	bx	lr
    a4b0:	1fff8808 	.word	0x1fff8808
    a4b4:	40048000 	.word	0x40048000
    a4b8:	4004c000 	.word	0x4004c000

0000a4bc <serial3_set_rx>:
}
    a4bc:	4770      	bx	lr
    a4be:	bf00      	nop

0000a4c0 <serial3_set_rts>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    a4c0:	4b0d      	ldr	r3, [pc, #52]	; (a4f8 <serial3_set_rts+0x38>)
    a4c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a4c4:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    a4c8:	d013      	beq.n	a4f2 <serial3_set_rts+0x32>
	if (pin < CORE_NUM_DIGITAL) {
    a4ca:	2821      	cmp	r0, #33	; 0x21
    a4cc:	d903      	bls.n	a4d6 <serial3_set_rts+0x16>
		rts_pin = NULL;
    a4ce:	4b0b      	ldr	r3, [pc, #44]	; (a4fc <serial3_set_rts+0x3c>)
    a4d0:	2000      	movs	r0, #0
    a4d2:	6018      	str	r0, [r3, #0]
		return 0;
    a4d4:	4770      	bx	lr
		rts_pin = portOutputRegister(pin);
    a4d6:	4b0a      	ldr	r3, [pc, #40]	; (a500 <serial3_set_rts+0x40>)
{
    a4d8:	b510      	push	{r4, lr}
		rts_pin = portOutputRegister(pin);
    a4da:	4c08      	ldr	r4, [pc, #32]	; (a4fc <serial3_set_rts+0x3c>)
    a4dc:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    a4e0:	6023      	str	r3, [r4, #0]
		pinMode(pin, OUTPUT);
    a4e2:	2101      	movs	r1, #1
    a4e4:	f7ff f90c 	bl	9700 <pinMode>
		rts_assert();
    a4e8:	6823      	ldr	r3, [r4, #0]
    a4ea:	2200      	movs	r2, #0
    a4ec:	701a      	strb	r2, [r3, #0]
	return 1;
    a4ee:	2001      	movs	r0, #1
}
    a4f0:	bd10      	pop	{r4, pc}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    a4f2:	4618      	mov	r0, r3
}
    a4f4:	4770      	bx	lr
    a4f6:	bf00      	nop
    a4f8:	40048000 	.word	0x40048000
    a4fc:	1fffb570 	.word	0x1fffb570
    a500:	000144f0 	.word	0x000144f0

0000a504 <serial3_set_cts>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    a504:	4b0c      	ldr	r3, [pc, #48]	; (a538 <serial3_set_cts+0x34>)
    a506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a508:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    a50c:	d012      	beq.n	a534 <serial3_set_cts+0x30>
	if (pin == 14) {
    a50e:	280e      	cmp	r0, #14
    a510:	d109      	bne.n	a526 <serial3_set_cts+0x22>
		CORE_PIN14_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    a512:	4b0a      	ldr	r3, [pc, #40]	; (a53c <serial3_set_cts+0x38>)
	UART2_MODEM |= UART_MODEM_TXCTSE;
    a514:	4a0a      	ldr	r2, [pc, #40]	; (a540 <serial3_set_cts+0x3c>)
		CORE_PIN14_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    a516:	f240 3102 	movw	r1, #770	; 0x302
    a51a:	6059      	str	r1, [r3, #4]
	UART2_MODEM |= UART_MODEM_TXCTSE;
    a51c:	7b53      	ldrb	r3, [r2, #13]
	return 1;
    a51e:	2001      	movs	r0, #1
	UART2_MODEM |= UART_MODEM_TXCTSE;
    a520:	4303      	orrs	r3, r0
    a522:	7353      	strb	r3, [r2, #13]
	return 1;
    a524:	4770      	bx	lr
		UART2_MODEM &= ~UART_MODEM_TXCTSE;
    a526:	4a06      	ldr	r2, [pc, #24]	; (a540 <serial3_set_cts+0x3c>)
    a528:	7b53      	ldrb	r3, [r2, #13]
    a52a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		return 0;
    a52e:	2000      	movs	r0, #0
		UART2_MODEM &= ~UART_MODEM_TXCTSE;
    a530:	7353      	strb	r3, [r2, #13]
		return 0;
    a532:	4770      	bx	lr
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    a534:	4618      	mov	r0, r3
}
    a536:	4770      	bx	lr
    a538:	40048000 	.word	0x40048000
    a53c:	4004c000 	.word	0x4004c000
    a540:	4006c000 	.word	0x4006c000

0000a544 <serial3_putchar>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    a544:	4b03      	ldr	r3, [pc, #12]	; (a554 <serial3_putchar+0x10>)
    a546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a548:	04db      	lsls	r3, r3, #19
    a54a:	d501      	bpl.n	a550 <serial3_putchar+0xc>
    a54c:	f7ff be28 	b.w	a1a0 <serial3_putchar.part.0>
}
    a550:	4770      	bx	lr
    a552:	bf00      	nop
    a554:	40048000 	.word	0x40048000

0000a558 <serial3_write>:

void serial3_write(const void *buf, unsigned int count)
{
	const uint8_t *p = (const uint8_t *)buf;
	while (count-- > 0) serial3_putchar(*p++);
    a558:	b179      	cbz	r1, a57a <serial3_write+0x22>
{
    a55a:	b570      	push	{r4, r5, r6, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    a55c:	4e07      	ldr	r6, [pc, #28]	; (a57c <serial3_write+0x24>)
    a55e:	4604      	mov	r4, r0
    a560:	1845      	adds	r5, r0, r1
    a562:	6b73      	ldr	r3, [r6, #52]	; 0x34
    a564:	04db      	lsls	r3, r3, #19
	while (count-- > 0) serial3_putchar(*p++);
    a566:	f104 0401 	add.w	r4, r4, #1
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    a56a:	d503      	bpl.n	a574 <serial3_write+0x1c>
    a56c:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    a570:	f7ff fe16 	bl	a1a0 <serial3_putchar.part.0>
	while (count-- > 0) serial3_putchar(*p++);
    a574:	42ac      	cmp	r4, r5
    a576:	d1f4      	bne.n	a562 <serial3_write+0xa>
}
    a578:	bd70      	pop	{r4, r5, r6, pc}
    a57a:	4770      	bx	lr
    a57c:	40048000 	.word	0x40048000

0000a580 <serial3_flush>:

void serial3_flush(void)
{
    a580:	b510      	push	{r4, lr}
	while (transmitting) yield(); // wait
    a582:	4c04      	ldr	r4, [pc, #16]	; (a594 <serial3_flush+0x14>)
    a584:	7823      	ldrb	r3, [r4, #0]
    a586:	b123      	cbz	r3, a592 <serial3_flush+0x12>
    a588:	f000 fffe 	bl	b588 <yield>
    a58c:	7823      	ldrb	r3, [r4, #0]
    a58e:	2b00      	cmp	r3, #0
    a590:	d1fa      	bne.n	a588 <serial3_flush+0x8>
}
    a592:	bd10      	pop	{r4, pc}
    a594:	1fffb5c4 	.word	0x1fffb5c4

0000a598 <serial3_write_buffer_free>:

int serial3_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    a598:	4a08      	ldr	r2, [pc, #32]	; (a5bc <serial3_write_buffer_free+0x24>)
	tail = tx_buffer_tail;
    a59a:	4b09      	ldr	r3, [pc, #36]	; (a5c0 <serial3_write_buffer_free+0x28>)
	head = tx_buffer_head;
    a59c:	7811      	ldrb	r1, [r2, #0]
	tail = tx_buffer_tail;
    a59e:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    a5a0:	4291      	cmp	r1, r2
	head = tx_buffer_head;
    a5a2:	b2c8      	uxtb	r0, r1
	tail = tx_buffer_tail;
    a5a4:	b2d3      	uxtb	r3, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    a5a6:	d202      	bcs.n	a5ae <serial3_write_buffer_free+0x16>
	return tail - head - 1;
    a5a8:	3b01      	subs	r3, #1
    a5aa:	1a18      	subs	r0, r3, r0
}
    a5ac:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    a5ae:	4a05      	ldr	r2, [pc, #20]	; (a5c4 <serial3_write_buffer_free+0x2c>)
    a5b0:	6812      	ldr	r2, [r2, #0]
    a5b2:	3a01      	subs	r2, #1
    a5b4:	4413      	add	r3, r2
    a5b6:	1a18      	subs	r0, r3, r0
    a5b8:	4770      	bx	lr
    a5ba:	bf00      	nop
    a5bc:	1fffb5f0 	.word	0x1fffb5f0
    a5c0:	1fffb5f8 	.word	0x1fffb5f8
    a5c4:	1fff8804 	.word	0x1fff8804

0000a5c8 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a5c8:	4a06      	ldr	r2, [pc, #24]	; (a5e4 <serial3_available+0x1c>)
	tail = rx_buffer_tail;
    a5ca:	4b07      	ldr	r3, [pc, #28]	; (a5e8 <serial3_available+0x20>)
	head = rx_buffer_head;
    a5cc:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    a5ce:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return head - tail;
    a5d0:	4291      	cmp	r1, r2
	tail = rx_buffer_tail;
    a5d2:	b2d0      	uxtb	r0, r2
	return rx_buffer_total_size_ + head - tail;
    a5d4:	bf3c      	itt	cc
    a5d6:	4a05      	ldrcc	r2, [pc, #20]	; (a5ec <serial3_available+0x24>)
    a5d8:	6812      	ldrcc	r2, [r2, #0]
	head = rx_buffer_head;
    a5da:	b2cb      	uxtb	r3, r1
	return rx_buffer_total_size_ + head - tail;
    a5dc:	bf38      	it	cc
    a5de:	189b      	addcc	r3, r3, r2
    a5e0:	1a18      	subs	r0, r3, r0
}
    a5e2:	4770      	bx	lr
    a5e4:	1fffb5b4 	.word	0x1fffb5b4
    a5e8:	1fffb5bc 	.word	0x1fffb5bc
    a5ec:	1fff8800 	.word	0x1fff8800

0000a5f0 <serial3_getchar>:
int serial3_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    a5f0:	4b1b      	ldr	r3, [pc, #108]	; (a660 <serial3_getchar+0x70>)
	tail = rx_buffer_tail;
    a5f2:	491c      	ldr	r1, [pc, #112]	; (a664 <serial3_getchar+0x74>)
	head = rx_buffer_head;
    a5f4:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    a5f6:	780b      	ldrb	r3, [r1, #0]
	if (head == tail) return -1;
    a5f8:	429a      	cmp	r2, r3
    a5fa:	d02e      	beq.n	a65a <serial3_getchar+0x6a>
{
    a5fc:	b510      	push	{r4, lr}
    a5fe:	fa5f fe82 	uxtb.w	lr, r2
	if (++tail >= rx_buffer_total_size_) tail = 0;
    a602:	4a19      	ldr	r2, [pc, #100]	; (a668 <serial3_getchar+0x78>)
    a604:	b2d8      	uxtb	r0, r3
    a606:	6812      	ldr	r2, [r2, #0]
    a608:	1c43      	adds	r3, r0, #1
    a60a:	429a      	cmp	r2, r3
    a60c:	d919      	bls.n	a642 <serial3_getchar+0x52>
	if (tail < SERIAL3_RX_BUFFER_SIZE) {
    a60e:	2b3f      	cmp	r3, #63	; 0x3f
    a610:	d81b      	bhi.n	a64a <serial3_getchar+0x5a>
		c = rx_buffer[tail];
	} else {
		c = rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
	}
	rx_buffer_tail = tail;
    a612:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer[tail];
    a616:	4815      	ldr	r0, [pc, #84]	; (a66c <serial3_getchar+0x7c>)
    a618:	5cc0      	ldrb	r0, [r0, r3]
    a61a:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    a61c:	f881 c000 	strb.w	ip, [r1]
	if (rts_pin) {
    a620:	4913      	ldr	r1, [pc, #76]	; (a670 <serial3_getchar+0x80>)
    a622:	6809      	ldr	r1, [r1, #0]
    a624:	b161      	cbz	r1, a640 <serial3_getchar+0x50>
		int avail;
		if (head >= tail) avail = head - tail;
    a626:	459e      	cmp	lr, r3
		else avail = rx_buffer_total_size_ + head - tail;
    a628:	bf3c      	itt	cc
    a62a:	4472      	addcc	r2, lr
    a62c:	1ad3      	subcc	r3, r2, r3
		if (avail <= rts_low_watermark_) rts_assert();
    a62e:	4a11      	ldr	r2, [pc, #68]	; (a674 <serial3_getchar+0x84>)
    a630:	6812      	ldr	r2, [r2, #0]
		if (head >= tail) avail = head - tail;
    a632:	bf28      	it	cs
    a634:	ebae 0303 	subcs.w	r3, lr, r3
		if (avail <= rts_low_watermark_) rts_assert();
    a638:	429a      	cmp	r2, r3
    a63a:	d301      	bcc.n	a640 <serial3_getchar+0x50>
    a63c:	2300      	movs	r3, #0
    a63e:	700b      	strb	r3, [r1, #0]
	}
	return c;
}
    a640:	bd10      	pop	{r4, pc}
    a642:	f04f 0c00 	mov.w	ip, #0
	if (++tail >= rx_buffer_total_size_) tail = 0;
    a646:	4663      	mov	r3, ip
    a648:	e7e5      	b.n	a616 <serial3_getchar+0x26>
		c = rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
    a64a:	4c0b      	ldr	r4, [pc, #44]	; (a678 <serial3_getchar+0x88>)
    a64c:	383f      	subs	r0, #63	; 0x3f
    a64e:	6824      	ldr	r4, [r4, #0]
    a650:	5c20      	ldrb	r0, [r4, r0]
	rx_buffer_tail = tail;
    a652:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
    a656:	b2c0      	uxtb	r0, r0
    a658:	e7e0      	b.n	a61c <serial3_getchar+0x2c>
	if (head == tail) return -1;
    a65a:	f04f 30ff 	mov.w	r0, #4294967295
}
    a65e:	4770      	bx	lr
    a660:	1fffb5b4 	.word	0x1fffb5b4
    a664:	1fffb5bc 	.word	0x1fffb5bc
    a668:	1fff8800 	.word	0x1fff8800
    a66c:	1fffb574 	.word	0x1fffb574
    a670:	1fffb570 	.word	0x1fffb570
    a674:	1fff87fc 	.word	0x1fff87fc
    a678:	1fffb5b8 	.word	0x1fffb5b8

0000a67c <serial3_peek>:

int serial3_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a67c:	4a0d      	ldr	r2, [pc, #52]	; (a6b4 <serial3_peek+0x38>)
	tail = rx_buffer_tail;
    a67e:	4b0e      	ldr	r3, [pc, #56]	; (a6b8 <serial3_peek+0x3c>)
	head = rx_buffer_head;
    a680:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    a682:	781b      	ldrb	r3, [r3, #0]
	if (head == tail) return -1;
    a684:	4299      	cmp	r1, r3
	tail = rx_buffer_tail;
    a686:	b2da      	uxtb	r2, r3
	if (head == tail) return -1;
    a688:	d011      	beq.n	a6ae <serial3_peek+0x32>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    a68a:	490c      	ldr	r1, [pc, #48]	; (a6bc <serial3_peek+0x40>)
    a68c:	6809      	ldr	r1, [r1, #0]
    a68e:	1c53      	adds	r3, r2, #1
    a690:	4299      	cmp	r1, r3
    a692:	d907      	bls.n	a6a4 <serial3_peek+0x28>
	if (tail < SERIAL3_RX_BUFFER_SIZE) {
    a694:	2b3f      	cmp	r3, #63	; 0x3f
    a696:	d906      	bls.n	a6a6 <serial3_peek+0x2a>
		return rx_buffer[tail];
	}
	return rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
    a698:	4b09      	ldr	r3, [pc, #36]	; (a6c0 <serial3_peek+0x44>)
    a69a:	3a3f      	subs	r2, #63	; 0x3f
    a69c:	681b      	ldr	r3, [r3, #0]
    a69e:	5c98      	ldrb	r0, [r3, r2]
    a6a0:	b2c0      	uxtb	r0, r0
    a6a2:	4770      	bx	lr
	if (++tail >= rx_buffer_total_size_) tail = 0;
    a6a4:	2300      	movs	r3, #0
		return rx_buffer[tail];
    a6a6:	4a07      	ldr	r2, [pc, #28]	; (a6c4 <serial3_peek+0x48>)
    a6a8:	5cd0      	ldrb	r0, [r2, r3]
    a6aa:	b2c0      	uxtb	r0, r0
    a6ac:	4770      	bx	lr
	if (head == tail) return -1;
    a6ae:	f04f 30ff 	mov.w	r0, #4294967295
}
    a6b2:	4770      	bx	lr
    a6b4:	1fffb5b4 	.word	0x1fffb5b4
    a6b8:	1fffb5bc 	.word	0x1fffb5bc
    a6bc:	1fff8800 	.word	0x1fff8800
    a6c0:	1fffb5b8 	.word	0x1fffb5b8
    a6c4:	1fffb574 	.word	0x1fffb574

0000a6c8 <serial3_clear>:

void serial3_clear(void)
{
	rx_buffer_head = rx_buffer_tail;
    a6c8:	4b05      	ldr	r3, [pc, #20]	; (a6e0 <serial3_clear+0x18>)
	if (rts_pin) rts_assert();
    a6ca:	4a06      	ldr	r2, [pc, #24]	; (a6e4 <serial3_clear+0x1c>)
	rx_buffer_head = rx_buffer_tail;
    a6cc:	781b      	ldrb	r3, [r3, #0]
    a6ce:	4906      	ldr	r1, [pc, #24]	; (a6e8 <serial3_clear+0x20>)
	if (rts_pin) rts_assert();
    a6d0:	6812      	ldr	r2, [r2, #0]
	rx_buffer_head = rx_buffer_tail;
    a6d2:	b2db      	uxtb	r3, r3
    a6d4:	700b      	strb	r3, [r1, #0]
	if (rts_pin) rts_assert();
    a6d6:	b10a      	cbz	r2, a6dc <serial3_clear+0x14>
    a6d8:	2300      	movs	r3, #0
    a6da:	7013      	strb	r3, [r2, #0]
}
    a6dc:	4770      	bx	lr
    a6de:	bf00      	nop
    a6e0:	1fffb5bc 	.word	0x1fffb5bc
    a6e4:	1fffb570 	.word	0x1fffb570
    a6e8:	1fffb5b4 	.word	0x1fffb5b4

0000a6ec <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    a6ec:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    a6ee:	4b3a      	ldr	r3, [pc, #232]	; (a7d8 <uart2_status_isr+0xec>)
    a6f0:	791a      	ldrb	r2, [r3, #4]
    a6f2:	0695      	lsls	r5, r2, #26
    a6f4:	d524      	bpl.n	a740 <uart2_status_isr+0x54>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    a6f6:	4d39      	ldr	r5, [pc, #228]	; (a7dc <uart2_status_isr+0xf0>)
		if (head >= rx_buffer_total_size_) head = 0;
    a6f8:	4939      	ldr	r1, [pc, #228]	; (a7e0 <uart2_status_isr+0xf4>)
			n = UART2_D;
    a6fa:	79db      	ldrb	r3, [r3, #7]
		head = rx_buffer_head + 1;
    a6fc:	782a      	ldrb	r2, [r5, #0]
		if (head >= rx_buffer_total_size_) head = 0;
    a6fe:	680c      	ldr	r4, [r1, #0]
			n = UART2_D;
    a700:	b2d8      	uxtb	r0, r3
		head = rx_buffer_head + 1;
    a702:	1c53      	adds	r3, r2, #1
		if (head >= rx_buffer_total_size_) head = 0;
    a704:	429c      	cmp	r4, r3
		head = rx_buffer_head + 1;
    a706:	b2d2      	uxtb	r2, r2
		if (head >= rx_buffer_total_size_) head = 0;
    a708:	d831      	bhi.n	a76e <uart2_status_isr+0x82>
		if (head != rx_buffer_tail) {
    a70a:	4b36      	ldr	r3, [pc, #216]	; (a7e4 <uart2_status_isr+0xf8>)
    a70c:	781a      	ldrb	r2, [r3, #0]
    a70e:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    a712:	b122      	cbz	r2, a71e <uart2_status_isr+0x32>
    a714:	2200      	movs	r2, #0
    a716:	4613      	mov	r3, r2
			if (head < SERIAL3_RX_BUFFER_SIZE) {
				rx_buffer[head] = n;
    a718:	4933      	ldr	r1, [pc, #204]	; (a7e8 <uart2_status_isr+0xfc>)
    a71a:	54c8      	strb	r0, [r1, r3]
			} else {
				rx_buffer_storage_[head-SERIAL3_RX_BUFFER_SIZE] = n;
			}

			rx_buffer_head = head;
    a71c:	702a      	strb	r2, [r5, #0]
		}
		if (rts_pin) {
    a71e:	4933      	ldr	r1, [pc, #204]	; (a7ec <uart2_status_isr+0x100>)
    a720:	6809      	ldr	r1, [r1, #0]
    a722:	b169      	cbz	r1, a740 <uart2_status_isr+0x54>
			int avail;
			tail = tx_buffer_tail;
    a724:	4a32      	ldr	r2, [pc, #200]	; (a7f0 <uart2_status_isr+0x104>)
    a726:	7810      	ldrb	r0, [r2, #0]
			if (head >= tail) avail = head - tail;
    a728:	4298      	cmp	r0, r3
			tail = tx_buffer_tail;
    a72a:	b2c2      	uxtb	r2, r0
			else avail = rx_buffer_total_size_ + head - tail;
    a72c:	bf8a      	itet	hi
    a72e:	1aa2      	subhi	r2, r4, r2
			if (head >= tail) avail = head - tail;
    a730:	1a9b      	subls	r3, r3, r2
			else avail = rx_buffer_total_size_ + head - tail;
    a732:	189b      	addhi	r3, r3, r2
			if (avail >= rts_high_watermark_) rts_deassert();
    a734:	4a2f      	ldr	r2, [pc, #188]	; (a7f4 <uart2_status_isr+0x108>)
    a736:	6812      	ldr	r2, [r2, #0]
    a738:	429a      	cmp	r2, r3
    a73a:	bf9c      	itt	ls
    a73c:	2301      	movls	r3, #1
    a73e:	700b      	strbls	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    a740:	4a25      	ldr	r2, [pc, #148]	; (a7d8 <uart2_status_isr+0xec>)
    a742:	78d3      	ldrb	r3, [r2, #3]
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    a744:	061c      	lsls	r4, r3, #24
	c = UART2_C2;
    a746:	b2d9      	uxtb	r1, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    a748:	d41e      	bmi.n	a788 <uart2_status_isr+0x9c>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    a74a:	064a      	lsls	r2, r1, #25
    a74c:	d50d      	bpl.n	a76a <uart2_status_isr+0x7e>
    a74e:	4b22      	ldr	r3, [pc, #136]	; (a7d8 <uart2_status_isr+0xec>)
    a750:	791b      	ldrb	r3, [r3, #4]
    a752:	065b      	lsls	r3, r3, #25
    a754:	d509      	bpl.n	a76a <uart2_status_isr+0x7e>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    a756:	4b28      	ldr	r3, [pc, #160]	; (a7f8 <uart2_status_isr+0x10c>)
		transmitting = 0;
    a758:	4928      	ldr	r1, [pc, #160]	; (a7fc <uart2_status_isr+0x110>)
		if (transmit_pin) transmit_deassert();
    a75a:	681b      	ldr	r3, [r3, #0]
		transmitting = 0;
    a75c:	2200      	movs	r2, #0
    a75e:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    a760:	b103      	cbz	r3, a764 <uart2_status_isr+0x78>
    a762:	701a      	strb	r2, [r3, #0]
			reg &= ~UART_C3_TXDIR;
			UART2_C3 = reg;
			__enable_irq();
		}
		#endif
		UART2_C2 = C2_TX_INACTIVE;
    a764:	4b1c      	ldr	r3, [pc, #112]	; (a7d8 <uart2_status_isr+0xec>)
    a766:	222c      	movs	r2, #44	; 0x2c
    a768:	70da      	strb	r2, [r3, #3]
	}
}
    a76a:	bc30      	pop	{r4, r5}
    a76c:	4770      	bx	lr
		if (head != rx_buffer_tail) {
    a76e:	491d      	ldr	r1, [pc, #116]	; (a7e4 <uart2_status_isr+0xf8>)
    a770:	7809      	ldrb	r1, [r1, #0]
    a772:	4299      	cmp	r1, r3
    a774:	d0d3      	beq.n	a71e <uart2_status_isr+0x32>
			if (head < SERIAL3_RX_BUFFER_SIZE) {
    a776:	2b3f      	cmp	r3, #63	; 0x3f
    a778:	d92c      	bls.n	a7d4 <uart2_status_isr+0xe8>
				rx_buffer_storage_[head-SERIAL3_RX_BUFFER_SIZE] = n;
    a77a:	4921      	ldr	r1, [pc, #132]	; (a800 <uart2_status_isr+0x114>)
    a77c:	3a3f      	subs	r2, #63	; 0x3f
    a77e:	6809      	ldr	r1, [r1, #0]
    a780:	5488      	strb	r0, [r1, r2]
			rx_buffer_head = head;
    a782:	b2da      	uxtb	r2, r3
    a784:	702a      	strb	r2, [r5, #0]
    a786:	e7ca      	b.n	a71e <uart2_status_isr+0x32>
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    a788:	7913      	ldrb	r3, [r2, #4]
    a78a:	0618      	lsls	r0, r3, #24
    a78c:	d5dd      	bpl.n	a74a <uart2_status_isr+0x5e>
		head = tx_buffer_head;
    a78e:	4b1d      	ldr	r3, [pc, #116]	; (a804 <uart2_status_isr+0x118>)
		tail = tx_buffer_tail;
    a790:	4817      	ldr	r0, [pc, #92]	; (a7f0 <uart2_status_isr+0x104>)
		head = tx_buffer_head;
    a792:	781d      	ldrb	r5, [r3, #0]
		tail = tx_buffer_tail;
    a794:	7803      	ldrb	r3, [r0, #0]
		if (head == tail) {
    a796:	429d      	cmp	r5, r3
		tail = tx_buffer_tail;
    a798:	b2dc      	uxtb	r4, r3
		if (head == tail) {
    a79a:	d008      	beq.n	a7ae <uart2_status_isr+0xc2>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    a79c:	4a1a      	ldr	r2, [pc, #104]	; (a808 <uart2_status_isr+0x11c>)
    a79e:	6812      	ldr	r2, [r2, #0]
    a7a0:	1c63      	adds	r3, r4, #1
    a7a2:	429a      	cmp	r2, r3
    a7a4:	d906      	bls.n	a7b4 <uart2_status_isr+0xc8>
			if (tail < SERIAL3_TX_BUFFER_SIZE) {
    a7a6:	2b27      	cmp	r3, #39	; 0x27
    a7a8:	d80d      	bhi.n	a7c6 <uart2_status_isr+0xda>
			tx_buffer_tail = tail;
    a7aa:	b2da      	uxtb	r2, r3
    a7ac:	e004      	b.n	a7b8 <uart2_status_isr+0xcc>
			UART2_C2 = C2_TX_COMPLETING;
    a7ae:	236c      	movs	r3, #108	; 0x6c
    a7b0:	70d3      	strb	r3, [r2, #3]
    a7b2:	e7ca      	b.n	a74a <uart2_status_isr+0x5e>
    a7b4:	2200      	movs	r2, #0
			if (++tail >= tx_buffer_total_size_) tail = 0;
    a7b6:	4613      	mov	r3, r2
				n = tx_buffer[tail];
    a7b8:	4c14      	ldr	r4, [pc, #80]	; (a80c <uart2_status_isr+0x120>)
    a7ba:	5ce3      	ldrb	r3, [r4, r3]
    a7bc:	b2db      	uxtb	r3, r3
			UART2_D = n;
    a7be:	4c06      	ldr	r4, [pc, #24]	; (a7d8 <uart2_status_isr+0xec>)
    a7c0:	71e3      	strb	r3, [r4, #7]
			tx_buffer_tail = tail;
    a7c2:	7002      	strb	r2, [r0, #0]
    a7c4:	e7c1      	b.n	a74a <uart2_status_isr+0x5e>
				n = tx_buffer_storage_[tail-SERIAL3_TX_BUFFER_SIZE];
    a7c6:	4a12      	ldr	r2, [pc, #72]	; (a810 <uart2_status_isr+0x124>)
    a7c8:	3c27      	subs	r4, #39	; 0x27
    a7ca:	6815      	ldr	r5, [r2, #0]
			tx_buffer_tail = tail;
    a7cc:	b2da      	uxtb	r2, r3
				n = tx_buffer_storage_[tail-SERIAL3_TX_BUFFER_SIZE];
    a7ce:	5d2b      	ldrb	r3, [r5, r4]
    a7d0:	b2db      	uxtb	r3, r3
    a7d2:	e7f4      	b.n	a7be <uart2_status_isr+0xd2>
			rx_buffer_head = head;
    a7d4:	b2da      	uxtb	r2, r3
    a7d6:	e79f      	b.n	a718 <uart2_status_isr+0x2c>
    a7d8:	4006c000 	.word	0x4006c000
    a7dc:	1fffb5b4 	.word	0x1fffb5b4
    a7e0:	1fff8800 	.word	0x1fff8800
    a7e4:	1fffb5bc 	.word	0x1fffb5bc
    a7e8:	1fffb574 	.word	0x1fffb574
    a7ec:	1fffb570 	.word	0x1fffb570
    a7f0:	1fffb5f8 	.word	0x1fffb5f8
    a7f4:	1fff87f8 	.word	0x1fff87f8
    a7f8:	1fffb5c0 	.word	0x1fffb5c0
    a7fc:	1fffb5c4 	.word	0x1fffb5c4
    a800:	1fffb5b8 	.word	0x1fffb5b8
    a804:	1fffb5f0 	.word	0x1fffb5f0
    a808:	1fff8804 	.word	0x1fff8804
    a80c:	1fffb5c8 	.word	0x1fffb5c8
    a810:	1fffb5f4 	.word	0x1fffb5f4

0000a814 <serial3_add_memory_for_read>:

void serial3_add_memory_for_read(void *buffer, size_t length)
{
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    a814:	4b09      	ldr	r3, [pc, #36]	; (a83c <serial3_add_memory_for_read+0x28>)
{
    a816:	b410      	push	{r4}
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    a818:	6018      	str	r0, [r3, #0]
	if (buffer) {
    a81a:	b160      	cbz	r0, a836 <serial3_add_memory_for_read+0x22>
		rx_buffer_total_size_ = SERIAL3_RX_BUFFER_SIZE + length;
    a81c:	f101 0440 	add.w	r4, r1, #64	; 0x40
	} else {
		rx_buffer_total_size_ = SERIAL3_RX_BUFFER_SIZE;
	} 

	rts_low_watermark_ = RTS_LOW_WATERMARK + length;
    a820:	4b07      	ldr	r3, [pc, #28]	; (a840 <serial3_add_memory_for_read+0x2c>)
    a822:	4808      	ldr	r0, [pc, #32]	; (a844 <serial3_add_memory_for_read+0x30>)
    a824:	f101 021a 	add.w	r2, r1, #26
    a828:	601a      	str	r2, [r3, #0]
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    a82a:	4b07      	ldr	r3, [pc, #28]	; (a848 <serial3_add_memory_for_read+0x34>)
    a82c:	6004      	str	r4, [r0, #0]
    a82e:	3128      	adds	r1, #40	; 0x28
}
    a830:	bc10      	pop	{r4}
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    a832:	6019      	str	r1, [r3, #0]
}
    a834:	4770      	bx	lr
		rx_buffer_total_size_ = SERIAL3_RX_BUFFER_SIZE;
    a836:	2440      	movs	r4, #64	; 0x40
    a838:	e7f2      	b.n	a820 <serial3_add_memory_for_read+0xc>
    a83a:	bf00      	nop
    a83c:	1fffb5b8 	.word	0x1fffb5b8
    a840:	1fff87fc 	.word	0x1fff87fc
    a844:	1fff8800 	.word	0x1fff8800
    a848:	1fff87f8 	.word	0x1fff87f8

0000a84c <serial3_add_memory_for_write>:

void serial3_add_memory_for_write(void *buffer, size_t length)
{
	tx_buffer_storage_ = (BUFTYPE*)buffer;
    a84c:	4b05      	ldr	r3, [pc, #20]	; (a864 <serial3_add_memory_for_write+0x18>)
    a84e:	6018      	str	r0, [r3, #0]
	if (buffer) {
    a850:	b118      	cbz	r0, a85a <serial3_add_memory_for_write+0xe>
		tx_buffer_total_size_ = SERIAL3_TX_BUFFER_SIZE + length;
    a852:	4b05      	ldr	r3, [pc, #20]	; (a868 <serial3_add_memory_for_write+0x1c>)
    a854:	3128      	adds	r1, #40	; 0x28
    a856:	6019      	str	r1, [r3, #0]
	} else {
		tx_buffer_total_size_ = SERIAL3_TX_BUFFER_SIZE;
	} 
}
    a858:	4770      	bx	lr
    a85a:	4b03      	ldr	r3, [pc, #12]	; (a868 <serial3_add_memory_for_write+0x1c>)
		tx_buffer_total_size_ = SERIAL3_TX_BUFFER_SIZE;
    a85c:	2128      	movs	r1, #40	; 0x28
    a85e:	6019      	str	r1, [r3, #0]
}
    a860:	4770      	bx	lr
    a862:	bf00      	nop
    a864:	1fffb5f4 	.word	0x1fffb5f4
    a868:	1fff8804 	.word	0x1fff8804

0000a86c <serialEvent2()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent2() __attribute__((weak));
void serialEvent2() {}		// No use calling this so disable if called...
    a86c:	4770      	bx	lr
    a86e:	bf00      	nop

0000a870 <serialEvent3()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent3() __attribute__((weak));
void serialEvent3() {}		// No use calling this so disable if called...
    a870:	4770      	bx	lr
    a872:	bf00      	nop

0000a874 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    a874:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    a876:	2b03      	cmp	r3, #3
    a878:	d817      	bhi.n	a8aa <usb_rx+0x36>
	__disable_irq();
    a87a:	b672      	cpsid	i
	ret = rx_first[endpoint];
    a87c:	490c      	ldr	r1, [pc, #48]	; (a8b0 <usb_rx+0x3c>)
    a87e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    a882:	b180      	cbz	r0, a8a6 <usb_rx+0x32>
{
    a884:	b410      	push	{r4}
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    a886:	4c0b      	ldr	r4, [pc, #44]	; (a8b4 <usb_rx+0x40>)
    a888:	f8b0 c000 	ldrh.w	ip, [r0]
    a88c:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
    a890:	eba2 020c 	sub.w	r2, r2, ip
		rx_first[endpoint] = ret->next;
    a894:	f8d0 c004 	ldr.w	ip, [r0, #4]
    a898:	f841 c023 	str.w	ip, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    a89c:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    a8a0:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    a8a2:	bc10      	pop	{r4}
    a8a4:	4770      	bx	lr
	__enable_irq();
    a8a6:	b662      	cpsie	i
}
    a8a8:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    a8aa:	2000      	movs	r0, #0
    a8ac:	4770      	bx	lr
    a8ae:	bf00      	nop
    a8b0:	1fffb68c 	.word	0x1fffb68c
    a8b4:	1fffb6dc 	.word	0x1fffb6dc

0000a8b8 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    a8b8:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    a8ba:	2803      	cmp	r0, #3
    a8bc:	d80b      	bhi.n	a8d6 <usb_tx_packet_count+0x1e>
	__disable_irq();
    a8be:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    a8c0:	4b07      	ldr	r3, [pc, #28]	; (a8e0 <usb_tx_packet_count+0x28>)
    a8c2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    a8c6:	b143      	cbz	r3, a8da <usb_tx_packet_count+0x22>
	uint32_t count=0;
    a8c8:	2000      	movs	r0, #0
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    a8ca:	685b      	ldr	r3, [r3, #4]
    a8cc:	3001      	adds	r0, #1
    a8ce:	2b00      	cmp	r3, #0
    a8d0:	d1fb      	bne.n	a8ca <usb_tx_packet_count+0x12>
	__enable_irq();
    a8d2:	b662      	cpsie	i
	return count;
    a8d4:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return 0;
    a8d6:	2000      	movs	r0, #0
}
    a8d8:	4770      	bx	lr
	uint32_t count=0;
    a8da:	4618      	mov	r0, r3
    a8dc:	e7f9      	b.n	a8d2 <usb_tx_packet_count+0x1a>
    a8de:	bf00      	nop
    a8e0:	1fffb6b4 	.word	0x1fffb6b4

0000a8e4 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    a8e4:	b410      	push	{r4}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    a8e6:	b672      	cpsid	i
	cfg = usb_endpoint_config_table;
    a8e8:	4a19      	ldr	r2, [pc, #100]	; (a950 <usb_rx_memory+0x6c>)
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    a8ea:	4c1a      	ldr	r4, [pc, #104]	; (a954 <usb_rx_memory+0x70>)
	__disable_irq();
    a8ec:	2304      	movs	r3, #4
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    a8ee:	f812 1b01 	ldrb.w	r1, [r2], #1
    a8f2:	0709      	lsls	r1, r1, #28
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    a8f4:	f043 0c01 	orr.w	ip, r3, #1
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    a8f8:	d505      	bpl.n	a906 <usb_rx_memory+0x22>
			if (table[index(i, RX, EVEN)].desc == 0) {
    a8fa:	f854 1033 	ldr.w	r1, [r4, r3, lsl #3]
    a8fe:	b161      	cbz	r1, a91a <usb_rx_memory+0x36>
			if (table[index(i, RX, ODD)].desc == 0) {
    a900:	f854 103c 	ldr.w	r1, [r4, ip, lsl #3]
    a904:	b1b9      	cbz	r1, a936 <usb_rx_memory+0x52>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    a906:	3304      	adds	r3, #4
    a908:	2b14      	cmp	r3, #20
    a90a:	d1f0      	bne.n	a8ee <usb_rx_memory+0xa>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    a90c:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    a90e:	4b12      	ldr	r3, [pc, #72]	; (a958 <usb_rx_memory+0x74>)
    a910:	2200      	movs	r2, #0
    a912:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    a914:	bc10      	pop	{r4}
	usb_free(packet);
    a916:	f000 bc9b 	b.w	b250 <usb_free>
				usb_rx_memory_needed--;
    a91a:	490f      	ldr	r1, [pc, #60]	; (a958 <usb_rx_memory+0x74>)
				table[index(i, RX, EVEN)].addr = packet->buf;
    a91c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    a920:	3008      	adds	r0, #8
    a922:	6050      	str	r0, [r2, #4]
				usb_rx_memory_needed--;
    a924:	780a      	ldrb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a926:	480d      	ldr	r0, [pc, #52]	; (a95c <usb_rx_memory+0x78>)
    a928:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
				usb_rx_memory_needed--;
    a92c:	3a01      	subs	r2, #1
    a92e:	700a      	strb	r2, [r1, #0]
				__enable_irq();
    a930:	b662      	cpsie	i
}
    a932:	bc10      	pop	{r4}
    a934:	4770      	bx	lr
				usb_rx_memory_needed--;
    a936:	4a08      	ldr	r2, [pc, #32]	; (a958 <usb_rx_memory+0x74>)
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a938:	4909      	ldr	r1, [pc, #36]	; (a960 <usb_rx_memory+0x7c>)
				table[index(i, RX, ODD)].addr = packet->buf;
    a93a:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
    a93e:	3008      	adds	r0, #8
    a940:	6058      	str	r0, [r3, #4]
				usb_rx_memory_needed--;
    a942:	7813      	ldrb	r3, [r2, #0]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a944:	f844 103c 	str.w	r1, [r4, ip, lsl #3]
				usb_rx_memory_needed--;
    a948:	3b01      	subs	r3, #1
    a94a:	7013      	strb	r3, [r2, #0]
				__enable_irq();
    a94c:	b662      	cpsie	i
				return;
    a94e:	e7f0      	b.n	a932 <usb_rx_memory+0x4e>
    a950:	0001467c 	.word	0x0001467c
    a954:	1fff8000 	.word	0x1fff8000
    a958:	1fffb6e4 	.word	0x1fffb6e4
    a95c:	00400088 	.word	0x00400088
    a960:	004000c8 	.word	0x004000c8

0000a964 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    a964:	1e42      	subs	r2, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    a966:	2a03      	cmp	r2, #3
    a968:	d80e      	bhi.n	a988 <usb_tx+0x24>
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    a96a:	4b1c      	ldr	r3, [pc, #112]	; (a9dc <usb_tx+0x78>)
    a96c:	0140      	lsls	r0, r0, #5
    a96e:	f040 0010 	orr.w	r0, r0, #16
{
    a972:	b410      	push	{r4}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    a974:	4403      	add	r3, r0
	__disable_irq();
    a976:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    a978:	4c19      	ldr	r4, [pc, #100]	; (a9e0 <usb_tx+0x7c>)
    a97a:	5ca0      	ldrb	r0, [r4, r2]
    a97c:	2803      	cmp	r0, #3
    a97e:	d81c      	bhi.n	a9ba <usb_tx+0x56>
    a980:	e8df f000 	tbb	[pc, r0]
    a984:	18031513 	.word	0x18031513
    a988:	4770      	bx	lr
    a98a:	2005      	movs	r0, #5
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    a98c:	54a0      	strb	r0, [r4, r2]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    a98e:	f013 0f08 	tst.w	r3, #8
    a992:	8808      	ldrh	r0, [r1, #0]
    a994:	bf14      	ite	ne
    a996:	22c8      	movne	r2, #200	; 0xc8
    a998:	2288      	moveq	r2, #136	; 0x88
	b->addr = packet->buf;
    a99a:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    a99c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
	b->addr = packet->buf;
    a9a0:	6059      	str	r1, [r3, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    a9a2:	601a      	str	r2, [r3, #0]
	__enable_irq();
    a9a4:	b662      	cpsie	i
}
    a9a6:	bc10      	pop	{r4}
    a9a8:	4770      	bx	lr
		next = TX_STATE_ODD_FREE;
    a9aa:	2003      	movs	r0, #3
    a9ac:	e7ee      	b.n	a98c <usb_tx+0x28>
		b++;
    a9ae:	3308      	adds	r3, #8
		next = TX_STATE_EVEN_FREE;
    a9b0:	2002      	movs	r0, #2
		break;
    a9b2:	e7eb      	b.n	a98c <usb_tx+0x28>
		b++;
    a9b4:	3308      	adds	r3, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    a9b6:	2004      	movs	r0, #4
		break;
    a9b8:	e7e8      	b.n	a98c <usb_tx+0x28>
		if (tx_first[endpoint] == NULL) {
    a9ba:	4b0a      	ldr	r3, [pc, #40]	; (a9e4 <usb_tx+0x80>)
    a9bc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    a9c0:	b138      	cbz	r0, a9d2 <usb_tx+0x6e>
			tx_last[endpoint]->next = packet;
    a9c2:	4b09      	ldr	r3, [pc, #36]	; (a9e8 <usb_tx+0x84>)
    a9c4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    a9c8:	6041      	str	r1, [r0, #4]
		tx_last[endpoint] = packet;
    a9ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		__enable_irq();
    a9ce:	b662      	cpsie	i
		return;
    a9d0:	e7e9      	b.n	a9a6 <usb_tx+0x42>
			tx_first[endpoint] = packet;
    a9d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    a9d6:	4b04      	ldr	r3, [pc, #16]	; (a9e8 <usb_tx+0x84>)
    a9d8:	e7f7      	b.n	a9ca <usb_tx+0x66>
    a9da:	bf00      	nop
    a9dc:	1fff8000 	.word	0x1fff8000
    a9e0:	1fffb6d4 	.word	0x1fffb6d4
    a9e4:	1fffb6b4 	.word	0x1fffb6b4
    a9e8:	1fffb6c4 	.word	0x1fffb6c4

0000a9ec <usb_isr>:
}



void usb_isr(void)
{
    a9ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    a9f0:	f8df a2cc 	ldr.w	sl, [pc, #716]	; acc0 <usb_isr+0x2d4>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    a9f4:	f8df b2cc 	ldr.w	fp, [pc, #716]	; acc4 <usb_isr+0x2d8>
{
    a9f8:	b085      	sub	sp, #20
    a9fa:	e03d      	b.n	aa78 <usb_isr+0x8c>
			bdt_t *b = stat2bufferdescriptor(stat);
    a9fc:	4db2      	ldr	r5, [pc, #712]	; (acc8 <usb_isr+0x2dc>)
    a9fe:	089e      	lsrs	r6, r3, #2
    aa00:	eb05 07c6 	add.w	r7, r5, r6, lsl #3
			endpoint--;	// endpoint is index to zero-based arrays
    aa04:	3a01      	subs	r2, #1
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    aa06:	6879      	ldr	r1, [r7, #4]
			if (stat & 0x08) { // transmit
    aa08:	f013 0308 	ands.w	r3, r3, #8
			endpoint--;	// endpoint is index to zero-based arrays
    aa0c:	b2d4      	uxtb	r4, r2
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    aa0e:	f1a1 0008 	sub.w	r0, r1, #8
			if (stat & 0x08) { // transmit
    aa12:	f040 80b8 	bne.w	ab86 <usb_isr+0x19a>
				packet->len = b->desc >> 16;
    aa16:	f855 2036 	ldr.w	r2, [r5, r6, lsl #3]
    aa1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
				if (packet->len > 0) {
    aa1e:	0c12      	lsrs	r2, r2, #16
				packet->len = b->desc >> 16;
    aa20:	f821 cc08 	strh.w	ip, [r1, #-8]
				if (packet->len > 0) {
    aa24:	f000 80a7 	beq.w	ab76 <usb_isr+0x18a>
					packet->index = 0;
    aa28:	f821 3c06 	strh.w	r3, [r1, #-6]
					packet->next = NULL;
    aa2c:	f841 3c04 	str.w	r3, [r1, #-4]
					if (rx_first[endpoint] == NULL) {
    aa30:	4ba6      	ldr	r3, [pc, #664]	; (accc <usb_isr+0x2e0>)
    aa32:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    aa36:	2a00      	cmp	r2, #0
    aa38:	f000 8201 	beq.w	ae3e <usb_isr+0x452>
						rx_last[endpoint]->next = packet;
    aa3c:	4ba4      	ldr	r3, [pc, #656]	; (acd0 <usb_isr+0x2e4>)
    aa3e:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    aa42:	6050      	str	r0, [r2, #4]
					rx_last[endpoint] = packet;
    aa44:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    aa48:	4ba2      	ldr	r3, [pc, #648]	; (acd4 <usb_isr+0x2e8>)
    aa4a:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
    aa4e:	4494      	add	ip, r2
    aa50:	f823 c014 	strh.w	ip, [r3, r4, lsl #1]
					packet = usb_malloc();
    aa54:	f000 fbdc 	bl	b210 <usb_malloc>
					if (packet) {
    aa58:	2800      	cmp	r0, #0
    aa5a:	f000 81e9 	beq.w	ae30 <usb_isr+0x444>
						b->desc = BDT_DESC(64,
    aa5e:	f017 0f08 	tst.w	r7, #8
    aa62:	4b9d      	ldr	r3, [pc, #628]	; (acd8 <usb_isr+0x2ec>)
						b->addr = packet->buf;
    aa64:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    aa68:	bf18      	it	ne
    aa6a:	465b      	movne	r3, fp
						b->addr = packet->buf;
    aa6c:	6078      	str	r0, [r7, #4]
						b->desc = BDT_DESC(64,
    aa6e:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    aa72:	2308      	movs	r3, #8
    aa74:	f88a 3080 	strb.w	r3, [sl, #128]	; 0x80
	status = USB0_ISTAT;
    aa78:	f89a 3080 	ldrb.w	r3, [sl, #128]	; 0x80
	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    aa7c:	0759      	lsls	r1, r3, #29
	status = USB0_ISTAT;
    aa7e:	b2dc      	uxtb	r4, r3
	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    aa80:	d51b      	bpl.n	aaba <usb_isr+0xce>
		if (usb_configuration) {
    aa82:	4b96      	ldr	r3, [pc, #600]	; (acdc <usb_isr+0x2f0>)
    aa84:	781b      	ldrb	r3, [r3, #0]
    aa86:	b1ab      	cbz	r3, aab4 <usb_isr+0xc8>
			t = usb_reboot_timer;
    aa88:	4995      	ldr	r1, [pc, #596]	; (ace0 <usb_isr+0x2f4>)
    aa8a:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    aa8c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    aa90:	b12a      	cbz	r2, aa9e <usb_isr+0xb2>
				usb_reboot_timer = --t;
    aa92:	3b01      	subs	r3, #1
    aa94:	b2db      	uxtb	r3, r3
    aa96:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    aa98:	2b00      	cmp	r3, #0
    aa9a:	f000 8346 	beq.w	b12a <usb_isr+0x73e>
			t = usb_cdc_transmit_flush_timer;
    aa9e:	4991      	ldr	r1, [pc, #580]	; (ace4 <usb_isr+0x2f8>)
    aaa0:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    aaa2:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    aaa6:	b12a      	cbz	r2, aab4 <usb_isr+0xc8>
				usb_cdc_transmit_flush_timer = --t;
    aaa8:	3b01      	subs	r3, #1
    aaaa:	b2db      	uxtb	r3, r3
    aaac:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    aaae:	2b00      	cmp	r3, #0
    aab0:	f000 81eb 	beq.w	ae8a <usb_isr+0x49e>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    aab4:	2304      	movs	r3, #4
    aab6:	f88a 3080 	strb.w	r3, [sl, #128]	; 0x80
	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    aaba:	f014 0208 	ands.w	r2, r4, #8
    aabe:	f000 81cc 	beq.w	ae5a <usb_isr+0x46e>
		stat = USB0_STAT;
    aac2:	f89a 2090 	ldrb.w	r2, [sl, #144]	; 0x90
    aac6:	b2d3      	uxtb	r3, r2
		if (endpoint == 0) {
    aac8:	0912      	lsrs	r2, r2, #4
    aaca:	d197      	bne.n	a9fc <usb_isr+0x10>
	b = stat2bufferdescriptor(stat);
    aacc:	f8df 91f8 	ldr.w	r9, [pc, #504]	; acc8 <usb_isr+0x2dc>
    aad0:	089b      	lsrs	r3, r3, #2
    aad2:	eb09 04c3 	add.w	r4, r9, r3, lsl #3
	pid = BDT_PID(b->desc);
    aad6:	f859 0033 	ldr.w	r0, [r9, r3, lsl #3]
	buf = b->addr;
    aada:	6864      	ldr	r4, [r4, #4]
	pid = BDT_PID(b->desc);
    aadc:	f3c0 0083 	ubfx	r0, r0, #2, #4
	switch (pid) {
    aae0:	2809      	cmp	r0, #9
    aae2:	d07c      	beq.n	abde <usb_isr+0x1f2>
    aae4:	d80f      	bhi.n	ab06 <usb_isr+0x11a>
    aae6:	3801      	subs	r0, #1
    aae8:	2801      	cmp	r0, #1
    aaea:	d808      	bhi.n	aafe <usb_isr+0x112>
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    aaec:	4a7e      	ldr	r2, [pc, #504]	; (ace8 <usb_isr+0x2fc>)
    aaee:	8815      	ldrh	r5, [r2, #0]
    aaf0:	f242 0021 	movw	r0, #8225	; 0x2021
    aaf4:	4285      	cmp	r5, r0
    aaf6:	f000 81fb 	beq.w	aef0 <usb_isr+0x504>
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    aafa:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    aafe:	2301      	movs	r3, #1
    ab00:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
}
    ab04:	e7b5      	b.n	aa72 <usb_isr+0x86>
	switch (pid) {
    ab06:	280d      	cmp	r0, #13
    ab08:	d1f9      	bne.n	aafe <usb_isr+0x112>
		setup.word2 = *(uint32_t *)(buf + 4);
    ab0a:	e9d4 0700 	ldrd	r0, r7, [r4]
		ep0_tx_ptr = NULL;
    ab0e:	4d77      	ldr	r5, [pc, #476]	; (acec <usb_isr+0x300>)
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    ab10:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
		setup.word1 = *(uint32_t *)(buf);
    ab14:	4e74      	ldr	r6, [pc, #464]	; (ace8 <usb_isr+0x2fc>)
		ep0_tx_data_toggle = 1;
    ab16:	4c76      	ldr	r4, [pc, #472]	; (acf0 <usb_isr+0x304>)
		table[index(0, TX, EVEN)].desc = 0;
    ab18:	f8c9 2010 	str.w	r2, [r9, #16]
    ab1c:	b283      	uxth	r3, r0
	switch (setup.wRequestAndType) {
    ab1e:	f240 6c81 	movw	ip, #1665	; 0x681
		table[index(0, TX, ODD)].desc = 0;
    ab22:	f8c9 2018 	str.w	r2, [r9, #24]
		ep0_tx_ptr = NULL;
    ab26:	602a      	str	r2, [r5, #0]
	switch (setup.wRequestAndType) {
    ab28:	4563      	cmp	r3, ip
		ep0_tx_data_toggle = 1;
    ab2a:	f04f 0201 	mov.w	r2, #1
		setup.word2 = *(uint32_t *)(buf + 4);
    ab2e:	e9c6 0700 	strd	r0, r7, [r6]
		ep0_tx_data_toggle = 1;
    ab32:	7022      	strb	r2, [r4, #0]
	switch (setup.wRequestAndType) {
    ab34:	f200 80ff 	bhi.w	ad36 <usb_isr+0x34a>
    ab38:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
    ab3c:	f080 82cb 	bcs.w	b0d6 <usb_isr+0x6ea>
    ab40:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    ab44:	f000 8226 	beq.w	af94 <usb_isr+0x5a8>
    ab48:	f240 80de 	bls.w	ad08 <usb_isr+0x31c>
    ab4c:	f240 3202 	movw	r2, #770	; 0x302
    ab50:	4293      	cmp	r3, r2
    ab52:	d17b      	bne.n	ac4c <usb_isr+0x260>
		i = setup.wIndex & 0x7F;
    ab54:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    ab58:	2f04      	cmp	r7, #4
    ab5a:	f200 8108 	bhi.w	ad6e <usb_isr+0x382>
    ab5e:	0c02      	lsrs	r2, r0, #16
    ab60:	f040 8105 	bne.w	ad6e <usb_isr+0x382>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    ab64:	4963      	ldr	r1, [pc, #396]	; (acf4 <usb_isr+0x308>)
    ab66:	f811 3027 	ldrb.w	r3, [r1, r7, lsl #2]
    ab6a:	f043 0302 	orr.w	r3, r3, #2
    ab6e:	f801 3027 	strb.w	r3, [r1, r7, lsl #2]
	const uint8_t *data = NULL;
    ab72:	4613      	mov	r3, r2
		break;
    ab74:	e070      	b.n	ac58 <usb_isr+0x26c>
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    ab76:	f017 0f08 	tst.w	r7, #8
    ab7a:	4b57      	ldr	r3, [pc, #348]	; (acd8 <usb_isr+0x2ec>)
    ab7c:	bf18      	it	ne
    ab7e:	465b      	movne	r3, fp
    ab80:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
    ab84:	e775      	b.n	aa72 <usb_isr+0x86>
				usb_free(packet);
    ab86:	f000 fb63 	bl	b250 <usb_free>
				packet = tx_first[endpoint];
    ab8a:	495b      	ldr	r1, [pc, #364]	; (acf8 <usb_isr+0x30c>)
					switch (tx_state[endpoint]) {
    ab8c:	4a5b      	ldr	r2, [pc, #364]	; (acfc <usb_isr+0x310>)
				packet = tx_first[endpoint];
    ab8e:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
				if (packet) {
    ab92:	2b00      	cmp	r3, #0
    ab94:	f000 8157 	beq.w	ae46 <usb_isr+0x45a>
					tx_first[endpoint] = packet->next;
    ab98:	6858      	ldr	r0, [r3, #4]
    ab9a:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
					switch (tx_state[endpoint]) {
    ab9e:	5d11      	ldrb	r1, [r2, r4]
					b->addr = packet->buf;
    aba0:	f103 0008 	add.w	r0, r3, #8
    aba4:	6078      	str	r0, [r7, #4]
					switch (tx_state[endpoint]) {
    aba6:	2903      	cmp	r1, #3
    aba8:	d805      	bhi.n	abb6 <usb_isr+0x1ca>
    abaa:	e8df f001 	tbb	[pc, r1]
    abae:	0f12      	.short	0x0f12
    abb0:	0215      	.short	0x0215
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    abb2:	2104      	movs	r1, #4
    abb4:	5511      	strb	r1, [r2, r4]
					b->desc = BDT_DESC(packet->len,
    abb6:	881a      	ldrh	r2, [r3, #0]
    abb8:	f017 0f08 	tst.w	r7, #8
    abbc:	bf14      	ite	ne
    abbe:	23c8      	movne	r3, #200	; 0xc8
    abc0:	2388      	moveq	r3, #136	; 0x88
    abc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    abc6:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
    abca:	e752      	b.n	aa72 <usb_isr+0x86>
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    abcc:	2102      	movs	r1, #2
    abce:	5511      	strb	r1, [r2, r4]
						break;
    abd0:	e7f1      	b.n	abb6 <usb_isr+0x1ca>
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    abd2:	2103      	movs	r1, #3
    abd4:	5511      	strb	r1, [r2, r4]
						break;
    abd6:	e7ee      	b.n	abb6 <usb_isr+0x1ca>
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    abd8:	2105      	movs	r1, #5
    abda:	5511      	strb	r1, [r2, r4]
						break;
    abdc:	e7eb      	b.n	abb6 <usb_isr+0x1ca>
		data = ep0_tx_ptr;
    abde:	4d43      	ldr	r5, [pc, #268]	; (acec <usb_isr+0x300>)
    abe0:	682a      	ldr	r2, [r5, #0]
		if (data) {
    abe2:	b33a      	cbz	r2, ac34 <usb_isr+0x248>
			size = ep0_tx_len;
    abe4:	4946      	ldr	r1, [pc, #280]	; (ad00 <usb_isr+0x314>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    abe6:	4c42      	ldr	r4, [pc, #264]	; (acf0 <usb_isr+0x304>)
			size = ep0_tx_len;
    abe8:	880f      	ldrh	r7, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    abea:	4846      	ldr	r0, [pc, #280]	; (ad04 <usb_isr+0x318>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    abec:	f894 e000 	ldrb.w	lr, [r4]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    abf0:	7806      	ldrb	r6, [r0, #0]
    abf2:	2f40      	cmp	r7, #64	; 0x40
    abf4:	463b      	mov	r3, r7
    abf6:	bf28      	it	cs
    abf8:	2340      	movcs	r3, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    abfa:	f1be 0f00 	cmp.w	lr, #0
	ep0_tx_data_toggle ^= 1;
    abfe:	f08e 0e01 	eor.w	lr, lr, #1
    ac02:	f884 e000 	strb.w	lr, [r4]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ac06:	f046 0402 	orr.w	r4, r6, #2
	ep0_tx_bdt_bank ^= 1;
    ac0a:	f086 0601 	eor.w	r6, r6, #1
    ac0e:	7006      	strb	r6, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ac10:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
    ac14:	6042      	str	r2, [r0, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ac16:	bf14      	ite	ne
    ac18:	20c8      	movne	r0, #200	; 0xc8
    ac1a:	2088      	moveq	r0, #136	; 0x88
    ac1c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
			data += size;
    ac20:	441a      	add	r2, r3
			ep0_tx_len -= size;
    ac22:	1afb      	subs	r3, r7, r3
    ac24:	b29b      	uxth	r3, r3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ac26:	f849 0034 	str.w	r0, [r9, r4, lsl #3]
			ep0_tx_len -= size;
    ac2a:	800b      	strh	r3, [r1, #0]
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    ac2c:	2b00      	cmp	r3, #0
    ac2e:	f000 8136 	beq.w	ae9e <usb_isr+0x4b2>
    ac32:	602a      	str	r2, [r5, #0]
		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    ac34:	4b2c      	ldr	r3, [pc, #176]	; (ace8 <usb_isr+0x2fc>)
    ac36:	881a      	ldrh	r2, [r3, #0]
    ac38:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    ac3c:	f47f af5f 	bne.w	aafe <usb_isr+0x112>
			USB0_ADDR = setup.wValue;
    ac40:	789a      	ldrb	r2, [r3, #2]
    ac42:	f88a 2098 	strb.w	r2, [sl, #152]	; 0x98
			setup.bRequest = 0;
    ac46:	2200      	movs	r2, #0
    ac48:	705a      	strb	r2, [r3, #1]
			USB0_ADDR = setup.wValue;
    ac4a:	e758      	b.n	aafe <usb_isr+0x112>
	switch (setup.wRequestAndType) {
    ac4c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    ac50:	f040 808d 	bne.w	ad6e <usb_isr+0x382>
	uint32_t datalen = 0;
    ac54:	2200      	movs	r2, #0
	const uint8_t *data = NULL;
    ac56:	4613      	mov	r3, r2
	if (datalen > setup.wLength) datalen = setup.wLength;
    ac58:	f8b6 c006 	ldrh.w	ip, [r6, #6]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ac5c:	4829      	ldr	r0, [pc, #164]	; (ad04 <usb_isr+0x318>)
    ac5e:	4594      	cmp	ip, r2
    ac60:	bf28      	it	cs
    ac62:	4694      	movcs	ip, r2
	if (size > EP0_SIZE) size = EP0_SIZE;
    ac64:	4667      	mov	r7, ip
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ac66:	7802      	ldrb	r2, [r0, #0]
    ac68:	2f40      	cmp	r7, #64	; 0x40
    ac6a:	bf28      	it	cs
    ac6c:	2740      	movcs	r7, #64	; 0x40
    ac6e:	f042 0e02 	orr.w	lr, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ac72:	043e      	lsls	r6, r7, #16
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ac74:	eb09 08ce 	add.w	r8, r9, lr, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ac78:	f046 06c8 	orr.w	r6, r6, #200	; 0xc8
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ac7c:	f8c8 3004 	str.w	r3, [r8, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ac80:	f849 603e 	str.w	r6, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    ac84:	2600      	movs	r6, #0
	data += size;
    ac86:	443b      	add	r3, r7
	ep0_tx_data_toggle ^= 1;
    ac88:	7026      	strb	r6, [r4, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    ac8a:	ebbc 0707 	subs.w	r7, ip, r7
	ep0_tx_bdt_bank ^= 1;
    ac8e:	f082 0601 	eor.w	r6, r2, #1
    ac92:	7006      	strb	r6, [r0, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    ac94:	f040 8111 	bne.w	aeba <usb_isr+0x4ce>
    ac98:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
    ac9c:	f04f 0501 	mov.w	r5, #1
    aca0:	d909      	bls.n	acb6 <usb_isr+0x2ca>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    aca2:	f046 0602 	orr.w	r6, r6, #2
	ep0_tx_bdt_bank ^= 1;
    aca6:	7002      	strb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    aca8:	eb09 02c6 	add.w	r2, r9, r6, lsl #3
	ep0_tx_data_toggle ^= 1;
    acac:	7025      	strb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    acae:	6053      	str	r3, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    acb0:	2388      	movs	r3, #136	; 0x88
    acb2:	f849 3036 	str.w	r3, [r9, r6, lsl #3]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    acb6:	2301      	movs	r3, #1
    acb8:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    acbc:	e71f      	b.n	aafe <usb_isr+0x112>
    acbe:	bf00      	nop
    acc0:	40072000 	.word	0x40072000
    acc4:	004000c8 	.word	0x004000c8
    acc8:	1fff8000 	.word	0x1fff8000
    accc:	1fffb68c 	.word	0x1fffb68c
    acd0:	1fffb69c 	.word	0x1fffb69c
    acd4:	1fffb6dc 	.word	0x1fffb6dc
    acd8:	00400088 	.word	0x00400088
    acdc:	1fffb6d8 	.word	0x1fffb6d8
    ace0:	1fffb6d9 	.word	0x1fffb6d9
    ace4:	1fffb704 	.word	0x1fffb704
    ace8:	1fffb6ac 	.word	0x1fffb6ac
    acec:	1fffb680 	.word	0x1fffb680
    acf0:	1fffb67d 	.word	0x1fffb67d
    acf4:	400720c0 	.word	0x400720c0
    acf8:	1fffb6b4 	.word	0x1fffb6b4
    acfc:	1fffb6d4 	.word	0x1fffb6d4
    ad00:	1fffb67e 	.word	0x1fffb67e
    ad04:	1fffb67c 	.word	0x1fffb67c
	switch (setup.wRequestAndType) {
    ad08:	2b80      	cmp	r3, #128	; 0x80
    ad0a:	f000 818b 	beq.w	b024 <usb_isr+0x638>
    ad0e:	2b82      	cmp	r3, #130	; 0x82
    ad10:	d12d      	bne.n	ad6e <usb_isr+0x382>
		i = setup.wIndex & 0x7F;
    ad12:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS) {
    ad16:	2f04      	cmp	r7, #4
    ad18:	d829      	bhi.n	ad6e <usb_isr+0x382>
		reply_buffer[0] = 0;
    ad1a:	4aa7      	ldr	r2, [pc, #668]	; (afb8 <usb_isr+0x5cc>)
    ad1c:	2300      	movs	r3, #0
    ad1e:	8013      	strh	r3, [r2, #0]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    ad20:	4ba6      	ldr	r3, [pc, #664]	; (afbc <usb_isr+0x5d0>)
    ad22:	f813 3027 	ldrb.w	r3, [r3, r7, lsl #2]
    ad26:	079f      	lsls	r7, r3, #30
    ad28:	f140 81fc 	bpl.w	b124 <usb_isr+0x738>
    ad2c:	2301      	movs	r3, #1
    ad2e:	7013      	strb	r3, [r2, #0]
		data = reply_buffer;
    ad30:	4ba1      	ldr	r3, [pc, #644]	; (afb8 <usb_isr+0x5cc>)
		datalen = 2;
    ad32:	2202      	movs	r2, #2
    ad34:	e790      	b.n	ac58 <usb_isr+0x26c>
	switch (setup.wRequestAndType) {
    ad36:	f242 0c21 	movw	ip, #8225	; 0x2021
    ad3a:	4563      	cmp	r3, ip
    ad3c:	d0bb      	beq.n	acb6 <usb_isr+0x2ca>
    ad3e:	d91d      	bls.n	ad7c <usb_isr+0x390>
    ad40:	f242 2221 	movw	r2, #8737	; 0x2221
    ad44:	4293      	cmp	r3, r2
    ad46:	d10d      	bne.n	ad64 <usb_isr+0x378>
		switch (setup.wIndex) {
    ad48:	b2bf      	uxth	r7, r7
    ad4a:	2f00      	cmp	r7, #0
    ad4c:	d182      	bne.n	ac54 <usb_isr+0x268>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    ad4e:	4b9c      	ldr	r3, [pc, #624]	; (afc0 <usb_isr+0x5d4>)
    ad50:	681a      	ldr	r2, [r3, #0]
    ad52:	4b9c      	ldr	r3, [pc, #624]	; (afc4 <usb_isr+0x5d8>)
    ad54:	601a      	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    ad56:	4b9c      	ldr	r3, [pc, #624]	; (afc8 <usb_isr+0x5dc>)
    ad58:	f3c0 4007 	ubfx	r0, r0, #16, #8
	uint32_t datalen = 0;
    ad5c:	2200      	movs	r2, #0
			usb_cdc_line_rtsdtr = setup.wValue;
    ad5e:	7018      	strb	r0, [r3, #0]
	const uint8_t *data = NULL;
    ad60:	4613      	mov	r3, r2
			break;
    ad62:	e779      	b.n	ac58 <usb_isr+0x26c>
	switch (setup.wRequestAndType) {
    ad64:	f242 3221 	movw	r2, #8993	; 0x2321
    ad68:	4293      	cmp	r3, r2
    ad6a:	f43f af73 	beq.w	ac54 <usb_isr+0x268>
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    ad6e:	230f      	movs	r3, #15
    ad70:	f88a 30c0 	strb.w	r3, [sl, #192]	; 0xc0
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    ad74:	2301      	movs	r3, #1
    ad76:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    ad7a:	e6c0      	b.n	aafe <usb_isr+0x112>
	switch (setup.wRequestAndType) {
    ad7c:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    ad80:	f000 814a 	beq.w	b018 <usb_isr+0x62c>
    ad84:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    ad88:	d1f1      	bne.n	ad6e <usb_isr+0x382>
		usb_configuration = setup.wValue;
    ad8a:	4b90      	ldr	r3, [pc, #576]	; (afcc <usb_isr+0x5e0>)
    ad8c:	f3c0 4007 	ubfx	r0, r0, #16, #8
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    ad90:	2504      	movs	r5, #4
		usb_configuration = setup.wValue;
    ad92:	7018      	strb	r0, [r3, #0]
			if (table[i].desc & BDT_OWN) {
    ad94:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
    ad98:	061a      	lsls	r2, r3, #24
    ad9a:	d406      	bmi.n	adaa <usb_isr+0x3be>
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    ad9c:	3501      	adds	r5, #1
    ad9e:	2d14      	cmp	r5, #20
    ada0:	d00c      	beq.n	adbc <usb_isr+0x3d0>
			if (table[i].desc & BDT_OWN) {
    ada2:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
    ada6:	061a      	lsls	r2, r3, #24
    ada8:	d5f8      	bpl.n	ad9c <usb_isr+0x3b0>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    adaa:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    adae:	3501      	adds	r5, #1
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    adb0:	6858      	ldr	r0, [r3, #4]
    adb2:	3808      	subs	r0, #8
    adb4:	f000 fa4c 	bl	b250 <usb_free>
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    adb8:	2d14      	cmp	r5, #20
    adba:	d1f2      	bne.n	ada2 <usb_isr+0x3b6>
    adbc:	4a84      	ldr	r2, [pc, #528]	; (afd0 <usb_isr+0x5e4>)
    adbe:	4b85      	ldr	r3, [pc, #532]	; (afd4 <usb_isr+0x5e8>)
    adc0:	9202      	str	r2, [sp, #8]
    adc2:	4a85      	ldr	r2, [pc, #532]	; (afd8 <usb_isr+0x5ec>)
    adc4:	9201      	str	r2, [sp, #4]
    adc6:	4e85      	ldr	r6, [pc, #532]	; (afdc <usb_isr+0x5f0>)
    adc8:	4a85      	ldr	r2, [pc, #532]	; (afe0 <usb_isr+0x5f4>)
    adca:	f8df 8218 	ldr.w	r8, [pc, #536]	; afe4 <usb_isr+0x5f8>
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    adce:	9403      	str	r4, [sp, #12]
    add0:	9200      	str	r2, [sp, #0]
			rx_first[i] = NULL;
    add2:	2500      	movs	r5, #0
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    add4:	461c      	mov	r4, r3
			p = rx_first[i];
    add6:	f856 7b04 	ldr.w	r7, [r6], #4
			while (p) {
    adda:	b12f      	cbz	r7, ade8 <usb_isr+0x3fc>
				n = p->next;
    addc:	4638      	mov	r0, r7
    adde:	687f      	ldr	r7, [r7, #4]
				usb_free(p);
    ade0:	f000 fa36 	bl	b250 <usb_free>
			while (p) {
    ade4:	2f00      	cmp	r7, #0
    ade6:	d1f9      	bne.n	addc <usb_isr+0x3f0>
			rx_last[i] = NULL;
    ade8:	9b00      	ldr	r3, [sp, #0]
			p = tx_first[i];
    adea:	f8d8 7000 	ldr.w	r7, [r8]
			rx_last[i] = NULL;
    adee:	f843 5b04 	str.w	r5, [r3], #4
			rx_first[i] = NULL;
    adf2:	f846 5c04 	str.w	r5, [r6, #-4]
			rx_last[i] = NULL;
    adf6:	9300      	str	r3, [sp, #0]
			while (p) {
    adf8:	b12f      	cbz	r7, ae06 <usb_isr+0x41a>
				n = p->next;
    adfa:	4638      	mov	r0, r7
    adfc:	687f      	ldr	r7, [r7, #4]
				usb_free(p);
    adfe:	f000 fa27 	bl	b250 <usb_free>
			while (p) {
    ae02:	2f00      	cmp	r7, #0
    ae04:	d1f9      	bne.n	adfa <usb_isr+0x40e>
			tx_last[i] = NULL;
    ae06:	9b02      	ldr	r3, [sp, #8]
			tx_first[i] = NULL;
    ae08:	f848 5b04 	str.w	r5, [r8], #4
			tx_last[i] = NULL;
    ae0c:	f843 5b04 	str.w	r5, [r3], #4
    ae10:	9302      	str	r3, [sp, #8]
			usb_rx_byte_count_data[i] = 0;
    ae12:	9b01      	ldr	r3, [sp, #4]
    ae14:	f823 5b02 	strh.w	r5, [r3], #2
    ae18:	9301      	str	r3, [sp, #4]
			switch (tx_state[i]) {
    ae1a:	7823      	ldrb	r3, [r4, #0]
    ae1c:	3b02      	subs	r3, #2
    ae1e:	2b03      	cmp	r3, #3
    ae20:	f200 8109 	bhi.w	b036 <usb_isr+0x64a>
    ae24:	e8df f013 	tbh	[pc, r3, lsl #1]
    ae28:	0104013f 	.word	0x0104013f
    ae2c:	0104013f 	.word	0x0104013f
						usb_rx_memory_needed++;
    ae30:	4a6d      	ldr	r2, [pc, #436]	; (afe8 <usb_isr+0x5fc>)
						b->desc = 0;
    ae32:	f845 0036 	str.w	r0, [r5, r6, lsl #3]
						usb_rx_memory_needed++;
    ae36:	7813      	ldrb	r3, [r2, #0]
    ae38:	3301      	adds	r3, #1
    ae3a:	7013      	strb	r3, [r2, #0]
    ae3c:	e619      	b.n	aa72 <usb_isr+0x86>
						rx_first[endpoint] = packet;
    ae3e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    ae42:	4b67      	ldr	r3, [pc, #412]	; (afe0 <usb_isr+0x5f4>)
    ae44:	e5fe      	b.n	aa44 <usb_isr+0x58>
					switch (tx_state[endpoint]) {
    ae46:	5d11      	ldrb	r1, [r2, r4]
    ae48:	2902      	cmp	r1, #2
    ae4a:	d026      	beq.n	ae9a <usb_isr+0x4ae>
    ae4c:	f67f ae11 	bls.w	aa72 <usb_isr+0x86>
    ae50:	2903      	cmp	r1, #3
    ae52:	d11d      	bne.n	ae90 <usb_isr+0x4a4>
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    ae54:	2301      	movs	r3, #1
    ae56:	5513      	strb	r3, [r2, r4]
						break;
    ae58:	e60b      	b.n	aa72 <usb_isr+0x86>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    ae5a:	07e0      	lsls	r0, r4, #31
    ae5c:	d46e      	bmi.n	af3c <usb_isr+0x550>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    ae5e:	0621      	lsls	r1, r4, #24
    ae60:	d421      	bmi.n	aea6 <usb_isr+0x4ba>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    ae62:	07a2      	lsls	r2, r4, #30
    ae64:	d508      	bpl.n	ae78 <usb_isr+0x48c>
		uint8_t err = USB0_ERRSTAT;
    ae66:	4b61      	ldr	r3, [pc, #388]	; (afec <usb_isr+0x600>)
    ae68:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    ae6c:	2102      	movs	r1, #2
		uint8_t err = USB0_ERRSTAT;
    ae6e:	b2d2      	uxtb	r2, r2
		USB0_ERRSTAT = err;
    ae70:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		USB0_ISTAT = USB_ISTAT_ERROR;
    ae74:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    ae78:	06e3      	lsls	r3, r4, #27
    ae7a:	d503      	bpl.n	ae84 <usb_isr+0x498>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    ae7c:	4b5b      	ldr	r3, [pc, #364]	; (afec <usb_isr+0x600>)
    ae7e:	2210      	movs	r2, #16
    ae80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

}
    ae84:	b005      	add	sp, #20
    ae86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (t == 0) usb_serial_flush_callback();
    ae8a:	f000 fb59 	bl	b540 <usb_serial_flush_callback>
    ae8e:	e611      	b.n	aab4 <usb_isr+0xc8>
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    ae90:	f017 0f08 	tst.w	r7, #8
    ae94:	bf14      	ite	ne
    ae96:	2303      	movne	r3, #3
    ae98:	2302      	moveq	r3, #2
    ae9a:	5513      	strb	r3, [r2, r4]
						break;
    ae9c:	e5e9      	b.n	aa72 <usb_isr+0x86>
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    ae9e:	2f3f      	cmp	r7, #63	; 0x3f
    aea0:	bf98      	it	ls
    aea2:	2200      	movls	r2, #0
    aea4:	e6c5      	b.n	ac32 <usb_isr+0x246>
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    aea6:	4b51      	ldr	r3, [pc, #324]	; (afec <usb_isr+0x600>)
		USB0_ISTAT = USB_ISTAT_STALL;
    aea8:	2280      	movs	r2, #128	; 0x80
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    aeaa:	210d      	movs	r1, #13
    aeac:	f883 10c0 	strb.w	r1, [r3, #192]	; 0xc0
		USB0_ISTAT = USB_ISTAT_STALL;
    aeb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    aeb4:	07a2      	lsls	r2, r4, #30
    aeb6:	d5df      	bpl.n	ae78 <usb_isr+0x48c>
    aeb8:	e7d5      	b.n	ae66 <usb_isr+0x47a>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    aeba:	f046 0602 	orr.w	r6, r6, #2
	ep0_tx_bdt_bank ^= 1;
    aebe:	7002      	strb	r2, [r0, #0]
    aec0:	2f40      	cmp	r7, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    aec2:	eb09 00c6 	add.w	r0, r9, r6, lsl #3
    aec6:	463a      	mov	r2, r7
    aec8:	bf28      	it	cs
    aeca:	2240      	movcs	r2, #64	; 0x40
    aecc:	6043      	str	r3, [r0, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    aece:	0410      	lsls	r0, r2, #16
	data += size;
    aed0:	4413      	add	r3, r2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    aed2:	f040 0088 	orr.w	r0, r0, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    aed6:	2101      	movs	r1, #1
	if (datalen == 0 && size < EP0_SIZE) return;
    aed8:	1aba      	subs	r2, r7, r2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    aeda:	f849 0036 	str.w	r0, [r9, r6, lsl #3]
	ep0_tx_data_toggle ^= 1;
    aede:	7021      	strb	r1, [r4, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    aee0:	d055      	beq.n	af8e <usb_isr+0x5a2>
	ep0_tx_ptr = data;
    aee2:	602b      	str	r3, [r5, #0]
	ep0_tx_len = datalen;
    aee4:	4b42      	ldr	r3, [pc, #264]	; (aff0 <usb_isr+0x604>)
    aee6:	801a      	strh	r2, [r3, #0]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    aee8:	2301      	movs	r3, #1
    aeea:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    aeee:	e606      	b.n	aafe <usb_isr+0x112>
			switch (setup.wIndex) {
    aef0:	8892      	ldrh	r2, [r2, #4]
    aef2:	b95a      	cbnz	r2, af0c <usb_isr+0x520>
    aef4:	4a3f      	ldr	r2, [pc, #252]	; (aff4 <usb_isr+0x608>)
    aef6:	1de5      	adds	r5, r4, #7
					*dst++ = *buf++;
    aef8:	f814 1b01 	ldrb.w	r1, [r4], #1
    aefc:	f802 1f01 	strb.w	r1, [r2, #1]!
				for (i=0; i<7; i++) {
    af00:	42ac      	cmp	r4, r5
    af02:	d1f9      	bne.n	aef8 <usb_isr+0x50c>
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    af04:	4a3c      	ldr	r2, [pc, #240]	; (aff8 <usb_isr+0x60c>)
    af06:	6812      	ldr	r2, [r2, #0]
    af08:	2a86      	cmp	r2, #134	; 0x86
    af0a:	d03c      	beq.n	af86 <usb_isr+0x59a>
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    af0c:	4c3b      	ldr	r4, [pc, #236]	; (affc <usb_isr+0x610>)
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    af0e:	483c      	ldr	r0, [pc, #240]	; (b000 <usb_isr+0x614>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    af10:	7825      	ldrb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    af12:	7802      	ldrb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    af14:	2d00      	cmp	r5, #0
	ep0_tx_data_toggle ^= 1;
    af16:	f085 0501 	eor.w	r5, r5, #1
    af1a:	7025      	strb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    af1c:	f042 0402 	orr.w	r4, r2, #2
	ep0_tx_bdt_bank ^= 1;
    af20:	f082 0201 	eor.w	r2, r2, #1
    af24:	7002      	strb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    af26:	eb09 02c4 	add.w	r2, r9, r4, lsl #3
    af2a:	f04f 0000 	mov.w	r0, #0
    af2e:	6050      	str	r0, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    af30:	bf14      	ite	ne
    af32:	22c8      	movne	r2, #200	; 0xc8
    af34:	2288      	moveq	r2, #136	; 0x88
    af36:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
}
    af3a:	e5de      	b.n	aafa <usb_isr+0x10e>
		USB0_CTL = USB_CTL_ODDRST;
    af3c:	4b2b      	ldr	r3, [pc, #172]	; (afec <usb_isr+0x600>)
		ep0_tx_bdt_bank = 0;
    af3e:	4830      	ldr	r0, [pc, #192]	; (b000 <usb_isr+0x614>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    af40:	4930      	ldr	r1, [pc, #192]	; (b004 <usb_isr+0x618>)
    af42:	4c31      	ldr	r4, [pc, #196]	; (b008 <usb_isr+0x61c>)
		USB0_CTL = USB_CTL_ODDRST;
    af44:	2502      	movs	r5, #2
    af46:	f883 5094 	strb.w	r5, [r3, #148]	; 0x94
		ep0_tx_bdt_bank = 0;
    af4a:	7002      	strb	r2, [r0, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    af4c:	482f      	ldr	r0, [pc, #188]	; (b00c <usb_isr+0x620>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    af4e:	600c      	str	r4, [r1, #0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    af50:	4d2f      	ldr	r5, [pc, #188]	; (b010 <usb_isr+0x624>)
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    af52:	6048      	str	r0, [r1, #4]
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    af54:	608c      	str	r4, [r1, #8]
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    af56:	240d      	movs	r4, #13
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    af58:	60cd      	str	r5, [r1, #12]
		USB0_ERRSTAT = 0xFF;
    af5a:	20ff      	movs	r0, #255	; 0xff
		table[index(0, TX, EVEN)].desc = 0;
    af5c:	610a      	str	r2, [r1, #16]
		table[index(0, TX, ODD)].desc = 0;
    af5e:	618a      	str	r2, [r1, #24]
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    af60:	f883 40c0 	strb.w	r4, [r3, #192]	; 0xc0
		USB0_CTL = USB_CTL_USBENSOFEN;
    af64:	2101      	movs	r1, #1
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    af66:	249f      	movs	r4, #159	; 0x9f
		USB0_ERRSTAT = 0xFF;
    af68:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
		USB0_ISTAT = 0xFF;
    af6c:	f883 0080 	strb.w	r0, [r3, #128]	; 0x80
		USB0_ADDR = 0;
    af70:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		USB0_ERREN = 0xFF;
    af74:	f883 008c 	strb.w	r0, [r3, #140]	; 0x8c
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    af78:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
		USB0_CTL = USB_CTL_USBENSOFEN;
    af7c:	f883 1094 	strb.w	r1, [r3, #148]	; 0x94
}
    af80:	b005      	add	sp, #20
    af82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    af86:	4a23      	ldr	r2, [pc, #140]	; (b014 <usb_isr+0x628>)
    af88:	200f      	movs	r0, #15
    af8a:	7010      	strb	r0, [r2, #0]
    af8c:	e7be      	b.n	af0c <usb_isr+0x520>
	if (datalen == 0 && size < EP0_SIZE) return;
    af8e:	2f3f      	cmp	r7, #63	; 0x3f
    af90:	d8a7      	bhi.n	aee2 <usb_isr+0x4f6>
    af92:	e690      	b.n	acb6 <usb_isr+0x2ca>
		i = setup.wIndex & 0x7F;
    af94:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    af98:	2f04      	cmp	r7, #4
    af9a:	f63f aee8 	bhi.w	ad6e <usb_isr+0x382>
    af9e:	0c00      	lsrs	r0, r0, #16
    afa0:	f47f aee5 	bne.w	ad6e <usb_isr+0x382>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    afa4:	4a05      	ldr	r2, [pc, #20]	; (afbc <usb_isr+0x5d0>)
    afa6:	f812 3027 	ldrb.w	r3, [r2, r7, lsl #2]
    afaa:	f023 0302 	bic.w	r3, r3, #2
    afae:	f802 3027 	strb.w	r3, [r2, r7, lsl #2]
	uint32_t datalen = 0;
    afb2:	2200      	movs	r2, #0
	const uint8_t *data = NULL;
    afb4:	4613      	mov	r3, r2
		break;
    afb6:	e64f      	b.n	ac58 <usb_isr+0x26c>
    afb8:	1fffb684 	.word	0x1fffb684
    afbc:	400720c0 	.word	0x400720c0
    afc0:	1fffb4e0 	.word	0x1fffb4e0
    afc4:	1fffb700 	.word	0x1fffb700
    afc8:	1fffb6fc 	.word	0x1fffb6fc
    afcc:	1fffb6d8 	.word	0x1fffb6d8
    afd0:	1fffb6c4 	.word	0x1fffb6c4
    afd4:	1fffb6d4 	.word	0x1fffb6d4
    afd8:	1fffb6dc 	.word	0x1fffb6dc
    afdc:	1fffb68c 	.word	0x1fffb68c
    afe0:	1fffb69c 	.word	0x1fffb69c
    afe4:	1fffb6b4 	.word	0x1fffb6b4
    afe8:	1fffb6e4 	.word	0x1fffb6e4
    afec:	40072000 	.word	0x40072000
    aff0:	1fffb67e 	.word	0x1fffb67e
    aff4:	1fffb6f3 	.word	0x1fffb6f3
    aff8:	1fffb6f4 	.word	0x1fffb6f4
    affc:	1fffb67d 	.word	0x1fffb67d
    b000:	1fffb67c 	.word	0x1fffb67c
    b004:	1fff8000 	.word	0x1fff8000
    b008:	00400088 	.word	0x00400088
    b00c:	1fffb5fc 	.word	0x1fffb5fc
    b010:	1fffb63c 	.word	0x1fffb63c
    b014:	1fffb6d9 	.word	0x1fffb6d9
		reply_buffer[0] = usb_configuration;
    b018:	4b48      	ldr	r3, [pc, #288]	; (b13c <usb_isr+0x750>)
    b01a:	4949      	ldr	r1, [pc, #292]	; (b140 <usb_isr+0x754>)
    b01c:	781b      	ldrb	r3, [r3, #0]
    b01e:	700b      	strb	r3, [r1, #0]
		data = reply_buffer;
    b020:	460b      	mov	r3, r1
		break;
    b022:	e619      	b.n	ac58 <usb_isr+0x26c>
		reply_buffer[0] = 0;
    b024:	4a46      	ldr	r2, [pc, #280]	; (b140 <usb_isr+0x754>)
    b026:	2300      	movs	r3, #0
    b028:	8013      	strh	r3, [r2, #0]
		data = reply_buffer;
    b02a:	4b45      	ldr	r3, [pc, #276]	; (b140 <usb_isr+0x754>)
		datalen = 2;
    b02c:	2202      	movs	r2, #2
		break;
    b02e:	e613      	b.n	ac58 <usb_isr+0x26c>
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    b030:	f04f 0301 	mov.w	r3, #1
    b034:	7023      	strb	r3, [r4, #0]
		for (i=0; i < NUM_ENDPOINTS; i++) {
    b036:	4b43      	ldr	r3, [pc, #268]	; (b144 <usb_isr+0x758>)
    b038:	42b3      	cmp	r3, r6
    b03a:	f104 0401 	add.w	r4, r4, #1
    b03e:	f47f aeca 	bne.w	add6 <usb_isr+0x3ea>
		usb_rx_memory_needed = 0;
    b042:	4e41      	ldr	r6, [pc, #260]	; (b148 <usb_isr+0x75c>)
    b044:	9c03      	ldr	r4, [sp, #12]
		cfg = usb_endpoint_config_table;
    b046:	f8df 8104 	ldr.w	r8, [pc, #260]	; b14c <usb_isr+0x760>
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    b04a:	4f41      	ldr	r7, [pc, #260]	; (b150 <usb_isr+0x764>)
		usb_rx_memory_needed = 0;
    b04c:	2300      	movs	r3, #0
    b04e:	7033      	strb	r3, [r6, #0]
    b050:	2504      	movs	r5, #4
			epconf = *cfg++;
    b052:	f818 3b01 	ldrb.w	r3, [r8], #1
			*reg = epconf;
    b056:	4a3f      	ldr	r2, [pc, #252]	; (b154 <usb_isr+0x768>)
    b058:	54ab      	strb	r3, [r5, r2]
			if (epconf & USB_ENDPT_EPRXEN) {
    b05a:	071b      	lsls	r3, r3, #28
    b05c:	d425      	bmi.n	b0aa <usb_isr+0x6be>
			table[index(i, TX, EVEN)].desc = 0;
    b05e:	f045 0102 	orr.w	r1, r5, #2
			table[index(i, TX, ODD)].desc = 0;
    b062:	f045 0203 	orr.w	r2, r5, #3
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    b066:	3504      	adds	r5, #4
			table[index(i, TX, EVEN)].desc = 0;
    b068:	2300      	movs	r3, #0
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    b06a:	2d14      	cmp	r5, #20
			table[index(i, TX, EVEN)].desc = 0;
    b06c:	f849 3031 	str.w	r3, [r9, r1, lsl #3]
			table[index(i, TX, ODD)].desc = 0;
    b070:	f849 3032 	str.w	r3, [r9, r2, lsl #3]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    b074:	d1ed      	bne.n	b052 <usb_isr+0x666>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b076:	4f38      	ldr	r7, [pc, #224]	; (b158 <usb_isr+0x76c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b078:	7825      	ldrb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b07a:	783a      	ldrb	r2, [r7, #0]
    b07c:	f042 0002 	orr.w	r0, r2, #2
    b080:	eb09 0cc0 	add.w	ip, r9, r0, lsl #3
	ep0_tx_data_toggle ^= 1;
    b084:	f085 0601 	eor.w	r6, r5, #1
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b088:	f8cc 3004 	str.w	r3, [ip, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b08c:	2d00      	cmp	r5, #0
    b08e:	d14d      	bne.n	b12c <usb_isr+0x740>
    b090:	2388      	movs	r3, #136	; 0x88
	ep0_tx_bdt_bank ^= 1;
    b092:	f082 0201 	eor.w	r2, r2, #1
	ep0_tx_data_toggle ^= 1;
    b096:	7026      	strb	r6, [r4, #0]
	ep0_tx_bdt_bank ^= 1;
    b098:	703a      	strb	r2, [r7, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b09a:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    b09e:	2301      	movs	r3, #1
    b0a0:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    b0a4:	e52b      	b.n	aafe <usb_isr+0x112>
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    b0a6:	7025      	strb	r5, [r4, #0]
				break;
    b0a8:	e7c5      	b.n	b036 <usb_isr+0x64a>
				p = usb_malloc();
    b0aa:	f000 f8b1 	bl	b210 <usb_malloc>
				if (p) {
    b0ae:	2800      	cmp	r0, #0
    b0b0:	d032      	beq.n	b118 <usb_isr+0x72c>
					table[index(i, RX, EVEN)].addr = p->buf;
    b0b2:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
    b0b6:	3008      	adds	r0, #8
    b0b8:	6058      	str	r0, [r3, #4]
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    b0ba:	f849 7035 	str.w	r7, [r9, r5, lsl #3]
				p = usb_malloc();
    b0be:	f000 f8a7 	bl	b210 <usb_malloc>
				if (p) {
    b0c2:	b308      	cbz	r0, b108 <usb_isr+0x71c>
					table[index(i, RX, ODD)].addr = p->buf;
    b0c4:	f045 0301 	orr.w	r3, r5, #1
    b0c8:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
    b0cc:	3008      	adds	r0, #8
    b0ce:	6050      	str	r0, [r2, #4]
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    b0d0:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
    b0d4:	e7c3      	b.n	b05e <usb_isr+0x672>
			if (list->addr == NULL) break;
    b0d6:	4a21      	ldr	r2, [pc, #132]	; (b15c <usb_isr+0x770>)
    b0d8:	6853      	ldr	r3, [r2, #4]
    b0da:	2b00      	cmp	r3, #0
    b0dc:	f43f ae47 	beq.w	ad6e <usb_isr+0x382>
    b0e0:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b0e2:	b2bf      	uxth	r7, r7
    b0e4:	e004      	b.n	b0f0 <usb_isr+0x704>
			if (list->addr == NULL) break;
    b0e6:	6913      	ldr	r3, [r2, #16]
		for (list = usb_descriptor_list; 1; list++) {
    b0e8:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    b0ea:	2b00      	cmp	r3, #0
    b0ec:	f43f ae3f 	beq.w	ad6e <usb_isr+0x382>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b0f0:	8811      	ldrh	r1, [r2, #0]
    b0f2:	4281      	cmp	r1, r0
    b0f4:	d1f7      	bne.n	b0e6 <usb_isr+0x6fa>
    b0f6:	8851      	ldrh	r1, [r2, #2]
    b0f8:	42b9      	cmp	r1, r7
    b0fa:	d1f4      	bne.n	b0e6 <usb_isr+0x6fa>
				if ((setup.wValue >> 8) == 3) {
    b0fc:	0a00      	lsrs	r0, r0, #8
    b0fe:	2803      	cmp	r0, #3
					datalen = *(list->addr);
    b100:	bf0c      	ite	eq
    b102:	781a      	ldrbeq	r2, [r3, #0]
					datalen = list->length;
    b104:	8912      	ldrhne	r2, [r2, #8]
    b106:	e5a7      	b.n	ac58 <usb_isr+0x26c>
					usb_rx_memory_needed++;
    b108:	7833      	ldrb	r3, [r6, #0]
    b10a:	3301      	adds	r3, #1
    b10c:	7033      	strb	r3, [r6, #0]
					table[index(i, RX, ODD)].desc = 0;
    b10e:	f045 0301 	orr.w	r3, r5, #1
    b112:	f849 0033 	str.w	r0, [r9, r3, lsl #3]
					usb_rx_memory_needed++;
    b116:	e7a2      	b.n	b05e <usb_isr+0x672>
					usb_rx_memory_needed++;
    b118:	7833      	ldrb	r3, [r6, #0]
					table[index(i, RX, EVEN)].desc = 0;
    b11a:	f849 0035 	str.w	r0, [r9, r5, lsl #3]
					usb_rx_memory_needed++;
    b11e:	3301      	adds	r3, #1
    b120:	7033      	strb	r3, [r6, #0]
    b122:	e7cc      	b.n	b0be <usb_isr+0x6d2>
		data = reply_buffer;
    b124:	4b06      	ldr	r3, [pc, #24]	; (b140 <usb_isr+0x754>)
		datalen = 2;
    b126:	2202      	movs	r2, #2
    b128:	e596      	b.n	ac58 <usb_isr+0x26c>
	__asm__ volatile("bkpt");
    b12a:	be00      	bkpt	0x0000
	ep0_tx_data_toggle ^= 1;
    b12c:	7026      	strb	r6, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b12e:	23c8      	movs	r3, #200	; 0xc8
	ep0_tx_bdt_bank ^= 1;
    b130:	f082 0601 	eor.w	r6, r2, #1
    b134:	703e      	strb	r6, [r7, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b136:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;
    b13a:	e5bc      	b.n	acb6 <usb_isr+0x2ca>
    b13c:	1fffb6d8 	.word	0x1fffb6d8
    b140:	1fffb684 	.word	0x1fffb684
    b144:	1fffb69c 	.word	0x1fffb69c
    b148:	1fffb6e4 	.word	0x1fffb6e4
    b14c:	0001467c 	.word	0x0001467c
    b150:	00400088 	.word	0x00400088
    b154:	400720c0 	.word	0x400720c0
    b158:	1fffb67c 	.word	0x1fffb67c
    b15c:	00014628 	.word	0x00014628

0000b160 <usb_init>:



void usb_init(void)
{
    b160:	b570      	push	{r4, r5, r6, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    b162:	f000 fab3 	bl	b6cc <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    b166:	2300      	movs	r3, #0
    b168:	4a1a      	ldr	r2, [pc, #104]	; (b1d4 <usb_init+0x74>)
		table[i].desc = 0;
    b16a:	4619      	mov	r1, r3
    b16c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		table[i].addr = 0;
    b170:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    b174:	3301      	adds	r3, #1
    b176:	2b14      	cmp	r3, #20
		table[i].addr = 0;
    b178:	6041      	str	r1, [r0, #4]
	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    b17a:	d1f7      	bne.n	b16c <usb_init+0xc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    b17c:	4c16      	ldr	r4, [pc, #88]	; (b1d8 <usb_init+0x78>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    b17e:	4b17      	ldr	r3, [pc, #92]	; (b1dc <usb_init+0x7c>)
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    b180:	6b60      	ldr	r0, [r4, #52]	; 0x34

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    b182:	4d17      	ldr	r5, [pc, #92]	; (b1e0 <usb_init+0x80>)
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    b184:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
    b188:	6360      	str	r0, [r4, #52]	; 0x34
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    b18a:	f3c2 2407 	ubfx	r4, r2, #8, #8
    b18e:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	USB0_USBCTRL = 0;
    b192:	4c14      	ldr	r4, [pc, #80]	; (b1e4 <usb_init+0x84>)
	USB0_ISTAT = 0xFF;
    b194:	20ff      	movs	r0, #255	; 0xff
	USB0_CTL = USB_CTL_USBENSOFEN;
    b196:	f04f 0c01 	mov.w	ip, #1
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    b19a:	f3c2 4607 	ubfx	r6, r2, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    b19e:	0e12      	lsrs	r2, r2, #24
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    b1a0:	f883 60b0 	strb.w	r6, [r3, #176]	; 0xb0
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    b1a4:	f04f 2ee0 	mov.w	lr, #3758153728	; 0xe000e000
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    b1a8:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	USB0_ISTAT = 0xFF;
    b1ac:	f883 0080 	strb.w	r0, [r3, #128]	; 0x80
	USB0_ERRSTAT = 0xFF;
    b1b0:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
	USB0_OTGISTAT = 0xFF;
    b1b4:	7418      	strb	r0, [r3, #16]
	USB0_CTL = USB_CTL_USBENSOFEN;
    b1b6:	f883 c094 	strb.w	ip, [r3, #148]	; 0x94
	USB0_USBCTRL = 0;
    b1ba:	7021      	strb	r1, [r4, #0]
	USB0_INTEN = USB_INTEN_USBRSTEN;
    b1bc:	f883 c084 	strb.w	ip, [r3, #132]	; 0x84
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    b1c0:	2370      	movs	r3, #112	; 0x70
    b1c2:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    b1c6:	f44f 7200 	mov.w	r2, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    b1ca:	2310      	movs	r3, #16
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    b1cc:	f8ce 2108 	str.w	r2, [lr, #264]	; 0x108
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    b1d0:	7223      	strb	r3, [r4, #8]
}
    b1d2:	bd70      	pop	{r4, r5, r6, pc}
    b1d4:	1fff8000 	.word	0x1fff8000
    b1d8:	40048000 	.word	0x40048000
    b1dc:	40072000 	.word	0x40072000
    b1e0:	e000e400 	.word	0xe000e400
    b1e4:	40072100 	.word	0x40072100

0000b1e8 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    b1e8:	f000 b8ac 	b.w	b344 <usb_serial_flush_input>

0000b1ec <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    b1ec:	f000 b87c 	b.w	b2e8 <usb_serial_peekchar>

0000b1f0 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    b1f0:	f000 b856 	b.w	b2a0 <usb_serial_getchar>

0000b1f4 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    b1f4:	f000 b890 	b.w	b318 <usb_serial_available>

0000b1f8 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    b1f8:	f000 b976 	b.w	b4e8 <usb_serial_flush_output>

0000b1fc <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    b1fc:	f000 b950 	b.w	b4a0 <usb_serial_write_buffer_free>

0000b200 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    b200:	4608      	mov	r0, r1
    b202:	4611      	mov	r1, r2
    b204:	f000 b8ba 	b.w	b37c <usb_serial_write>

0000b208 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    b208:	4608      	mov	r0, r1
    b20a:	f000 b93b 	b.w	b484 <usb_serial_putchar>
    b20e:	bf00      	nop

0000b210 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    b210:	b672      	cpsid	i
	avail = usb_buffer_available;
    b212:	490d      	ldr	r1, [pc, #52]	; (b248 <usb_malloc+0x38>)
    b214:	680b      	ldr	r3, [r1, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    b216:	fab3 f083 	clz	r0, r3
	if (n >= NUM_USB_BUFFERS) {
    b21a:	280b      	cmp	r0, #11
    b21c:	dc10      	bgt.n	b240 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    b21e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    b222:	40c2      	lsrs	r2, r0
    b224:	ea23 0302 	bic.w	r3, r3, r2
    b228:	600b      	str	r3, [r1, #0]
	__enable_irq();
    b22a:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    b22c:	4a07      	ldr	r2, [pc, #28]	; (b24c <usb_malloc+0x3c>)
    b22e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    b232:	00c1      	lsls	r1, r0, #3
    b234:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    b238:	2300      	movs	r3, #0
    b23a:	5053      	str	r3, [r2, r1]
	*(uint32_t *)(p + 4) = 0;
    b23c:	6043      	str	r3, [r0, #4]
	return (usb_packet_t *)p;
}
    b23e:	4770      	bx	lr
		__enable_irq();
    b240:	b662      	cpsie	i
		return NULL;
    b242:	2000      	movs	r0, #0
    b244:	4770      	bx	lr
    b246:	bf00      	nop
    b248:	1fff881c 	.word	0x1fff881c
    b24c:	1fff83bc 	.word	0x1fff83bc

0000b250 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    b250:	4b0e      	ldr	r3, [pc, #56]	; (b28c <usb_free+0x3c>)
    b252:	1ac3      	subs	r3, r0, r3
	if (n >= NUM_USB_BUFFERS) return;
    b254:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
    b258:	d210      	bcs.n	b27c <usb_free+0x2c>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    b25a:	4a0d      	ldr	r2, [pc, #52]	; (b290 <usb_free+0x40>)
    b25c:	7812      	ldrb	r2, [r2, #0]
    b25e:	b972      	cbnz	r2, b27e <usb_free+0x2e>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    b260:	b672      	cpsid	i
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    b262:	4a0c      	ldr	r2, [pc, #48]	; (b294 <usb_free+0x44>)
	usb_buffer_available |= mask;
    b264:	490c      	ldr	r1, [pc, #48]	; (b298 <usb_free+0x48>)
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    b266:	fba2 2303 	umull	r2, r3, r2, r3
	usb_buffer_available |= mask;
    b26a:	6808      	ldr	r0, [r1, #0]
	mask = (0x80000000 >> n);
    b26c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    b270:	091b      	lsrs	r3, r3, #4
	mask = (0x80000000 >> n);
    b272:	fa22 f303 	lsr.w	r3, r2, r3
	usb_buffer_available |= mask;
    b276:	4303      	orrs	r3, r0
    b278:	600b      	str	r3, [r1, #0]
	__enable_irq();
    b27a:	b662      	cpsie	i

	//serial_print("free:");
	//serial_phex32((int)p);
	//serial_print("\n");
}
    b27c:	4770      	bx	lr
	if (usb_rx_memory_needed && usb_configuration) {
    b27e:	4a07      	ldr	r2, [pc, #28]	; (b29c <usb_free+0x4c>)
    b280:	7812      	ldrb	r2, [r2, #0]
    b282:	2a00      	cmp	r2, #0
    b284:	d0ec      	beq.n	b260 <usb_free+0x10>
		usb_rx_memory(p);
    b286:	f7ff bb2d 	b.w	a8e4 <usb_rx_memory>
    b28a:	bf00      	nop
    b28c:	1fff83bc 	.word	0x1fff83bc
    b290:	1fffb6e4 	.word	0x1fffb6e4
    b294:	38e38e39 	.word	0x38e38e39
    b298:	1fff881c 	.word	0x1fff881c
    b29c:	1fffb6d8 	.word	0x1fffb6d8

0000b2a0 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    b2a0:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    b2a2:	4c0f      	ldr	r4, [pc, #60]	; (b2e0 <usb_serial_getchar+0x40>)
    b2a4:	6820      	ldr	r0, [r4, #0]
    b2a6:	b178      	cbz	r0, b2c8 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    b2a8:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    b2aa:	8802      	ldrh	r2, [r0, #0]
	c = rx_packet->buf[i++];
    b2ac:	18c1      	adds	r1, r0, r3
    b2ae:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    b2b0:	429a      	cmp	r2, r3
	c = rx_packet->buf[i++];
    b2b2:	7a0d      	ldrb	r5, [r1, #8]
	if (i >= rx_packet->len) {
    b2b4:	d902      	bls.n	b2bc <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    b2b6:	8043      	strh	r3, [r0, #2]
	}
	return c;
}
    b2b8:	4628      	mov	r0, r5
    b2ba:	bd38      	pop	{r3, r4, r5, pc}
		usb_free(rx_packet);
    b2bc:	f7ff ffc8 	bl	b250 <usb_free>
		rx_packet = NULL;
    b2c0:	2300      	movs	r3, #0
    b2c2:	6023      	str	r3, [r4, #0]
}
    b2c4:	4628      	mov	r0, r5
    b2c6:	bd38      	pop	{r3, r4, r5, pc}
		if (!usb_configuration) return -1;
    b2c8:	4b06      	ldr	r3, [pc, #24]	; (b2e4 <usb_serial_getchar+0x44>)
    b2ca:	781b      	ldrb	r3, [r3, #0]
    b2cc:	b12b      	cbz	r3, b2da <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    b2ce:	2003      	movs	r0, #3
    b2d0:	f7ff fad0 	bl	a874 <usb_rx>
    b2d4:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    b2d6:	2800      	cmp	r0, #0
    b2d8:	d1e6      	bne.n	b2a8 <usb_serial_getchar+0x8>
		if (!usb_configuration) return -1;
    b2da:	f04f 35ff 	mov.w	r5, #4294967295
    b2de:	e7eb      	b.n	b2b8 <usb_serial_getchar+0x18>
    b2e0:	1fffb6e8 	.word	0x1fffb6e8
    b2e4:	1fffb6d8 	.word	0x1fffb6d8

0000b2e8 <usb_serial_peekchar>:

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    b2e8:	b510      	push	{r4, lr}
	if (!rx_packet) {
    b2ea:	4c09      	ldr	r4, [pc, #36]	; (b310 <usb_serial_peekchar+0x28>)
    b2ec:	6820      	ldr	r0, [r4, #0]
    b2ee:	b118      	cbz	r0, b2f8 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    b2f0:	8843      	ldrh	r3, [r0, #2]
    b2f2:	4418      	add	r0, r3
    b2f4:	7a00      	ldrb	r0, [r0, #8]
}
    b2f6:	bd10      	pop	{r4, pc}
		if (!usb_configuration) return -1;
    b2f8:	4b06      	ldr	r3, [pc, #24]	; (b314 <usb_serial_peekchar+0x2c>)
    b2fa:	781b      	ldrb	r3, [r3, #0]
    b2fc:	b12b      	cbz	r3, b30a <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    b2fe:	2003      	movs	r0, #3
    b300:	f7ff fab8 	bl	a874 <usb_rx>
    b304:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    b306:	2800      	cmp	r0, #0
    b308:	d1f2      	bne.n	b2f0 <usb_serial_peekchar+0x8>
		if (!usb_configuration) return -1;
    b30a:	f04f 30ff 	mov.w	r0, #4294967295
}
    b30e:	bd10      	pop	{r4, pc}
    b310:	1fffb6e8 	.word	0x1fffb6e8
    b314:	1fffb6d8 	.word	0x1fffb6d8

0000b318 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    b318:	4b08      	ldr	r3, [pc, #32]	; (b33c <usb_serial_available+0x24>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    b31a:	4a09      	ldr	r2, [pc, #36]	; (b340 <usb_serial_available+0x28>)
    b31c:	681b      	ldr	r3, [r3, #0]
{
    b31e:	b510      	push	{r4, lr}
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    b320:	8894      	ldrh	r4, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    b322:	b11b      	cbz	r3, b32c <usb_serial_available+0x14>
    b324:	881a      	ldrh	r2, [r3, #0]
    b326:	885b      	ldrh	r3, [r3, #2]
    b328:	1ad3      	subs	r3, r2, r3
    b32a:	441c      	add	r4, r3
	if (count == 0) yield();
    b32c:	b10c      	cbz	r4, b332 <usb_serial_available+0x1a>
	return count;
}
    b32e:	4620      	mov	r0, r4
    b330:	bd10      	pop	{r4, pc}
	if (count == 0) yield();
    b332:	f000 f929 	bl	b588 <yield>
}
    b336:	4620      	mov	r0, r4
    b338:	bd10      	pop	{r4, pc}
    b33a:	bf00      	nop
    b33c:	1fffb6e8 	.word	0x1fffb6e8
    b340:	1fffb6dc 	.word	0x1fffb6dc

0000b344 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    b344:	4b0b      	ldr	r3, [pc, #44]	; (b374 <usb_serial_flush_input+0x30>)
    b346:	781b      	ldrb	r3, [r3, #0]
    b348:	b19b      	cbz	r3, b372 <usb_serial_flush_input+0x2e>
{
    b34a:	b510      	push	{r4, lr}
	if (rx_packet) {
    b34c:	4c0a      	ldr	r4, [pc, #40]	; (b378 <usb_serial_flush_input+0x34>)
    b34e:	6820      	ldr	r0, [r4, #0]
    b350:	b148      	cbz	r0, b366 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    b352:	f7ff ff7d 	bl	b250 <usb_free>
		rx_packet = NULL;
    b356:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    b358:	2003      	movs	r0, #3
		rx_packet = NULL;
    b35a:	6023      	str	r3, [r4, #0]
		rx = usb_rx(CDC_RX_ENDPOINT);
    b35c:	f7ff fa8a 	bl	a874 <usb_rx>
		if (!rx) break;
    b360:	b130      	cbz	r0, b370 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    b362:	f7ff ff75 	bl	b250 <usb_free>
		rx = usb_rx(CDC_RX_ENDPOINT);
    b366:	2003      	movs	r0, #3
    b368:	f7ff fa84 	bl	a874 <usb_rx>
		if (!rx) break;
    b36c:	2800      	cmp	r0, #0
    b36e:	d1f8      	bne.n	b362 <usb_serial_flush_input+0x1e>
	}
}
    b370:	bd10      	pop	{r4, pc}
    b372:	4770      	bx	lr
    b374:	1fffb6d8 	.word	0x1fffb6d8
    b378:	1fffb6e8 	.word	0x1fffb6e8

0000b37c <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    b37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    b380:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b470 <usb_serial_write+0xf4>
{
    b384:	b083      	sub	sp, #12
	tx_noautoflush = 1;
    b386:	2201      	movs	r2, #1
    b388:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    b38c:	9101      	str	r1, [sp, #4]
    b38e:	b379      	cbz	r1, b3f0 <usb_serial_write+0x74>
    b390:	4f38      	ldr	r7, [pc, #224]	; (b474 <usb_serial_write+0xf8>)
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    b392:	f8df 80e4 	ldr.w	r8, [pc, #228]	; b478 <usb_serial_write+0xfc>
	while (size > 0) {
    b396:	9d01      	ldr	r5, [sp, #4]
    b398:	4e38      	ldr	r6, [pc, #224]	; (b47c <usb_serial_write+0x100>)
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    b39a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; b480 <usb_serial_write+0x104>
    b39e:	4683      	mov	fp, r0
		if (!tx_packet) {
    b3a0:	6839      	ldr	r1, [r7, #0]
    b3a2:	b3a1      	cbz	r1, b40e <usb_serial_write+0x92>
		len = CDC_TX_SIZE - tx_packet->index;
    b3a4:	f8b1 e002 	ldrh.w	lr, [r1, #2]
    b3a8:	f1ce 0c40 	rsb	ip, lr, #64	; 0x40
    b3ac:	45ac      	cmp	ip, r5
    b3ae:	bf28      	it	cs
    b3b0:	46ac      	movcs	ip, r5
		tx_packet->index += len;
    b3b2:	eb0e 040c 	add.w	r4, lr, ip
		transmit_previous_timeout = 0;
    b3b6:	2200      	movs	r2, #0
		tx_packet->index += len;
    b3b8:	b2a4      	uxth	r4, r4
		transmit_previous_timeout = 0;
    b3ba:	7032      	strb	r2, [r6, #0]
		size -= len;
    b3bc:	eba5 050c 	sub.w	r5, r5, ip
		tx_packet->index += len;
    b3c0:	804c      	strh	r4, [r1, #2]
		dest = tx_packet->buf + tx_packet->index;
    b3c2:	f101 0208 	add.w	r2, r1, #8
		while (len-- > 0) *dest++ = *src++;
    b3c6:	f1bc 0f00 	cmp.w	ip, #0
    b3ca:	d00a      	beq.n	b3e2 <usb_serial_write+0x66>
    b3cc:	f10e 3eff 	add.w	lr, lr, #4294967295
    b3d0:	4472      	add	r2, lr
    b3d2:	44dc      	add	ip, fp
    b3d4:	f81b 4b01 	ldrb.w	r4, [fp], #1
    b3d8:	f802 4f01 	strb.w	r4, [r2, #1]!
    b3dc:	45dc      	cmp	ip, fp
    b3de:	d1f9      	bne.n	b3d4 <usb_serial_write+0x58>
		if (tx_packet->index >= CDC_TX_SIZE) {
    b3e0:	884c      	ldrh	r4, [r1, #2]
    b3e2:	2c3f      	cmp	r4, #63	; 0x3f
    b3e4:	d80b      	bhi.n	b3fe <usb_serial_write+0x82>
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    b3e6:	2205      	movs	r2, #5
    b3e8:	f88a 2000 	strb.w	r2, [sl]
	while (size > 0) {
    b3ec:	2d00      	cmp	r5, #0
    b3ee:	d1d7      	bne.n	b3a0 <usb_serial_write+0x24>
	}
	tx_noautoflush = 0;
	return ret;
    b3f0:	9801      	ldr	r0, [sp, #4]
	tx_noautoflush = 0;
    b3f2:	2300      	movs	r3, #0
    b3f4:	f889 3000 	strb.w	r3, [r9]
}
    b3f8:	b003      	add	sp, #12
    b3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx_packet->len = CDC_TX_SIZE;
    b3fe:	2240      	movs	r2, #64	; 0x40
    b400:	800a      	strh	r2, [r1, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    b402:	2004      	movs	r0, #4
    b404:	f7ff faae 	bl	a964 <usb_tx>
			tx_packet = NULL;
    b408:	2200      	movs	r2, #0
    b40a:	603a      	str	r2, [r7, #0]
    b40c:	e7eb      	b.n	b3e6 <usb_serial_write+0x6a>
				if (!usb_configuration) {
    b40e:	f898 2000 	ldrb.w	r2, [r8]
    b412:	b32a      	cbz	r2, b460 <usb_serial_write+0xe4>
    b414:	f24a 24f9 	movw	r4, #41721	; 0xa2f9
    b418:	e008      	b.n	b42c <usb_serial_write+0xb0>
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    b41a:	3c01      	subs	r4, #1
    b41c:	d019      	beq.n	b452 <usb_serial_write+0xd6>
    b41e:	7832      	ldrb	r2, [r6, #0]
    b420:	b9ba      	cbnz	r2, b452 <usb_serial_write+0xd6>
				yield();
    b422:	f000 f8b1 	bl	b588 <yield>
				if (!usb_configuration) {
    b426:	f898 2000 	ldrb.w	r2, [r8]
    b42a:	b1ca      	cbz	r2, b460 <usb_serial_write+0xe4>
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    b42c:	2004      	movs	r0, #4
    b42e:	f7ff fa43 	bl	a8b8 <usb_tx_packet_count>
    b432:	2807      	cmp	r0, #7
    b434:	d8f1      	bhi.n	b41a <usb_serial_write+0x9e>
					tx_noautoflush = 1;
    b436:	f04f 0301 	mov.w	r3, #1
    b43a:	f889 3000 	strb.w	r3, [r9]
					tx_packet = usb_malloc();
    b43e:	f7ff fee7 	bl	b210 <usb_malloc>
    b442:	4601      	mov	r1, r0
    b444:	6038      	str	r0, [r7, #0]
					if (tx_packet) break;
    b446:	2800      	cmp	r0, #0
    b448:	d1ac      	bne.n	b3a4 <usb_serial_write+0x28>
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    b44a:	3c01      	subs	r4, #1
					tx_noautoflush = 0;
    b44c:	f889 0000 	strb.w	r0, [r9]
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    b450:	d1e5      	bne.n	b41e <usb_serial_write+0xa2>
					transmit_previous_timeout = 1;
    b452:	2301      	movs	r3, #1
					return -1;
    b454:	f04f 30ff 	mov.w	r0, #4294967295
					transmit_previous_timeout = 1;
    b458:	7033      	strb	r3, [r6, #0]
}
    b45a:	b003      	add	sp, #12
    b45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					tx_noautoflush = 0;
    b460:	2300      	movs	r3, #0
					return -1;
    b462:	f04f 30ff 	mov.w	r0, #4294967295
					tx_noautoflush = 0;
    b466:	f889 3000 	strb.w	r3, [r9]
}
    b46a:	b003      	add	sp, #12
    b46c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b470:	1fffb6ed 	.word	0x1fffb6ed
    b474:	1fffb6f0 	.word	0x1fffb6f0
    b478:	1fffb6d8 	.word	0x1fffb6d8
    b47c:	1fffb6ec 	.word	0x1fffb6ec
    b480:	1fffb704 	.word	0x1fffb704

0000b484 <usb_serial_putchar>:
{
    b484:	b500      	push	{lr}
    b486:	b083      	sub	sp, #12
    b488:	4603      	mov	r3, r0
	return usb_serial_write(&c, 1);
    b48a:	2101      	movs	r1, #1
    b48c:	f10d 0007 	add.w	r0, sp, #7
{
    b490:	f88d 3007 	strb.w	r3, [sp, #7]
	return usb_serial_write(&c, 1);
    b494:	f7ff ff72 	bl	b37c <usb_serial_write>
}
    b498:	b003      	add	sp, #12
    b49a:	f85d fb04 	ldr.w	pc, [sp], #4
    b49e:	bf00      	nop

0000b4a0 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    b4a0:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    b4a2:	4d0e      	ldr	r5, [pc, #56]	; (b4dc <usb_serial_write_buffer_free+0x3c>)
	tx_noautoflush = 1;
    b4a4:	4c0e      	ldr	r4, [pc, #56]	; (b4e0 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    b4a6:	6828      	ldr	r0, [r5, #0]
	tx_noautoflush = 1;
    b4a8:	2301      	movs	r3, #1
    b4aa:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    b4ac:	b128      	cbz	r0, b4ba <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    b4ae:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    b4b0:	2300      	movs	r3, #0
	len = CDC_TX_SIZE - tx_packet->index;
    b4b2:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	tx_noautoflush = 0;
    b4b6:	7023      	strb	r3, [r4, #0]
	return len;
}
    b4b8:	bd38      	pop	{r3, r4, r5, pc}
		if (!usb_configuration ||
    b4ba:	4b0a      	ldr	r3, [pc, #40]	; (b4e4 <usb_serial_write_buffer_free+0x44>)
    b4bc:	781b      	ldrb	r3, [r3, #0]
    b4be:	b913      	cbnz	r3, b4c6 <usb_serial_write_buffer_free+0x26>
			tx_noautoflush = 0;
    b4c0:	2000      	movs	r0, #0
    b4c2:	7020      	strb	r0, [r4, #0]
}
    b4c4:	bd38      	pop	{r3, r4, r5, pc}
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    b4c6:	2004      	movs	r0, #4
    b4c8:	f7ff f9f6 	bl	a8b8 <usb_tx_packet_count>
		if (!usb_configuration ||
    b4cc:	2807      	cmp	r0, #7
    b4ce:	d8f7      	bhi.n	b4c0 <usb_serial_write_buffer_free+0x20>
		  (tx_packet = usb_malloc()) == NULL) {
    b4d0:	f7ff fe9e 	bl	b210 <usb_malloc>
    b4d4:	6028      	str	r0, [r5, #0]
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    b4d6:	2800      	cmp	r0, #0
    b4d8:	d1e9      	bne.n	b4ae <usb_serial_write_buffer_free+0xe>
    b4da:	e7f1      	b.n	b4c0 <usb_serial_write_buffer_free+0x20>
    b4dc:	1fffb6f0 	.word	0x1fffb6f0
    b4e0:	1fffb6ed 	.word	0x1fffb6ed
    b4e4:	1fffb6d8 	.word	0x1fffb6d8

0000b4e8 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    b4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    b4ea:	4b11      	ldr	r3, [pc, #68]	; (b530 <usb_serial_flush_output+0x48>)
    b4ec:	781b      	ldrb	r3, [r3, #0]
    b4ee:	b18b      	cbz	r3, b514 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    b4f0:	4e10      	ldr	r6, [pc, #64]	; (b534 <usb_serial_flush_output+0x4c>)
	tx_noautoflush = 1;
    b4f2:	4d11      	ldr	r5, [pc, #68]	; (b538 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    b4f4:	6834      	ldr	r4, [r6, #0]
	tx_noautoflush = 1;
    b4f6:	2701      	movs	r7, #1
    b4f8:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    b4fa:	b164      	cbz	r4, b516 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    b4fc:	4b0f      	ldr	r3, [pc, #60]	; (b53c <usb_serial_flush_output+0x54>)
    b4fe:	2700      	movs	r7, #0
    b500:	701f      	strb	r7, [r3, #0]
		tx_packet->len = tx_packet->index;
    b502:	8863      	ldrh	r3, [r4, #2]
    b504:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    b506:	4621      	mov	r1, r4
    b508:	2004      	movs	r0, #4
    b50a:	f7ff fa2b 	bl	a964 <usb_tx>
		tx_packet = NULL;
    b50e:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    b510:	2300      	movs	r3, #0
    b512:	702b      	strb	r3, [r5, #0]
}
    b514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_packet_t *tx = usb_malloc();
    b516:	f7ff fe7b 	bl	b210 <usb_malloc>
			usb_cdc_transmit_flush_timer = 0;
    b51a:	4b08      	ldr	r3, [pc, #32]	; (b53c <usb_serial_flush_output+0x54>)
		if (tx) {
    b51c:	4601      	mov	r1, r0
    b51e:	b120      	cbz	r0, b52a <usb_serial_flush_output+0x42>
			usb_tx(CDC_TX_ENDPOINT, tx);
    b520:	2004      	movs	r0, #4
			usb_cdc_transmit_flush_timer = 0;
    b522:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    b524:	f7ff fa1e 	bl	a964 <usb_tx>
    b528:	e7f2      	b.n	b510 <usb_serial_flush_output+0x28>
			usb_cdc_transmit_flush_timer = 1;
    b52a:	701f      	strb	r7, [r3, #0]
    b52c:	e7f0      	b.n	b510 <usb_serial_flush_output+0x28>
    b52e:	bf00      	nop
    b530:	1fffb6d8 	.word	0x1fffb6d8
    b534:	1fffb6f0 	.word	0x1fffb6f0
    b538:	1fffb6ed 	.word	0x1fffb6ed
    b53c:	1fffb704 	.word	0x1fffb704

0000b540 <usb_serial_flush_callback>:

void usb_serial_flush_callback(void)
{
    b540:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    b542:	4b0e      	ldr	r3, [pc, #56]	; (b57c <usb_serial_flush_callback+0x3c>)
    b544:	781b      	ldrb	r3, [r3, #0]
    b546:	b953      	cbnz	r3, b55e <usb_serial_flush_callback+0x1e>
	if (tx_packet) {
    b548:	4c0d      	ldr	r4, [pc, #52]	; (b580 <usb_serial_flush_callback+0x40>)
    b54a:	6821      	ldr	r1, [r4, #0]
    b54c:	b141      	cbz	r1, b560 <usb_serial_flush_callback+0x20>
    b54e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    b552:	884b      	ldrh	r3, [r1, #2]
    b554:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    b556:	2004      	movs	r0, #4
    b558:	f7ff fa04 	bl	a964 <usb_tx>
		tx_packet = NULL;
    b55c:	6025      	str	r5, [r4, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    b55e:	bd38      	pop	{r3, r4, r5, pc}
		usb_packet_t *tx = usb_malloc();
    b560:	f7ff fe56 	bl	b210 <usb_malloc>
		if (tx) {
    b564:	4601      	mov	r1, r0
    b566:	b120      	cbz	r0, b572 <usb_serial_flush_callback+0x32>
}
    b568:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			usb_tx(CDC_TX_ENDPOINT, tx);
    b56c:	2004      	movs	r0, #4
    b56e:	f7ff b9f9 	b.w	a964 <usb_tx>
			usb_cdc_transmit_flush_timer = 1;
    b572:	4b04      	ldr	r3, [pc, #16]	; (b584 <usb_serial_flush_callback+0x44>)
    b574:	2201      	movs	r2, #1
    b576:	701a      	strb	r2, [r3, #0]
}
    b578:	bd38      	pop	{r3, r4, r5, pc}
    b57a:	bf00      	nop
    b57c:	1fffb6ed 	.word	0x1fffb6ed
    b580:	1fffb6f0 	.word	0x1fffb6f0
    b584:	1fffb704 	.word	0x1fffb704

0000b588 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    b588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    b58c:	4e32      	ldr	r6, [pc, #200]	; (b658 <yield+0xd0>)
    b58e:	7833      	ldrb	r3, [r6, #0]
    b590:	b163      	cbz	r3, b5ac <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    b592:	4f32      	ldr	r7, [pc, #200]	; (b65c <yield+0xd4>)
    b594:	783a      	ldrb	r2, [r7, #0]
    b596:	b94a      	cbnz	r2, b5ac <yield+0x24>
	running = 1;
    b598:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    b59a:	07d9      	lsls	r1, r3, #31
	running = 1;
    b59c:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    b59e:	d443      	bmi.n	b628 <yield+0xa0>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    b5a0:	079a      	lsls	r2, r3, #30
    b5a2:	d426      	bmi.n	b5f2 <yield+0x6a>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    b5a4:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    b5a6:	075b      	lsls	r3, r3, #29
	running = 0;
    b5a8:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    b5aa:	d401      	bmi.n	b5b0 <yield+0x28>
	
};
    b5ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    b5b0:	4b2b      	ldr	r3, [pc, #172]	; (b660 <yield+0xd8>)
    b5b2:	681a      	ldr	r2, [r3, #0]
    b5b4:	2a00      	cmp	r2, #0
    b5b6:	d0f9      	beq.n	b5ac <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    b5b8:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    b5bc:	2a00      	cmp	r2, #0
    b5be:	d1f5      	bne.n	b5ac <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b5c0:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    b5c4:	b672      	cpsid	i
		EventResponder *first = firstYield;
    b5c6:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    b5c8:	2800      	cmp	r0, #0
    b5ca:	d03a      	beq.n	b642 <yield+0xba>
		if (runningFromYield) {
    b5cc:	4c25      	ldr	r4, [pc, #148]	; (b664 <yield+0xdc>)
    b5ce:	7821      	ldrb	r1, [r4, #0]
    b5d0:	2900      	cmp	r1, #0
    b5d2:	d136      	bne.n	b642 <yield+0xba>
		firstYield = first->_next;
    b5d4:	6942      	ldr	r2, [r0, #20]
    b5d6:	601a      	str	r2, [r3, #0]
		runningFromYield = true;
    b5d8:	2301      	movs	r3, #1
    b5da:	7023      	strb	r3, [r4, #0]
		if (firstYield) {
    b5dc:	2a00      	cmp	r2, #0
    b5de:	d037      	beq.n	b650 <yield+0xc8>
			firstYield->_prev = nullptr;
    b5e0:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    b5e2:	b905      	cbnz	r5, b5e6 <yield+0x5e>
    b5e4:	b662      	cpsie	i
		first->_triggered = false;
    b5e6:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    b5e8:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    b5ea:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    b5ec:	4798      	blx	r3
		runningFromYield = false;
    b5ee:	7025      	strb	r5, [r4, #0]
    b5f0:	e7dc      	b.n	b5ac <yield+0x24>
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    b5f2:	f8df 8074 	ldr.w	r8, [pc, #116]	; b668 <yield+0xe0>
    b5f6:	f898 2000 	ldrb.w	r2, [r8]
    b5fa:	2a00      	cmp	r2, #0
    b5fc:	d0d2      	beq.n	b5a4 <yield+0x1c>
    b5fe:	2500      	movs	r5, #0
    b600:	f8df 9068 	ldr.w	r9, [pc, #104]	; b66c <yield+0xe4>
    b604:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    b606:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		if (available()) (*_serialEvent)();
    b60a:	6823      	ldr	r3, [r4, #0]
    b60c:	4620      	mov	r0, r4
    b60e:	691b      	ldr	r3, [r3, #16]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    b610:	3501      	adds	r5, #1
		if (available()) (*_serialEvent)();
    b612:	4798      	blx	r3
    b614:	b108      	cbz	r0, b61a <yield+0x92>
    b616:	6923      	ldr	r3, [r4, #16]
    b618:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    b61a:	f898 2000 	ldrb.w	r2, [r8]
    b61e:	b2eb      	uxtb	r3, r5
    b620:	429a      	cmp	r2, r3
    b622:	d8f0      	bhi.n	b606 <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    b624:	7833      	ldrb	r3, [r6, #0]
    b626:	e7bd      	b.n	b5a4 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    b628:	f7ff fe76 	bl	b318 <usb_serial_available>
		if (Serial.available()) serialEvent();
    b62c:	b968      	cbnz	r0, b64a <yield+0xc2>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    b62e:	4b10      	ldr	r3, [pc, #64]	; (b670 <yield+0xe8>)
    b630:	781b      	ldrb	r3, [r3, #0]
    b632:	b90b      	cbnz	r3, b638 <yield+0xb0>
    b634:	7833      	ldrb	r3, [r6, #0]
    b636:	e7b3      	b.n	b5a0 <yield+0x18>
    b638:	7833      	ldrb	r3, [r6, #0]
    b63a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    b63e:	7033      	strb	r3, [r6, #0]
    b640:	e7ae      	b.n	b5a0 <yield+0x18>
		if (doit) __enable_irq();
    b642:	2d00      	cmp	r5, #0
    b644:	d1b2      	bne.n	b5ac <yield+0x24>
    b646:	b662      	cpsie	i
    b648:	e7b0      	b.n	b5ac <yield+0x24>
		if (Serial.available()) serialEvent();
    b64a:	f000 f83d 	bl	b6c8 <serialEvent()>
    b64e:	e7ee      	b.n	b62e <yield+0xa6>
			lastYield = nullptr;
    b650:	4b08      	ldr	r3, [pc, #32]	; (b674 <yield+0xec>)
    b652:	601a      	str	r2, [r3, #0]
    b654:	e7c5      	b.n	b5e2 <yield+0x5a>
    b656:	bf00      	nop
    b658:	1fff8820 	.word	0x1fff8820
    b65c:	1fffb705 	.word	0x1fffb705
    b660:	1fffb4c8 	.word	0x1fffb4c8
    b664:	1fffb4d4 	.word	0x1fffb4d4
    b668:	1fffb714 	.word	0x1fffb714
    b66c:	1fffb708 	.word	0x1fffb708
    b670:	00014400 	.word	0x00014400
    b674:	1fffb4d8 	.word	0x1fffb4d8

0000b678 <HardwareSerial::addToSerialEventsList()>:
HardwareSerial 	*HardwareSerial::s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
uint8_t 		HardwareSerial::s_count_serials_with_serial_events = 0;

// simple helper function that add us to the list of Serial ports that have
// their own serialEvent code defined that needs to be called at yield.
void HardwareSerial::addToSerialEventsList() {
    b678:	b470      	push	{r4, r5, r6}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    b67a:	4e10      	ldr	r6, [pc, #64]	; (b6bc <HardwareSerial::addToSerialEventsList()+0x44>)
    b67c:	4d10      	ldr	r5, [pc, #64]	; (b6c0 <HardwareSerial::addToSerialEventsList()+0x48>)
    b67e:	7834      	ldrb	r4, [r6, #0]
    b680:	b1d4      	cbz	r4, b6b8 <HardwareSerial::addToSerialEventsList()+0x40>
    b682:	1e62      	subs	r2, r4, #1
    b684:	b2d2      	uxtb	r2, r2
    b686:	1d29      	adds	r1, r5, #4
    b688:	462b      	mov	r3, r5
    b68a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    b68e:	e001      	b.n	b694 <HardwareSerial::addToSerialEventsList()+0x1c>
    b690:	428b      	cmp	r3, r1
    b692:	d005      	beq.n	b6a0 <HardwareSerial::addToSerialEventsList()+0x28>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    b694:	f853 2b04 	ldr.w	r2, [r3], #4
    b698:	4282      	cmp	r2, r0
    b69a:	d1f9      	bne.n	b690 <HardwareSerial::addToSerialEventsList()+0x18>
	}

	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
}
    b69c:	bc70      	pop	{r4, r5, r6}
    b69e:	4770      	bx	lr
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    b6a0:	1c63      	adds	r3, r4, #1
    b6a2:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    b6a4:	4a07      	ldr	r2, [pc, #28]	; (b6c4 <HardwareSerial::addToSerialEventsList()+0x4c>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    b6a6:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    b6a8:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    b6aa:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    b6ae:	f043 0302 	orr.w	r3, r3, #2
    b6b2:	7013      	strb	r3, [r2, #0]
}
    b6b4:	bc70      	pop	{r4, r5, r6}
    b6b6:	4770      	bx	lr
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    b6b8:	2301      	movs	r3, #1
    b6ba:	e7f3      	b.n	b6a4 <HardwareSerial::addToSerialEventsList()+0x2c>
    b6bc:	1fffb714 	.word	0x1fffb714
    b6c0:	1fffb708 	.word	0x1fffb708
    b6c4:	1fff8820 	.word	0x1fff8820

0000b6c8 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    b6c8:	4770      	bx	lr
    b6ca:	bf00      	nop

0000b6cc <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    b6cc:	b510      	push	{r4, lr}
    b6ce:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    b6d0:	b672      	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    b6d2:	4a17      	ldr	r2, [pc, #92]	; (b730 <usb_init_serialnumber+0x64>)
    b6d4:	2470      	movs	r4, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    b6d6:	2041      	movs	r0, #65	; 0x41
	FTFL_FCCOB1 = 15;
    b6d8:	210f      	movs	r1, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    b6da:	2380      	movs	r3, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    b6dc:	7014      	strb	r4, [r2, #0]
	FTFL_FCCOB0 = 0x41;
    b6de:	71d0      	strb	r0, [r2, #7]
	FTFL_FCCOB1 = 15;
    b6e0:	7191      	strb	r1, [r2, #6]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    b6e2:	7013      	strb	r3, [r2, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    b6e4:	7813      	ldrb	r3, [r2, #0]
    b6e6:	061b      	lsls	r3, r3, #24
    b6e8:	d5fc      	bpl.n	b6e4 <usb_init_serialnumber+0x18>
	num = *(uint32_t *)&FTFL_FCCOB7;
    b6ea:	6890      	ldr	r0, [r2, #8]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    b6ec:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    b6ee:	4b11      	ldr	r3, [pc, #68]	; (b734 <usb_init_serialnumber+0x68>)
    b6f0:	4c11      	ldr	r4, [pc, #68]	; (b738 <usb_init_serialnumber+0x6c>)
    b6f2:	4298      	cmp	r0, r3
    b6f4:	bf38      	it	cc
    b6f6:	eb00 0080 	addcc.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    b6fa:	a901      	add	r1, sp, #4
	if (num < 10000000) num = num * 10;
    b6fc:	bf38      	it	cc
    b6fe:	0040      	lslcc	r0, r0, #1
	ultoa(num, buf, 10);
    b700:	220a      	movs	r2, #10
    b702:	f7fd fd9f 	bl	9244 <ultoa>
	for (i=0; i<10; i++) {
    b706:	a901      	add	r1, sp, #4
    b708:	4620      	mov	r0, r4
    b70a:	2300      	movs	r3, #0
		char c = buf[i];
    b70c:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    b710:	3301      	adds	r3, #1
		if (!c) break;
    b712:	b13a      	cbz	r2, b724 <usb_init_serialnumber+0x58>
	for (i=0; i<10; i++) {
    b714:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    b716:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    b71a:	d1f7      	bne.n	b70c <usb_init_serialnumber+0x40>
    b71c:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    b71e:	7023      	strb	r3, [r4, #0]
}
    b720:	b004      	add	sp, #16
    b722:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    b724:	005b      	lsls	r3, r3, #1
    b726:	b2db      	uxtb	r3, r3
    b728:	7023      	strb	r3, [r4, #0]
}
    b72a:	b004      	add	sp, #16
    b72c:	bd10      	pop	{r4, pc}
    b72e:	bf00      	nop
    b730:	40020000 	.word	0x40020000
    b734:	00989680 	.word	0x00989680
    b738:	1fff88b0 	.word	0x1fff88b0

0000b73c <expf>:
    b73c:	b538      	push	{r3, r4, r5, lr}
    b73e:	4604      	mov	r4, r0
    b740:	f000 f82c 	bl	b79c <__ieee754_expf>
    b744:	4605      	mov	r5, r0
    b746:	4620      	mov	r0, r4
    b748:	f000 f820 	bl	b78c <finitef>
    b74c:	b148      	cbz	r0, b762 <expf+0x26>
    b74e:	490d      	ldr	r1, [pc, #52]	; (b784 <expf+0x48>)
    b750:	4620      	mov	r0, r4
    b752:	f000 feaf 	bl	c4b4 <__aeabi_fcmpgt>
    b756:	b930      	cbnz	r0, b766 <expf+0x2a>
    b758:	490b      	ldr	r1, [pc, #44]	; (b788 <expf+0x4c>)
    b75a:	4620      	mov	r0, r4
    b75c:	f000 fe8c 	bl	c478 <__aeabi_fcmplt>
    b760:	b948      	cbnz	r0, b776 <expf+0x3a>
    b762:	4628      	mov	r0, r5
    b764:	bd38      	pop	{r3, r4, r5, pc}
    b766:	f001 fe5b 	bl	d420 <__errno>
    b76a:	f04f 45ff 	mov.w	r5, #2139095040	; 0x7f800000
    b76e:	2322      	movs	r3, #34	; 0x22
    b770:	6003      	str	r3, [r0, #0]
    b772:	4628      	mov	r0, r5
    b774:	bd38      	pop	{r3, r4, r5, pc}
    b776:	f001 fe53 	bl	d420 <__errno>
    b77a:	2322      	movs	r3, #34	; 0x22
    b77c:	2500      	movs	r5, #0
    b77e:	6003      	str	r3, [r0, #0]
    b780:	e7ef      	b.n	b762 <expf+0x26>
    b782:	bf00      	nop
    b784:	42b17217 	.word	0x42b17217
    b788:	c2cff1b5 	.word	0xc2cff1b5

0000b78c <finitef>:
    b78c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    b790:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
    b794:	bfac      	ite	ge
    b796:	2000      	movge	r0, #0
    b798:	2001      	movlt	r0, #1
    b79a:	4770      	bx	lr

0000b79c <__ieee754_expf>:
    b79c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
    b7a0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
    b7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b7a8:	4604      	mov	r4, r0
    b7aa:	d86c      	bhi.n	b886 <__ieee754_expf+0xea>
    b7ac:	ea4f 75d0 	mov.w	r5, r0, lsr #31
    b7b0:	f000 80c6 	beq.w	b940 <__ieee754_expf+0x1a4>
    b7b4:	497a      	ldr	r1, [pc, #488]	; (b9a0 <__ieee754_expf+0x204>)
    b7b6:	4288      	cmp	r0, r1
    b7b8:	f300 80b4 	bgt.w	b924 <__ieee754_expf+0x188>
    b7bc:	2800      	cmp	r0, #0
    b7be:	f2c0 80b6 	blt.w	b92e <__ieee754_expf+0x192>
    b7c2:	4b78      	ldr	r3, [pc, #480]	; (b9a4 <__ieee754_expf+0x208>)
    b7c4:	429a      	cmp	r2, r3
    b7c6:	d963      	bls.n	b890 <__ieee754_expf+0xf4>
    b7c8:	4b77      	ldr	r3, [pc, #476]	; (b9a8 <__ieee754_expf+0x20c>)
    b7ca:	429a      	cmp	r2, r3
    b7cc:	f200 80c5 	bhi.w	b95a <__ieee754_expf+0x1be>
    b7d0:	4b76      	ldr	r3, [pc, #472]	; (b9ac <__ieee754_expf+0x210>)
    b7d2:	4620      	mov	r0, r4
    b7d4:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
    b7d8:	f000 fba6 	bl	bf28 <__aeabi_fsub>
    b7dc:	4b74      	ldr	r3, [pc, #464]	; (b9b0 <__ieee754_expf+0x214>)
    b7de:	f1c5 0601 	rsb	r6, r5, #1
    b7e2:	f853 9025 	ldr.w	r9, [r3, r5, lsl #2]
    b7e6:	4680      	mov	r8, r0
    b7e8:	1b76      	subs	r6, r6, r5
    b7ea:	4649      	mov	r1, r9
    b7ec:	4640      	mov	r0, r8
    b7ee:	f000 fb9b 	bl	bf28 <__aeabi_fsub>
    b7f2:	4601      	mov	r1, r0
    b7f4:	4605      	mov	r5, r0
    b7f6:	f000 fca1 	bl	c13c <__aeabi_fmul>
    b7fa:	496e      	ldr	r1, [pc, #440]	; (b9b4 <__ieee754_expf+0x218>)
    b7fc:	4604      	mov	r4, r0
    b7fe:	f000 fc9d 	bl	c13c <__aeabi_fmul>
    b802:	496d      	ldr	r1, [pc, #436]	; (b9b8 <__ieee754_expf+0x21c>)
    b804:	f000 fb90 	bl	bf28 <__aeabi_fsub>
    b808:	4621      	mov	r1, r4
    b80a:	f000 fc97 	bl	c13c <__aeabi_fmul>
    b80e:	496b      	ldr	r1, [pc, #428]	; (b9bc <__ieee754_expf+0x220>)
    b810:	f000 fb8c 	bl	bf2c <__addsf3>
    b814:	4621      	mov	r1, r4
    b816:	f000 fc91 	bl	c13c <__aeabi_fmul>
    b81a:	4969      	ldr	r1, [pc, #420]	; (b9c0 <__ieee754_expf+0x224>)
    b81c:	f000 fb84 	bl	bf28 <__aeabi_fsub>
    b820:	4621      	mov	r1, r4
    b822:	f000 fc8b 	bl	c13c <__aeabi_fmul>
    b826:	4967      	ldr	r1, [pc, #412]	; (b9c4 <__ieee754_expf+0x228>)
    b828:	f000 fb80 	bl	bf2c <__addsf3>
    b82c:	4621      	mov	r1, r4
    b82e:	f000 fc85 	bl	c13c <__aeabi_fmul>
    b832:	4601      	mov	r1, r0
    b834:	4628      	mov	r0, r5
    b836:	f000 fb77 	bl	bf28 <__aeabi_fsub>
    b83a:	462c      	mov	r4, r5
    b83c:	4607      	mov	r7, r0
    b83e:	4682      	mov	sl, r0
    b840:	2e00      	cmp	r6, #0
    b842:	d057      	beq.n	b8f4 <__ieee754_expf+0x158>
    b844:	4639      	mov	r1, r7
    b846:	4628      	mov	r0, r5
    b848:	f000 fc78 	bl	c13c <__aeabi_fmul>
    b84c:	4639      	mov	r1, r7
    b84e:	4604      	mov	r4, r0
    b850:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b854:	f000 fb68 	bl	bf28 <__aeabi_fsub>
    b858:	4601      	mov	r1, r0
    b85a:	4620      	mov	r0, r4
    b85c:	f000 fd22 	bl	c2a4 <__aeabi_fdiv>
    b860:	4601      	mov	r1, r0
    b862:	4648      	mov	r0, r9
    b864:	f000 fb60 	bl	bf28 <__aeabi_fsub>
    b868:	4641      	mov	r1, r8
    b86a:	f000 fb5d 	bl	bf28 <__aeabi_fsub>
    b86e:	4601      	mov	r1, r0
    b870:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    b874:	f000 fb58 	bl	bf28 <__aeabi_fsub>
    b878:	f116 0f7d 	cmn.w	r6, #125	; 0x7d
    b87c:	db64      	blt.n	b948 <__ieee754_expf+0x1ac>
    b87e:	eb00 50c6 	add.w	r0, r0, r6, lsl #23
    b882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b886:	4601      	mov	r1, r0
    b888:	f000 fb50 	bl	bf2c <__addsf3>
    b88c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b890:	f1b2 5f50 	cmp.w	r2, #872415232	; 0x34000000
    b894:	d209      	bcs.n	b8aa <__ieee754_expf+0x10e>
    b896:	494c      	ldr	r1, [pc, #304]	; (b9c8 <__ieee754_expf+0x22c>)
    b898:	4620      	mov	r0, r4
    b89a:	f000 fb47 	bl	bf2c <__addsf3>
    b89e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    b8a2:	f000 fe07 	bl	c4b4 <__aeabi_fcmpgt>
    b8a6:	2800      	cmp	r0, #0
    b8a8:	d174      	bne.n	b994 <__ieee754_expf+0x1f8>
    b8aa:	4621      	mov	r1, r4
    b8ac:	4620      	mov	r0, r4
    b8ae:	f000 fc45 	bl	c13c <__aeabi_fmul>
    b8b2:	4940      	ldr	r1, [pc, #256]	; (b9b4 <__ieee754_expf+0x218>)
    b8b4:	4605      	mov	r5, r0
    b8b6:	f000 fc41 	bl	c13c <__aeabi_fmul>
    b8ba:	493f      	ldr	r1, [pc, #252]	; (b9b8 <__ieee754_expf+0x21c>)
    b8bc:	f000 fb34 	bl	bf28 <__aeabi_fsub>
    b8c0:	4629      	mov	r1, r5
    b8c2:	f000 fc3b 	bl	c13c <__aeabi_fmul>
    b8c6:	493d      	ldr	r1, [pc, #244]	; (b9bc <__ieee754_expf+0x220>)
    b8c8:	f000 fb30 	bl	bf2c <__addsf3>
    b8cc:	4629      	mov	r1, r5
    b8ce:	f000 fc35 	bl	c13c <__aeabi_fmul>
    b8d2:	493b      	ldr	r1, [pc, #236]	; (b9c0 <__ieee754_expf+0x224>)
    b8d4:	f000 fb28 	bl	bf28 <__aeabi_fsub>
    b8d8:	4629      	mov	r1, r5
    b8da:	f000 fc2f 	bl	c13c <__aeabi_fmul>
    b8de:	4939      	ldr	r1, [pc, #228]	; (b9c4 <__ieee754_expf+0x228>)
    b8e0:	f000 fb24 	bl	bf2c <__addsf3>
    b8e4:	4629      	mov	r1, r5
    b8e6:	f000 fc29 	bl	c13c <__aeabi_fmul>
    b8ea:	4601      	mov	r1, r0
    b8ec:	4620      	mov	r0, r4
    b8ee:	f000 fb1b 	bl	bf28 <__aeabi_fsub>
    b8f2:	4682      	mov	sl, r0
    b8f4:	4651      	mov	r1, sl
    b8f6:	4620      	mov	r0, r4
    b8f8:	f000 fc20 	bl	c13c <__aeabi_fmul>
    b8fc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    b900:	4605      	mov	r5, r0
    b902:	4650      	mov	r0, sl
    b904:	f000 fb10 	bl	bf28 <__aeabi_fsub>
    b908:	4601      	mov	r1, r0
    b90a:	4628      	mov	r0, r5
    b90c:	f000 fcca 	bl	c2a4 <__aeabi_fdiv>
    b910:	4621      	mov	r1, r4
    b912:	f000 fb09 	bl	bf28 <__aeabi_fsub>
    b916:	4601      	mov	r1, r0
    b918:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    b91c:	f000 fb04 	bl	bf28 <__aeabi_fsub>
    b920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b924:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b928:	2000      	movs	r0, #0
    b92a:	f000 b87b 	b.w	ba24 <__math_oflowf>
    b92e:	4b27      	ldr	r3, [pc, #156]	; (b9cc <__ieee754_expf+0x230>)
    b930:	429a      	cmp	r2, r3
    b932:	f67f af46 	bls.w	b7c2 <__ieee754_expf+0x26>
    b936:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b93a:	2000      	movs	r0, #0
    b93c:	f000 b86e 	b.w	ba1c <__math_uflowf>
    b940:	2d00      	cmp	r5, #0
    b942:	d0a3      	beq.n	b88c <__ieee754_expf+0xf0>
    b944:	2000      	movs	r0, #0
    b946:	e7a1      	b.n	b88c <__ieee754_expf+0xf0>
    b948:	3664      	adds	r6, #100	; 0x64
    b94a:	f04f 6158 	mov.w	r1, #226492416	; 0xd800000
    b94e:	eb00 50c6 	add.w	r0, r0, r6, lsl #23
    b952:	f000 fbf3 	bl	c13c <__aeabi_fmul>
    b956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b95a:	491d      	ldr	r1, [pc, #116]	; (b9d0 <__ieee754_expf+0x234>)
    b95c:	4620      	mov	r0, r4
    b95e:	f000 fbed 	bl	c13c <__aeabi_fmul>
    b962:	4b1c      	ldr	r3, [pc, #112]	; (b9d4 <__ieee754_expf+0x238>)
    b964:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
    b968:	f000 fae0 	bl	bf2c <__addsf3>
    b96c:	f000 fdac 	bl	c4c8 <__aeabi_f2iz>
    b970:	4606      	mov	r6, r0
    b972:	f000 fb8f 	bl	c094 <__aeabi_i2f>
    b976:	4918      	ldr	r1, [pc, #96]	; (b9d8 <__ieee754_expf+0x23c>)
    b978:	4605      	mov	r5, r0
    b97a:	f000 fbdf 	bl	c13c <__aeabi_fmul>
    b97e:	4601      	mov	r1, r0
    b980:	4620      	mov	r0, r4
    b982:	f000 fad1 	bl	bf28 <__aeabi_fsub>
    b986:	4915      	ldr	r1, [pc, #84]	; (b9dc <__ieee754_expf+0x240>)
    b988:	4680      	mov	r8, r0
    b98a:	4628      	mov	r0, r5
    b98c:	f000 fbd6 	bl	c13c <__aeabi_fmul>
    b990:	4681      	mov	r9, r0
    b992:	e72a      	b.n	b7ea <__ieee754_expf+0x4e>
    b994:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    b998:	4620      	mov	r0, r4
    b99a:	f000 fac7 	bl	bf2c <__addsf3>
    b99e:	e775      	b.n	b88c <__ieee754_expf+0xf0>
    b9a0:	42b17217 	.word	0x42b17217
    b9a4:	3eb17218 	.word	0x3eb17218
    b9a8:	3f851591 	.word	0x3f851591
    b9ac:	00014688 	.word	0x00014688
    b9b0:	00014690 	.word	0x00014690
    b9b4:	3331bb4c 	.word	0x3331bb4c
    b9b8:	35ddea0e 	.word	0x35ddea0e
    b9bc:	388ab355 	.word	0x388ab355
    b9c0:	3b360b61 	.word	0x3b360b61
    b9c4:	3e2aaaab 	.word	0x3e2aaaab
    b9c8:	7149f2ca 	.word	0x7149f2ca
    b9cc:	42cff1b5 	.word	0x42cff1b5
    b9d0:	3fb8aa3b 	.word	0x3fb8aa3b
    b9d4:	00014680 	.word	0x00014680
    b9d8:	3f317180 	.word	0x3f317180
    b9dc:	3717f7d1 	.word	0x3717f7d1

0000b9e0 <with_errnof>:
    b9e0:	b538      	push	{r3, r4, r5, lr}
    b9e2:	4605      	mov	r5, r0
    b9e4:	460c      	mov	r4, r1
    b9e6:	f001 fd1b 	bl	d420 <__errno>
    b9ea:	4603      	mov	r3, r0
    b9ec:	4628      	mov	r0, r5
    b9ee:	601c      	str	r4, [r3, #0]
    b9f0:	bd38      	pop	{r3, r4, r5, pc}
    b9f2:	bf00      	nop

0000b9f4 <xflowf>:
    b9f4:	b508      	push	{r3, lr}
    b9f6:	b140      	cbz	r0, ba0a <xflowf+0x16>
    b9f8:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
    b9fc:	f000 fb9e 	bl	c13c <__aeabi_fmul>
    ba00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ba04:	2122      	movs	r1, #34	; 0x22
    ba06:	f7ff bfeb 	b.w	b9e0 <with_errnof>
    ba0a:	4608      	mov	r0, r1
    ba0c:	f000 fb96 	bl	c13c <__aeabi_fmul>
    ba10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    ba14:	2122      	movs	r1, #34	; 0x22
    ba16:	f7ff bfe3 	b.w	b9e0 <with_errnof>
    ba1a:	bf00      	nop

0000ba1c <__math_uflowf>:
    ba1c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    ba20:	f7ff bfe8 	b.w	b9f4 <xflowf>

0000ba24 <__math_oflowf>:
    ba24:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
    ba28:	f7ff bfe4 	b.w	b9f4 <xflowf>

0000ba2c <__aeabi_drsub>:
    ba2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    ba30:	e002      	b.n	ba38 <__adddf3>
    ba32:	bf00      	nop

0000ba34 <__aeabi_dsub>:
    ba34:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000ba38 <__adddf3>:
    ba38:	b530      	push	{r4, r5, lr}
    ba3a:	ea4f 0441 	mov.w	r4, r1, lsl #1
    ba3e:	ea4f 0543 	mov.w	r5, r3, lsl #1
    ba42:	ea94 0f05 	teq	r4, r5
    ba46:	bf08      	it	eq
    ba48:	ea90 0f02 	teqeq	r0, r2
    ba4c:	bf1f      	itttt	ne
    ba4e:	ea54 0c00 	orrsne.w	ip, r4, r0
    ba52:	ea55 0c02 	orrsne.w	ip, r5, r2
    ba56:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    ba5a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    ba5e:	f000 80e2 	beq.w	bc26 <__adddf3+0x1ee>
    ba62:	ea4f 5454 	mov.w	r4, r4, lsr #21
    ba66:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    ba6a:	bfb8      	it	lt
    ba6c:	426d      	neglt	r5, r5
    ba6e:	dd0c      	ble.n	ba8a <__adddf3+0x52>
    ba70:	442c      	add	r4, r5
    ba72:	ea80 0202 	eor.w	r2, r0, r2
    ba76:	ea81 0303 	eor.w	r3, r1, r3
    ba7a:	ea82 0000 	eor.w	r0, r2, r0
    ba7e:	ea83 0101 	eor.w	r1, r3, r1
    ba82:	ea80 0202 	eor.w	r2, r0, r2
    ba86:	ea81 0303 	eor.w	r3, r1, r3
    ba8a:	2d36      	cmp	r5, #54	; 0x36
    ba8c:	bf88      	it	hi
    ba8e:	bd30      	pophi	{r4, r5, pc}
    ba90:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    ba94:	ea4f 3101 	mov.w	r1, r1, lsl #12
    ba98:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    ba9c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    baa0:	d002      	beq.n	baa8 <__adddf3+0x70>
    baa2:	4240      	negs	r0, r0
    baa4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    baa8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    baac:	ea4f 3303 	mov.w	r3, r3, lsl #12
    bab0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    bab4:	d002      	beq.n	babc <__adddf3+0x84>
    bab6:	4252      	negs	r2, r2
    bab8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    babc:	ea94 0f05 	teq	r4, r5
    bac0:	f000 80a7 	beq.w	bc12 <__adddf3+0x1da>
    bac4:	f1a4 0401 	sub.w	r4, r4, #1
    bac8:	f1d5 0e20 	rsbs	lr, r5, #32
    bacc:	db0d      	blt.n	baea <__adddf3+0xb2>
    bace:	fa02 fc0e 	lsl.w	ip, r2, lr
    bad2:	fa22 f205 	lsr.w	r2, r2, r5
    bad6:	1880      	adds	r0, r0, r2
    bad8:	f141 0100 	adc.w	r1, r1, #0
    badc:	fa03 f20e 	lsl.w	r2, r3, lr
    bae0:	1880      	adds	r0, r0, r2
    bae2:	fa43 f305 	asr.w	r3, r3, r5
    bae6:	4159      	adcs	r1, r3
    bae8:	e00e      	b.n	bb08 <__adddf3+0xd0>
    baea:	f1a5 0520 	sub.w	r5, r5, #32
    baee:	f10e 0e20 	add.w	lr, lr, #32
    baf2:	2a01      	cmp	r2, #1
    baf4:	fa03 fc0e 	lsl.w	ip, r3, lr
    baf8:	bf28      	it	cs
    bafa:	f04c 0c02 	orrcs.w	ip, ip, #2
    bafe:	fa43 f305 	asr.w	r3, r3, r5
    bb02:	18c0      	adds	r0, r0, r3
    bb04:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    bb08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    bb0c:	d507      	bpl.n	bb1e <__adddf3+0xe6>
    bb0e:	f04f 0e00 	mov.w	lr, #0
    bb12:	f1dc 0c00 	rsbs	ip, ip, #0
    bb16:	eb7e 0000 	sbcs.w	r0, lr, r0
    bb1a:	eb6e 0101 	sbc.w	r1, lr, r1
    bb1e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    bb22:	d31b      	bcc.n	bb5c <__adddf3+0x124>
    bb24:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    bb28:	d30c      	bcc.n	bb44 <__adddf3+0x10c>
    bb2a:	0849      	lsrs	r1, r1, #1
    bb2c:	ea5f 0030 	movs.w	r0, r0, rrx
    bb30:	ea4f 0c3c 	mov.w	ip, ip, rrx
    bb34:	f104 0401 	add.w	r4, r4, #1
    bb38:	ea4f 5244 	mov.w	r2, r4, lsl #21
    bb3c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    bb40:	f080 809a 	bcs.w	bc78 <__adddf3+0x240>
    bb44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    bb48:	bf08      	it	eq
    bb4a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    bb4e:	f150 0000 	adcs.w	r0, r0, #0
    bb52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    bb56:	ea41 0105 	orr.w	r1, r1, r5
    bb5a:	bd30      	pop	{r4, r5, pc}
    bb5c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    bb60:	4140      	adcs	r0, r0
    bb62:	eb41 0101 	adc.w	r1, r1, r1
    bb66:	3c01      	subs	r4, #1
    bb68:	bf28      	it	cs
    bb6a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    bb6e:	d2e9      	bcs.n	bb44 <__adddf3+0x10c>
    bb70:	f091 0f00 	teq	r1, #0
    bb74:	bf04      	itt	eq
    bb76:	4601      	moveq	r1, r0
    bb78:	2000      	moveq	r0, #0
    bb7a:	fab1 f381 	clz	r3, r1
    bb7e:	bf08      	it	eq
    bb80:	3320      	addeq	r3, #32
    bb82:	f1a3 030b 	sub.w	r3, r3, #11
    bb86:	f1b3 0220 	subs.w	r2, r3, #32
    bb8a:	da0c      	bge.n	bba6 <__adddf3+0x16e>
    bb8c:	320c      	adds	r2, #12
    bb8e:	dd08      	ble.n	bba2 <__adddf3+0x16a>
    bb90:	f102 0c14 	add.w	ip, r2, #20
    bb94:	f1c2 020c 	rsb	r2, r2, #12
    bb98:	fa01 f00c 	lsl.w	r0, r1, ip
    bb9c:	fa21 f102 	lsr.w	r1, r1, r2
    bba0:	e00c      	b.n	bbbc <__adddf3+0x184>
    bba2:	f102 0214 	add.w	r2, r2, #20
    bba6:	bfd8      	it	le
    bba8:	f1c2 0c20 	rsble	ip, r2, #32
    bbac:	fa01 f102 	lsl.w	r1, r1, r2
    bbb0:	fa20 fc0c 	lsr.w	ip, r0, ip
    bbb4:	bfdc      	itt	le
    bbb6:	ea41 010c 	orrle.w	r1, r1, ip
    bbba:	4090      	lslle	r0, r2
    bbbc:	1ae4      	subs	r4, r4, r3
    bbbe:	bfa2      	ittt	ge
    bbc0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    bbc4:	4329      	orrge	r1, r5
    bbc6:	bd30      	popge	{r4, r5, pc}
    bbc8:	ea6f 0404 	mvn.w	r4, r4
    bbcc:	3c1f      	subs	r4, #31
    bbce:	da1c      	bge.n	bc0a <__adddf3+0x1d2>
    bbd0:	340c      	adds	r4, #12
    bbd2:	dc0e      	bgt.n	bbf2 <__adddf3+0x1ba>
    bbd4:	f104 0414 	add.w	r4, r4, #20
    bbd8:	f1c4 0220 	rsb	r2, r4, #32
    bbdc:	fa20 f004 	lsr.w	r0, r0, r4
    bbe0:	fa01 f302 	lsl.w	r3, r1, r2
    bbe4:	ea40 0003 	orr.w	r0, r0, r3
    bbe8:	fa21 f304 	lsr.w	r3, r1, r4
    bbec:	ea45 0103 	orr.w	r1, r5, r3
    bbf0:	bd30      	pop	{r4, r5, pc}
    bbf2:	f1c4 040c 	rsb	r4, r4, #12
    bbf6:	f1c4 0220 	rsb	r2, r4, #32
    bbfa:	fa20 f002 	lsr.w	r0, r0, r2
    bbfe:	fa01 f304 	lsl.w	r3, r1, r4
    bc02:	ea40 0003 	orr.w	r0, r0, r3
    bc06:	4629      	mov	r1, r5
    bc08:	bd30      	pop	{r4, r5, pc}
    bc0a:	fa21 f004 	lsr.w	r0, r1, r4
    bc0e:	4629      	mov	r1, r5
    bc10:	bd30      	pop	{r4, r5, pc}
    bc12:	f094 0f00 	teq	r4, #0
    bc16:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    bc1a:	bf06      	itte	eq
    bc1c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    bc20:	3401      	addeq	r4, #1
    bc22:	3d01      	subne	r5, #1
    bc24:	e74e      	b.n	bac4 <__adddf3+0x8c>
    bc26:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    bc2a:	bf18      	it	ne
    bc2c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    bc30:	d029      	beq.n	bc86 <__adddf3+0x24e>
    bc32:	ea94 0f05 	teq	r4, r5
    bc36:	bf08      	it	eq
    bc38:	ea90 0f02 	teqeq	r0, r2
    bc3c:	d005      	beq.n	bc4a <__adddf3+0x212>
    bc3e:	ea54 0c00 	orrs.w	ip, r4, r0
    bc42:	bf04      	itt	eq
    bc44:	4619      	moveq	r1, r3
    bc46:	4610      	moveq	r0, r2
    bc48:	bd30      	pop	{r4, r5, pc}
    bc4a:	ea91 0f03 	teq	r1, r3
    bc4e:	bf1e      	ittt	ne
    bc50:	2100      	movne	r1, #0
    bc52:	2000      	movne	r0, #0
    bc54:	bd30      	popne	{r4, r5, pc}
    bc56:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    bc5a:	d105      	bne.n	bc68 <__adddf3+0x230>
    bc5c:	0040      	lsls	r0, r0, #1
    bc5e:	4149      	adcs	r1, r1
    bc60:	bf28      	it	cs
    bc62:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    bc66:	bd30      	pop	{r4, r5, pc}
    bc68:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    bc6c:	bf3c      	itt	cc
    bc6e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    bc72:	bd30      	popcc	{r4, r5, pc}
    bc74:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    bc78:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    bc7c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    bc80:	f04f 0000 	mov.w	r0, #0
    bc84:	bd30      	pop	{r4, r5, pc}
    bc86:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    bc8a:	bf1a      	itte	ne
    bc8c:	4619      	movne	r1, r3
    bc8e:	4610      	movne	r0, r2
    bc90:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    bc94:	bf1c      	itt	ne
    bc96:	460b      	movne	r3, r1
    bc98:	4602      	movne	r2, r0
    bc9a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    bc9e:	bf06      	itte	eq
    bca0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    bca4:	ea91 0f03 	teqeq	r1, r3
    bca8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    bcac:	bd30      	pop	{r4, r5, pc}
    bcae:	bf00      	nop

0000bcb0 <__aeabi_ui2d>:
    bcb0:	f090 0f00 	teq	r0, #0
    bcb4:	bf04      	itt	eq
    bcb6:	2100      	moveq	r1, #0
    bcb8:	4770      	bxeq	lr
    bcba:	b530      	push	{r4, r5, lr}
    bcbc:	f44f 6480 	mov.w	r4, #1024	; 0x400
    bcc0:	f104 0432 	add.w	r4, r4, #50	; 0x32
    bcc4:	f04f 0500 	mov.w	r5, #0
    bcc8:	f04f 0100 	mov.w	r1, #0
    bccc:	e750      	b.n	bb70 <__adddf3+0x138>
    bcce:	bf00      	nop

0000bcd0 <__aeabi_i2d>:
    bcd0:	f090 0f00 	teq	r0, #0
    bcd4:	bf04      	itt	eq
    bcd6:	2100      	moveq	r1, #0
    bcd8:	4770      	bxeq	lr
    bcda:	b530      	push	{r4, r5, lr}
    bcdc:	f44f 6480 	mov.w	r4, #1024	; 0x400
    bce0:	f104 0432 	add.w	r4, r4, #50	; 0x32
    bce4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    bce8:	bf48      	it	mi
    bcea:	4240      	negmi	r0, r0
    bcec:	f04f 0100 	mov.w	r1, #0
    bcf0:	e73e      	b.n	bb70 <__adddf3+0x138>
    bcf2:	bf00      	nop

0000bcf4 <__aeabi_f2d>:
    bcf4:	0042      	lsls	r2, r0, #1
    bcf6:	ea4f 01e2 	mov.w	r1, r2, asr #3
    bcfa:	ea4f 0131 	mov.w	r1, r1, rrx
    bcfe:	ea4f 7002 	mov.w	r0, r2, lsl #28
    bd02:	bf1f      	itttt	ne
    bd04:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    bd08:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    bd0c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    bd10:	4770      	bxne	lr
    bd12:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    bd16:	bf08      	it	eq
    bd18:	4770      	bxeq	lr
    bd1a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    bd1e:	bf04      	itt	eq
    bd20:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    bd24:	4770      	bxeq	lr
    bd26:	b530      	push	{r4, r5, lr}
    bd28:	f44f 7460 	mov.w	r4, #896	; 0x380
    bd2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    bd30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    bd34:	e71c      	b.n	bb70 <__adddf3+0x138>
    bd36:	bf00      	nop

0000bd38 <__aeabi_ul2d>:
    bd38:	ea50 0201 	orrs.w	r2, r0, r1
    bd3c:	bf08      	it	eq
    bd3e:	4770      	bxeq	lr
    bd40:	b530      	push	{r4, r5, lr}
    bd42:	f04f 0500 	mov.w	r5, #0
    bd46:	e00a      	b.n	bd5e <__aeabi_l2d+0x16>

0000bd48 <__aeabi_l2d>:
    bd48:	ea50 0201 	orrs.w	r2, r0, r1
    bd4c:	bf08      	it	eq
    bd4e:	4770      	bxeq	lr
    bd50:	b530      	push	{r4, r5, lr}
    bd52:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    bd56:	d502      	bpl.n	bd5e <__aeabi_l2d+0x16>
    bd58:	4240      	negs	r0, r0
    bd5a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    bd5e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    bd62:	f104 0432 	add.w	r4, r4, #50	; 0x32
    bd66:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    bd6a:	f43f aed8 	beq.w	bb1e <__adddf3+0xe6>
    bd6e:	f04f 0203 	mov.w	r2, #3
    bd72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    bd76:	bf18      	it	ne
    bd78:	3203      	addne	r2, #3
    bd7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    bd7e:	bf18      	it	ne
    bd80:	3203      	addne	r2, #3
    bd82:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    bd86:	f1c2 0320 	rsb	r3, r2, #32
    bd8a:	fa00 fc03 	lsl.w	ip, r0, r3
    bd8e:	fa20 f002 	lsr.w	r0, r0, r2
    bd92:	fa01 fe03 	lsl.w	lr, r1, r3
    bd96:	ea40 000e 	orr.w	r0, r0, lr
    bd9a:	fa21 f102 	lsr.w	r1, r1, r2
    bd9e:	4414      	add	r4, r2
    bda0:	e6bd      	b.n	bb1e <__adddf3+0xe6>
    bda2:	bf00      	nop

0000bda4 <__gedf2>:
    bda4:	f04f 3cff 	mov.w	ip, #4294967295
    bda8:	e006      	b.n	bdb8 <__cmpdf2+0x4>
    bdaa:	bf00      	nop

0000bdac <__ledf2>:
    bdac:	f04f 0c01 	mov.w	ip, #1
    bdb0:	e002      	b.n	bdb8 <__cmpdf2+0x4>
    bdb2:	bf00      	nop

0000bdb4 <__cmpdf2>:
    bdb4:	f04f 0c01 	mov.w	ip, #1
    bdb8:	f84d cd04 	str.w	ip, [sp, #-4]!
    bdbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    bdc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    bdc4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    bdc8:	bf18      	it	ne
    bdca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    bdce:	d01b      	beq.n	be08 <__cmpdf2+0x54>
    bdd0:	b001      	add	sp, #4
    bdd2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    bdd6:	bf0c      	ite	eq
    bdd8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    bddc:	ea91 0f03 	teqne	r1, r3
    bde0:	bf02      	ittt	eq
    bde2:	ea90 0f02 	teqeq	r0, r2
    bde6:	2000      	moveq	r0, #0
    bde8:	4770      	bxeq	lr
    bdea:	f110 0f00 	cmn.w	r0, #0
    bdee:	ea91 0f03 	teq	r1, r3
    bdf2:	bf58      	it	pl
    bdf4:	4299      	cmppl	r1, r3
    bdf6:	bf08      	it	eq
    bdf8:	4290      	cmpeq	r0, r2
    bdfa:	bf2c      	ite	cs
    bdfc:	17d8      	asrcs	r0, r3, #31
    bdfe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    be02:	f040 0001 	orr.w	r0, r0, #1
    be06:	4770      	bx	lr
    be08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    be0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    be10:	d102      	bne.n	be18 <__cmpdf2+0x64>
    be12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    be16:	d107      	bne.n	be28 <__cmpdf2+0x74>
    be18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    be1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    be20:	d1d6      	bne.n	bdd0 <__cmpdf2+0x1c>
    be22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    be26:	d0d3      	beq.n	bdd0 <__cmpdf2+0x1c>
    be28:	f85d 0b04 	ldr.w	r0, [sp], #4
    be2c:	4770      	bx	lr
    be2e:	bf00      	nop

0000be30 <__aeabi_cdrcmple>:
    be30:	4684      	mov	ip, r0
    be32:	4610      	mov	r0, r2
    be34:	4662      	mov	r2, ip
    be36:	468c      	mov	ip, r1
    be38:	4619      	mov	r1, r3
    be3a:	4663      	mov	r3, ip
    be3c:	e000      	b.n	be40 <__aeabi_cdcmpeq>
    be3e:	bf00      	nop

0000be40 <__aeabi_cdcmpeq>:
    be40:	b501      	push	{r0, lr}
    be42:	f7ff ffb7 	bl	bdb4 <__cmpdf2>
    be46:	2800      	cmp	r0, #0
    be48:	bf48      	it	mi
    be4a:	f110 0f00 	cmnmi.w	r0, #0
    be4e:	bd01      	pop	{r0, pc}

0000be50 <__aeabi_dcmpeq>:
    be50:	f84d ed08 	str.w	lr, [sp, #-8]!
    be54:	f7ff fff4 	bl	be40 <__aeabi_cdcmpeq>
    be58:	bf0c      	ite	eq
    be5a:	2001      	moveq	r0, #1
    be5c:	2000      	movne	r0, #0
    be5e:	f85d fb08 	ldr.w	pc, [sp], #8
    be62:	bf00      	nop

0000be64 <__aeabi_dcmplt>:
    be64:	f84d ed08 	str.w	lr, [sp, #-8]!
    be68:	f7ff ffea 	bl	be40 <__aeabi_cdcmpeq>
    be6c:	bf34      	ite	cc
    be6e:	2001      	movcc	r0, #1
    be70:	2000      	movcs	r0, #0
    be72:	f85d fb08 	ldr.w	pc, [sp], #8
    be76:	bf00      	nop

0000be78 <__aeabi_dcmple>:
    be78:	f84d ed08 	str.w	lr, [sp, #-8]!
    be7c:	f7ff ffe0 	bl	be40 <__aeabi_cdcmpeq>
    be80:	bf94      	ite	ls
    be82:	2001      	movls	r0, #1
    be84:	2000      	movhi	r0, #0
    be86:	f85d fb08 	ldr.w	pc, [sp], #8
    be8a:	bf00      	nop

0000be8c <__aeabi_dcmpge>:
    be8c:	f84d ed08 	str.w	lr, [sp, #-8]!
    be90:	f7ff ffce 	bl	be30 <__aeabi_cdrcmple>
    be94:	bf94      	ite	ls
    be96:	2001      	movls	r0, #1
    be98:	2000      	movhi	r0, #0
    be9a:	f85d fb08 	ldr.w	pc, [sp], #8
    be9e:	bf00      	nop

0000bea0 <__aeabi_dcmpgt>:
    bea0:	f84d ed08 	str.w	lr, [sp, #-8]!
    bea4:	f7ff ffc4 	bl	be30 <__aeabi_cdrcmple>
    bea8:	bf34      	ite	cc
    beaa:	2001      	movcc	r0, #1
    beac:	2000      	movcs	r0, #0
    beae:	f85d fb08 	ldr.w	pc, [sp], #8
    beb2:	bf00      	nop

0000beb4 <__aeabi_dcmpun>:
    beb4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    beb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    bebc:	d102      	bne.n	bec4 <__aeabi_dcmpun+0x10>
    bebe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    bec2:	d10a      	bne.n	beda <__aeabi_dcmpun+0x26>
    bec4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    bec8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    becc:	d102      	bne.n	bed4 <__aeabi_dcmpun+0x20>
    bece:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    bed2:	d102      	bne.n	beda <__aeabi_dcmpun+0x26>
    bed4:	f04f 0000 	mov.w	r0, #0
    bed8:	4770      	bx	lr
    beda:	f04f 0001 	mov.w	r0, #1
    bede:	4770      	bx	lr

0000bee0 <__aeabi_d2uiz>:
    bee0:	004a      	lsls	r2, r1, #1
    bee2:	d211      	bcs.n	bf08 <__aeabi_d2uiz+0x28>
    bee4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    bee8:	d211      	bcs.n	bf0e <__aeabi_d2uiz+0x2e>
    beea:	d50d      	bpl.n	bf08 <__aeabi_d2uiz+0x28>
    beec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    bef0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    bef4:	d40e      	bmi.n	bf14 <__aeabi_d2uiz+0x34>
    bef6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    befa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    befe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    bf02:	fa23 f002 	lsr.w	r0, r3, r2
    bf06:	4770      	bx	lr
    bf08:	f04f 0000 	mov.w	r0, #0
    bf0c:	4770      	bx	lr
    bf0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    bf12:	d102      	bne.n	bf1a <__aeabi_d2uiz+0x3a>
    bf14:	f04f 30ff 	mov.w	r0, #4294967295
    bf18:	4770      	bx	lr
    bf1a:	f04f 0000 	mov.w	r0, #0
    bf1e:	4770      	bx	lr

0000bf20 <__aeabi_frsub>:
    bf20:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    bf24:	e002      	b.n	bf2c <__addsf3>
    bf26:	bf00      	nop

0000bf28 <__aeabi_fsub>:
    bf28:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0000bf2c <__addsf3>:
    bf2c:	0042      	lsls	r2, r0, #1
    bf2e:	bf1f      	itttt	ne
    bf30:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    bf34:	ea92 0f03 	teqne	r2, r3
    bf38:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    bf3c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    bf40:	d06a      	beq.n	c018 <__addsf3+0xec>
    bf42:	ea4f 6212 	mov.w	r2, r2, lsr #24
    bf46:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    bf4a:	bfc1      	itttt	gt
    bf4c:	18d2      	addgt	r2, r2, r3
    bf4e:	4041      	eorgt	r1, r0
    bf50:	4048      	eorgt	r0, r1
    bf52:	4041      	eorgt	r1, r0
    bf54:	bfb8      	it	lt
    bf56:	425b      	neglt	r3, r3
    bf58:	2b19      	cmp	r3, #25
    bf5a:	bf88      	it	hi
    bf5c:	4770      	bxhi	lr
    bf5e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    bf62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    bf66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bf6a:	bf18      	it	ne
    bf6c:	4240      	negne	r0, r0
    bf6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    bf72:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    bf76:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    bf7a:	bf18      	it	ne
    bf7c:	4249      	negne	r1, r1
    bf7e:	ea92 0f03 	teq	r2, r3
    bf82:	d03f      	beq.n	c004 <__addsf3+0xd8>
    bf84:	f1a2 0201 	sub.w	r2, r2, #1
    bf88:	fa41 fc03 	asr.w	ip, r1, r3
    bf8c:	eb10 000c 	adds.w	r0, r0, ip
    bf90:	f1c3 0320 	rsb	r3, r3, #32
    bf94:	fa01 f103 	lsl.w	r1, r1, r3
    bf98:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    bf9c:	d502      	bpl.n	bfa4 <__addsf3+0x78>
    bf9e:	4249      	negs	r1, r1
    bfa0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    bfa4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    bfa8:	d313      	bcc.n	bfd2 <__addsf3+0xa6>
    bfaa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    bfae:	d306      	bcc.n	bfbe <__addsf3+0x92>
    bfb0:	0840      	lsrs	r0, r0, #1
    bfb2:	ea4f 0131 	mov.w	r1, r1, rrx
    bfb6:	f102 0201 	add.w	r2, r2, #1
    bfba:	2afe      	cmp	r2, #254	; 0xfe
    bfbc:	d251      	bcs.n	c062 <__addsf3+0x136>
    bfbe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    bfc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    bfc6:	bf08      	it	eq
    bfc8:	f020 0001 	biceq.w	r0, r0, #1
    bfcc:	ea40 0003 	orr.w	r0, r0, r3
    bfd0:	4770      	bx	lr
    bfd2:	0049      	lsls	r1, r1, #1
    bfd4:	eb40 0000 	adc.w	r0, r0, r0
    bfd8:	3a01      	subs	r2, #1
    bfda:	bf28      	it	cs
    bfdc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    bfe0:	d2ed      	bcs.n	bfbe <__addsf3+0x92>
    bfe2:	fab0 fc80 	clz	ip, r0
    bfe6:	f1ac 0c08 	sub.w	ip, ip, #8
    bfea:	ebb2 020c 	subs.w	r2, r2, ip
    bfee:	fa00 f00c 	lsl.w	r0, r0, ip
    bff2:	bfaa      	itet	ge
    bff4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    bff8:	4252      	neglt	r2, r2
    bffa:	4318      	orrge	r0, r3
    bffc:	bfbc      	itt	lt
    bffe:	40d0      	lsrlt	r0, r2
    c000:	4318      	orrlt	r0, r3
    c002:	4770      	bx	lr
    c004:	f092 0f00 	teq	r2, #0
    c008:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    c00c:	bf06      	itte	eq
    c00e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    c012:	3201      	addeq	r2, #1
    c014:	3b01      	subne	r3, #1
    c016:	e7b5      	b.n	bf84 <__addsf3+0x58>
    c018:	ea4f 0341 	mov.w	r3, r1, lsl #1
    c01c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    c020:	bf18      	it	ne
    c022:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    c026:	d021      	beq.n	c06c <__addsf3+0x140>
    c028:	ea92 0f03 	teq	r2, r3
    c02c:	d004      	beq.n	c038 <__addsf3+0x10c>
    c02e:	f092 0f00 	teq	r2, #0
    c032:	bf08      	it	eq
    c034:	4608      	moveq	r0, r1
    c036:	4770      	bx	lr
    c038:	ea90 0f01 	teq	r0, r1
    c03c:	bf1c      	itt	ne
    c03e:	2000      	movne	r0, #0
    c040:	4770      	bxne	lr
    c042:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    c046:	d104      	bne.n	c052 <__addsf3+0x126>
    c048:	0040      	lsls	r0, r0, #1
    c04a:	bf28      	it	cs
    c04c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    c050:	4770      	bx	lr
    c052:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    c056:	bf3c      	itt	cc
    c058:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    c05c:	4770      	bxcc	lr
    c05e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    c062:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    c066:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c06a:	4770      	bx	lr
    c06c:	ea7f 6222 	mvns.w	r2, r2, asr #24
    c070:	bf16      	itet	ne
    c072:	4608      	movne	r0, r1
    c074:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    c078:	4601      	movne	r1, r0
    c07a:	0242      	lsls	r2, r0, #9
    c07c:	bf06      	itte	eq
    c07e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    c082:	ea90 0f01 	teqeq	r0, r1
    c086:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    c08a:	4770      	bx	lr

0000c08c <__aeabi_ui2f>:
    c08c:	f04f 0300 	mov.w	r3, #0
    c090:	e004      	b.n	c09c <__aeabi_i2f+0x8>
    c092:	bf00      	nop

0000c094 <__aeabi_i2f>:
    c094:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    c098:	bf48      	it	mi
    c09a:	4240      	negmi	r0, r0
    c09c:	ea5f 0c00 	movs.w	ip, r0
    c0a0:	bf08      	it	eq
    c0a2:	4770      	bxeq	lr
    c0a4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    c0a8:	4601      	mov	r1, r0
    c0aa:	f04f 0000 	mov.w	r0, #0
    c0ae:	e01c      	b.n	c0ea <__aeabi_l2f+0x2a>

0000c0b0 <__aeabi_ul2f>:
    c0b0:	ea50 0201 	orrs.w	r2, r0, r1
    c0b4:	bf08      	it	eq
    c0b6:	4770      	bxeq	lr
    c0b8:	f04f 0300 	mov.w	r3, #0
    c0bc:	e00a      	b.n	c0d4 <__aeabi_l2f+0x14>
    c0be:	bf00      	nop

0000c0c0 <__aeabi_l2f>:
    c0c0:	ea50 0201 	orrs.w	r2, r0, r1
    c0c4:	bf08      	it	eq
    c0c6:	4770      	bxeq	lr
    c0c8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    c0cc:	d502      	bpl.n	c0d4 <__aeabi_l2f+0x14>
    c0ce:	4240      	negs	r0, r0
    c0d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c0d4:	ea5f 0c01 	movs.w	ip, r1
    c0d8:	bf02      	ittt	eq
    c0da:	4684      	moveq	ip, r0
    c0dc:	4601      	moveq	r1, r0
    c0de:	2000      	moveq	r0, #0
    c0e0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    c0e4:	bf08      	it	eq
    c0e6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    c0ea:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    c0ee:	fabc f28c 	clz	r2, ip
    c0f2:	3a08      	subs	r2, #8
    c0f4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    c0f8:	db10      	blt.n	c11c <__aeabi_l2f+0x5c>
    c0fa:	fa01 fc02 	lsl.w	ip, r1, r2
    c0fe:	4463      	add	r3, ip
    c100:	fa00 fc02 	lsl.w	ip, r0, r2
    c104:	f1c2 0220 	rsb	r2, r2, #32
    c108:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c10c:	fa20 f202 	lsr.w	r2, r0, r2
    c110:	eb43 0002 	adc.w	r0, r3, r2
    c114:	bf08      	it	eq
    c116:	f020 0001 	biceq.w	r0, r0, #1
    c11a:	4770      	bx	lr
    c11c:	f102 0220 	add.w	r2, r2, #32
    c120:	fa01 fc02 	lsl.w	ip, r1, r2
    c124:	f1c2 0220 	rsb	r2, r2, #32
    c128:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    c12c:	fa21 f202 	lsr.w	r2, r1, r2
    c130:	eb43 0002 	adc.w	r0, r3, r2
    c134:	bf08      	it	eq
    c136:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    c13a:	4770      	bx	lr

0000c13c <__aeabi_fmul>:
    c13c:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c140:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    c144:	bf1e      	ittt	ne
    c146:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    c14a:	ea92 0f0c 	teqne	r2, ip
    c14e:	ea93 0f0c 	teqne	r3, ip
    c152:	d06f      	beq.n	c234 <__aeabi_fmul+0xf8>
    c154:	441a      	add	r2, r3
    c156:	ea80 0c01 	eor.w	ip, r0, r1
    c15a:	0240      	lsls	r0, r0, #9
    c15c:	bf18      	it	ne
    c15e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    c162:	d01e      	beq.n	c1a2 <__aeabi_fmul+0x66>
    c164:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    c168:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    c16c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    c170:	fba0 3101 	umull	r3, r1, r0, r1
    c174:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    c178:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    c17c:	bf3e      	ittt	cc
    c17e:	0049      	lslcc	r1, r1, #1
    c180:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    c184:	005b      	lslcc	r3, r3, #1
    c186:	ea40 0001 	orr.w	r0, r0, r1
    c18a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    c18e:	2afd      	cmp	r2, #253	; 0xfd
    c190:	d81d      	bhi.n	c1ce <__aeabi_fmul+0x92>
    c192:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    c196:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    c19a:	bf08      	it	eq
    c19c:	f020 0001 	biceq.w	r0, r0, #1
    c1a0:	4770      	bx	lr
    c1a2:	f090 0f00 	teq	r0, #0
    c1a6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    c1aa:	bf08      	it	eq
    c1ac:	0249      	lsleq	r1, r1, #9
    c1ae:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    c1b2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    c1b6:	3a7f      	subs	r2, #127	; 0x7f
    c1b8:	bfc2      	ittt	gt
    c1ba:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    c1be:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    c1c2:	4770      	bxgt	lr
    c1c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c1c8:	f04f 0300 	mov.w	r3, #0
    c1cc:	3a01      	subs	r2, #1
    c1ce:	dc5d      	bgt.n	c28c <__aeabi_fmul+0x150>
    c1d0:	f112 0f19 	cmn.w	r2, #25
    c1d4:	bfdc      	itt	le
    c1d6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    c1da:	4770      	bxle	lr
    c1dc:	f1c2 0200 	rsb	r2, r2, #0
    c1e0:	0041      	lsls	r1, r0, #1
    c1e2:	fa21 f102 	lsr.w	r1, r1, r2
    c1e6:	f1c2 0220 	rsb	r2, r2, #32
    c1ea:	fa00 fc02 	lsl.w	ip, r0, r2
    c1ee:	ea5f 0031 	movs.w	r0, r1, rrx
    c1f2:	f140 0000 	adc.w	r0, r0, #0
    c1f6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    c1fa:	bf08      	it	eq
    c1fc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    c200:	4770      	bx	lr
    c202:	f092 0f00 	teq	r2, #0
    c206:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    c20a:	bf02      	ittt	eq
    c20c:	0040      	lsleq	r0, r0, #1
    c20e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    c212:	3a01      	subeq	r2, #1
    c214:	d0f9      	beq.n	c20a <__aeabi_fmul+0xce>
    c216:	ea40 000c 	orr.w	r0, r0, ip
    c21a:	f093 0f00 	teq	r3, #0
    c21e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c222:	bf02      	ittt	eq
    c224:	0049      	lsleq	r1, r1, #1
    c226:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    c22a:	3b01      	subeq	r3, #1
    c22c:	d0f9      	beq.n	c222 <__aeabi_fmul+0xe6>
    c22e:	ea41 010c 	orr.w	r1, r1, ip
    c232:	e78f      	b.n	c154 <__aeabi_fmul+0x18>
    c234:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    c238:	ea92 0f0c 	teq	r2, ip
    c23c:	bf18      	it	ne
    c23e:	ea93 0f0c 	teqne	r3, ip
    c242:	d00a      	beq.n	c25a <__aeabi_fmul+0x11e>
    c244:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    c248:	bf18      	it	ne
    c24a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    c24e:	d1d8      	bne.n	c202 <__aeabi_fmul+0xc6>
    c250:	ea80 0001 	eor.w	r0, r0, r1
    c254:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    c258:	4770      	bx	lr
    c25a:	f090 0f00 	teq	r0, #0
    c25e:	bf17      	itett	ne
    c260:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    c264:	4608      	moveq	r0, r1
    c266:	f091 0f00 	teqne	r1, #0
    c26a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    c26e:	d014      	beq.n	c29a <__aeabi_fmul+0x15e>
    c270:	ea92 0f0c 	teq	r2, ip
    c274:	d101      	bne.n	c27a <__aeabi_fmul+0x13e>
    c276:	0242      	lsls	r2, r0, #9
    c278:	d10f      	bne.n	c29a <__aeabi_fmul+0x15e>
    c27a:	ea93 0f0c 	teq	r3, ip
    c27e:	d103      	bne.n	c288 <__aeabi_fmul+0x14c>
    c280:	024b      	lsls	r3, r1, #9
    c282:	bf18      	it	ne
    c284:	4608      	movne	r0, r1
    c286:	d108      	bne.n	c29a <__aeabi_fmul+0x15e>
    c288:	ea80 0001 	eor.w	r0, r0, r1
    c28c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    c290:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c294:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c298:	4770      	bx	lr
    c29a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    c29e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    c2a2:	4770      	bx	lr

0000c2a4 <__aeabi_fdiv>:
    c2a4:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c2a8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    c2ac:	bf1e      	ittt	ne
    c2ae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    c2b2:	ea92 0f0c 	teqne	r2, ip
    c2b6:	ea93 0f0c 	teqne	r3, ip
    c2ba:	d069      	beq.n	c390 <__aeabi_fdiv+0xec>
    c2bc:	eba2 0203 	sub.w	r2, r2, r3
    c2c0:	ea80 0c01 	eor.w	ip, r0, r1
    c2c4:	0249      	lsls	r1, r1, #9
    c2c6:	ea4f 2040 	mov.w	r0, r0, lsl #9
    c2ca:	d037      	beq.n	c33c <__aeabi_fdiv+0x98>
    c2cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    c2d0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    c2d4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    c2d8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    c2dc:	428b      	cmp	r3, r1
    c2de:	bf38      	it	cc
    c2e0:	005b      	lslcc	r3, r3, #1
    c2e2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    c2e6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    c2ea:	428b      	cmp	r3, r1
    c2ec:	bf24      	itt	cs
    c2ee:	1a5b      	subcs	r3, r3, r1
    c2f0:	ea40 000c 	orrcs.w	r0, r0, ip
    c2f4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    c2f8:	bf24      	itt	cs
    c2fa:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    c2fe:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    c302:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    c306:	bf24      	itt	cs
    c308:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    c30c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    c310:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    c314:	bf24      	itt	cs
    c316:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    c31a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    c31e:	011b      	lsls	r3, r3, #4
    c320:	bf18      	it	ne
    c322:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    c326:	d1e0      	bne.n	c2ea <__aeabi_fdiv+0x46>
    c328:	2afd      	cmp	r2, #253	; 0xfd
    c32a:	f63f af50 	bhi.w	c1ce <__aeabi_fmul+0x92>
    c32e:	428b      	cmp	r3, r1
    c330:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    c334:	bf08      	it	eq
    c336:	f020 0001 	biceq.w	r0, r0, #1
    c33a:	4770      	bx	lr
    c33c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    c340:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    c344:	327f      	adds	r2, #127	; 0x7f
    c346:	bfc2      	ittt	gt
    c348:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    c34c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    c350:	4770      	bxgt	lr
    c352:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c356:	f04f 0300 	mov.w	r3, #0
    c35a:	3a01      	subs	r2, #1
    c35c:	e737      	b.n	c1ce <__aeabi_fmul+0x92>
    c35e:	f092 0f00 	teq	r2, #0
    c362:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    c366:	bf02      	ittt	eq
    c368:	0040      	lsleq	r0, r0, #1
    c36a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    c36e:	3a01      	subeq	r2, #1
    c370:	d0f9      	beq.n	c366 <__aeabi_fdiv+0xc2>
    c372:	ea40 000c 	orr.w	r0, r0, ip
    c376:	f093 0f00 	teq	r3, #0
    c37a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    c37e:	bf02      	ittt	eq
    c380:	0049      	lsleq	r1, r1, #1
    c382:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    c386:	3b01      	subeq	r3, #1
    c388:	d0f9      	beq.n	c37e <__aeabi_fdiv+0xda>
    c38a:	ea41 010c 	orr.w	r1, r1, ip
    c38e:	e795      	b.n	c2bc <__aeabi_fdiv+0x18>
    c390:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    c394:	ea92 0f0c 	teq	r2, ip
    c398:	d108      	bne.n	c3ac <__aeabi_fdiv+0x108>
    c39a:	0242      	lsls	r2, r0, #9
    c39c:	f47f af7d 	bne.w	c29a <__aeabi_fmul+0x15e>
    c3a0:	ea93 0f0c 	teq	r3, ip
    c3a4:	f47f af70 	bne.w	c288 <__aeabi_fmul+0x14c>
    c3a8:	4608      	mov	r0, r1
    c3aa:	e776      	b.n	c29a <__aeabi_fmul+0x15e>
    c3ac:	ea93 0f0c 	teq	r3, ip
    c3b0:	d104      	bne.n	c3bc <__aeabi_fdiv+0x118>
    c3b2:	024b      	lsls	r3, r1, #9
    c3b4:	f43f af4c 	beq.w	c250 <__aeabi_fmul+0x114>
    c3b8:	4608      	mov	r0, r1
    c3ba:	e76e      	b.n	c29a <__aeabi_fmul+0x15e>
    c3bc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    c3c0:	bf18      	it	ne
    c3c2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    c3c6:	d1ca      	bne.n	c35e <__aeabi_fdiv+0xba>
    c3c8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    c3cc:	f47f af5c 	bne.w	c288 <__aeabi_fmul+0x14c>
    c3d0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    c3d4:	f47f af3c 	bne.w	c250 <__aeabi_fmul+0x114>
    c3d8:	e75f      	b.n	c29a <__aeabi_fmul+0x15e>
    c3da:	bf00      	nop

0000c3dc <__gesf2>:
    c3dc:	f04f 3cff 	mov.w	ip, #4294967295
    c3e0:	e006      	b.n	c3f0 <__cmpsf2+0x4>
    c3e2:	bf00      	nop

0000c3e4 <__lesf2>:
    c3e4:	f04f 0c01 	mov.w	ip, #1
    c3e8:	e002      	b.n	c3f0 <__cmpsf2+0x4>
    c3ea:	bf00      	nop

0000c3ec <__cmpsf2>:
    c3ec:	f04f 0c01 	mov.w	ip, #1
    c3f0:	f84d cd04 	str.w	ip, [sp, #-4]!
    c3f4:	ea4f 0240 	mov.w	r2, r0, lsl #1
    c3f8:	ea4f 0341 	mov.w	r3, r1, lsl #1
    c3fc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    c400:	bf18      	it	ne
    c402:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    c406:	d011      	beq.n	c42c <__cmpsf2+0x40>
    c408:	b001      	add	sp, #4
    c40a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    c40e:	bf18      	it	ne
    c410:	ea90 0f01 	teqne	r0, r1
    c414:	bf58      	it	pl
    c416:	ebb2 0003 	subspl.w	r0, r2, r3
    c41a:	bf88      	it	hi
    c41c:	17c8      	asrhi	r0, r1, #31
    c41e:	bf38      	it	cc
    c420:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    c424:	bf18      	it	ne
    c426:	f040 0001 	orrne.w	r0, r0, #1
    c42a:	4770      	bx	lr
    c42c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    c430:	d102      	bne.n	c438 <__cmpsf2+0x4c>
    c432:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    c436:	d105      	bne.n	c444 <__cmpsf2+0x58>
    c438:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    c43c:	d1e4      	bne.n	c408 <__cmpsf2+0x1c>
    c43e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    c442:	d0e1      	beq.n	c408 <__cmpsf2+0x1c>
    c444:	f85d 0b04 	ldr.w	r0, [sp], #4
    c448:	4770      	bx	lr
    c44a:	bf00      	nop

0000c44c <__aeabi_cfrcmple>:
    c44c:	4684      	mov	ip, r0
    c44e:	4608      	mov	r0, r1
    c450:	4661      	mov	r1, ip
    c452:	e7ff      	b.n	c454 <__aeabi_cfcmpeq>

0000c454 <__aeabi_cfcmpeq>:
    c454:	b50f      	push	{r0, r1, r2, r3, lr}
    c456:	f7ff ffc9 	bl	c3ec <__cmpsf2>
    c45a:	2800      	cmp	r0, #0
    c45c:	bf48      	it	mi
    c45e:	f110 0f00 	cmnmi.w	r0, #0
    c462:	bd0f      	pop	{r0, r1, r2, r3, pc}

0000c464 <__aeabi_fcmpeq>:
    c464:	f84d ed08 	str.w	lr, [sp, #-8]!
    c468:	f7ff fff4 	bl	c454 <__aeabi_cfcmpeq>
    c46c:	bf0c      	ite	eq
    c46e:	2001      	moveq	r0, #1
    c470:	2000      	movne	r0, #0
    c472:	f85d fb08 	ldr.w	pc, [sp], #8
    c476:	bf00      	nop

0000c478 <__aeabi_fcmplt>:
    c478:	f84d ed08 	str.w	lr, [sp, #-8]!
    c47c:	f7ff ffea 	bl	c454 <__aeabi_cfcmpeq>
    c480:	bf34      	ite	cc
    c482:	2001      	movcc	r0, #1
    c484:	2000      	movcs	r0, #0
    c486:	f85d fb08 	ldr.w	pc, [sp], #8
    c48a:	bf00      	nop

0000c48c <__aeabi_fcmple>:
    c48c:	f84d ed08 	str.w	lr, [sp, #-8]!
    c490:	f7ff ffe0 	bl	c454 <__aeabi_cfcmpeq>
    c494:	bf94      	ite	ls
    c496:	2001      	movls	r0, #1
    c498:	2000      	movhi	r0, #0
    c49a:	f85d fb08 	ldr.w	pc, [sp], #8
    c49e:	bf00      	nop

0000c4a0 <__aeabi_fcmpge>:
    c4a0:	f84d ed08 	str.w	lr, [sp, #-8]!
    c4a4:	f7ff ffd2 	bl	c44c <__aeabi_cfrcmple>
    c4a8:	bf94      	ite	ls
    c4aa:	2001      	movls	r0, #1
    c4ac:	2000      	movhi	r0, #0
    c4ae:	f85d fb08 	ldr.w	pc, [sp], #8
    c4b2:	bf00      	nop

0000c4b4 <__aeabi_fcmpgt>:
    c4b4:	f84d ed08 	str.w	lr, [sp, #-8]!
    c4b8:	f7ff ffc8 	bl	c44c <__aeabi_cfrcmple>
    c4bc:	bf34      	ite	cc
    c4be:	2001      	movcc	r0, #1
    c4c0:	2000      	movcs	r0, #0
    c4c2:	f85d fb08 	ldr.w	pc, [sp], #8
    c4c6:	bf00      	nop

0000c4c8 <__aeabi_f2iz>:
    c4c8:	ea4f 0240 	mov.w	r2, r0, lsl #1
    c4cc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    c4d0:	d30f      	bcc.n	c4f2 <__aeabi_f2iz+0x2a>
    c4d2:	f04f 039e 	mov.w	r3, #158	; 0x9e
    c4d6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    c4da:	d90d      	bls.n	c4f8 <__aeabi_f2iz+0x30>
    c4dc:	ea4f 2300 	mov.w	r3, r0, lsl #8
    c4e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c4e4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    c4e8:	fa23 f002 	lsr.w	r0, r3, r2
    c4ec:	bf18      	it	ne
    c4ee:	4240      	negne	r0, r0
    c4f0:	4770      	bx	lr
    c4f2:	f04f 0000 	mov.w	r0, #0
    c4f6:	4770      	bx	lr
    c4f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
    c4fc:	d101      	bne.n	c502 <__aeabi_f2iz+0x3a>
    c4fe:	0242      	lsls	r2, r0, #9
    c500:	d105      	bne.n	c50e <__aeabi_f2iz+0x46>
    c502:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    c506:	bf08      	it	eq
    c508:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    c50c:	4770      	bx	lr
    c50e:	f04f 0000 	mov.w	r0, #0
    c512:	4770      	bx	lr

0000c514 <__aeabi_f2uiz>:
    c514:	0042      	lsls	r2, r0, #1
    c516:	d20e      	bcs.n	c536 <__aeabi_f2uiz+0x22>
    c518:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    c51c:	d30b      	bcc.n	c536 <__aeabi_f2uiz+0x22>
    c51e:	f04f 039e 	mov.w	r3, #158	; 0x9e
    c522:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    c526:	d409      	bmi.n	c53c <__aeabi_f2uiz+0x28>
    c528:	ea4f 2300 	mov.w	r3, r0, lsl #8
    c52c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c530:	fa23 f002 	lsr.w	r0, r3, r2
    c534:	4770      	bx	lr
    c536:	f04f 0000 	mov.w	r0, #0
    c53a:	4770      	bx	lr
    c53c:	f112 0f61 	cmn.w	r2, #97	; 0x61
    c540:	d101      	bne.n	c546 <__aeabi_f2uiz+0x32>
    c542:	0242      	lsls	r2, r0, #9
    c544:	d102      	bne.n	c54c <__aeabi_f2uiz+0x38>
    c546:	f04f 30ff 	mov.w	r0, #4294967295
    c54a:	4770      	bx	lr
    c54c:	f04f 0000 	mov.w	r0, #0
    c550:	4770      	bx	lr
    c552:	bf00      	nop

0000c554 <malloc>:
    c554:	4b02      	ldr	r3, [pc, #8]	; (c560 <malloc+0xc>)
    c556:	4601      	mov	r1, r0
    c558:	6818      	ldr	r0, [r3, #0]
    c55a:	f000 b803 	b.w	c564 <_malloc_r>
    c55e:	bf00      	nop
    c560:	1fff8f70 	.word	0x1fff8f70

0000c564 <_malloc_r>:
    c564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c568:	f101 060b 	add.w	r6, r1, #11
    c56c:	2e16      	cmp	r6, #22
    c56e:	b083      	sub	sp, #12
    c570:	4604      	mov	r4, r0
    c572:	d824      	bhi.n	c5be <_malloc_r+0x5a>
    c574:	2910      	cmp	r1, #16
    c576:	f200 80ba 	bhi.w	c6ee <_malloc_r+0x18a>
    c57a:	f000 faa3 	bl	cac4 <__malloc_lock>
    c57e:	2610      	movs	r6, #16
    c580:	2218      	movs	r2, #24
    c582:	2002      	movs	r0, #2
    c584:	4fb5      	ldr	r7, [pc, #724]	; (c85c <_malloc_r+0x2f8>)
    c586:	443a      	add	r2, r7
    c588:	f1a2 0108 	sub.w	r1, r2, #8
    c58c:	6853      	ldr	r3, [r2, #4]
    c58e:	428b      	cmp	r3, r1
    c590:	f000 80ba 	beq.w	c708 <_malloc_r+0x1a4>
    c594:	685a      	ldr	r2, [r3, #4]
    c596:	68d9      	ldr	r1, [r3, #12]
    c598:	f022 0203 	bic.w	r2, r2, #3
    c59c:	441a      	add	r2, r3
    c59e:	689d      	ldr	r5, [r3, #8]
    c5a0:	60e9      	str	r1, [r5, #12]
    c5a2:	608d      	str	r5, [r1, #8]
    c5a4:	6851      	ldr	r1, [r2, #4]
    c5a6:	f041 0101 	orr.w	r1, r1, #1
    c5aa:	4620      	mov	r0, r4
    c5ac:	6051      	str	r1, [r2, #4]
    c5ae:	f103 0508 	add.w	r5, r3, #8
    c5b2:	f000 fa8d 	bl	cad0 <__malloc_unlock>
    c5b6:	4628      	mov	r0, r5
    c5b8:	b003      	add	sp, #12
    c5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c5be:	f036 0607 	bics.w	r6, r6, #7
    c5c2:	f100 8094 	bmi.w	c6ee <_malloc_r+0x18a>
    c5c6:	42b1      	cmp	r1, r6
    c5c8:	f200 8091 	bhi.w	c6ee <_malloc_r+0x18a>
    c5cc:	f000 fa7a 	bl	cac4 <__malloc_lock>
    c5d0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    c5d4:	f0c0 819a 	bcc.w	c90c <_malloc_r+0x3a8>
    c5d8:	0a73      	lsrs	r3, r6, #9
    c5da:	f000 808f 	beq.w	c6fc <_malloc_r+0x198>
    c5de:	2b04      	cmp	r3, #4
    c5e0:	f200 816f 	bhi.w	c8c2 <_malloc_r+0x35e>
    c5e4:	09b3      	lsrs	r3, r6, #6
    c5e6:	f103 0039 	add.w	r0, r3, #57	; 0x39
    c5ea:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    c5ee:	00c3      	lsls	r3, r0, #3
    c5f0:	4f9a      	ldr	r7, [pc, #616]	; (c85c <_malloc_r+0x2f8>)
    c5f2:	443b      	add	r3, r7
    c5f4:	f1a3 0508 	sub.w	r5, r3, #8
    c5f8:	685b      	ldr	r3, [r3, #4]
    c5fa:	429d      	cmp	r5, r3
    c5fc:	d106      	bne.n	c60c <_malloc_r+0xa8>
    c5fe:	e00c      	b.n	c61a <_malloc_r+0xb6>
    c600:	2900      	cmp	r1, #0
    c602:	f280 8127 	bge.w	c854 <_malloc_r+0x2f0>
    c606:	68db      	ldr	r3, [r3, #12]
    c608:	429d      	cmp	r5, r3
    c60a:	d006      	beq.n	c61a <_malloc_r+0xb6>
    c60c:	685a      	ldr	r2, [r3, #4]
    c60e:	f022 0203 	bic.w	r2, r2, #3
    c612:	1b91      	subs	r1, r2, r6
    c614:	290f      	cmp	r1, #15
    c616:	ddf3      	ble.n	c600 <_malloc_r+0x9c>
    c618:	4660      	mov	r0, ip
    c61a:	693d      	ldr	r5, [r7, #16]
    c61c:	f8df c240 	ldr.w	ip, [pc, #576]	; c860 <_malloc_r+0x2fc>
    c620:	4565      	cmp	r5, ip
    c622:	d07c      	beq.n	c71e <_malloc_r+0x1ba>
    c624:	686a      	ldr	r2, [r5, #4]
    c626:	f022 0203 	bic.w	r2, r2, #3
    c62a:	1b93      	subs	r3, r2, r6
    c62c:	2b0f      	cmp	r3, #15
    c62e:	f300 817b 	bgt.w	c928 <_malloc_r+0x3c4>
    c632:	2b00      	cmp	r3, #0
    c634:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    c638:	f280 816c 	bge.w	c914 <_malloc_r+0x3b0>
    c63c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    c640:	f080 811a 	bcs.w	c878 <_malloc_r+0x314>
    c644:	08d3      	lsrs	r3, r2, #3
    c646:	6879      	ldr	r1, [r7, #4]
    c648:	3301      	adds	r3, #1
    c64a:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    c64e:	2201      	movs	r2, #1
    c650:	fa02 f20e 	lsl.w	r2, r2, lr
    c654:	430a      	orrs	r2, r1
    c656:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    c65a:	f8c5 e008 	str.w	lr, [r5, #8]
    c65e:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    c662:	3908      	subs	r1, #8
    c664:	60e9      	str	r1, [r5, #12]
    c666:	607a      	str	r2, [r7, #4]
    c668:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    c66c:	f8ce 500c 	str.w	r5, [lr, #12]
    c670:	1083      	asrs	r3, r0, #2
    c672:	2101      	movs	r1, #1
    c674:	4099      	lsls	r1, r3
    c676:	4291      	cmp	r1, r2
    c678:	d857      	bhi.n	c72a <_malloc_r+0x1c6>
    c67a:	4211      	tst	r1, r2
    c67c:	d106      	bne.n	c68c <_malloc_r+0x128>
    c67e:	f020 0003 	bic.w	r0, r0, #3
    c682:	0049      	lsls	r1, r1, #1
    c684:	4211      	tst	r1, r2
    c686:	f100 0004 	add.w	r0, r0, #4
    c68a:	d0fa      	beq.n	c682 <_malloc_r+0x11e>
    c68c:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    c690:	464d      	mov	r5, r9
    c692:	4686      	mov	lr, r0
    c694:	f8d5 800c 	ldr.w	r8, [r5, #12]
    c698:	4545      	cmp	r5, r8
    c69a:	d108      	bne.n	c6ae <_malloc_r+0x14a>
    c69c:	e11d      	b.n	c8da <_malloc_r+0x376>
    c69e:	2b00      	cmp	r3, #0
    c6a0:	f280 8124 	bge.w	c8ec <_malloc_r+0x388>
    c6a4:	f8d8 800c 	ldr.w	r8, [r8, #12]
    c6a8:	4545      	cmp	r5, r8
    c6aa:	f000 8116 	beq.w	c8da <_malloc_r+0x376>
    c6ae:	f8d8 2004 	ldr.w	r2, [r8, #4]
    c6b2:	f022 0203 	bic.w	r2, r2, #3
    c6b6:	1b93      	subs	r3, r2, r6
    c6b8:	2b0f      	cmp	r3, #15
    c6ba:	ddf0      	ble.n	c69e <_malloc_r+0x13a>
    c6bc:	4620      	mov	r0, r4
    c6be:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    c6c2:	eb08 0106 	add.w	r1, r8, r6
    c6c6:	f046 0601 	orr.w	r6, r6, #1
    c6ca:	f8c8 6004 	str.w	r6, [r8, #4]
    c6ce:	60ec      	str	r4, [r5, #12]
    c6d0:	60a5      	str	r5, [r4, #8]
    c6d2:	f043 0401 	orr.w	r4, r3, #1
    c6d6:	e9c7 1104 	strd	r1, r1, [r7, #16]
    c6da:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    c6de:	604c      	str	r4, [r1, #4]
    c6e0:	f848 3002 	str.w	r3, [r8, r2]
    c6e4:	f000 f9f4 	bl	cad0 <__malloc_unlock>
    c6e8:	f108 0508 	add.w	r5, r8, #8
    c6ec:	e002      	b.n	c6f4 <_malloc_r+0x190>
    c6ee:	230c      	movs	r3, #12
    c6f0:	6023      	str	r3, [r4, #0]
    c6f2:	2500      	movs	r5, #0
    c6f4:	4628      	mov	r0, r5
    c6f6:	b003      	add	sp, #12
    c6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c6fc:	f44f 7300 	mov.w	r3, #512	; 0x200
    c700:	2040      	movs	r0, #64	; 0x40
    c702:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    c706:	e773      	b.n	c5f0 <_malloc_r+0x8c>
    c708:	68d3      	ldr	r3, [r2, #12]
    c70a:	429a      	cmp	r2, r3
    c70c:	bf08      	it	eq
    c70e:	3002      	addeq	r0, #2
    c710:	f47f af40 	bne.w	c594 <_malloc_r+0x30>
    c714:	693d      	ldr	r5, [r7, #16]
    c716:	f8df c148 	ldr.w	ip, [pc, #328]	; c860 <_malloc_r+0x2fc>
    c71a:	4565      	cmp	r5, ip
    c71c:	d182      	bne.n	c624 <_malloc_r+0xc0>
    c71e:	687a      	ldr	r2, [r7, #4]
    c720:	1083      	asrs	r3, r0, #2
    c722:	2101      	movs	r1, #1
    c724:	4099      	lsls	r1, r3
    c726:	4291      	cmp	r1, r2
    c728:	d9a7      	bls.n	c67a <_malloc_r+0x116>
    c72a:	68bd      	ldr	r5, [r7, #8]
    c72c:	686b      	ldr	r3, [r5, #4]
    c72e:	f023 0903 	bic.w	r9, r3, #3
    c732:	454e      	cmp	r6, r9
    c734:	d803      	bhi.n	c73e <_malloc_r+0x1da>
    c736:	eba9 0306 	sub.w	r3, r9, r6
    c73a:	2b0f      	cmp	r3, #15
    c73c:	dc7a      	bgt.n	c834 <_malloc_r+0x2d0>
    c73e:	f8df b124 	ldr.w	fp, [pc, #292]	; c864 <_malloc_r+0x300>
    c742:	4b49      	ldr	r3, [pc, #292]	; (c868 <_malloc_r+0x304>)
    c744:	f8db 2000 	ldr.w	r2, [fp]
    c748:	681b      	ldr	r3, [r3, #0]
    c74a:	3201      	adds	r2, #1
    c74c:	4433      	add	r3, r6
    c74e:	eb05 0a09 	add.w	sl, r5, r9
    c752:	f000 8133 	beq.w	c9bc <_malloc_r+0x458>
    c756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    c75a:	330f      	adds	r3, #15
    c75c:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    c760:	f028 080f 	bic.w	r8, r8, #15
    c764:	4641      	mov	r1, r8
    c766:	4620      	mov	r0, r4
    c768:	f000 fe32 	bl	d3d0 <_sbrk_r>
    c76c:	1c41      	adds	r1, r0, #1
    c76e:	4602      	mov	r2, r0
    c770:	f000 80f3 	beq.w	c95a <_malloc_r+0x3f6>
    c774:	4582      	cmp	sl, r0
    c776:	f200 80ee 	bhi.w	c956 <_malloc_r+0x3f2>
    c77a:	4b3c      	ldr	r3, [pc, #240]	; (c86c <_malloc_r+0x308>)
    c77c:	6819      	ldr	r1, [r3, #0]
    c77e:	4441      	add	r1, r8
    c780:	6019      	str	r1, [r3, #0]
    c782:	4608      	mov	r0, r1
    c784:	f000 814e 	beq.w	ca24 <_malloc_r+0x4c0>
    c788:	f8db 1000 	ldr.w	r1, [fp]
    c78c:	9301      	str	r3, [sp, #4]
    c78e:	3101      	adds	r1, #1
    c790:	bf1b      	ittet	ne
    c792:	eba2 010a 	subne.w	r1, r2, sl
    c796:	1809      	addne	r1, r1, r0
    c798:	f8cb 2000 	streq.w	r2, [fp]
    c79c:	6019      	strne	r1, [r3, #0]
    c79e:	f012 0b07 	ands.w	fp, r2, #7
    c7a2:	f000 8117 	beq.w	c9d4 <_malloc_r+0x470>
    c7a6:	f1cb 0108 	rsb	r1, fp, #8
    c7aa:	440a      	add	r2, r1
    c7ac:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    c7b0:	4490      	add	r8, r2
    c7b2:	3108      	adds	r1, #8
    c7b4:	eba1 0108 	sub.w	r1, r1, r8
    c7b8:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    c7bc:	4651      	mov	r1, sl
    c7be:	4620      	mov	r0, r4
    c7c0:	9200      	str	r2, [sp, #0]
    c7c2:	f000 fe05 	bl	d3d0 <_sbrk_r>
    c7c6:	1c42      	adds	r2, r0, #1
    c7c8:	e9dd 2300 	ldrd	r2, r3, [sp]
    c7cc:	f000 814f 	beq.w	ca6e <_malloc_r+0x50a>
    c7d0:	1a80      	subs	r0, r0, r2
    c7d2:	eb00 080a 	add.w	r8, r0, sl
    c7d6:	6819      	ldr	r1, [r3, #0]
    c7d8:	60ba      	str	r2, [r7, #8]
    c7da:	f048 0001 	orr.w	r0, r8, #1
    c7de:	4451      	add	r1, sl
    c7e0:	42bd      	cmp	r5, r7
    c7e2:	6050      	str	r0, [r2, #4]
    c7e4:	6019      	str	r1, [r3, #0]
    c7e6:	f000 8129 	beq.w	ca3c <_malloc_r+0x4d8>
    c7ea:	f1b9 0f0f 	cmp.w	r9, #15
    c7ee:	f240 8127 	bls.w	ca40 <_malloc_r+0x4dc>
    c7f2:	6868      	ldr	r0, [r5, #4]
    c7f4:	f1a9 0c0c 	sub.w	ip, r9, #12
    c7f8:	f02c 0c07 	bic.w	ip, ip, #7
    c7fc:	f000 0001 	and.w	r0, r0, #1
    c800:	ea40 000c 	orr.w	r0, r0, ip
    c804:	6068      	str	r0, [r5, #4]
    c806:	f04f 0e05 	mov.w	lr, #5
    c80a:	eb05 000c 	add.w	r0, r5, ip
    c80e:	f1bc 0f0f 	cmp.w	ip, #15
    c812:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    c816:	f200 8132 	bhi.w	ca7e <_malloc_r+0x51a>
    c81a:	6850      	ldr	r0, [r2, #4]
    c81c:	4615      	mov	r5, r2
    c81e:	4b14      	ldr	r3, [pc, #80]	; (c870 <_malloc_r+0x30c>)
    c820:	681a      	ldr	r2, [r3, #0]
    c822:	428a      	cmp	r2, r1
    c824:	bf38      	it	cc
    c826:	6019      	strcc	r1, [r3, #0]
    c828:	4b12      	ldr	r3, [pc, #72]	; (c874 <_malloc_r+0x310>)
    c82a:	681a      	ldr	r2, [r3, #0]
    c82c:	428a      	cmp	r2, r1
    c82e:	bf38      	it	cc
    c830:	6019      	strcc	r1, [r3, #0]
    c832:	e094      	b.n	c95e <_malloc_r+0x3fa>
    c834:	19aa      	adds	r2, r5, r6
    c836:	f043 0301 	orr.w	r3, r3, #1
    c83a:	f046 0601 	orr.w	r6, r6, #1
    c83e:	606e      	str	r6, [r5, #4]
    c840:	4620      	mov	r0, r4
    c842:	60ba      	str	r2, [r7, #8]
    c844:	6053      	str	r3, [r2, #4]
    c846:	f000 f943 	bl	cad0 <__malloc_unlock>
    c84a:	3508      	adds	r5, #8
    c84c:	4628      	mov	r0, r5
    c84e:	b003      	add	sp, #12
    c850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c854:	68d9      	ldr	r1, [r3, #12]
    c856:	441a      	add	r2, r3
    c858:	e6a1      	b.n	c59e <_malloc_r+0x3a>
    c85a:	bf00      	nop
    c85c:	1fff88c8 	.word	0x1fff88c8
    c860:	1fff88d0 	.word	0x1fff88d0
    c864:	1fff8cd0 	.word	0x1fff8cd0
    c868:	1fffb748 	.word	0x1fffb748
    c86c:	1fffb718 	.word	0x1fffb718
    c870:	1fffb740 	.word	0x1fffb740
    c874:	1fffb744 	.word	0x1fffb744
    c878:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    c87c:	ea4f 2352 	mov.w	r3, r2, lsr #9
    c880:	d363      	bcc.n	c94a <_malloc_r+0x3e6>
    c882:	2b14      	cmp	r3, #20
    c884:	f200 80b7 	bhi.w	c9f6 <_malloc_r+0x492>
    c888:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    c88c:	00c9      	lsls	r1, r1, #3
    c88e:	335b      	adds	r3, #91	; 0x5b
    c890:	eb07 0e01 	add.w	lr, r7, r1
    c894:	5879      	ldr	r1, [r7, r1]
    c896:	f1ae 0e08 	sub.w	lr, lr, #8
    c89a:	458e      	cmp	lr, r1
    c89c:	f000 8091 	beq.w	c9c2 <_malloc_r+0x45e>
    c8a0:	684b      	ldr	r3, [r1, #4]
    c8a2:	f023 0303 	bic.w	r3, r3, #3
    c8a6:	4293      	cmp	r3, r2
    c8a8:	d902      	bls.n	c8b0 <_malloc_r+0x34c>
    c8aa:	6889      	ldr	r1, [r1, #8]
    c8ac:	458e      	cmp	lr, r1
    c8ae:	d1f7      	bne.n	c8a0 <_malloc_r+0x33c>
    c8b0:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    c8b4:	687a      	ldr	r2, [r7, #4]
    c8b6:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    c8ba:	f8ce 5008 	str.w	r5, [lr, #8]
    c8be:	60cd      	str	r5, [r1, #12]
    c8c0:	e6d6      	b.n	c670 <_malloc_r+0x10c>
    c8c2:	2b14      	cmp	r3, #20
    c8c4:	d959      	bls.n	c97a <_malloc_r+0x416>
    c8c6:	2b54      	cmp	r3, #84	; 0x54
    c8c8:	f200 809d 	bhi.w	ca06 <_malloc_r+0x4a2>
    c8cc:	0b33      	lsrs	r3, r6, #12
    c8ce:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    c8d2:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    c8d6:	00c3      	lsls	r3, r0, #3
    c8d8:	e68a      	b.n	c5f0 <_malloc_r+0x8c>
    c8da:	f10e 0e01 	add.w	lr, lr, #1
    c8de:	f01e 0f03 	tst.w	lr, #3
    c8e2:	f105 0508 	add.w	r5, r5, #8
    c8e6:	f47f aed5 	bne.w	c694 <_malloc_r+0x130>
    c8ea:	e051      	b.n	c990 <_malloc_r+0x42c>
    c8ec:	4442      	add	r2, r8
    c8ee:	4645      	mov	r5, r8
    c8f0:	6853      	ldr	r3, [r2, #4]
    c8f2:	f8d8 100c 	ldr.w	r1, [r8, #12]
    c8f6:	f043 0301 	orr.w	r3, r3, #1
    c8fa:	6053      	str	r3, [r2, #4]
    c8fc:	f855 3f08 	ldr.w	r3, [r5, #8]!
    c900:	4620      	mov	r0, r4
    c902:	60d9      	str	r1, [r3, #12]
    c904:	608b      	str	r3, [r1, #8]
    c906:	f000 f8e3 	bl	cad0 <__malloc_unlock>
    c90a:	e6f3      	b.n	c6f4 <_malloc_r+0x190>
    c90c:	08f0      	lsrs	r0, r6, #3
    c90e:	f106 0208 	add.w	r2, r6, #8
    c912:	e637      	b.n	c584 <_malloc_r+0x20>
    c914:	442a      	add	r2, r5
    c916:	4620      	mov	r0, r4
    c918:	6853      	ldr	r3, [r2, #4]
    c91a:	f043 0301 	orr.w	r3, r3, #1
    c91e:	6053      	str	r3, [r2, #4]
    c920:	3508      	adds	r5, #8
    c922:	f000 f8d5 	bl	cad0 <__malloc_unlock>
    c926:	e6e5      	b.n	c6f4 <_malloc_r+0x190>
    c928:	19a9      	adds	r1, r5, r6
    c92a:	4620      	mov	r0, r4
    c92c:	f046 0601 	orr.w	r6, r6, #1
    c930:	f043 0401 	orr.w	r4, r3, #1
    c934:	606e      	str	r6, [r5, #4]
    c936:	e9c7 1104 	strd	r1, r1, [r7, #16]
    c93a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    c93e:	604c      	str	r4, [r1, #4]
    c940:	50ab      	str	r3, [r5, r2]
    c942:	f000 f8c5 	bl	cad0 <__malloc_unlock>
    c946:	3508      	adds	r5, #8
    c948:	e6d4      	b.n	c6f4 <_malloc_r+0x190>
    c94a:	0993      	lsrs	r3, r2, #6
    c94c:	f103 0139 	add.w	r1, r3, #57	; 0x39
    c950:	00c9      	lsls	r1, r1, #3
    c952:	3338      	adds	r3, #56	; 0x38
    c954:	e79c      	b.n	c890 <_malloc_r+0x32c>
    c956:	42bd      	cmp	r5, r7
    c958:	d05f      	beq.n	ca1a <_malloc_r+0x4b6>
    c95a:	68bd      	ldr	r5, [r7, #8]
    c95c:	6868      	ldr	r0, [r5, #4]
    c95e:	f020 0803 	bic.w	r8, r0, #3
    c962:	4546      	cmp	r6, r8
    c964:	eba8 0306 	sub.w	r3, r8, r6
    c968:	d802      	bhi.n	c970 <_malloc_r+0x40c>
    c96a:	2b0f      	cmp	r3, #15
    c96c:	f73f af62 	bgt.w	c834 <_malloc_r+0x2d0>
    c970:	4620      	mov	r0, r4
    c972:	f000 f8ad 	bl	cad0 <__malloc_unlock>
    c976:	2500      	movs	r5, #0
    c978:	e6bc      	b.n	c6f4 <_malloc_r+0x190>
    c97a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    c97e:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    c982:	00c3      	lsls	r3, r0, #3
    c984:	e634      	b.n	c5f0 <_malloc_r+0x8c>
    c986:	f859 3908 	ldr.w	r3, [r9], #-8
    c98a:	454b      	cmp	r3, r9
    c98c:	f040 8096 	bne.w	cabc <_malloc_r+0x558>
    c990:	f010 0f03 	tst.w	r0, #3
    c994:	f100 30ff 	add.w	r0, r0, #4294967295
    c998:	d1f5      	bne.n	c986 <_malloc_r+0x422>
    c99a:	687b      	ldr	r3, [r7, #4]
    c99c:	ea23 0301 	bic.w	r3, r3, r1
    c9a0:	607b      	str	r3, [r7, #4]
    c9a2:	0049      	lsls	r1, r1, #1
    c9a4:	4299      	cmp	r1, r3
    c9a6:	f63f aec0 	bhi.w	c72a <_malloc_r+0x1c6>
    c9aa:	b919      	cbnz	r1, c9b4 <_malloc_r+0x450>
    c9ac:	e6bd      	b.n	c72a <_malloc_r+0x1c6>
    c9ae:	0049      	lsls	r1, r1, #1
    c9b0:	f10e 0e04 	add.w	lr, lr, #4
    c9b4:	4219      	tst	r1, r3
    c9b6:	d0fa      	beq.n	c9ae <_malloc_r+0x44a>
    c9b8:	4670      	mov	r0, lr
    c9ba:	e667      	b.n	c68c <_malloc_r+0x128>
    c9bc:	f103 0810 	add.w	r8, r3, #16
    c9c0:	e6d0      	b.n	c764 <_malloc_r+0x200>
    c9c2:	109a      	asrs	r2, r3, #2
    c9c4:	f04f 0801 	mov.w	r8, #1
    c9c8:	687b      	ldr	r3, [r7, #4]
    c9ca:	fa08 f202 	lsl.w	r2, r8, r2
    c9ce:	431a      	orrs	r2, r3
    c9d0:	607a      	str	r2, [r7, #4]
    c9d2:	e770      	b.n	c8b6 <_malloc_r+0x352>
    c9d4:	eb02 0108 	add.w	r1, r2, r8
    c9d8:	4249      	negs	r1, r1
    c9da:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    c9de:	4651      	mov	r1, sl
    c9e0:	4620      	mov	r0, r4
    c9e2:	9200      	str	r2, [sp, #0]
    c9e4:	f000 fcf4 	bl	d3d0 <_sbrk_r>
    c9e8:	1c43      	adds	r3, r0, #1
    c9ea:	e9dd 2300 	ldrd	r2, r3, [sp]
    c9ee:	f47f aeef 	bne.w	c7d0 <_malloc_r+0x26c>
    c9f2:	46da      	mov	sl, fp
    c9f4:	e6ef      	b.n	c7d6 <_malloc_r+0x272>
    c9f6:	2b54      	cmp	r3, #84	; 0x54
    c9f8:	d825      	bhi.n	ca46 <_malloc_r+0x4e2>
    c9fa:	0b13      	lsrs	r3, r2, #12
    c9fc:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    ca00:	00c9      	lsls	r1, r1, #3
    ca02:	336e      	adds	r3, #110	; 0x6e
    ca04:	e744      	b.n	c890 <_malloc_r+0x32c>
    ca06:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    ca0a:	d825      	bhi.n	ca58 <_malloc_r+0x4f4>
    ca0c:	0bf3      	lsrs	r3, r6, #15
    ca0e:	f103 0078 	add.w	r0, r3, #120	; 0x78
    ca12:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    ca16:	00c3      	lsls	r3, r0, #3
    ca18:	e5ea      	b.n	c5f0 <_malloc_r+0x8c>
    ca1a:	4b29      	ldr	r3, [pc, #164]	; (cac0 <_malloc_r+0x55c>)
    ca1c:	6818      	ldr	r0, [r3, #0]
    ca1e:	4440      	add	r0, r8
    ca20:	6018      	str	r0, [r3, #0]
    ca22:	e6b1      	b.n	c788 <_malloc_r+0x224>
    ca24:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    ca28:	f1bc 0f00 	cmp.w	ip, #0
    ca2c:	f47f aeac 	bne.w	c788 <_malloc_r+0x224>
    ca30:	68bd      	ldr	r5, [r7, #8]
    ca32:	44c8      	add	r8, r9
    ca34:	f048 0001 	orr.w	r0, r8, #1
    ca38:	6068      	str	r0, [r5, #4]
    ca3a:	e6f0      	b.n	c81e <_malloc_r+0x2ba>
    ca3c:	4615      	mov	r5, r2
    ca3e:	e6ee      	b.n	c81e <_malloc_r+0x2ba>
    ca40:	2301      	movs	r3, #1
    ca42:	6053      	str	r3, [r2, #4]
    ca44:	e794      	b.n	c970 <_malloc_r+0x40c>
    ca46:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    ca4a:	d823      	bhi.n	ca94 <_malloc_r+0x530>
    ca4c:	0bd3      	lsrs	r3, r2, #15
    ca4e:	f103 0178 	add.w	r1, r3, #120	; 0x78
    ca52:	00c9      	lsls	r1, r1, #3
    ca54:	3377      	adds	r3, #119	; 0x77
    ca56:	e71b      	b.n	c890 <_malloc_r+0x32c>
    ca58:	f240 5254 	movw	r2, #1364	; 0x554
    ca5c:	4293      	cmp	r3, r2
    ca5e:	d823      	bhi.n	caa8 <_malloc_r+0x544>
    ca60:	0cb3      	lsrs	r3, r6, #18
    ca62:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    ca66:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    ca6a:	00c3      	lsls	r3, r0, #3
    ca6c:	e5c0      	b.n	c5f0 <_malloc_r+0x8c>
    ca6e:	f1ab 0b08 	sub.w	fp, fp, #8
    ca72:	44d8      	add	r8, fp
    ca74:	eba8 0802 	sub.w	r8, r8, r2
    ca78:	f04f 0a00 	mov.w	sl, #0
    ca7c:	e6ab      	b.n	c7d6 <_malloc_r+0x272>
    ca7e:	f105 0108 	add.w	r1, r5, #8
    ca82:	4620      	mov	r0, r4
    ca84:	9300      	str	r3, [sp, #0]
    ca86:	f000 fde9 	bl	d65c <_free_r>
    ca8a:	68bd      	ldr	r5, [r7, #8]
    ca8c:	9b00      	ldr	r3, [sp, #0]
    ca8e:	6868      	ldr	r0, [r5, #4]
    ca90:	6819      	ldr	r1, [r3, #0]
    ca92:	e6c4      	b.n	c81e <_malloc_r+0x2ba>
    ca94:	f240 5154 	movw	r1, #1364	; 0x554
    ca98:	428b      	cmp	r3, r1
    ca9a:	d80b      	bhi.n	cab4 <_malloc_r+0x550>
    ca9c:	0c93      	lsrs	r3, r2, #18
    ca9e:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    caa2:	00c9      	lsls	r1, r1, #3
    caa4:	337c      	adds	r3, #124	; 0x7c
    caa6:	e6f3      	b.n	c890 <_malloc_r+0x32c>
    caa8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    caac:	207f      	movs	r0, #127	; 0x7f
    caae:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    cab2:	e59d      	b.n	c5f0 <_malloc_r+0x8c>
    cab4:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    cab8:	237e      	movs	r3, #126	; 0x7e
    caba:	e6e9      	b.n	c890 <_malloc_r+0x32c>
    cabc:	687b      	ldr	r3, [r7, #4]
    cabe:	e770      	b.n	c9a2 <_malloc_r+0x43e>
    cac0:	1fffb718 	.word	0x1fffb718

0000cac4 <__malloc_lock>:
    cac4:	4801      	ldr	r0, [pc, #4]	; (cacc <__malloc_lock+0x8>)
    cac6:	f000 bcd9 	b.w	d47c <__retarget_lock_acquire_recursive>
    caca:	bf00      	nop
    cacc:	1fffb890 	.word	0x1fffb890

0000cad0 <__malloc_unlock>:
    cad0:	4801      	ldr	r0, [pc, #4]	; (cad8 <__malloc_unlock+0x8>)
    cad2:	f000 bcd5 	b.w	d480 <__retarget_lock_release_recursive>
    cad6:	bf00      	nop
    cad8:	1fffb890 	.word	0x1fffb890

0000cadc <_realloc_r>:
    cadc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cae0:	4617      	mov	r7, r2
    cae2:	2900      	cmp	r1, #0
    cae4:	f000 8098 	beq.w	cc18 <_realloc_r+0x13c>
    cae8:	460c      	mov	r4, r1
    caea:	f107 050b 	add.w	r5, r7, #11
    caee:	4680      	mov	r8, r0
    caf0:	f7ff ffe8 	bl	cac4 <__malloc_lock>
    caf4:	2d16      	cmp	r5, #22
    caf6:	f854 1c04 	ldr.w	r1, [r4, #-4]
    cafa:	d85b      	bhi.n	cbb4 <_realloc_r+0xd8>
    cafc:	2510      	movs	r5, #16
    cafe:	462a      	mov	r2, r5
    cb00:	42af      	cmp	r7, r5
    cb02:	d85c      	bhi.n	cbbe <_realloc_r+0xe2>
    cb04:	f021 0603 	bic.w	r6, r1, #3
    cb08:	4296      	cmp	r6, r2
    cb0a:	f1a4 0908 	sub.w	r9, r4, #8
    cb0e:	da62      	bge.n	cbd6 <_realloc_r+0xfa>
    cb10:	4bbc      	ldr	r3, [pc, #752]	; (ce04 <_realloc_r+0x328>)
    cb12:	f8d3 c008 	ldr.w	ip, [r3, #8]
    cb16:	eb09 0006 	add.w	r0, r9, r6
    cb1a:	4584      	cmp	ip, r0
    cb1c:	f000 8097 	beq.w	cc4e <_realloc_r+0x172>
    cb20:	f8d0 c004 	ldr.w	ip, [r0, #4]
    cb24:	f02c 0301 	bic.w	r3, ip, #1
    cb28:	4403      	add	r3, r0
    cb2a:	685b      	ldr	r3, [r3, #4]
    cb2c:	07db      	lsls	r3, r3, #31
    cb2e:	d468      	bmi.n	cc02 <_realloc_r+0x126>
    cb30:	f02c 0c03 	bic.w	ip, ip, #3
    cb34:	eb06 030c 	add.w	r3, r6, ip
    cb38:	4293      	cmp	r3, r2
    cb3a:	da47      	bge.n	cbcc <_realloc_r+0xf0>
    cb3c:	07cb      	lsls	r3, r1, #31
    cb3e:	d410      	bmi.n	cb62 <_realloc_r+0x86>
    cb40:	f854 3c08 	ldr.w	r3, [r4, #-8]
    cb44:	eba9 0a03 	sub.w	sl, r9, r3
    cb48:	f8da 3004 	ldr.w	r3, [sl, #4]
    cb4c:	f023 0103 	bic.w	r1, r3, #3
    cb50:	448c      	add	ip, r1
    cb52:	44b4      	add	ip, r6
    cb54:	4594      	cmp	ip, r2
    cb56:	f280 8111 	bge.w	cd7c <_realloc_r+0x2a0>
    cb5a:	1873      	adds	r3, r6, r1
    cb5c:	4293      	cmp	r3, r2
    cb5e:	f280 80e8 	bge.w	cd32 <_realloc_r+0x256>
    cb62:	4639      	mov	r1, r7
    cb64:	4640      	mov	r0, r8
    cb66:	f7ff fcfd 	bl	c564 <_malloc_r>
    cb6a:	4607      	mov	r7, r0
    cb6c:	b1e0      	cbz	r0, cba8 <_realloc_r+0xcc>
    cb6e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    cb72:	f023 0301 	bic.w	r3, r3, #1
    cb76:	444b      	add	r3, r9
    cb78:	f1a0 0208 	sub.w	r2, r0, #8
    cb7c:	4293      	cmp	r3, r2
    cb7e:	f000 80d2 	beq.w	cd26 <_realloc_r+0x24a>
    cb82:	1f32      	subs	r2, r6, #4
    cb84:	2a24      	cmp	r2, #36	; 0x24
    cb86:	f200 80f5 	bhi.w	cd74 <_realloc_r+0x298>
    cb8a:	2a13      	cmp	r2, #19
    cb8c:	f200 80ac 	bhi.w	cce8 <_realloc_r+0x20c>
    cb90:	4603      	mov	r3, r0
    cb92:	4622      	mov	r2, r4
    cb94:	6811      	ldr	r1, [r2, #0]
    cb96:	6019      	str	r1, [r3, #0]
    cb98:	6851      	ldr	r1, [r2, #4]
    cb9a:	6059      	str	r1, [r3, #4]
    cb9c:	6892      	ldr	r2, [r2, #8]
    cb9e:	609a      	str	r2, [r3, #8]
    cba0:	4621      	mov	r1, r4
    cba2:	4640      	mov	r0, r8
    cba4:	f000 fd5a 	bl	d65c <_free_r>
    cba8:	4640      	mov	r0, r8
    cbaa:	f7ff ff91 	bl	cad0 <__malloc_unlock>
    cbae:	4638      	mov	r0, r7
    cbb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cbb4:	f025 0507 	bic.w	r5, r5, #7
    cbb8:	2d00      	cmp	r5, #0
    cbba:	462a      	mov	r2, r5
    cbbc:	daa0      	bge.n	cb00 <_realloc_r+0x24>
    cbbe:	230c      	movs	r3, #12
    cbc0:	f8c8 3000 	str.w	r3, [r8]
    cbc4:	2700      	movs	r7, #0
    cbc6:	4638      	mov	r0, r7
    cbc8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cbcc:	461e      	mov	r6, r3
    cbce:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    cbd2:	60d3      	str	r3, [r2, #12]
    cbd4:	609a      	str	r2, [r3, #8]
    cbd6:	1b73      	subs	r3, r6, r5
    cbd8:	2b0f      	cmp	r3, #15
    cbda:	d822      	bhi.n	cc22 <_realloc_r+0x146>
    cbdc:	f8d9 3004 	ldr.w	r3, [r9, #4]
    cbe0:	f003 0301 	and.w	r3, r3, #1
    cbe4:	4333      	orrs	r3, r6
    cbe6:	444e      	add	r6, r9
    cbe8:	f8c9 3004 	str.w	r3, [r9, #4]
    cbec:	6873      	ldr	r3, [r6, #4]
    cbee:	f043 0301 	orr.w	r3, r3, #1
    cbf2:	6073      	str	r3, [r6, #4]
    cbf4:	4640      	mov	r0, r8
    cbf6:	4627      	mov	r7, r4
    cbf8:	f7ff ff6a 	bl	cad0 <__malloc_unlock>
    cbfc:	4638      	mov	r0, r7
    cbfe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc02:	07c9      	lsls	r1, r1, #31
    cc04:	d4ad      	bmi.n	cb62 <_realloc_r+0x86>
    cc06:	f854 3c08 	ldr.w	r3, [r4, #-8]
    cc0a:	eba9 0a03 	sub.w	sl, r9, r3
    cc0e:	f8da 1004 	ldr.w	r1, [sl, #4]
    cc12:	f021 0103 	bic.w	r1, r1, #3
    cc16:	e7a0      	b.n	cb5a <_realloc_r+0x7e>
    cc18:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cc1c:	4611      	mov	r1, r2
    cc1e:	f7ff bca1 	b.w	c564 <_malloc_r>
    cc22:	f8d9 2004 	ldr.w	r2, [r9, #4]
    cc26:	eb09 0105 	add.w	r1, r9, r5
    cc2a:	f002 0201 	and.w	r2, r2, #1
    cc2e:	444e      	add	r6, r9
    cc30:	f043 0301 	orr.w	r3, r3, #1
    cc34:	432a      	orrs	r2, r5
    cc36:	f8c9 2004 	str.w	r2, [r9, #4]
    cc3a:	604b      	str	r3, [r1, #4]
    cc3c:	6873      	ldr	r3, [r6, #4]
    cc3e:	f043 0301 	orr.w	r3, r3, #1
    cc42:	3108      	adds	r1, #8
    cc44:	6073      	str	r3, [r6, #4]
    cc46:	4640      	mov	r0, r8
    cc48:	f000 fd08 	bl	d65c <_free_r>
    cc4c:	e7d2      	b.n	cbf4 <_realloc_r+0x118>
    cc4e:	f8dc 0004 	ldr.w	r0, [ip, #4]
    cc52:	f020 0b03 	bic.w	fp, r0, #3
    cc56:	eb06 0c0b 	add.w	ip, r6, fp
    cc5a:	f105 0010 	add.w	r0, r5, #16
    cc5e:	4584      	cmp	ip, r0
    cc60:	da4d      	bge.n	ccfe <_realloc_r+0x222>
    cc62:	07c9      	lsls	r1, r1, #31
    cc64:	f53f af7d 	bmi.w	cb62 <_realloc_r+0x86>
    cc68:	f854 1c08 	ldr.w	r1, [r4, #-8]
    cc6c:	eba9 0a01 	sub.w	sl, r9, r1
    cc70:	f8da 1004 	ldr.w	r1, [sl, #4]
    cc74:	f021 0103 	bic.w	r1, r1, #3
    cc78:	448b      	add	fp, r1
    cc7a:	44b3      	add	fp, r6
    cc7c:	4558      	cmp	r0, fp
    cc7e:	f73f af6c 	bgt.w	cb5a <_realloc_r+0x7e>
    cc82:	4657      	mov	r7, sl
    cc84:	f8da 100c 	ldr.w	r1, [sl, #12]
    cc88:	f857 0f08 	ldr.w	r0, [r7, #8]!
    cc8c:	1f32      	subs	r2, r6, #4
    cc8e:	2a24      	cmp	r2, #36	; 0x24
    cc90:	60c1      	str	r1, [r0, #12]
    cc92:	6088      	str	r0, [r1, #8]
    cc94:	f200 80db 	bhi.w	ce4e <_realloc_r+0x372>
    cc98:	2a13      	cmp	r2, #19
    cc9a:	f240 80d6 	bls.w	ce4a <_realloc_r+0x36e>
    cc9e:	6821      	ldr	r1, [r4, #0]
    cca0:	f8ca 1008 	str.w	r1, [sl, #8]
    cca4:	6861      	ldr	r1, [r4, #4]
    cca6:	f8ca 100c 	str.w	r1, [sl, #12]
    ccaa:	2a1b      	cmp	r2, #27
    ccac:	f200 80df 	bhi.w	ce6e <_realloc_r+0x392>
    ccb0:	3408      	adds	r4, #8
    ccb2:	f10a 0210 	add.w	r2, sl, #16
    ccb6:	6821      	ldr	r1, [r4, #0]
    ccb8:	6011      	str	r1, [r2, #0]
    ccba:	6861      	ldr	r1, [r4, #4]
    ccbc:	6051      	str	r1, [r2, #4]
    ccbe:	68a1      	ldr	r1, [r4, #8]
    ccc0:	6091      	str	r1, [r2, #8]
    ccc2:	eb0a 0105 	add.w	r1, sl, r5
    ccc6:	ebab 0205 	sub.w	r2, fp, r5
    ccca:	f042 0201 	orr.w	r2, r2, #1
    ccce:	6099      	str	r1, [r3, #8]
    ccd0:	604a      	str	r2, [r1, #4]
    ccd2:	f8da 3004 	ldr.w	r3, [sl, #4]
    ccd6:	f003 0301 	and.w	r3, r3, #1
    ccda:	432b      	orrs	r3, r5
    ccdc:	4640      	mov	r0, r8
    ccde:	f8ca 3004 	str.w	r3, [sl, #4]
    cce2:	f7ff fef5 	bl	cad0 <__malloc_unlock>
    cce6:	e76e      	b.n	cbc6 <_realloc_r+0xea>
    cce8:	6823      	ldr	r3, [r4, #0]
    ccea:	6003      	str	r3, [r0, #0]
    ccec:	6863      	ldr	r3, [r4, #4]
    ccee:	6043      	str	r3, [r0, #4]
    ccf0:	2a1b      	cmp	r2, #27
    ccf2:	d868      	bhi.n	cdc6 <_realloc_r+0x2ea>
    ccf4:	f104 0208 	add.w	r2, r4, #8
    ccf8:	f100 0308 	add.w	r3, r0, #8
    ccfc:	e74a      	b.n	cb94 <_realloc_r+0xb8>
    ccfe:	eb09 0205 	add.w	r2, r9, r5
    cd02:	609a      	str	r2, [r3, #8]
    cd04:	ebac 0305 	sub.w	r3, ip, r5
    cd08:	f043 0301 	orr.w	r3, r3, #1
    cd0c:	6053      	str	r3, [r2, #4]
    cd0e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    cd12:	f003 0301 	and.w	r3, r3, #1
    cd16:	432b      	orrs	r3, r5
    cd18:	4640      	mov	r0, r8
    cd1a:	f844 3c04 	str.w	r3, [r4, #-4]
    cd1e:	f7ff fed7 	bl	cad0 <__malloc_unlock>
    cd22:	4627      	mov	r7, r4
    cd24:	e74f      	b.n	cbc6 <_realloc_r+0xea>
    cd26:	f850 3c04 	ldr.w	r3, [r0, #-4]
    cd2a:	f023 0303 	bic.w	r3, r3, #3
    cd2e:	441e      	add	r6, r3
    cd30:	e751      	b.n	cbd6 <_realloc_r+0xfa>
    cd32:	4657      	mov	r7, sl
    cd34:	f8da 100c 	ldr.w	r1, [sl, #12]
    cd38:	f857 0f08 	ldr.w	r0, [r7, #8]!
    cd3c:	1f32      	subs	r2, r6, #4
    cd3e:	2a24      	cmp	r2, #36	; 0x24
    cd40:	60c1      	str	r1, [r0, #12]
    cd42:	6088      	str	r0, [r1, #8]
    cd44:	d84c      	bhi.n	cde0 <_realloc_r+0x304>
    cd46:	2a13      	cmp	r2, #19
    cd48:	d948      	bls.n	cddc <_realloc_r+0x300>
    cd4a:	6821      	ldr	r1, [r4, #0]
    cd4c:	f8ca 1008 	str.w	r1, [sl, #8]
    cd50:	6861      	ldr	r1, [r4, #4]
    cd52:	f8ca 100c 	str.w	r1, [sl, #12]
    cd56:	2a1b      	cmp	r2, #27
    cd58:	d856      	bhi.n	ce08 <_realloc_r+0x32c>
    cd5a:	3408      	adds	r4, #8
    cd5c:	f10a 0210 	add.w	r2, sl, #16
    cd60:	461e      	mov	r6, r3
    cd62:	6823      	ldr	r3, [r4, #0]
    cd64:	6013      	str	r3, [r2, #0]
    cd66:	6863      	ldr	r3, [r4, #4]
    cd68:	6053      	str	r3, [r2, #4]
    cd6a:	68a3      	ldr	r3, [r4, #8]
    cd6c:	6093      	str	r3, [r2, #8]
    cd6e:	46d1      	mov	r9, sl
    cd70:	463c      	mov	r4, r7
    cd72:	e730      	b.n	cbd6 <_realloc_r+0xfa>
    cd74:	4621      	mov	r1, r4
    cd76:	f000 f9e7 	bl	d148 <memmove>
    cd7a:	e711      	b.n	cba0 <_realloc_r+0xc4>
    cd7c:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    cd80:	4657      	mov	r7, sl
    cd82:	60cb      	str	r3, [r1, #12]
    cd84:	6099      	str	r1, [r3, #8]
    cd86:	f857 1f08 	ldr.w	r1, [r7, #8]!
    cd8a:	f8da 300c 	ldr.w	r3, [sl, #12]
    cd8e:	60cb      	str	r3, [r1, #12]
    cd90:	1f32      	subs	r2, r6, #4
    cd92:	2a24      	cmp	r2, #36	; 0x24
    cd94:	6099      	str	r1, [r3, #8]
    cd96:	d82d      	bhi.n	cdf4 <_realloc_r+0x318>
    cd98:	2a13      	cmp	r2, #19
    cd9a:	d929      	bls.n	cdf0 <_realloc_r+0x314>
    cd9c:	6823      	ldr	r3, [r4, #0]
    cd9e:	f8ca 3008 	str.w	r3, [sl, #8]
    cda2:	6863      	ldr	r3, [r4, #4]
    cda4:	f8ca 300c 	str.w	r3, [sl, #12]
    cda8:	2a1b      	cmp	r2, #27
    cdaa:	d842      	bhi.n	ce32 <_realloc_r+0x356>
    cdac:	3408      	adds	r4, #8
    cdae:	f10a 0310 	add.w	r3, sl, #16
    cdb2:	6822      	ldr	r2, [r4, #0]
    cdb4:	601a      	str	r2, [r3, #0]
    cdb6:	6862      	ldr	r2, [r4, #4]
    cdb8:	605a      	str	r2, [r3, #4]
    cdba:	68a2      	ldr	r2, [r4, #8]
    cdbc:	609a      	str	r2, [r3, #8]
    cdbe:	4666      	mov	r6, ip
    cdc0:	46d1      	mov	r9, sl
    cdc2:	463c      	mov	r4, r7
    cdc4:	e707      	b.n	cbd6 <_realloc_r+0xfa>
    cdc6:	68a3      	ldr	r3, [r4, #8]
    cdc8:	6083      	str	r3, [r0, #8]
    cdca:	68e3      	ldr	r3, [r4, #12]
    cdcc:	60c3      	str	r3, [r0, #12]
    cdce:	2a24      	cmp	r2, #36	; 0x24
    cdd0:	d026      	beq.n	ce20 <_realloc_r+0x344>
    cdd2:	f104 0210 	add.w	r2, r4, #16
    cdd6:	f100 0310 	add.w	r3, r0, #16
    cdda:	e6db      	b.n	cb94 <_realloc_r+0xb8>
    cddc:	463a      	mov	r2, r7
    cdde:	e7bf      	b.n	cd60 <_realloc_r+0x284>
    cde0:	4621      	mov	r1, r4
    cde2:	4638      	mov	r0, r7
    cde4:	461e      	mov	r6, r3
    cde6:	46d1      	mov	r9, sl
    cde8:	f000 f9ae 	bl	d148 <memmove>
    cdec:	463c      	mov	r4, r7
    cdee:	e6f2      	b.n	cbd6 <_realloc_r+0xfa>
    cdf0:	463b      	mov	r3, r7
    cdf2:	e7de      	b.n	cdb2 <_realloc_r+0x2d6>
    cdf4:	4621      	mov	r1, r4
    cdf6:	4638      	mov	r0, r7
    cdf8:	4666      	mov	r6, ip
    cdfa:	46d1      	mov	r9, sl
    cdfc:	f000 f9a4 	bl	d148 <memmove>
    ce00:	463c      	mov	r4, r7
    ce02:	e6e8      	b.n	cbd6 <_realloc_r+0xfa>
    ce04:	1fff88c8 	.word	0x1fff88c8
    ce08:	68a1      	ldr	r1, [r4, #8]
    ce0a:	f8ca 1010 	str.w	r1, [sl, #16]
    ce0e:	68e1      	ldr	r1, [r4, #12]
    ce10:	f8ca 1014 	str.w	r1, [sl, #20]
    ce14:	2a24      	cmp	r2, #36	; 0x24
    ce16:	d020      	beq.n	ce5a <_realloc_r+0x37e>
    ce18:	3410      	adds	r4, #16
    ce1a:	f10a 0218 	add.w	r2, sl, #24
    ce1e:	e79f      	b.n	cd60 <_realloc_r+0x284>
    ce20:	6923      	ldr	r3, [r4, #16]
    ce22:	6103      	str	r3, [r0, #16]
    ce24:	6961      	ldr	r1, [r4, #20]
    ce26:	6141      	str	r1, [r0, #20]
    ce28:	f104 0218 	add.w	r2, r4, #24
    ce2c:	f100 0318 	add.w	r3, r0, #24
    ce30:	e6b0      	b.n	cb94 <_realloc_r+0xb8>
    ce32:	68a3      	ldr	r3, [r4, #8]
    ce34:	f8ca 3010 	str.w	r3, [sl, #16]
    ce38:	68e3      	ldr	r3, [r4, #12]
    ce3a:	f8ca 3014 	str.w	r3, [sl, #20]
    ce3e:	2a24      	cmp	r2, #36	; 0x24
    ce40:	d021      	beq.n	ce86 <_realloc_r+0x3aa>
    ce42:	3410      	adds	r4, #16
    ce44:	f10a 0318 	add.w	r3, sl, #24
    ce48:	e7b3      	b.n	cdb2 <_realloc_r+0x2d6>
    ce4a:	463a      	mov	r2, r7
    ce4c:	e733      	b.n	ccb6 <_realloc_r+0x1da>
    ce4e:	4621      	mov	r1, r4
    ce50:	4638      	mov	r0, r7
    ce52:	f000 f979 	bl	d148 <memmove>
    ce56:	4b16      	ldr	r3, [pc, #88]	; (ceb0 <_realloc_r+0x3d4>)
    ce58:	e733      	b.n	ccc2 <_realloc_r+0x1e6>
    ce5a:	6922      	ldr	r2, [r4, #16]
    ce5c:	f8ca 2018 	str.w	r2, [sl, #24]
    ce60:	6962      	ldr	r2, [r4, #20]
    ce62:	f8ca 201c 	str.w	r2, [sl, #28]
    ce66:	3418      	adds	r4, #24
    ce68:	f10a 0220 	add.w	r2, sl, #32
    ce6c:	e778      	b.n	cd60 <_realloc_r+0x284>
    ce6e:	68a1      	ldr	r1, [r4, #8]
    ce70:	f8ca 1010 	str.w	r1, [sl, #16]
    ce74:	68e1      	ldr	r1, [r4, #12]
    ce76:	f8ca 1014 	str.w	r1, [sl, #20]
    ce7a:	2a24      	cmp	r2, #36	; 0x24
    ce7c:	d00d      	beq.n	ce9a <_realloc_r+0x3be>
    ce7e:	3410      	adds	r4, #16
    ce80:	f10a 0218 	add.w	r2, sl, #24
    ce84:	e717      	b.n	ccb6 <_realloc_r+0x1da>
    ce86:	6923      	ldr	r3, [r4, #16]
    ce88:	f8ca 3018 	str.w	r3, [sl, #24]
    ce8c:	6963      	ldr	r3, [r4, #20]
    ce8e:	f8ca 301c 	str.w	r3, [sl, #28]
    ce92:	3418      	adds	r4, #24
    ce94:	f10a 0320 	add.w	r3, sl, #32
    ce98:	e78b      	b.n	cdb2 <_realloc_r+0x2d6>
    ce9a:	6922      	ldr	r2, [r4, #16]
    ce9c:	f8ca 2018 	str.w	r2, [sl, #24]
    cea0:	6962      	ldr	r2, [r4, #20]
    cea2:	f8ca 201c 	str.w	r2, [sl, #28]
    cea6:	3418      	adds	r4, #24
    cea8:	f10a 0220 	add.w	r2, sl, #32
    ceac:	e703      	b.n	ccb6 <_realloc_r+0x1da>
    ceae:	bf00      	nop
    ceb0:	1fff88c8 	.word	0x1fff88c8

0000ceb4 <stdio_exit_handler>:
    ceb4:	4a02      	ldr	r2, [pc, #8]	; (cec0 <stdio_exit_handler+0xc>)
    ceb6:	4903      	ldr	r1, [pc, #12]	; (cec4 <stdio_exit_handler+0x10>)
    ceb8:	4803      	ldr	r0, [pc, #12]	; (cec8 <stdio_exit_handler+0x14>)
    ceba:	f000 b8bb 	b.w	d034 <_fwalk_sglue>
    cebe:	bf00      	nop
    cec0:	1fff8cd8 	.word	0x1fff8cd8
    cec4:	0000fbb1 	.word	0x0000fbb1
    cec8:	1fff8e50 	.word	0x1fff8e50

0000cecc <cleanup_stdio>:
    cecc:	4b0c      	ldr	r3, [pc, #48]	; (cf00 <cleanup_stdio+0x34>)
    cece:	6841      	ldr	r1, [r0, #4]
    ced0:	4299      	cmp	r1, r3
    ced2:	b510      	push	{r4, lr}
    ced4:	4604      	mov	r4, r0
    ced6:	d001      	beq.n	cedc <cleanup_stdio+0x10>
    ced8:	f002 fe6a 	bl	fbb0 <_fclose_r>
    cedc:	68a1      	ldr	r1, [r4, #8]
    cede:	4b09      	ldr	r3, [pc, #36]	; (cf04 <cleanup_stdio+0x38>)
    cee0:	4299      	cmp	r1, r3
    cee2:	d002      	beq.n	ceea <cleanup_stdio+0x1e>
    cee4:	4620      	mov	r0, r4
    cee6:	f002 fe63 	bl	fbb0 <_fclose_r>
    ceea:	68e1      	ldr	r1, [r4, #12]
    ceec:	4b06      	ldr	r3, [pc, #24]	; (cf08 <cleanup_stdio+0x3c>)
    ceee:	4299      	cmp	r1, r3
    cef0:	d004      	beq.n	cefc <cleanup_stdio+0x30>
    cef2:	4620      	mov	r0, r4
    cef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cef8:	f002 be5a 	b.w	fbb0 <_fclose_r>
    cefc:	bd10      	pop	{r4, pc}
    cefe:	bf00      	nop
    cf00:	1fffb74c 	.word	0x1fffb74c
    cf04:	1fffb7b4 	.word	0x1fffb7b4
    cf08:	1fffb81c 	.word	0x1fffb81c

0000cf0c <global_stdio_init.part.0>:
    cf0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cf10:	4c2a      	ldr	r4, [pc, #168]	; (cfbc <global_stdio_init.part.0+0xb0>)
    cf12:	4b2b      	ldr	r3, [pc, #172]	; (cfc0 <global_stdio_init.part.0+0xb4>)
    cf14:	482b      	ldr	r0, [pc, #172]	; (cfc4 <global_stdio_init.part.0+0xb8>)
    cf16:	f8df 90b0 	ldr.w	r9, [pc, #176]	; cfc8 <global_stdio_init.part.0+0xbc>
    cf1a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; cfcc <global_stdio_init.part.0+0xc0>
    cf1e:	4f2c      	ldr	r7, [pc, #176]	; (cfd0 <global_stdio_init.part.0+0xc4>)
    cf20:	6018      	str	r0, [r3, #0]
    cf22:	2500      	movs	r5, #0
    cf24:	2304      	movs	r3, #4
    cf26:	2208      	movs	r2, #8
    cf28:	4629      	mov	r1, r5
    cf2a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    cf2e:	4e29      	ldr	r6, [pc, #164]	; (cfd4 <global_stdio_init.part.0+0xc8>)
    cf30:	6665      	str	r5, [r4, #100]	; 0x64
    cf32:	e9c4 5302 	strd	r5, r3, [r4, #8]
    cf36:	e9c4 5500 	strd	r5, r5, [r4]
    cf3a:	e9c4 5504 	strd	r5, r5, [r4, #16]
    cf3e:	61a5      	str	r5, [r4, #24]
    cf40:	f000 f97e 	bl	d240 <memset>
    cf44:	4b24      	ldr	r3, [pc, #144]	; (cfd8 <global_stdio_init.part.0+0xcc>)
    cf46:	6763      	str	r3, [r4, #116]	; 0x74
    cf48:	2208      	movs	r2, #8
    cf4a:	4629      	mov	r1, r5
    cf4c:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    cf50:	e9c4 4907 	strd	r4, r9, [r4, #28]
    cf54:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    cf58:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    cf5c:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    cf60:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    cf64:	6725      	str	r5, [r4, #112]	; 0x70
    cf66:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    cf6a:	62e6      	str	r6, [r4, #44]	; 0x2c
    cf6c:	f000 f968 	bl	d240 <memset>
    cf70:	4b1a      	ldr	r3, [pc, #104]	; (cfdc <global_stdio_init.part.0+0xd0>)
    cf72:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    cf76:	4629      	mov	r1, r5
    cf78:	f104 0368 	add.w	r3, r4, #104	; 0x68
    cf7c:	2208      	movs	r2, #8
    cf7e:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    cf82:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    cf86:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    cf8a:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    cf8e:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    cf92:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    cf96:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    cf9a:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    cf9e:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    cfa2:	f000 f94d 	bl	d240 <memset>
    cfa6:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    cfaa:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    cfae:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    cfb2:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    cfb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cfba:	bf00      	nop
    cfbc:	1fffb74c 	.word	0x1fffb74c
    cfc0:	1fffb884 	.word	0x1fffb884
    cfc4:	0000ceb5 	.word	0x0000ceb5
    cfc8:	0000d0bd 	.word	0x0000d0bd
    cfcc:	0000d0e1 	.word	0x0000d0e1
    cfd0:	0000d121 	.word	0x0000d121
    cfd4:	0000d141 	.word	0x0000d141
    cfd8:	00010009 	.word	0x00010009
    cfdc:	00020012 	.word	0x00020012

0000cfe0 <__sinit>:
    cfe0:	b510      	push	{r4, lr}
    cfe2:	4604      	mov	r4, r0
    cfe4:	480a      	ldr	r0, [pc, #40]	; (d010 <__sinit+0x30>)
    cfe6:	f000 fa49 	bl	d47c <__retarget_lock_acquire_recursive>
    cfea:	6b63      	ldr	r3, [r4, #52]	; 0x34
    cfec:	b923      	cbnz	r3, cff8 <__sinit+0x18>
    cfee:	4b09      	ldr	r3, [pc, #36]	; (d014 <__sinit+0x34>)
    cff0:	4a09      	ldr	r2, [pc, #36]	; (d018 <__sinit+0x38>)
    cff2:	681b      	ldr	r3, [r3, #0]
    cff4:	6362      	str	r2, [r4, #52]	; 0x34
    cff6:	b123      	cbz	r3, d002 <__sinit+0x22>
    cff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cffc:	4804      	ldr	r0, [pc, #16]	; (d010 <__sinit+0x30>)
    cffe:	f000 ba3f 	b.w	d480 <__retarget_lock_release_recursive>
    d002:	f7ff ff83 	bl	cf0c <global_stdio_init.part.0>
    d006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d00a:	4801      	ldr	r0, [pc, #4]	; (d010 <__sinit+0x30>)
    d00c:	f000 ba38 	b.w	d480 <__retarget_lock_release_recursive>
    d010:	1fffb894 	.word	0x1fffb894
    d014:	1fffb884 	.word	0x1fffb884
    d018:	0000cecd 	.word	0x0000cecd

0000d01c <__sfp_lock_acquire>:
    d01c:	4801      	ldr	r0, [pc, #4]	; (d024 <__sfp_lock_acquire+0x8>)
    d01e:	f000 ba2d 	b.w	d47c <__retarget_lock_acquire_recursive>
    d022:	bf00      	nop
    d024:	1fffb894 	.word	0x1fffb894

0000d028 <__sfp_lock_release>:
    d028:	4801      	ldr	r0, [pc, #4]	; (d030 <__sfp_lock_release+0x8>)
    d02a:	f000 ba29 	b.w	d480 <__retarget_lock_release_recursive>
    d02e:	bf00      	nop
    d030:	1fffb894 	.word	0x1fffb894

0000d034 <_fwalk_sglue>:
    d034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d038:	4680      	mov	r8, r0
    d03a:	460f      	mov	r7, r1
    d03c:	4616      	mov	r6, r2
    d03e:	f04f 0900 	mov.w	r9, #0
    d042:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    d046:	3d01      	subs	r5, #1
    d048:	d411      	bmi.n	d06e <_fwalk_sglue+0x3a>
    d04a:	89a3      	ldrh	r3, [r4, #12]
    d04c:	2b01      	cmp	r3, #1
    d04e:	f105 35ff 	add.w	r5, r5, #4294967295
    d052:	d908      	bls.n	d066 <_fwalk_sglue+0x32>
    d054:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    d058:	3301      	adds	r3, #1
    d05a:	4621      	mov	r1, r4
    d05c:	d003      	beq.n	d066 <_fwalk_sglue+0x32>
    d05e:	4640      	mov	r0, r8
    d060:	47b8      	blx	r7
    d062:	ea49 0900 	orr.w	r9, r9, r0
    d066:	1c6b      	adds	r3, r5, #1
    d068:	f104 0468 	add.w	r4, r4, #104	; 0x68
    d06c:	d1ed      	bne.n	d04a <_fwalk_sglue+0x16>
    d06e:	6836      	ldr	r6, [r6, #0]
    d070:	2e00      	cmp	r6, #0
    d072:	d1e6      	bne.n	d042 <_fwalk_sglue+0xe>
    d074:	4648      	mov	r0, r9
    d076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d07a:	bf00      	nop

0000d07c <sprintf>:
    d07c:	b40e      	push	{r1, r2, r3}
    d07e:	b510      	push	{r4, lr}
    d080:	b09d      	sub	sp, #116	; 0x74
    d082:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d086:	ab1f      	add	r3, sp, #124	; 0x7c
    d088:	e9cd 0106 	strd	r0, r1, [sp, #24]
    d08c:	9104      	str	r1, [sp, #16]
    d08e:	4909      	ldr	r1, [pc, #36]	; (d0b4 <sprintf+0x38>)
    d090:	f853 2b04 	ldr.w	r2, [r3], #4
    d094:	9002      	str	r0, [sp, #8]
    d096:	4c08      	ldr	r4, [pc, #32]	; (d0b8 <sprintf+0x3c>)
    d098:	6808      	ldr	r0, [r1, #0]
    d09a:	9301      	str	r3, [sp, #4]
    d09c:	a902      	add	r1, sp, #8
    d09e:	9405      	str	r4, [sp, #20]
    d0a0:	f000 ffb4 	bl	e00c <_svfprintf_r>
    d0a4:	9b02      	ldr	r3, [sp, #8]
    d0a6:	2200      	movs	r2, #0
    d0a8:	701a      	strb	r2, [r3, #0]
    d0aa:	b01d      	add	sp, #116	; 0x74
    d0ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d0b0:	b003      	add	sp, #12
    d0b2:	4770      	bx	lr
    d0b4:	1fff8f70 	.word	0x1fff8f70
    d0b8:	ffff0208 	.word	0xffff0208

0000d0bc <__sread>:
    d0bc:	b510      	push	{r4, lr}
    d0be:	460c      	mov	r4, r1
    d0c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d0c4:	f000 f96e 	bl	d3a4 <_read_r>
    d0c8:	2800      	cmp	r0, #0
    d0ca:	db03      	blt.n	d0d4 <__sread+0x18>
    d0cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
    d0ce:	4403      	add	r3, r0
    d0d0:	6523      	str	r3, [r4, #80]	; 0x50
    d0d2:	bd10      	pop	{r4, pc}
    d0d4:	89a3      	ldrh	r3, [r4, #12]
    d0d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    d0da:	81a3      	strh	r3, [r4, #12]
    d0dc:	bd10      	pop	{r4, pc}
    d0de:	bf00      	nop

0000d0e0 <__swrite>:
    d0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d0e4:	460c      	mov	r4, r1
    d0e6:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    d0ea:	461f      	mov	r7, r3
    d0ec:	05cb      	lsls	r3, r1, #23
    d0ee:	4605      	mov	r5, r0
    d0f0:	4616      	mov	r6, r2
    d0f2:	d40b      	bmi.n	d10c <__swrite+0x2c>
    d0f4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    d0f8:	81a1      	strh	r1, [r4, #12]
    d0fa:	463b      	mov	r3, r7
    d0fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    d100:	4632      	mov	r2, r6
    d102:	4628      	mov	r0, r5
    d104:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d108:	f000 b974 	b.w	d3f4 <_write_r>
    d10c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    d110:	2302      	movs	r3, #2
    d112:	2200      	movs	r2, #0
    d114:	f000 f930 	bl	d378 <_lseek_r>
    d118:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    d11c:	e7ea      	b.n	d0f4 <__swrite+0x14>
    d11e:	bf00      	nop

0000d120 <__sseek>:
    d120:	b510      	push	{r4, lr}
    d122:	460c      	mov	r4, r1
    d124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d128:	f000 f926 	bl	d378 <_lseek_r>
    d12c:	89a3      	ldrh	r3, [r4, #12]
    d12e:	1c42      	adds	r2, r0, #1
    d130:	bf0e      	itee	eq
    d132:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    d136:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    d13a:	6520      	strne	r0, [r4, #80]	; 0x50
    d13c:	81a3      	strh	r3, [r4, #12]
    d13e:	bd10      	pop	{r4, pc}

0000d140 <__sclose>:
    d140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d144:	f000 b906 	b.w	d354 <_close_r>

0000d148 <memmove>:
    d148:	4288      	cmp	r0, r1
    d14a:	d90d      	bls.n	d168 <memmove+0x20>
    d14c:	188b      	adds	r3, r1, r2
    d14e:	4283      	cmp	r3, r0
    d150:	d90a      	bls.n	d168 <memmove+0x20>
    d152:	eb00 0c02 	add.w	ip, r0, r2
    d156:	b1ba      	cbz	r2, d188 <memmove+0x40>
    d158:	4662      	mov	r2, ip
    d15a:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    d15e:	f802 cd01 	strb.w	ip, [r2, #-1]!
    d162:	4299      	cmp	r1, r3
    d164:	d1f9      	bne.n	d15a <memmove+0x12>
    d166:	4770      	bx	lr
    d168:	2a0f      	cmp	r2, #15
    d16a:	d80e      	bhi.n	d18a <memmove+0x42>
    d16c:	4603      	mov	r3, r0
    d16e:	f102 3cff 	add.w	ip, r2, #4294967295
    d172:	b14a      	cbz	r2, d188 <memmove+0x40>
    d174:	f10c 0c01 	add.w	ip, ip, #1
    d178:	3b01      	subs	r3, #1
    d17a:	448c      	add	ip, r1
    d17c:	f811 2b01 	ldrb.w	r2, [r1], #1
    d180:	f803 2f01 	strb.w	r2, [r3, #1]!
    d184:	4561      	cmp	r1, ip
    d186:	d1f9      	bne.n	d17c <memmove+0x34>
    d188:	4770      	bx	lr
    d18a:	ea40 0301 	orr.w	r3, r0, r1
    d18e:	079b      	lsls	r3, r3, #30
    d190:	d150      	bne.n	d234 <memmove+0xec>
    d192:	f1a2 0310 	sub.w	r3, r2, #16
    d196:	b570      	push	{r4, r5, r6, lr}
    d198:	f101 0c20 	add.w	ip, r1, #32
    d19c:	f023 050f 	bic.w	r5, r3, #15
    d1a0:	f101 0e10 	add.w	lr, r1, #16
    d1a4:	f100 0410 	add.w	r4, r0, #16
    d1a8:	44ac      	add	ip, r5
    d1aa:	091b      	lsrs	r3, r3, #4
    d1ac:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    d1b0:	f844 5c10 	str.w	r5, [r4, #-16]
    d1b4:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    d1b8:	f844 5c0c 	str.w	r5, [r4, #-12]
    d1bc:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    d1c0:	f844 5c08 	str.w	r5, [r4, #-8]
    d1c4:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    d1c8:	f844 5c04 	str.w	r5, [r4, #-4]
    d1cc:	f10e 0e10 	add.w	lr, lr, #16
    d1d0:	45e6      	cmp	lr, ip
    d1d2:	f104 0410 	add.w	r4, r4, #16
    d1d6:	d1e9      	bne.n	d1ac <memmove+0x64>
    d1d8:	3301      	adds	r3, #1
    d1da:	f012 0f0c 	tst.w	r2, #12
    d1de:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    d1e2:	f002 040f 	and.w	r4, r2, #15
    d1e6:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    d1ea:	d027      	beq.n	d23c <memmove+0xf4>
    d1ec:	3c04      	subs	r4, #4
    d1ee:	f024 0603 	bic.w	r6, r4, #3
    d1f2:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    d1f6:	441e      	add	r6, r3
    d1f8:	1f1c      	subs	r4, r3, #4
    d1fa:	468e      	mov	lr, r1
    d1fc:	f85e 5b04 	ldr.w	r5, [lr], #4
    d200:	f844 5f04 	str.w	r5, [r4, #4]!
    d204:	42b4      	cmp	r4, r6
    d206:	d1f9      	bne.n	d1fc <memmove+0xb4>
    d208:	f10c 0401 	add.w	r4, ip, #1
    d20c:	f002 0203 	and.w	r2, r2, #3
    d210:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    d214:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    d218:	f102 3cff 	add.w	ip, r2, #4294967295
    d21c:	b14a      	cbz	r2, d232 <memmove+0xea>
    d21e:	f10c 0c01 	add.w	ip, ip, #1
    d222:	3b01      	subs	r3, #1
    d224:	448c      	add	ip, r1
    d226:	f811 2b01 	ldrb.w	r2, [r1], #1
    d22a:	f803 2f01 	strb.w	r2, [r3, #1]!
    d22e:	4561      	cmp	r1, ip
    d230:	d1f9      	bne.n	d226 <memmove+0xde>
    d232:	bd70      	pop	{r4, r5, r6, pc}
    d234:	f102 3cff 	add.w	ip, r2, #4294967295
    d238:	4603      	mov	r3, r0
    d23a:	e79b      	b.n	d174 <memmove+0x2c>
    d23c:	4622      	mov	r2, r4
    d23e:	e7eb      	b.n	d218 <memmove+0xd0>

0000d240 <memset>:
    d240:	0783      	lsls	r3, r0, #30
    d242:	b530      	push	{r4, r5, lr}
    d244:	d048      	beq.n	d2d8 <memset+0x98>
    d246:	1e54      	subs	r4, r2, #1
    d248:	2a00      	cmp	r2, #0
    d24a:	d03f      	beq.n	d2cc <memset+0x8c>
    d24c:	b2ca      	uxtb	r2, r1
    d24e:	4603      	mov	r3, r0
    d250:	e001      	b.n	d256 <memset+0x16>
    d252:	3c01      	subs	r4, #1
    d254:	d33a      	bcc.n	d2cc <memset+0x8c>
    d256:	f803 2b01 	strb.w	r2, [r3], #1
    d25a:	079d      	lsls	r5, r3, #30
    d25c:	d1f9      	bne.n	d252 <memset+0x12>
    d25e:	2c03      	cmp	r4, #3
    d260:	d92d      	bls.n	d2be <memset+0x7e>
    d262:	b2cd      	uxtb	r5, r1
    d264:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    d268:	2c0f      	cmp	r4, #15
    d26a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    d26e:	d936      	bls.n	d2de <memset+0x9e>
    d270:	f1a4 0210 	sub.w	r2, r4, #16
    d274:	f022 0c0f 	bic.w	ip, r2, #15
    d278:	f103 0e20 	add.w	lr, r3, #32
    d27c:	44e6      	add	lr, ip
    d27e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    d282:	f103 0210 	add.w	r2, r3, #16
    d286:	e942 5504 	strd	r5, r5, [r2, #-16]
    d28a:	e942 5502 	strd	r5, r5, [r2, #-8]
    d28e:	3210      	adds	r2, #16
    d290:	4572      	cmp	r2, lr
    d292:	d1f8      	bne.n	d286 <memset+0x46>
    d294:	f10c 0201 	add.w	r2, ip, #1
    d298:	f014 0f0c 	tst.w	r4, #12
    d29c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    d2a0:	f004 0c0f 	and.w	ip, r4, #15
    d2a4:	d013      	beq.n	d2ce <memset+0x8e>
    d2a6:	f1ac 0304 	sub.w	r3, ip, #4
    d2aa:	f023 0303 	bic.w	r3, r3, #3
    d2ae:	3304      	adds	r3, #4
    d2b0:	4413      	add	r3, r2
    d2b2:	f842 5b04 	str.w	r5, [r2], #4
    d2b6:	4293      	cmp	r3, r2
    d2b8:	d1fb      	bne.n	d2b2 <memset+0x72>
    d2ba:	f00c 0403 	and.w	r4, ip, #3
    d2be:	b12c      	cbz	r4, d2cc <memset+0x8c>
    d2c0:	b2c9      	uxtb	r1, r1
    d2c2:	441c      	add	r4, r3
    d2c4:	f803 1b01 	strb.w	r1, [r3], #1
    d2c8:	429c      	cmp	r4, r3
    d2ca:	d1fb      	bne.n	d2c4 <memset+0x84>
    d2cc:	bd30      	pop	{r4, r5, pc}
    d2ce:	4664      	mov	r4, ip
    d2d0:	4613      	mov	r3, r2
    d2d2:	2c00      	cmp	r4, #0
    d2d4:	d1f4      	bne.n	d2c0 <memset+0x80>
    d2d6:	e7f9      	b.n	d2cc <memset+0x8c>
    d2d8:	4603      	mov	r3, r0
    d2da:	4614      	mov	r4, r2
    d2dc:	e7bf      	b.n	d25e <memset+0x1e>
    d2de:	461a      	mov	r2, r3
    d2e0:	46a4      	mov	ip, r4
    d2e2:	e7e0      	b.n	d2a6 <memset+0x66>

0000d2e4 <strncpy>:
    d2e4:	ea40 0301 	orr.w	r3, r0, r1
    d2e8:	079b      	lsls	r3, r3, #30
    d2ea:	b530      	push	{r4, r5, lr}
    d2ec:	d101      	bne.n	d2f2 <strncpy+0xe>
    d2ee:	2a03      	cmp	r2, #3
    d2f0:	d80f      	bhi.n	d312 <strncpy+0x2e>
    d2f2:	4684      	mov	ip, r0
    d2f4:	f101 3eff 	add.w	lr, r1, #4294967295
    d2f8:	e007      	b.n	d30a <strncpy+0x26>
    d2fa:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    d2fe:	f803 1b01 	strb.w	r1, [r3], #1
    d302:	1e54      	subs	r4, r2, #1
    d304:	b1c1      	cbz	r1, d338 <strncpy+0x54>
    d306:	469c      	mov	ip, r3
    d308:	4622      	mov	r2, r4
    d30a:	4663      	mov	r3, ip
    d30c:	2a00      	cmp	r2, #0
    d30e:	d1f4      	bne.n	d2fa <strncpy+0x16>
    d310:	bd30      	pop	{r4, r5, pc}
    d312:	460b      	mov	r3, r1
    d314:	4684      	mov	ip, r0
    d316:	4619      	mov	r1, r3
    d318:	f853 5b04 	ldr.w	r5, [r3], #4
    d31c:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    d320:	ea24 0405 	bic.w	r4, r4, r5
    d324:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    d328:	d1e4      	bne.n	d2f4 <strncpy+0x10>
    d32a:	3a04      	subs	r2, #4
    d32c:	2a03      	cmp	r2, #3
    d32e:	f84c 5b04 	str.w	r5, [ip], #4
    d332:	4619      	mov	r1, r3
    d334:	d8ef      	bhi.n	d316 <strncpy+0x32>
    d336:	e7dd      	b.n	d2f4 <strncpy+0x10>
    d338:	4494      	add	ip, r2
    d33a:	2c00      	cmp	r4, #0
    d33c:	d0e8      	beq.n	d310 <strncpy+0x2c>
    d33e:	f803 1b01 	strb.w	r1, [r3], #1
    d342:	4563      	cmp	r3, ip
    d344:	d1fb      	bne.n	d33e <strncpy+0x5a>
    d346:	bd30      	pop	{r4, r5, pc}

0000d348 <__locale_mb_cur_max>:
    d348:	4b01      	ldr	r3, [pc, #4]	; (d350 <__locale_mb_cur_max+0x8>)
    d34a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    d34e:	4770      	bx	lr
    d350:	1fff8ce4 	.word	0x1fff8ce4

0000d354 <_close_r>:
    d354:	b538      	push	{r3, r4, r5, lr}
    d356:	4d07      	ldr	r5, [pc, #28]	; (d374 <_close_r+0x20>)
    d358:	2200      	movs	r2, #0
    d35a:	4604      	mov	r4, r0
    d35c:	4608      	mov	r0, r1
    d35e:	602a      	str	r2, [r5, #0]
    d360:	f7fb ff38 	bl	91d4 <_close>
    d364:	1c43      	adds	r3, r0, #1
    d366:	d000      	beq.n	d36a <_close_r+0x16>
    d368:	bd38      	pop	{r3, r4, r5, pc}
    d36a:	682b      	ldr	r3, [r5, #0]
    d36c:	2b00      	cmp	r3, #0
    d36e:	d0fb      	beq.n	d368 <_close_r+0x14>
    d370:	6023      	str	r3, [r4, #0]
    d372:	bd38      	pop	{r3, r4, r5, pc}
    d374:	1fffb888 	.word	0x1fffb888

0000d378 <_lseek_r>:
    d378:	b538      	push	{r3, r4, r5, lr}
    d37a:	460c      	mov	r4, r1
    d37c:	4d08      	ldr	r5, [pc, #32]	; (d3a0 <_lseek_r+0x28>)
    d37e:	4684      	mov	ip, r0
    d380:	4611      	mov	r1, r2
    d382:	4620      	mov	r0, r4
    d384:	461a      	mov	r2, r3
    d386:	2300      	movs	r3, #0
    d388:	602b      	str	r3, [r5, #0]
    d38a:	4664      	mov	r4, ip
    d38c:	f7fb ff2e 	bl	91ec <_lseek>
    d390:	1c43      	adds	r3, r0, #1
    d392:	d000      	beq.n	d396 <_lseek_r+0x1e>
    d394:	bd38      	pop	{r3, r4, r5, pc}
    d396:	682b      	ldr	r3, [r5, #0]
    d398:	2b00      	cmp	r3, #0
    d39a:	d0fb      	beq.n	d394 <_lseek_r+0x1c>
    d39c:	6023      	str	r3, [r4, #0]
    d39e:	bd38      	pop	{r3, r4, r5, pc}
    d3a0:	1fffb888 	.word	0x1fffb888

0000d3a4 <_read_r>:
    d3a4:	b538      	push	{r3, r4, r5, lr}
    d3a6:	460c      	mov	r4, r1
    d3a8:	4d08      	ldr	r5, [pc, #32]	; (d3cc <_read_r+0x28>)
    d3aa:	4684      	mov	ip, r0
    d3ac:	4611      	mov	r1, r2
    d3ae:	4620      	mov	r0, r4
    d3b0:	461a      	mov	r2, r3
    d3b2:	2300      	movs	r3, #0
    d3b4:	602b      	str	r3, [r5, #0]
    d3b6:	4664      	mov	r4, ip
    d3b8:	f7fb ff0a 	bl	91d0 <_read>
    d3bc:	1c43      	adds	r3, r0, #1
    d3be:	d000      	beq.n	d3c2 <_read_r+0x1e>
    d3c0:	bd38      	pop	{r3, r4, r5, pc}
    d3c2:	682b      	ldr	r3, [r5, #0]
    d3c4:	2b00      	cmp	r3, #0
    d3c6:	d0fb      	beq.n	d3c0 <_read_r+0x1c>
    d3c8:	6023      	str	r3, [r4, #0]
    d3ca:	bd38      	pop	{r3, r4, r5, pc}
    d3cc:	1fffb888 	.word	0x1fffb888

0000d3d0 <_sbrk_r>:
    d3d0:	b538      	push	{r3, r4, r5, lr}
    d3d2:	4d07      	ldr	r5, [pc, #28]	; (d3f0 <_sbrk_r+0x20>)
    d3d4:	2200      	movs	r2, #0
    d3d6:	4604      	mov	r4, r0
    d3d8:	4608      	mov	r0, r1
    d3da:	602a      	str	r2, [r5, #0]
    d3dc:	f7fb fee2 	bl	91a4 <_sbrk>
    d3e0:	1c43      	adds	r3, r0, #1
    d3e2:	d000      	beq.n	d3e6 <_sbrk_r+0x16>
    d3e4:	bd38      	pop	{r3, r4, r5, pc}
    d3e6:	682b      	ldr	r3, [r5, #0]
    d3e8:	2b00      	cmp	r3, #0
    d3ea:	d0fb      	beq.n	d3e4 <_sbrk_r+0x14>
    d3ec:	6023      	str	r3, [r4, #0]
    d3ee:	bd38      	pop	{r3, r4, r5, pc}
    d3f0:	1fffb888 	.word	0x1fffb888

0000d3f4 <_write_r>:
    d3f4:	b538      	push	{r3, r4, r5, lr}
    d3f6:	460c      	mov	r4, r1
    d3f8:	4d08      	ldr	r5, [pc, #32]	; (d41c <_write_r+0x28>)
    d3fa:	4684      	mov	ip, r0
    d3fc:	4611      	mov	r1, r2
    d3fe:	4620      	mov	r0, r4
    d400:	461a      	mov	r2, r3
    d402:	2300      	movs	r3, #0
    d404:	602b      	str	r3, [r5, #0]
    d406:	4664      	mov	r4, ip
    d408:	f7fb fb1c 	bl	8a44 <_write>
    d40c:	1c43      	adds	r3, r0, #1
    d40e:	d000      	beq.n	d412 <_write_r+0x1e>
    d410:	bd38      	pop	{r3, r4, r5, pc}
    d412:	682b      	ldr	r3, [r5, #0]
    d414:	2b00      	cmp	r3, #0
    d416:	d0fb      	beq.n	d410 <_write_r+0x1c>
    d418:	6023      	str	r3, [r4, #0]
    d41a:	bd38      	pop	{r3, r4, r5, pc}
    d41c:	1fffb888 	.word	0x1fffb888

0000d420 <__errno>:
    d420:	4b01      	ldr	r3, [pc, #4]	; (d428 <__errno+0x8>)
    d422:	6818      	ldr	r0, [r3, #0]
    d424:	4770      	bx	lr
    d426:	bf00      	nop
    d428:	1fff8f70 	.word	0x1fff8f70

0000d42c <__libc_init_array>:
    d42c:	b570      	push	{r4, r5, r6, lr}
    d42e:	4e0d      	ldr	r6, [pc, #52]	; (d464 <__libc_init_array+0x38>)
    d430:	4d0d      	ldr	r5, [pc, #52]	; (d468 <__libc_init_array+0x3c>)
    d432:	1b76      	subs	r6, r6, r5
    d434:	10b6      	asrs	r6, r6, #2
    d436:	d006      	beq.n	d446 <__libc_init_array+0x1a>
    d438:	2400      	movs	r4, #0
    d43a:	f855 3b04 	ldr.w	r3, [r5], #4
    d43e:	3401      	adds	r4, #1
    d440:	4798      	blx	r3
    d442:	42a6      	cmp	r6, r4
    d444:	d1f9      	bne.n	d43a <__libc_init_array+0xe>
    d446:	4e09      	ldr	r6, [pc, #36]	; (d46c <__libc_init_array+0x40>)
    d448:	4d09      	ldr	r5, [pc, #36]	; (d470 <__libc_init_array+0x44>)
    d44a:	1b76      	subs	r6, r6, r5
    d44c:	f007 fb10 	bl	14a70 <_init>
    d450:	10b6      	asrs	r6, r6, #2
    d452:	d006      	beq.n	d462 <__libc_init_array+0x36>
    d454:	2400      	movs	r4, #0
    d456:	f855 3b04 	ldr.w	r3, [r5], #4
    d45a:	3401      	adds	r4, #1
    d45c:	4798      	blx	r3
    d45e:	42a6      	cmp	r6, r4
    d460:	d1f9      	bne.n	d456 <__libc_init_array+0x2a>
    d462:	bd70      	pop	{r4, r5, r6, pc}
    d464:	00014a7c 	.word	0x00014a7c
    d468:	00014a7c 	.word	0x00014a7c
    d46c:	00014a90 	.word	0x00014a90
    d470:	00014a7c 	.word	0x00014a7c

0000d474 <__retarget_lock_init_recursive>:
    d474:	4770      	bx	lr
    d476:	bf00      	nop

0000d478 <__retarget_lock_close_recursive>:
    d478:	4770      	bx	lr
    d47a:	bf00      	nop

0000d47c <__retarget_lock_acquire_recursive>:
    d47c:	4770      	bx	lr
    d47e:	bf00      	nop

0000d480 <__retarget_lock_release_recursive>:
    d480:	4770      	bx	lr
    d482:	bf00      	nop
    d484:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    d488:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    d48c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    d490:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    d494:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    d498:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    d49c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    d4a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    d4a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    d4a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    d4ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    d4b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    d4b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    d4b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    d4bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

0000d4c0 <strlen>:
    d4c0:	f890 f000 	pld	[r0]
    d4c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    d4c8:	f020 0107 	bic.w	r1, r0, #7
    d4cc:	f06f 0c00 	mvn.w	ip, #0
    d4d0:	f010 0407 	ands.w	r4, r0, #7
    d4d4:	f891 f020 	pld	[r1, #32]
    d4d8:	f040 8049 	bne.w	d56e <strlen+0xae>
    d4dc:	f04f 0400 	mov.w	r4, #0
    d4e0:	f06f 0007 	mvn.w	r0, #7
    d4e4:	e9d1 2300 	ldrd	r2, r3, [r1]
    d4e8:	f891 f040 	pld	[r1, #64]	; 0x40
    d4ec:	f100 0008 	add.w	r0, r0, #8
    d4f0:	fa82 f24c 	uadd8	r2, r2, ip
    d4f4:	faa4 f28c 	sel	r2, r4, ip
    d4f8:	fa83 f34c 	uadd8	r3, r3, ip
    d4fc:	faa2 f38c 	sel	r3, r2, ip
    d500:	bb4b      	cbnz	r3, d556 <strlen+0x96>
    d502:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    d506:	fa82 f24c 	uadd8	r2, r2, ip
    d50a:	f100 0008 	add.w	r0, r0, #8
    d50e:	faa4 f28c 	sel	r2, r4, ip
    d512:	fa83 f34c 	uadd8	r3, r3, ip
    d516:	faa2 f38c 	sel	r3, r2, ip
    d51a:	b9e3      	cbnz	r3, d556 <strlen+0x96>
    d51c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    d520:	fa82 f24c 	uadd8	r2, r2, ip
    d524:	f100 0008 	add.w	r0, r0, #8
    d528:	faa4 f28c 	sel	r2, r4, ip
    d52c:	fa83 f34c 	uadd8	r3, r3, ip
    d530:	faa2 f38c 	sel	r3, r2, ip
    d534:	b97b      	cbnz	r3, d556 <strlen+0x96>
    d536:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    d53a:	f101 0120 	add.w	r1, r1, #32
    d53e:	fa82 f24c 	uadd8	r2, r2, ip
    d542:	f100 0008 	add.w	r0, r0, #8
    d546:	faa4 f28c 	sel	r2, r4, ip
    d54a:	fa83 f34c 	uadd8	r3, r3, ip
    d54e:	faa2 f38c 	sel	r3, r2, ip
    d552:	2b00      	cmp	r3, #0
    d554:	d0c6      	beq.n	d4e4 <strlen+0x24>
    d556:	2a00      	cmp	r2, #0
    d558:	bf04      	itt	eq
    d55a:	3004      	addeq	r0, #4
    d55c:	461a      	moveq	r2, r3
    d55e:	ba12      	rev	r2, r2
    d560:	fab2 f282 	clz	r2, r2
    d564:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    d568:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    d56c:	4770      	bx	lr
    d56e:	e9d1 2300 	ldrd	r2, r3, [r1]
    d572:	f004 0503 	and.w	r5, r4, #3
    d576:	f1c4 0000 	rsb	r0, r4, #0
    d57a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    d57e:	f014 0f04 	tst.w	r4, #4
    d582:	f891 f040 	pld	[r1, #64]	; 0x40
    d586:	fa0c f505 	lsl.w	r5, ip, r5
    d58a:	ea62 0205 	orn	r2, r2, r5
    d58e:	bf1c      	itt	ne
    d590:	ea63 0305 	ornne	r3, r3, r5
    d594:	4662      	movne	r2, ip
    d596:	f04f 0400 	mov.w	r4, #0
    d59a:	e7a9      	b.n	d4f0 <strlen+0x30>

0000d59c <register_fini>:
    d59c:	4b02      	ldr	r3, [pc, #8]	; (d5a8 <register_fini+0xc>)
    d59e:	b113      	cbz	r3, d5a6 <register_fini+0xa>
    d5a0:	4802      	ldr	r0, [pc, #8]	; (d5ac <register_fini+0x10>)
    d5a2:	f000 b805 	b.w	d5b0 <atexit>
    d5a6:	4770      	bx	lr
    d5a8:	00000000 	.word	0x00000000
    d5ac:	0000fdf5 	.word	0x0000fdf5

0000d5b0 <atexit>:
    d5b0:	2300      	movs	r3, #0
    d5b2:	4601      	mov	r1, r0
    d5b4:	461a      	mov	r2, r3
    d5b6:	4618      	mov	r0, r3
    d5b8:	f002 bcba 	b.w	ff30 <__register_exitproc>

0000d5bc <_malloc_trim_r>:
    d5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d5be:	4f24      	ldr	r7, [pc, #144]	; (d650 <_malloc_trim_r+0x94>)
    d5c0:	460c      	mov	r4, r1
    d5c2:	4606      	mov	r6, r0
    d5c4:	f7ff fa7e 	bl	cac4 <__malloc_lock>
    d5c8:	68bb      	ldr	r3, [r7, #8]
    d5ca:	685d      	ldr	r5, [r3, #4]
    d5cc:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    d5d0:	310f      	adds	r1, #15
    d5d2:	f025 0503 	bic.w	r5, r5, #3
    d5d6:	194b      	adds	r3, r1, r5
    d5d8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    d5dc:	f023 030f 	bic.w	r3, r3, #15
    d5e0:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    d5e4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    d5e8:	db07      	blt.n	d5fa <_malloc_trim_r+0x3e>
    d5ea:	2100      	movs	r1, #0
    d5ec:	4630      	mov	r0, r6
    d5ee:	f7ff feef 	bl	d3d0 <_sbrk_r>
    d5f2:	68bb      	ldr	r3, [r7, #8]
    d5f4:	442b      	add	r3, r5
    d5f6:	4298      	cmp	r0, r3
    d5f8:	d004      	beq.n	d604 <_malloc_trim_r+0x48>
    d5fa:	4630      	mov	r0, r6
    d5fc:	f7ff fa68 	bl	cad0 <__malloc_unlock>
    d600:	2000      	movs	r0, #0
    d602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d604:	4261      	negs	r1, r4
    d606:	4630      	mov	r0, r6
    d608:	f7ff fee2 	bl	d3d0 <_sbrk_r>
    d60c:	3001      	adds	r0, #1
    d60e:	d00d      	beq.n	d62c <_malloc_trim_r+0x70>
    d610:	4a10      	ldr	r2, [pc, #64]	; (d654 <_malloc_trim_r+0x98>)
    d612:	68bb      	ldr	r3, [r7, #8]
    d614:	1b2d      	subs	r5, r5, r4
    d616:	f045 0501 	orr.w	r5, r5, #1
    d61a:	605d      	str	r5, [r3, #4]
    d61c:	6813      	ldr	r3, [r2, #0]
    d61e:	4630      	mov	r0, r6
    d620:	1b1b      	subs	r3, r3, r4
    d622:	6013      	str	r3, [r2, #0]
    d624:	f7ff fa54 	bl	cad0 <__malloc_unlock>
    d628:	2001      	movs	r0, #1
    d62a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d62c:	2100      	movs	r1, #0
    d62e:	4630      	mov	r0, r6
    d630:	f7ff fece 	bl	d3d0 <_sbrk_r>
    d634:	68ba      	ldr	r2, [r7, #8]
    d636:	1a83      	subs	r3, r0, r2
    d638:	2b0f      	cmp	r3, #15
    d63a:	ddde      	ble.n	d5fa <_malloc_trim_r+0x3e>
    d63c:	f043 0301 	orr.w	r3, r3, #1
    d640:	6053      	str	r3, [r2, #4]
    d642:	4b05      	ldr	r3, [pc, #20]	; (d658 <_malloc_trim_r+0x9c>)
    d644:	4903      	ldr	r1, [pc, #12]	; (d654 <_malloc_trim_r+0x98>)
    d646:	681b      	ldr	r3, [r3, #0]
    d648:	1ac0      	subs	r0, r0, r3
    d64a:	6008      	str	r0, [r1, #0]
    d64c:	e7d5      	b.n	d5fa <_malloc_trim_r+0x3e>
    d64e:	bf00      	nop
    d650:	1fff88c8 	.word	0x1fff88c8
    d654:	1fffb718 	.word	0x1fffb718
    d658:	1fff8cd0 	.word	0x1fff8cd0

0000d65c <_free_r>:
    d65c:	2900      	cmp	r1, #0
    d65e:	d061      	beq.n	d724 <_free_r+0xc8>
    d660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d662:	460c      	mov	r4, r1
    d664:	4606      	mov	r6, r0
    d666:	f7ff fa2d 	bl	cac4 <__malloc_lock>
    d66a:	f854 2c04 	ldr.w	r2, [r4, #-4]
    d66e:	4f7b      	ldr	r7, [pc, #492]	; (d85c <_free_r+0x200>)
    d670:	f1a4 0508 	sub.w	r5, r4, #8
    d674:	f022 0101 	bic.w	r1, r2, #1
    d678:	eb05 0c01 	add.w	ip, r5, r1
    d67c:	68b8      	ldr	r0, [r7, #8]
    d67e:	f8dc 3004 	ldr.w	r3, [ip, #4]
    d682:	4560      	cmp	r0, ip
    d684:	f023 0303 	bic.w	r3, r3, #3
    d688:	f000 808b 	beq.w	d7a2 <_free_r+0x146>
    d68c:	07d2      	lsls	r2, r2, #31
    d68e:	f8cc 3004 	str.w	r3, [ip, #4]
    d692:	d432      	bmi.n	d6fa <_free_r+0x9e>
    d694:	f854 2c08 	ldr.w	r2, [r4, #-8]
    d698:	1aad      	subs	r5, r5, r2
    d69a:	4411      	add	r1, r2
    d69c:	68aa      	ldr	r2, [r5, #8]
    d69e:	f107 0008 	add.w	r0, r7, #8
    d6a2:	4282      	cmp	r2, r0
    d6a4:	d06a      	beq.n	d77c <_free_r+0x120>
    d6a6:	eb0c 0403 	add.w	r4, ip, r3
    d6aa:	f8d4 e004 	ldr.w	lr, [r4, #4]
    d6ae:	68ec      	ldr	r4, [r5, #12]
    d6b0:	60d4      	str	r4, [r2, #12]
    d6b2:	f01e 0f01 	tst.w	lr, #1
    d6b6:	60a2      	str	r2, [r4, #8]
    d6b8:	f000 8097 	beq.w	d7ea <_free_r+0x18e>
    d6bc:	f041 0301 	orr.w	r3, r1, #1
    d6c0:	606b      	str	r3, [r5, #4]
    d6c2:	f8cc 1000 	str.w	r1, [ip]
    d6c6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    d6ca:	d235      	bcs.n	d738 <_free_r+0xdc>
    d6cc:	6878      	ldr	r0, [r7, #4]
    d6ce:	08cb      	lsrs	r3, r1, #3
    d6d0:	2201      	movs	r2, #1
    d6d2:	0949      	lsrs	r1, r1, #5
    d6d4:	3301      	adds	r3, #1
    d6d6:	408a      	lsls	r2, r1
    d6d8:	4302      	orrs	r2, r0
    d6da:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    d6de:	607a      	str	r2, [r7, #4]
    d6e0:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    d6e4:	3a08      	subs	r2, #8
    d6e6:	e9c5 1202 	strd	r1, r2, [r5, #8]
    d6ea:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    d6ee:	60cd      	str	r5, [r1, #12]
    d6f0:	4630      	mov	r0, r6
    d6f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d6f6:	f7ff b9eb 	b.w	cad0 <__malloc_unlock>
    d6fa:	eb0c 0203 	add.w	r2, ip, r3
    d6fe:	6852      	ldr	r2, [r2, #4]
    d700:	07d0      	lsls	r0, r2, #31
    d702:	d410      	bmi.n	d726 <_free_r+0xca>
    d704:	4419      	add	r1, r3
    d706:	f107 0008 	add.w	r0, r7, #8
    d70a:	f8dc 3008 	ldr.w	r3, [ip, #8]
    d70e:	4283      	cmp	r3, r0
    d710:	d073      	beq.n	d7fa <_free_r+0x19e>
    d712:	f8dc 200c 	ldr.w	r2, [ip, #12]
    d716:	60da      	str	r2, [r3, #12]
    d718:	6093      	str	r3, [r2, #8]
    d71a:	f041 0301 	orr.w	r3, r1, #1
    d71e:	606b      	str	r3, [r5, #4]
    d720:	5069      	str	r1, [r5, r1]
    d722:	e7d0      	b.n	d6c6 <_free_r+0x6a>
    d724:	4770      	bx	lr
    d726:	f041 0301 	orr.w	r3, r1, #1
    d72a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    d72e:	f844 3c04 	str.w	r3, [r4, #-4]
    d732:	f8cc 1000 	str.w	r1, [ip]
    d736:	d3c9      	bcc.n	d6cc <_free_r+0x70>
    d738:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    d73c:	ea4f 2351 	mov.w	r3, r1, lsr #9
    d740:	d248      	bcs.n	d7d4 <_free_r+0x178>
    d742:	098b      	lsrs	r3, r1, #6
    d744:	f103 0039 	add.w	r0, r3, #57	; 0x39
    d748:	f103 0238 	add.w	r2, r3, #56	; 0x38
    d74c:	00c3      	lsls	r3, r0, #3
    d74e:	18f8      	adds	r0, r7, r3
    d750:	58fb      	ldr	r3, [r7, r3]
    d752:	3808      	subs	r0, #8
    d754:	4298      	cmp	r0, r3
    d756:	d059      	beq.n	d80c <_free_r+0x1b0>
    d758:	685a      	ldr	r2, [r3, #4]
    d75a:	f022 0203 	bic.w	r2, r2, #3
    d75e:	428a      	cmp	r2, r1
    d760:	d902      	bls.n	d768 <_free_r+0x10c>
    d762:	689b      	ldr	r3, [r3, #8]
    d764:	4298      	cmp	r0, r3
    d766:	d1f7      	bne.n	d758 <_free_r+0xfc>
    d768:	68d8      	ldr	r0, [r3, #12]
    d76a:	e9c5 3002 	strd	r3, r0, [r5, #8]
    d76e:	6085      	str	r5, [r0, #8]
    d770:	60dd      	str	r5, [r3, #12]
    d772:	4630      	mov	r0, r6
    d774:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d778:	f7ff b9aa 	b.w	cad0 <__malloc_unlock>
    d77c:	eb0c 0203 	add.w	r2, ip, r3
    d780:	6852      	ldr	r2, [r2, #4]
    d782:	07d2      	lsls	r2, r2, #31
    d784:	d463      	bmi.n	d84e <_free_r+0x1f2>
    d786:	440b      	add	r3, r1
    d788:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    d78c:	60ca      	str	r2, [r1, #12]
    d78e:	6091      	str	r1, [r2, #8]
    d790:	f043 0201 	orr.w	r2, r3, #1
    d794:	606a      	str	r2, [r5, #4]
    d796:	4630      	mov	r0, r6
    d798:	50eb      	str	r3, [r5, r3]
    d79a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d79e:	f7ff b997 	b.w	cad0 <__malloc_unlock>
    d7a2:	440b      	add	r3, r1
    d7a4:	07d1      	lsls	r1, r2, #31
    d7a6:	d407      	bmi.n	d7b8 <_free_r+0x15c>
    d7a8:	f854 2c08 	ldr.w	r2, [r4, #-8]
    d7ac:	1aad      	subs	r5, r5, r2
    d7ae:	4413      	add	r3, r2
    d7b0:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    d7b4:	60ca      	str	r2, [r1, #12]
    d7b6:	6091      	str	r1, [r2, #8]
    d7b8:	f043 0201 	orr.w	r2, r3, #1
    d7bc:	606a      	str	r2, [r5, #4]
    d7be:	4a28      	ldr	r2, [pc, #160]	; (d860 <_free_r+0x204>)
    d7c0:	60bd      	str	r5, [r7, #8]
    d7c2:	6812      	ldr	r2, [r2, #0]
    d7c4:	429a      	cmp	r2, r3
    d7c6:	d893      	bhi.n	d6f0 <_free_r+0x94>
    d7c8:	4b26      	ldr	r3, [pc, #152]	; (d864 <_free_r+0x208>)
    d7ca:	4630      	mov	r0, r6
    d7cc:	6819      	ldr	r1, [r3, #0]
    d7ce:	f7ff fef5 	bl	d5bc <_malloc_trim_r>
    d7d2:	e78d      	b.n	d6f0 <_free_r+0x94>
    d7d4:	2b14      	cmp	r3, #20
    d7d6:	d90a      	bls.n	d7ee <_free_r+0x192>
    d7d8:	2b54      	cmp	r3, #84	; 0x54
    d7da:	d81f      	bhi.n	d81c <_free_r+0x1c0>
    d7dc:	0b0b      	lsrs	r3, r1, #12
    d7de:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    d7e2:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    d7e6:	00c3      	lsls	r3, r0, #3
    d7e8:	e7b1      	b.n	d74e <_free_r+0xf2>
    d7ea:	4419      	add	r1, r3
    d7ec:	e78d      	b.n	d70a <_free_r+0xae>
    d7ee:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    d7f2:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    d7f6:	00c3      	lsls	r3, r0, #3
    d7f8:	e7a9      	b.n	d74e <_free_r+0xf2>
    d7fa:	f041 0301 	orr.w	r3, r1, #1
    d7fe:	e9c7 5504 	strd	r5, r5, [r7, #16]
    d802:	e9c5 0002 	strd	r0, r0, [r5, #8]
    d806:	606b      	str	r3, [r5, #4]
    d808:	5069      	str	r1, [r5, r1]
    d80a:	e771      	b.n	d6f0 <_free_r+0x94>
    d80c:	6879      	ldr	r1, [r7, #4]
    d80e:	1092      	asrs	r2, r2, #2
    d810:	2401      	movs	r4, #1
    d812:	fa04 f202 	lsl.w	r2, r4, r2
    d816:	430a      	orrs	r2, r1
    d818:	607a      	str	r2, [r7, #4]
    d81a:	e7a6      	b.n	d76a <_free_r+0x10e>
    d81c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    d820:	d806      	bhi.n	d830 <_free_r+0x1d4>
    d822:	0bcb      	lsrs	r3, r1, #15
    d824:	f103 0078 	add.w	r0, r3, #120	; 0x78
    d828:	f103 0277 	add.w	r2, r3, #119	; 0x77
    d82c:	00c3      	lsls	r3, r0, #3
    d82e:	e78e      	b.n	d74e <_free_r+0xf2>
    d830:	f240 5254 	movw	r2, #1364	; 0x554
    d834:	4293      	cmp	r3, r2
    d836:	d806      	bhi.n	d846 <_free_r+0x1ea>
    d838:	0c8b      	lsrs	r3, r1, #18
    d83a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    d83e:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    d842:	00c3      	lsls	r3, r0, #3
    d844:	e783      	b.n	d74e <_free_r+0xf2>
    d846:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    d84a:	227e      	movs	r2, #126	; 0x7e
    d84c:	e77f      	b.n	d74e <_free_r+0xf2>
    d84e:	f041 0301 	orr.w	r3, r1, #1
    d852:	606b      	str	r3, [r5, #4]
    d854:	f8cc 1000 	str.w	r1, [ip]
    d858:	e74a      	b.n	d6f0 <_free_r+0x94>
    d85a:	bf00      	nop
    d85c:	1fff88c8 	.word	0x1fff88c8
    d860:	1fff8cd4 	.word	0x1fff8cd4
    d864:	1fffb748 	.word	0x1fffb748

0000d868 <__ascii_mbtowc>:
    d868:	b082      	sub	sp, #8
    d86a:	b149      	cbz	r1, d880 <__ascii_mbtowc+0x18>
    d86c:	b15a      	cbz	r2, d886 <__ascii_mbtowc+0x1e>
    d86e:	b16b      	cbz	r3, d88c <__ascii_mbtowc+0x24>
    d870:	7813      	ldrb	r3, [r2, #0]
    d872:	600b      	str	r3, [r1, #0]
    d874:	7812      	ldrb	r2, [r2, #0]
    d876:	1e10      	subs	r0, r2, #0
    d878:	bf18      	it	ne
    d87a:	2001      	movne	r0, #1
    d87c:	b002      	add	sp, #8
    d87e:	4770      	bx	lr
    d880:	a901      	add	r1, sp, #4
    d882:	2a00      	cmp	r2, #0
    d884:	d1f3      	bne.n	d86e <__ascii_mbtowc+0x6>
    d886:	4610      	mov	r0, r2
    d888:	b002      	add	sp, #8
    d88a:	4770      	bx	lr
    d88c:	f06f 0001 	mvn.w	r0, #1
    d890:	e7f4      	b.n	d87c <__ascii_mbtowc+0x14>
    d892:	bf00      	nop

0000d894 <_Balloc>:
    d894:	6c43      	ldr	r3, [r0, #68]	; 0x44
    d896:	b570      	push	{r4, r5, r6, lr}
    d898:	4605      	mov	r5, r0
    d89a:	460c      	mov	r4, r1
    d89c:	b14b      	cbz	r3, d8b2 <_Balloc+0x1e>
    d89e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    d8a2:	b180      	cbz	r0, d8c6 <_Balloc+0x32>
    d8a4:	6802      	ldr	r2, [r0, #0]
    d8a6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    d8aa:	2300      	movs	r3, #0
    d8ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
    d8b0:	bd70      	pop	{r4, r5, r6, pc}
    d8b2:	2221      	movs	r2, #33	; 0x21
    d8b4:	2104      	movs	r1, #4
    d8b6:	f002 fb9f 	bl	fff8 <_calloc_r>
    d8ba:	4603      	mov	r3, r0
    d8bc:	6468      	str	r0, [r5, #68]	; 0x44
    d8be:	2800      	cmp	r0, #0
    d8c0:	d1ed      	bne.n	d89e <_Balloc+0xa>
    d8c2:	2000      	movs	r0, #0
    d8c4:	bd70      	pop	{r4, r5, r6, pc}
    d8c6:	2101      	movs	r1, #1
    d8c8:	fa01 f604 	lsl.w	r6, r1, r4
    d8cc:	1d72      	adds	r2, r6, #5
    d8ce:	0092      	lsls	r2, r2, #2
    d8d0:	4628      	mov	r0, r5
    d8d2:	f002 fb91 	bl	fff8 <_calloc_r>
    d8d6:	2800      	cmp	r0, #0
    d8d8:	d0f3      	beq.n	d8c2 <_Balloc+0x2e>
    d8da:	e9c0 4601 	strd	r4, r6, [r0, #4]
    d8de:	e7e4      	b.n	d8aa <_Balloc+0x16>

0000d8e0 <_Bfree>:
    d8e0:	b131      	cbz	r1, d8f0 <_Bfree+0x10>
    d8e2:	6c43      	ldr	r3, [r0, #68]	; 0x44
    d8e4:	684a      	ldr	r2, [r1, #4]
    d8e6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    d8ea:	6008      	str	r0, [r1, #0]
    d8ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    d8f0:	4770      	bx	lr
    d8f2:	bf00      	nop

0000d8f4 <__multadd>:
    d8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d8f8:	690d      	ldr	r5, [r1, #16]
    d8fa:	4607      	mov	r7, r0
    d8fc:	460e      	mov	r6, r1
    d8fe:	461c      	mov	r4, r3
    d900:	f101 0e14 	add.w	lr, r1, #20
    d904:	2000      	movs	r0, #0
    d906:	f8de 1000 	ldr.w	r1, [lr]
    d90a:	b28b      	uxth	r3, r1
    d90c:	fb02 4303 	mla	r3, r2, r3, r4
    d910:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    d914:	0c09      	lsrs	r1, r1, #16
    d916:	fb02 cc01 	mla	ip, r2, r1, ip
    d91a:	3001      	adds	r0, #1
    d91c:	b29b      	uxth	r3, r3
    d91e:	eb03 430c 	add.w	r3, r3, ip, lsl #16
    d922:	4285      	cmp	r5, r0
    d924:	f84e 3b04 	str.w	r3, [lr], #4
    d928:	ea4f 441c 	mov.w	r4, ip, lsr #16
    d92c:	dceb      	bgt.n	d906 <__multadd+0x12>
    d92e:	b13c      	cbz	r4, d940 <__multadd+0x4c>
    d930:	68b3      	ldr	r3, [r6, #8]
    d932:	42ab      	cmp	r3, r5
    d934:	dd07      	ble.n	d946 <__multadd+0x52>
    d936:	eb06 0385 	add.w	r3, r6, r5, lsl #2
    d93a:	3501      	adds	r5, #1
    d93c:	615c      	str	r4, [r3, #20]
    d93e:	6135      	str	r5, [r6, #16]
    d940:	4630      	mov	r0, r6
    d942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d946:	6871      	ldr	r1, [r6, #4]
    d948:	4638      	mov	r0, r7
    d94a:	3101      	adds	r1, #1
    d94c:	f7ff ffa2 	bl	d894 <_Balloc>
    d950:	4680      	mov	r8, r0
    d952:	b1a8      	cbz	r0, d980 <__multadd+0x8c>
    d954:	6932      	ldr	r2, [r6, #16]
    d956:	3202      	adds	r2, #2
    d958:	f106 010c 	add.w	r1, r6, #12
    d95c:	0092      	lsls	r2, r2, #2
    d95e:	300c      	adds	r0, #12
    d960:	f7fb fb1e 	bl	8fa0 <memcpy>
    d964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d966:	6872      	ldr	r2, [r6, #4]
    d968:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    d96c:	6031      	str	r1, [r6, #0]
    d96e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    d972:	4646      	mov	r6, r8
    d974:	eb06 0385 	add.w	r3, r6, r5, lsl #2
    d978:	3501      	adds	r5, #1
    d97a:	615c      	str	r4, [r3, #20]
    d97c:	6135      	str	r5, [r6, #16]
    d97e:	e7df      	b.n	d940 <__multadd+0x4c>
    d980:	4b02      	ldr	r3, [pc, #8]	; (d98c <__multadd+0x98>)
    d982:	4803      	ldr	r0, [pc, #12]	; (d990 <__multadd+0x9c>)
    d984:	4642      	mov	r2, r8
    d986:	21ba      	movs	r1, #186	; 0xba
    d988:	f002 fb16 	bl	ffb8 <__assert_func>
    d98c:	000147e0 	.word	0x000147e0
    d990:	000147f4 	.word	0x000147f4

0000d994 <__hi0bits>:
    d994:	0c02      	lsrs	r2, r0, #16
    d996:	0412      	lsls	r2, r2, #16
    d998:	4603      	mov	r3, r0
    d99a:	b9ca      	cbnz	r2, d9d0 <__hi0bits+0x3c>
    d99c:	0403      	lsls	r3, r0, #16
    d99e:	2010      	movs	r0, #16
    d9a0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
    d9a4:	bf04      	itt	eq
    d9a6:	021b      	lsleq	r3, r3, #8
    d9a8:	3008      	addeq	r0, #8
    d9aa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
    d9ae:	bf04      	itt	eq
    d9b0:	011b      	lsleq	r3, r3, #4
    d9b2:	3004      	addeq	r0, #4
    d9b4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
    d9b8:	bf04      	itt	eq
    d9ba:	009b      	lsleq	r3, r3, #2
    d9bc:	3002      	addeq	r0, #2
    d9be:	2b00      	cmp	r3, #0
    d9c0:	db05      	blt.n	d9ce <__hi0bits+0x3a>
    d9c2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    d9c6:	f100 0001 	add.w	r0, r0, #1
    d9ca:	bf08      	it	eq
    d9cc:	2020      	moveq	r0, #32
    d9ce:	4770      	bx	lr
    d9d0:	2000      	movs	r0, #0
    d9d2:	e7e5      	b.n	d9a0 <__hi0bits+0xc>

0000d9d4 <__lo0bits>:
    d9d4:	6803      	ldr	r3, [r0, #0]
    d9d6:	f013 0207 	ands.w	r2, r3, #7
    d9da:	4601      	mov	r1, r0
    d9dc:	d007      	beq.n	d9ee <__lo0bits+0x1a>
    d9de:	07da      	lsls	r2, r3, #31
    d9e0:	d41f      	bmi.n	da22 <__lo0bits+0x4e>
    d9e2:	0798      	lsls	r0, r3, #30
    d9e4:	d521      	bpl.n	da2a <__lo0bits+0x56>
    d9e6:	085b      	lsrs	r3, r3, #1
    d9e8:	600b      	str	r3, [r1, #0]
    d9ea:	2001      	movs	r0, #1
    d9ec:	4770      	bx	lr
    d9ee:	b298      	uxth	r0, r3
    d9f0:	b1a0      	cbz	r0, da1c <__lo0bits+0x48>
    d9f2:	4610      	mov	r0, r2
    d9f4:	b2da      	uxtb	r2, r3
    d9f6:	b90a      	cbnz	r2, d9fc <__lo0bits+0x28>
    d9f8:	3008      	adds	r0, #8
    d9fa:	0a1b      	lsrs	r3, r3, #8
    d9fc:	071a      	lsls	r2, r3, #28
    d9fe:	bf04      	itt	eq
    da00:	091b      	lsreq	r3, r3, #4
    da02:	3004      	addeq	r0, #4
    da04:	079a      	lsls	r2, r3, #30
    da06:	bf04      	itt	eq
    da08:	089b      	lsreq	r3, r3, #2
    da0a:	3002      	addeq	r0, #2
    da0c:	07da      	lsls	r2, r3, #31
    da0e:	d403      	bmi.n	da18 <__lo0bits+0x44>
    da10:	085b      	lsrs	r3, r3, #1
    da12:	f100 0001 	add.w	r0, r0, #1
    da16:	d006      	beq.n	da26 <__lo0bits+0x52>
    da18:	600b      	str	r3, [r1, #0]
    da1a:	4770      	bx	lr
    da1c:	0c1b      	lsrs	r3, r3, #16
    da1e:	2010      	movs	r0, #16
    da20:	e7e8      	b.n	d9f4 <__lo0bits+0x20>
    da22:	2000      	movs	r0, #0
    da24:	4770      	bx	lr
    da26:	2020      	movs	r0, #32
    da28:	4770      	bx	lr
    da2a:	089b      	lsrs	r3, r3, #2
    da2c:	600b      	str	r3, [r1, #0]
    da2e:	2002      	movs	r0, #2
    da30:	4770      	bx	lr
    da32:	bf00      	nop

0000da34 <__i2b>:
    da34:	b538      	push	{r3, r4, r5, lr}
    da36:	6c43      	ldr	r3, [r0, #68]	; 0x44
    da38:	4604      	mov	r4, r0
    da3a:	460d      	mov	r5, r1
    da3c:	b14b      	cbz	r3, da52 <__i2b+0x1e>
    da3e:	6858      	ldr	r0, [r3, #4]
    da40:	b1b0      	cbz	r0, da70 <__i2b+0x3c>
    da42:	6802      	ldr	r2, [r0, #0]
    da44:	605a      	str	r2, [r3, #4]
    da46:	2200      	movs	r2, #0
    da48:	2301      	movs	r3, #1
    da4a:	e9c0 3504 	strd	r3, r5, [r0, #16]
    da4e:	60c2      	str	r2, [r0, #12]
    da50:	bd38      	pop	{r3, r4, r5, pc}
    da52:	2221      	movs	r2, #33	; 0x21
    da54:	2104      	movs	r1, #4
    da56:	f002 facf 	bl	fff8 <_calloc_r>
    da5a:	4603      	mov	r3, r0
    da5c:	6460      	str	r0, [r4, #68]	; 0x44
    da5e:	2800      	cmp	r0, #0
    da60:	d1ed      	bne.n	da3e <__i2b+0xa>
    da62:	4b09      	ldr	r3, [pc, #36]	; (da88 <__i2b+0x54>)
    da64:	4809      	ldr	r0, [pc, #36]	; (da8c <__i2b+0x58>)
    da66:	2200      	movs	r2, #0
    da68:	f240 1145 	movw	r1, #325	; 0x145
    da6c:	f002 faa4 	bl	ffb8 <__assert_func>
    da70:	221c      	movs	r2, #28
    da72:	2101      	movs	r1, #1
    da74:	4620      	mov	r0, r4
    da76:	f002 fabf 	bl	fff8 <_calloc_r>
    da7a:	2800      	cmp	r0, #0
    da7c:	d0f1      	beq.n	da62 <__i2b+0x2e>
    da7e:	2201      	movs	r2, #1
    da80:	2302      	movs	r3, #2
    da82:	e9c0 2301 	strd	r2, r3, [r0, #4]
    da86:	e7de      	b.n	da46 <__i2b+0x12>
    da88:	000147e0 	.word	0x000147e0
    da8c:	000147f4 	.word	0x000147f4

0000da90 <__multiply>:
    da90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da94:	690e      	ldr	r6, [r1, #16]
    da96:	6915      	ldr	r5, [r2, #16]
    da98:	42ae      	cmp	r6, r5
    da9a:	b085      	sub	sp, #20
    da9c:	4688      	mov	r8, r1
    da9e:	4614      	mov	r4, r2
    daa0:	db05      	blt.n	daae <__multiply+0x1e>
    daa2:	462a      	mov	r2, r5
    daa4:	4623      	mov	r3, r4
    daa6:	4635      	mov	r5, r6
    daa8:	460c      	mov	r4, r1
    daaa:	4616      	mov	r6, r2
    daac:	4698      	mov	r8, r3
    daae:	68a3      	ldr	r3, [r4, #8]
    dab0:	6861      	ldr	r1, [r4, #4]
    dab2:	19af      	adds	r7, r5, r6
    dab4:	42bb      	cmp	r3, r7
    dab6:	bfb8      	it	lt
    dab8:	3101      	addlt	r1, #1
    daba:	f7ff feeb 	bl	d894 <_Balloc>
    dabe:	9001      	str	r0, [sp, #4]
    dac0:	2800      	cmp	r0, #0
    dac2:	f000 8087 	beq.w	dbd4 <__multiply+0x144>
    dac6:	9b01      	ldr	r3, [sp, #4]
    dac8:	f103 0914 	add.w	r9, r3, #20
    dacc:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    dad0:	45d1      	cmp	r9, sl
    dad2:	d205      	bcs.n	dae0 <__multiply+0x50>
    dad4:	464b      	mov	r3, r9
    dad6:	2200      	movs	r2, #0
    dad8:	f843 2b04 	str.w	r2, [r3], #4
    dadc:	459a      	cmp	sl, r3
    dade:	d8fb      	bhi.n	dad8 <__multiply+0x48>
    dae0:	f108 0814 	add.w	r8, r8, #20
    dae4:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    dae8:	f104 0314 	add.w	r3, r4, #20
    daec:	45d8      	cmp	r8, fp
    daee:	461a      	mov	r2, r3
    daf0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    daf4:	d25f      	bcs.n	dbb6 <__multiply+0x126>
    daf6:	1b2b      	subs	r3, r5, r4
    daf8:	3b15      	subs	r3, #21
    dafa:	f023 0303 	bic.w	r3, r3, #3
    dafe:	3304      	adds	r3, #4
    db00:	3415      	adds	r4, #21
    db02:	42a5      	cmp	r5, r4
    db04:	bf38      	it	cc
    db06:	2304      	movcc	r3, #4
    db08:	e9cd a702 	strd	sl, r7, [sp, #8]
    db0c:	46ac      	mov	ip, r5
    db0e:	461f      	mov	r7, r3
    db10:	4692      	mov	sl, r2
    db12:	e005      	b.n	db20 <__multiply+0x90>
    db14:	0c09      	lsrs	r1, r1, #16
    db16:	d129      	bne.n	db6c <__multiply+0xdc>
    db18:	45c3      	cmp	fp, r8
    db1a:	f109 0904 	add.w	r9, r9, #4
    db1e:	d948      	bls.n	dbb2 <__multiply+0x122>
    db20:	f858 1b04 	ldr.w	r1, [r8], #4
    db24:	b28d      	uxth	r5, r1
    db26:	2d00      	cmp	r5, #0
    db28:	d0f4      	beq.n	db14 <__multiply+0x84>
    db2a:	4656      	mov	r6, sl
    db2c:	464c      	mov	r4, r9
    db2e:	2300      	movs	r3, #0
    db30:	f856 1b04 	ldr.w	r1, [r6], #4
    db34:	6822      	ldr	r2, [r4, #0]
    db36:	fa1f fe81 	uxth.w	lr, r1
    db3a:	b290      	uxth	r0, r2
    db3c:	0c09      	lsrs	r1, r1, #16
    db3e:	fb05 000e 	mla	r0, r5, lr, r0
    db42:	0c12      	lsrs	r2, r2, #16
    db44:	4403      	add	r3, r0
    db46:	fb05 2201 	mla	r2, r5, r1, r2
    db4a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    db4e:	b29b      	uxth	r3, r3
    db50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    db54:	45b4      	cmp	ip, r6
    db56:	f844 3b04 	str.w	r3, [r4], #4
    db5a:	ea4f 4312 	mov.w	r3, r2, lsr #16
    db5e:	d8e7      	bhi.n	db30 <__multiply+0xa0>
    db60:	f849 3007 	str.w	r3, [r9, r7]
    db64:	f858 1c04 	ldr.w	r1, [r8, #-4]
    db68:	0c09      	lsrs	r1, r1, #16
    db6a:	d0d5      	beq.n	db18 <__multiply+0x88>
    db6c:	f8d9 3000 	ldr.w	r3, [r9]
    db70:	4650      	mov	r0, sl
    db72:	461a      	mov	r2, r3
    db74:	464c      	mov	r4, r9
    db76:	2600      	movs	r6, #0
    db78:	8805      	ldrh	r5, [r0, #0]
    db7a:	0c12      	lsrs	r2, r2, #16
    db7c:	fb01 2205 	mla	r2, r1, r5, r2
    db80:	4416      	add	r6, r2
    db82:	b29b      	uxth	r3, r3
    db84:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    db88:	f844 3b04 	str.w	r3, [r4], #4
    db8c:	f850 5b04 	ldr.w	r5, [r0], #4
    db90:	6822      	ldr	r2, [r4, #0]
    db92:	0c2d      	lsrs	r5, r5, #16
    db94:	b293      	uxth	r3, r2
    db96:	fb01 3305 	mla	r3, r1, r5, r3
    db9a:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    db9e:	4584      	cmp	ip, r0
    dba0:	ea4f 4613 	mov.w	r6, r3, lsr #16
    dba4:	d8e8      	bhi.n	db78 <__multiply+0xe8>
    dba6:	45c3      	cmp	fp, r8
    dba8:	f849 3007 	str.w	r3, [r9, r7]
    dbac:	f109 0904 	add.w	r9, r9, #4
    dbb0:	d8b6      	bhi.n	db20 <__multiply+0x90>
    dbb2:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    dbb6:	2f00      	cmp	r7, #0
    dbb8:	dc02      	bgt.n	dbc0 <__multiply+0x130>
    dbba:	e005      	b.n	dbc8 <__multiply+0x138>
    dbbc:	3f01      	subs	r7, #1
    dbbe:	d003      	beq.n	dbc8 <__multiply+0x138>
    dbc0:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    dbc4:	2b00      	cmp	r3, #0
    dbc6:	d0f9      	beq.n	dbbc <__multiply+0x12c>
    dbc8:	9b01      	ldr	r3, [sp, #4]
    dbca:	4618      	mov	r0, r3
    dbcc:	611f      	str	r7, [r3, #16]
    dbce:	b005      	add	sp, #20
    dbd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dbd4:	4b03      	ldr	r3, [pc, #12]	; (dbe4 <__multiply+0x154>)
    dbd6:	4804      	ldr	r0, [pc, #16]	; (dbe8 <__multiply+0x158>)
    dbd8:	9a01      	ldr	r2, [sp, #4]
    dbda:	f44f 71b1 	mov.w	r1, #354	; 0x162
    dbde:	f002 f9eb 	bl	ffb8 <__assert_func>
    dbe2:	bf00      	nop
    dbe4:	000147e0 	.word	0x000147e0
    dbe8:	000147f4 	.word	0x000147f4

0000dbec <__pow5mult>:
    dbec:	f012 0303 	ands.w	r3, r2, #3
    dbf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dbf4:	4614      	mov	r4, r2
    dbf6:	4606      	mov	r6, r0
    dbf8:	d132      	bne.n	dc60 <__pow5mult+0x74>
    dbfa:	460d      	mov	r5, r1
    dbfc:	10a4      	asrs	r4, r4, #2
    dbfe:	d020      	beq.n	dc42 <__pow5mult+0x56>
    dc00:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    dc04:	f1b8 0f00 	cmp.w	r8, #0
    dc08:	d033      	beq.n	dc72 <__pow5mult+0x86>
    dc0a:	07e3      	lsls	r3, r4, #31
    dc0c:	f04f 0700 	mov.w	r7, #0
    dc10:	d407      	bmi.n	dc22 <__pow5mult+0x36>
    dc12:	1064      	asrs	r4, r4, #1
    dc14:	d015      	beq.n	dc42 <__pow5mult+0x56>
    dc16:	f8d8 0000 	ldr.w	r0, [r8]
    dc1a:	b1a8      	cbz	r0, dc48 <__pow5mult+0x5c>
    dc1c:	4680      	mov	r8, r0
    dc1e:	07e3      	lsls	r3, r4, #31
    dc20:	d5f7      	bpl.n	dc12 <__pow5mult+0x26>
    dc22:	4642      	mov	r2, r8
    dc24:	4629      	mov	r1, r5
    dc26:	4630      	mov	r0, r6
    dc28:	f7ff ff32 	bl	da90 <__multiply>
    dc2c:	b1b5      	cbz	r5, dc5c <__pow5mult+0x70>
    dc2e:	6869      	ldr	r1, [r5, #4]
    dc30:	6c73      	ldr	r3, [r6, #68]	; 0x44
    dc32:	1064      	asrs	r4, r4, #1
    dc34:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    dc38:	602a      	str	r2, [r5, #0]
    dc3a:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    dc3e:	4605      	mov	r5, r0
    dc40:	d1e9      	bne.n	dc16 <__pow5mult+0x2a>
    dc42:	4628      	mov	r0, r5
    dc44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dc48:	4642      	mov	r2, r8
    dc4a:	4641      	mov	r1, r8
    dc4c:	4630      	mov	r0, r6
    dc4e:	f7ff ff1f 	bl	da90 <__multiply>
    dc52:	f8c8 0000 	str.w	r0, [r8]
    dc56:	6007      	str	r7, [r0, #0]
    dc58:	4680      	mov	r8, r0
    dc5a:	e7e0      	b.n	dc1e <__pow5mult+0x32>
    dc5c:	4605      	mov	r5, r0
    dc5e:	e7d8      	b.n	dc12 <__pow5mult+0x26>
    dc60:	3b01      	subs	r3, #1
    dc62:	4a0f      	ldr	r2, [pc, #60]	; (dca0 <__pow5mult+0xb4>)
    dc64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    dc68:	2300      	movs	r3, #0
    dc6a:	f7ff fe43 	bl	d8f4 <__multadd>
    dc6e:	4605      	mov	r5, r0
    dc70:	e7c4      	b.n	dbfc <__pow5mult+0x10>
    dc72:	2101      	movs	r1, #1
    dc74:	4630      	mov	r0, r6
    dc76:	f7ff fe0d 	bl	d894 <_Balloc>
    dc7a:	4680      	mov	r8, r0
    dc7c:	b140      	cbz	r0, dc90 <__pow5mult+0xa4>
    dc7e:	2301      	movs	r3, #1
    dc80:	f240 2271 	movw	r2, #625	; 0x271
    dc84:	e9c0 3204 	strd	r3, r2, [r0, #16]
    dc88:	2300      	movs	r3, #0
    dc8a:	6430      	str	r0, [r6, #64]	; 0x40
    dc8c:	6003      	str	r3, [r0, #0]
    dc8e:	e7bc      	b.n	dc0a <__pow5mult+0x1e>
    dc90:	4b04      	ldr	r3, [pc, #16]	; (dca4 <__pow5mult+0xb8>)
    dc92:	4805      	ldr	r0, [pc, #20]	; (dca8 <__pow5mult+0xbc>)
    dc94:	4642      	mov	r2, r8
    dc96:	f240 1145 	movw	r1, #325	; 0x145
    dc9a:	f002 f98d 	bl	ffb8 <__assert_func>
    dc9e:	bf00      	nop
    dca0:	00014940 	.word	0x00014940
    dca4:	000147e0 	.word	0x000147e0
    dca8:	000147f4 	.word	0x000147f4

0000dcac <__lshift>:
    dcac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dcb0:	460c      	mov	r4, r1
    dcb2:	4690      	mov	r8, r2
    dcb4:	6926      	ldr	r6, [r4, #16]
    dcb6:	68a3      	ldr	r3, [r4, #8]
    dcb8:	6849      	ldr	r1, [r1, #4]
    dcba:	eb06 1662 	add.w	r6, r6, r2, asr #5
    dcbe:	1c75      	adds	r5, r6, #1
    dcc0:	429d      	cmp	r5, r3
    dcc2:	4607      	mov	r7, r0
    dcc4:	ea4f 1962 	mov.w	r9, r2, asr #5
    dcc8:	dd04      	ble.n	dcd4 <__lshift+0x28>
    dcca:	005b      	lsls	r3, r3, #1
    dccc:	429d      	cmp	r5, r3
    dcce:	f101 0101 	add.w	r1, r1, #1
    dcd2:	dcfa      	bgt.n	dcca <__lshift+0x1e>
    dcd4:	4638      	mov	r0, r7
    dcd6:	f7ff fddd 	bl	d894 <_Balloc>
    dcda:	4684      	mov	ip, r0
    dcdc:	2800      	cmp	r0, #0
    dcde:	d051      	beq.n	dd84 <__lshift+0xd8>
    dce0:	f1b9 0f00 	cmp.w	r9, #0
    dce4:	f100 0014 	add.w	r0, r0, #20
    dce8:	dd0e      	ble.n	dd08 <__lshift+0x5c>
    dcea:	f109 0205 	add.w	r2, r9, #5
    dcee:	ea4f 0e82 	mov.w	lr, r2, lsl #2
    dcf2:	4603      	mov	r3, r0
    dcf4:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
    dcf8:	2100      	movs	r1, #0
    dcfa:	f843 1b04 	str.w	r1, [r3], #4
    dcfe:	4293      	cmp	r3, r2
    dd00:	d1fb      	bne.n	dcfa <__lshift+0x4e>
    dd02:	f1ae 0314 	sub.w	r3, lr, #20
    dd06:	4418      	add	r0, r3
    dd08:	6921      	ldr	r1, [r4, #16]
    dd0a:	f104 0314 	add.w	r3, r4, #20
    dd0e:	f018 081f 	ands.w	r8, r8, #31
    dd12:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    dd16:	d02d      	beq.n	dd74 <__lshift+0xc8>
    dd18:	f1c8 0920 	rsb	r9, r8, #32
    dd1c:	4686      	mov	lr, r0
    dd1e:	f04f 0a00 	mov.w	sl, #0
    dd22:	681a      	ldr	r2, [r3, #0]
    dd24:	fa02 f208 	lsl.w	r2, r2, r8
    dd28:	ea42 020a 	orr.w	r2, r2, sl
    dd2c:	f84e 2b04 	str.w	r2, [lr], #4
    dd30:	f853 2b04 	ldr.w	r2, [r3], #4
    dd34:	4299      	cmp	r1, r3
    dd36:	fa22 fa09 	lsr.w	sl, r2, r9
    dd3a:	d8f2      	bhi.n	dd22 <__lshift+0x76>
    dd3c:	1b0b      	subs	r3, r1, r4
    dd3e:	3b15      	subs	r3, #21
    dd40:	f023 0303 	bic.w	r3, r3, #3
    dd44:	3304      	adds	r3, #4
    dd46:	f104 0215 	add.w	r2, r4, #21
    dd4a:	4291      	cmp	r1, r2
    dd4c:	bf38      	it	cc
    dd4e:	2304      	movcc	r3, #4
    dd50:	f1ba 0f00 	cmp.w	sl, #0
    dd54:	bf18      	it	ne
    dd56:	462e      	movne	r6, r5
    dd58:	f840 a003 	str.w	sl, [r0, r3]
    dd5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    dd5e:	6862      	ldr	r2, [r4, #4]
    dd60:	f8cc 6010 	str.w	r6, [ip, #16]
    dd64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    dd68:	6021      	str	r1, [r4, #0]
    dd6a:	4660      	mov	r0, ip
    dd6c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    dd70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dd74:	3804      	subs	r0, #4
    dd76:	f853 2b04 	ldr.w	r2, [r3], #4
    dd7a:	f840 2f04 	str.w	r2, [r0, #4]!
    dd7e:	4299      	cmp	r1, r3
    dd80:	d8f9      	bhi.n	dd76 <__lshift+0xca>
    dd82:	e7eb      	b.n	dd5c <__lshift+0xb0>
    dd84:	4b03      	ldr	r3, [pc, #12]	; (dd94 <__lshift+0xe8>)
    dd86:	4804      	ldr	r0, [pc, #16]	; (dd98 <__lshift+0xec>)
    dd88:	4662      	mov	r2, ip
    dd8a:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    dd8e:	f002 f913 	bl	ffb8 <__assert_func>
    dd92:	bf00      	nop
    dd94:	000147e0 	.word	0x000147e0
    dd98:	000147f4 	.word	0x000147f4

0000dd9c <__mcmp>:
    dd9c:	690b      	ldr	r3, [r1, #16]
    dd9e:	4684      	mov	ip, r0
    dda0:	6900      	ldr	r0, [r0, #16]
    dda2:	1ac0      	subs	r0, r0, r3
    dda4:	d115      	bne.n	ddd2 <__mcmp+0x36>
    dda6:	f10c 0c14 	add.w	ip, ip, #20
    ddaa:	3114      	adds	r1, #20
    ddac:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    ddb0:	b410      	push	{r4}
    ddb2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    ddb6:	e001      	b.n	ddbc <__mcmp+0x20>
    ddb8:	4594      	cmp	ip, r2
    ddba:	d208      	bcs.n	ddce <__mcmp+0x32>
    ddbc:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    ddc0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    ddc4:	428c      	cmp	r4, r1
    ddc6:	d0f7      	beq.n	ddb8 <__mcmp+0x1c>
    ddc8:	d204      	bcs.n	ddd4 <__mcmp+0x38>
    ddca:	f04f 30ff 	mov.w	r0, #4294967295
    ddce:	bc10      	pop	{r4}
    ddd0:	4770      	bx	lr
    ddd2:	4770      	bx	lr
    ddd4:	2001      	movs	r0, #1
    ddd6:	bc10      	pop	{r4}
    ddd8:	4770      	bx	lr
    ddda:	bf00      	nop

0000dddc <__mdiff>:
    dddc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dde0:	690f      	ldr	r7, [r1, #16]
    dde2:	6913      	ldr	r3, [r2, #16]
    dde4:	1aff      	subs	r7, r7, r3
    dde6:	2f00      	cmp	r7, #0
    dde8:	460e      	mov	r6, r1
    ddea:	4690      	mov	r8, r2
    ddec:	d17f      	bne.n	deee <__mdiff+0x112>
    ddee:	f101 0514 	add.w	r5, r1, #20
    ddf2:	3214      	adds	r2, #20
    ddf4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    ddf8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    ddfc:	e001      	b.n	de02 <__mdiff+0x26>
    ddfe:	429d      	cmp	r5, r3
    de00:	d278      	bcs.n	def4 <__mdiff+0x118>
    de02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    de06:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    de0a:	42a1      	cmp	r1, r4
    de0c:	d0f7      	beq.n	ddfe <__mdiff+0x22>
    de0e:	d369      	bcc.n	dee4 <__mdiff+0x108>
    de10:	6871      	ldr	r1, [r6, #4]
    de12:	f7ff fd3f 	bl	d894 <_Balloc>
    de16:	4681      	mov	r9, r0
    de18:	2800      	cmp	r0, #0
    de1a:	d077      	beq.n	df0c <__mdiff+0x130>
    de1c:	6935      	ldr	r5, [r6, #16]
    de1e:	f8d8 2010 	ldr.w	r2, [r8, #16]
    de22:	60c7      	str	r7, [r0, #12]
    de24:	f108 0e14 	add.w	lr, r8, #20
    de28:	f106 0014 	add.w	r0, r6, #20
    de2c:	f109 0a14 	add.w	sl, r9, #20
    de30:	f106 0110 	add.w	r1, r6, #16
    de34:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    de38:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    de3c:	4656      	mov	r6, sl
    de3e:	f04f 0c00 	mov.w	ip, #0
    de42:	f85e 4b04 	ldr.w	r4, [lr], #4
    de46:	f851 bf04 	ldr.w	fp, [r1, #4]!
    de4a:	b2a3      	uxth	r3, r4
    de4c:	fa1c fc8b 	uxtah	ip, ip, fp
    de50:	ebac 0303 	sub.w	r3, ip, r3
    de54:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    de58:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    de5c:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    de60:	b29b      	uxth	r3, r3
    de62:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    de66:	4572      	cmp	r2, lr
    de68:	f846 3b04 	str.w	r3, [r6], #4
    de6c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    de70:	d8e7      	bhi.n	de42 <__mdiff+0x66>
    de72:	eba2 0108 	sub.w	r1, r2, r8
    de76:	3915      	subs	r1, #21
    de78:	f108 0815 	add.w	r8, r8, #21
    de7c:	4542      	cmp	r2, r8
    de7e:	f021 0403 	bic.w	r4, r1, #3
    de82:	f104 0404 	add.w	r4, r4, #4
    de86:	bf38      	it	cc
    de88:	2404      	movcc	r4, #4
    de8a:	4420      	add	r0, r4
    de8c:	f021 0203 	bic.w	r2, r1, #3
    de90:	bf38      	it	cc
    de92:	2200      	movcc	r2, #0
    de94:	4287      	cmp	r7, r0
    de96:	4452      	add	r2, sl
    de98:	4454      	add	r4, sl
    de9a:	d918      	bls.n	dece <__mdiff+0xf2>
    de9c:	4626      	mov	r6, r4
    de9e:	4601      	mov	r1, r0
    dea0:	f851 3b04 	ldr.w	r3, [r1], #4
    dea4:	fa1c fc83 	uxtah	ip, ip, r3
    dea8:	ea4f 422c 	mov.w	r2, ip, asr #16
    deac:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    deb0:	fa1f fc8c 	uxth.w	ip, ip
    deb4:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    deb8:	428f      	cmp	r7, r1
    deba:	f846 3b04 	str.w	r3, [r6], #4
    debe:	ea4f 4c22 	mov.w	ip, r2, asr #16
    dec2:	d8ed      	bhi.n	dea0 <__mdiff+0xc4>
    dec4:	3f01      	subs	r7, #1
    dec6:	1a3f      	subs	r7, r7, r0
    dec8:	f027 0703 	bic.w	r7, r7, #3
    decc:	19e2      	adds	r2, r4, r7
    dece:	b923      	cbnz	r3, deda <__mdiff+0xfe>
    ded0:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    ded4:	3d01      	subs	r5, #1
    ded6:	2b00      	cmp	r3, #0
    ded8:	d0fa      	beq.n	ded0 <__mdiff+0xf4>
    deda:	f8c9 5010 	str.w	r5, [r9, #16]
    dede:	4648      	mov	r0, r9
    dee0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dee4:	4633      	mov	r3, r6
    dee6:	2701      	movs	r7, #1
    dee8:	4646      	mov	r6, r8
    deea:	4698      	mov	r8, r3
    deec:	e790      	b.n	de10 <__mdiff+0x34>
    deee:	dbf9      	blt.n	dee4 <__mdiff+0x108>
    def0:	2700      	movs	r7, #0
    def2:	e78d      	b.n	de10 <__mdiff+0x34>
    def4:	2100      	movs	r1, #0
    def6:	f7ff fccd 	bl	d894 <_Balloc>
    defa:	4681      	mov	r9, r0
    defc:	b168      	cbz	r0, df1a <__mdiff+0x13e>
    defe:	2201      	movs	r2, #1
    df00:	2300      	movs	r3, #0
    df02:	e9c9 2304 	strd	r2, r3, [r9, #16]
    df06:	4648      	mov	r0, r9
    df08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df0c:	4b06      	ldr	r3, [pc, #24]	; (df28 <__mdiff+0x14c>)
    df0e:	4807      	ldr	r0, [pc, #28]	; (df2c <__mdiff+0x150>)
    df10:	464a      	mov	r2, r9
    df12:	f240 2145 	movw	r1, #581	; 0x245
    df16:	f002 f84f 	bl	ffb8 <__assert_func>
    df1a:	4b03      	ldr	r3, [pc, #12]	; (df28 <__mdiff+0x14c>)
    df1c:	4803      	ldr	r0, [pc, #12]	; (df2c <__mdiff+0x150>)
    df1e:	464a      	mov	r2, r9
    df20:	f240 2137 	movw	r1, #567	; 0x237
    df24:	f002 f848 	bl	ffb8 <__assert_func>
    df28:	000147e0 	.word	0x000147e0
    df2c:	000147f4 	.word	0x000147f4

0000df30 <__d2b>:
    df30:	b570      	push	{r4, r5, r6, lr}
    df32:	2101      	movs	r1, #1
    df34:	b082      	sub	sp, #8
    df36:	4616      	mov	r6, r2
    df38:	461d      	mov	r5, r3
    df3a:	f7ff fcab 	bl	d894 <_Balloc>
    df3e:	4604      	mov	r4, r0
    df40:	2800      	cmp	r0, #0
    df42:	d04a      	beq.n	dfda <__d2b+0xaa>
    df44:	462b      	mov	r3, r5
    df46:	f3c5 550a 	ubfx	r5, r5, #20, #11
    df4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    df4e:	b10d      	cbz	r5, df54 <__d2b+0x24>
    df50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    df54:	2e00      	cmp	r6, #0
    df56:	9301      	str	r3, [sp, #4]
    df58:	d114      	bne.n	df84 <__d2b+0x54>
    df5a:	a801      	add	r0, sp, #4
    df5c:	f7ff fd3a 	bl	d9d4 <__lo0bits>
    df60:	9b01      	ldr	r3, [sp, #4]
    df62:	6163      	str	r3, [r4, #20]
    df64:	2101      	movs	r1, #1
    df66:	3020      	adds	r0, #32
    df68:	6121      	str	r1, [r4, #16]
    df6a:	b315      	cbz	r5, dfb2 <__d2b+0x82>
    df6c:	9b06      	ldr	r3, [sp, #24]
    df6e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
    df72:	4405      	add	r5, r0
    df74:	601d      	str	r5, [r3, #0]
    df76:	9b07      	ldr	r3, [sp, #28]
    df78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    df7c:	6018      	str	r0, [r3, #0]
    df7e:	4620      	mov	r0, r4
    df80:	b002      	add	sp, #8
    df82:	bd70      	pop	{r4, r5, r6, pc}
    df84:	4668      	mov	r0, sp
    df86:	9600      	str	r6, [sp, #0]
    df88:	f7ff fd24 	bl	d9d4 <__lo0bits>
    df8c:	b308      	cbz	r0, dfd2 <__d2b+0xa2>
    df8e:	9b01      	ldr	r3, [sp, #4]
    df90:	9900      	ldr	r1, [sp, #0]
    df92:	f1c0 0220 	rsb	r2, r0, #32
    df96:	fa03 f202 	lsl.w	r2, r3, r2
    df9a:	430a      	orrs	r2, r1
    df9c:	40c3      	lsrs	r3, r0
    df9e:	9301      	str	r3, [sp, #4]
    dfa0:	6162      	str	r2, [r4, #20]
    dfa2:	2b00      	cmp	r3, #0
    dfa4:	bf14      	ite	ne
    dfa6:	2102      	movne	r1, #2
    dfa8:	2101      	moveq	r1, #1
    dfaa:	61a3      	str	r3, [r4, #24]
    dfac:	6121      	str	r1, [r4, #16]
    dfae:	2d00      	cmp	r5, #0
    dfb0:	d1dc      	bne.n	df6c <__d2b+0x3c>
    dfb2:	eb04 0281 	add.w	r2, r4, r1, lsl #2
    dfb6:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
    dfba:	6910      	ldr	r0, [r2, #16]
    dfbc:	9a06      	ldr	r2, [sp, #24]
    dfbe:	6013      	str	r3, [r2, #0]
    dfc0:	f7ff fce8 	bl	d994 <__hi0bits>
    dfc4:	9b07      	ldr	r3, [sp, #28]
    dfc6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
    dfca:	6018      	str	r0, [r3, #0]
    dfcc:	4620      	mov	r0, r4
    dfce:	b002      	add	sp, #8
    dfd0:	bd70      	pop	{r4, r5, r6, pc}
    dfd2:	e9dd 2300 	ldrd	r2, r3, [sp]
    dfd6:	6162      	str	r2, [r4, #20]
    dfd8:	e7e3      	b.n	dfa2 <__d2b+0x72>
    dfda:	4b03      	ldr	r3, [pc, #12]	; (dfe8 <__d2b+0xb8>)
    dfdc:	4803      	ldr	r0, [pc, #12]	; (dfec <__d2b+0xbc>)
    dfde:	4622      	mov	r2, r4
    dfe0:	f240 310f 	movw	r1, #783	; 0x30f
    dfe4:	f001 ffe8 	bl	ffb8 <__assert_func>
    dfe8:	000147e0 	.word	0x000147e0
    dfec:	000147f4 	.word	0x000147f4

0000dff0 <__ascii_wctomb>:
    dff0:	b149      	cbz	r1, e006 <__ascii_wctomb+0x16>
    dff2:	2aff      	cmp	r2, #255	; 0xff
    dff4:	d802      	bhi.n	dffc <__ascii_wctomb+0xc>
    dff6:	700a      	strb	r2, [r1, #0]
    dff8:	2001      	movs	r0, #1
    dffa:	4770      	bx	lr
    dffc:	238a      	movs	r3, #138	; 0x8a
    dffe:	6003      	str	r3, [r0, #0]
    e000:	f04f 30ff 	mov.w	r0, #4294967295
    e004:	4770      	bx	lr
    e006:	4608      	mov	r0, r1
    e008:	4770      	bx	lr
    e00a:	bf00      	nop

0000e00c <_svfprintf_r>:
    e00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e010:	b0d9      	sub	sp, #356	; 0x164
    e012:	460c      	mov	r4, r1
    e014:	910c      	str	r1, [sp, #48]	; 0x30
    e016:	4690      	mov	r8, r2
    e018:	930e      	str	r3, [sp, #56]	; 0x38
    e01a:	4682      	mov	sl, r0
    e01c:	f001 fee6 	bl	fdec <_localeconv_r>
    e020:	6803      	ldr	r3, [r0, #0]
    e022:	9319      	str	r3, [sp, #100]	; 0x64
    e024:	4618      	mov	r0, r3
    e026:	f7ff fa4b 	bl	d4c0 <strlen>
    e02a:	2208      	movs	r2, #8
    e02c:	9017      	str	r0, [sp, #92]	; 0x5c
    e02e:	2100      	movs	r1, #0
    e030:	a828      	add	r0, sp, #160	; 0xa0
    e032:	f7ff f905 	bl	d240 <memset>
    e036:	89a3      	ldrh	r3, [r4, #12]
    e038:	061f      	lsls	r7, r3, #24
    e03a:	d503      	bpl.n	e044 <_svfprintf_r+0x38>
    e03c:	6923      	ldr	r3, [r4, #16]
    e03e:	2b00      	cmp	r3, #0
    e040:	f000 873f 	beq.w	eec2 <_svfprintf_r+0xeb6>
    e044:	2300      	movs	r3, #0
    e046:	aa2f      	add	r2, sp, #188	; 0xbc
    e048:	2400      	movs	r4, #0
    e04a:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
    e04e:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
    e052:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
    e056:	9313      	str	r3, [sp, #76]	; 0x4c
    e058:	9318      	str	r3, [sp, #96]	; 0x60
    e05a:	9309      	str	r3, [sp, #36]	; 0x24
    e05c:	2300      	movs	r3, #0
    e05e:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
    e062:	922c      	str	r2, [sp, #176]	; 0xb0
    e064:	4691      	mov	r9, r2
    e066:	4644      	mov	r4, r8
    e068:	46a0      	mov	r8, r4
    e06a:	4b78      	ldr	r3, [pc, #480]	; (e24c <_svfprintf_r+0x240>)
    e06c:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    e070:	f7ff f96a 	bl	d348 <__locale_mb_cur_max>
    e074:	4603      	mov	r3, r0
    e076:	a828      	add	r0, sp, #160	; 0xa0
    e078:	9000      	str	r0, [sp, #0]
    e07a:	4642      	mov	r2, r8
    e07c:	a924      	add	r1, sp, #144	; 0x90
    e07e:	4650      	mov	r0, sl
    e080:	47a8      	blx	r5
    e082:	2800      	cmp	r0, #0
    e084:	f000 80b0 	beq.w	e1e8 <_svfprintf_r+0x1dc>
    e088:	f2c0 80a6 	blt.w	e1d8 <_svfprintf_r+0x1cc>
    e08c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    e08e:	2a25      	cmp	r2, #37	; 0x25
    e090:	4603      	mov	r3, r0
    e092:	d001      	beq.n	e098 <_svfprintf_r+0x8c>
    e094:	4498      	add	r8, r3
    e096:	e7e8      	b.n	e06a <_svfprintf_r+0x5e>
    e098:	ebb8 0704 	subs.w	r7, r8, r4
    e09c:	4606      	mov	r6, r0
    e09e:	f040 80a7 	bne.w	e1f0 <_svfprintf_r+0x1e4>
    e0a2:	2300      	movs	r3, #0
    e0a4:	f04f 32ff 	mov.w	r2, #4294967295
    e0a8:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    e0ac:	469b      	mov	fp, r3
    e0ae:	930b      	str	r3, [sp, #44]	; 0x2c
    e0b0:	f108 0801 	add.w	r8, r8, #1
    e0b4:	f898 3000 	ldrb.w	r3, [r8]
    e0b8:	9208      	str	r2, [sp, #32]
    e0ba:	252b      	movs	r5, #43	; 0x2b
    e0bc:	2620      	movs	r6, #32
    e0be:	f108 0801 	add.w	r8, r8, #1
    e0c2:	f1a3 0220 	sub.w	r2, r3, #32
    e0c6:	2a5a      	cmp	r2, #90	; 0x5a
    e0c8:	f200 80c2 	bhi.w	e250 <_svfprintf_r+0x244>
    e0cc:	e8df f012 	tbh	[pc, r2, lsl #1]
    e0d0:	00c002e6 	.word	0x00c002e6
    e0d4:	02e100c0 	.word	0x02e100c0
    e0d8:	00c000c0 	.word	0x00c000c0
    e0dc:	006a00c0 	.word	0x006a00c0
    e0e0:	00c000c0 	.word	0x00c000c0
    e0e4:	02840208 	.word	0x02840208
    e0e8:	021300c0 	.word	0x021300c0
    e0ec:	00c002c7 	.word	0x00c002c7
    e0f0:	005b02c2 	.word	0x005b02c2
    e0f4:	005b005b 	.word	0x005b005b
    e0f8:	005b005b 	.word	0x005b005b
    e0fc:	005b005b 	.word	0x005b005b
    e100:	005b005b 	.word	0x005b005b
    e104:	00c000c0 	.word	0x00c000c0
    e108:	00c000c0 	.word	0x00c000c0
    e10c:	00c000c0 	.word	0x00c000c0
    e110:	014300c0 	.word	0x014300c0
    e114:	018900c0 	.word	0x018900c0
    e118:	0143021d 	.word	0x0143021d
    e11c:	01430143 	.word	0x01430143
    e120:	00c000c0 	.word	0x00c000c0
    e124:	00c000c0 	.word	0x00c000c0
    e128:	00c00218 	.word	0x00c00218
    e12c:	029600c0 	.word	0x029600c0
    e130:	00c000c0 	.word	0x00c000c0
    e134:	01b100c0 	.word	0x01b100c0
    e138:	02a900c0 	.word	0x02a900c0
    e13c:	00c000c0 	.word	0x00c000c0
    e140:	00c006dd 	.word	0x00c006dd
    e144:	00c000c0 	.word	0x00c000c0
    e148:	00c000c0 	.word	0x00c000c0
    e14c:	00c000c0 	.word	0x00c000c0
    e150:	014300c0 	.word	0x014300c0
    e154:	018900c0 	.word	0x018900c0
    e158:	014301e2 	.word	0x014301e2
    e15c:	01430143 	.word	0x01430143
    e160:	01e20277 	.word	0x01e20277
    e164:	00c0007f 	.word	0x00c0007f
    e168:	00c00289 	.word	0x00c00289
    e16c:	06da025f 	.word	0x06da025f
    e170:	007f0232 	.word	0x007f0232
    e174:	01b100c0 	.word	0x01b100c0
    e178:	06b4007c 	.word	0x06b4007c
    e17c:	00c000c0 	.word	0x00c000c0
    e180:	00c006b8 	.word	0x00c006b8
    e184:	007c      	.short	0x007c
    e186:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    e18a:	2100      	movs	r1, #0
    e18c:	f818 3b01 	ldrb.w	r3, [r8], #1
    e190:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    e194:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    e198:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    e19c:	2a09      	cmp	r2, #9
    e19e:	d9f5      	bls.n	e18c <_svfprintf_r+0x180>
    e1a0:	910b      	str	r1, [sp, #44]	; 0x2c
    e1a2:	e78e      	b.n	e0c2 <_svfprintf_r+0xb6>
    e1a4:	4650      	mov	r0, sl
    e1a6:	f001 fe21 	bl	fdec <_localeconv_r>
    e1aa:	6843      	ldr	r3, [r0, #4]
    e1ac:	931c      	str	r3, [sp, #112]	; 0x70
    e1ae:	4618      	mov	r0, r3
    e1b0:	f7ff f986 	bl	d4c0 <strlen>
    e1b4:	901d      	str	r0, [sp, #116]	; 0x74
    e1b6:	4607      	mov	r7, r0
    e1b8:	4650      	mov	r0, sl
    e1ba:	f001 fe17 	bl	fdec <_localeconv_r>
    e1be:	6883      	ldr	r3, [r0, #8]
    e1c0:	931a      	str	r3, [sp, #104]	; 0x68
    e1c2:	2f00      	cmp	r7, #0
    e1c4:	f040 85b1 	bne.w	ed2a <_svfprintf_r+0xd1e>
    e1c8:	f898 3000 	ldrb.w	r3, [r8]
    e1cc:	e777      	b.n	e0be <_svfprintf_r+0xb2>
    e1ce:	f898 3000 	ldrb.w	r3, [r8]
    e1d2:	f04b 0b20 	orr.w	fp, fp, #32
    e1d6:	e772      	b.n	e0be <_svfprintf_r+0xb2>
    e1d8:	2208      	movs	r2, #8
    e1da:	2100      	movs	r1, #0
    e1dc:	a828      	add	r0, sp, #160	; 0xa0
    e1de:	f7ff f82f 	bl	d240 <memset>
    e1e2:	2301      	movs	r3, #1
    e1e4:	4498      	add	r8, r3
    e1e6:	e740      	b.n	e06a <_svfprintf_r+0x5e>
    e1e8:	ebb8 0704 	subs.w	r7, r8, r4
    e1ec:	4606      	mov	r6, r0
    e1ee:	d011      	beq.n	e214 <_svfprintf_r+0x208>
    e1f0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    e1f2:	443b      	add	r3, r7
    e1f4:	932e      	str	r3, [sp, #184]	; 0xb8
    e1f6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    e1f8:	3301      	adds	r3, #1
    e1fa:	2b07      	cmp	r3, #7
    e1fc:	e9c9 4700 	strd	r4, r7, [r9]
    e200:	932d      	str	r3, [sp, #180]	; 0xb4
    e202:	dc19      	bgt.n	e238 <_svfprintf_r+0x22c>
    e204:	f109 0908 	add.w	r9, r9, #8
    e208:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e20a:	443b      	add	r3, r7
    e20c:	9309      	str	r3, [sp, #36]	; 0x24
    e20e:	2e00      	cmp	r6, #0
    e210:	f47f af47 	bne.w	e0a2 <_svfprintf_r+0x96>
    e214:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    e216:	2b00      	cmp	r3, #0
    e218:	f041 8201 	bne.w	f61e <_svfprintf_r+0x1612>
    e21c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    e21e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    e222:	f013 0f40 	tst.w	r3, #64	; 0x40
    e226:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e228:	bf18      	it	ne
    e22a:	f04f 33ff 	movne.w	r3, #4294967295
    e22e:	9309      	str	r3, [sp, #36]	; 0x24
    e230:	9809      	ldr	r0, [sp, #36]	; 0x24
    e232:	b059      	add	sp, #356	; 0x164
    e234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e238:	990c      	ldr	r1, [sp, #48]	; 0x30
    e23a:	aa2c      	add	r2, sp, #176	; 0xb0
    e23c:	4650      	mov	r0, sl
    e23e:	f002 ff4f 	bl	110e0 <__ssprint_r>
    e242:	2800      	cmp	r0, #0
    e244:	d1ea      	bne.n	e21c <_svfprintf_r+0x210>
    e246:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    e24a:	e7dd      	b.n	e208 <_svfprintf_r+0x1fc>
    e24c:	1fff8ce4 	.word	0x1fff8ce4
    e250:	9310      	str	r3, [sp, #64]	; 0x40
    e252:	2b00      	cmp	r3, #0
    e254:	d0de      	beq.n	e214 <_svfprintf_r+0x208>
    e256:	2200      	movs	r2, #0
    e258:	f88d 30fc 	strb.w	r3, [sp, #252]	; 0xfc
    e25c:	2301      	movs	r3, #1
    e25e:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
    e262:	9307      	str	r3, [sp, #28]
    e264:	920d      	str	r2, [sp, #52]	; 0x34
    e266:	930a      	str	r3, [sp, #40]	; 0x28
    e268:	9208      	str	r2, [sp, #32]
    e26a:	9212      	str	r2, [sp, #72]	; 0x48
    e26c:	9216      	str	r2, [sp, #88]	; 0x58
    e26e:	9211      	str	r2, [sp, #68]	; 0x44
    e270:	ac3f      	add	r4, sp, #252	; 0xfc
    e272:	f01b 0302 	ands.w	r3, fp, #2
    e276:	d002      	beq.n	e27e <_svfprintf_r+0x272>
    e278:	9907      	ldr	r1, [sp, #28]
    e27a:	3102      	adds	r1, #2
    e27c:	9107      	str	r1, [sp, #28]
    e27e:	f01b 0184 	ands.w	r1, fp, #132	; 0x84
    e282:	910f      	str	r1, [sp, #60]	; 0x3c
    e284:	d105      	bne.n	e292 <_svfprintf_r+0x286>
    e286:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e288:	9807      	ldr	r0, [sp, #28]
    e28a:	1a0f      	subs	r7, r1, r0
    e28c:	2f00      	cmp	r7, #0
    e28e:	f300 8382 	bgt.w	e996 <_svfprintf_r+0x98a>
    e292:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    e294:	b182      	cbz	r2, e2b8 <_svfprintf_r+0x2ac>
    e296:	2201      	movs	r2, #1
    e298:	f8c9 2004 	str.w	r2, [r9, #4]
    e29c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    e29e:	3201      	adds	r2, #1
    e2a0:	3601      	adds	r6, #1
    e2a2:	f10d 0187 	add.w	r1, sp, #135	; 0x87
    e2a6:	2a07      	cmp	r2, #7
    e2a8:	962e      	str	r6, [sp, #184]	; 0xb8
    e2aa:	922d      	str	r2, [sp, #180]	; 0xb4
    e2ac:	f8c9 1000 	str.w	r1, [r9]
    e2b0:	f300 83bd 	bgt.w	ea2e <_svfprintf_r+0xa22>
    e2b4:	f109 0908 	add.w	r9, r9, #8
    e2b8:	b183      	cbz	r3, e2dc <_svfprintf_r+0x2d0>
    e2ba:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    e2bc:	aa22      	add	r2, sp, #136	; 0x88
    e2be:	3301      	adds	r3, #1
    e2c0:	3602      	adds	r6, #2
    e2c2:	f8c9 2000 	str.w	r2, [r9]
    e2c6:	2b07      	cmp	r3, #7
    e2c8:	f04f 0202 	mov.w	r2, #2
    e2cc:	962e      	str	r6, [sp, #184]	; 0xb8
    e2ce:	932d      	str	r3, [sp, #180]	; 0xb4
    e2d0:	f8c9 2004 	str.w	r2, [r9, #4]
    e2d4:	f300 83c0 	bgt.w	ea58 <_svfprintf_r+0xa4c>
    e2d8:	f109 0908 	add.w	r9, r9, #8
    e2dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e2de:	2b80      	cmp	r3, #128	; 0x80
    e2e0:	f000 8281 	beq.w	e7e6 <_svfprintf_r+0x7da>
    e2e4:	9b08      	ldr	r3, [sp, #32]
    e2e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e2e8:	1a9f      	subs	r7, r3, r2
    e2ea:	2f00      	cmp	r7, #0
    e2ec:	f300 82bc 	bgt.w	e868 <_svfprintf_r+0x85c>
    e2f0:	f41b 7f80 	tst.w	fp, #256	; 0x100
    e2f4:	f040 821e 	bne.w	e734 <_svfprintf_r+0x728>
    e2f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e2fa:	f8c9 3004 	str.w	r3, [r9, #4]
    e2fe:	441e      	add	r6, r3
    e300:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    e302:	f8c9 4000 	str.w	r4, [r9]
    e306:	3301      	adds	r3, #1
    e308:	2b07      	cmp	r3, #7
    e30a:	962e      	str	r6, [sp, #184]	; 0xb8
    e30c:	932d      	str	r3, [sp, #180]	; 0xb4
    e30e:	f300 8337 	bgt.w	e980 <_svfprintf_r+0x974>
    e312:	f109 0908 	add.w	r9, r9, #8
    e316:	f01b 0f04 	tst.w	fp, #4
    e31a:	d005      	beq.n	e328 <_svfprintf_r+0x31c>
    e31c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e31e:	9a07      	ldr	r2, [sp, #28]
    e320:	1a9c      	subs	r4, r3, r2
    e322:	2c00      	cmp	r4, #0
    e324:	f300 83a4 	bgt.w	ea70 <_svfprintf_r+0xa64>
    e328:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e32a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e32c:	9907      	ldr	r1, [sp, #28]
    e32e:	428a      	cmp	r2, r1
    e330:	bfac      	ite	ge
    e332:	189b      	addge	r3, r3, r2
    e334:	185b      	addlt	r3, r3, r1
    e336:	9309      	str	r3, [sp, #36]	; 0x24
    e338:	2e00      	cmp	r6, #0
    e33a:	f040 82ca 	bne.w	e8d2 <_svfprintf_r+0x8c6>
    e33e:	2300      	movs	r3, #0
    e340:	932d      	str	r3, [sp, #180]	; 0xb4
    e342:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e344:	b11b      	cbz	r3, e34e <_svfprintf_r+0x342>
    e346:	990d      	ldr	r1, [sp, #52]	; 0x34
    e348:	4650      	mov	r0, sl
    e34a:	f7ff f987 	bl	d65c <_free_r>
    e34e:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    e352:	4644      	mov	r4, r8
    e354:	e688      	b.n	e068 <_svfprintf_r+0x5c>
    e356:	9310      	str	r3, [sp, #64]	; 0x40
    e358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e35a:	3307      	adds	r3, #7
    e35c:	f023 0107 	bic.w	r1, r3, #7
    e360:	e8f1 2302 	ldrd	r2, r3, [r1], #8
    e364:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    e368:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    e36c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
    e370:	910e      	str	r1, [sp, #56]	; 0x38
    e372:	4616      	mov	r6, r2
    e374:	4610      	mov	r0, r2
    e376:	4bb3      	ldr	r3, [pc, #716]	; (e644 <_svfprintf_r+0x638>)
    e378:	4629      	mov	r1, r5
    e37a:	f04f 32ff 	mov.w	r2, #4294967295
    e37e:	f7fd fd99 	bl	beb4 <__aeabi_dcmpun>
    e382:	2800      	cmp	r0, #0
    e384:	f040 84fc 	bne.w	ed80 <_svfprintf_r+0xd74>
    e388:	4bae      	ldr	r3, [pc, #696]	; (e644 <_svfprintf_r+0x638>)
    e38a:	4630      	mov	r0, r6
    e38c:	4629      	mov	r1, r5
    e38e:	f04f 32ff 	mov.w	r2, #4294967295
    e392:	f7fd fd71 	bl	be78 <__aeabi_dcmple>
    e396:	2800      	cmp	r0, #0
    e398:	f040 84f2 	bne.w	ed80 <_svfprintf_r+0xd74>
    e39c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    e3a0:	2200      	movs	r2, #0
    e3a2:	2300      	movs	r3, #0
    e3a4:	f7fd fd5e 	bl	be64 <__aeabi_dcmplt>
    e3a8:	2800      	cmp	r0, #0
    e3aa:	f041 8038 	bne.w	f41e <_svfprintf_r+0x1412>
    e3ae:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    e3b2:	4ca5      	ldr	r4, [pc, #660]	; (e648 <_svfprintf_r+0x63c>)
    e3b4:	4ba5      	ldr	r3, [pc, #660]	; (e64c <_svfprintf_r+0x640>)
    e3b6:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    e3ba:	9910      	ldr	r1, [sp, #64]	; 0x40
    e3bc:	2947      	cmp	r1, #71	; 0x47
    e3be:	bfc8      	it	gt
    e3c0:	461c      	movgt	r4, r3
    e3c2:	2300      	movs	r3, #0
    e3c4:	2103      	movs	r1, #3
    e3c6:	930d      	str	r3, [sp, #52]	; 0x34
    e3c8:	9107      	str	r1, [sp, #28]
    e3ca:	910a      	str	r1, [sp, #40]	; 0x28
    e3cc:	9308      	str	r3, [sp, #32]
    e3ce:	9312      	str	r3, [sp, #72]	; 0x48
    e3d0:	9316      	str	r3, [sp, #88]	; 0x58
    e3d2:	9311      	str	r3, [sp, #68]	; 0x44
    e3d4:	2a00      	cmp	r2, #0
    e3d6:	f43f af4c 	beq.w	e272 <_svfprintf_r+0x266>
    e3da:	9b07      	ldr	r3, [sp, #28]
    e3dc:	3301      	adds	r3, #1
    e3de:	9307      	str	r3, [sp, #28]
    e3e0:	e747      	b.n	e272 <_svfprintf_r+0x266>
    e3e2:	2b43      	cmp	r3, #67	; 0x43
    e3e4:	9310      	str	r3, [sp, #64]	; 0x40
    e3e6:	d003      	beq.n	e3f0 <_svfprintf_r+0x3e4>
    e3e8:	f01b 0f10 	tst.w	fp, #16
    e3ec:	f000 8551 	beq.w	ee92 <_svfprintf_r+0xe86>
    e3f0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    e3f2:	2208      	movs	r2, #8
    e3f4:	2100      	movs	r1, #0
    e3f6:	a82a      	add	r0, sp, #168	; 0xa8
    e3f8:	ac3f      	add	r4, sp, #252	; 0xfc
    e3fa:	f7fe ff21 	bl	d240 <memset>
    e3fe:	ab2a      	add	r3, sp, #168	; 0xa8
    e400:	f856 2b04 	ldr.w	r2, [r6], #4
    e404:	4621      	mov	r1, r4
    e406:	4650      	mov	r0, sl
    e408:	f002 fe22 	bl	11050 <_wcrtomb_r>
    e40c:	4603      	mov	r3, r0
    e40e:	3301      	adds	r3, #1
    e410:	900a      	str	r0, [sp, #40]	; 0x28
    e412:	f001 82c3 	beq.w	f99c <_svfprintf_r+0x1990>
    e416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e418:	960e      	str	r6, [sp, #56]	; 0x38
    e41a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e41e:	9307      	str	r3, [sp, #28]
    e420:	2200      	movs	r2, #0
    e422:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
    e426:	920d      	str	r2, [sp, #52]	; 0x34
    e428:	9208      	str	r2, [sp, #32]
    e42a:	9212      	str	r2, [sp, #72]	; 0x48
    e42c:	9216      	str	r2, [sp, #88]	; 0x58
    e42e:	9211      	str	r2, [sp, #68]	; 0x44
    e430:	e71f      	b.n	e272 <_svfprintf_r+0x266>
    e432:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    e434:	9310      	str	r3, [sp, #64]	; 0x40
    e436:	f857 4b04 	ldr.w	r4, [r7], #4
    e43a:	2300      	movs	r3, #0
    e43c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    e440:	2c00      	cmp	r4, #0
    e442:	f000 854d 	beq.w	eee0 <_svfprintf_r+0xed4>
    e446:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e448:	2b53      	cmp	r3, #83	; 0x53
    e44a:	f000 86d4 	beq.w	f1f6 <_svfprintf_r+0x11ea>
    e44e:	f01b 0310 	ands.w	r3, fp, #16
    e452:	9311      	str	r3, [sp, #68]	; 0x44
    e454:	f040 86cf 	bne.w	f1f6 <_svfprintf_r+0x11ea>
    e458:	9b08      	ldr	r3, [sp, #32]
    e45a:	1c5d      	adds	r5, r3, #1
    e45c:	f001 80cc 	beq.w	f5f8 <_svfprintf_r+0x15ec>
    e460:	9911      	ldr	r1, [sp, #68]	; 0x44
    e462:	461a      	mov	r2, r3
    e464:	4620      	mov	r0, r4
    e466:	f001 fcdb 	bl	fe20 <memchr>
    e46a:	900d      	str	r0, [sp, #52]	; 0x34
    e46c:	2800      	cmp	r0, #0
    e46e:	f001 8351 	beq.w	fb14 <_svfprintf_r+0x1b08>
    e472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e474:	9911      	ldr	r1, [sp, #68]	; 0x44
    e476:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    e47a:	970e      	str	r7, [sp, #56]	; 0x38
    e47c:	1b1b      	subs	r3, r3, r4
    e47e:	930a      	str	r3, [sp, #40]	; 0x28
    e480:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e484:	9307      	str	r3, [sp, #28]
    e486:	2373      	movs	r3, #115	; 0x73
    e488:	9108      	str	r1, [sp, #32]
    e48a:	9112      	str	r1, [sp, #72]	; 0x48
    e48c:	9116      	str	r1, [sp, #88]	; 0x58
    e48e:	910d      	str	r1, [sp, #52]	; 0x34
    e490:	9310      	str	r3, [sp, #64]	; 0x40
    e492:	e79f      	b.n	e3d4 <_svfprintf_r+0x3c8>
    e494:	f01b 0f20 	tst.w	fp, #32
    e498:	9310      	str	r3, [sp, #64]	; 0x40
    e49a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e49c:	d03c      	beq.n	e518 <_svfprintf_r+0x50c>
    e49e:	3307      	adds	r3, #7
    e4a0:	f023 0307 	bic.w	r3, r3, #7
    e4a4:	461a      	mov	r2, r3
    e4a6:	4611      	mov	r1, r2
    e4a8:	685b      	ldr	r3, [r3, #4]
    e4aa:	f851 2b08 	ldr.w	r2, [r1], #8
    e4ae:	910e      	str	r1, [sp, #56]	; 0x38
    e4b0:	4619      	mov	r1, r3
    e4b2:	2b00      	cmp	r3, #0
    e4b4:	f2c0 8401 	blt.w	ecba <_svfprintf_r+0xcae>
    e4b8:	9b08      	ldr	r3, [sp, #32]
    e4ba:	3301      	adds	r3, #1
    e4bc:	f000 82a8 	beq.w	ea10 <_svfprintf_r+0xa04>
    e4c0:	ea52 0301 	orrs.w	r3, r2, r1
    e4c4:	f02b 0580 	bic.w	r5, fp, #128	; 0x80
    e4c8:	f040 82a3 	bne.w	ea12 <_svfprintf_r+0xa06>
    e4cc:	9b08      	ldr	r3, [sp, #32]
    e4ce:	2b00      	cmp	r3, #0
    e4d0:	f040 82a4 	bne.w	ea1c <_svfprintf_r+0xa10>
    e4d4:	46ab      	mov	fp, r5
    e4d6:	2300      	movs	r3, #0
    e4d8:	9308      	str	r3, [sp, #32]
    e4da:	930a      	str	r3, [sp, #40]	; 0x28
    e4dc:	ac58      	add	r4, sp, #352	; 0x160
    e4de:	e0ff      	b.n	e6e0 <_svfprintf_r+0x6d4>
    e4e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e4e2:	f853 2b04 	ldr.w	r2, [r3], #4
    e4e6:	920b      	str	r2, [sp, #44]	; 0x2c
    e4e8:	2a00      	cmp	r2, #0
    e4ea:	f280 840c 	bge.w	ed06 <_svfprintf_r+0xcfa>
    e4ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e4f0:	930e      	str	r3, [sp, #56]	; 0x38
    e4f2:	4252      	negs	r2, r2
    e4f4:	920b      	str	r2, [sp, #44]	; 0x2c
    e4f6:	f898 3000 	ldrb.w	r3, [r8]
    e4fa:	f04b 0b04 	orr.w	fp, fp, #4
    e4fe:	e5de      	b.n	e0be <_svfprintf_r+0xb2>
    e500:	f898 3000 	ldrb.w	r3, [r8]
    e504:	f04b 0b08 	orr.w	fp, fp, #8
    e508:	e5d9      	b.n	e0be <_svfprintf_r+0xb2>
    e50a:	f04b 0b10 	orr.w	fp, fp, #16
    e50e:	f01b 0f20 	tst.w	fp, #32
    e512:	9310      	str	r3, [sp, #64]	; 0x40
    e514:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e516:	d1c2      	bne.n	e49e <_svfprintf_r+0x492>
    e518:	f01b 0f10 	tst.w	fp, #16
    e51c:	f040 83fe 	bne.w	ed1c <_svfprintf_r+0xd10>
    e520:	f01b 0f40 	tst.w	fp, #64	; 0x40
    e524:	f000 83f6 	beq.w	ed14 <_svfprintf_r+0xd08>
    e528:	f933 2b04 	ldrsh.w	r2, [r3], #4
    e52c:	930e      	str	r3, [sp, #56]	; 0x38
    e52e:	17d1      	asrs	r1, r2, #31
    e530:	460b      	mov	r3, r1
    e532:	e7be      	b.n	e4b2 <_svfprintf_r+0x4a6>
    e534:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e536:	f853 2b04 	ldr.w	r2, [r3], #4
    e53a:	930e      	str	r3, [sp, #56]	; 0x38
    e53c:	f647 0330 	movw	r3, #30768	; 0x7830
    e540:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    e544:	2078      	movs	r0, #120	; 0x78
    e546:	4b42      	ldr	r3, [pc, #264]	; (e650 <_svfprintf_r+0x644>)
    e548:	9318      	str	r3, [sp, #96]	; 0x60
    e54a:	f04b 0502 	orr.w	r5, fp, #2
    e54e:	2100      	movs	r1, #0
    e550:	2302      	movs	r3, #2
    e552:	9010      	str	r0, [sp, #64]	; 0x40
    e554:	2000      	movs	r0, #0
    e556:	9c08      	ldr	r4, [sp, #32]
    e558:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
    e55c:	1c60      	adds	r0, r4, #1
    e55e:	f000 80a8 	beq.w	e6b2 <_svfprintf_r+0x6a6>
    e562:	ea52 0001 	orrs.w	r0, r2, r1
    e566:	f025 0b80 	bic.w	fp, r5, #128	; 0x80
    e56a:	f040 80a1 	bne.w	e6b0 <_svfprintf_r+0x6a4>
    e56e:	2c00      	cmp	r4, #0
    e570:	f040 8695 	bne.w	f29e <_svfprintf_r+0x1292>
    e574:	2b00      	cmp	r3, #0
    e576:	d1ae      	bne.n	e4d6 <_svfprintf_r+0x4ca>
    e578:	f015 0301 	ands.w	r3, r5, #1
    e57c:	930a      	str	r3, [sp, #40]	; 0x28
    e57e:	f000 83c7 	beq.w	ed10 <_svfprintf_r+0xd04>
    e582:	2330      	movs	r3, #48	; 0x30
    e584:	f88d 315f 	strb.w	r3, [sp, #351]	; 0x15f
    e588:	f20d 145f 	addw	r4, sp, #351	; 0x15f
    e58c:	e0a8      	b.n	e6e0 <_svfprintf_r+0x6d4>
    e58e:	f01b 0f20 	tst.w	fp, #32
    e592:	f040 83e5 	bne.w	ed60 <_svfprintf_r+0xd54>
    e596:	f01b 0f10 	tst.w	fp, #16
    e59a:	f040 8686 	bne.w	f2aa <_svfprintf_r+0x129e>
    e59e:	f01b 0f40 	tst.w	fp, #64	; 0x40
    e5a2:	f040 877f 	bne.w	f4a4 <_svfprintf_r+0x1498>
    e5a6:	f41b 7f00 	tst.w	fp, #512	; 0x200
    e5aa:	f000 867e 	beq.w	f2aa <_svfprintf_r+0x129e>
    e5ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e5b0:	9909      	ldr	r1, [sp, #36]	; 0x24
    e5b2:	f853 2b04 	ldr.w	r2, [r3], #4
    e5b6:	930e      	str	r3, [sp, #56]	; 0x38
    e5b8:	7011      	strb	r1, [r2, #0]
    e5ba:	4644      	mov	r4, r8
    e5bc:	e554      	b.n	e068 <_svfprintf_r+0x5c>
    e5be:	f898 3000 	ldrb.w	r3, [r8]
    e5c2:	2b68      	cmp	r3, #104	; 0x68
    e5c4:	bf03      	ittte	eq
    e5c6:	f898 3001 	ldrbeq.w	r3, [r8, #1]
    e5ca:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
    e5ce:	f108 0801 	addeq.w	r8, r8, #1
    e5d2:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
    e5d6:	e572      	b.n	e0be <_svfprintf_r+0xb2>
    e5d8:	f898 3000 	ldrb.w	r3, [r8]
    e5dc:	f88d 5087 	strb.w	r5, [sp, #135]	; 0x87
    e5e0:	e56d      	b.n	e0be <_svfprintf_r+0xb2>
    e5e2:	f898 3000 	ldrb.w	r3, [r8]
    e5e6:	2b6c      	cmp	r3, #108	; 0x6c
    e5e8:	bf03      	ittte	eq
    e5ea:	f898 3001 	ldrbeq.w	r3, [r8, #1]
    e5ee:	f04b 0b20 	orreq.w	fp, fp, #32
    e5f2:	f108 0801 	addeq.w	r8, r8, #1
    e5f6:	f04b 0b10 	orrne.w	fp, fp, #16
    e5fa:	e560      	b.n	e0be <_svfprintf_r+0xb2>
    e5fc:	9310      	str	r3, [sp, #64]	; 0x40
    e5fe:	f04b 0b10 	orr.w	fp, fp, #16
    e602:	f01b 0120 	ands.w	r1, fp, #32
    e606:	f000 834a 	beq.w	ec9e <_svfprintf_r+0xc92>
    e60a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e60c:	3307      	adds	r3, #7
    e60e:	f023 0307 	bic.w	r3, r3, #7
    e612:	6859      	ldr	r1, [r3, #4]
    e614:	f853 2b08 	ldr.w	r2, [r3], #8
    e618:	930e      	str	r3, [sp, #56]	; 0x38
    e61a:	f42b 6580 	bic.w	r5, fp, #1024	; 0x400
    e61e:	2300      	movs	r3, #0
    e620:	e798      	b.n	e554 <_svfprintf_r+0x548>
    e622:	9310      	str	r3, [sp, #64]	; 0x40
    e624:	f04b 0510 	orr.w	r5, fp, #16
    e628:	f015 0120 	ands.w	r1, r5, #32
    e62c:	f000 8328 	beq.w	ec80 <_svfprintf_r+0xc74>
    e630:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e632:	3307      	adds	r3, #7
    e634:	f023 0307 	bic.w	r3, r3, #7
    e638:	6859      	ldr	r1, [r3, #4]
    e63a:	f853 2b08 	ldr.w	r2, [r3], #8
    e63e:	930e      	str	r3, [sp, #56]	; 0x38
    e640:	2301      	movs	r3, #1
    e642:	e787      	b.n	e554 <_svfprintf_r+0x548>
    e644:	7fefffff 	.word	0x7fefffff
    e648:	0001494c 	.word	0x0001494c
    e64c:	000144d8 	.word	0x000144d8
    e650:	00014954 	.word	0x00014954
    e654:	f898 3000 	ldrb.w	r3, [r8]
    e658:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
    e65c:	e52f      	b.n	e0be <_svfprintf_r+0xb2>
    e65e:	4641      	mov	r1, r8
    e660:	f811 3b01 	ldrb.w	r3, [r1], #1
    e664:	2b2a      	cmp	r3, #42	; 0x2a
    e666:	f001 827f 	beq.w	fb68 <_svfprintf_r+0x1b5c>
    e66a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    e66e:	2a09      	cmp	r2, #9
    e670:	4688      	mov	r8, r1
    e672:	bf98      	it	ls
    e674:	2100      	movls	r1, #0
    e676:	f201 8176 	bhi.w	f966 <_svfprintf_r+0x195a>
    e67a:	f818 3b01 	ldrb.w	r3, [r8], #1
    e67e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    e682:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    e686:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    e68a:	2a09      	cmp	r2, #9
    e68c:	d9f5      	bls.n	e67a <_svfprintf_r+0x66e>
    e68e:	9108      	str	r1, [sp, #32]
    e690:	e517      	b.n	e0c2 <_svfprintf_r+0xb6>
    e692:	f898 3000 	ldrb.w	r3, [r8]
    e696:	f04b 0b01 	orr.w	fp, fp, #1
    e69a:	e510      	b.n	e0be <_svfprintf_r+0xb2>
    e69c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    e6a0:	2b00      	cmp	r3, #0
    e6a2:	f47f ad91 	bne.w	e1c8 <_svfprintf_r+0x1bc>
    e6a6:	f898 3000 	ldrb.w	r3, [r8]
    e6aa:	f88d 6087 	strb.w	r6, [sp, #135]	; 0x87
    e6ae:	e506      	b.n	e0be <_svfprintf_r+0xb2>
    e6b0:	465d      	mov	r5, fp
    e6b2:	2b01      	cmp	r3, #1
    e6b4:	f000 81ad 	beq.w	ea12 <_svfprintf_r+0xa06>
    e6b8:	2b02      	cmp	r3, #2
    e6ba:	ac58      	add	r4, sp, #352	; 0x160
    e6bc:	d11f      	bne.n	e6fe <_svfprintf_r+0x6f2>
    e6be:	9818      	ldr	r0, [sp, #96]	; 0x60
    e6c0:	f002 030f 	and.w	r3, r2, #15
    e6c4:	0912      	lsrs	r2, r2, #4
    e6c6:	5cc3      	ldrb	r3, [r0, r3]
    e6c8:	f804 3d01 	strb.w	r3, [r4, #-1]!
    e6cc:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    e6d0:	0909      	lsrs	r1, r1, #4
    e6d2:	ea52 0301 	orrs.w	r3, r2, r1
    e6d6:	d1f3      	bne.n	e6c0 <_svfprintf_r+0x6b4>
    e6d8:	ab58      	add	r3, sp, #352	; 0x160
    e6da:	1b1b      	subs	r3, r3, r4
    e6dc:	46ab      	mov	fp, r5
    e6de:	930a      	str	r3, [sp, #40]	; 0x28
    e6e0:	990a      	ldr	r1, [sp, #40]	; 0x28
    e6e2:	9808      	ldr	r0, [sp, #32]
    e6e4:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    e6e8:	4281      	cmp	r1, r0
    e6ea:	f04f 0300 	mov.w	r3, #0
    e6ee:	bfb8      	it	lt
    e6f0:	4601      	movlt	r1, r0
    e6f2:	930d      	str	r3, [sp, #52]	; 0x34
    e6f4:	9107      	str	r1, [sp, #28]
    e6f6:	9312      	str	r3, [sp, #72]	; 0x48
    e6f8:	9316      	str	r3, [sp, #88]	; 0x58
    e6fa:	9311      	str	r3, [sp, #68]	; 0x44
    e6fc:	e66a      	b.n	e3d4 <_svfprintf_r+0x3c8>
    e6fe:	f002 0307 	and.w	r3, r2, #7
    e702:	08d2      	lsrs	r2, r2, #3
    e704:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    e708:	08c9      	lsrs	r1, r1, #3
    e70a:	3330      	adds	r3, #48	; 0x30
    e70c:	ea52 0601 	orrs.w	r6, r2, r1
    e710:	4620      	mov	r0, r4
    e712:	f804 3d01 	strb.w	r3, [r4, #-1]!
    e716:	d1f2      	bne.n	e6fe <_svfprintf_r+0x6f2>
    e718:	07e9      	lsls	r1, r5, #31
    e71a:	d5dd      	bpl.n	e6d8 <_svfprintf_r+0x6cc>
    e71c:	2b30      	cmp	r3, #48	; 0x30
    e71e:	d0db      	beq.n	e6d8 <_svfprintf_r+0x6cc>
    e720:	2330      	movs	r3, #48	; 0x30
    e722:	3802      	subs	r0, #2
    e724:	f804 3c01 	strb.w	r3, [r4, #-1]
    e728:	ab58      	add	r3, sp, #352	; 0x160
    e72a:	1a1b      	subs	r3, r3, r0
    e72c:	46ab      	mov	fp, r5
    e72e:	930a      	str	r3, [sp, #40]	; 0x28
    e730:	4604      	mov	r4, r0
    e732:	e7d5      	b.n	e6e0 <_svfprintf_r+0x6d4>
    e734:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e736:	2b65      	cmp	r3, #101	; 0x65
    e738:	f340 80dc 	ble.w	e8f4 <_svfprintf_r+0x8e8>
    e73c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    e740:	2200      	movs	r2, #0
    e742:	2300      	movs	r3, #0
    e744:	f7fd fb84 	bl	be50 <__aeabi_dcmpeq>
    e748:	2800      	cmp	r0, #0
    e74a:	f000 81c8 	beq.w	eade <_svfprintf_r+0xad2>
    e74e:	2301      	movs	r3, #1
    e750:	f8c9 3004 	str.w	r3, [r9, #4]
    e754:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    e756:	4abd      	ldr	r2, [pc, #756]	; (ea4c <_svfprintf_r+0xa40>)
    e758:	f8c9 2000 	str.w	r2, [r9]
    e75c:	3301      	adds	r3, #1
    e75e:	3601      	adds	r6, #1
    e760:	2b07      	cmp	r3, #7
    e762:	962e      	str	r6, [sp, #184]	; 0xb8
    e764:	932d      	str	r3, [sp, #180]	; 0xb4
    e766:	f300 8539 	bgt.w	f1dc <_svfprintf_r+0x11d0>
    e76a:	f109 0908 	add.w	r9, r9, #8
    e76e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    e770:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e772:	4293      	cmp	r3, r2
    e774:	f280 82c2 	bge.w	ecfc <_svfprintf_r+0xcf0>
    e778:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    e77a:	9a19      	ldr	r2, [sp, #100]	; 0x64
    e77c:	441e      	add	r6, r3
    e77e:	e9c9 2300 	strd	r2, r3, [r9]
    e782:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    e784:	962e      	str	r6, [sp, #184]	; 0xb8
    e786:	3301      	adds	r3, #1
    e788:	2b07      	cmp	r3, #7
    e78a:	932d      	str	r3, [sp, #180]	; 0xb4
    e78c:	f300 838d 	bgt.w	eeaa <_svfprintf_r+0xe9e>
    e790:	f109 0908 	add.w	r9, r9, #8
    e794:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e796:	1e5c      	subs	r4, r3, #1
    e798:	2c00      	cmp	r4, #0
    e79a:	f77f adbc 	ble.w	e316 <_svfprintf_r+0x30a>
    e79e:	2c10      	cmp	r4, #16
    e7a0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    e7a2:	4dab      	ldr	r5, [pc, #684]	; (ea50 <_svfprintf_r+0xa44>)
    e7a4:	f340 8555 	ble.w	f252 <_svfprintf_r+0x1246>
    e7a8:	4632      	mov	r2, r6
    e7aa:	2710      	movs	r7, #16
    e7ac:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    e7ae:	e005      	b.n	e7bc <_svfprintf_r+0x7b0>
    e7b0:	f109 0908 	add.w	r9, r9, #8
    e7b4:	3c10      	subs	r4, #16
    e7b6:	2c10      	cmp	r4, #16
    e7b8:	f340 854a 	ble.w	f250 <_svfprintf_r+0x1244>
    e7bc:	3301      	adds	r3, #1
    e7be:	3210      	adds	r2, #16
    e7c0:	2b07      	cmp	r3, #7
    e7c2:	e9c9 5700 	strd	r5, r7, [r9]
    e7c6:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    e7ca:	ddf1      	ble.n	e7b0 <_svfprintf_r+0x7a4>
    e7cc:	aa2c      	add	r2, sp, #176	; 0xb0
    e7ce:	4631      	mov	r1, r6
    e7d0:	4650      	mov	r0, sl
    e7d2:	f002 fc85 	bl	110e0 <__ssprint_r>
    e7d6:	2800      	cmp	r0, #0
    e7d8:	f040 8083 	bne.w	e8e2 <_svfprintf_r+0x8d6>
    e7dc:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    e7e0:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    e7e4:	e7e6      	b.n	e7b4 <_svfprintf_r+0x7a8>
    e7e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e7e8:	9a07      	ldr	r2, [sp, #28]
    e7ea:	1a9f      	subs	r7, r3, r2
    e7ec:	2f00      	cmp	r7, #0
    e7ee:	f77f ad79 	ble.w	e2e4 <_svfprintf_r+0x2d8>
    e7f2:	2f10      	cmp	r7, #16
    e7f4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    e7f6:	4d96      	ldr	r5, [pc, #600]	; (ea50 <_svfprintf_r+0xa44>)
    e7f8:	dd23      	ble.n	e842 <_svfprintf_r+0x836>
    e7fa:	4632      	mov	r2, r6
    e7fc:	4626      	mov	r6, r4
    e7fe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    e800:	e004      	b.n	e80c <_svfprintf_r+0x800>
    e802:	3f10      	subs	r7, #16
    e804:	2f10      	cmp	r7, #16
    e806:	f109 0908 	add.w	r9, r9, #8
    e80a:	dd18      	ble.n	e83e <_svfprintf_r+0x832>
    e80c:	3301      	adds	r3, #1
    e80e:	3210      	adds	r2, #16
    e810:	2110      	movs	r1, #16
    e812:	2b07      	cmp	r3, #7
    e814:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    e818:	f8c9 5000 	str.w	r5, [r9]
    e81c:	f8c9 1004 	str.w	r1, [r9, #4]
    e820:	ddef      	ble.n	e802 <_svfprintf_r+0x7f6>
    e822:	aa2c      	add	r2, sp, #176	; 0xb0
    e824:	4621      	mov	r1, r4
    e826:	4650      	mov	r0, sl
    e828:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    e82c:	f002 fc58 	bl	110e0 <__ssprint_r>
    e830:	2800      	cmp	r0, #0
    e832:	d156      	bne.n	e8e2 <_svfprintf_r+0x8d6>
    e834:	3f10      	subs	r7, #16
    e836:	2f10      	cmp	r7, #16
    e838:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    e83c:	dce6      	bgt.n	e80c <_svfprintf_r+0x800>
    e83e:	4634      	mov	r4, r6
    e840:	4616      	mov	r6, r2
    e842:	3301      	adds	r3, #1
    e844:	443e      	add	r6, r7
    e846:	2b07      	cmp	r3, #7
    e848:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    e84c:	f8c9 5000 	str.w	r5, [r9]
    e850:	f8c9 7004 	str.w	r7, [r9, #4]
    e854:	f300 8516 	bgt.w	f284 <_svfprintf_r+0x1278>
    e858:	9b08      	ldr	r3, [sp, #32]
    e85a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e85c:	1a9f      	subs	r7, r3, r2
    e85e:	2f00      	cmp	r7, #0
    e860:	f109 0908 	add.w	r9, r9, #8
    e864:	f77f ad44 	ble.w	e2f0 <_svfprintf_r+0x2e4>
    e868:	2f10      	cmp	r7, #16
    e86a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    e86c:	4d78      	ldr	r5, [pc, #480]	; (ea50 <_svfprintf_r+0xa44>)
    e86e:	dd22      	ble.n	e8b6 <_svfprintf_r+0x8aa>
    e870:	4632      	mov	r2, r6
    e872:	4626      	mov	r6, r4
    e874:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    e876:	e004      	b.n	e882 <_svfprintf_r+0x876>
    e878:	3f10      	subs	r7, #16
    e87a:	2f10      	cmp	r7, #16
    e87c:	f109 0908 	add.w	r9, r9, #8
    e880:	dd17      	ble.n	e8b2 <_svfprintf_r+0x8a6>
    e882:	3301      	adds	r3, #1
    e884:	3210      	adds	r2, #16
    e886:	2110      	movs	r1, #16
    e888:	2b07      	cmp	r3, #7
    e88a:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    e88e:	f8c9 5000 	str.w	r5, [r9]
    e892:	f8c9 1004 	str.w	r1, [r9, #4]
    e896:	ddef      	ble.n	e878 <_svfprintf_r+0x86c>
    e898:	aa2c      	add	r2, sp, #176	; 0xb0
    e89a:	4621      	mov	r1, r4
    e89c:	4650      	mov	r0, sl
    e89e:	f002 fc1f 	bl	110e0 <__ssprint_r>
    e8a2:	b9f0      	cbnz	r0, e8e2 <_svfprintf_r+0x8d6>
    e8a4:	3f10      	subs	r7, #16
    e8a6:	2f10      	cmp	r7, #16
    e8a8:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    e8ac:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    e8b0:	dce7      	bgt.n	e882 <_svfprintf_r+0x876>
    e8b2:	4634      	mov	r4, r6
    e8b4:	4616      	mov	r6, r2
    e8b6:	3301      	adds	r3, #1
    e8b8:	443e      	add	r6, r7
    e8ba:	2b07      	cmp	r3, #7
    e8bc:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    e8c0:	f8c9 5000 	str.w	r5, [r9]
    e8c4:	f8c9 7004 	str.w	r7, [r9, #4]
    e8c8:	f300 81cd 	bgt.w	ec66 <_svfprintf_r+0xc5a>
    e8cc:	f109 0908 	add.w	r9, r9, #8
    e8d0:	e50e      	b.n	e2f0 <_svfprintf_r+0x2e4>
    e8d2:	990c      	ldr	r1, [sp, #48]	; 0x30
    e8d4:	aa2c      	add	r2, sp, #176	; 0xb0
    e8d6:	4650      	mov	r0, sl
    e8d8:	f002 fc02 	bl	110e0 <__ssprint_r>
    e8dc:	2800      	cmp	r0, #0
    e8de:	f43f ad2e 	beq.w	e33e <_svfprintf_r+0x332>
    e8e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e8e4:	2b00      	cmp	r3, #0
    e8e6:	f43f ac99 	beq.w	e21c <_svfprintf_r+0x210>
    e8ea:	990d      	ldr	r1, [sp, #52]	; 0x34
    e8ec:	4650      	mov	r0, sl
    e8ee:	f7fe feb5 	bl	d65c <_free_r>
    e8f2:	e493      	b.n	e21c <_svfprintf_r+0x210>
    e8f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e8f6:	2b01      	cmp	r3, #1
    e8f8:	f340 816e 	ble.w	ebd8 <_svfprintf_r+0xbcc>
    e8fc:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
    e8fe:	f8c9 4000 	str.w	r4, [r9]
    e902:	2301      	movs	r3, #1
    e904:	441f      	add	r7, r3
    e906:	3601      	adds	r6, #1
    e908:	2f07      	cmp	r7, #7
    e90a:	f8c9 3004 	str.w	r3, [r9, #4]
    e90e:	962e      	str	r6, [sp, #184]	; 0xb8
    e910:	972d      	str	r7, [sp, #180]	; 0xb4
    e912:	f300 81d9 	bgt.w	ecc8 <_svfprintf_r+0xcbc>
    e916:	f109 0908 	add.w	r9, r9, #8
    e91a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    e91c:	9a19      	ldr	r2, [sp, #100]	; 0x64
    e91e:	3701      	adds	r7, #1
    e920:	441e      	add	r6, r3
    e922:	2f07      	cmp	r7, #7
    e924:	e9c9 2300 	strd	r2, r3, [r9]
    e928:	e9cd 762d 	strd	r7, r6, [sp, #180]	; 0xb4
    e92c:	f300 81d9 	bgt.w	ece2 <_svfprintf_r+0xcd6>
    e930:	f109 0908 	add.w	r9, r9, #8
    e934:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    e938:	2200      	movs	r2, #0
    e93a:	2300      	movs	r3, #0
    e93c:	f7fd fa88 	bl	be50 <__aeabi_dcmpeq>
    e940:	2800      	cmp	r0, #0
    e942:	f040 8167 	bne.w	ec14 <_svfprintf_r+0xc08>
    e946:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e948:	3701      	adds	r7, #1
    e94a:	3b01      	subs	r3, #1
    e94c:	3401      	adds	r4, #1
    e94e:	441e      	add	r6, r3
    e950:	2f07      	cmp	r7, #7
    e952:	f8c9 4000 	str.w	r4, [r9]
    e956:	972d      	str	r7, [sp, #180]	; 0xb4
    e958:	f8c9 3004 	str.w	r3, [r9, #4]
    e95c:	962e      	str	r6, [sp, #184]	; 0xb8
    e95e:	f300 814c 	bgt.w	ebfa <_svfprintf_r+0xbee>
    e962:	f109 0908 	add.w	r9, r9, #8
    e966:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e968:	f8c9 3004 	str.w	r3, [r9, #4]
    e96c:	3701      	adds	r7, #1
    e96e:	441e      	add	r6, r3
    e970:	2f07      	cmp	r7, #7
    e972:	ab26      	add	r3, sp, #152	; 0x98
    e974:	e9cd 762d 	strd	r7, r6, [sp, #180]	; 0xb4
    e978:	f8c9 3000 	str.w	r3, [r9]
    e97c:	f77f acc9 	ble.w	e312 <_svfprintf_r+0x306>
    e980:	990c      	ldr	r1, [sp, #48]	; 0x30
    e982:	aa2c      	add	r2, sp, #176	; 0xb0
    e984:	4650      	mov	r0, sl
    e986:	f002 fbab 	bl	110e0 <__ssprint_r>
    e98a:	2800      	cmp	r0, #0
    e98c:	d1a9      	bne.n	e8e2 <_svfprintf_r+0x8d6>
    e98e:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    e990:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    e994:	e4bf      	b.n	e316 <_svfprintf_r+0x30a>
    e996:	2f10      	cmp	r7, #16
    e998:	e9dd 212d 	ldrd	r2, r1, [sp, #180]	; 0xb4
    e99c:	4d2d      	ldr	r5, [pc, #180]	; (ea54 <_svfprintf_r+0xa48>)
    e99e:	dd27      	ble.n	e9f0 <_svfprintf_r+0x9e4>
    e9a0:	e9cd 381e 	strd	r3, r8, [sp, #120]	; 0x78
    e9a4:	2610      	movs	r6, #16
    e9a6:	46d0      	mov	r8, sl
    e9a8:	46a2      	mov	sl, r4
    e9aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    e9ac:	e004      	b.n	e9b8 <_svfprintf_r+0x9ac>
    e9ae:	3f10      	subs	r7, #16
    e9b0:	2f10      	cmp	r7, #16
    e9b2:	f109 0908 	add.w	r9, r9, #8
    e9b6:	dd16      	ble.n	e9e6 <_svfprintf_r+0x9da>
    e9b8:	3201      	adds	r2, #1
    e9ba:	3110      	adds	r1, #16
    e9bc:	2a07      	cmp	r2, #7
    e9be:	e9c9 5600 	strd	r5, r6, [r9]
    e9c2:	e9cd 212d 	strd	r2, r1, [sp, #180]	; 0xb4
    e9c6:	ddf2      	ble.n	e9ae <_svfprintf_r+0x9a2>
    e9c8:	aa2c      	add	r2, sp, #176	; 0xb0
    e9ca:	4621      	mov	r1, r4
    e9cc:	4640      	mov	r0, r8
    e9ce:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    e9d2:	f002 fb85 	bl	110e0 <__ssprint_r>
    e9d6:	2800      	cmp	r0, #0
    e9d8:	f040 83f2 	bne.w	f1c0 <_svfprintf_r+0x11b4>
    e9dc:	3f10      	subs	r7, #16
    e9de:	2f10      	cmp	r7, #16
    e9e0:	e9dd 212d 	ldrd	r2, r1, [sp, #180]	; 0xb4
    e9e4:	dce8      	bgt.n	e9b8 <_svfprintf_r+0x9ac>
    e9e6:	4654      	mov	r4, sl
    e9e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    e9ea:	46c2      	mov	sl, r8
    e9ec:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
    e9f0:	f8c9 5000 	str.w	r5, [r9]
    e9f4:	3201      	adds	r2, #1
    e9f6:	187e      	adds	r6, r7, r1
    e9f8:	2a07      	cmp	r2, #7
    e9fa:	e9cd 262d 	strd	r2, r6, [sp, #180]	; 0xb4
    e9fe:	f8c9 7004 	str.w	r7, [r9, #4]
    ea02:	f300 83cc 	bgt.w	f19e <_svfprintf_r+0x1192>
    ea06:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    ea0a:	f109 0908 	add.w	r9, r9, #8
    ea0e:	e441      	b.n	e294 <_svfprintf_r+0x288>
    ea10:	465d      	mov	r5, fp
    ea12:	2a0a      	cmp	r2, #10
    ea14:	f171 0300 	sbcs.w	r3, r1, #0
    ea18:	f080 8329 	bcs.w	f06e <_svfprintf_r+0x1062>
    ea1c:	3230      	adds	r2, #48	; 0x30
    ea1e:	2301      	movs	r3, #1
    ea20:	f88d 215f 	strb.w	r2, [sp, #351]	; 0x15f
    ea24:	46ab      	mov	fp, r5
    ea26:	930a      	str	r3, [sp, #40]	; 0x28
    ea28:	f20d 145f 	addw	r4, sp, #351	; 0x15f
    ea2c:	e658      	b.n	e6e0 <_svfprintf_r+0x6d4>
    ea2e:	990c      	ldr	r1, [sp, #48]	; 0x30
    ea30:	931e      	str	r3, [sp, #120]	; 0x78
    ea32:	aa2c      	add	r2, sp, #176	; 0xb0
    ea34:	4650      	mov	r0, sl
    ea36:	f002 fb53 	bl	110e0 <__ssprint_r>
    ea3a:	2800      	cmp	r0, #0
    ea3c:	f47f af51 	bne.w	e8e2 <_svfprintf_r+0x8d6>
    ea40:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    ea42:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    ea44:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    ea48:	e436      	b.n	e2b8 <_svfprintf_r+0x2ac>
    ea4a:	bf00      	nop
    ea4c:	00013398 	.word	0x00013398
    ea50:	00014994 	.word	0x00014994
    ea54:	00014984 	.word	0x00014984
    ea58:	990c      	ldr	r1, [sp, #48]	; 0x30
    ea5a:	aa2c      	add	r2, sp, #176	; 0xb0
    ea5c:	4650      	mov	r0, sl
    ea5e:	f002 fb3f 	bl	110e0 <__ssprint_r>
    ea62:	2800      	cmp	r0, #0
    ea64:	f47f af3d 	bne.w	e8e2 <_svfprintf_r+0x8d6>
    ea68:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    ea6a:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    ea6e:	e435      	b.n	e2dc <_svfprintf_r+0x2d0>
    ea70:	2c10      	cmp	r4, #16
    ea72:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    ea74:	4db8      	ldr	r5, [pc, #736]	; (ed58 <_svfprintf_r+0xd4c>)
    ea76:	dd1f      	ble.n	eab8 <_svfprintf_r+0xaac>
    ea78:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    ea7c:	2710      	movs	r7, #16
    ea7e:	e004      	b.n	ea8a <_svfprintf_r+0xa7e>
    ea80:	3c10      	subs	r4, #16
    ea82:	2c10      	cmp	r4, #16
    ea84:	f109 0908 	add.w	r9, r9, #8
    ea88:	dd16      	ble.n	eab8 <_svfprintf_r+0xaac>
    ea8a:	3301      	adds	r3, #1
    ea8c:	3610      	adds	r6, #16
    ea8e:	2b07      	cmp	r3, #7
    ea90:	e9c9 5700 	strd	r5, r7, [r9]
    ea94:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    ea98:	ddf2      	ble.n	ea80 <_svfprintf_r+0xa74>
    ea9a:	aa2c      	add	r2, sp, #176	; 0xb0
    ea9c:	4659      	mov	r1, fp
    ea9e:	4650      	mov	r0, sl
    eaa0:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    eaa4:	f002 fb1c 	bl	110e0 <__ssprint_r>
    eaa8:	2800      	cmp	r0, #0
    eaaa:	f47f af1a 	bne.w	e8e2 <_svfprintf_r+0x8d6>
    eaae:	3c10      	subs	r4, #16
    eab0:	2c10      	cmp	r4, #16
    eab2:	e9dd 362d 	ldrd	r3, r6, [sp, #180]	; 0xb4
    eab6:	dce8      	bgt.n	ea8a <_svfprintf_r+0xa7e>
    eab8:	3301      	adds	r3, #1
    eaba:	4426      	add	r6, r4
    eabc:	2b07      	cmp	r3, #7
    eabe:	e9c9 5400 	strd	r5, r4, [r9]
    eac2:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    eac6:	f77f ac2f 	ble.w	e328 <_svfprintf_r+0x31c>
    eaca:	990c      	ldr	r1, [sp, #48]	; 0x30
    eacc:	aa2c      	add	r2, sp, #176	; 0xb0
    eace:	4650      	mov	r0, sl
    ead0:	f002 fb06 	bl	110e0 <__ssprint_r>
    ead4:	2800      	cmp	r0, #0
    ead6:	f47f af04 	bne.w	e8e2 <_svfprintf_r+0x8d6>
    eada:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    eadc:	e424      	b.n	e328 <_svfprintf_r+0x31c>
    eade:	9923      	ldr	r1, [sp, #140]	; 0x8c
    eae0:	2900      	cmp	r1, #0
    eae2:	f340 8327 	ble.w	f134 <_svfprintf_r+0x1128>
    eae6:	9d11      	ldr	r5, [sp, #68]	; 0x44
    eae8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    eaea:	429d      	cmp	r5, r3
    eaec:	bfa8      	it	ge
    eaee:	461d      	movge	r5, r3
    eaf0:	2d00      	cmp	r5, #0
    eaf2:	dd0b      	ble.n	eb0c <_svfprintf_r+0xb00>
    eaf4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    eaf6:	3301      	adds	r3, #1
    eaf8:	442e      	add	r6, r5
    eafa:	2b07      	cmp	r3, #7
    eafc:	e9c9 4500 	strd	r4, r5, [r9]
    eb00:	962e      	str	r6, [sp, #184]	; 0xb8
    eb02:	932d      	str	r3, [sp, #180]	; 0xb4
    eb04:	f300 86dd 	bgt.w	f8c2 <_svfprintf_r+0x18b6>
    eb08:	f109 0908 	add.w	r9, r9, #8
    eb0c:	9f11      	ldr	r7, [sp, #68]	; 0x44
    eb0e:	2d00      	cmp	r5, #0
    eb10:	bfa8      	it	ge
    eb12:	1b7f      	subge	r7, r7, r5
    eb14:	2f00      	cmp	r7, #0
    eb16:	f300 81f4 	bgt.w	ef02 <_svfprintf_r+0xef6>
    eb1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    eb1c:	f41b 6f80 	tst.w	fp, #1024	; 0x400
    eb20:	4423      	add	r3, r4
    eb22:	930a      	str	r3, [sp, #40]	; 0x28
    eb24:	f040 8214 	bne.w	ef50 <_svfprintf_r+0xf44>
    eb28:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    eb2a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    eb2c:	4293      	cmp	r3, r2
    eb2e:	db03      	blt.n	eb38 <_svfprintf_r+0xb2c>
    eb30:	f01b 0f01 	tst.w	fp, #1
    eb34:	f000 84a5 	beq.w	f482 <_svfprintf_r+0x1476>
    eb38:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    eb3a:	9919      	ldr	r1, [sp, #100]	; 0x64
    eb3c:	4416      	add	r6, r2
    eb3e:	e9c9 1200 	strd	r1, r2, [r9]
    eb42:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    eb44:	962e      	str	r6, [sp, #184]	; 0xb8
    eb46:	3201      	adds	r2, #1
    eb48:	2a07      	cmp	r2, #7
    eb4a:	922d      	str	r2, [sp, #180]	; 0xb4
    eb4c:	f300 86c6 	bgt.w	f8dc <_svfprintf_r+0x18d0>
    eb50:	f109 0908 	add.w	r9, r9, #8
    eb54:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    eb56:	18a5      	adds	r5, r4, r2
    eb58:	1ad4      	subs	r4, r2, r3
    eb5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    eb5c:	1aed      	subs	r5, r5, r3
    eb5e:	42a5      	cmp	r5, r4
    eb60:	bfa8      	it	ge
    eb62:	4625      	movge	r5, r4
    eb64:	2d00      	cmp	r5, #0
    eb66:	dd0d      	ble.n	eb84 <_svfprintf_r+0xb78>
    eb68:	f8c9 3000 	str.w	r3, [r9]
    eb6c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    eb6e:	f8c9 5004 	str.w	r5, [r9, #4]
    eb72:	3301      	adds	r3, #1
    eb74:	442e      	add	r6, r5
    eb76:	2b07      	cmp	r3, #7
    eb78:	962e      	str	r6, [sp, #184]	; 0xb8
    eb7a:	932d      	str	r3, [sp, #180]	; 0xb4
    eb7c:	f300 86be 	bgt.w	f8fc <_svfprintf_r+0x18f0>
    eb80:	f109 0908 	add.w	r9, r9, #8
    eb84:	2d00      	cmp	r5, #0
    eb86:	bfa8      	it	ge
    eb88:	1b64      	subge	r4, r4, r5
    eb8a:	2c00      	cmp	r4, #0
    eb8c:	f77f abc3 	ble.w	e316 <_svfprintf_r+0x30a>
    eb90:	2c10      	cmp	r4, #16
    eb92:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    eb94:	4d71      	ldr	r5, [pc, #452]	; (ed5c <_svfprintf_r+0xd50>)
    eb96:	f340 835c 	ble.w	f252 <_svfprintf_r+0x1246>
    eb9a:	4632      	mov	r2, r6
    eb9c:	2710      	movs	r7, #16
    eb9e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    eba0:	e005      	b.n	ebae <_svfprintf_r+0xba2>
    eba2:	f109 0908 	add.w	r9, r9, #8
    eba6:	3c10      	subs	r4, #16
    eba8:	2c10      	cmp	r4, #16
    ebaa:	f340 8351 	ble.w	f250 <_svfprintf_r+0x1244>
    ebae:	3301      	adds	r3, #1
    ebb0:	3210      	adds	r2, #16
    ebb2:	2b07      	cmp	r3, #7
    ebb4:	e9c9 5700 	strd	r5, r7, [r9]
    ebb8:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    ebbc:	ddf1      	ble.n	eba2 <_svfprintf_r+0xb96>
    ebbe:	aa2c      	add	r2, sp, #176	; 0xb0
    ebc0:	4631      	mov	r1, r6
    ebc2:	4650      	mov	r0, sl
    ebc4:	f002 fa8c 	bl	110e0 <__ssprint_r>
    ebc8:	2800      	cmp	r0, #0
    ebca:	f47f ae8a 	bne.w	e8e2 <_svfprintf_r+0x8d6>
    ebce:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    ebd2:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    ebd6:	e7e6      	b.n	eba6 <_svfprintf_r+0xb9a>
    ebd8:	f01b 0f01 	tst.w	fp, #1
    ebdc:	f47f ae8e 	bne.w	e8fc <_svfprintf_r+0x8f0>
    ebe0:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
    ebe2:	f8c9 4000 	str.w	r4, [r9]
    ebe6:	2301      	movs	r3, #1
    ebe8:	441f      	add	r7, r3
    ebea:	3601      	adds	r6, #1
    ebec:	2f07      	cmp	r7, #7
    ebee:	f8c9 3004 	str.w	r3, [r9, #4]
    ebf2:	962e      	str	r6, [sp, #184]	; 0xb8
    ebf4:	972d      	str	r7, [sp, #180]	; 0xb4
    ebf6:	f77f aeb4 	ble.w	e962 <_svfprintf_r+0x956>
    ebfa:	990c      	ldr	r1, [sp, #48]	; 0x30
    ebfc:	aa2c      	add	r2, sp, #176	; 0xb0
    ebfe:	4650      	mov	r0, sl
    ec00:	f002 fa6e 	bl	110e0 <__ssprint_r>
    ec04:	2800      	cmp	r0, #0
    ec06:	f47f ae6c 	bne.w	e8e2 <_svfprintf_r+0x8d6>
    ec0a:	e9dd 762d 	ldrd	r7, r6, [sp, #180]	; 0xb4
    ec0e:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    ec12:	e6a8      	b.n	e966 <_svfprintf_r+0x95a>
    ec14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ec16:	1e5c      	subs	r4, r3, #1
    ec18:	2c00      	cmp	r4, #0
    ec1a:	f77f aea4 	ble.w	e966 <_svfprintf_r+0x95a>
    ec1e:	2c10      	cmp	r4, #16
    ec20:	4d4e      	ldr	r5, [pc, #312]	; (ed5c <_svfprintf_r+0xd50>)
    ec22:	f340 834c 	ble.w	f2be <_svfprintf_r+0x12b2>
    ec26:	4632      	mov	r2, r6
    ec28:	2310      	movs	r3, #16
    ec2a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    ec2c:	e005      	b.n	ec3a <_svfprintf_r+0xc2e>
    ec2e:	f109 0908 	add.w	r9, r9, #8
    ec32:	3c10      	subs	r4, #16
    ec34:	2c10      	cmp	r4, #16
    ec36:	f340 8341 	ble.w	f2bc <_svfprintf_r+0x12b0>
    ec3a:	3701      	adds	r7, #1
    ec3c:	3210      	adds	r2, #16
    ec3e:	2f07      	cmp	r7, #7
    ec40:	e9c9 5300 	strd	r5, r3, [r9]
    ec44:	e9cd 722d 	strd	r7, r2, [sp, #180]	; 0xb4
    ec48:	ddf1      	ble.n	ec2e <_svfprintf_r+0xc22>
    ec4a:	aa2c      	add	r2, sp, #176	; 0xb0
    ec4c:	4631      	mov	r1, r6
    ec4e:	4650      	mov	r0, sl
    ec50:	f002 fa46 	bl	110e0 <__ssprint_r>
    ec54:	2800      	cmp	r0, #0
    ec56:	f47f ae44 	bne.w	e8e2 <_svfprintf_r+0x8d6>
    ec5a:	e9dd 722d 	ldrd	r7, r2, [sp, #180]	; 0xb4
    ec5e:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    ec62:	2310      	movs	r3, #16
    ec64:	e7e5      	b.n	ec32 <_svfprintf_r+0xc26>
    ec66:	990c      	ldr	r1, [sp, #48]	; 0x30
    ec68:	aa2c      	add	r2, sp, #176	; 0xb0
    ec6a:	4650      	mov	r0, sl
    ec6c:	f002 fa38 	bl	110e0 <__ssprint_r>
    ec70:	2800      	cmp	r0, #0
    ec72:	f47f ae36 	bne.w	e8e2 <_svfprintf_r+0x8d6>
    ec76:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    ec78:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    ec7c:	f7ff bb38 	b.w	e2f0 <_svfprintf_r+0x2e4>
    ec80:	f015 0310 	ands.w	r3, r5, #16
    ec84:	d160      	bne.n	ed48 <_svfprintf_r+0xd3c>
    ec86:	f015 0240 	ands.w	r2, r5, #64	; 0x40
    ec8a:	f000 8373 	beq.w	f374 <_svfprintf_r+0x1368>
    ec8e:	980e      	ldr	r0, [sp, #56]	; 0x38
    ec90:	f850 2b04 	ldr.w	r2, [r0], #4
    ec94:	900e      	str	r0, [sp, #56]	; 0x38
    ec96:	4619      	mov	r1, r3
    ec98:	b292      	uxth	r2, r2
    ec9a:	2301      	movs	r3, #1
    ec9c:	e45a      	b.n	e554 <_svfprintf_r+0x548>
    ec9e:	f01b 0310 	ands.w	r3, fp, #16
    eca2:	d168      	bne.n	ed76 <_svfprintf_r+0xd6a>
    eca4:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
    eca8:	f000 8356 	beq.w	f358 <_svfprintf_r+0x134c>
    ecac:	980e      	ldr	r0, [sp, #56]	; 0x38
    ecae:	f850 2b04 	ldr.w	r2, [r0], #4
    ecb2:	900e      	str	r0, [sp, #56]	; 0x38
    ecb4:	4619      	mov	r1, r3
    ecb6:	b292      	uxth	r2, r2
    ecb8:	e4af      	b.n	e61a <_svfprintf_r+0x60e>
    ecba:	4252      	negs	r2, r2
    ecbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    ecc0:	465d      	mov	r5, fp
    ecc2:	202d      	movs	r0, #45	; 0x2d
    ecc4:	2301      	movs	r3, #1
    ecc6:	e446      	b.n	e556 <_svfprintf_r+0x54a>
    ecc8:	990c      	ldr	r1, [sp, #48]	; 0x30
    ecca:	aa2c      	add	r2, sp, #176	; 0xb0
    eccc:	4650      	mov	r0, sl
    ecce:	f002 fa07 	bl	110e0 <__ssprint_r>
    ecd2:	2800      	cmp	r0, #0
    ecd4:	f47f ae05 	bne.w	e8e2 <_svfprintf_r+0x8d6>
    ecd8:	e9dd 762d 	ldrd	r7, r6, [sp, #180]	; 0xb4
    ecdc:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    ece0:	e61b      	b.n	e91a <_svfprintf_r+0x90e>
    ece2:	990c      	ldr	r1, [sp, #48]	; 0x30
    ece4:	aa2c      	add	r2, sp, #176	; 0xb0
    ece6:	4650      	mov	r0, sl
    ece8:	f002 f9fa 	bl	110e0 <__ssprint_r>
    ecec:	2800      	cmp	r0, #0
    ecee:	f47f adf8 	bne.w	e8e2 <_svfprintf_r+0x8d6>
    ecf2:	e9dd 762d 	ldrd	r7, r6, [sp, #180]	; 0xb4
    ecf6:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    ecfa:	e61b      	b.n	e934 <_svfprintf_r+0x928>
    ecfc:	f01b 0f01 	tst.w	fp, #1
    ed00:	f43f ab09 	beq.w	e316 <_svfprintf_r+0x30a>
    ed04:	e538      	b.n	e778 <_svfprintf_r+0x76c>
    ed06:	930e      	str	r3, [sp, #56]	; 0x38
    ed08:	f898 3000 	ldrb.w	r3, [r8]
    ed0c:	f7ff b9d7 	b.w	e0be <_svfprintf_r+0xb2>
    ed10:	ac58      	add	r4, sp, #352	; 0x160
    ed12:	e4e5      	b.n	e6e0 <_svfprintf_r+0x6d4>
    ed14:	f41b 7f00 	tst.w	fp, #512	; 0x200
    ed18:	f040 83bd 	bne.w	f496 <_svfprintf_r+0x148a>
    ed1c:	f853 2b04 	ldr.w	r2, [r3], #4
    ed20:	930e      	str	r3, [sp, #56]	; 0x38
    ed22:	17d1      	asrs	r1, r2, #31
    ed24:	460b      	mov	r3, r1
    ed26:	f7ff bbc4 	b.w	e4b2 <_svfprintf_r+0x4a6>
    ed2a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    ed2c:	2b00      	cmp	r3, #0
    ed2e:	f43f aa4b 	beq.w	e1c8 <_svfprintf_r+0x1bc>
    ed32:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    ed34:	781b      	ldrb	r3, [r3, #0]
    ed36:	2b00      	cmp	r3, #0
    ed38:	f43f aa46 	beq.w	e1c8 <_svfprintf_r+0x1bc>
    ed3c:	f898 3000 	ldrb.w	r3, [r8]
    ed40:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
    ed44:	f7ff b9bb 	b.w	e0be <_svfprintf_r+0xb2>
    ed48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ed4a:	f853 2b04 	ldr.w	r2, [r3], #4
    ed4e:	930e      	str	r3, [sp, #56]	; 0x38
    ed50:	2301      	movs	r3, #1
    ed52:	f7ff bbff 	b.w	e554 <_svfprintf_r+0x548>
    ed56:	bf00      	nop
    ed58:	00014984 	.word	0x00014984
    ed5c:	00014994 	.word	0x00014994
    ed60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ed62:	9809      	ldr	r0, [sp, #36]	; 0x24
    ed64:	f853 1b04 	ldr.w	r1, [r3], #4
    ed68:	930e      	str	r3, [sp, #56]	; 0x38
    ed6a:	17c2      	asrs	r2, r0, #31
    ed6c:	e9c1 0200 	strd	r0, r2, [r1]
    ed70:	4644      	mov	r4, r8
    ed72:	f7ff b979 	b.w	e068 <_svfprintf_r+0x5c>
    ed76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ed78:	f853 2b04 	ldr.w	r2, [r3], #4
    ed7c:	930e      	str	r3, [sp, #56]	; 0x38
    ed7e:	e44c      	b.n	e61a <_svfprintf_r+0x60e>
    ed80:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    ed84:	4602      	mov	r2, r0
    ed86:	460b      	mov	r3, r1
    ed88:	f7fd f894 	bl	beb4 <__aeabi_dcmpun>
    ed8c:	2800      	cmp	r0, #0
    ed8e:	f040 8675 	bne.w	fa7c <_svfprintf_r+0x1a70>
    ed92:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ed94:	2b61      	cmp	r3, #97	; 0x61
    ed96:	f000 855b 	beq.w	f850 <_svfprintf_r+0x1844>
    ed9a:	2b41      	cmp	r3, #65	; 0x41
    ed9c:	f000 85ac 	beq.w	f8f8 <_svfprintf_r+0x18ec>
    eda0:	9b08      	ldr	r3, [sp, #32]
    eda2:	3301      	adds	r3, #1
    eda4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    eda6:	f023 0320 	bic.w	r3, r3, #32
    edaa:	9307      	str	r3, [sp, #28]
    edac:	f000 8463 	beq.w	f676 <_svfprintf_r+0x166a>
    edb0:	2b47      	cmp	r3, #71	; 0x47
    edb2:	d104      	bne.n	edbe <_svfprintf_r+0xdb2>
    edb4:	9b08      	ldr	r3, [sp, #32]
    edb6:	2b00      	cmp	r3, #0
    edb8:	bf08      	it	eq
    edba:	2301      	moveq	r3, #1
    edbc:	9308      	str	r3, [sp, #32]
    edbe:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    edc2:	460a      	mov	r2, r1
    edc4:	2a00      	cmp	r2, #0
    edc6:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
    edca:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
    edce:	f2c0 85e1 	blt.w	f994 <_svfprintf_r+0x1988>
    edd2:	469b      	mov	fp, r3
    edd4:	2300      	movs	r3, #0
    edd6:	4616      	mov	r6, r2
    edd8:	931e      	str	r3, [sp, #120]	; 0x78
    edda:	4607      	mov	r7, r0
    eddc:	930d      	str	r3, [sp, #52]	; 0x34
    edde:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ede0:	3b41      	subs	r3, #65	; 0x41
    ede2:	2b25      	cmp	r3, #37	; 0x25
    ede4:	f200 8367 	bhi.w	f4b6 <_svfprintf_r+0x14aa>
    ede8:	e8df f013 	tbh	[pc, r3, lsl #1]
    edec:	03650452 	.word	0x03650452
    edf0:	03650365 	.word	0x03650365
    edf4:	044e0449 	.word	0x044e0449
    edf8:	03650365 	.word	0x03650365
    edfc:	03650365 	.word	0x03650365
    ee00:	03650365 	.word	0x03650365
    ee04:	03650365 	.word	0x03650365
    ee08:	03650365 	.word	0x03650365
    ee0c:	03650365 	.word	0x03650365
    ee10:	03650365 	.word	0x03650365
    ee14:	03650365 	.word	0x03650365
    ee18:	03650365 	.word	0x03650365
    ee1c:	03650365 	.word	0x03650365
    ee20:	03650365 	.word	0x03650365
    ee24:	03650365 	.word	0x03650365
    ee28:	03650365 	.word	0x03650365
    ee2c:	03650365 	.word	0x03650365
    ee30:	03650365 	.word	0x03650365
    ee34:	044e0449 	.word	0x044e0449
    ee38:	9310      	str	r3, [sp, #64]	; 0x40
    ee3a:	465d      	mov	r5, fp
    ee3c:	f7ff bbf4 	b.w	e628 <_svfprintf_r+0x61c>
    ee40:	9310      	str	r3, [sp, #64]	; 0x40
    ee42:	4bb7      	ldr	r3, [pc, #732]	; (f120 <_svfprintf_r+0x1114>)
    ee44:	9318      	str	r3, [sp, #96]	; 0x60
    ee46:	f01b 0120 	ands.w	r1, fp, #32
    ee4a:	f000 80fc 	beq.w	f046 <_svfprintf_r+0x103a>
    ee4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ee50:	3307      	adds	r3, #7
    ee52:	f023 0307 	bic.w	r3, r3, #7
    ee56:	6859      	ldr	r1, [r3, #4]
    ee58:	f853 2b08 	ldr.w	r2, [r3], #8
    ee5c:	930e      	str	r3, [sp, #56]	; 0x38
    ee5e:	f01b 0f01 	tst.w	fp, #1
    ee62:	d00a      	beq.n	ee7a <_svfprintf_r+0xe6e>
    ee64:	ea52 0301 	orrs.w	r3, r2, r1
    ee68:	d007      	beq.n	ee7a <_svfprintf_r+0xe6e>
    ee6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ee6c:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
    ee70:	2330      	movs	r3, #48	; 0x30
    ee72:	f04b 0b02 	orr.w	fp, fp, #2
    ee76:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
    ee7a:	f42b 6580 	bic.w	r5, fp, #1024	; 0x400
    ee7e:	2302      	movs	r3, #2
    ee80:	f7ff bb68 	b.w	e554 <_svfprintf_r+0x548>
    ee84:	9310      	str	r3, [sp, #64]	; 0x40
    ee86:	f7ff bbbc 	b.w	e602 <_svfprintf_r+0x5f6>
    ee8a:	9310      	str	r3, [sp, #64]	; 0x40
    ee8c:	4ba5      	ldr	r3, [pc, #660]	; (f124 <_svfprintf_r+0x1118>)
    ee8e:	9318      	str	r3, [sp, #96]	; 0x60
    ee90:	e7d9      	b.n	ee46 <_svfprintf_r+0xe3a>
    ee92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ee94:	2101      	movs	r1, #1
    ee96:	f853 2b04 	ldr.w	r2, [r3], #4
    ee9a:	9107      	str	r1, [sp, #28]
    ee9c:	f88d 20fc 	strb.w	r2, [sp, #252]	; 0xfc
    eea0:	930e      	str	r3, [sp, #56]	; 0x38
    eea2:	910a      	str	r1, [sp, #40]	; 0x28
    eea4:	ac3f      	add	r4, sp, #252	; 0xfc
    eea6:	f7ff babb 	b.w	e420 <_svfprintf_r+0x414>
    eeaa:	990c      	ldr	r1, [sp, #48]	; 0x30
    eeac:	aa2c      	add	r2, sp, #176	; 0xb0
    eeae:	4650      	mov	r0, sl
    eeb0:	f002 f916 	bl	110e0 <__ssprint_r>
    eeb4:	2800      	cmp	r0, #0
    eeb6:	f47f ad14 	bne.w	e8e2 <_svfprintf_r+0x8d6>
    eeba:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    eebc:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    eec0:	e468      	b.n	e794 <_svfprintf_r+0x788>
    eec2:	2140      	movs	r1, #64	; 0x40
    eec4:	4650      	mov	r0, sl
    eec6:	f7fd fb4d 	bl	c564 <_malloc_r>
    eeca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    eecc:	6018      	str	r0, [r3, #0]
    eece:	6118      	str	r0, [r3, #16]
    eed0:	2800      	cmp	r0, #0
    eed2:	f000 8660 	beq.w	fb96 <_svfprintf_r+0x1b8a>
    eed6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    eed8:	2340      	movs	r3, #64	; 0x40
    eeda:	6153      	str	r3, [r2, #20]
    eedc:	f7ff b8b2 	b.w	e044 <_svfprintf_r+0x38>
    eee0:	9b08      	ldr	r3, [sp, #32]
    eee2:	940d      	str	r4, [sp, #52]	; 0x34
    eee4:	2b06      	cmp	r3, #6
    eee6:	4621      	mov	r1, r4
    eee8:	bf28      	it	cs
    eeea:	2306      	movcs	r3, #6
    eeec:	9408      	str	r4, [sp, #32]
    eeee:	4622      	mov	r2, r4
    eef0:	9307      	str	r3, [sp, #28]
    eef2:	4c8d      	ldr	r4, [pc, #564]	; (f128 <_svfprintf_r+0x111c>)
    eef4:	970e      	str	r7, [sp, #56]	; 0x38
    eef6:	930a      	str	r3, [sp, #40]	; 0x28
    eef8:	9112      	str	r1, [sp, #72]	; 0x48
    eefa:	9116      	str	r1, [sp, #88]	; 0x58
    eefc:	9111      	str	r1, [sp, #68]	; 0x44
    eefe:	f7ff ba69 	b.w	e3d4 <_svfprintf_r+0x3c8>
    ef02:	2f10      	cmp	r7, #16
    ef04:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    ef06:	4d89      	ldr	r5, [pc, #548]	; (f12c <_svfprintf_r+0x1120>)
    ef08:	f340 8245 	ble.w	f396 <_svfprintf_r+0x138a>
    ef0c:	4632      	mov	r2, r6
    ef0e:	4626      	mov	r6, r4
    ef10:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    ef12:	e005      	b.n	ef20 <_svfprintf_r+0xf14>
    ef14:	f109 0908 	add.w	r9, r9, #8
    ef18:	3f10      	subs	r7, #16
    ef1a:	2f10      	cmp	r7, #16
    ef1c:	f340 8239 	ble.w	f392 <_svfprintf_r+0x1386>
    ef20:	3301      	adds	r3, #1
    ef22:	3210      	adds	r2, #16
    ef24:	2110      	movs	r1, #16
    ef26:	2b07      	cmp	r3, #7
    ef28:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    ef2c:	f8c9 5000 	str.w	r5, [r9]
    ef30:	f8c9 1004 	str.w	r1, [r9, #4]
    ef34:	ddee      	ble.n	ef14 <_svfprintf_r+0xf08>
    ef36:	aa2c      	add	r2, sp, #176	; 0xb0
    ef38:	4621      	mov	r1, r4
    ef3a:	4650      	mov	r0, sl
    ef3c:	f002 f8d0 	bl	110e0 <__ssprint_r>
    ef40:	2800      	cmp	r0, #0
    ef42:	f47f acce 	bne.w	e8e2 <_svfprintf_r+0x8d6>
    ef46:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    ef4a:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    ef4e:	e7e3      	b.n	ef18 <_svfprintf_r+0xf0c>
    ef50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ef52:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    ef54:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    ef58:	464a      	mov	r2, r9
    ef5a:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    ef5e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    ef62:	18e3      	adds	r3, r4, r3
    ef64:	9308      	str	r3, [sp, #32]
    ef66:	9f1a      	ldr	r7, [sp, #104]	; 0x68
    ef68:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
    ef6c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    ef70:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ef72:	9410      	str	r4, [sp, #64]	; 0x40
    ef74:	4631      	mov	r1, r6
    ef76:	f1b9 0f00 	cmp.w	r9, #0
    ef7a:	d02e      	beq.n	efda <_svfprintf_r+0xfce>
    ef7c:	bb83      	cbnz	r3, efe0 <_svfprintf_r+0xfd4>
    ef7e:	3f01      	subs	r7, #1
    ef80:	f109 39ff 	add.w	r9, r9, #4294967295
    ef84:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    ef86:	e9c2 3b00 	strd	r3, fp, [r2]
    ef8a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    ef8c:	3301      	adds	r3, #1
    ef8e:	4459      	add	r1, fp
    ef90:	2b07      	cmp	r3, #7
    ef92:	912e      	str	r1, [sp, #184]	; 0xb8
    ef94:	932d      	str	r3, [sp, #180]	; 0xb4
    ef96:	dc5f      	bgt.n	f058 <_svfprintf_r+0x104c>
    ef98:	3208      	adds	r2, #8
    ef9a:	9b08      	ldr	r3, [sp, #32]
    ef9c:	7838      	ldrb	r0, [r7, #0]
    ef9e:	1b5b      	subs	r3, r3, r5
    efa0:	4283      	cmp	r3, r0
    efa2:	bfa8      	it	ge
    efa4:	4603      	movge	r3, r0
    efa6:	2b00      	cmp	r3, #0
    efa8:	461e      	mov	r6, r3
    efaa:	dd0b      	ble.n	efc4 <_svfprintf_r+0xfb8>
    efac:	982d      	ldr	r0, [sp, #180]	; 0xb4
    efae:	3001      	adds	r0, #1
    efb0:	4419      	add	r1, r3
    efb2:	2807      	cmp	r0, #7
    efb4:	e9c2 5300 	strd	r5, r3, [r2]
    efb8:	912e      	str	r1, [sp, #184]	; 0xb8
    efba:	902d      	str	r0, [sp, #180]	; 0xb4
    efbc:	f300 8156 	bgt.w	f26c <_svfprintf_r+0x1260>
    efc0:	7838      	ldrb	r0, [r7, #0]
    efc2:	3208      	adds	r2, #8
    efc4:	2e00      	cmp	r6, #0
    efc6:	bfac      	ite	ge
    efc8:	1b84      	subge	r4, r0, r6
    efca:	4604      	movlt	r4, r0
    efcc:	2c00      	cmp	r4, #0
    efce:	dc0b      	bgt.n	efe8 <_svfprintf_r+0xfdc>
    efd0:	4405      	add	r5, r0
    efd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    efd4:	f1b9 0f00 	cmp.w	r9, #0
    efd8:	d1d0      	bne.n	ef7c <_svfprintf_r+0xf70>
    efda:	2b00      	cmp	r3, #0
    efdc:	f000 83d4 	beq.w	f788 <_svfprintf_r+0x177c>
    efe0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    efe2:	3b01      	subs	r3, #1
    efe4:	9312      	str	r3, [sp, #72]	; 0x48
    efe6:	e7cd      	b.n	ef84 <_svfprintf_r+0xf78>
    efe8:	2c10      	cmp	r4, #16
    efea:	982d      	ldr	r0, [sp, #180]	; 0xb4
    efec:	dd1d      	ble.n	f02a <_svfprintf_r+0x101e>
    efee:	2610      	movs	r6, #16
    eff0:	e004      	b.n	effc <_svfprintf_r+0xff0>
    eff2:	3c10      	subs	r4, #16
    eff4:	2c10      	cmp	r4, #16
    eff6:	f102 0208 	add.w	r2, r2, #8
    effa:	dd16      	ble.n	f02a <_svfprintf_r+0x101e>
    effc:	3001      	adds	r0, #1
    effe:	4b4b      	ldr	r3, [pc, #300]	; (f12c <_svfprintf_r+0x1120>)
    f000:	3110      	adds	r1, #16
    f002:	2807      	cmp	r0, #7
    f004:	e9c2 3600 	strd	r3, r6, [r2]
    f008:	e9cd 012d 	strd	r0, r1, [sp, #180]	; 0xb4
    f00c:	ddf1      	ble.n	eff2 <_svfprintf_r+0xfe6>
    f00e:	aa2c      	add	r2, sp, #176	; 0xb0
    f010:	4641      	mov	r1, r8
    f012:	4650      	mov	r0, sl
    f014:	f002 f864 	bl	110e0 <__ssprint_r>
    f018:	2800      	cmp	r0, #0
    f01a:	f47f ac62 	bne.w	e8e2 <_svfprintf_r+0x8d6>
    f01e:	3c10      	subs	r4, #16
    f020:	2c10      	cmp	r4, #16
    f022:	e9dd 012d 	ldrd	r0, r1, [sp, #180]	; 0xb4
    f026:	aa2f      	add	r2, sp, #188	; 0xbc
    f028:	dce8      	bgt.n	effc <_svfprintf_r+0xff0>
    f02a:	3001      	adds	r0, #1
    f02c:	4b3f      	ldr	r3, [pc, #252]	; (f12c <_svfprintf_r+0x1120>)
    f02e:	6054      	str	r4, [r2, #4]
    f030:	4421      	add	r1, r4
    f032:	2807      	cmp	r0, #7
    f034:	e9cd 012d 	strd	r0, r1, [sp, #180]	; 0xb4
    f038:	6013      	str	r3, [r2, #0]
    f03a:	f300 83fb 	bgt.w	f834 <_svfprintf_r+0x1828>
    f03e:	7838      	ldrb	r0, [r7, #0]
    f040:	3208      	adds	r2, #8
    f042:	4405      	add	r5, r0
    f044:	e7c5      	b.n	efd2 <_svfprintf_r+0xfc6>
    f046:	f01b 0310 	ands.w	r3, fp, #16
    f04a:	f000 80bc 	beq.w	f1c6 <_svfprintf_r+0x11ba>
    f04e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f050:	f853 2b04 	ldr.w	r2, [r3], #4
    f054:	930e      	str	r3, [sp, #56]	; 0x38
    f056:	e702      	b.n	ee5e <_svfprintf_r+0xe52>
    f058:	aa2c      	add	r2, sp, #176	; 0xb0
    f05a:	4641      	mov	r1, r8
    f05c:	4650      	mov	r0, sl
    f05e:	f002 f83f 	bl	110e0 <__ssprint_r>
    f062:	2800      	cmp	r0, #0
    f064:	f47f ac3d 	bne.w	e8e2 <_svfprintf_r+0x8d6>
    f068:	992e      	ldr	r1, [sp, #184]	; 0xb8
    f06a:	aa2f      	add	r2, sp, #188	; 0xbc
    f06c:	e795      	b.n	ef9a <_svfprintf_r+0xf8e>
    f06e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
    f072:	4b2f      	ldr	r3, [pc, #188]	; (f130 <_svfprintf_r+0x1124>)
    f074:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
    f078:	f8cd 801c 	str.w	r8, [sp, #28]
    f07c:	f405 6780 	and.w	r7, r5, #1024	; 0x400
    f080:	f04f 0c00 	mov.w	ip, #0
    f084:	ac58      	add	r4, sp, #352	; 0x160
    f086:	f04f 3bcc 	mov.w	fp, #3435973836	; 0xcccccccc
    f08a:	950a      	str	r5, [sp, #40]	; 0x28
    f08c:	e005      	b.n	f09a <_svfprintf_r+0x108e>
    f08e:	2a0a      	cmp	r2, #10
    f090:	f171 0100 	sbcs.w	r1, r1, #0
    f094:	d334      	bcc.n	f100 <_svfprintf_r+0x10f4>
    f096:	4642      	mov	r2, r8
    f098:	4631      	mov	r1, r6
    f09a:	1850      	adds	r0, r2, r1
    f09c:	f140 0000 	adc.w	r0, r0, #0
    f0a0:	fba3 5600 	umull	r5, r6, r3, r0
    f0a4:	f026 0503 	bic.w	r5, r6, #3
    f0a8:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    f0ac:	1b40      	subs	r0, r0, r5
    f0ae:	1a15      	subs	r5, r2, r0
    f0b0:	f161 0e00 	sbc.w	lr, r1, #0
    f0b4:	fb0b f605 	mul.w	r6, fp, r5
    f0b8:	fb03 660e 	mla	r6, r3, lr, r6
    f0bc:	fba5 8503 	umull	r8, r5, r5, r3
    f0c0:	442e      	add	r6, r5
    f0c2:	f008 0e01 	and.w	lr, r8, #1
    f0c6:	2505      	movs	r5, #5
    f0c8:	fbae 5e05 	umull	r5, lr, lr, r5
    f0cc:	182d      	adds	r5, r5, r0
    f0ce:	ea4f 0858 	mov.w	r8, r8, lsr #1
    f0d2:	3530      	adds	r5, #48	; 0x30
    f0d4:	f804 5c01 	strb.w	r5, [r4, #-1]
    f0d8:	ea48 78c6 	orr.w	r8, r8, r6, lsl #31
    f0dc:	f10c 0c01 	add.w	ip, ip, #1
    f0e0:	3c01      	subs	r4, #1
    f0e2:	0876      	lsrs	r6, r6, #1
    f0e4:	2f00      	cmp	r7, #0
    f0e6:	d0d2      	beq.n	f08e <_svfprintf_r+0x1082>
    f0e8:	f899 0000 	ldrb.w	r0, [r9]
    f0ec:	4584      	cmp	ip, r0
    f0ee:	d1ce      	bne.n	f08e <_svfprintf_r+0x1082>
    f0f0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    f0f4:	d0cb      	beq.n	f08e <_svfprintf_r+0x1082>
    f0f6:	2a0a      	cmp	r2, #10
    f0f8:	f171 0100 	sbcs.w	r1, r1, #0
    f0fc:	f080 8198 	bcs.w	f430 <_svfprintf_r+0x1424>
    f100:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    f102:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
    f106:	ab58      	add	r3, sp, #352	; 0x160
    f108:	1b1b      	subs	r3, r3, r4
    f10a:	f8dd 801c 	ldr.w	r8, [sp, #28]
    f10e:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    f112:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
    f116:	46ab      	mov	fp, r5
    f118:	930a      	str	r3, [sp, #40]	; 0x28
    f11a:	f7ff bae1 	b.w	e6e0 <_svfprintf_r+0x6d4>
    f11e:	bf00      	nop
    f120:	00014954 	.word	0x00014954
    f124:	00014968 	.word	0x00014968
    f128:	0001497c 	.word	0x0001497c
    f12c:	00014994 	.word	0x00014994
    f130:	cccccccd 	.word	0xcccccccd
    f134:	2301      	movs	r3, #1
    f136:	f8c9 3004 	str.w	r3, [r9, #4]
    f13a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f13c:	4aba      	ldr	r2, [pc, #744]	; (f428 <_svfprintf_r+0x141c>)
    f13e:	f8c9 2000 	str.w	r2, [r9]
    f142:	3301      	adds	r3, #1
    f144:	3601      	adds	r6, #1
    f146:	2b07      	cmp	r3, #7
    f148:	962e      	str	r6, [sp, #184]	; 0xb8
    f14a:	932d      	str	r3, [sp, #180]	; 0xb4
    f14c:	f300 818c 	bgt.w	f468 <_svfprintf_r+0x145c>
    f150:	f109 0908 	add.w	r9, r9, #8
    f154:	2900      	cmp	r1, #0
    f156:	f040 80be 	bne.w	f2d6 <_svfprintf_r+0x12ca>
    f15a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    f15c:	f00b 0301 	and.w	r3, fp, #1
    f160:	4313      	orrs	r3, r2
    f162:	f43f a8d8 	beq.w	e316 <_svfprintf_r+0x30a>
    f166:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    f168:	9919      	ldr	r1, [sp, #100]	; 0x64
    f16a:	199a      	adds	r2, r3, r6
    f16c:	e9c9 1300 	strd	r1, r3, [r9]
    f170:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f172:	922e      	str	r2, [sp, #184]	; 0xb8
    f174:	3301      	adds	r3, #1
    f176:	2b07      	cmp	r3, #7
    f178:	932d      	str	r3, [sp, #180]	; 0xb4
    f17a:	f300 826e 	bgt.w	f65a <_svfprintf_r+0x164e>
    f17e:	f109 0908 	add.w	r9, r9, #8
    f182:	9913      	ldr	r1, [sp, #76]	; 0x4c
    f184:	f8c9 4000 	str.w	r4, [r9]
    f188:	3301      	adds	r3, #1
    f18a:	188e      	adds	r6, r1, r2
    f18c:	2b07      	cmp	r3, #7
    f18e:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    f192:	f8c9 1004 	str.w	r1, [r9, #4]
    f196:	f77f a8bc 	ble.w	e312 <_svfprintf_r+0x306>
    f19a:	f7ff bbf1 	b.w	e980 <_svfprintf_r+0x974>
    f19e:	990c      	ldr	r1, [sp, #48]	; 0x30
    f1a0:	931e      	str	r3, [sp, #120]	; 0x78
    f1a2:	aa2c      	add	r2, sp, #176	; 0xb0
    f1a4:	4650      	mov	r0, sl
    f1a6:	f001 ff9b 	bl	110e0 <__ssprint_r>
    f1aa:	2800      	cmp	r0, #0
    f1ac:	f47f ab99 	bne.w	e8e2 <_svfprintf_r+0x8d6>
    f1b0:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    f1b4:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f1b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    f1b8:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f1bc:	f7ff b86a 	b.w	e294 <_svfprintf_r+0x288>
    f1c0:	46c2      	mov	sl, r8
    f1c2:	f7ff bb8e 	b.w	e8e2 <_svfprintf_r+0x8d6>
    f1c6:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
    f1ca:	f000 80b8 	beq.w	f33e <_svfprintf_r+0x1332>
    f1ce:	980e      	ldr	r0, [sp, #56]	; 0x38
    f1d0:	f850 2b04 	ldr.w	r2, [r0], #4
    f1d4:	900e      	str	r0, [sp, #56]	; 0x38
    f1d6:	4619      	mov	r1, r3
    f1d8:	b292      	uxth	r2, r2
    f1da:	e640      	b.n	ee5e <_svfprintf_r+0xe52>
    f1dc:	990c      	ldr	r1, [sp, #48]	; 0x30
    f1de:	aa2c      	add	r2, sp, #176	; 0xb0
    f1e0:	4650      	mov	r0, sl
    f1e2:	f001 ff7d 	bl	110e0 <__ssprint_r>
    f1e6:	2800      	cmp	r0, #0
    f1e8:	f47f ab7b 	bne.w	e8e2 <_svfprintf_r+0x8d6>
    f1ec:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f1ee:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f1f2:	f7ff babc 	b.w	e76e <_svfprintf_r+0x762>
    f1f6:	ae2a      	add	r6, sp, #168	; 0xa8
    f1f8:	2208      	movs	r2, #8
    f1fa:	2100      	movs	r1, #0
    f1fc:	4630      	mov	r0, r6
    f1fe:	9425      	str	r4, [sp, #148]	; 0x94
    f200:	f7fe f81e 	bl	d240 <memset>
    f204:	9b08      	ldr	r3, [sp, #32]
    f206:	1c5a      	adds	r2, r3, #1
    f208:	f000 80d4 	beq.w	f3b4 <_svfprintf_r+0x13a8>
    f20c:	2500      	movs	r5, #0
    f20e:	f8cd 801c 	str.w	r8, [sp, #28]
    f212:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
    f216:	46a8      	mov	r8, r5
    f218:	469b      	mov	fp, r3
    f21a:	e00c      	b.n	f236 <_svfprintf_r+0x122a>
    f21c:	a93f      	add	r1, sp, #252	; 0xfc
    f21e:	4650      	mov	r0, sl
    f220:	f001 ff16 	bl	11050 <_wcrtomb_r>
    f224:	1c43      	adds	r3, r0, #1
    f226:	4440      	add	r0, r8
    f228:	f000 83b8 	beq.w	f99c <_svfprintf_r+0x1990>
    f22c:	4558      	cmp	r0, fp
    f22e:	dc08      	bgt.n	f242 <_svfprintf_r+0x1236>
    f230:	f000 8435 	beq.w	fa9e <_svfprintf_r+0x1a92>
    f234:	4680      	mov	r8, r0
    f236:	9a25      	ldr	r2, [sp, #148]	; 0x94
    f238:	5952      	ldr	r2, [r2, r5]
    f23a:	4633      	mov	r3, r6
    f23c:	3504      	adds	r5, #4
    f23e:	2a00      	cmp	r2, #0
    f240:	d1ec      	bne.n	f21c <_svfprintf_r+0x1210>
    f242:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    f246:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    f24a:	f8dd 801c 	ldr.w	r8, [sp, #28]
    f24e:	e0be      	b.n	f3ce <_svfprintf_r+0x13c2>
    f250:	4616      	mov	r6, r2
    f252:	3301      	adds	r3, #1
    f254:	4426      	add	r6, r4
    f256:	2b07      	cmp	r3, #7
    f258:	f8c9 5000 	str.w	r5, [r9]
    f25c:	f8c9 4004 	str.w	r4, [r9, #4]
    f260:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    f264:	f77f a855 	ble.w	e312 <_svfprintf_r+0x306>
    f268:	f7ff bb8a 	b.w	e980 <_svfprintf_r+0x974>
    f26c:	aa2c      	add	r2, sp, #176	; 0xb0
    f26e:	4641      	mov	r1, r8
    f270:	4650      	mov	r0, sl
    f272:	f001 ff35 	bl	110e0 <__ssprint_r>
    f276:	2800      	cmp	r0, #0
    f278:	f47f ab33 	bne.w	e8e2 <_svfprintf_r+0x8d6>
    f27c:	7838      	ldrb	r0, [r7, #0]
    f27e:	992e      	ldr	r1, [sp, #184]	; 0xb8
    f280:	aa2f      	add	r2, sp, #188	; 0xbc
    f282:	e69f      	b.n	efc4 <_svfprintf_r+0xfb8>
    f284:	990c      	ldr	r1, [sp, #48]	; 0x30
    f286:	aa2c      	add	r2, sp, #176	; 0xb0
    f288:	4650      	mov	r0, sl
    f28a:	f001 ff29 	bl	110e0 <__ssprint_r>
    f28e:	2800      	cmp	r0, #0
    f290:	f47f ab27 	bne.w	e8e2 <_svfprintf_r+0x8d6>
    f294:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f296:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f29a:	f7ff b823 	b.w	e2e4 <_svfprintf_r+0x2d8>
    f29e:	2b01      	cmp	r3, #1
    f2a0:	465d      	mov	r5, fp
    f2a2:	f47f aa09 	bne.w	e6b8 <_svfprintf_r+0x6ac>
    f2a6:	f7ff bbb9 	b.w	ea1c <_svfprintf_r+0xa10>
    f2aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f2ac:	9909      	ldr	r1, [sp, #36]	; 0x24
    f2ae:	f853 2b04 	ldr.w	r2, [r3], #4
    f2b2:	4644      	mov	r4, r8
    f2b4:	6011      	str	r1, [r2, #0]
    f2b6:	930e      	str	r3, [sp, #56]	; 0x38
    f2b8:	f7fe bed6 	b.w	e068 <_svfprintf_r+0x5c>
    f2bc:	4616      	mov	r6, r2
    f2be:	3701      	adds	r7, #1
    f2c0:	4426      	add	r6, r4
    f2c2:	2f07      	cmp	r7, #7
    f2c4:	e9cd 762d 	strd	r7, r6, [sp, #180]	; 0xb4
    f2c8:	f8c9 5000 	str.w	r5, [r9]
    f2cc:	f8c9 4004 	str.w	r4, [r9, #4]
    f2d0:	f77f ab47 	ble.w	e962 <_svfprintf_r+0x956>
    f2d4:	e491      	b.n	ebfa <_svfprintf_r+0xbee>
    f2d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    f2d8:	9819      	ldr	r0, [sp, #100]	; 0x64
    f2da:	199a      	adds	r2, r3, r6
    f2dc:	e9c9 0300 	strd	r0, r3, [r9]
    f2e0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f2e2:	922e      	str	r2, [sp, #184]	; 0xb8
    f2e4:	3301      	adds	r3, #1
    f2e6:	2b07      	cmp	r3, #7
    f2e8:	932d      	str	r3, [sp, #180]	; 0xb4
    f2ea:	f300 81b6 	bgt.w	f65a <_svfprintf_r+0x164e>
    f2ee:	f109 0908 	add.w	r9, r9, #8
    f2f2:	2900      	cmp	r1, #0
    f2f4:	f6bf af45 	bge.w	f182 <_svfprintf_r+0x1176>
    f2f8:	424f      	negs	r7, r1
    f2fa:	3110      	adds	r1, #16
    f2fc:	4d4b      	ldr	r5, [pc, #300]	; (f42c <_svfprintf_r+0x1420>)
    f2fe:	f280 8388 	bge.w	fa12 <_svfprintf_r+0x1a06>
    f302:	4649      	mov	r1, r9
    f304:	2610      	movs	r6, #16
    f306:	46a1      	mov	r9, r4
    f308:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    f30a:	e004      	b.n	f316 <_svfprintf_r+0x130a>
    f30c:	3108      	adds	r1, #8
    f30e:	3f10      	subs	r7, #16
    f310:	2f10      	cmp	r7, #16
    f312:	f340 837c 	ble.w	fa0e <_svfprintf_r+0x1a02>
    f316:	3301      	adds	r3, #1
    f318:	3210      	adds	r2, #16
    f31a:	2b07      	cmp	r3, #7
    f31c:	e9c1 5600 	strd	r5, r6, [r1]
    f320:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    f324:	ddf2      	ble.n	f30c <_svfprintf_r+0x1300>
    f326:	aa2c      	add	r2, sp, #176	; 0xb0
    f328:	4621      	mov	r1, r4
    f32a:	4650      	mov	r0, sl
    f32c:	f001 fed8 	bl	110e0 <__ssprint_r>
    f330:	2800      	cmp	r0, #0
    f332:	f47f aad6 	bne.w	e8e2 <_svfprintf_r+0x8d6>
    f336:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    f33a:	a92f      	add	r1, sp, #188	; 0xbc
    f33c:	e7e7      	b.n	f30e <_svfprintf_r+0x1302>
    f33e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f340:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
    f344:	bf1a      	itte	ne
    f346:	4611      	movne	r1, r2
    f348:	f853 2b04 	ldrne.w	r2, [r3], #4
    f34c:	f853 2b04 	ldreq.w	r2, [r3], #4
    f350:	930e      	str	r3, [sp, #56]	; 0x38
    f352:	bf18      	it	ne
    f354:	b2d2      	uxtbne	r2, r2
    f356:	e582      	b.n	ee5e <_svfprintf_r+0xe52>
    f358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f35a:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
    f35e:	bf1a      	itte	ne
    f360:	4611      	movne	r1, r2
    f362:	f853 2b04 	ldrne.w	r2, [r3], #4
    f366:	f853 2b04 	ldreq.w	r2, [r3], #4
    f36a:	930e      	str	r3, [sp, #56]	; 0x38
    f36c:	bf18      	it	ne
    f36e:	b2d2      	uxtbne	r2, r2
    f370:	f7ff b953 	b.w	e61a <_svfprintf_r+0x60e>
    f374:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f376:	f415 7100 	ands.w	r1, r5, #512	; 0x200
    f37a:	bf1a      	itte	ne
    f37c:	4611      	movne	r1, r2
    f37e:	f853 2b04 	ldrne.w	r2, [r3], #4
    f382:	f853 2b04 	ldreq.w	r2, [r3], #4
    f386:	930e      	str	r3, [sp, #56]	; 0x38
    f388:	bf18      	it	ne
    f38a:	b2d2      	uxtbne	r2, r2
    f38c:	2301      	movs	r3, #1
    f38e:	f7ff b8e1 	b.w	e554 <_svfprintf_r+0x548>
    f392:	4634      	mov	r4, r6
    f394:	4616      	mov	r6, r2
    f396:	3301      	adds	r3, #1
    f398:	443e      	add	r6, r7
    f39a:	2b07      	cmp	r3, #7
    f39c:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    f3a0:	f8c9 5000 	str.w	r5, [r9]
    f3a4:	f8c9 7004 	str.w	r7, [r9, #4]
    f3a8:	f300 814a 	bgt.w	f640 <_svfprintf_r+0x1634>
    f3ac:	f109 0908 	add.w	r9, r9, #8
    f3b0:	f7ff bbb3 	b.w	eb1a <_svfprintf_r+0xb0e>
    f3b4:	2300      	movs	r3, #0
    f3b6:	4619      	mov	r1, r3
    f3b8:	9600      	str	r6, [sp, #0]
    f3ba:	aa25      	add	r2, sp, #148	; 0x94
    f3bc:	4650      	mov	r0, sl
    f3be:	f001 fe6d 	bl	1109c <_wcsrtombs_r>
    f3c2:	4603      	mov	r3, r0
    f3c4:	3301      	adds	r3, #1
    f3c6:	900a      	str	r0, [sp, #40]	; 0x28
    f3c8:	f000 82e8 	beq.w	f99c <_svfprintf_r+0x1990>
    f3cc:	9425      	str	r4, [sp, #148]	; 0x94
    f3ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f3d0:	2b00      	cmp	r3, #0
    f3d2:	d03d      	beq.n	f450 <_svfprintf_r+0x1444>
    f3d4:	2b63      	cmp	r3, #99	; 0x63
    f3d6:	f300 8129 	bgt.w	f62c <_svfprintf_r+0x1620>
    f3da:	2300      	movs	r3, #0
    f3dc:	930d      	str	r3, [sp, #52]	; 0x34
    f3de:	ac3f      	add	r4, sp, #252	; 0xfc
    f3e0:	2208      	movs	r2, #8
    f3e2:	2100      	movs	r1, #0
    f3e4:	4630      	mov	r0, r6
    f3e6:	f7fd ff2b 	bl	d240 <memset>
    f3ea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    f3ec:	9600      	str	r6, [sp, #0]
    f3ee:	462b      	mov	r3, r5
    f3f0:	aa25      	add	r2, sp, #148	; 0x94
    f3f2:	4621      	mov	r1, r4
    f3f4:	4650      	mov	r0, sl
    f3f6:	f001 fe51 	bl	1109c <_wcsrtombs_r>
    f3fa:	4285      	cmp	r5, r0
    f3fc:	f040 83c4 	bne.w	fb88 <_svfprintf_r+0x1b7c>
    f400:	990a      	ldr	r1, [sp, #40]	; 0x28
    f402:	970e      	str	r7, [sp, #56]	; 0x38
    f404:	2300      	movs	r3, #0
    f406:	5463      	strb	r3, [r4, r1]
    f408:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    f40c:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    f410:	9308      	str	r3, [sp, #32]
    f412:	9107      	str	r1, [sp, #28]
    f414:	9312      	str	r3, [sp, #72]	; 0x48
    f416:	9316      	str	r3, [sp, #88]	; 0x58
    f418:	9311      	str	r3, [sp, #68]	; 0x44
    f41a:	f7fe bfdb 	b.w	e3d4 <_svfprintf_r+0x3c8>
    f41e:	222d      	movs	r2, #45	; 0x2d
    f420:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
    f424:	f7fe bfc5 	b.w	e3b2 <_svfprintf_r+0x3a6>
    f428:	00013398 	.word	0x00013398
    f42c:	00014994 	.word	0x00014994
    f430:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    f432:	991c      	ldr	r1, [sp, #112]	; 0x70
    f434:	1ae4      	subs	r4, r4, r3
    f436:	461a      	mov	r2, r3
    f438:	4620      	mov	r0, r4
    f43a:	f7fd ff53 	bl	d2e4 <strncpy>
    f43e:	f899 2001 	ldrb.w	r2, [r9, #1]
    f442:	4ba5      	ldr	r3, [pc, #660]	; (f6d8 <_svfprintf_r+0x16cc>)
    f444:	b10a      	cbz	r2, f44a <_svfprintf_r+0x143e>
    f446:	f109 0901 	add.w	r9, r9, #1
    f44a:	f04f 0c00 	mov.w	ip, #0
    f44e:	e622      	b.n	f096 <_svfprintf_r+0x108a>
    f450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f452:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    f456:	970e      	str	r7, [sp, #56]	; 0x38
    f458:	e9cd 3307 	strd	r3, r3, [sp, #28]
    f45c:	9312      	str	r3, [sp, #72]	; 0x48
    f45e:	9316      	str	r3, [sp, #88]	; 0x58
    f460:	9311      	str	r3, [sp, #68]	; 0x44
    f462:	930d      	str	r3, [sp, #52]	; 0x34
    f464:	f7fe bfb6 	b.w	e3d4 <_svfprintf_r+0x3c8>
    f468:	990c      	ldr	r1, [sp, #48]	; 0x30
    f46a:	aa2c      	add	r2, sp, #176	; 0xb0
    f46c:	4650      	mov	r0, sl
    f46e:	f001 fe37 	bl	110e0 <__ssprint_r>
    f472:	2800      	cmp	r0, #0
    f474:	f47f aa35 	bne.w	e8e2 <_svfprintf_r+0x8d6>
    f478:	9923      	ldr	r1, [sp, #140]	; 0x8c
    f47a:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f47c:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f480:	e668      	b.n	f154 <_svfprintf_r+0x1148>
    f482:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    f484:	990a      	ldr	r1, [sp, #40]	; 0x28
    f486:	18a5      	adds	r5, r4, r2
    f488:	1a6d      	subs	r5, r5, r1
    f48a:	1ad4      	subs	r4, r2, r3
    f48c:	42a5      	cmp	r5, r4
    f48e:	bfa8      	it	ge
    f490:	4625      	movge	r5, r4
    f492:	f7ff bb77 	b.w	eb84 <_svfprintf_r+0xb78>
    f496:	f913 2b04 	ldrsb.w	r2, [r3], #4
    f49a:	930e      	str	r3, [sp, #56]	; 0x38
    f49c:	17d1      	asrs	r1, r2, #31
    f49e:	460b      	mov	r3, r1
    f4a0:	f7ff b807 	b.w	e4b2 <_svfprintf_r+0x4a6>
    f4a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f4a6:	9909      	ldr	r1, [sp, #36]	; 0x24
    f4a8:	f853 2b04 	ldr.w	r2, [r3], #4
    f4ac:	930e      	str	r3, [sp, #56]	; 0x38
    f4ae:	8011      	strh	r1, [r2, #0]
    f4b0:	4644      	mov	r4, r8
    f4b2:	f7fe bdd9 	b.w	e068 <_svfprintf_r+0x5c>
    f4b6:	9b08      	ldr	r3, [sp, #32]
    f4b8:	930a      	str	r3, [sp, #40]	; 0x28
    f4ba:	2302      	movs	r3, #2
    f4bc:	a92a      	add	r1, sp, #168	; 0xa8
    f4be:	9104      	str	r1, [sp, #16]
    f4c0:	a925      	add	r1, sp, #148	; 0x94
    f4c2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    f4c4:	9103      	str	r1, [sp, #12]
    f4c6:	a923      	add	r1, sp, #140	; 0x8c
    f4c8:	9300      	str	r3, [sp, #0]
    f4ca:	463a      	mov	r2, r7
    f4cc:	4633      	mov	r3, r6
    f4ce:	9501      	str	r5, [sp, #4]
    f4d0:	9102      	str	r1, [sp, #8]
    f4d2:	4650      	mov	r0, sl
    f4d4:	f000 fe60 	bl	10198 <_dtoa_r>
    f4d8:	9b07      	ldr	r3, [sp, #28]
    f4da:	2b47      	cmp	r3, #71	; 0x47
    f4dc:	4604      	mov	r4, r0
    f4de:	f000 81a3 	beq.w	f828 <_svfprintf_r+0x181c>
    f4e2:	2b46      	cmp	r3, #70	; 0x46
    f4e4:	4405      	add	r5, r0
    f4e6:	d105      	bne.n	f4f4 <_svfprintf_r+0x14e8>
    f4e8:	7803      	ldrb	r3, [r0, #0]
    f4ea:	2b30      	cmp	r3, #48	; 0x30
    f4ec:	f000 82b8 	beq.w	fa60 <_svfprintf_r+0x1a54>
    f4f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    f4f2:	441d      	add	r5, r3
    f4f4:	4638      	mov	r0, r7
    f4f6:	4631      	mov	r1, r6
    f4f8:	2200      	movs	r2, #0
    f4fa:	2300      	movs	r3, #0
    f4fc:	f7fc fca8 	bl	be50 <__aeabi_dcmpeq>
    f500:	2800      	cmp	r0, #0
    f502:	f000 8166 	beq.w	f7d2 <_svfprintf_r+0x17c6>
    f506:	462b      	mov	r3, r5
    f508:	1b1b      	subs	r3, r3, r4
    f50a:	9313      	str	r3, [sp, #76]	; 0x4c
    f50c:	9b07      	ldr	r3, [sp, #28]
    f50e:	2b47      	cmp	r3, #71	; 0x47
    f510:	f000 814a 	beq.w	f7a8 <_svfprintf_r+0x179c>
    f514:	9b07      	ldr	r3, [sp, #28]
    f516:	2b46      	cmp	r3, #70	; 0x46
    f518:	f000 8200 	beq.w	f91c <_svfprintf_r+0x1910>
    f51c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    f51e:	9311      	str	r3, [sp, #68]	; 0x44
    f520:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f522:	9a07      	ldr	r2, [sp, #28]
    f524:	3b01      	subs	r3, #1
    f526:	2a41      	cmp	r2, #65	; 0x41
    f528:	9323      	str	r3, [sp, #140]	; 0x8c
    f52a:	f000 8223 	beq.w	f974 <_svfprintf_r+0x1968>
    f52e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    f532:	2100      	movs	r1, #0
    f534:	2b00      	cmp	r3, #0
    f536:	bfb8      	it	lt
    f538:	9b11      	ldrlt	r3, [sp, #68]	; 0x44
    f53a:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
    f53e:	bfba      	itte	lt
    f540:	f1c3 0301 	rsblt	r3, r3, #1
    f544:	222d      	movlt	r2, #45	; 0x2d
    f546:	222b      	movge	r2, #43	; 0x2b
    f548:	2b09      	cmp	r3, #9
    f54a:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
    f54e:	f340 824f 	ble.w	f9f0 <_svfprintf_r+0x19e4>
    f552:	f10d 05af 	add.w	r5, sp, #175	; 0xaf
    f556:	4e61      	ldr	r6, [pc, #388]	; (f6dc <_svfprintf_r+0x16d0>)
    f558:	462a      	mov	r2, r5
    f55a:	4610      	mov	r0, r2
    f55c:	fb86 2103 	smull	r2, r1, r6, r3
    f560:	17da      	asrs	r2, r3, #31
    f562:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    f566:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    f56a:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    f56e:	3130      	adds	r1, #48	; 0x30
    f570:	f800 1c01 	strb.w	r1, [r0, #-1]
    f574:	4619      	mov	r1, r3
    f576:	2963      	cmp	r1, #99	; 0x63
    f578:	4613      	mov	r3, r2
    f57a:	f100 32ff 	add.w	r2, r0, #4294967295
    f57e:	dcec      	bgt.n	f55a <_svfprintf_r+0x154e>
    f580:	3330      	adds	r3, #48	; 0x30
    f582:	b2d9      	uxtb	r1, r3
    f584:	1e83      	subs	r3, r0, #2
    f586:	429d      	cmp	r5, r3
    f588:	f802 1c01 	strb.w	r1, [r2, #-1]
    f58c:	f240 82e9 	bls.w	fb62 <_svfprintf_r+0x1b56>
    f590:	4613      	mov	r3, r2
    f592:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
    f596:	e001      	b.n	f59c <_svfprintf_r+0x1590>
    f598:	f813 1b01 	ldrb.w	r1, [r3], #1
    f59c:	f802 1b01 	strb.w	r1, [r2], #1
    f5a0:	429d      	cmp	r5, r3
    f5a2:	d1f9      	bne.n	f598 <_svfprintf_r+0x158c>
    f5a4:	f10d 03b1 	add.w	r3, sp, #177	; 0xb1
    f5a8:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
    f5ac:	1a1b      	subs	r3, r3, r0
    f5ae:	4413      	add	r3, r2
    f5b0:	aa26      	add	r2, sp, #152	; 0x98
    f5b2:	1a9b      	subs	r3, r3, r2
    f5b4:	931b      	str	r3, [sp, #108]	; 0x6c
    f5b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f5b8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    f5ba:	2b01      	cmp	r3, #1
    f5bc:	441a      	add	r2, r3
    f5be:	920a      	str	r2, [sp, #40]	; 0x28
    f5c0:	f340 8249 	ble.w	fa56 <_svfprintf_r+0x1a4a>
    f5c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f5c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    f5c8:	4413      	add	r3, r2
    f5ca:	930a      	str	r3, [sp, #40]	; 0x28
    f5cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f5ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f5d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    f5d4:	f443 7b80 	orr.w	fp, r3, #256	; 0x100
    f5d8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    f5dc:	2300      	movs	r3, #0
    f5de:	9312      	str	r3, [sp, #72]	; 0x48
    f5e0:	9207      	str	r2, [sp, #28]
    f5e2:	9316      	str	r3, [sp, #88]	; 0x58
    f5e4:	9311      	str	r3, [sp, #68]	; 0x44
    f5e6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    f5e8:	2b00      	cmp	r3, #0
    f5ea:	f040 80eb 	bne.w	f7c4 <_svfprintf_r+0x17b8>
    f5ee:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    f5f2:	9308      	str	r3, [sp, #32]
    f5f4:	f7fe beee 	b.w	e3d4 <_svfprintf_r+0x3c8>
    f5f8:	4620      	mov	r0, r4
    f5fa:	970e      	str	r7, [sp, #56]	; 0x38
    f5fc:	f7fd ff60 	bl	d4c0 <strlen>
    f600:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f602:	9308      	str	r3, [sp, #32]
    f604:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
    f608:	9312      	str	r3, [sp, #72]	; 0x48
    f60a:	9316      	str	r3, [sp, #88]	; 0x58
    f60c:	930d      	str	r3, [sp, #52]	; 0x34
    f60e:	2373      	movs	r3, #115	; 0x73
    f610:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    f614:	900a      	str	r0, [sp, #40]	; 0x28
    f616:	9107      	str	r1, [sp, #28]
    f618:	9310      	str	r3, [sp, #64]	; 0x40
    f61a:	f7fe bedb 	b.w	e3d4 <_svfprintf_r+0x3c8>
    f61e:	990c      	ldr	r1, [sp, #48]	; 0x30
    f620:	aa2c      	add	r2, sp, #176	; 0xb0
    f622:	4650      	mov	r0, sl
    f624:	f001 fd5c 	bl	110e0 <__ssprint_r>
    f628:	f7fe bdf8 	b.w	e21c <_svfprintf_r+0x210>
    f62c:	1c59      	adds	r1, r3, #1
    f62e:	4650      	mov	r0, sl
    f630:	f7fc ff98 	bl	c564 <_malloc_r>
    f634:	4604      	mov	r4, r0
    f636:	2800      	cmp	r0, #0
    f638:	f000 81b0 	beq.w	f99c <_svfprintf_r+0x1990>
    f63c:	900d      	str	r0, [sp, #52]	; 0x34
    f63e:	e6cf      	b.n	f3e0 <_svfprintf_r+0x13d4>
    f640:	990c      	ldr	r1, [sp, #48]	; 0x30
    f642:	aa2c      	add	r2, sp, #176	; 0xb0
    f644:	4650      	mov	r0, sl
    f646:	f001 fd4b 	bl	110e0 <__ssprint_r>
    f64a:	2800      	cmp	r0, #0
    f64c:	f47f a949 	bne.w	e8e2 <_svfprintf_r+0x8d6>
    f650:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f652:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f656:	f7ff ba60 	b.w	eb1a <_svfprintf_r+0xb0e>
    f65a:	990c      	ldr	r1, [sp, #48]	; 0x30
    f65c:	aa2c      	add	r2, sp, #176	; 0xb0
    f65e:	4650      	mov	r0, sl
    f660:	f001 fd3e 	bl	110e0 <__ssprint_r>
    f664:	2800      	cmp	r0, #0
    f666:	f47f a93c 	bne.w	e8e2 <_svfprintf_r+0x8d6>
    f66a:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    f66e:	9923      	ldr	r1, [sp, #140]	; 0x8c
    f670:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f674:	e63d      	b.n	f2f2 <_svfprintf_r+0x12e6>
    f676:	2306      	movs	r3, #6
    f678:	9308      	str	r3, [sp, #32]
    f67a:	f7ff bba0 	b.w	edbe <_svfprintf_r+0xdb2>
    f67e:	9b08      	ldr	r3, [sp, #32]
    f680:	3301      	adds	r3, #1
    f682:	930a      	str	r3, [sp, #40]	; 0x28
    f684:	2302      	movs	r3, #2
    f686:	e719      	b.n	f4bc <_svfprintf_r+0x14b0>
    f688:	9b08      	ldr	r3, [sp, #32]
    f68a:	930a      	str	r3, [sp, #40]	; 0x28
    f68c:	2303      	movs	r3, #3
    f68e:	e715      	b.n	f4bc <_svfprintf_r+0x14b0>
    f690:	4638      	mov	r0, r7
    f692:	4631      	mov	r1, r6
    f694:	aa23      	add	r2, sp, #140	; 0x8c
    f696:	f000 fc13 	bl	fec0 <frexp>
    f69a:	2200      	movs	r2, #0
    f69c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    f6a0:	f003 f9ba 	bl	12a18 <__aeabi_dmul>
    f6a4:	2200      	movs	r2, #0
    f6a6:	2300      	movs	r3, #0
    f6a8:	4606      	mov	r6, r0
    f6aa:	460f      	mov	r7, r1
    f6ac:	f7fc fbd0 	bl	be50 <__aeabi_dcmpeq>
    f6b0:	b108      	cbz	r0, f6b6 <_svfprintf_r+0x16aa>
    f6b2:	2301      	movs	r3, #1
    f6b4:	9323      	str	r3, [sp, #140]	; 0x8c
    f6b6:	4b0a      	ldr	r3, [pc, #40]	; (f6e0 <_svfprintf_r+0x16d4>)
    f6b8:	930a      	str	r3, [sp, #40]	; 0x28
    f6ba:	9b08      	ldr	r3, [sp, #32]
    f6bc:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
    f6c0:	3b01      	subs	r3, #1
    f6c2:	e9cd 8b11 	strd	r8, fp, [sp, #68]	; 0x44
    f6c6:	4625      	mov	r5, r4
    f6c8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    f6cc:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
    f6d0:	4698      	mov	r8, r3
    f6d2:	941f      	str	r4, [sp, #124]	; 0x7c
    f6d4:	e00d      	b.n	f6f2 <_svfprintf_r+0x16e6>
    f6d6:	bf00      	nop
    f6d8:	cccccccd 	.word	0xcccccccd
    f6dc:	66666667 	.word	0x66666667
    f6e0:	00014968 	.word	0x00014968
    f6e4:	2200      	movs	r2, #0
    f6e6:	2300      	movs	r3, #0
    f6e8:	f108 38ff 	add.w	r8, r8, #4294967295
    f6ec:	f7fc fbb0 	bl	be50 <__aeabi_dcmpeq>
    f6f0:	b9e8      	cbnz	r0, f72e <_svfprintf_r+0x1722>
    f6f2:	4bae      	ldr	r3, [pc, #696]	; (f9ac <_svfprintf_r+0x19a0>)
    f6f4:	2200      	movs	r2, #0
    f6f6:	4630      	mov	r0, r6
    f6f8:	4639      	mov	r1, r7
    f6fa:	f003 f98d 	bl	12a18 <__aeabi_dmul>
    f6fe:	460f      	mov	r7, r1
    f700:	4606      	mov	r6, r0
    f702:	f003 fb9b 	bl	12e3c <__aeabi_d2iz>
    f706:	4604      	mov	r4, r0
    f708:	f7fc fae2 	bl	bcd0 <__aeabi_i2d>
    f70c:	460b      	mov	r3, r1
    f70e:	4602      	mov	r2, r0
    f710:	4639      	mov	r1, r7
    f712:	4630      	mov	r0, r6
    f714:	f7fc f98e 	bl	ba34 <__aeabi_dsub>
    f718:	f81b 3004 	ldrb.w	r3, [fp, r4]
    f71c:	f1b8 3fff 	cmp.w	r8, #4294967295
    f720:	46aa      	mov	sl, r5
    f722:	46c1      	mov	r9, r8
    f724:	f805 3b01 	strb.w	r3, [r5], #1
    f728:	4606      	mov	r6, r0
    f72a:	460f      	mov	r7, r1
    f72c:	d1da      	bne.n	f6e4 <_svfprintf_r+0x16d8>
    f72e:	4ba0      	ldr	r3, [pc, #640]	; (f9b0 <_svfprintf_r+0x19a4>)
    f730:	2200      	movs	r2, #0
    f732:	4630      	mov	r0, r6
    f734:	4639      	mov	r1, r7
    f736:	e9dd 8b11 	ldrd	r8, fp, [sp, #68]	; 0x44
    f73a:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
    f73e:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
    f742:	e9cd a412 	strd	sl, r4, [sp, #72]	; 0x48
    f746:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
    f74a:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
    f74c:	f7fc fba8 	bl	bea0 <__aeabi_dcmpgt>
    f750:	2800      	cmp	r0, #0
    f752:	f040 8131 	bne.w	f9b8 <_svfprintf_r+0x19ac>
    f756:	4b96      	ldr	r3, [pc, #600]	; (f9b0 <_svfprintf_r+0x19a4>)
    f758:	4630      	mov	r0, r6
    f75a:	4639      	mov	r1, r7
    f75c:	2200      	movs	r2, #0
    f75e:	f7fc fb77 	bl	be50 <__aeabi_dcmpeq>
    f762:	b118      	cbz	r0, f76c <_svfprintf_r+0x1760>
    f764:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f766:	07de      	lsls	r6, r3, #31
    f768:	f100 8126 	bmi.w	f9b8 <_svfprintf_r+0x19ac>
    f76c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f76e:	2b00      	cmp	r3, #0
    f770:	db07      	blt.n	f782 <_svfprintf_r+0x1776>
    f772:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f774:	3301      	adds	r3, #1
    f776:	442b      	add	r3, r5
    f778:	2230      	movs	r2, #48	; 0x30
    f77a:	f805 2b01 	strb.w	r2, [r5], #1
    f77e:	42ab      	cmp	r3, r5
    f780:	d1fb      	bne.n	f77a <_svfprintf_r+0x176e>
    f782:	1b2b      	subs	r3, r5, r4
    f784:	9313      	str	r3, [sp, #76]	; 0x4c
    f786:	e6c1      	b.n	f50c <_svfprintf_r+0x1500>
    f788:	9c10      	ldr	r4, [sp, #64]	; 0x40
    f78a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f78c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    f790:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    f794:	971a      	str	r7, [sp, #104]	; 0x68
    f796:	18e3      	adds	r3, r4, r3
    f798:	429d      	cmp	r5, r3
    f79a:	bf28      	it	cs
    f79c:	461d      	movcs	r5, r3
    f79e:	4691      	mov	r9, r2
    f7a0:	460e      	mov	r6, r1
    f7a2:	950a      	str	r5, [sp, #40]	; 0x28
    f7a4:	f7ff b9c0 	b.w	eb28 <_svfprintf_r+0xb1c>
    f7a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    f7aa:	9311      	str	r3, [sp, #68]	; 0x44
    f7ac:	1cdd      	adds	r5, r3, #3
    f7ae:	db02      	blt.n	f7b6 <_svfprintf_r+0x17aa>
    f7b0:	9a08      	ldr	r2, [sp, #32]
    f7b2:	4293      	cmp	r3, r2
    f7b4:	dd19      	ble.n	f7ea <_svfprintf_r+0x17de>
    f7b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f7b8:	3b02      	subs	r3, #2
    f7ba:	9310      	str	r3, [sp, #64]	; 0x40
    f7bc:	f023 0320 	bic.w	r3, r3, #32
    f7c0:	9307      	str	r3, [sp, #28]
    f7c2:	e6ad      	b.n	f520 <_svfprintf_r+0x1514>
    f7c4:	222d      	movs	r2, #45	; 0x2d
    f7c6:	2300      	movs	r3, #0
    f7c8:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
    f7cc:	9308      	str	r3, [sp, #32]
    f7ce:	f7fe be04 	b.w	e3da <_svfprintf_r+0x3ce>
    f7d2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    f7d4:	42ab      	cmp	r3, r5
    f7d6:	f4bf ae97 	bcs.w	f508 <_svfprintf_r+0x14fc>
    f7da:	2130      	movs	r1, #48	; 0x30
    f7dc:	1c5a      	adds	r2, r3, #1
    f7de:	922a      	str	r2, [sp, #168]	; 0xa8
    f7e0:	7019      	strb	r1, [r3, #0]
    f7e2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    f7e4:	429d      	cmp	r5, r3
    f7e6:	d8f9      	bhi.n	f7dc <_svfprintf_r+0x17d0>
    f7e8:	e68e      	b.n	f508 <_svfprintf_r+0x14fc>
    f7ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f7ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    f7ee:	4293      	cmp	r3, r2
    f7f0:	f2c0 80c5 	blt.w	f97e <_svfprintf_r+0x1972>
    f7f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f7f6:	f013 0f01 	tst.w	r3, #1
    f7fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f7fc:	f000 814d 	beq.w	fa9a <_svfprintf_r+0x1a8e>
    f800:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    f802:	4413      	add	r3, r2
    f804:	930a      	str	r3, [sp, #40]	; 0x28
    f806:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f808:	0559      	lsls	r1, r3, #21
    f80a:	d503      	bpl.n	f814 <_svfprintf_r+0x1808>
    f80c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f80e:	2b00      	cmp	r3, #0
    f810:	f300 8156 	bgt.w	fac0 <_svfprintf_r+0x1ab4>
    f814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f816:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f81a:	9307      	str	r3, [sp, #28]
    f81c:	2367      	movs	r3, #103	; 0x67
    f81e:	9310      	str	r3, [sp, #64]	; 0x40
    f820:	2300      	movs	r3, #0
    f822:	9312      	str	r3, [sp, #72]	; 0x48
    f824:	9316      	str	r3, [sp, #88]	; 0x58
    f826:	e6de      	b.n	f5e6 <_svfprintf_r+0x15da>
    f828:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f82a:	07db      	lsls	r3, r3, #31
    f82c:	f100 809f 	bmi.w	f96e <_svfprintf_r+0x1962>
    f830:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    f832:	e669      	b.n	f508 <_svfprintf_r+0x14fc>
    f834:	aa2c      	add	r2, sp, #176	; 0xb0
    f836:	4641      	mov	r1, r8
    f838:	4650      	mov	r0, sl
    f83a:	f001 fc51 	bl	110e0 <__ssprint_r>
    f83e:	2800      	cmp	r0, #0
    f840:	f47f a84f 	bne.w	e8e2 <_svfprintf_r+0x8d6>
    f844:	7838      	ldrb	r0, [r7, #0]
    f846:	992e      	ldr	r1, [sp, #184]	; 0xb8
    f848:	aa2f      	add	r2, sp, #188	; 0xbc
    f84a:	4405      	add	r5, r0
    f84c:	f7ff bbc1 	b.w	efd2 <_svfprintf_r+0xfc6>
    f850:	2378      	movs	r3, #120	; 0x78
    f852:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
    f856:	2330      	movs	r3, #48	; 0x30
    f858:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
    f85c:	f04b 0302 	orr.w	r3, fp, #2
    f860:	930f      	str	r3, [sp, #60]	; 0x3c
    f862:	9b08      	ldr	r3, [sp, #32]
    f864:	2b63      	cmp	r3, #99	; 0x63
    f866:	f300 80ed 	bgt.w	fa44 <_svfprintf_r+0x1a38>
    f86a:	2300      	movs	r3, #0
    f86c:	930d      	str	r3, [sp, #52]	; 0x34
    f86e:	ac3f      	add	r4, sp, #252	; 0xfc
    f870:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
    f874:	4613      	mov	r3, r2
    f876:	2b00      	cmp	r3, #0
    f878:	f44b 7b81 	orr.w	fp, fp, #258	; 0x102
    f87c:	db67      	blt.n	f94e <_svfprintf_r+0x1942>
    f87e:	461e      	mov	r6, r3
    f880:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f882:	f023 0320 	bic.w	r3, r3, #32
    f886:	9307      	str	r3, [sp, #28]
    f888:	2300      	movs	r3, #0
    f88a:	460f      	mov	r7, r1
    f88c:	931e      	str	r3, [sp, #120]	; 0x78
    f88e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f890:	2b61      	cmp	r3, #97	; 0x61
    f892:	f47f aaa4 	bne.w	edde <_svfprintf_r+0xdd2>
    f896:	4638      	mov	r0, r7
    f898:	4631      	mov	r1, r6
    f89a:	aa23      	add	r2, sp, #140	; 0x8c
    f89c:	f000 fb10 	bl	fec0 <frexp>
    f8a0:	2200      	movs	r2, #0
    f8a2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    f8a6:	f003 f8b7 	bl	12a18 <__aeabi_dmul>
    f8aa:	2200      	movs	r2, #0
    f8ac:	2300      	movs	r3, #0
    f8ae:	4606      	mov	r6, r0
    f8b0:	460f      	mov	r7, r1
    f8b2:	f7fc facd 	bl	be50 <__aeabi_dcmpeq>
    f8b6:	b108      	cbz	r0, f8bc <_svfprintf_r+0x18b0>
    f8b8:	2301      	movs	r3, #1
    f8ba:	9323      	str	r3, [sp, #140]	; 0x8c
    f8bc:	4b3d      	ldr	r3, [pc, #244]	; (f9b4 <_svfprintf_r+0x19a8>)
    f8be:	930a      	str	r3, [sp, #40]	; 0x28
    f8c0:	e6fb      	b.n	f6ba <_svfprintf_r+0x16ae>
    f8c2:	990c      	ldr	r1, [sp, #48]	; 0x30
    f8c4:	aa2c      	add	r2, sp, #176	; 0xb0
    f8c6:	4650      	mov	r0, sl
    f8c8:	f001 fc0a 	bl	110e0 <__ssprint_r>
    f8cc:	2800      	cmp	r0, #0
    f8ce:	f47f a808 	bne.w	e8e2 <_svfprintf_r+0x8d6>
    f8d2:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f8d4:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f8d8:	f7ff b918 	b.w	eb0c <_svfprintf_r+0xb00>
    f8dc:	990c      	ldr	r1, [sp, #48]	; 0x30
    f8de:	aa2c      	add	r2, sp, #176	; 0xb0
    f8e0:	4650      	mov	r0, sl
    f8e2:	f001 fbfd 	bl	110e0 <__ssprint_r>
    f8e6:	2800      	cmp	r0, #0
    f8e8:	f47e affb 	bne.w	e8e2 <_svfprintf_r+0x8d6>
    f8ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    f8ee:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f8f0:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f8f4:	f7ff b92e 	b.w	eb54 <_svfprintf_r+0xb48>
    f8f8:	2358      	movs	r3, #88	; 0x58
    f8fa:	e7aa      	b.n	f852 <_svfprintf_r+0x1846>
    f8fc:	990c      	ldr	r1, [sp, #48]	; 0x30
    f8fe:	aa2c      	add	r2, sp, #176	; 0xb0
    f900:	4650      	mov	r0, sl
    f902:	f001 fbed 	bl	110e0 <__ssprint_r>
    f906:	2800      	cmp	r0, #0
    f908:	f47e afeb 	bne.w	e8e2 <_svfprintf_r+0x8d6>
    f90c:	9c23      	ldr	r4, [sp, #140]	; 0x8c
    f90e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f910:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f912:	1b1c      	subs	r4, r3, r4
    f914:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f918:	f7ff b934 	b.w	eb84 <_svfprintf_r+0xb78>
    f91c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    f91e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f920:	9211      	str	r2, [sp, #68]	; 0x44
    f922:	2a00      	cmp	r2, #0
    f924:	f003 0301 	and.w	r3, r3, #1
    f928:	f340 8108 	ble.w	fb3c <_svfprintf_r+0x1b30>
    f92c:	9908      	ldr	r1, [sp, #32]
    f92e:	430b      	orrs	r3, r1
    f930:	f040 80fd 	bne.w	fb2e <_svfprintf_r+0x1b22>
    f934:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f936:	930a      	str	r3, [sp, #40]	; 0x28
    f938:	2366      	movs	r3, #102	; 0x66
    f93a:	9310      	str	r3, [sp, #64]	; 0x40
    f93c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f93e:	055a      	lsls	r2, r3, #21
    f940:	f100 80c0 	bmi.w	fac4 <_svfprintf_r+0x1ab8>
    f944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f946:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f94a:	9307      	str	r3, [sp, #28]
    f94c:	e768      	b.n	f820 <_svfprintf_r+0x1814>
    f94e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f950:	f023 0320 	bic.w	r3, r3, #32
    f954:	9307      	str	r3, [sp, #28]
    f956:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    f95a:	f103 4600 	add.w	r6, r3, #2147483648	; 0x80000000
    f95e:	232d      	movs	r3, #45	; 0x2d
    f960:	4617      	mov	r7, r2
    f962:	931e      	str	r3, [sp, #120]	; 0x78
    f964:	e793      	b.n	f88e <_svfprintf_r+0x1882>
    f966:	2200      	movs	r2, #0
    f968:	9208      	str	r2, [sp, #32]
    f96a:	f7fe bbaa 	b.w	e0c2 <_svfprintf_r+0xb6>
    f96e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    f970:	4425      	add	r5, r4
    f972:	e5bf      	b.n	f4f4 <_svfprintf_r+0x14e8>
    f974:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f976:	320f      	adds	r2, #15
    f978:	b2d2      	uxtb	r2, r2
    f97a:	2101      	movs	r1, #1
    f97c:	e5da      	b.n	f534 <_svfprintf_r+0x1528>
    f97e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f980:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    f982:	189a      	adds	r2, r3, r2
    f984:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f986:	920a      	str	r2, [sp, #40]	; 0x28
    f988:	2b00      	cmp	r3, #0
    f98a:	f340 808f 	ble.w	faac <_svfprintf_r+0x1aa0>
    f98e:	2367      	movs	r3, #103	; 0x67
    f990:	9310      	str	r3, [sp, #64]	; 0x40
    f992:	e7d3      	b.n	f93c <_svfprintf_r+0x1930>
    f994:	469b      	mov	fp, r3
    f996:	2300      	movs	r3, #0
    f998:	930d      	str	r3, [sp, #52]	; 0x34
    f99a:	e7dc      	b.n	f956 <_svfprintf_r+0x194a>
    f99c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f99e:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    f9a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f9a6:	8193      	strh	r3, [r2, #12]
    f9a8:	f7fe bc3b 	b.w	e222 <_svfprintf_r+0x216>
    f9ac:	40300000 	.word	0x40300000
    f9b0:	3fe00000 	.word	0x3fe00000
    f9b4:	00014954 	.word	0x00014954
    f9b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f9ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f9bc:	932a      	str	r3, [sp, #168]	; 0xa8
    f9be:	7bd1      	ldrb	r1, [r2, #15]
    f9c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    f9c4:	428b      	cmp	r3, r1
    f9c6:	462a      	mov	r2, r5
    f9c8:	d109      	bne.n	f9de <_svfprintf_r+0x19d2>
    f9ca:	2030      	movs	r0, #48	; 0x30
    f9cc:	f802 0c01 	strb.w	r0, [r2, #-1]
    f9d0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    f9d2:	1e53      	subs	r3, r2, #1
    f9d4:	932a      	str	r3, [sp, #168]	; 0xa8
    f9d6:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    f9da:	4299      	cmp	r1, r3
    f9dc:	d0f6      	beq.n	f9cc <_svfprintf_r+0x19c0>
    f9de:	2b39      	cmp	r3, #57	; 0x39
    f9e0:	bf0b      	itete	eq
    f9e2:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
    f9e4:	3301      	addne	r3, #1
    f9e6:	7a9b      	ldrbeq	r3, [r3, #10]
    f9e8:	b2db      	uxtbne	r3, r3
    f9ea:	f802 3c01 	strb.w	r3, [r2, #-1]
    f9ee:	e6c8      	b.n	f782 <_svfprintf_r+0x1776>
    f9f0:	2900      	cmp	r1, #0
    f9f2:	f040 808c 	bne.w	fb0e <_svfprintf_r+0x1b02>
    f9f6:	2230      	movs	r2, #48	; 0x30
    f9f8:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
    f9fc:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
    fa00:	3330      	adds	r3, #48	; 0x30
    fa02:	f802 3b01 	strb.w	r3, [r2], #1
    fa06:	ab26      	add	r3, sp, #152	; 0x98
    fa08:	1ad3      	subs	r3, r2, r3
    fa0a:	931b      	str	r3, [sp, #108]	; 0x6c
    fa0c:	e5d3      	b.n	f5b6 <_svfprintf_r+0x15aa>
    fa0e:	464c      	mov	r4, r9
    fa10:	4689      	mov	r9, r1
    fa12:	3301      	adds	r3, #1
    fa14:	443a      	add	r2, r7
    fa16:	2b07      	cmp	r3, #7
    fa18:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    fa1c:	f8c9 5000 	str.w	r5, [r9]
    fa20:	f8c9 7004 	str.w	r7, [r9, #4]
    fa24:	f77f abab 	ble.w	f17e <_svfprintf_r+0x1172>
    fa28:	990c      	ldr	r1, [sp, #48]	; 0x30
    fa2a:	aa2c      	add	r2, sp, #176	; 0xb0
    fa2c:	4650      	mov	r0, sl
    fa2e:	f001 fb57 	bl	110e0 <__ssprint_r>
    fa32:	2800      	cmp	r0, #0
    fa34:	f47e af55 	bne.w	e8e2 <_svfprintf_r+0x8d6>
    fa38:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    fa3c:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fa40:	f7ff bb9f 	b.w	f182 <_svfprintf_r+0x1176>
    fa44:	1c59      	adds	r1, r3, #1
    fa46:	4650      	mov	r0, sl
    fa48:	f7fc fd8c 	bl	c564 <_malloc_r>
    fa4c:	4604      	mov	r4, r0
    fa4e:	2800      	cmp	r0, #0
    fa50:	d0a4      	beq.n	f99c <_svfprintf_r+0x1990>
    fa52:	900d      	str	r0, [sp, #52]	; 0x34
    fa54:	e70c      	b.n	f870 <_svfprintf_r+0x1864>
    fa56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    fa58:	07d8      	lsls	r0, r3, #31
    fa5a:	f57f adb7 	bpl.w	f5cc <_svfprintf_r+0x15c0>
    fa5e:	e5b1      	b.n	f5c4 <_svfprintf_r+0x15b8>
    fa60:	4638      	mov	r0, r7
    fa62:	4631      	mov	r1, r6
    fa64:	2200      	movs	r2, #0
    fa66:	2300      	movs	r3, #0
    fa68:	f7fc f9f2 	bl	be50 <__aeabi_dcmpeq>
    fa6c:	2800      	cmp	r0, #0
    fa6e:	f47f ad3f 	bne.w	f4f0 <_svfprintf_r+0x14e4>
    fa72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fa74:	f1c3 0301 	rsb	r3, r3, #1
    fa78:	9323      	str	r3, [sp, #140]	; 0x8c
    fa7a:	e53a      	b.n	f4f2 <_svfprintf_r+0x14e6>
    fa7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    fa7e:	4c4a      	ldr	r4, [pc, #296]	; (fba8 <_svfprintf_r+0x1b9c>)
    fa80:	2b00      	cmp	r3, #0
    fa82:	bfb4      	ite	lt
    fa84:	222d      	movlt	r2, #45	; 0x2d
    fa86:	f89d 2087 	ldrbge.w	r2, [sp, #135]	; 0x87
    fa8a:	4b48      	ldr	r3, [pc, #288]	; (fbac <_svfprintf_r+0x1ba0>)
    fa8c:	bfb8      	it	lt
    fa8e:	f88d 2087 	strblt.w	r2, [sp, #135]	; 0x87
    fa92:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    fa96:	f7fe bc90 	b.w	e3ba <_svfprintf_r+0x3ae>
    fa9a:	930a      	str	r3, [sp, #40]	; 0x28
    fa9c:	e6b3      	b.n	f806 <_svfprintf_r+0x17fa>
    fa9e:	9b08      	ldr	r3, [sp, #32]
    faa0:	f8dd 801c 	ldr.w	r8, [sp, #28]
    faa4:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    faa8:	930a      	str	r3, [sp, #40]	; 0x28
    faaa:	e490      	b.n	f3ce <_svfprintf_r+0x13c2>
    faac:	f1c3 0301 	rsb	r3, r3, #1
    fab0:	441a      	add	r2, r3
    fab2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    fab6:	9307      	str	r3, [sp, #28]
    fab8:	2367      	movs	r3, #103	; 0x67
    faba:	920a      	str	r2, [sp, #40]	; 0x28
    fabc:	9310      	str	r3, [sp, #64]	; 0x40
    fabe:	e6af      	b.n	f820 <_svfprintf_r+0x1814>
    fac0:	2367      	movs	r3, #103	; 0x67
    fac2:	9310      	str	r3, [sp, #64]	; 0x40
    fac4:	991a      	ldr	r1, [sp, #104]	; 0x68
    fac6:	780b      	ldrb	r3, [r1, #0]
    fac8:	2bff      	cmp	r3, #255	; 0xff
    faca:	d059      	beq.n	fb80 <_svfprintf_r+0x1b74>
    facc:	2500      	movs	r5, #0
    face:	9a11      	ldr	r2, [sp, #68]	; 0x44
    fad0:	4628      	mov	r0, r5
    fad2:	e003      	b.n	fadc <_svfprintf_r+0x1ad0>
    fad4:	3001      	adds	r0, #1
    fad6:	3101      	adds	r1, #1
    fad8:	2bff      	cmp	r3, #255	; 0xff
    fada:	d008      	beq.n	faee <_svfprintf_r+0x1ae2>
    fadc:	4293      	cmp	r3, r2
    fade:	da06      	bge.n	faee <_svfprintf_r+0x1ae2>
    fae0:	1ad2      	subs	r2, r2, r3
    fae2:	784b      	ldrb	r3, [r1, #1]
    fae4:	2b00      	cmp	r3, #0
    fae6:	d1f5      	bne.n	fad4 <_svfprintf_r+0x1ac8>
    fae8:	780b      	ldrb	r3, [r1, #0]
    faea:	3501      	adds	r5, #1
    faec:	e7f4      	b.n	fad8 <_svfprintf_r+0x1acc>
    faee:	9211      	str	r2, [sp, #68]	; 0x44
    faf0:	911a      	str	r1, [sp, #104]	; 0x68
    faf2:	9016      	str	r0, [sp, #88]	; 0x58
    faf4:	9512      	str	r5, [sp, #72]	; 0x48
    faf6:	9a12      	ldr	r2, [sp, #72]	; 0x48
    faf8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    fafa:	991d      	ldr	r1, [sp, #116]	; 0x74
    fafc:	4413      	add	r3, r2
    fafe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fb00:	fb01 2303 	mla	r3, r1, r3, r2
    fb04:	930a      	str	r3, [sp, #40]	; 0x28
    fb06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    fb0a:	9307      	str	r3, [sp, #28]
    fb0c:	e56b      	b.n	f5e6 <_svfprintf_r+0x15da>
    fb0e:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
    fb12:	e775      	b.n	fa00 <_svfprintf_r+0x19f4>
    fb14:	9b08      	ldr	r3, [sp, #32]
    fb16:	9307      	str	r3, [sp, #28]
    fb18:	930a      	str	r3, [sp, #40]	; 0x28
    fb1a:	2373      	movs	r3, #115	; 0x73
    fb1c:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    fb20:	970e      	str	r7, [sp, #56]	; 0x38
    fb22:	9008      	str	r0, [sp, #32]
    fb24:	9012      	str	r0, [sp, #72]	; 0x48
    fb26:	9016      	str	r0, [sp, #88]	; 0x58
    fb28:	9310      	str	r3, [sp, #64]	; 0x40
    fb2a:	f7fe bc53 	b.w	e3d4 <_svfprintf_r+0x3c8>
    fb2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    fb30:	18d5      	adds	r5, r2, r3
    fb32:	4429      	add	r1, r5
    fb34:	2366      	movs	r3, #102	; 0x66
    fb36:	910a      	str	r1, [sp, #40]	; 0x28
    fb38:	9310      	str	r3, [sp, #64]	; 0x40
    fb3a:	e6ff      	b.n	f93c <_svfprintf_r+0x1930>
    fb3c:	9a08      	ldr	r2, [sp, #32]
    fb3e:	4313      	orrs	r3, r2
    fb40:	d105      	bne.n	fb4e <_svfprintf_r+0x1b42>
    fb42:	2301      	movs	r3, #1
    fb44:	2266      	movs	r2, #102	; 0x66
    fb46:	9307      	str	r3, [sp, #28]
    fb48:	9210      	str	r2, [sp, #64]	; 0x40
    fb4a:	930a      	str	r3, [sp, #40]	; 0x28
    fb4c:	e668      	b.n	f820 <_svfprintf_r+0x1814>
    fb4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    fb50:	1c5d      	adds	r5, r3, #1
    fb52:	442a      	add	r2, r5
    fb54:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    fb58:	9307      	str	r3, [sp, #28]
    fb5a:	2366      	movs	r3, #102	; 0x66
    fb5c:	920a      	str	r2, [sp, #40]	; 0x28
    fb5e:	9310      	str	r3, [sp, #64]	; 0x40
    fb60:	e65e      	b.n	f820 <_svfprintf_r+0x1814>
    fb62:	2302      	movs	r3, #2
    fb64:	931b      	str	r3, [sp, #108]	; 0x6c
    fb66:	e526      	b.n	f5b6 <_svfprintf_r+0x15aa>
    fb68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    fb6a:	f898 3001 	ldrb.w	r3, [r8, #1]
    fb6e:	4688      	mov	r8, r1
    fb70:	f852 1b04 	ldr.w	r1, [r2], #4
    fb74:	920e      	str	r2, [sp, #56]	; 0x38
    fb76:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    fb7a:	9108      	str	r1, [sp, #32]
    fb7c:	f7fe ba9f 	b.w	e0be <_svfprintf_r+0xb2>
    fb80:	2300      	movs	r3, #0
    fb82:	9312      	str	r3, [sp, #72]	; 0x48
    fb84:	9316      	str	r3, [sp, #88]	; 0x58
    fb86:	e7b6      	b.n	faf6 <_svfprintf_r+0x1aea>
    fb88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    fb8a:	8993      	ldrh	r3, [r2, #12]
    fb8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fb90:	8193      	strh	r3, [r2, #12]
    fb92:	f7fe bea6 	b.w	e8e2 <_svfprintf_r+0x8d6>
    fb96:	230c      	movs	r3, #12
    fb98:	f8ca 3000 	str.w	r3, [sl]
    fb9c:	f04f 33ff 	mov.w	r3, #4294967295
    fba0:	9309      	str	r3, [sp, #36]	; 0x24
    fba2:	f7fe bb45 	b.w	e230 <_svfprintf_r+0x224>
    fba6:	bf00      	nop
    fba8:	00014950 	.word	0x00014950
    fbac:	000144d4 	.word	0x000144d4

0000fbb0 <_fclose_r>:
    fbb0:	b570      	push	{r4, r5, r6, lr}
    fbb2:	2900      	cmp	r1, #0
    fbb4:	d04b      	beq.n	fc4e <_fclose_r+0x9e>
    fbb6:	4606      	mov	r6, r0
    fbb8:	460c      	mov	r4, r1
    fbba:	b110      	cbz	r0, fbc2 <_fclose_r+0x12>
    fbbc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    fbbe:	2b00      	cmp	r3, #0
    fbc0:	d048      	beq.n	fc54 <_fclose_r+0xa4>
    fbc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
    fbc4:	07d8      	lsls	r0, r3, #31
    fbc6:	d534      	bpl.n	fc32 <_fclose_r+0x82>
    fbc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    fbcc:	2b00      	cmp	r3, #0
    fbce:	d03e      	beq.n	fc4e <_fclose_r+0x9e>
    fbd0:	4621      	mov	r1, r4
    fbd2:	4630      	mov	r0, r6
    fbd4:	f000 f850 	bl	fc78 <__sflush_r>
    fbd8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    fbda:	4605      	mov	r5, r0
    fbdc:	b133      	cbz	r3, fbec <_fclose_r+0x3c>
    fbde:	69e1      	ldr	r1, [r4, #28]
    fbe0:	4630      	mov	r0, r6
    fbe2:	4798      	blx	r3
    fbe4:	2800      	cmp	r0, #0
    fbe6:	bfb8      	it	lt
    fbe8:	f04f 35ff 	movlt.w	r5, #4294967295
    fbec:	89a3      	ldrh	r3, [r4, #12]
    fbee:	061a      	lsls	r2, r3, #24
    fbf0:	d43c      	bmi.n	fc6c <_fclose_r+0xbc>
    fbf2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    fbf4:	b141      	cbz	r1, fc08 <_fclose_r+0x58>
    fbf6:	f104 0340 	add.w	r3, r4, #64	; 0x40
    fbfa:	4299      	cmp	r1, r3
    fbfc:	d002      	beq.n	fc04 <_fclose_r+0x54>
    fbfe:	4630      	mov	r0, r6
    fc00:	f7fd fd2c 	bl	d65c <_free_r>
    fc04:	2300      	movs	r3, #0
    fc06:	6323      	str	r3, [r4, #48]	; 0x30
    fc08:	6c61      	ldr	r1, [r4, #68]	; 0x44
    fc0a:	b121      	cbz	r1, fc16 <_fclose_r+0x66>
    fc0c:	4630      	mov	r0, r6
    fc0e:	f7fd fd25 	bl	d65c <_free_r>
    fc12:	2300      	movs	r3, #0
    fc14:	6463      	str	r3, [r4, #68]	; 0x44
    fc16:	f7fd fa01 	bl	d01c <__sfp_lock_acquire>
    fc1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    fc1c:	2200      	movs	r2, #0
    fc1e:	07db      	lsls	r3, r3, #31
    fc20:	81a2      	strh	r2, [r4, #12]
    fc22:	d51f      	bpl.n	fc64 <_fclose_r+0xb4>
    fc24:	6da0      	ldr	r0, [r4, #88]	; 0x58
    fc26:	f7fd fc27 	bl	d478 <__retarget_lock_close_recursive>
    fc2a:	f7fd f9fd 	bl	d028 <__sfp_lock_release>
    fc2e:	4628      	mov	r0, r5
    fc30:	bd70      	pop	{r4, r5, r6, pc}
    fc32:	89a3      	ldrh	r3, [r4, #12]
    fc34:	0599      	lsls	r1, r3, #22
    fc36:	d4cb      	bmi.n	fbd0 <_fclose_r+0x20>
    fc38:	6da0      	ldr	r0, [r4, #88]	; 0x58
    fc3a:	f7fd fc1f 	bl	d47c <__retarget_lock_acquire_recursive>
    fc3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    fc42:	2b00      	cmp	r3, #0
    fc44:	d1c4      	bne.n	fbd0 <_fclose_r+0x20>
    fc46:	6e65      	ldr	r5, [r4, #100]	; 0x64
    fc48:	f015 0501 	ands.w	r5, r5, #1
    fc4c:	d005      	beq.n	fc5a <_fclose_r+0xaa>
    fc4e:	2500      	movs	r5, #0
    fc50:	4628      	mov	r0, r5
    fc52:	bd70      	pop	{r4, r5, r6, pc}
    fc54:	f7fd f9c4 	bl	cfe0 <__sinit>
    fc58:	e7b3      	b.n	fbc2 <_fclose_r+0x12>
    fc5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    fc5c:	f7fd fc10 	bl	d480 <__retarget_lock_release_recursive>
    fc60:	4628      	mov	r0, r5
    fc62:	bd70      	pop	{r4, r5, r6, pc}
    fc64:	6da0      	ldr	r0, [r4, #88]	; 0x58
    fc66:	f7fd fc0b 	bl	d480 <__retarget_lock_release_recursive>
    fc6a:	e7db      	b.n	fc24 <_fclose_r+0x74>
    fc6c:	6921      	ldr	r1, [r4, #16]
    fc6e:	4630      	mov	r0, r6
    fc70:	f7fd fcf4 	bl	d65c <_free_r>
    fc74:	e7bd      	b.n	fbf2 <_fclose_r+0x42>
    fc76:	bf00      	nop

0000fc78 <__sflush_r>:
    fc78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    fc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fc7e:	460c      	mov	r4, r1
    fc80:	0711      	lsls	r1, r2, #28
    fc82:	4607      	mov	r7, r0
    fc84:	d442      	bmi.n	fd0c <__sflush_r+0x94>
    fc86:	6863      	ldr	r3, [r4, #4]
    fc88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    fc8c:	2b00      	cmp	r3, #0
    fc8e:	81a2      	strh	r2, [r4, #12]
    fc90:	dd59      	ble.n	fd46 <__sflush_r+0xce>
    fc92:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    fc94:	2d00      	cmp	r5, #0
    fc96:	d054      	beq.n	fd42 <__sflush_r+0xca>
    fc98:	2300      	movs	r3, #0
    fc9a:	683e      	ldr	r6, [r7, #0]
    fc9c:	603b      	str	r3, [r7, #0]
    fc9e:	b293      	uxth	r3, r2
    fca0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    fca4:	d153      	bne.n	fd4e <__sflush_r+0xd6>
    fca6:	69e1      	ldr	r1, [r4, #28]
    fca8:	2301      	movs	r3, #1
    fcaa:	4638      	mov	r0, r7
    fcac:	47a8      	blx	r5
    fcae:	1c42      	adds	r2, r0, #1
    fcb0:	d063      	beq.n	fd7a <__sflush_r+0x102>
    fcb2:	89a3      	ldrh	r3, [r4, #12]
    fcb4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    fcb6:	075b      	lsls	r3, r3, #29
    fcb8:	d505      	bpl.n	fcc6 <__sflush_r+0x4e>
    fcba:	6863      	ldr	r3, [r4, #4]
    fcbc:	1ac0      	subs	r0, r0, r3
    fcbe:	6b23      	ldr	r3, [r4, #48]	; 0x30
    fcc0:	b10b      	cbz	r3, fcc6 <__sflush_r+0x4e>
    fcc2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    fcc4:	1ac0      	subs	r0, r0, r3
    fcc6:	69e1      	ldr	r1, [r4, #28]
    fcc8:	4602      	mov	r2, r0
    fcca:	2300      	movs	r3, #0
    fccc:	4638      	mov	r0, r7
    fcce:	47a8      	blx	r5
    fcd0:	1c41      	adds	r1, r0, #1
    fcd2:	d13e      	bne.n	fd52 <__sflush_r+0xda>
    fcd4:	683b      	ldr	r3, [r7, #0]
    fcd6:	2b00      	cmp	r3, #0
    fcd8:	d03b      	beq.n	fd52 <__sflush_r+0xda>
    fcda:	2b1d      	cmp	r3, #29
    fcdc:	d001      	beq.n	fce2 <__sflush_r+0x6a>
    fcde:	2b16      	cmp	r3, #22
    fce0:	d152      	bne.n	fd88 <__sflush_r+0x110>
    fce2:	89a3      	ldrh	r3, [r4, #12]
    fce4:	6922      	ldr	r2, [r4, #16]
    fce6:	6022      	str	r2, [r4, #0]
    fce8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    fcec:	2100      	movs	r1, #0
    fcee:	6061      	str	r1, [r4, #4]
    fcf0:	81a3      	strh	r3, [r4, #12]
    fcf2:	6b21      	ldr	r1, [r4, #48]	; 0x30
    fcf4:	603e      	str	r6, [r7, #0]
    fcf6:	b321      	cbz	r1, fd42 <__sflush_r+0xca>
    fcf8:	f104 0340 	add.w	r3, r4, #64	; 0x40
    fcfc:	4299      	cmp	r1, r3
    fcfe:	d002      	beq.n	fd06 <__sflush_r+0x8e>
    fd00:	4638      	mov	r0, r7
    fd02:	f7fd fcab 	bl	d65c <_free_r>
    fd06:	2000      	movs	r0, #0
    fd08:	6320      	str	r0, [r4, #48]	; 0x30
    fd0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fd0c:	6926      	ldr	r6, [r4, #16]
    fd0e:	b1c6      	cbz	r6, fd42 <__sflush_r+0xca>
    fd10:	b293      	uxth	r3, r2
    fd12:	6825      	ldr	r5, [r4, #0]
    fd14:	6026      	str	r6, [r4, #0]
    fd16:	079a      	lsls	r2, r3, #30
    fd18:	bf0c      	ite	eq
    fd1a:	6963      	ldreq	r3, [r4, #20]
    fd1c:	2300      	movne	r3, #0
    fd1e:	1bad      	subs	r5, r5, r6
    fd20:	60a3      	str	r3, [r4, #8]
    fd22:	e00c      	b.n	fd3e <__sflush_r+0xc6>
    fd24:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
    fd28:	69e1      	ldr	r1, [r4, #28]
    fd2a:	462b      	mov	r3, r5
    fd2c:	4632      	mov	r2, r6
    fd2e:	4638      	mov	r0, r7
    fd30:	47e0      	blx	ip
    fd32:	f1b0 0c00 	subs.w	ip, r0, #0
    fd36:	eba5 050c 	sub.w	r5, r5, ip
    fd3a:	4466      	add	r6, ip
    fd3c:	dd16      	ble.n	fd6c <__sflush_r+0xf4>
    fd3e:	2d00      	cmp	r5, #0
    fd40:	dcf0      	bgt.n	fd24 <__sflush_r+0xac>
    fd42:	2000      	movs	r0, #0
    fd44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fd46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    fd48:	2b00      	cmp	r3, #0
    fd4a:	dca2      	bgt.n	fc92 <__sflush_r+0x1a>
    fd4c:	e7f9      	b.n	fd42 <__sflush_r+0xca>
    fd4e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    fd50:	e7b1      	b.n	fcb6 <__sflush_r+0x3e>
    fd52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    fd56:	6922      	ldr	r2, [r4, #16]
    fd58:	6022      	str	r2, [r4, #0]
    fd5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    fd5e:	81a3      	strh	r3, [r4, #12]
    fd60:	2200      	movs	r2, #0
    fd62:	04db      	lsls	r3, r3, #19
    fd64:	6062      	str	r2, [r4, #4]
    fd66:	d5c4      	bpl.n	fcf2 <__sflush_r+0x7a>
    fd68:	6520      	str	r0, [r4, #80]	; 0x50
    fd6a:	e7c2      	b.n	fcf2 <__sflush_r+0x7a>
    fd6c:	89a3      	ldrh	r3, [r4, #12]
    fd6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fd72:	f04f 30ff 	mov.w	r0, #4294967295
    fd76:	81a3      	strh	r3, [r4, #12]
    fd78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fd7a:	683b      	ldr	r3, [r7, #0]
    fd7c:	2b00      	cmp	r3, #0
    fd7e:	d098      	beq.n	fcb2 <__sflush_r+0x3a>
    fd80:	2b1d      	cmp	r3, #29
    fd82:	d006      	beq.n	fd92 <__sflush_r+0x11a>
    fd84:	2b16      	cmp	r3, #22
    fd86:	d004      	beq.n	fd92 <__sflush_r+0x11a>
    fd88:	89a3      	ldrh	r3, [r4, #12]
    fd8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    fd8e:	81a3      	strh	r3, [r4, #12]
    fd90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fd92:	603e      	str	r6, [r7, #0]
    fd94:	e7d5      	b.n	fd42 <__sflush_r+0xca>
    fd96:	bf00      	nop

0000fd98 <_fflush_r>:
    fd98:	b538      	push	{r3, r4, r5, lr}
    fd9a:	460c      	mov	r4, r1
    fd9c:	4605      	mov	r5, r0
    fd9e:	b108      	cbz	r0, fda4 <_fflush_r+0xc>
    fda0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    fda2:	b303      	cbz	r3, fde6 <_fflush_r+0x4e>
    fda4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    fda8:	b188      	cbz	r0, fdce <_fflush_r+0x36>
    fdaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
    fdac:	07db      	lsls	r3, r3, #31
    fdae:	d401      	bmi.n	fdb4 <_fflush_r+0x1c>
    fdb0:	0581      	lsls	r1, r0, #22
    fdb2:	d50f      	bpl.n	fdd4 <_fflush_r+0x3c>
    fdb4:	4628      	mov	r0, r5
    fdb6:	4621      	mov	r1, r4
    fdb8:	f7ff ff5e 	bl	fc78 <__sflush_r>
    fdbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
    fdbe:	07da      	lsls	r2, r3, #31
    fdc0:	4605      	mov	r5, r0
    fdc2:	d402      	bmi.n	fdca <_fflush_r+0x32>
    fdc4:	89a3      	ldrh	r3, [r4, #12]
    fdc6:	059b      	lsls	r3, r3, #22
    fdc8:	d508      	bpl.n	fddc <_fflush_r+0x44>
    fdca:	4628      	mov	r0, r5
    fdcc:	bd38      	pop	{r3, r4, r5, pc}
    fdce:	4605      	mov	r5, r0
    fdd0:	4628      	mov	r0, r5
    fdd2:	bd38      	pop	{r3, r4, r5, pc}
    fdd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    fdd6:	f7fd fb51 	bl	d47c <__retarget_lock_acquire_recursive>
    fdda:	e7eb      	b.n	fdb4 <_fflush_r+0x1c>
    fddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    fdde:	f7fd fb4f 	bl	d480 <__retarget_lock_release_recursive>
    fde2:	4628      	mov	r0, r5
    fde4:	bd38      	pop	{r3, r4, r5, pc}
    fde6:	f7fd f8fb 	bl	cfe0 <__sinit>
    fdea:	e7db      	b.n	fda4 <_fflush_r+0xc>

0000fdec <_localeconv_r>:
    fdec:	4800      	ldr	r0, [pc, #0]	; (fdf0 <_localeconv_r+0x4>)
    fdee:	4770      	bx	lr
    fdf0:	1fff8dd4 	.word	0x1fff8dd4

0000fdf4 <__libc_fini_array>:
    fdf4:	b538      	push	{r3, r4, r5, lr}
    fdf6:	4d07      	ldr	r5, [pc, #28]	; (fe14 <__libc_fini_array+0x20>)
    fdf8:	4c07      	ldr	r4, [pc, #28]	; (fe18 <__libc_fini_array+0x24>)
    fdfa:	1b2c      	subs	r4, r5, r4
    fdfc:	10a4      	asrs	r4, r4, #2
    fdfe:	d005      	beq.n	fe0c <__libc_fini_array+0x18>
    fe00:	3c01      	subs	r4, #1
    fe02:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    fe06:	4798      	blx	r3
    fe08:	2c00      	cmp	r4, #0
    fe0a:	d1f9      	bne.n	fe00 <__libc_fini_array+0xc>
    fe0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    fe10:	f004 be3e 	b.w	14a90 <__init_array_end>
	...
    fe1c:	ffffffff 	.word	0xffffffff

0000fe20 <memchr>:
    fe20:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    fe24:	2a10      	cmp	r2, #16
    fe26:	db2b      	blt.n	fe80 <memchr+0x60>
    fe28:	f010 0f07 	tst.w	r0, #7
    fe2c:	d008      	beq.n	fe40 <memchr+0x20>
    fe2e:	f810 3b01 	ldrb.w	r3, [r0], #1
    fe32:	3a01      	subs	r2, #1
    fe34:	428b      	cmp	r3, r1
    fe36:	d02d      	beq.n	fe94 <memchr+0x74>
    fe38:	f010 0f07 	tst.w	r0, #7
    fe3c:	b342      	cbz	r2, fe90 <memchr+0x70>
    fe3e:	d1f6      	bne.n	fe2e <memchr+0xe>
    fe40:	b4f0      	push	{r4, r5, r6, r7}
    fe42:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    fe46:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    fe4a:	f022 0407 	bic.w	r4, r2, #7
    fe4e:	f07f 0700 	mvns.w	r7, #0
    fe52:	2300      	movs	r3, #0
    fe54:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    fe58:	3c08      	subs	r4, #8
    fe5a:	ea85 0501 	eor.w	r5, r5, r1
    fe5e:	ea86 0601 	eor.w	r6, r6, r1
    fe62:	fa85 f547 	uadd8	r5, r5, r7
    fe66:	faa3 f587 	sel	r5, r3, r7
    fe6a:	fa86 f647 	uadd8	r6, r6, r7
    fe6e:	faa5 f687 	sel	r6, r5, r7
    fe72:	b98e      	cbnz	r6, fe98 <memchr+0x78>
    fe74:	d1ee      	bne.n	fe54 <memchr+0x34>
    fe76:	bcf0      	pop	{r4, r5, r6, r7}
    fe78:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    fe7c:	f002 0207 	and.w	r2, r2, #7
    fe80:	b132      	cbz	r2, fe90 <memchr+0x70>
    fe82:	f810 3b01 	ldrb.w	r3, [r0], #1
    fe86:	3a01      	subs	r2, #1
    fe88:	ea83 0301 	eor.w	r3, r3, r1
    fe8c:	b113      	cbz	r3, fe94 <memchr+0x74>
    fe8e:	d1f8      	bne.n	fe82 <memchr+0x62>
    fe90:	2000      	movs	r0, #0
    fe92:	4770      	bx	lr
    fe94:	3801      	subs	r0, #1
    fe96:	4770      	bx	lr
    fe98:	2d00      	cmp	r5, #0
    fe9a:	bf06      	itte	eq
    fe9c:	4635      	moveq	r5, r6
    fe9e:	3803      	subeq	r0, #3
    fea0:	3807      	subne	r0, #7
    fea2:	f015 0f01 	tst.w	r5, #1
    fea6:	d107      	bne.n	feb8 <memchr+0x98>
    fea8:	3001      	adds	r0, #1
    feaa:	f415 7f80 	tst.w	r5, #256	; 0x100
    feae:	bf02      	ittt	eq
    feb0:	3001      	addeq	r0, #1
    feb2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    feb6:	3001      	addeq	r0, #1
    feb8:	bcf0      	pop	{r4, r5, r6, r7}
    feba:	3801      	subs	r0, #1
    febc:	4770      	bx	lr
    febe:	bf00      	nop

0000fec0 <frexp>:
    fec0:	f8df c060 	ldr.w	ip, [pc, #96]	; ff24 <frexp+0x64>
    fec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fec6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    feca:	2700      	movs	r7, #0
    fecc:	4563      	cmp	r3, ip
    fece:	4604      	mov	r4, r0
    fed0:	460d      	mov	r5, r1
    fed2:	4616      	mov	r6, r2
    fed4:	6017      	str	r7, [r2, #0]
    fed6:	dc22      	bgt.n	ff1e <frexp+0x5e>
    fed8:	4684      	mov	ip, r0
    feda:	ea53 0c0c 	orrs.w	ip, r3, ip
    fede:	d01e      	beq.n	ff1e <frexp+0x5e>
    fee0:	f8df c044 	ldr.w	ip, [pc, #68]	; ff28 <frexp+0x68>
    fee4:	ea01 0c0c 	and.w	ip, r1, ip
    fee8:	460a      	mov	r2, r1
    feea:	f1bc 0f00 	cmp.w	ip, #0
    feee:	d109      	bne.n	ff04 <frexp+0x44>
    fef0:	4b0e      	ldr	r3, [pc, #56]	; (ff2c <frexp+0x6c>)
    fef2:	2200      	movs	r2, #0
    fef4:	f002 fd90 	bl	12a18 <__aeabi_dmul>
    fef8:	f06f 0735 	mvn.w	r7, #53	; 0x35
    fefc:	4604      	mov	r4, r0
    fefe:	460a      	mov	r2, r1
    ff00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    ff04:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    ff08:	151b      	asrs	r3, r3, #20
    ff0a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
    ff0e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    ff12:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
    ff16:	443b      	add	r3, r7
    ff18:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
    ff1c:	6033      	str	r3, [r6, #0]
    ff1e:	4620      	mov	r0, r4
    ff20:	4629      	mov	r1, r5
    ff22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ff24:	7fefffff 	.word	0x7fefffff
    ff28:	7ff00000 	.word	0x7ff00000
    ff2c:	43500000 	.word	0x43500000

0000ff30 <__register_exitproc>:
    ff30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ff34:	f8df a074 	ldr.w	sl, [pc, #116]	; ffac <__register_exitproc+0x7c>
    ff38:	4606      	mov	r6, r0
    ff3a:	f8da 0000 	ldr.w	r0, [sl]
    ff3e:	4698      	mov	r8, r3
    ff40:	460f      	mov	r7, r1
    ff42:	4691      	mov	r9, r2
    ff44:	f7fd fa9a 	bl	d47c <__retarget_lock_acquire_recursive>
    ff48:	4b19      	ldr	r3, [pc, #100]	; (ffb0 <__register_exitproc+0x80>)
    ff4a:	681c      	ldr	r4, [r3, #0]
    ff4c:	b324      	cbz	r4, ff98 <__register_exitproc+0x68>
    ff4e:	6865      	ldr	r5, [r4, #4]
    ff50:	2d1f      	cmp	r5, #31
    ff52:	dc24      	bgt.n	ff9e <__register_exitproc+0x6e>
    ff54:	b95e      	cbnz	r6, ff6e <__register_exitproc+0x3e>
    ff56:	1c6b      	adds	r3, r5, #1
    ff58:	3502      	adds	r5, #2
    ff5a:	f8da 0000 	ldr.w	r0, [sl]
    ff5e:	6063      	str	r3, [r4, #4]
    ff60:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    ff64:	f7fd fa8c 	bl	d480 <__retarget_lock_release_recursive>
    ff68:	2000      	movs	r0, #0
    ff6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ff6e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    ff72:	2301      	movs	r3, #1
    ff74:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    ff78:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    ff7c:	40ab      	lsls	r3, r5
    ff7e:	431a      	orrs	r2, r3
    ff80:	2e02      	cmp	r6, #2
    ff82:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    ff86:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    ff8a:	d1e4      	bne.n	ff56 <__register_exitproc+0x26>
    ff8c:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    ff90:	431a      	orrs	r2, r3
    ff92:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    ff96:	e7de      	b.n	ff56 <__register_exitproc+0x26>
    ff98:	4c06      	ldr	r4, [pc, #24]	; (ffb4 <__register_exitproc+0x84>)
    ff9a:	601c      	str	r4, [r3, #0]
    ff9c:	e7d7      	b.n	ff4e <__register_exitproc+0x1e>
    ff9e:	f8da 0000 	ldr.w	r0, [sl]
    ffa2:	f7fd fa6d 	bl	d480 <__retarget_lock_release_recursive>
    ffa6:	f04f 30ff 	mov.w	r0, #4294967295
    ffaa:	e7de      	b.n	ff6a <__register_exitproc+0x3a>
    ffac:	1fff8f74 	.word	0x1fff8f74
    ffb0:	1fffb898 	.word	0x1fffb898
    ffb4:	1fffb89c 	.word	0x1fffb89c

0000ffb8 <__assert_func>:
    ffb8:	b500      	push	{lr}
    ffba:	4c0b      	ldr	r4, [pc, #44]	; (ffe8 <__assert_func+0x30>)
    ffbc:	6825      	ldr	r5, [r4, #0]
    ffbe:	4614      	mov	r4, r2
    ffc0:	68ee      	ldr	r6, [r5, #12]
    ffc2:	461a      	mov	r2, r3
    ffc4:	b085      	sub	sp, #20
    ffc6:	4603      	mov	r3, r0
    ffc8:	460d      	mov	r5, r1
    ffca:	b14c      	cbz	r4, ffe0 <__assert_func+0x28>
    ffcc:	4907      	ldr	r1, [pc, #28]	; (ffec <__assert_func+0x34>)
    ffce:	9500      	str	r5, [sp, #0]
    ffd0:	e9cd 1401 	strd	r1, r4, [sp, #4]
    ffd4:	4630      	mov	r0, r6
    ffd6:	4906      	ldr	r1, [pc, #24]	; (fff0 <__assert_func+0x38>)
    ffd8:	f001 f86e 	bl	110b8 <fiprintf>
    ffdc:	f7f9 f90a 	bl	91f4 <abort>
    ffe0:	4904      	ldr	r1, [pc, #16]	; (fff4 <__assert_func+0x3c>)
    ffe2:	460c      	mov	r4, r1
    ffe4:	e7f3      	b.n	ffce <__assert_func+0x16>
    ffe6:	bf00      	nop
    ffe8:	1fff8f70 	.word	0x1fff8f70
    ffec:	000149a4 	.word	0x000149a4
    fff0:	000149b4 	.word	0x000149b4
    fff4:	00012eac 	.word	0x00012eac

0000fff8 <_calloc_r>:
    fff8:	b538      	push	{r3, r4, r5, lr}
    fffa:	fba1 1402 	umull	r1, r4, r1, r2
    fffe:	bb8c      	cbnz	r4, 10064 <_calloc_r+0x6c>
   10000:	f7fc fab0 	bl	c564 <_malloc_r>
   10004:	4605      	mov	r5, r0
   10006:	b1e0      	cbz	r0, 10042 <_calloc_r+0x4a>
   10008:	f850 2c04 	ldr.w	r2, [r0, #-4]
   1000c:	f022 0203 	bic.w	r2, r2, #3
   10010:	3a04      	subs	r2, #4
   10012:	2a24      	cmp	r2, #36	; 0x24
   10014:	d817      	bhi.n	10046 <_calloc_r+0x4e>
   10016:	2a13      	cmp	r2, #19
   10018:	d91a      	bls.n	10050 <_calloc_r+0x58>
   1001a:	2a1b      	cmp	r2, #27
   1001c:	e9c0 4400 	strd	r4, r4, [r0]
   10020:	d91d      	bls.n	1005e <_calloc_r+0x66>
   10022:	2a24      	cmp	r2, #36	; 0x24
   10024:	bf14      	ite	ne
   10026:	f100 0210 	addne.w	r2, r0, #16
   1002a:	f100 0218 	addeq.w	r2, r0, #24
   1002e:	f04f 0300 	mov.w	r3, #0
   10032:	e9c0 4402 	strd	r4, r4, [r0, #8]
   10036:	bf04      	itt	eq
   10038:	6104      	streq	r4, [r0, #16]
   1003a:	6144      	streq	r4, [r0, #20]
   1003c:	e9c2 3300 	strd	r3, r3, [r2]
   10040:	6093      	str	r3, [r2, #8]
   10042:	4628      	mov	r0, r5
   10044:	bd38      	pop	{r3, r4, r5, pc}
   10046:	4621      	mov	r1, r4
   10048:	f7fd f8fa 	bl	d240 <memset>
   1004c:	4628      	mov	r0, r5
   1004e:	bd38      	pop	{r3, r4, r5, pc}
   10050:	4602      	mov	r2, r0
   10052:	2300      	movs	r3, #0
   10054:	e9c2 3300 	strd	r3, r3, [r2]
   10058:	6093      	str	r3, [r2, #8]
   1005a:	4628      	mov	r0, r5
   1005c:	bd38      	pop	{r3, r4, r5, pc}
   1005e:	f100 0208 	add.w	r2, r0, #8
   10062:	e7f6      	b.n	10052 <_calloc_r+0x5a>
   10064:	f7fd f9dc 	bl	d420 <__errno>
   10068:	230c      	movs	r3, #12
   1006a:	2500      	movs	r5, #0
   1006c:	6003      	str	r3, [r0, #0]
   1006e:	e7e8      	b.n	10042 <_calloc_r+0x4a>

00010070 <quorem>:
   10070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10074:	6903      	ldr	r3, [r0, #16]
   10076:	690c      	ldr	r4, [r1, #16]
   10078:	42a3      	cmp	r3, r4
   1007a:	b083      	sub	sp, #12
   1007c:	f2c0 8088 	blt.w	10190 <quorem+0x120>
   10080:	3c01      	subs	r4, #1
   10082:	f101 0514 	add.w	r5, r1, #20
   10086:	00a3      	lsls	r3, r4, #2
   10088:	f100 0814 	add.w	r8, r0, #20
   1008c:	9300      	str	r3, [sp, #0]
   1008e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   10092:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   10096:	3301      	adds	r3, #1
   10098:	468a      	mov	sl, r1
   1009a:	429a      	cmp	r2, r3
   1009c:	eb08 0184 	add.w	r1, r8, r4, lsl #2
   100a0:	4681      	mov	r9, r0
   100a2:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   100a6:	9101      	str	r1, [sp, #4]
   100a8:	fbb2 f6f3 	udiv	r6, r2, r3
   100ac:	d33a      	bcc.n	10124 <quorem+0xb4>
   100ae:	f04f 0c00 	mov.w	ip, #0
   100b2:	46ae      	mov	lr, r5
   100b4:	4640      	mov	r0, r8
   100b6:	4662      	mov	r2, ip
   100b8:	4663      	mov	r3, ip
   100ba:	f85e bb04 	ldr.w	fp, [lr], #4
   100be:	6801      	ldr	r1, [r0, #0]
   100c0:	fa1f fc8b 	uxth.w	ip, fp
   100c4:	fb06 330c 	mla	r3, r6, ip, r3
   100c8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   100cc:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   100d0:	fb06 cc0b 	mla	ip, r6, fp, ip
   100d4:	b29b      	uxth	r3, r3
   100d6:	1ad3      	subs	r3, r2, r3
   100d8:	fa1f f28c 	uxth.w	r2, ip
   100dc:	fa13 f381 	uxtah	r3, r3, r1
   100e0:	ebc2 4211 	rsb	r2, r2, r1, lsr #16
   100e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
   100e8:	b29b      	uxth	r3, r3
   100ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   100ee:	4577      	cmp	r7, lr
   100f0:	f840 3b04 	str.w	r3, [r0], #4
   100f4:	ea4f 4222 	mov.w	r2, r2, asr #16
   100f8:	ea4f 431c 	mov.w	r3, ip, lsr #16
   100fc:	d2dd      	bcs.n	100ba <quorem+0x4a>
   100fe:	9b00      	ldr	r3, [sp, #0]
   10100:	f858 3003 	ldr.w	r3, [r8, r3]
   10104:	b973      	cbnz	r3, 10124 <quorem+0xb4>
   10106:	9b01      	ldr	r3, [sp, #4]
   10108:	3b04      	subs	r3, #4
   1010a:	4598      	cmp	r8, r3
   1010c:	d304      	bcc.n	10118 <quorem+0xa8>
   1010e:	e007      	b.n	10120 <quorem+0xb0>
   10110:	4598      	cmp	r8, r3
   10112:	f104 34ff 	add.w	r4, r4, #4294967295
   10116:	d203      	bcs.n	10120 <quorem+0xb0>
   10118:	f853 2904 	ldr.w	r2, [r3], #-4
   1011c:	2a00      	cmp	r2, #0
   1011e:	d0f7      	beq.n	10110 <quorem+0xa0>
   10120:	f8c9 4010 	str.w	r4, [r9, #16]
   10124:	4651      	mov	r1, sl
   10126:	4648      	mov	r0, r9
   10128:	f7fd fe38 	bl	dd9c <__mcmp>
   1012c:	2800      	cmp	r0, #0
   1012e:	db2b      	blt.n	10188 <quorem+0x118>
   10130:	3601      	adds	r6, #1
   10132:	4641      	mov	r1, r8
   10134:	2300      	movs	r3, #0
   10136:	f855 0b04 	ldr.w	r0, [r5], #4
   1013a:	f8d1 c000 	ldr.w	ip, [r1]
   1013e:	b282      	uxth	r2, r0
   10140:	1a9a      	subs	r2, r3, r2
   10142:	0c03      	lsrs	r3, r0, #16
   10144:	fa12 f28c 	uxtah	r2, r2, ip
   10148:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   1014c:	eb03 4322 	add.w	r3, r3, r2, asr #16
   10150:	b292      	uxth	r2, r2
   10152:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   10156:	42af      	cmp	r7, r5
   10158:	f841 2b04 	str.w	r2, [r1], #4
   1015c:	ea4f 4323 	mov.w	r3, r3, asr #16
   10160:	d2e9      	bcs.n	10136 <quorem+0xc6>
   10162:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   10166:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   1016a:	b96a      	cbnz	r2, 10188 <quorem+0x118>
   1016c:	3b04      	subs	r3, #4
   1016e:	4598      	cmp	r8, r3
   10170:	d304      	bcc.n	1017c <quorem+0x10c>
   10172:	e007      	b.n	10184 <quorem+0x114>
   10174:	4598      	cmp	r8, r3
   10176:	f104 34ff 	add.w	r4, r4, #4294967295
   1017a:	d203      	bcs.n	10184 <quorem+0x114>
   1017c:	f853 2904 	ldr.w	r2, [r3], #-4
   10180:	2a00      	cmp	r2, #0
   10182:	d0f7      	beq.n	10174 <quorem+0x104>
   10184:	f8c9 4010 	str.w	r4, [r9, #16]
   10188:	4630      	mov	r0, r6
   1018a:	b003      	add	sp, #12
   1018c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10190:	2000      	movs	r0, #0
   10192:	b003      	add	sp, #12
   10194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010198 <_dtoa_r>:
   10198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1019c:	6b81      	ldr	r1, [r0, #56]	; 0x38
   1019e:	b099      	sub	sp, #100	; 0x64
   101a0:	4690      	mov	r8, r2
   101a2:	4699      	mov	r9, r3
   101a4:	e9cd 8904 	strd	r8, r9, [sp, #16]
   101a8:	9d25      	ldr	r5, [sp, #148]	; 0x94
   101aa:	4604      	mov	r4, r0
   101ac:	b141      	cbz	r1, 101c0 <_dtoa_r+0x28>
   101ae:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   101b0:	604a      	str	r2, [r1, #4]
   101b2:	2301      	movs	r3, #1
   101b4:	4093      	lsls	r3, r2
   101b6:	608b      	str	r3, [r1, #8]
   101b8:	f7fd fb92 	bl	d8e0 <_Bfree>
   101bc:	2300      	movs	r3, #0
   101be:	63a3      	str	r3, [r4, #56]	; 0x38
   101c0:	f1b9 0a00 	subs.w	sl, r9, #0
   101c4:	bfb4      	ite	lt
   101c6:	2301      	movlt	r3, #1
   101c8:	2300      	movge	r3, #0
   101ca:	602b      	str	r3, [r5, #0]
   101cc:	4b76      	ldr	r3, [pc, #472]	; (103a8 <_dtoa_r+0x210>)
   101ce:	bfbc      	itt	lt
   101d0:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
   101d4:	f8cd a014 	strlt.w	sl, [sp, #20]
   101d8:	ea33 030a 	bics.w	r3, r3, sl
   101dc:	f000 80ab 	beq.w	10336 <_dtoa_r+0x19e>
   101e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   101e4:	4610      	mov	r0, r2
   101e6:	4619      	mov	r1, r3
   101e8:	2200      	movs	r2, #0
   101ea:	2300      	movs	r3, #0
   101ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   101f0:	f7fb fe2e 	bl	be50 <__aeabi_dcmpeq>
   101f4:	4607      	mov	r7, r0
   101f6:	b178      	cbz	r0, 10218 <_dtoa_r+0x80>
   101f8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   101fa:	2301      	movs	r3, #1
   101fc:	6013      	str	r3, [r2, #0]
   101fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
   10200:	2b00      	cmp	r3, #0
   10202:	f000 83ae 	beq.w	10962 <_dtoa_r+0x7ca>
   10206:	4b69      	ldr	r3, [pc, #420]	; (103ac <_dtoa_r+0x214>)
   10208:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1020a:	6013      	str	r3, [r2, #0]
   1020c:	3b01      	subs	r3, #1
   1020e:	9303      	str	r3, [sp, #12]
   10210:	9803      	ldr	r0, [sp, #12]
   10212:	b019      	add	sp, #100	; 0x64
   10214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10218:	ab16      	add	r3, sp, #88	; 0x58
   1021a:	9301      	str	r3, [sp, #4]
   1021c:	ab17      	add	r3, sp, #92	; 0x5c
   1021e:	9300      	str	r3, [sp, #0]
   10220:	4620      	mov	r0, r4
   10222:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   10226:	f7fd fe83 	bl	df30 <__d2b>
   1022a:	ea5f 561a 	movs.w	r6, sl, lsr #20
   1022e:	4605      	mov	r5, r0
   10230:	f040 8097 	bne.w	10362 <_dtoa_r+0x1ca>
   10234:	e9dd 7616 	ldrd	r7, r6, [sp, #88]	; 0x58
   10238:	443e      	add	r6, r7
   1023a:	f206 4332 	addw	r3, r6, #1074	; 0x432
   1023e:	2b20      	cmp	r3, #32
   10240:	f340 83a6 	ble.w	10990 <_dtoa_r+0x7f8>
   10244:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   10248:	fa0a fa03 	lsl.w	sl, sl, r3
   1024c:	f206 4312 	addw	r3, r6, #1042	; 0x412
   10250:	fa28 f003 	lsr.w	r0, r8, r3
   10254:	ea4a 0000 	orr.w	r0, sl, r0
   10258:	f7fb fd2a 	bl	bcb0 <__aeabi_ui2d>
   1025c:	2301      	movs	r3, #1
   1025e:	3e01      	subs	r6, #1
   10260:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   10264:	930f      	str	r3, [sp, #60]	; 0x3c
   10266:	4b52      	ldr	r3, [pc, #328]	; (103b0 <_dtoa_r+0x218>)
   10268:	2200      	movs	r2, #0
   1026a:	f7fb fbe3 	bl	ba34 <__aeabi_dsub>
   1026e:	a348      	add	r3, pc, #288	; (adr r3, 10390 <_dtoa_r+0x1f8>)
   10270:	e9d3 2300 	ldrd	r2, r3, [r3]
   10274:	f002 fbd0 	bl	12a18 <__aeabi_dmul>
   10278:	a347      	add	r3, pc, #284	; (adr r3, 10398 <_dtoa_r+0x200>)
   1027a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1027e:	f7fb fbdb 	bl	ba38 <__adddf3>
   10282:	4680      	mov	r8, r0
   10284:	4630      	mov	r0, r6
   10286:	4689      	mov	r9, r1
   10288:	f7fb fd22 	bl	bcd0 <__aeabi_i2d>
   1028c:	a344      	add	r3, pc, #272	; (adr r3, 103a0 <_dtoa_r+0x208>)
   1028e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10292:	f002 fbc1 	bl	12a18 <__aeabi_dmul>
   10296:	4602      	mov	r2, r0
   10298:	460b      	mov	r3, r1
   1029a:	4640      	mov	r0, r8
   1029c:	4649      	mov	r1, r9
   1029e:	f7fb fbcb 	bl	ba38 <__adddf3>
   102a2:	4680      	mov	r8, r0
   102a4:	4689      	mov	r9, r1
   102a6:	f002 fdc9 	bl	12e3c <__aeabi_d2iz>
   102aa:	2200      	movs	r2, #0
   102ac:	4683      	mov	fp, r0
   102ae:	2300      	movs	r3, #0
   102b0:	4640      	mov	r0, r8
   102b2:	4649      	mov	r1, r9
   102b4:	f7fb fdd6 	bl	be64 <__aeabi_dcmplt>
   102b8:	2800      	cmp	r0, #0
   102ba:	f040 8345 	bne.w	10948 <_dtoa_r+0x7b0>
   102be:	f1bb 0f16 	cmp.w	fp, #22
   102c2:	f200 8334 	bhi.w	1092e <_dtoa_r+0x796>
   102c6:	4b3b      	ldr	r3, [pc, #236]	; (103b4 <_dtoa_r+0x21c>)
   102c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   102cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   102d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   102d4:	f7fb fdc6 	bl	be64 <__aeabi_dcmplt>
   102d8:	2800      	cmp	r0, #0
   102da:	d071      	beq.n	103c0 <_dtoa_r+0x228>
   102dc:	2300      	movs	r3, #0
   102de:	1bbf      	subs	r7, r7, r6
   102e0:	930e      	str	r3, [sp, #56]	; 0x38
   102e2:	1e7b      	subs	r3, r7, #1
   102e4:	f10b 3bff 	add.w	fp, fp, #4294967295
   102e8:	9306      	str	r3, [sp, #24]
   102ea:	f100 8327 	bmi.w	1093c <_dtoa_r+0x7a4>
   102ee:	2300      	movs	r3, #0
   102f0:	9309      	str	r3, [sp, #36]	; 0x24
   102f2:	f1bb 0f00 	cmp.w	fp, #0
   102f6:	da6a      	bge.n	103ce <_dtoa_r+0x236>
   102f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   102fa:	f8cd b01c 	str.w	fp, [sp, #28]
   102fe:	eba3 030b 	sub.w	r3, r3, fp
   10302:	9309      	str	r3, [sp, #36]	; 0x24
   10304:	f1cb 0300 	rsb	r3, fp, #0
   10308:	930d      	str	r3, [sp, #52]	; 0x34
   1030a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1030c:	2b09      	cmp	r3, #9
   1030e:	f04f 0b00 	mov.w	fp, #0
   10312:	d865      	bhi.n	103e0 <_dtoa_r+0x248>
   10314:	2b05      	cmp	r3, #5
   10316:	f340 8339 	ble.w	1098c <_dtoa_r+0x7f4>
   1031a:	3b04      	subs	r3, #4
   1031c:	9322      	str	r3, [sp, #136]	; 0x88
   1031e:	2600      	movs	r6, #0
   10320:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10322:	3b02      	subs	r3, #2
   10324:	2b03      	cmp	r3, #3
   10326:	f200 8667 	bhi.w	10ff8 <_dtoa_r+0xe60>
   1032a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1032e:	044e      	.short	0x044e
   10330:	0442044b 	.word	0x0442044b
   10334:	0425      	.short	0x0425
   10336:	9a24      	ldr	r2, [sp, #144]	; 0x90
   10338:	f3ca 0a13 	ubfx	sl, sl, #0, #20
   1033c:	f242 730f 	movw	r3, #9999	; 0x270f
   10340:	ea5a 0a08 	orrs.w	sl, sl, r8
   10344:	6013      	str	r3, [r2, #0]
   10346:	d11a      	bne.n	1037e <_dtoa_r+0x1e6>
   10348:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1034a:	2b00      	cmp	r3, #0
   1034c:	f000 8663 	beq.w	11016 <_dtoa_r+0xe7e>
   10350:	4b19      	ldr	r3, [pc, #100]	; (103b8 <_dtoa_r+0x220>)
   10352:	9303      	str	r3, [sp, #12]
   10354:	3308      	adds	r3, #8
   10356:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10358:	9803      	ldr	r0, [sp, #12]
   1035a:	6013      	str	r3, [r2, #0]
   1035c:	b019      	add	sp, #100	; 0x64
   1035e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10362:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   10366:	f3c2 0313 	ubfx	r3, r2, #0, #20
   1036a:	4608      	mov	r0, r1
   1036c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   10370:	970f      	str	r7, [sp, #60]	; 0x3c
   10372:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   10376:	9f16      	ldr	r7, [sp, #88]	; 0x58
   10378:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   1037c:	e773      	b.n	10266 <_dtoa_r+0xce>
   1037e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   10380:	2b00      	cmp	r3, #0
   10382:	f040 83db 	bne.w	10b3c <_dtoa_r+0x9a4>
   10386:	4b0d      	ldr	r3, [pc, #52]	; (103bc <_dtoa_r+0x224>)
   10388:	9303      	str	r3, [sp, #12]
   1038a:	e741      	b.n	10210 <_dtoa_r+0x78>
   1038c:	f3af 8000 	nop.w
   10390:	636f4361 	.word	0x636f4361
   10394:	3fd287a7 	.word	0x3fd287a7
   10398:	8b60c8b3 	.word	0x8b60c8b3
   1039c:	3fc68a28 	.word	0x3fc68a28
   103a0:	509f79fb 	.word	0x509f79fb
   103a4:	3fd34413 	.word	0x3fd34413
   103a8:	7ff00000 	.word	0x7ff00000
   103ac:	00013399 	.word	0x00013399
   103b0:	3ff80000 	.word	0x3ff80000
   103b4:	00014878 	.word	0x00014878
   103b8:	000149e4 	.word	0x000149e4
   103bc:	000149f0 	.word	0x000149f0
   103c0:	1bbf      	subs	r7, r7, r6
   103c2:	1e7b      	subs	r3, r7, #1
   103c4:	9306      	str	r3, [sp, #24]
   103c6:	f100 847e 	bmi.w	10cc6 <_dtoa_r+0xb2e>
   103ca:	900e      	str	r0, [sp, #56]	; 0x38
   103cc:	9009      	str	r0, [sp, #36]	; 0x24
   103ce:	9b06      	ldr	r3, [sp, #24]
   103d0:	445b      	add	r3, fp
   103d2:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   103d6:	2300      	movs	r3, #0
   103d8:	930d      	str	r3, [sp, #52]	; 0x34
   103da:	9b22      	ldr	r3, [sp, #136]	; 0x88
   103dc:	2b09      	cmp	r3, #9
   103de:	d999      	bls.n	10314 <_dtoa_r+0x17c>
   103e0:	2300      	movs	r3, #0
   103e2:	e9cd 3322 	strd	r3, r3, [sp, #136]	; 0x88
   103e6:	2601      	movs	r6, #1
   103e8:	f04f 33ff 	mov.w	r3, #4294967295
   103ec:	960c      	str	r6, [sp, #48]	; 0x30
   103ee:	9308      	str	r3, [sp, #32]
   103f0:	9b08      	ldr	r3, [sp, #32]
   103f2:	9312      	str	r3, [sp, #72]	; 0x48
   103f4:	2100      	movs	r1, #0
   103f6:	63e1      	str	r1, [r4, #60]	; 0x3c
   103f8:	4620      	mov	r0, r4
   103fa:	f7fd fa4b 	bl	d894 <_Balloc>
   103fe:	9003      	str	r0, [sp, #12]
   10400:	2800      	cmp	r0, #0
   10402:	f000 8601 	beq.w	11008 <_dtoa_r+0xe70>
   10406:	9b03      	ldr	r3, [sp, #12]
   10408:	63a3      	str	r3, [r4, #56]	; 0x38
   1040a:	9b08      	ldr	r3, [sp, #32]
   1040c:	2b0e      	cmp	r3, #14
   1040e:	f200 8113 	bhi.w	10638 <_dtoa_r+0x4a0>
   10412:	2e00      	cmp	r6, #0
   10414:	f000 8110 	beq.w	10638 <_dtoa_r+0x4a0>
   10418:	9907      	ldr	r1, [sp, #28]
   1041a:	2900      	cmp	r1, #0
   1041c:	f340 8455 	ble.w	10cca <_dtoa_r+0xb32>
   10420:	4bae      	ldr	r3, [pc, #696]	; (106dc <_dtoa_r+0x544>)
   10422:	f001 020f 	and.w	r2, r1, #15
   10426:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1042a:	ea4f 1821 	mov.w	r8, r1, asr #4
   1042e:	05c9      	lsls	r1, r1, #23
   10430:	e9d3 6700 	ldrd	r6, r7, [r3]
   10434:	f140 8411 	bpl.w	10c5a <_dtoa_r+0xac2>
   10438:	4ba9      	ldr	r3, [pc, #676]	; (106e0 <_dtoa_r+0x548>)
   1043a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1043e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   10442:	f002 fc13 	bl	12c6c <__aeabi_ddiv>
   10446:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   1044a:	f008 080f 	and.w	r8, r8, #15
   1044e:	f04f 0a03 	mov.w	sl, #3
   10452:	f1b8 0f00 	cmp.w	r8, #0
   10456:	d013      	beq.n	10480 <_dtoa_r+0x2e8>
   10458:	f8df 9284 	ldr.w	r9, [pc, #644]	; 106e0 <_dtoa_r+0x548>
   1045c:	f018 0f01 	tst.w	r8, #1
   10460:	d009      	beq.n	10476 <_dtoa_r+0x2de>
   10462:	4630      	mov	r0, r6
   10464:	4639      	mov	r1, r7
   10466:	e9d9 2300 	ldrd	r2, r3, [r9]
   1046a:	f002 fad5 	bl	12a18 <__aeabi_dmul>
   1046e:	f10a 0a01 	add.w	sl, sl, #1
   10472:	4606      	mov	r6, r0
   10474:	460f      	mov	r7, r1
   10476:	ea5f 0868 	movs.w	r8, r8, asr #1
   1047a:	f109 0908 	add.w	r9, r9, #8
   1047e:	d1ed      	bne.n	1045c <_dtoa_r+0x2c4>
   10480:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   10484:	4632      	mov	r2, r6
   10486:	463b      	mov	r3, r7
   10488:	f002 fbf0 	bl	12c6c <__aeabi_ddiv>
   1048c:	4680      	mov	r8, r0
   1048e:	4689      	mov	r9, r1
   10490:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10492:	b143      	cbz	r3, 104a6 <_dtoa_r+0x30e>
   10494:	4b93      	ldr	r3, [pc, #588]	; (106e4 <_dtoa_r+0x54c>)
   10496:	2200      	movs	r2, #0
   10498:	4640      	mov	r0, r8
   1049a:	4649      	mov	r1, r9
   1049c:	f7fb fce2 	bl	be64 <__aeabi_dcmplt>
   104a0:	2800      	cmp	r0, #0
   104a2:	f040 852a 	bne.w	10efa <_dtoa_r+0xd62>
   104a6:	4650      	mov	r0, sl
   104a8:	f7fb fc12 	bl	bcd0 <__aeabi_i2d>
   104ac:	4642      	mov	r2, r8
   104ae:	464b      	mov	r3, r9
   104b0:	f002 fab2 	bl	12a18 <__aeabi_dmul>
   104b4:	4b8c      	ldr	r3, [pc, #560]	; (106e8 <_dtoa_r+0x550>)
   104b6:	2200      	movs	r2, #0
   104b8:	f7fb fabe 	bl	ba38 <__adddf3>
   104bc:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   104c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   104c4:	9311      	str	r3, [sp, #68]	; 0x44
   104c6:	9b08      	ldr	r3, [sp, #32]
   104c8:	2b00      	cmp	r3, #0
   104ca:	f000 8099 	beq.w	10600 <_dtoa_r+0x468>
   104ce:	9b07      	ldr	r3, [sp, #28]
   104d0:	9314      	str	r3, [sp, #80]	; 0x50
   104d2:	9b08      	ldr	r3, [sp, #32]
   104d4:	9313      	str	r3, [sp, #76]	; 0x4c
   104d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   104d8:	2b00      	cmp	r3, #0
   104da:	f000 84a5 	beq.w	10e28 <_dtoa_r+0xc90>
   104de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   104e0:	4b7e      	ldr	r3, [pc, #504]	; (106dc <_dtoa_r+0x544>)
   104e2:	4982      	ldr	r1, [pc, #520]	; (106ec <_dtoa_r+0x554>)
   104e4:	9e03      	ldr	r6, [sp, #12]
   104e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   104ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   104ee:	2000      	movs	r0, #0
   104f0:	f002 fbbc 	bl	12c6c <__aeabi_ddiv>
   104f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   104f8:	f7fb fa9c 	bl	ba34 <__aeabi_dsub>
   104fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   10500:	4649      	mov	r1, r9
   10502:	4640      	mov	r0, r8
   10504:	f002 fc9a 	bl	12e3c <__aeabi_d2iz>
   10508:	4607      	mov	r7, r0
   1050a:	f7fb fbe1 	bl	bcd0 <__aeabi_i2d>
   1050e:	4602      	mov	r2, r0
   10510:	460b      	mov	r3, r1
   10512:	4640      	mov	r0, r8
   10514:	4649      	mov	r1, r9
   10516:	f7fb fa8d 	bl	ba34 <__aeabi_dsub>
   1051a:	3730      	adds	r7, #48	; 0x30
   1051c:	4680      	mov	r8, r0
   1051e:	4689      	mov	r9, r1
   10520:	4602      	mov	r2, r0
   10522:	460b      	mov	r3, r1
   10524:	f806 7b01 	strb.w	r7, [r6], #1
   10528:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1052c:	f7fb fcb8 	bl	bea0 <__aeabi_dcmpgt>
   10530:	2800      	cmp	r0, #0
   10532:	f040 8527 	bne.w	10f84 <_dtoa_r+0xdec>
   10536:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
   1053a:	2700      	movs	r7, #0
   1053c:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   10540:	9510      	str	r5, [sp, #64]	; 0x40
   10542:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   10544:	9413      	str	r4, [sp, #76]	; 0x4c
   10546:	e02a      	b.n	1059e <_dtoa_r+0x406>
   10548:	3701      	adds	r7, #1
   1054a:	42af      	cmp	r7, r5
   1054c:	f280 852a 	bge.w	10fa4 <_dtoa_r+0xe0c>
   10550:	4b67      	ldr	r3, [pc, #412]	; (106f0 <_dtoa_r+0x558>)
   10552:	4650      	mov	r0, sl
   10554:	4659      	mov	r1, fp
   10556:	2200      	movs	r2, #0
   10558:	f002 fa5e 	bl	12a18 <__aeabi_dmul>
   1055c:	4b64      	ldr	r3, [pc, #400]	; (106f0 <_dtoa_r+0x558>)
   1055e:	2200      	movs	r2, #0
   10560:	4682      	mov	sl, r0
   10562:	468b      	mov	fp, r1
   10564:	4640      	mov	r0, r8
   10566:	4649      	mov	r1, r9
   10568:	f002 fa56 	bl	12a18 <__aeabi_dmul>
   1056c:	4689      	mov	r9, r1
   1056e:	4680      	mov	r8, r0
   10570:	f002 fc64 	bl	12e3c <__aeabi_d2iz>
   10574:	4604      	mov	r4, r0
   10576:	f7fb fbab 	bl	bcd0 <__aeabi_i2d>
   1057a:	4602      	mov	r2, r0
   1057c:	460b      	mov	r3, r1
   1057e:	4640      	mov	r0, r8
   10580:	4649      	mov	r1, r9
   10582:	f7fb fa57 	bl	ba34 <__aeabi_dsub>
   10586:	3430      	adds	r4, #48	; 0x30
   10588:	f806 4b01 	strb.w	r4, [r6], #1
   1058c:	4652      	mov	r2, sl
   1058e:	465b      	mov	r3, fp
   10590:	4680      	mov	r8, r0
   10592:	4689      	mov	r9, r1
   10594:	f7fb fc66 	bl	be64 <__aeabi_dcmplt>
   10598:	2800      	cmp	r0, #0
   1059a:	f040 84f1 	bne.w	10f80 <_dtoa_r+0xde8>
   1059e:	4642      	mov	r2, r8
   105a0:	464b      	mov	r3, r9
   105a2:	4950      	ldr	r1, [pc, #320]	; (106e4 <_dtoa_r+0x54c>)
   105a4:	2000      	movs	r0, #0
   105a6:	f7fb fa45 	bl	ba34 <__aeabi_dsub>
   105aa:	4652      	mov	r2, sl
   105ac:	465b      	mov	r3, fp
   105ae:	f7fb fc59 	bl	be64 <__aeabi_dcmplt>
   105b2:	2800      	cmp	r0, #0
   105b4:	d0c8      	beq.n	10548 <_dtoa_r+0x3b0>
   105b6:	e9dd 4313 	ldrd	r4, r3, [sp, #76]	; 0x4c
   105ba:	9d10      	ldr	r5, [sp, #64]	; 0x40
   105bc:	9a03      	ldr	r2, [sp, #12]
   105be:	9307      	str	r3, [sp, #28]
   105c0:	e002      	b.n	105c8 <_dtoa_r+0x430>
   105c2:	42b2      	cmp	r2, r6
   105c4:	f000 84c6 	beq.w	10f54 <_dtoa_r+0xdbc>
   105c8:	46b1      	mov	r9, r6
   105ca:	f816 3d01 	ldrb.w	r3, [r6, #-1]!
   105ce:	2b39      	cmp	r3, #57	; 0x39
   105d0:	d0f7      	beq.n	105c2 <_dtoa_r+0x42a>
   105d2:	3301      	adds	r3, #1
   105d4:	b2db      	uxtb	r3, r3
   105d6:	7033      	strb	r3, [r6, #0]
   105d8:	9b07      	ldr	r3, [sp, #28]
   105da:	3301      	adds	r3, #1
   105dc:	9307      	str	r3, [sp, #28]
   105de:	e192      	b.n	10906 <_dtoa_r+0x76e>
   105e0:	4650      	mov	r0, sl
   105e2:	f7fb fb75 	bl	bcd0 <__aeabi_i2d>
   105e6:	4642      	mov	r2, r8
   105e8:	464b      	mov	r3, r9
   105ea:	f002 fa15 	bl	12a18 <__aeabi_dmul>
   105ee:	4b3e      	ldr	r3, [pc, #248]	; (106e8 <_dtoa_r+0x550>)
   105f0:	2200      	movs	r2, #0
   105f2:	f7fb fa21 	bl	ba38 <__adddf3>
   105f6:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   105fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   105fe:	9311      	str	r3, [sp, #68]	; 0x44
   10600:	4b3c      	ldr	r3, [pc, #240]	; (106f4 <_dtoa_r+0x55c>)
   10602:	4640      	mov	r0, r8
   10604:	4649      	mov	r1, r9
   10606:	2200      	movs	r2, #0
   10608:	f7fb fa14 	bl	ba34 <__aeabi_dsub>
   1060c:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   10610:	4642      	mov	r2, r8
   10612:	464b      	mov	r3, r9
   10614:	4606      	mov	r6, r0
   10616:	460f      	mov	r7, r1
   10618:	f7fb fc42 	bl	bea0 <__aeabi_dcmpgt>
   1061c:	4682      	mov	sl, r0
   1061e:	2800      	cmp	r0, #0
   10620:	f040 84a8 	bne.w	10f74 <_dtoa_r+0xddc>
   10624:	4642      	mov	r2, r8
   10626:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   1062a:	4630      	mov	r0, r6
   1062c:	4639      	mov	r1, r7
   1062e:	f7fb fc19 	bl	be64 <__aeabi_dcmplt>
   10632:	2800      	cmp	r0, #0
   10634:	f040 8345 	bne.w	10cc2 <_dtoa_r+0xb2a>
   10638:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1063a:	2b00      	cmp	r3, #0
   1063c:	f2c0 808c 	blt.w	10758 <_dtoa_r+0x5c0>
   10640:	9a07      	ldr	r2, [sp, #28]
   10642:	2a0e      	cmp	r2, #14
   10644:	f300 8088 	bgt.w	10758 <_dtoa_r+0x5c0>
   10648:	4b24      	ldr	r3, [pc, #144]	; (106dc <_dtoa_r+0x544>)
   1064a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1064e:	e9d3 ab00 	ldrd	sl, fp, [r3]
   10652:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   10654:	2b00      	cmp	r3, #0
   10656:	da1b      	bge.n	10690 <_dtoa_r+0x4f8>
   10658:	9b08      	ldr	r3, [sp, #32]
   1065a:	2b00      	cmp	r3, #0
   1065c:	dc18      	bgt.n	10690 <_dtoa_r+0x4f8>
   1065e:	f040 832e 	bne.w	10cbe <_dtoa_r+0xb26>
   10662:	4b24      	ldr	r3, [pc, #144]	; (106f4 <_dtoa_r+0x55c>)
   10664:	4650      	mov	r0, sl
   10666:	2200      	movs	r2, #0
   10668:	4659      	mov	r1, fp
   1066a:	f002 f9d5 	bl	12a18 <__aeabi_dmul>
   1066e:	4602      	mov	r2, r0
   10670:	460b      	mov	r3, r1
   10672:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   10676:	f7fb fbff 	bl	be78 <__aeabi_dcmple>
   1067a:	f8dd a020 	ldr.w	sl, [sp, #32]
   1067e:	4656      	mov	r6, sl
   10680:	2800      	cmp	r0, #0
   10682:	f000 82b9 	beq.w	10bf8 <_dtoa_r+0xa60>
   10686:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   10688:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1068c:	43df      	mvns	r7, r3
   1068e:	e2bb      	b.n	10c08 <_dtoa_r+0xa70>
   10690:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
   10694:	4652      	mov	r2, sl
   10696:	465b      	mov	r3, fp
   10698:	4638      	mov	r0, r7
   1069a:	4641      	mov	r1, r8
   1069c:	f002 fae6 	bl	12c6c <__aeabi_ddiv>
   106a0:	f002 fbcc 	bl	12e3c <__aeabi_d2iz>
   106a4:	4681      	mov	r9, r0
   106a6:	9009      	str	r0, [sp, #36]	; 0x24
   106a8:	f7fb fb12 	bl	bcd0 <__aeabi_i2d>
   106ac:	4652      	mov	r2, sl
   106ae:	465b      	mov	r3, fp
   106b0:	f002 f9b2 	bl	12a18 <__aeabi_dmul>
   106b4:	9e03      	ldr	r6, [sp, #12]
   106b6:	460b      	mov	r3, r1
   106b8:	4602      	mov	r2, r0
   106ba:	4641      	mov	r1, r8
   106bc:	4638      	mov	r0, r7
   106be:	f7fb f9b9 	bl	ba34 <__aeabi_dsub>
   106c2:	f109 0330 	add.w	r3, r9, #48	; 0x30
   106c6:	f806 3b01 	strb.w	r3, [r6], #1
   106ca:	9b08      	ldr	r3, [sp, #32]
   106cc:	2b01      	cmp	r3, #1
   106ce:	f000 835c 	beq.w	10d8a <_dtoa_r+0xbf2>
   106d2:	9406      	str	r4, [sp, #24]
   106d4:	2701      	movs	r7, #1
   106d6:	9504      	str	r5, [sp, #16]
   106d8:	461c      	mov	r4, r3
   106da:	e02a      	b.n	10732 <_dtoa_r+0x59a>
   106dc:	00014878 	.word	0x00014878
   106e0:	00014850 	.word	0x00014850
   106e4:	3ff00000 	.word	0x3ff00000
   106e8:	401c0000 	.word	0x401c0000
   106ec:	3fe00000 	.word	0x3fe00000
   106f0:	40240000 	.word	0x40240000
   106f4:	40140000 	.word	0x40140000
   106f8:	4652      	mov	r2, sl
   106fa:	465b      	mov	r3, fp
   106fc:	4640      	mov	r0, r8
   106fe:	4649      	mov	r1, r9
   10700:	f002 fab4 	bl	12c6c <__aeabi_ddiv>
   10704:	f002 fb9a 	bl	12e3c <__aeabi_d2iz>
   10708:	4605      	mov	r5, r0
   1070a:	f7fb fae1 	bl	bcd0 <__aeabi_i2d>
   1070e:	4652      	mov	r2, sl
   10710:	465b      	mov	r3, fp
   10712:	f002 f981 	bl	12a18 <__aeabi_dmul>
   10716:	3701      	adds	r7, #1
   10718:	460b      	mov	r3, r1
   1071a:	4602      	mov	r2, r0
   1071c:	4649      	mov	r1, r9
   1071e:	4640      	mov	r0, r8
   10720:	f7fb f988 	bl	ba34 <__aeabi_dsub>
   10724:	f105 0330 	add.w	r3, r5, #48	; 0x30
   10728:	42a7      	cmp	r7, r4
   1072a:	f806 3b01 	strb.w	r3, [r6], #1
   1072e:	f000 8329 	beq.w	10d84 <_dtoa_r+0xbec>
   10732:	4ba5      	ldr	r3, [pc, #660]	; (109c8 <_dtoa_r+0x830>)
   10734:	2200      	movs	r2, #0
   10736:	f002 f96f 	bl	12a18 <__aeabi_dmul>
   1073a:	2200      	movs	r2, #0
   1073c:	2300      	movs	r3, #0
   1073e:	4680      	mov	r8, r0
   10740:	4689      	mov	r9, r1
   10742:	f7fb fb85 	bl	be50 <__aeabi_dcmpeq>
   10746:	2800      	cmp	r0, #0
   10748:	d0d6      	beq.n	106f8 <_dtoa_r+0x560>
   1074a:	9d04      	ldr	r5, [sp, #16]
   1074c:	9c06      	ldr	r4, [sp, #24]
   1074e:	9b07      	ldr	r3, [sp, #28]
   10750:	3301      	adds	r3, #1
   10752:	9307      	str	r3, [sp, #28]
   10754:	46b1      	mov	r9, r6
   10756:	e0d6      	b.n	10906 <_dtoa_r+0x76e>
   10758:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1075a:	2a00      	cmp	r2, #0
   1075c:	f000 8107 	beq.w	1096e <_dtoa_r+0x7d6>
   10760:	9a22      	ldr	r2, [sp, #136]	; 0x88
   10762:	2a01      	cmp	r2, #1
   10764:	f340 8294 	ble.w	10c90 <_dtoa_r+0xaf8>
   10768:	9b08      	ldr	r3, [sp, #32]
   1076a:	f103 38ff 	add.w	r8, r3, #4294967295
   1076e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10770:	4543      	cmp	r3, r8
   10772:	f280 825e 	bge.w	10c32 <_dtoa_r+0xa9a>
   10776:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10778:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   1077c:	eba8 0303 	sub.w	r3, r8, r3
   10780:	449b      	add	fp, r3
   10782:	f04f 0800 	mov.w	r8, #0
   10786:	9b08      	ldr	r3, [sp, #32]
   10788:	2b00      	cmp	r3, #0
   1078a:	f2c0 832f 	blt.w	10dec <_dtoa_r+0xc54>
   1078e:	9a06      	ldr	r2, [sp, #24]
   10790:	441a      	add	r2, r3
   10792:	9206      	str	r2, [sp, #24]
   10794:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10796:	4617      	mov	r7, r2
   10798:	441a      	add	r2, r3
   1079a:	9209      	str	r2, [sp, #36]	; 0x24
   1079c:	2101      	movs	r1, #1
   1079e:	4620      	mov	r0, r4
   107a0:	f7fd f948 	bl	da34 <__i2b>
   107a4:	4606      	mov	r6, r0
   107a6:	b167      	cbz	r7, 107c2 <_dtoa_r+0x62a>
   107a8:	9906      	ldr	r1, [sp, #24]
   107aa:	2900      	cmp	r1, #0
   107ac:	460b      	mov	r3, r1
   107ae:	dd08      	ble.n	107c2 <_dtoa_r+0x62a>
   107b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   107b2:	42b9      	cmp	r1, r7
   107b4:	bfa8      	it	ge
   107b6:	463b      	movge	r3, r7
   107b8:	1ad2      	subs	r2, r2, r3
   107ba:	1aff      	subs	r7, r7, r3
   107bc:	1acb      	subs	r3, r1, r3
   107be:	9209      	str	r2, [sp, #36]	; 0x24
   107c0:	9306      	str	r3, [sp, #24]
   107c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   107c4:	b163      	cbz	r3, 107e0 <_dtoa_r+0x648>
   107c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   107c8:	2b00      	cmp	r3, #0
   107ca:	f000 82b6 	beq.w	10d3a <_dtoa_r+0xba2>
   107ce:	f1b8 0f00 	cmp.w	r8, #0
   107d2:	f300 8231 	bgt.w	10c38 <_dtoa_r+0xaa0>
   107d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   107d8:	ebb3 0208 	subs.w	r2, r3, r8
   107dc:	f040 8316 	bne.w	10e0c <_dtoa_r+0xc74>
   107e0:	2101      	movs	r1, #1
   107e2:	4620      	mov	r0, r4
   107e4:	f7fd f926 	bl	da34 <__i2b>
   107e8:	f1bb 0f00 	cmp.w	fp, #0
   107ec:	4682      	mov	sl, r0
   107ee:	f300 80d4 	bgt.w	1099a <_dtoa_r+0x802>
   107f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   107f4:	2b01      	cmp	r3, #1
   107f6:	f340 81a7 	ble.w	10b48 <_dtoa_r+0x9b0>
   107fa:	f04f 0900 	mov.w	r9, #0
   107fe:	2001      	movs	r0, #1
   10800:	f1bb 0f00 	cmp.w	fp, #0
   10804:	f040 80d5 	bne.w	109b2 <_dtoa_r+0x81a>
   10808:	9b06      	ldr	r3, [sp, #24]
   1080a:	4418      	add	r0, r3
   1080c:	f010 001f 	ands.w	r0, r0, #31
   10810:	f000 8198 	beq.w	10b44 <_dtoa_r+0x9ac>
   10814:	f1c0 0320 	rsb	r3, r0, #32
   10818:	2b04      	cmp	r3, #4
   1081a:	f300 80ad 	bgt.w	10978 <_dtoa_r+0x7e0>
   1081e:	f040 8224 	bne.w	10c6a <_dtoa_r+0xad2>
   10822:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10824:	2b00      	cmp	r3, #0
   10826:	dd05      	ble.n	10834 <_dtoa_r+0x69c>
   10828:	4629      	mov	r1, r5
   1082a:	461a      	mov	r2, r3
   1082c:	4620      	mov	r0, r4
   1082e:	f7fd fa3d 	bl	dcac <__lshift>
   10832:	4605      	mov	r5, r0
   10834:	9b06      	ldr	r3, [sp, #24]
   10836:	2b00      	cmp	r3, #0
   10838:	dd05      	ble.n	10846 <_dtoa_r+0x6ae>
   1083a:	4651      	mov	r1, sl
   1083c:	461a      	mov	r2, r3
   1083e:	4620      	mov	r0, r4
   10840:	f7fd fa34 	bl	dcac <__lshift>
   10844:	4682      	mov	sl, r0
   10846:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10848:	2b00      	cmp	r3, #0
   1084a:	f040 815c 	bne.w	10b06 <_dtoa_r+0x96e>
   1084e:	9b08      	ldr	r3, [sp, #32]
   10850:	2b00      	cmp	r3, #0
   10852:	f340 8143 	ble.w	10adc <_dtoa_r+0x944>
   10856:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10858:	2b00      	cmp	r3, #0
   1085a:	f040 80c6 	bne.w	109ea <_dtoa_r+0x852>
   1085e:	9b07      	ldr	r3, [sp, #28]
   10860:	3301      	adds	r3, #1
   10862:	9307      	str	r3, [sp, #28]
   10864:	f8dd 800c 	ldr.w	r8, [sp, #12]
   10868:	f8dd 9020 	ldr.w	r9, [sp, #32]
   1086c:	2701      	movs	r7, #1
   1086e:	e007      	b.n	10880 <_dtoa_r+0x6e8>
   10870:	4629      	mov	r1, r5
   10872:	2300      	movs	r3, #0
   10874:	220a      	movs	r2, #10
   10876:	4620      	mov	r0, r4
   10878:	f7fd f83c 	bl	d8f4 <__multadd>
   1087c:	3701      	adds	r7, #1
   1087e:	4605      	mov	r5, r0
   10880:	4651      	mov	r1, sl
   10882:	4628      	mov	r0, r5
   10884:	f7ff fbf4 	bl	10070 <quorem>
   10888:	45b9      	cmp	r9, r7
   1088a:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1088e:	f808 3b01 	strb.w	r3, [r8], #1
   10892:	dced      	bgt.n	10870 <_dtoa_r+0x6d8>
   10894:	9a08      	ldr	r2, [sp, #32]
   10896:	2a00      	cmp	r2, #0
   10898:	bfc8      	it	gt
   1089a:	4693      	movgt	fp, r2
   1089c:	9a03      	ldr	r2, [sp, #12]
   1089e:	bfd8      	it	le
   108a0:	f04f 0b01 	movle.w	fp, #1
   108a4:	4493      	add	fp, r2
   108a6:	2700      	movs	r7, #0
   108a8:	4629      	mov	r1, r5
   108aa:	2201      	movs	r2, #1
   108ac:	4620      	mov	r0, r4
   108ae:	9304      	str	r3, [sp, #16]
   108b0:	f7fd f9fc 	bl	dcac <__lshift>
   108b4:	4651      	mov	r1, sl
   108b6:	4605      	mov	r5, r0
   108b8:	f7fd fa70 	bl	dd9c <__mcmp>
   108bc:	2800      	cmp	r0, #0
   108be:	f340 81dc 	ble.w	10c7a <_dtoa_r+0xae2>
   108c2:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   108c6:	9a03      	ldr	r2, [sp, #12]
   108c8:	f10b 3bff 	add.w	fp, fp, #4294967295
   108cc:	e004      	b.n	108d8 <_dtoa_r+0x740>
   108ce:	455a      	cmp	r2, fp
   108d0:	f000 81ee 	beq.w	10cb0 <_dtoa_r+0xb18>
   108d4:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   108d8:	2b39      	cmp	r3, #57	; 0x39
   108da:	f10b 0901 	add.w	r9, fp, #1
   108de:	d0f6      	beq.n	108ce <_dtoa_r+0x736>
   108e0:	3301      	adds	r3, #1
   108e2:	f88b 3000 	strb.w	r3, [fp]
   108e6:	4651      	mov	r1, sl
   108e8:	4620      	mov	r0, r4
   108ea:	f7fc fff9 	bl	d8e0 <_Bfree>
   108ee:	b156      	cbz	r6, 10906 <_dtoa_r+0x76e>
   108f0:	b12f      	cbz	r7, 108fe <_dtoa_r+0x766>
   108f2:	42b7      	cmp	r7, r6
   108f4:	d003      	beq.n	108fe <_dtoa_r+0x766>
   108f6:	4639      	mov	r1, r7
   108f8:	4620      	mov	r0, r4
   108fa:	f7fc fff1 	bl	d8e0 <_Bfree>
   108fe:	4631      	mov	r1, r6
   10900:	4620      	mov	r0, r4
   10902:	f7fc ffed 	bl	d8e0 <_Bfree>
   10906:	4629      	mov	r1, r5
   10908:	4620      	mov	r0, r4
   1090a:	f7fc ffe9 	bl	d8e0 <_Bfree>
   1090e:	2300      	movs	r3, #0
   10910:	f889 3000 	strb.w	r3, [r9]
   10914:	9b24      	ldr	r3, [sp, #144]	; 0x90
   10916:	9a07      	ldr	r2, [sp, #28]
   10918:	601a      	str	r2, [r3, #0]
   1091a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1091c:	2b00      	cmp	r3, #0
   1091e:	f43f ac77 	beq.w	10210 <_dtoa_r+0x78>
   10922:	9803      	ldr	r0, [sp, #12]
   10924:	f8c3 9000 	str.w	r9, [r3]
   10928:	b019      	add	sp, #100	; 0x64
   1092a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1092e:	2301      	movs	r3, #1
   10930:	1bbf      	subs	r7, r7, r6
   10932:	930e      	str	r3, [sp, #56]	; 0x38
   10934:	1e7b      	subs	r3, r7, #1
   10936:	9306      	str	r3, [sp, #24]
   10938:	f57f acd9 	bpl.w	102ee <_dtoa_r+0x156>
   1093c:	f1c7 0301 	rsb	r3, r7, #1
   10940:	9309      	str	r3, [sp, #36]	; 0x24
   10942:	2300      	movs	r3, #0
   10944:	9306      	str	r3, [sp, #24]
   10946:	e4d4      	b.n	102f2 <_dtoa_r+0x15a>
   10948:	4658      	mov	r0, fp
   1094a:	f7fb f9c1 	bl	bcd0 <__aeabi_i2d>
   1094e:	4642      	mov	r2, r8
   10950:	464b      	mov	r3, r9
   10952:	f7fb fa7d 	bl	be50 <__aeabi_dcmpeq>
   10956:	2800      	cmp	r0, #0
   10958:	f47f acb1 	bne.w	102be <_dtoa_r+0x126>
   1095c:	f10b 3bff 	add.w	fp, fp, #4294967295
   10960:	e4ad      	b.n	102be <_dtoa_r+0x126>
   10962:	4b1a      	ldr	r3, [pc, #104]	; (109cc <_dtoa_r+0x834>)
   10964:	9303      	str	r3, [sp, #12]
   10966:	9803      	ldr	r0, [sp, #12]
   10968:	b019      	add	sp, #100	; 0x64
   1096a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1096e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   10972:	9f09      	ldr	r7, [sp, #36]	; 0x24
   10974:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   10976:	e716      	b.n	107a6 <_dtoa_r+0x60e>
   10978:	f1c0 001c 	rsb	r0, r0, #28
   1097c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1097e:	4403      	add	r3, r0
   10980:	9309      	str	r3, [sp, #36]	; 0x24
   10982:	9b06      	ldr	r3, [sp, #24]
   10984:	4403      	add	r3, r0
   10986:	4407      	add	r7, r0
   10988:	9306      	str	r3, [sp, #24]
   1098a:	e74a      	b.n	10822 <_dtoa_r+0x68a>
   1098c:	2601      	movs	r6, #1
   1098e:	e4c7      	b.n	10320 <_dtoa_r+0x188>
   10990:	f1c3 0320 	rsb	r3, r3, #32
   10994:	fa08 f003 	lsl.w	r0, r8, r3
   10998:	e45e      	b.n	10258 <_dtoa_r+0xc0>
   1099a:	4601      	mov	r1, r0
   1099c:	465a      	mov	r2, fp
   1099e:	4620      	mov	r0, r4
   109a0:	f7fd f924 	bl	dbec <__pow5mult>
   109a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   109a6:	2b01      	cmp	r3, #1
   109a8:	4682      	mov	sl, r0
   109aa:	f340 81ba 	ble.w	10d22 <_dtoa_r+0xb8a>
   109ae:	f04f 0900 	mov.w	r9, #0
   109b2:	f8da 3010 	ldr.w	r3, [sl, #16]
   109b6:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
   109ba:	6918      	ldr	r0, [r3, #16]
   109bc:	f7fc ffea 	bl	d994 <__hi0bits>
   109c0:	f1c0 0020 	rsb	r0, r0, #32
   109c4:	e720      	b.n	10808 <_dtoa_r+0x670>
   109c6:	bf00      	nop
   109c8:	40240000 	.word	0x40240000
   109cc:	00013398 	.word	0x00013398
   109d0:	4631      	mov	r1, r6
   109d2:	2300      	movs	r3, #0
   109d4:	220a      	movs	r2, #10
   109d6:	4620      	mov	r0, r4
   109d8:	f7fc ff8c 	bl	d8f4 <__multadd>
   109dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   109de:	2b00      	cmp	r3, #0
   109e0:	4606      	mov	r6, r0
   109e2:	f340 82f3 	ble.w	10fcc <_dtoa_r+0xe34>
   109e6:	e9cd 8307 	strd	r8, r3, [sp, #28]
   109ea:	2f00      	cmp	r7, #0
   109ec:	f300 811a 	bgt.w	10c24 <_dtoa_r+0xa8c>
   109f0:	f1b9 0f00 	cmp.w	r9, #0
   109f4:	f040 81e3 	bne.w	10dbe <_dtoa_r+0xc26>
   109f8:	46b0      	mov	r8, r6
   109fa:	9b04      	ldr	r3, [sp, #16]
   109fc:	9f03      	ldr	r7, [sp, #12]
   109fe:	9908      	ldr	r1, [sp, #32]
   10a00:	f003 0201 	and.w	r2, r3, #1
   10a04:	1e7b      	subs	r3, r7, #1
   10a06:	4419      	add	r1, r3
   10a08:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10a0a:	920c      	str	r2, [sp, #48]	; 0x30
   10a0c:	4313      	orrs	r3, r2
   10a0e:	9109      	str	r1, [sp, #36]	; 0x24
   10a10:	930a      	str	r3, [sp, #40]	; 0x28
   10a12:	4651      	mov	r1, sl
   10a14:	4628      	mov	r0, r5
   10a16:	f7ff fb2b 	bl	10070 <quorem>
   10a1a:	4631      	mov	r1, r6
   10a1c:	4683      	mov	fp, r0
   10a1e:	4628      	mov	r0, r5
   10a20:	f7fd f9bc 	bl	dd9c <__mcmp>
   10a24:	4642      	mov	r2, r8
   10a26:	4651      	mov	r1, sl
   10a28:	4681      	mov	r9, r0
   10a2a:	4620      	mov	r0, r4
   10a2c:	f7fd f9d6 	bl	dddc <__mdiff>
   10a30:	68c2      	ldr	r2, [r0, #12]
   10a32:	4601      	mov	r1, r0
   10a34:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   10a38:	2a00      	cmp	r2, #0
   10a3a:	d142      	bne.n	10ac2 <_dtoa_r+0x92a>
   10a3c:	9006      	str	r0, [sp, #24]
   10a3e:	4628      	mov	r0, r5
   10a40:	9308      	str	r3, [sp, #32]
   10a42:	f7fd f9ab 	bl	dd9c <__mcmp>
   10a46:	9906      	ldr	r1, [sp, #24]
   10a48:	9004      	str	r0, [sp, #16]
   10a4a:	4620      	mov	r0, r4
   10a4c:	f7fc ff48 	bl	d8e0 <_Bfree>
   10a50:	9a04      	ldr	r2, [sp, #16]
   10a52:	9b08      	ldr	r3, [sp, #32]
   10a54:	b91a      	cbnz	r2, 10a5e <_dtoa_r+0x8c6>
   10a56:	990a      	ldr	r1, [sp, #40]	; 0x28
   10a58:	2900      	cmp	r1, #0
   10a5a:	f000 82a9 	beq.w	10fb0 <_dtoa_r+0xe18>
   10a5e:	f1b9 0f00 	cmp.w	r9, #0
   10a62:	f2c0 8171 	blt.w	10d48 <_dtoa_r+0xbb0>
   10a66:	9922      	ldr	r1, [sp, #136]	; 0x88
   10a68:	ea49 0901 	orr.w	r9, r9, r1
   10a6c:	990c      	ldr	r1, [sp, #48]	; 0x30
   10a6e:	ea51 0909 	orrs.w	r9, r1, r9
   10a72:	f000 8169 	beq.w	10d48 <_dtoa_r+0xbb0>
   10a76:	2a00      	cmp	r2, #0
   10a78:	f300 81bc 	bgt.w	10df4 <_dtoa_r+0xc5c>
   10a7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10a7e:	703b      	strb	r3, [r7, #0]
   10a80:	f107 0901 	add.w	r9, r7, #1
   10a84:	4297      	cmp	r7, r2
   10a86:	46cb      	mov	fp, r9
   10a88:	f000 81ba 	beq.w	10e00 <_dtoa_r+0xc68>
   10a8c:	4629      	mov	r1, r5
   10a8e:	2300      	movs	r3, #0
   10a90:	220a      	movs	r2, #10
   10a92:	4620      	mov	r0, r4
   10a94:	f7fc ff2e 	bl	d8f4 <__multadd>
   10a98:	4546      	cmp	r6, r8
   10a9a:	4605      	mov	r5, r0
   10a9c:	4631      	mov	r1, r6
   10a9e:	f04f 0300 	mov.w	r3, #0
   10aa2:	f04f 020a 	mov.w	r2, #10
   10aa6:	4620      	mov	r0, r4
   10aa8:	d012      	beq.n	10ad0 <_dtoa_r+0x938>
   10aaa:	f7fc ff23 	bl	d8f4 <__multadd>
   10aae:	4641      	mov	r1, r8
   10ab0:	4606      	mov	r6, r0
   10ab2:	2300      	movs	r3, #0
   10ab4:	220a      	movs	r2, #10
   10ab6:	4620      	mov	r0, r4
   10ab8:	f7fc ff1c 	bl	d8f4 <__multadd>
   10abc:	464f      	mov	r7, r9
   10abe:	4680      	mov	r8, r0
   10ac0:	e7a7      	b.n	10a12 <_dtoa_r+0x87a>
   10ac2:	4620      	mov	r0, r4
   10ac4:	9304      	str	r3, [sp, #16]
   10ac6:	f7fc ff0b 	bl	d8e0 <_Bfree>
   10aca:	9b04      	ldr	r3, [sp, #16]
   10acc:	2201      	movs	r2, #1
   10ace:	e7c6      	b.n	10a5e <_dtoa_r+0x8c6>
   10ad0:	f7fc ff10 	bl	d8f4 <__multadd>
   10ad4:	464f      	mov	r7, r9
   10ad6:	4606      	mov	r6, r0
   10ad8:	4680      	mov	r8, r0
   10ada:	e79a      	b.n	10a12 <_dtoa_r+0x87a>
   10adc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10ade:	2b02      	cmp	r3, #2
   10ae0:	dc79      	bgt.n	10bd6 <_dtoa_r+0xa3e>
   10ae2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10ae4:	2b00      	cmp	r3, #0
   10ae6:	d180      	bne.n	109ea <_dtoa_r+0x852>
   10ae8:	9b07      	ldr	r3, [sp, #28]
   10aea:	4651      	mov	r1, sl
   10aec:	3301      	adds	r3, #1
   10aee:	4628      	mov	r0, r5
   10af0:	9307      	str	r3, [sp, #28]
   10af2:	f7ff fabd 	bl	10070 <quorem>
   10af6:	f8dd b00c 	ldr.w	fp, [sp, #12]
   10afa:	f100 0330 	add.w	r3, r0, #48	; 0x30
   10afe:	f80b 3b01 	strb.w	r3, [fp], #1
   10b02:	2700      	movs	r7, #0
   10b04:	e6d0      	b.n	108a8 <_dtoa_r+0x710>
   10b06:	4651      	mov	r1, sl
   10b08:	4628      	mov	r0, r5
   10b0a:	f7fd f947 	bl	dd9c <__mcmp>
   10b0e:	2800      	cmp	r0, #0
   10b10:	f6bf ae9d 	bge.w	1084e <_dtoa_r+0x6b6>
   10b14:	4629      	mov	r1, r5
   10b16:	2300      	movs	r3, #0
   10b18:	220a      	movs	r2, #10
   10b1a:	4620      	mov	r0, r4
   10b1c:	f7fc feea 	bl	d8f4 <__multadd>
   10b20:	9b07      	ldr	r3, [sp, #28]
   10b22:	f103 38ff 	add.w	r8, r3, #4294967295
   10b26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10b28:	4605      	mov	r5, r0
   10b2a:	2b00      	cmp	r3, #0
   10b2c:	f47f af50 	bne.w	109d0 <_dtoa_r+0x838>
   10b30:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10b32:	2b00      	cmp	r3, #0
   10b34:	f340 8243 	ble.w	10fbe <_dtoa_r+0xe26>
   10b38:	9308      	str	r3, [sp, #32]
   10b3a:	e693      	b.n	10864 <_dtoa_r+0x6cc>
   10b3c:	4bb6      	ldr	r3, [pc, #728]	; (10e18 <_dtoa_r+0xc80>)
   10b3e:	9303      	str	r3, [sp, #12]
   10b40:	3303      	adds	r3, #3
   10b42:	e408      	b.n	10356 <_dtoa_r+0x1be>
   10b44:	201c      	movs	r0, #28
   10b46:	e719      	b.n	1097c <_dtoa_r+0x7e4>
   10b48:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   10b4c:	2900      	cmp	r1, #0
   10b4e:	f47f ae54 	bne.w	107fa <_dtoa_r+0x662>
   10b52:	f3c2 0313 	ubfx	r3, r2, #0, #20
   10b56:	2b00      	cmp	r3, #0
   10b58:	f47f ae4f 	bne.w	107fa <_dtoa_r+0x662>
   10b5c:	4baf      	ldr	r3, [pc, #700]	; (10e1c <_dtoa_r+0xc84>)
   10b5e:	4013      	ands	r3, r2
   10b60:	2b00      	cmp	r3, #0
   10b62:	f000 820b 	beq.w	10f7c <_dtoa_r+0xde4>
   10b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10b68:	3301      	adds	r3, #1
   10b6a:	9309      	str	r3, [sp, #36]	; 0x24
   10b6c:	9b06      	ldr	r3, [sp, #24]
   10b6e:	3301      	adds	r3, #1
   10b70:	9306      	str	r3, [sp, #24]
   10b72:	f04f 0901 	mov.w	r9, #1
   10b76:	e642      	b.n	107fe <_dtoa_r+0x666>
   10b78:	2301      	movs	r3, #1
   10b7a:	930c      	str	r3, [sp, #48]	; 0x30
   10b7c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   10b7e:	9a07      	ldr	r2, [sp, #28]
   10b80:	4413      	add	r3, r2
   10b82:	9312      	str	r3, [sp, #72]	; 0x48
   10b84:	3301      	adds	r3, #1
   10b86:	2b01      	cmp	r3, #1
   10b88:	461f      	mov	r7, r3
   10b8a:	9308      	str	r3, [sp, #32]
   10b8c:	bfb8      	it	lt
   10b8e:	2701      	movlt	r7, #1
   10b90:	2100      	movs	r1, #0
   10b92:	2f17      	cmp	r7, #23
   10b94:	63e1      	str	r1, [r4, #60]	; 0x3c
   10b96:	f77f ac2f 	ble.w	103f8 <_dtoa_r+0x260>
   10b9a:	2201      	movs	r2, #1
   10b9c:	2304      	movs	r3, #4
   10b9e:	005b      	lsls	r3, r3, #1
   10ba0:	f103 0014 	add.w	r0, r3, #20
   10ba4:	42b8      	cmp	r0, r7
   10ba6:	4611      	mov	r1, r2
   10ba8:	f102 0201 	add.w	r2, r2, #1
   10bac:	d9f7      	bls.n	10b9e <_dtoa_r+0xa06>
   10bae:	63e1      	str	r1, [r4, #60]	; 0x3c
   10bb0:	e422      	b.n	103f8 <_dtoa_r+0x260>
   10bb2:	2301      	movs	r3, #1
   10bb4:	930c      	str	r3, [sp, #48]	; 0x30
   10bb6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   10bb8:	2b00      	cmp	r3, #0
   10bba:	dd59      	ble.n	10c70 <_dtoa_r+0xad8>
   10bbc:	9312      	str	r3, [sp, #72]	; 0x48
   10bbe:	9308      	str	r3, [sp, #32]
   10bc0:	461f      	mov	r7, r3
   10bc2:	e7e5      	b.n	10b90 <_dtoa_r+0x9f8>
   10bc4:	2300      	movs	r3, #0
   10bc6:	930c      	str	r3, [sp, #48]	; 0x30
   10bc8:	e7d8      	b.n	10b7c <_dtoa_r+0x9e4>
   10bca:	2300      	movs	r3, #0
   10bcc:	930c      	str	r3, [sp, #48]	; 0x30
   10bce:	e7f2      	b.n	10bb6 <_dtoa_r+0xa1e>
   10bd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10bd2:	e9cd 8307 	strd	r8, r3, [sp, #28]
   10bd6:	9b08      	ldr	r3, [sp, #32]
   10bd8:	2b00      	cmp	r3, #0
   10bda:	f47f ad54 	bne.w	10686 <_dtoa_r+0x4ee>
   10bde:	4651      	mov	r1, sl
   10be0:	2205      	movs	r2, #5
   10be2:	4620      	mov	r0, r4
   10be4:	f7fc fe86 	bl	d8f4 <__multadd>
   10be8:	4601      	mov	r1, r0
   10bea:	4682      	mov	sl, r0
   10bec:	4628      	mov	r0, r5
   10bee:	f7fd f8d5 	bl	dd9c <__mcmp>
   10bf2:	2800      	cmp	r0, #0
   10bf4:	f77f ad47 	ble.w	10686 <_dtoa_r+0x4ee>
   10bf8:	9b03      	ldr	r3, [sp, #12]
   10bfa:	9f07      	ldr	r7, [sp, #28]
   10bfc:	2231      	movs	r2, #49	; 0x31
   10bfe:	4698      	mov	r8, r3
   10c00:	f803 2b01 	strb.w	r2, [r3], #1
   10c04:	3701      	adds	r7, #1
   10c06:	9303      	str	r3, [sp, #12]
   10c08:	4651      	mov	r1, sl
   10c0a:	4620      	mov	r0, r4
   10c0c:	f7fc fe68 	bl	d8e0 <_Bfree>
   10c10:	1c7b      	adds	r3, r7, #1
   10c12:	f8dd 900c 	ldr.w	r9, [sp, #12]
   10c16:	9307      	str	r3, [sp, #28]
   10c18:	f8cd 800c 	str.w	r8, [sp, #12]
   10c1c:	2e00      	cmp	r6, #0
   10c1e:	f47f ae6e 	bne.w	108fe <_dtoa_r+0x766>
   10c22:	e670      	b.n	10906 <_dtoa_r+0x76e>
   10c24:	4631      	mov	r1, r6
   10c26:	463a      	mov	r2, r7
   10c28:	4620      	mov	r0, r4
   10c2a:	f7fd f83f 	bl	dcac <__lshift>
   10c2e:	4606      	mov	r6, r0
   10c30:	e6de      	b.n	109f0 <_dtoa_r+0x858>
   10c32:	eba3 0808 	sub.w	r8, r3, r8
   10c36:	e5a6      	b.n	10786 <_dtoa_r+0x5ee>
   10c38:	4631      	mov	r1, r6
   10c3a:	4642      	mov	r2, r8
   10c3c:	4620      	mov	r0, r4
   10c3e:	f7fc ffd5 	bl	dbec <__pow5mult>
   10c42:	462a      	mov	r2, r5
   10c44:	4601      	mov	r1, r0
   10c46:	4606      	mov	r6, r0
   10c48:	4620      	mov	r0, r4
   10c4a:	f7fc ff21 	bl	da90 <__multiply>
   10c4e:	4629      	mov	r1, r5
   10c50:	4605      	mov	r5, r0
   10c52:	4620      	mov	r0, r4
   10c54:	f7fc fe44 	bl	d8e0 <_Bfree>
   10c58:	e5bd      	b.n	107d6 <_dtoa_r+0x63e>
   10c5a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   10c5e:	f04f 0a02 	mov.w	sl, #2
   10c62:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   10c66:	f7ff bbf4 	b.w	10452 <_dtoa_r+0x2ba>
   10c6a:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   10c6e:	e685      	b.n	1097c <_dtoa_r+0x7e4>
   10c70:	2301      	movs	r3, #1
   10c72:	9323      	str	r3, [sp, #140]	; 0x8c
   10c74:	9308      	str	r3, [sp, #32]
   10c76:	f7ff bbbb 	b.w	103f0 <_dtoa_r+0x258>
   10c7a:	d103      	bne.n	10c84 <_dtoa_r+0xaec>
   10c7c:	9b04      	ldr	r3, [sp, #16]
   10c7e:	07db      	lsls	r3, r3, #31
   10c80:	f53f ae1f 	bmi.w	108c2 <_dtoa_r+0x72a>
   10c84:	46d9      	mov	r9, fp
   10c86:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   10c8a:	2b30      	cmp	r3, #48	; 0x30
   10c8c:	d0fa      	beq.n	10c84 <_dtoa_r+0xaec>
   10c8e:	e62a      	b.n	108e6 <_dtoa_r+0x74e>
   10c90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   10c92:	2a00      	cmp	r2, #0
   10c94:	f000 812d 	beq.w	10ef2 <_dtoa_r+0xd5a>
   10c98:	f203 4333 	addw	r3, r3, #1075	; 0x433
   10c9c:	9a06      	ldr	r2, [sp, #24]
   10c9e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   10ca2:	441a      	add	r2, r3
   10ca4:	9206      	str	r2, [sp, #24]
   10ca6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10ca8:	4617      	mov	r7, r2
   10caa:	441a      	add	r2, r3
   10cac:	9209      	str	r2, [sp, #36]	; 0x24
   10cae:	e575      	b.n	1079c <_dtoa_r+0x604>
   10cb0:	9b07      	ldr	r3, [sp, #28]
   10cb2:	9a03      	ldr	r2, [sp, #12]
   10cb4:	3301      	adds	r3, #1
   10cb6:	9307      	str	r3, [sp, #28]
   10cb8:	2331      	movs	r3, #49	; 0x31
   10cba:	7013      	strb	r3, [r2, #0]
   10cbc:	e613      	b.n	108e6 <_dtoa_r+0x74e>
   10cbe:	f04f 0a00 	mov.w	sl, #0
   10cc2:	4656      	mov	r6, sl
   10cc4:	e4df      	b.n	10686 <_dtoa_r+0x4ee>
   10cc6:	900e      	str	r0, [sp, #56]	; 0x38
   10cc8:	e638      	b.n	1093c <_dtoa_r+0x7a4>
   10cca:	f000 813d 	beq.w	10f48 <_dtoa_r+0xdb0>
   10cce:	9a07      	ldr	r2, [sp, #28]
   10cd0:	4b53      	ldr	r3, [pc, #332]	; (10e20 <_dtoa_r+0xc88>)
   10cd2:	4256      	negs	r6, r2
   10cd4:	f006 020f 	and.w	r2, r6, #15
   10cd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   10cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
   10ce0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   10ce4:	f001 fe98 	bl	12a18 <__aeabi_dmul>
   10ce8:	1136      	asrs	r6, r6, #4
   10cea:	4680      	mov	r8, r0
   10cec:	4689      	mov	r9, r1
   10cee:	f000 8178 	beq.w	10fe2 <_dtoa_r+0xe4a>
   10cf2:	4f4c      	ldr	r7, [pc, #304]	; (10e24 <_dtoa_r+0xc8c>)
   10cf4:	2300      	movs	r3, #0
   10cf6:	f04f 0a02 	mov.w	sl, #2
   10cfa:	07f2      	lsls	r2, r6, #31
   10cfc:	d506      	bpl.n	10d0c <_dtoa_r+0xb74>
   10cfe:	e9d7 2300 	ldrd	r2, r3, [r7]
   10d02:	f001 fe89 	bl	12a18 <__aeabi_dmul>
   10d06:	f10a 0a01 	add.w	sl, sl, #1
   10d0a:	2301      	movs	r3, #1
   10d0c:	1076      	asrs	r6, r6, #1
   10d0e:	f107 0708 	add.w	r7, r7, #8
   10d12:	d1f2      	bne.n	10cfa <_dtoa_r+0xb62>
   10d14:	2b00      	cmp	r3, #0
   10d16:	f43f abbb 	beq.w	10490 <_dtoa_r+0x2f8>
   10d1a:	4680      	mov	r8, r0
   10d1c:	4689      	mov	r9, r1
   10d1e:	f7ff bbb7 	b.w	10490 <_dtoa_r+0x2f8>
   10d22:	9b04      	ldr	r3, [sp, #16]
   10d24:	2b00      	cmp	r3, #0
   10d26:	f47f ae42 	bne.w	109ae <_dtoa_r+0x816>
   10d2a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   10d2e:	f3c2 0313 	ubfx	r3, r2, #0, #20
   10d32:	2b00      	cmp	r3, #0
   10d34:	f43f af12 	beq.w	10b5c <_dtoa_r+0x9c4>
   10d38:	e639      	b.n	109ae <_dtoa_r+0x816>
   10d3a:	4629      	mov	r1, r5
   10d3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   10d3e:	4620      	mov	r0, r4
   10d40:	f7fc ff54 	bl	dbec <__pow5mult>
   10d44:	4605      	mov	r5, r0
   10d46:	e54b      	b.n	107e0 <_dtoa_r+0x648>
   10d48:	2a00      	cmp	r2, #0
   10d4a:	dd12      	ble.n	10d72 <_dtoa_r+0xbda>
   10d4c:	4629      	mov	r1, r5
   10d4e:	2201      	movs	r2, #1
   10d50:	4620      	mov	r0, r4
   10d52:	9304      	str	r3, [sp, #16]
   10d54:	f7fc ffaa 	bl	dcac <__lshift>
   10d58:	4651      	mov	r1, sl
   10d5a:	4605      	mov	r5, r0
   10d5c:	f7fd f81e 	bl	dd9c <__mcmp>
   10d60:	2800      	cmp	r0, #0
   10d62:	9b04      	ldr	r3, [sp, #16]
   10d64:	f340 8118 	ble.w	10f98 <_dtoa_r+0xe00>
   10d68:	2b39      	cmp	r3, #57	; 0x39
   10d6a:	f000 80f9 	beq.w	10f60 <_dtoa_r+0xdc8>
   10d6e:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   10d72:	46b9      	mov	r9, r7
   10d74:	f809 3b01 	strb.w	r3, [r9], #1
   10d78:	9b07      	ldr	r3, [sp, #28]
   10d7a:	3301      	adds	r3, #1
   10d7c:	4637      	mov	r7, r6
   10d7e:	9307      	str	r3, [sp, #28]
   10d80:	4646      	mov	r6, r8
   10d82:	e5b0      	b.n	108e6 <_dtoa_r+0x74e>
   10d84:	9509      	str	r5, [sp, #36]	; 0x24
   10d86:	9c06      	ldr	r4, [sp, #24]
   10d88:	9d04      	ldr	r5, [sp, #16]
   10d8a:	4602      	mov	r2, r0
   10d8c:	460b      	mov	r3, r1
   10d8e:	f7fa fe53 	bl	ba38 <__adddf3>
   10d92:	4652      	mov	r2, sl
   10d94:	465b      	mov	r3, fp
   10d96:	4680      	mov	r8, r0
   10d98:	4689      	mov	r9, r1
   10d9a:	f7fb f881 	bl	bea0 <__aeabi_dcmpgt>
   10d9e:	b960      	cbnz	r0, 10dba <_dtoa_r+0xc22>
   10da0:	4652      	mov	r2, sl
   10da2:	465b      	mov	r3, fp
   10da4:	4640      	mov	r0, r8
   10da6:	4649      	mov	r1, r9
   10da8:	f7fb f852 	bl	be50 <__aeabi_dcmpeq>
   10dac:	2800      	cmp	r0, #0
   10dae:	f43f acce 	beq.w	1074e <_dtoa_r+0x5b6>
   10db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10db4:	07d9      	lsls	r1, r3, #31
   10db6:	f57f acca 	bpl.w	1074e <_dtoa_r+0x5b6>
   10dba:	9a03      	ldr	r2, [sp, #12]
   10dbc:	e404      	b.n	105c8 <_dtoa_r+0x430>
   10dbe:	6871      	ldr	r1, [r6, #4]
   10dc0:	4620      	mov	r0, r4
   10dc2:	f7fc fd67 	bl	d894 <_Balloc>
   10dc6:	4607      	mov	r7, r0
   10dc8:	2800      	cmp	r0, #0
   10dca:	f000 810e 	beq.w	10fea <_dtoa_r+0xe52>
   10dce:	6933      	ldr	r3, [r6, #16]
   10dd0:	3302      	adds	r3, #2
   10dd2:	009a      	lsls	r2, r3, #2
   10dd4:	f106 010c 	add.w	r1, r6, #12
   10dd8:	300c      	adds	r0, #12
   10dda:	f7f8 f8e1 	bl	8fa0 <memcpy>
   10dde:	4639      	mov	r1, r7
   10de0:	2201      	movs	r2, #1
   10de2:	4620      	mov	r0, r4
   10de4:	f7fc ff62 	bl	dcac <__lshift>
   10de8:	4680      	mov	r8, r0
   10dea:	e606      	b.n	109fa <_dtoa_r+0x862>
   10dec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   10df0:	1a9f      	subs	r7, r3, r2
   10df2:	e4d3      	b.n	1079c <_dtoa_r+0x604>
   10df4:	2b39      	cmp	r3, #57	; 0x39
   10df6:	f000 80b3 	beq.w	10f60 <_dtoa_r+0xdc8>
   10dfa:	46b9      	mov	r9, r7
   10dfc:	3301      	adds	r3, #1
   10dfe:	e7b9      	b.n	10d74 <_dtoa_r+0xbdc>
   10e00:	9a07      	ldr	r2, [sp, #28]
   10e02:	3201      	adds	r2, #1
   10e04:	4637      	mov	r7, r6
   10e06:	9207      	str	r2, [sp, #28]
   10e08:	4646      	mov	r6, r8
   10e0a:	e54d      	b.n	108a8 <_dtoa_r+0x710>
   10e0c:	4629      	mov	r1, r5
   10e0e:	4620      	mov	r0, r4
   10e10:	f7fc feec 	bl	dbec <__pow5mult>
   10e14:	4605      	mov	r5, r0
   10e16:	e4e3      	b.n	107e0 <_dtoa_r+0x648>
   10e18:	000149f0 	.word	0x000149f0
   10e1c:	7ff00000 	.word	0x7ff00000
   10e20:	00014878 	.word	0x00014878
   10e24:	00014850 	.word	0x00014850
   10e28:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   10e2c:	4981      	ldr	r1, [pc, #516]	; (11034 <_dtoa_r+0xe9c>)
   10e2e:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
   10e32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   10e36:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   10e3a:	f001 fded 	bl	12a18 <__aeabi_dmul>
   10e3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   10e42:	4649      	mov	r1, r9
   10e44:	4640      	mov	r0, r8
   10e46:	f001 fff9 	bl	12e3c <__aeabi_d2iz>
   10e4a:	4606      	mov	r6, r0
   10e4c:	f7fa ff40 	bl	bcd0 <__aeabi_i2d>
   10e50:	460b      	mov	r3, r1
   10e52:	4602      	mov	r2, r0
   10e54:	4649      	mov	r1, r9
   10e56:	4640      	mov	r0, r8
   10e58:	f7fa fdec 	bl	ba34 <__aeabi_dsub>
   10e5c:	9f03      	ldr	r7, [sp, #12]
   10e5e:	4653      	mov	r3, sl
   10e60:	3630      	adds	r6, #48	; 0x30
   10e62:	2b01      	cmp	r3, #1
   10e64:	f807 6b01 	strb.w	r6, [r7], #1
   10e68:	4680      	mov	r8, r0
   10e6a:	4689      	mov	r9, r1
   10e6c:	f000 80b7 	beq.w	10fde <_dtoa_r+0xe46>
   10e70:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   10e72:	9b03      	ldr	r3, [sp, #12]
   10e74:	441e      	add	r6, r3
   10e76:	4b70      	ldr	r3, [pc, #448]	; (11038 <_dtoa_r+0xea0>)
   10e78:	2200      	movs	r2, #0
   10e7a:	4640      	mov	r0, r8
   10e7c:	4649      	mov	r1, r9
   10e7e:	f001 fdcb 	bl	12a18 <__aeabi_dmul>
   10e82:	4689      	mov	r9, r1
   10e84:	4680      	mov	r8, r0
   10e86:	f001 ffd9 	bl	12e3c <__aeabi_d2iz>
   10e8a:	4682      	mov	sl, r0
   10e8c:	f7fa ff20 	bl	bcd0 <__aeabi_i2d>
   10e90:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
   10e94:	4602      	mov	r2, r0
   10e96:	460b      	mov	r3, r1
   10e98:	4640      	mov	r0, r8
   10e9a:	4649      	mov	r1, r9
   10e9c:	f7fa fdca 	bl	ba34 <__aeabi_dsub>
   10ea0:	f807 ab01 	strb.w	sl, [r7], #1
   10ea4:	42be      	cmp	r6, r7
   10ea6:	4680      	mov	r8, r0
   10ea8:	4689      	mov	r9, r1
   10eaa:	d1e4      	bne.n	10e76 <_dtoa_r+0xcde>
   10eac:	4b63      	ldr	r3, [pc, #396]	; (1103c <_dtoa_r+0xea4>)
   10eae:	2200      	movs	r2, #0
   10eb0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   10eb4:	f7fa fdc0 	bl	ba38 <__adddf3>
   10eb8:	4642      	mov	r2, r8
   10eba:	464b      	mov	r3, r9
   10ebc:	f7fa ffd2 	bl	be64 <__aeabi_dcmplt>
   10ec0:	2800      	cmp	r0, #0
   10ec2:	d164      	bne.n	10f8e <_dtoa_r+0xdf6>
   10ec4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   10ec8:	495c      	ldr	r1, [pc, #368]	; (1103c <_dtoa_r+0xea4>)
   10eca:	2000      	movs	r0, #0
   10ecc:	f7fa fdb2 	bl	ba34 <__aeabi_dsub>
   10ed0:	4642      	mov	r2, r8
   10ed2:	464b      	mov	r3, r9
   10ed4:	f7fa ffe4 	bl	bea0 <__aeabi_dcmpgt>
   10ed8:	2800      	cmp	r0, #0
   10eda:	f43f abad 	beq.w	10638 <_dtoa_r+0x4a0>
   10ede:	46b1      	mov	r9, r6
   10ee0:	3e01      	subs	r6, #1
   10ee2:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   10ee6:	2b30      	cmp	r3, #48	; 0x30
   10ee8:	d0f9      	beq.n	10ede <_dtoa_r+0xd46>
   10eea:	9b14      	ldr	r3, [sp, #80]	; 0x50
   10eec:	3301      	adds	r3, #1
   10eee:	9307      	str	r3, [sp, #28]
   10ef0:	e509      	b.n	10906 <_dtoa_r+0x76e>
   10ef2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   10ef4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   10ef8:	e6d0      	b.n	10c9c <_dtoa_r+0xb04>
   10efa:	9b08      	ldr	r3, [sp, #32]
   10efc:	2b00      	cmp	r3, #0
   10efe:	f43f ab6f 	beq.w	105e0 <_dtoa_r+0x448>
   10f02:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10f04:	2b00      	cmp	r3, #0
   10f06:	f77f ab97 	ble.w	10638 <_dtoa_r+0x4a0>
   10f0a:	9a07      	ldr	r2, [sp, #28]
   10f0c:	3a01      	subs	r2, #1
   10f0e:	e9cd 3213 	strd	r3, r2, [sp, #76]	; 0x4c
   10f12:	4640      	mov	r0, r8
   10f14:	4b48      	ldr	r3, [pc, #288]	; (11038 <_dtoa_r+0xea0>)
   10f16:	2200      	movs	r2, #0
   10f18:	4649      	mov	r1, r9
   10f1a:	f001 fd7d 	bl	12a18 <__aeabi_dmul>
   10f1e:	4680      	mov	r8, r0
   10f20:	4689      	mov	r9, r1
   10f22:	f10a 0001 	add.w	r0, sl, #1
   10f26:	f7fa fed3 	bl	bcd0 <__aeabi_i2d>
   10f2a:	4642      	mov	r2, r8
   10f2c:	464b      	mov	r3, r9
   10f2e:	f001 fd73 	bl	12a18 <__aeabi_dmul>
   10f32:	4b43      	ldr	r3, [pc, #268]	; (11040 <_dtoa_r+0xea8>)
   10f34:	2200      	movs	r2, #0
   10f36:	f7fa fd7f 	bl	ba38 <__adddf3>
   10f3a:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   10f3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   10f42:	9311      	str	r3, [sp, #68]	; 0x44
   10f44:	f7ff bac7 	b.w	104d6 <_dtoa_r+0x33e>
   10f48:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
   10f4c:	f04f 0a02 	mov.w	sl, #2
   10f50:	f7ff ba9e 	b.w	10490 <_dtoa_r+0x2f8>
   10f54:	9b07      	ldr	r3, [sp, #28]
   10f56:	3301      	adds	r3, #1
   10f58:	9307      	str	r3, [sp, #28]
   10f5a:	2331      	movs	r3, #49	; 0x31
   10f5c:	f7ff bb3b 	b.w	105d6 <_dtoa_r+0x43e>
   10f60:	9b07      	ldr	r3, [sp, #28]
   10f62:	46bb      	mov	fp, r7
   10f64:	3301      	adds	r3, #1
   10f66:	9307      	str	r3, [sp, #28]
   10f68:	2339      	movs	r3, #57	; 0x39
   10f6a:	4637      	mov	r7, r6
   10f6c:	f80b 3b01 	strb.w	r3, [fp], #1
   10f70:	4646      	mov	r6, r8
   10f72:	e4a8      	b.n	108c6 <_dtoa_r+0x72e>
   10f74:	f04f 0a00 	mov.w	sl, #0
   10f78:	4656      	mov	r6, sl
   10f7a:	e63d      	b.n	10bf8 <_dtoa_r+0xa60>
   10f7c:	4699      	mov	r9, r3
   10f7e:	e43e      	b.n	107fe <_dtoa_r+0x666>
   10f80:	9d10      	ldr	r5, [sp, #64]	; 0x40
   10f82:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   10f84:	9b14      	ldr	r3, [sp, #80]	; 0x50
   10f86:	3301      	adds	r3, #1
   10f88:	9307      	str	r3, [sp, #28]
   10f8a:	46b1      	mov	r9, r6
   10f8c:	e4bb      	b.n	10906 <_dtoa_r+0x76e>
   10f8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   10f90:	9a03      	ldr	r2, [sp, #12]
   10f92:	9307      	str	r3, [sp, #28]
   10f94:	f7ff bb18 	b.w	105c8 <_dtoa_r+0x430>
   10f98:	f47f aeeb 	bne.w	10d72 <_dtoa_r+0xbda>
   10f9c:	07da      	lsls	r2, r3, #31
   10f9e:	f57f aee8 	bpl.w	10d72 <_dtoa_r+0xbda>
   10fa2:	e6e1      	b.n	10d68 <_dtoa_r+0xbd0>
   10fa4:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
   10fa8:	9d10      	ldr	r5, [sp, #64]	; 0x40
   10faa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   10fac:	f7ff bb44 	b.w	10638 <_dtoa_r+0x4a0>
   10fb0:	2b39      	cmp	r3, #57	; 0x39
   10fb2:	d0d5      	beq.n	10f60 <_dtoa_r+0xdc8>
   10fb4:	f1b9 0f00 	cmp.w	r9, #0
   10fb8:	f73f aed9 	bgt.w	10d6e <_dtoa_r+0xbd6>
   10fbc:	e6d9      	b.n	10d72 <_dtoa_r+0xbda>
   10fbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10fc0:	2b02      	cmp	r3, #2
   10fc2:	f73f ae05 	bgt.w	10bd0 <_dtoa_r+0xa38>
   10fc6:	f8cd 801c 	str.w	r8, [sp, #28]
   10fca:	e58d      	b.n	10ae8 <_dtoa_r+0x950>
   10fcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10fce:	2b02      	cmp	r3, #2
   10fd0:	f73f adfe 	bgt.w	10bd0 <_dtoa_r+0xa38>
   10fd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10fd6:	f8cd 801c 	str.w	r8, [sp, #28]
   10fda:	9308      	str	r3, [sp, #32]
   10fdc:	e505      	b.n	109ea <_dtoa_r+0x852>
   10fde:	463e      	mov	r6, r7
   10fe0:	e764      	b.n	10eac <_dtoa_r+0xd14>
   10fe2:	f04f 0a02 	mov.w	sl, #2
   10fe6:	f7ff ba53 	b.w	10490 <_dtoa_r+0x2f8>
   10fea:	4b16      	ldr	r3, [pc, #88]	; (11044 <_dtoa_r+0xeac>)
   10fec:	4816      	ldr	r0, [pc, #88]	; (11048 <_dtoa_r+0xeb0>)
   10fee:	463a      	mov	r2, r7
   10ff0:	f240 21ef 	movw	r1, #751	; 0x2ef
   10ff4:	f7fe ffe0 	bl	ffb8 <__assert_func>
   10ff8:	2600      	movs	r6, #0
   10ffa:	63e6      	str	r6, [r4, #60]	; 0x3c
   10ffc:	4631      	mov	r1, r6
   10ffe:	4620      	mov	r0, r4
   11000:	f7fc fc48 	bl	d894 <_Balloc>
   11004:	9003      	str	r0, [sp, #12]
   11006:	b950      	cbnz	r0, 1101e <_dtoa_r+0xe86>
   11008:	4b0e      	ldr	r3, [pc, #56]	; (11044 <_dtoa_r+0xeac>)
   1100a:	480f      	ldr	r0, [pc, #60]	; (11048 <_dtoa_r+0xeb0>)
   1100c:	2200      	movs	r2, #0
   1100e:	f240 11af 	movw	r1, #431	; 0x1af
   11012:	f7fe ffd1 	bl	ffb8 <__assert_func>
   11016:	4b0d      	ldr	r3, [pc, #52]	; (1104c <_dtoa_r+0xeb4>)
   11018:	9303      	str	r3, [sp, #12]
   1101a:	f7ff b8f9 	b.w	10210 <_dtoa_r+0x78>
   1101e:	9b03      	ldr	r3, [sp, #12]
   11020:	63a3      	str	r3, [r4, #56]	; 0x38
   11022:	f04f 33ff 	mov.w	r3, #4294967295
   11026:	9312      	str	r3, [sp, #72]	; 0x48
   11028:	9308      	str	r3, [sp, #32]
   1102a:	2301      	movs	r3, #1
   1102c:	9623      	str	r6, [sp, #140]	; 0x8c
   1102e:	930c      	str	r3, [sp, #48]	; 0x30
   11030:	f7ff bb02 	b.w	10638 <_dtoa_r+0x4a0>
   11034:	00014878 	.word	0x00014878
   11038:	40240000 	.word	0x40240000
   1103c:	3fe00000 	.word	0x3fe00000
   11040:	401c0000 	.word	0x401c0000
   11044:	000147e0 	.word	0x000147e0
   11048:	000149f4 	.word	0x000149f4
   1104c:	000149e4 	.word	0x000149e4

00011050 <_wcrtomb_r>:
   11050:	b570      	push	{r4, r5, r6, lr}
   11052:	4605      	mov	r5, r0
   11054:	b084      	sub	sp, #16
   11056:	b15b      	cbz	r3, 11070 <_wcrtomb_r+0x20>
   11058:	461c      	mov	r4, r3
   1105a:	b169      	cbz	r1, 11078 <_wcrtomb_r+0x28>
   1105c:	4b0e      	ldr	r3, [pc, #56]	; (11098 <_wcrtomb_r+0x48>)
   1105e:	4628      	mov	r0, r5
   11060:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   11064:	4623      	mov	r3, r4
   11066:	47b0      	blx	r6
   11068:	1c43      	adds	r3, r0, #1
   1106a:	d00f      	beq.n	1108c <_wcrtomb_r+0x3c>
   1106c:	b004      	add	sp, #16
   1106e:	bd70      	pop	{r4, r5, r6, pc}
   11070:	f500 7482 	add.w	r4, r0, #260	; 0x104
   11074:	2900      	cmp	r1, #0
   11076:	d1f1      	bne.n	1105c <_wcrtomb_r+0xc>
   11078:	4a07      	ldr	r2, [pc, #28]	; (11098 <_wcrtomb_r+0x48>)
   1107a:	4623      	mov	r3, r4
   1107c:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   11080:	4628      	mov	r0, r5
   11082:	460a      	mov	r2, r1
   11084:	a901      	add	r1, sp, #4
   11086:	47b0      	blx	r6
   11088:	1c43      	adds	r3, r0, #1
   1108a:	d1ef      	bne.n	1106c <_wcrtomb_r+0x1c>
   1108c:	2200      	movs	r2, #0
   1108e:	238a      	movs	r3, #138	; 0x8a
   11090:	6022      	str	r2, [r4, #0]
   11092:	602b      	str	r3, [r5, #0]
   11094:	b004      	add	sp, #16
   11096:	bd70      	pop	{r4, r5, r6, pc}
   11098:	1fff8ce4 	.word	0x1fff8ce4

0001109c <_wcsrtombs_r>:
   1109c:	b500      	push	{lr}
   1109e:	b083      	sub	sp, #12
   110a0:	f8dd c010 	ldr.w	ip, [sp, #16]
   110a4:	e9cd 3c00 	strd	r3, ip, [sp]
   110a8:	f04f 33ff 	mov.w	r3, #4294967295
   110ac:	f001 fbb6 	bl	1281c <_wcsnrtombs_r>
   110b0:	b003      	add	sp, #12
   110b2:	f85d fb04 	ldr.w	pc, [sp], #4
   110b6:	bf00      	nop

000110b8 <fiprintf>:
   110b8:	b40e      	push	{r1, r2, r3}
   110ba:	b510      	push	{r4, lr}
   110bc:	b083      	sub	sp, #12
   110be:	ab05      	add	r3, sp, #20
   110c0:	4c06      	ldr	r4, [pc, #24]	; (110dc <fiprintf+0x24>)
   110c2:	f853 2b04 	ldr.w	r2, [r3], #4
   110c6:	9301      	str	r3, [sp, #4]
   110c8:	4601      	mov	r1, r0
   110ca:	6820      	ldr	r0, [r4, #0]
   110cc:	f000 f8c4 	bl	11258 <_vfiprintf_r>
   110d0:	b003      	add	sp, #12
   110d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   110d6:	b003      	add	sp, #12
   110d8:	4770      	bx	lr
   110da:	bf00      	nop
   110dc:	1fff8f70 	.word	0x1fff8f70

000110e0 <__ssprint_r>:
   110e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   110e4:	6893      	ldr	r3, [r2, #8]
   110e6:	6817      	ldr	r7, [r2, #0]
   110e8:	b083      	sub	sp, #12
   110ea:	4692      	mov	sl, r2
   110ec:	2b00      	cmp	r3, #0
   110ee:	d070      	beq.n	111d2 <__ssprint_r+0xf2>
   110f0:	4681      	mov	r9, r0
   110f2:	688a      	ldr	r2, [r1, #8]
   110f4:	6808      	ldr	r0, [r1, #0]
   110f6:	460c      	mov	r4, r1
   110f8:	3708      	adds	r7, #8
   110fa:	e043      	b.n	11184 <__ssprint_r+0xa4>
   110fc:	89a3      	ldrh	r3, [r4, #12]
   110fe:	f413 6f90 	tst.w	r3, #1152	; 0x480
   11102:	d02e      	beq.n	11162 <__ssprint_r+0x82>
   11104:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   11108:	eba0 0801 	sub.w	r8, r0, r1
   1110c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   11110:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   11114:	f108 0001 	add.w	r0, r8, #1
   11118:	1076      	asrs	r6, r6, #1
   1111a:	4428      	add	r0, r5
   1111c:	42b0      	cmp	r0, r6
   1111e:	4632      	mov	r2, r6
   11120:	bf84      	itt	hi
   11122:	4606      	movhi	r6, r0
   11124:	4632      	movhi	r2, r6
   11126:	055b      	lsls	r3, r3, #21
   11128:	d537      	bpl.n	1119a <__ssprint_r+0xba>
   1112a:	4611      	mov	r1, r2
   1112c:	4648      	mov	r0, r9
   1112e:	f7fb fa19 	bl	c564 <_malloc_r>
   11132:	9001      	str	r0, [sp, #4]
   11134:	2800      	cmp	r0, #0
   11136:	d03a      	beq.n	111ae <__ssprint_r+0xce>
   11138:	4642      	mov	r2, r8
   1113a:	6921      	ldr	r1, [r4, #16]
   1113c:	f7f7 ff30 	bl	8fa0 <memcpy>
   11140:	89a2      	ldrh	r2, [r4, #12]
   11142:	9b01      	ldr	r3, [sp, #4]
   11144:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   11148:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1114c:	81a2      	strh	r2, [r4, #12]
   1114e:	eba6 0208 	sub.w	r2, r6, r8
   11152:	eb03 0008 	add.w	r0, r3, r8
   11156:	6166      	str	r6, [r4, #20]
   11158:	60a2      	str	r2, [r4, #8]
   1115a:	6123      	str	r3, [r4, #16]
   1115c:	6020      	str	r0, [r4, #0]
   1115e:	462e      	mov	r6, r5
   11160:	46a8      	mov	r8, r5
   11162:	4642      	mov	r2, r8
   11164:	4659      	mov	r1, fp
   11166:	f7fb ffef 	bl	d148 <memmove>
   1116a:	f8da 3008 	ldr.w	r3, [sl, #8]
   1116e:	68a2      	ldr	r2, [r4, #8]
   11170:	6820      	ldr	r0, [r4, #0]
   11172:	1b92      	subs	r2, r2, r6
   11174:	4440      	add	r0, r8
   11176:	1b5b      	subs	r3, r3, r5
   11178:	60a2      	str	r2, [r4, #8]
   1117a:	6020      	str	r0, [r4, #0]
   1117c:	f8ca 3008 	str.w	r3, [sl, #8]
   11180:	b33b      	cbz	r3, 111d2 <__ssprint_r+0xf2>
   11182:	3708      	adds	r7, #8
   11184:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   11188:	2d00      	cmp	r5, #0
   1118a:	d0fa      	beq.n	11182 <__ssprint_r+0xa2>
   1118c:	42aa      	cmp	r2, r5
   1118e:	4616      	mov	r6, r2
   11190:	4690      	mov	r8, r2
   11192:	d9b3      	bls.n	110fc <__ssprint_r+0x1c>
   11194:	462e      	mov	r6, r5
   11196:	46a8      	mov	r8, r5
   11198:	e7e3      	b.n	11162 <__ssprint_r+0x82>
   1119a:	4648      	mov	r0, r9
   1119c:	f7fb fc9e 	bl	cadc <_realloc_r>
   111a0:	4603      	mov	r3, r0
   111a2:	2800      	cmp	r0, #0
   111a4:	d1d3      	bne.n	1114e <__ssprint_r+0x6e>
   111a6:	6921      	ldr	r1, [r4, #16]
   111a8:	4648      	mov	r0, r9
   111aa:	f7fc fa57 	bl	d65c <_free_r>
   111ae:	89a3      	ldrh	r3, [r4, #12]
   111b0:	220c      	movs	r2, #12
   111b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   111b6:	f8c9 2000 	str.w	r2, [r9]
   111ba:	f04f 30ff 	mov.w	r0, #4294967295
   111be:	81a3      	strh	r3, [r4, #12]
   111c0:	2200      	movs	r2, #0
   111c2:	2300      	movs	r3, #0
   111c4:	f8ca 2008 	str.w	r2, [sl, #8]
   111c8:	f8ca 3004 	str.w	r3, [sl, #4]
   111cc:	b003      	add	sp, #12
   111ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111d2:	2000      	movs	r0, #0
   111d4:	2300      	movs	r3, #0
   111d6:	f8ca 3004 	str.w	r3, [sl, #4]
   111da:	b003      	add	sp, #12
   111dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000111e0 <__sprint_r.part.0>:
   111e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111e4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   111e6:	049c      	lsls	r4, r3, #18
   111e8:	4690      	mov	r8, r2
   111ea:	d52d      	bpl.n	11248 <__sprint_r.part.0+0x68>
   111ec:	6893      	ldr	r3, [r2, #8]
   111ee:	6812      	ldr	r2, [r2, #0]
   111f0:	b343      	cbz	r3, 11244 <__sprint_r.part.0+0x64>
   111f2:	468b      	mov	fp, r1
   111f4:	4606      	mov	r6, r0
   111f6:	f102 0908 	add.w	r9, r2, #8
   111fa:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   111fe:	ea5f 079a 	movs.w	r7, sl, lsr #2
   11202:	d015      	beq.n	11230 <__sprint_r.part.0+0x50>
   11204:	3d04      	subs	r5, #4
   11206:	2400      	movs	r4, #0
   11208:	e001      	b.n	1120e <__sprint_r.part.0+0x2e>
   1120a:	42a7      	cmp	r7, r4
   1120c:	d00e      	beq.n	1122c <__sprint_r.part.0+0x4c>
   1120e:	f855 1f04 	ldr.w	r1, [r5, #4]!
   11212:	465a      	mov	r2, fp
   11214:	4630      	mov	r0, r6
   11216:	f001 fa51 	bl	126bc <_fputwc_r>
   1121a:	1c43      	adds	r3, r0, #1
   1121c:	f104 0401 	add.w	r4, r4, #1
   11220:	d1f3      	bne.n	1120a <__sprint_r.part.0+0x2a>
   11222:	2300      	movs	r3, #0
   11224:	e9c8 3301 	strd	r3, r3, [r8, #4]
   11228:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1122c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   11230:	f02a 0a03 	bic.w	sl, sl, #3
   11234:	eba3 030a 	sub.w	r3, r3, sl
   11238:	f8c8 3008 	str.w	r3, [r8, #8]
   1123c:	f109 0908 	add.w	r9, r9, #8
   11240:	2b00      	cmp	r3, #0
   11242:	d1da      	bne.n	111fa <__sprint_r.part.0+0x1a>
   11244:	2000      	movs	r0, #0
   11246:	e7ec      	b.n	11222 <__sprint_r.part.0+0x42>
   11248:	f001 f808 	bl	1225c <__sfvwrite_r>
   1124c:	2300      	movs	r3, #0
   1124e:	e9c8 3301 	strd	r3, r3, [r8, #4]
   11252:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11256:	bf00      	nop

00011258 <_vfiprintf_r>:
   11258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1125c:	b0c5      	sub	sp, #276	; 0x114
   1125e:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   11262:	4683      	mov	fp, r0
   11264:	9103      	str	r1, [sp, #12]
   11266:	4616      	mov	r6, r2
   11268:	2100      	movs	r1, #0
   1126a:	2208      	movs	r2, #8
   1126c:	4650      	mov	r0, sl
   1126e:	461c      	mov	r4, r3
   11270:	9307      	str	r3, [sp, #28]
   11272:	f7fb ffe5 	bl	d240 <memset>
   11276:	f1bb 0f00 	cmp.w	fp, #0
   1127a:	d004      	beq.n	11286 <_vfiprintf_r+0x2e>
   1127c:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   11280:	2b00      	cmp	r3, #0
   11282:	f000 86a1 	beq.w	11fc8 <_vfiprintf_r+0xd70>
   11286:	9a03      	ldr	r2, [sp, #12]
   11288:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1128a:	07db      	lsls	r3, r3, #31
   1128c:	f140 851c 	bpl.w	11cc8 <_vfiprintf_r+0xa70>
   11290:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   11294:	b28a      	uxth	r2, r1
   11296:	0495      	lsls	r5, r2, #18
   11298:	d409      	bmi.n	112ae <_vfiprintf_r+0x56>
   1129a:	9b03      	ldr	r3, [sp, #12]
   1129c:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   112a0:	8199      	strh	r1, [r3, #12]
   112a2:	b28a      	uxth	r2, r1
   112a4:	4619      	mov	r1, r3
   112a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   112a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   112ac:	664b      	str	r3, [r1, #100]	; 0x64
   112ae:	0710      	lsls	r0, r2, #28
   112b0:	f140 8104 	bpl.w	114bc <_vfiprintf_r+0x264>
   112b4:	9b03      	ldr	r3, [sp, #12]
   112b6:	691b      	ldr	r3, [r3, #16]
   112b8:	2b00      	cmp	r3, #0
   112ba:	f000 80ff 	beq.w	114bc <_vfiprintf_r+0x264>
   112be:	f002 031a 	and.w	r3, r2, #26
   112c2:	2b0a      	cmp	r3, #10
   112c4:	f000 8108 	beq.w	114d8 <_vfiprintf_r+0x280>
   112c8:	2300      	movs	r3, #0
   112ca:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   112ce:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   112d2:	aa1b      	add	r2, sp, #108	; 0x6c
   112d4:	930b      	str	r3, [sp, #44]	; 0x2c
   112d6:	9218      	str	r2, [sp, #96]	; 0x60
   112d8:	4691      	mov	r9, r2
   112da:	930c      	str	r3, [sp, #48]	; 0x30
   112dc:	9305      	str	r3, [sp, #20]
   112de:	46b0      	mov	r8, r6
   112e0:	4644      	mov	r4, r8
   112e2:	4ba6      	ldr	r3, [pc, #664]	; (1157c <_vfiprintf_r+0x324>)
   112e4:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   112e8:	f7fc f82e 	bl	d348 <__locale_mb_cur_max>
   112ec:	4622      	mov	r2, r4
   112ee:	4603      	mov	r3, r0
   112f0:	a912      	add	r1, sp, #72	; 0x48
   112f2:	f8cd a000 	str.w	sl, [sp]
   112f6:	4658      	mov	r0, fp
   112f8:	47a8      	blx	r5
   112fa:	2800      	cmp	r0, #0
   112fc:	f000 8140 	beq.w	11580 <_vfiprintf_r+0x328>
   11300:	f2c0 8133 	blt.w	1156a <_vfiprintf_r+0x312>
   11304:	9a12      	ldr	r2, [sp, #72]	; 0x48
   11306:	2a25      	cmp	r2, #37	; 0x25
   11308:	4603      	mov	r3, r0
   1130a:	d001      	beq.n	11310 <_vfiprintf_r+0xb8>
   1130c:	441c      	add	r4, r3
   1130e:	e7e8      	b.n	112e2 <_vfiprintf_r+0x8a>
   11310:	ebb4 0608 	subs.w	r6, r4, r8
   11314:	4605      	mov	r5, r0
   11316:	f040 8137 	bne.w	11588 <_vfiprintf_r+0x330>
   1131a:	2300      	movs	r3, #0
   1131c:	7861      	ldrb	r1, [r4, #1]
   1131e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   11322:	f104 0801 	add.w	r8, r4, #1
   11326:	9306      	str	r3, [sp, #24]
   11328:	f04f 37ff 	mov.w	r7, #4294967295
   1132c:	461e      	mov	r6, r3
   1132e:	242b      	movs	r4, #43	; 0x2b
   11330:	f108 0801 	add.w	r8, r8, #1
   11334:	f1a1 0320 	sub.w	r3, r1, #32
   11338:	2b5a      	cmp	r3, #90	; 0x5a
   1133a:	f200 8165 	bhi.w	11608 <_vfiprintf_r+0x3b0>
   1133e:	e8df f013 	tbh	[pc, r3, lsl #1]
   11342:	029f      	.short	0x029f
   11344:	01630163 	.word	0x01630163
   11348:	0163029a 	.word	0x0163029a
   1134c:	01630163 	.word	0x01630163
   11350:	0163006a 	.word	0x0163006a
   11354:	02670163 	.word	0x02670163
   11358:	01630277 	.word	0x01630277
   1135c:	02810272 	.word	0x02810272
   11360:	027c0163 	.word	0x027c0163
   11364:	005b005b 	.word	0x005b005b
   11368:	005b005b 	.word	0x005b005b
   1136c:	005b005b 	.word	0x005b005b
   11370:	005b005b 	.word	0x005b005b
   11374:	0163005b 	.word	0x0163005b
   11378:	01630163 	.word	0x01630163
   1137c:	01630163 	.word	0x01630163
   11380:	01630163 	.word	0x01630163
   11384:	01630163 	.word	0x01630163
   11388:	00840246 	.word	0x00840246
   1138c:	01630163 	.word	0x01630163
   11390:	01630163 	.word	0x01630163
   11394:	01630163 	.word	0x01630163
   11398:	01630163 	.word	0x01630163
   1139c:	01630163 	.word	0x01630163
   113a0:	016300e2 	.word	0x016300e2
   113a4:	01630163 	.word	0x01630163
   113a8:	0163021d 	.word	0x0163021d
   113ac:	016302c4 	.word	0x016302c4
   113b0:	05940163 	.word	0x05940163
   113b4:	01630163 	.word	0x01630163
   113b8:	01630163 	.word	0x01630163
   113bc:	01630163 	.word	0x01630163
   113c0:	01630163 	.word	0x01630163
   113c4:	01630163 	.word	0x01630163
   113c8:	00860246 	.word	0x00860246
   113cc:	01630163 	.word	0x01630163
   113d0:	02b70163 	.word	0x02b70163
   113d4:	007f0086 	.word	0x007f0086
   113d8:	02aa0163 	.word	0x02aa0163
   113dc:	02e70163 	.word	0x02e70163
   113e0:	02d700e4 	.word	0x02d700e4
   113e4:	0163007f 	.word	0x0163007f
   113e8:	007c021d 	.word	0x007c021d
   113ec:	01630572 	.word	0x01630572
   113f0:	05740163 	.word	0x05740163
   113f4:	007c0163 	.word	0x007c0163
   113f8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   113fc:	2200      	movs	r2, #0
   113fe:	f818 1b01 	ldrb.w	r1, [r8], #1
   11402:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   11406:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   1140a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1140e:	2b09      	cmp	r3, #9
   11410:	d9f5      	bls.n	113fe <_vfiprintf_r+0x1a6>
   11412:	9206      	str	r2, [sp, #24]
   11414:	e78e      	b.n	11334 <_vfiprintf_r+0xdc>
   11416:	4658      	mov	r0, fp
   11418:	f7fe fce8 	bl	fdec <_localeconv_r>
   1141c:	6843      	ldr	r3, [r0, #4]
   1141e:	930d      	str	r3, [sp, #52]	; 0x34
   11420:	4618      	mov	r0, r3
   11422:	f7fc f84d 	bl	d4c0 <strlen>
   11426:	900e      	str	r0, [sp, #56]	; 0x38
   11428:	4605      	mov	r5, r0
   1142a:	4658      	mov	r0, fp
   1142c:	f7fe fcde 	bl	fdec <_localeconv_r>
   11430:	6883      	ldr	r3, [r0, #8]
   11432:	930c      	str	r3, [sp, #48]	; 0x30
   11434:	2d00      	cmp	r5, #0
   11436:	f040 84df 	bne.w	11df8 <_vfiprintf_r+0xba0>
   1143a:	f898 1000 	ldrb.w	r1, [r8]
   1143e:	e777      	b.n	11330 <_vfiprintf_r+0xd8>
   11440:	f898 1000 	ldrb.w	r1, [r8]
   11444:	f046 0620 	orr.w	r6, r6, #32
   11448:	e772      	b.n	11330 <_vfiprintf_r+0xd8>
   1144a:	f046 0610 	orr.w	r6, r6, #16
   1144e:	06b4      	lsls	r4, r6, #26
   11450:	f140 8178 	bpl.w	11744 <_vfiprintf_r+0x4ec>
   11454:	9b07      	ldr	r3, [sp, #28]
   11456:	3307      	adds	r3, #7
   11458:	f023 0307 	bic.w	r3, r3, #7
   1145c:	461a      	mov	r2, r3
   1145e:	6859      	ldr	r1, [r3, #4]
   11460:	f852 3b08 	ldr.w	r3, [r2], #8
   11464:	9207      	str	r2, [sp, #28]
   11466:	460a      	mov	r2, r1
   11468:	2900      	cmp	r1, #0
   1146a:	f2c0 847a 	blt.w	11d62 <_vfiprintf_r+0xb0a>
   1146e:	1c79      	adds	r1, r7, #1
   11470:	f000 85a7 	beq.w	11fc2 <_vfiprintf_r+0xd6a>
   11474:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   11478:	9102      	str	r1, [sp, #8]
   1147a:	ea53 0102 	orrs.w	r1, r3, r2
   1147e:	f000 8448 	beq.w	11d12 <_vfiprintf_r+0xaba>
   11482:	2b0a      	cmp	r3, #10
   11484:	f172 0100 	sbcs.w	r1, r2, #0
   11488:	f080 8549 	bcs.w	11f1e <_vfiprintf_r+0xcc6>
   1148c:	3330      	adds	r3, #48	; 0x30
   1148e:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   11492:	9e02      	ldr	r6, [sp, #8]
   11494:	2301      	movs	r3, #1
   11496:	9304      	str	r3, [sp, #16]
   11498:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   1149c:	9b04      	ldr	r3, [sp, #16]
   1149e:	42bb      	cmp	r3, r7
   114a0:	bfb8      	it	lt
   114a2:	463b      	movlt	r3, r7
   114a4:	9302      	str	r3, [sp, #8]
   114a6:	2300      	movs	r3, #0
   114a8:	9308      	str	r3, [sp, #32]
   114aa:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   114ae:	2b00      	cmp	r3, #0
   114b0:	f000 80b8 	beq.w	11624 <_vfiprintf_r+0x3cc>
   114b4:	9b02      	ldr	r3, [sp, #8]
   114b6:	3301      	adds	r3, #1
   114b8:	9302      	str	r3, [sp, #8]
   114ba:	e0b3      	b.n	11624 <_vfiprintf_r+0x3cc>
   114bc:	9d03      	ldr	r5, [sp, #12]
   114be:	4658      	mov	r0, fp
   114c0:	4629      	mov	r1, r5
   114c2:	f001 f83f 	bl	12544 <__swsetup_r>
   114c6:	2800      	cmp	r0, #0
   114c8:	f040 8656 	bne.w	12178 <_vfiprintf_r+0xf20>
   114cc:	89aa      	ldrh	r2, [r5, #12]
   114ce:	f002 031a 	and.w	r3, r2, #26
   114d2:	2b0a      	cmp	r3, #10
   114d4:	f47f aef8 	bne.w	112c8 <_vfiprintf_r+0x70>
   114d8:	9903      	ldr	r1, [sp, #12]
   114da:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   114de:	2b00      	cmp	r3, #0
   114e0:	f6ff aef2 	blt.w	112c8 <_vfiprintf_r+0x70>
   114e4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   114e6:	07db      	lsls	r3, r3, #31
   114e8:	d402      	bmi.n	114f0 <_vfiprintf_r+0x298>
   114ea:	0597      	lsls	r7, r2, #22
   114ec:	f140 8618 	bpl.w	12120 <_vfiprintf_r+0xec8>
   114f0:	9903      	ldr	r1, [sp, #12]
   114f2:	4623      	mov	r3, r4
   114f4:	4632      	mov	r2, r6
   114f6:	4658      	mov	r0, fp
   114f8:	f000 fe70 	bl	121dc <__sbprintf>
   114fc:	9005      	str	r0, [sp, #20]
   114fe:	9805      	ldr	r0, [sp, #20]
   11500:	b045      	add	sp, #276	; 0x114
   11502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11506:	f046 0610 	orr.w	r6, r6, #16
   1150a:	f016 0220 	ands.w	r2, r6, #32
   1150e:	f000 8126 	beq.w	1175e <_vfiprintf_r+0x506>
   11512:	9b07      	ldr	r3, [sp, #28]
   11514:	3307      	adds	r3, #7
   11516:	f023 0307 	bic.w	r3, r3, #7
   1151a:	4619      	mov	r1, r3
   1151c:	685a      	ldr	r2, [r3, #4]
   1151e:	f851 3b08 	ldr.w	r3, [r1], #8
   11522:	9107      	str	r1, [sp, #28]
   11524:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   11528:	9102      	str	r1, [sp, #8]
   1152a:	2100      	movs	r1, #0
   1152c:	2000      	movs	r0, #0
   1152e:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   11532:	1c78      	adds	r0, r7, #1
   11534:	f000 8200 	beq.w	11938 <_vfiprintf_r+0x6e0>
   11538:	9802      	ldr	r0, [sp, #8]
   1153a:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   1153e:	ea53 0002 	orrs.w	r0, r3, r2
   11542:	f040 81f8 	bne.w	11936 <_vfiprintf_r+0x6de>
   11546:	2f00      	cmp	r7, #0
   11548:	f040 8543 	bne.w	11fd2 <_vfiprintf_r+0xd7a>
   1154c:	2900      	cmp	r1, #0
   1154e:	f040 83e4 	bne.w	11d1a <_vfiprintf_r+0xac2>
   11552:	9b02      	ldr	r3, [sp, #8]
   11554:	f013 0301 	ands.w	r3, r3, #1
   11558:	9304      	str	r3, [sp, #16]
   1155a:	f000 8420 	beq.w	11d9e <_vfiprintf_r+0xb46>
   1155e:	2330      	movs	r3, #48	; 0x30
   11560:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   11564:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   11568:	e798      	b.n	1149c <_vfiprintf_r+0x244>
   1156a:	2208      	movs	r2, #8
   1156c:	2100      	movs	r1, #0
   1156e:	4650      	mov	r0, sl
   11570:	f7fb fe66 	bl	d240 <memset>
   11574:	2301      	movs	r3, #1
   11576:	441c      	add	r4, r3
   11578:	e6b3      	b.n	112e2 <_vfiprintf_r+0x8a>
   1157a:	bf00      	nop
   1157c:	1fff8ce4 	.word	0x1fff8ce4
   11580:	ebb4 0608 	subs.w	r6, r4, r8
   11584:	4605      	mov	r5, r0
   11586:	d01a      	beq.n	115be <_vfiprintf_r+0x366>
   11588:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1158a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1158c:	3301      	adds	r3, #1
   1158e:	4432      	add	r2, r6
   11590:	2b07      	cmp	r3, #7
   11592:	e9c9 8600 	strd	r8, r6, [r9]
   11596:	921a      	str	r2, [sp, #104]	; 0x68
   11598:	9319      	str	r3, [sp, #100]	; 0x64
   1159a:	dd1a      	ble.n	115d2 <_vfiprintf_r+0x37a>
   1159c:	2a00      	cmp	r2, #0
   1159e:	f000 83b4 	beq.w	11d0a <_vfiprintf_r+0xab2>
   115a2:	9903      	ldr	r1, [sp, #12]
   115a4:	aa18      	add	r2, sp, #96	; 0x60
   115a6:	4658      	mov	r0, fp
   115a8:	f7ff fe1a 	bl	111e0 <__sprint_r.part.0>
   115ac:	b9d8      	cbnz	r0, 115e6 <_vfiprintf_r+0x38e>
   115ae:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   115b2:	9b05      	ldr	r3, [sp, #20]
   115b4:	4433      	add	r3, r6
   115b6:	9305      	str	r3, [sp, #20]
   115b8:	2d00      	cmp	r5, #0
   115ba:	f47f aeae 	bne.w	1131a <_vfiprintf_r+0xc2>
   115be:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   115c0:	2b00      	cmp	r3, #0
   115c2:	f040 85ca 	bne.w	1215a <_vfiprintf_r+0xf02>
   115c6:	9b03      	ldr	r3, [sp, #12]
   115c8:	2200      	movs	r2, #0
   115ca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   115ce:	9219      	str	r2, [sp, #100]	; 0x64
   115d0:	e00c      	b.n	115ec <_vfiprintf_r+0x394>
   115d2:	f109 0908 	add.w	r9, r9, #8
   115d6:	e7ec      	b.n	115b2 <_vfiprintf_r+0x35a>
   115d8:	46b3      	mov	fp, r6
   115da:	9b08      	ldr	r3, [sp, #32]
   115dc:	b11b      	cbz	r3, 115e6 <_vfiprintf_r+0x38e>
   115de:	9908      	ldr	r1, [sp, #32]
   115e0:	4658      	mov	r0, fp
   115e2:	f7fc f83b 	bl	d65c <_free_r>
   115e6:	9b03      	ldr	r3, [sp, #12]
   115e8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   115ec:	9a03      	ldr	r2, [sp, #12]
   115ee:	6e52      	ldr	r2, [r2, #100]	; 0x64
   115f0:	f012 0f01 	tst.w	r2, #1
   115f4:	b29a      	uxth	r2, r3
   115f6:	f000 809c 	beq.w	11732 <_vfiprintf_r+0x4da>
   115fa:	0650      	lsls	r0, r2, #25
   115fc:	f100 85c8 	bmi.w	12190 <_vfiprintf_r+0xf38>
   11600:	9805      	ldr	r0, [sp, #20]
   11602:	b045      	add	sp, #276	; 0x114
   11604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11608:	2900      	cmp	r1, #0
   1160a:	d0d8      	beq.n	115be <_vfiprintf_r+0x366>
   1160c:	2300      	movs	r3, #0
   1160e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   11612:	2301      	movs	r3, #1
   11614:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   11618:	9302      	str	r3, [sp, #8]
   1161a:	9304      	str	r3, [sp, #16]
   1161c:	ac2b      	add	r4, sp, #172	; 0xac
   1161e:	2300      	movs	r3, #0
   11620:	9308      	str	r3, [sp, #32]
   11622:	461f      	mov	r7, r3
   11624:	f016 0302 	ands.w	r3, r6, #2
   11628:	9309      	str	r3, [sp, #36]	; 0x24
   1162a:	d002      	beq.n	11632 <_vfiprintf_r+0x3da>
   1162c:	9b02      	ldr	r3, [sp, #8]
   1162e:	3302      	adds	r3, #2
   11630:	9302      	str	r3, [sp, #8]
   11632:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   11636:	930a      	str	r3, [sp, #40]	; 0x28
   11638:	d105      	bne.n	11646 <_vfiprintf_r+0x3ee>
   1163a:	9b06      	ldr	r3, [sp, #24]
   1163c:	9a02      	ldr	r2, [sp, #8]
   1163e:	1a9d      	subs	r5, r3, r2
   11640:	2d00      	cmp	r5, #0
   11642:	f300 8294 	bgt.w	11b6e <_vfiprintf_r+0x916>
   11646:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1164a:	1c41      	adds	r1, r0, #1
   1164c:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   11650:	b182      	cbz	r2, 11674 <_vfiprintf_r+0x41c>
   11652:	2201      	movs	r2, #1
   11654:	3301      	adds	r3, #1
   11656:	f8c9 2004 	str.w	r2, [r9, #4]
   1165a:	2907      	cmp	r1, #7
   1165c:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   11660:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   11664:	f8c9 2000 	str.w	r2, [r9]
   11668:	f300 8264 	bgt.w	11b34 <_vfiprintf_r+0x8dc>
   1166c:	4608      	mov	r0, r1
   1166e:	f109 0908 	add.w	r9, r9, #8
   11672:	3101      	adds	r1, #1
   11674:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11676:	b1da      	cbz	r2, 116b0 <_vfiprintf_r+0x458>
   11678:	aa11      	add	r2, sp, #68	; 0x44
   1167a:	3302      	adds	r3, #2
   1167c:	f8c9 2000 	str.w	r2, [r9]
   11680:	2907      	cmp	r1, #7
   11682:	f04f 0202 	mov.w	r2, #2
   11686:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   1168a:	f8c9 2004 	str.w	r2, [r9, #4]
   1168e:	f340 8269 	ble.w	11b64 <_vfiprintf_r+0x90c>
   11692:	2b00      	cmp	r3, #0
   11694:	f000 8358 	beq.w	11d48 <_vfiprintf_r+0xaf0>
   11698:	9903      	ldr	r1, [sp, #12]
   1169a:	aa18      	add	r2, sp, #96	; 0x60
   1169c:	4658      	mov	r0, fp
   1169e:	f7ff fd9f 	bl	111e0 <__sprint_r.part.0>
   116a2:	2800      	cmp	r0, #0
   116a4:	d199      	bne.n	115da <_vfiprintf_r+0x382>
   116a6:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   116aa:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   116ae:	1c41      	adds	r1, r0, #1
   116b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   116b2:	2a80      	cmp	r2, #128	; 0x80
   116b4:	f000 8182 	beq.w	119bc <_vfiprintf_r+0x764>
   116b8:	9a04      	ldr	r2, [sp, #16]
   116ba:	1abd      	subs	r5, r7, r2
   116bc:	2d00      	cmp	r5, #0
   116be:	f300 81e0 	bgt.w	11a82 <_vfiprintf_r+0x82a>
   116c2:	9a04      	ldr	r2, [sp, #16]
   116c4:	f8c9 4000 	str.w	r4, [r9]
   116c8:	4413      	add	r3, r2
   116ca:	2907      	cmp	r1, #7
   116cc:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   116d0:	f8c9 2004 	str.w	r2, [r9, #4]
   116d4:	f340 816c 	ble.w	119b0 <_vfiprintf_r+0x758>
   116d8:	2b00      	cmp	r3, #0
   116da:	f000 829e 	beq.w	11c1a <_vfiprintf_r+0x9c2>
   116de:	9903      	ldr	r1, [sp, #12]
   116e0:	aa18      	add	r2, sp, #96	; 0x60
   116e2:	4658      	mov	r0, fp
   116e4:	f7ff fd7c 	bl	111e0 <__sprint_r.part.0>
   116e8:	2800      	cmp	r0, #0
   116ea:	f47f af76 	bne.w	115da <_vfiprintf_r+0x382>
   116ee:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   116f0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   116f4:	0775      	lsls	r5, r6, #29
   116f6:	d505      	bpl.n	11704 <_vfiprintf_r+0x4ac>
   116f8:	9a06      	ldr	r2, [sp, #24]
   116fa:	9902      	ldr	r1, [sp, #8]
   116fc:	1a54      	subs	r4, r2, r1
   116fe:	2c00      	cmp	r4, #0
   11700:	f300 8295 	bgt.w	11c2e <_vfiprintf_r+0x9d6>
   11704:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   11708:	9802      	ldr	r0, [sp, #8]
   1170a:	4281      	cmp	r1, r0
   1170c:	bfac      	ite	ge
   1170e:	1852      	addge	r2, r2, r1
   11710:	1812      	addlt	r2, r2, r0
   11712:	9205      	str	r2, [sp, #20]
   11714:	2b00      	cmp	r3, #0
   11716:	f040 81fe 	bne.w	11b16 <_vfiprintf_r+0x8be>
   1171a:	9908      	ldr	r1, [sp, #32]
   1171c:	2300      	movs	r3, #0
   1171e:	9319      	str	r3, [sp, #100]	; 0x64
   11720:	2900      	cmp	r1, #0
   11722:	f000 8148 	beq.w	119b6 <_vfiprintf_r+0x75e>
   11726:	4658      	mov	r0, fp
   11728:	f7fb ff98 	bl	d65c <_free_r>
   1172c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11730:	e5d6      	b.n	112e0 <_vfiprintf_r+0x88>
   11732:	059c      	lsls	r4, r3, #22
   11734:	f53f af61 	bmi.w	115fa <_vfiprintf_r+0x3a2>
   11738:	9c03      	ldr	r4, [sp, #12]
   1173a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1173c:	f7fb fea0 	bl	d480 <__retarget_lock_release_recursive>
   11740:	89a2      	ldrh	r2, [r4, #12]
   11742:	e75a      	b.n	115fa <_vfiprintf_r+0x3a2>
   11744:	06f0      	lsls	r0, r6, #27
   11746:	9a07      	ldr	r2, [sp, #28]
   11748:	f100 833e 	bmi.w	11dc8 <_vfiprintf_r+0xb70>
   1174c:	0671      	lsls	r1, r6, #25
   1174e:	f140 8338 	bpl.w	11dc2 <_vfiprintf_r+0xb6a>
   11752:	f932 3b04 	ldrsh.w	r3, [r2], #4
   11756:	9207      	str	r2, [sp, #28]
   11758:	17da      	asrs	r2, r3, #31
   1175a:	4611      	mov	r1, r2
   1175c:	e684      	b.n	11468 <_vfiprintf_r+0x210>
   1175e:	f016 0310 	ands.w	r3, r6, #16
   11762:	9907      	ldr	r1, [sp, #28]
   11764:	f040 8328 	bne.w	11db8 <_vfiprintf_r+0xb60>
   11768:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   1176c:	f000 8320 	beq.w	11db0 <_vfiprintf_r+0xb58>
   11770:	461a      	mov	r2, r3
   11772:	f851 3b04 	ldr.w	r3, [r1], #4
   11776:	9107      	str	r1, [sp, #28]
   11778:	b29b      	uxth	r3, r3
   1177a:	e6d3      	b.n	11524 <_vfiprintf_r+0x2cc>
   1177c:	9b07      	ldr	r3, [sp, #28]
   1177e:	461a      	mov	r2, r3
   11780:	2300      	movs	r3, #0
   11782:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   11786:	4613      	mov	r3, r2
   11788:	f853 4b04 	ldr.w	r4, [r3], #4
   1178c:	9302      	str	r3, [sp, #8]
   1178e:	2c00      	cmp	r4, #0
   11790:	f000 842d 	beq.w	11fee <_vfiprintf_r+0xd96>
   11794:	2953      	cmp	r1, #83	; 0x53
   11796:	f000 838a 	beq.w	11eae <_vfiprintf_r+0xc56>
   1179a:	f016 0510 	ands.w	r5, r6, #16
   1179e:	f040 8386 	bne.w	11eae <_vfiprintf_r+0xc56>
   117a2:	1c7b      	adds	r3, r7, #1
   117a4:	f000 84cc 	beq.w	12140 <_vfiprintf_r+0xee8>
   117a8:	463a      	mov	r2, r7
   117aa:	4629      	mov	r1, r5
   117ac:	4620      	mov	r0, r4
   117ae:	f7fe fb37 	bl	fe20 <memchr>
   117b2:	9008      	str	r0, [sp, #32]
   117b4:	2800      	cmp	r0, #0
   117b6:	f000 84b8 	beq.w	1212a <_vfiprintf_r+0xed2>
   117ba:	1b03      	subs	r3, r0, r4
   117bc:	9a02      	ldr	r2, [sp, #8]
   117be:	9304      	str	r3, [sp, #16]
   117c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   117c4:	462f      	mov	r7, r5
   117c6:	9207      	str	r2, [sp, #28]
   117c8:	9302      	str	r3, [sp, #8]
   117ca:	9508      	str	r5, [sp, #32]
   117cc:	e66d      	b.n	114aa <_vfiprintf_r+0x252>
   117ce:	2943      	cmp	r1, #67	; 0x43
   117d0:	d002      	beq.n	117d8 <_vfiprintf_r+0x580>
   117d2:	06f5      	lsls	r5, r6, #27
   117d4:	f140 8352 	bpl.w	11e7c <_vfiprintf_r+0xc24>
   117d8:	9d07      	ldr	r5, [sp, #28]
   117da:	2208      	movs	r2, #8
   117dc:	2100      	movs	r1, #0
   117de:	a816      	add	r0, sp, #88	; 0x58
   117e0:	ac2b      	add	r4, sp, #172	; 0xac
   117e2:	f7fb fd2d 	bl	d240 <memset>
   117e6:	ab16      	add	r3, sp, #88	; 0x58
   117e8:	f855 2b04 	ldr.w	r2, [r5], #4
   117ec:	4621      	mov	r1, r4
   117ee:	4658      	mov	r0, fp
   117f0:	f7ff fc2e 	bl	11050 <_wcrtomb_r>
   117f4:	4603      	mov	r3, r0
   117f6:	3301      	adds	r3, #1
   117f8:	9004      	str	r0, [sp, #16]
   117fa:	f000 84ce 	beq.w	1219a <_vfiprintf_r+0xf42>
   117fe:	9b04      	ldr	r3, [sp, #16]
   11800:	9507      	str	r5, [sp, #28]
   11802:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   11806:	9302      	str	r3, [sp, #8]
   11808:	2300      	movs	r3, #0
   1180a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   1180e:	e706      	b.n	1161e <_vfiprintf_r+0x3c6>
   11810:	9b07      	ldr	r3, [sp, #28]
   11812:	f853 2b04 	ldr.w	r2, [r3], #4
   11816:	9206      	str	r2, [sp, #24]
   11818:	2a00      	cmp	r2, #0
   1181a:	f280 82bb 	bge.w	11d94 <_vfiprintf_r+0xb3c>
   1181e:	9a06      	ldr	r2, [sp, #24]
   11820:	4252      	negs	r2, r2
   11822:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11826:	f898 1000 	ldrb.w	r1, [r8]
   1182a:	f046 0604 	orr.w	r6, r6, #4
   1182e:	e57f      	b.n	11330 <_vfiprintf_r+0xd8>
   11830:	f898 1000 	ldrb.w	r1, [r8]
   11834:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   11838:	e57a      	b.n	11330 <_vfiprintf_r+0xd8>
   1183a:	f898 1000 	ldrb.w	r1, [r8]
   1183e:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   11842:	e575      	b.n	11330 <_vfiprintf_r+0xd8>
   11844:	4642      	mov	r2, r8
   11846:	f812 1b01 	ldrb.w	r1, [r2], #1
   1184a:	292a      	cmp	r1, #42	; 0x2a
   1184c:	f000 84b0 	beq.w	121b0 <_vfiprintf_r+0xf58>
   11850:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   11854:	2b09      	cmp	r3, #9
   11856:	4690      	mov	r8, r2
   11858:	f04f 0700 	mov.w	r7, #0
   1185c:	f63f ad6a 	bhi.w	11334 <_vfiprintf_r+0xdc>
   11860:	f818 1b01 	ldrb.w	r1, [r8], #1
   11864:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   11868:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   1186c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   11870:	2b09      	cmp	r3, #9
   11872:	d9f5      	bls.n	11860 <_vfiprintf_r+0x608>
   11874:	e55e      	b.n	11334 <_vfiprintf_r+0xdc>
   11876:	f898 1000 	ldrb.w	r1, [r8]
   1187a:	f046 0601 	orr.w	r6, r6, #1
   1187e:	e557      	b.n	11330 <_vfiprintf_r+0xd8>
   11880:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   11884:	2b00      	cmp	r3, #0
   11886:	f47f add8 	bne.w	1143a <_vfiprintf_r+0x1e2>
   1188a:	2320      	movs	r3, #32
   1188c:	f898 1000 	ldrb.w	r1, [r8]
   11890:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   11894:	e54c      	b.n	11330 <_vfiprintf_r+0xd8>
   11896:	f898 1000 	ldrb.w	r1, [r8]
   1189a:	296c      	cmp	r1, #108	; 0x6c
   1189c:	bf03      	ittte	eq
   1189e:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   118a2:	f046 0620 	orreq.w	r6, r6, #32
   118a6:	f108 0801 	addeq.w	r8, r8, #1
   118aa:	f046 0610 	orrne.w	r6, r6, #16
   118ae:	e53f      	b.n	11330 <_vfiprintf_r+0xd8>
   118b0:	f898 1000 	ldrb.w	r1, [r8]
   118b4:	2968      	cmp	r1, #104	; 0x68
   118b6:	bf03      	ittte	eq
   118b8:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   118bc:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   118c0:	f108 0801 	addeq.w	r8, r8, #1
   118c4:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   118c8:	e532      	b.n	11330 <_vfiprintf_r+0xd8>
   118ca:	f046 0310 	orr.w	r3, r6, #16
   118ce:	9302      	str	r3, [sp, #8]
   118d0:	9b02      	ldr	r3, [sp, #8]
   118d2:	f013 0220 	ands.w	r2, r3, #32
   118d6:	f000 8225 	beq.w	11d24 <_vfiprintf_r+0xacc>
   118da:	9b07      	ldr	r3, [sp, #28]
   118dc:	3307      	adds	r3, #7
   118de:	f023 0307 	bic.w	r3, r3, #7
   118e2:	4619      	mov	r1, r3
   118e4:	685a      	ldr	r2, [r3, #4]
   118e6:	f851 3b08 	ldr.w	r3, [r1], #8
   118ea:	9107      	str	r1, [sp, #28]
   118ec:	2101      	movs	r1, #1
   118ee:	e61d      	b.n	1152c <_vfiprintf_r+0x2d4>
   118f0:	9a07      	ldr	r2, [sp, #28]
   118f2:	f046 0302 	orr.w	r3, r6, #2
   118f6:	9302      	str	r3, [sp, #8]
   118f8:	f852 3b04 	ldr.w	r3, [r2], #4
   118fc:	9207      	str	r2, [sp, #28]
   118fe:	f647 0230 	movw	r2, #30768	; 0x7830
   11902:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   11906:	4aa1      	ldr	r2, [pc, #644]	; (11b8c <_vfiprintf_r+0x934>)
   11908:	920b      	str	r2, [sp, #44]	; 0x2c
   1190a:	2102      	movs	r1, #2
   1190c:	2200      	movs	r2, #0
   1190e:	e60d      	b.n	1152c <_vfiprintf_r+0x2d4>
   11910:	06b7      	lsls	r7, r6, #26
   11912:	f100 8267 	bmi.w	11de4 <_vfiprintf_r+0xb8c>
   11916:	06f5      	lsls	r5, r6, #27
   11918:	f100 8361 	bmi.w	11fde <_vfiprintf_r+0xd86>
   1191c:	0674      	lsls	r4, r6, #25
   1191e:	f100 83ee 	bmi.w	120fe <_vfiprintf_r+0xea6>
   11922:	05b0      	lsls	r0, r6, #22
   11924:	f140 835b 	bpl.w	11fde <_vfiprintf_r+0xd86>
   11928:	9b07      	ldr	r3, [sp, #28]
   1192a:	9905      	ldr	r1, [sp, #20]
   1192c:	f853 2b04 	ldr.w	r2, [r3], #4
   11930:	9307      	str	r3, [sp, #28]
   11932:	7011      	strb	r1, [r2, #0]
   11934:	e4d4      	b.n	112e0 <_vfiprintf_r+0x88>
   11936:	9602      	str	r6, [sp, #8]
   11938:	2901      	cmp	r1, #1
   1193a:	f43f ada2 	beq.w	11482 <_vfiprintf_r+0x22a>
   1193e:	2902      	cmp	r1, #2
   11940:	ac44      	add	r4, sp, #272	; 0x110
   11942:	d111      	bne.n	11968 <_vfiprintf_r+0x710>
   11944:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11946:	f003 010f 	and.w	r1, r3, #15
   1194a:	091b      	lsrs	r3, r3, #4
   1194c:	5c41      	ldrb	r1, [r0, r1]
   1194e:	f804 1d01 	strb.w	r1, [r4, #-1]!
   11952:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   11956:	0912      	lsrs	r2, r2, #4
   11958:	ea53 0102 	orrs.w	r1, r3, r2
   1195c:	d1f3      	bne.n	11946 <_vfiprintf_r+0x6ee>
   1195e:	9e02      	ldr	r6, [sp, #8]
   11960:	ab44      	add	r3, sp, #272	; 0x110
   11962:	1b1b      	subs	r3, r3, r4
   11964:	9304      	str	r3, [sp, #16]
   11966:	e599      	b.n	1149c <_vfiprintf_r+0x244>
   11968:	f003 0107 	and.w	r1, r3, #7
   1196c:	08db      	lsrs	r3, r3, #3
   1196e:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   11972:	08d2      	lsrs	r2, r2, #3
   11974:	3130      	adds	r1, #48	; 0x30
   11976:	ea53 0502 	orrs.w	r5, r3, r2
   1197a:	4620      	mov	r0, r4
   1197c:	f804 1d01 	strb.w	r1, [r4, #-1]!
   11980:	d1f2      	bne.n	11968 <_vfiprintf_r+0x710>
   11982:	9e02      	ldr	r6, [sp, #8]
   11984:	07f3      	lsls	r3, r6, #31
   11986:	d5eb      	bpl.n	11960 <_vfiprintf_r+0x708>
   11988:	2930      	cmp	r1, #48	; 0x30
   1198a:	d0e8      	beq.n	1195e <_vfiprintf_r+0x706>
   1198c:	2330      	movs	r3, #48	; 0x30
   1198e:	3802      	subs	r0, #2
   11990:	f804 3c01 	strb.w	r3, [r4, #-1]
   11994:	ab44      	add	r3, sp, #272	; 0x110
   11996:	1a1b      	subs	r3, r3, r0
   11998:	9e02      	ldr	r6, [sp, #8]
   1199a:	9304      	str	r3, [sp, #16]
   1199c:	4604      	mov	r4, r0
   1199e:	e57d      	b.n	1149c <_vfiprintf_r+0x244>
   119a0:	9b04      	ldr	r3, [sp, #16]
   119a2:	941b      	str	r4, [sp, #108]	; 0x6c
   119a4:	2201      	movs	r2, #1
   119a6:	931c      	str	r3, [sp, #112]	; 0x70
   119a8:	931a      	str	r3, [sp, #104]	; 0x68
   119aa:	9219      	str	r2, [sp, #100]	; 0x64
   119ac:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   119b0:	f109 0908 	add.w	r9, r9, #8
   119b4:	e69e      	b.n	116f4 <_vfiprintf_r+0x49c>
   119b6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   119ba:	e491      	b.n	112e0 <_vfiprintf_r+0x88>
   119bc:	9a06      	ldr	r2, [sp, #24]
   119be:	9d02      	ldr	r5, [sp, #8]
   119c0:	1b55      	subs	r5, r2, r5
   119c2:	2d00      	cmp	r5, #0
   119c4:	f77f ae78 	ble.w	116b8 <_vfiprintf_r+0x460>
   119c8:	2d10      	cmp	r5, #16
   119ca:	f340 83d3 	ble.w	12174 <_vfiprintf_r+0xf1c>
   119ce:	4619      	mov	r1, r3
   119d0:	4643      	mov	r3, r8
   119d2:	9409      	str	r4, [sp, #36]	; 0x24
   119d4:	46b8      	mov	r8, r7
   119d6:	9c03      	ldr	r4, [sp, #12]
   119d8:	4637      	mov	r7, r6
   119da:	465e      	mov	r6, fp
   119dc:	469b      	mov	fp, r3
   119de:	e007      	b.n	119f0 <_vfiprintf_r+0x798>
   119e0:	f100 0c02 	add.w	ip, r0, #2
   119e4:	f109 0908 	add.w	r9, r9, #8
   119e8:	4610      	mov	r0, r2
   119ea:	3d10      	subs	r5, #16
   119ec:	2d10      	cmp	r5, #16
   119ee:	dd1f      	ble.n	11a30 <_vfiprintf_r+0x7d8>
   119f0:	4b67      	ldr	r3, [pc, #412]	; (11b90 <_vfiprintf_r+0x938>)
   119f2:	f8c9 3000 	str.w	r3, [r9]
   119f6:	1c42      	adds	r2, r0, #1
   119f8:	3110      	adds	r1, #16
   119fa:	2310      	movs	r3, #16
   119fc:	2a07      	cmp	r2, #7
   119fe:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   11a02:	f8c9 3004 	str.w	r3, [r9, #4]
   11a06:	ddeb      	ble.n	119e0 <_vfiprintf_r+0x788>
   11a08:	aa18      	add	r2, sp, #96	; 0x60
   11a0a:	2900      	cmp	r1, #0
   11a0c:	f000 808c 	beq.w	11b28 <_vfiprintf_r+0x8d0>
   11a10:	4621      	mov	r1, r4
   11a12:	4630      	mov	r0, r6
   11a14:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11a18:	f7ff fbe2 	bl	111e0 <__sprint_r.part.0>
   11a1c:	2800      	cmp	r0, #0
   11a1e:	f47f addb 	bne.w	115d8 <_vfiprintf_r+0x380>
   11a22:	e9dd 0119 	ldrd	r0, r1, [sp, #100]	; 0x64
   11a26:	3d10      	subs	r5, #16
   11a28:	2d10      	cmp	r5, #16
   11a2a:	f100 0c01 	add.w	ip, r0, #1
   11a2e:	dcdf      	bgt.n	119f0 <_vfiprintf_r+0x798>
   11a30:	465a      	mov	r2, fp
   11a32:	9c09      	ldr	r4, [sp, #36]	; 0x24
   11a34:	46b3      	mov	fp, r6
   11a36:	460b      	mov	r3, r1
   11a38:	463e      	mov	r6, r7
   11a3a:	4647      	mov	r7, r8
   11a3c:	4690      	mov	r8, r2
   11a3e:	4a54      	ldr	r2, [pc, #336]	; (11b90 <_vfiprintf_r+0x938>)
   11a40:	f8c9 5004 	str.w	r5, [r9, #4]
   11a44:	442b      	add	r3, r5
   11a46:	f1bc 0f07 	cmp.w	ip, #7
   11a4a:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   11a4e:	f8c9 2000 	str.w	r2, [r9]
   11a52:	f340 81a7 	ble.w	11da4 <_vfiprintf_r+0xb4c>
   11a56:	2b00      	cmp	r3, #0
   11a58:	f000 832c 	beq.w	120b4 <_vfiprintf_r+0xe5c>
   11a5c:	9903      	ldr	r1, [sp, #12]
   11a5e:	aa18      	add	r2, sp, #96	; 0x60
   11a60:	4658      	mov	r0, fp
   11a62:	f7ff fbbd 	bl	111e0 <__sprint_r.part.0>
   11a66:	2800      	cmp	r0, #0
   11a68:	f47f adb7 	bne.w	115da <_vfiprintf_r+0x382>
   11a6c:	9a04      	ldr	r2, [sp, #16]
   11a6e:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   11a72:	1abd      	subs	r5, r7, r2
   11a74:	2d00      	cmp	r5, #0
   11a76:	f100 0101 	add.w	r1, r0, #1
   11a7a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11a7e:	f77f ae20 	ble.w	116c2 <_vfiprintf_r+0x46a>
   11a82:	2d10      	cmp	r5, #16
   11a84:	dd32      	ble.n	11aec <_vfiprintf_r+0x894>
   11a86:	4619      	mov	r1, r3
   11a88:	4643      	mov	r3, r8
   11a8a:	9409      	str	r4, [sp, #36]	; 0x24
   11a8c:	46b0      	mov	r8, r6
   11a8e:	9c03      	ldr	r4, [sp, #12]
   11a90:	465e      	mov	r6, fp
   11a92:	2710      	movs	r7, #16
   11a94:	469b      	mov	fp, r3
   11a96:	e007      	b.n	11aa8 <_vfiprintf_r+0x850>
   11a98:	f100 0c02 	add.w	ip, r0, #2
   11a9c:	f109 0908 	add.w	r9, r9, #8
   11aa0:	4610      	mov	r0, r2
   11aa2:	3d10      	subs	r5, #16
   11aa4:	2d10      	cmp	r5, #16
   11aa6:	dd1a      	ble.n	11ade <_vfiprintf_r+0x886>
   11aa8:	1c42      	adds	r2, r0, #1
   11aaa:	4b39      	ldr	r3, [pc, #228]	; (11b90 <_vfiprintf_r+0x938>)
   11aac:	3110      	adds	r1, #16
   11aae:	2a07      	cmp	r2, #7
   11ab0:	e9c9 3700 	strd	r3, r7, [r9]
   11ab4:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   11ab8:	ddee      	ble.n	11a98 <_vfiprintf_r+0x840>
   11aba:	aa18      	add	r2, sp, #96	; 0x60
   11abc:	b329      	cbz	r1, 11b0a <_vfiprintf_r+0x8b2>
   11abe:	4621      	mov	r1, r4
   11ac0:	4630      	mov	r0, r6
   11ac2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11ac6:	f7ff fb8b 	bl	111e0 <__sprint_r.part.0>
   11aca:	2800      	cmp	r0, #0
   11acc:	f47f ad84 	bne.w	115d8 <_vfiprintf_r+0x380>
   11ad0:	e9dd 0119 	ldrd	r0, r1, [sp, #100]	; 0x64
   11ad4:	3d10      	subs	r5, #16
   11ad6:	2d10      	cmp	r5, #16
   11ad8:	f100 0c01 	add.w	ip, r0, #1
   11adc:	dce4      	bgt.n	11aa8 <_vfiprintf_r+0x850>
   11ade:	465a      	mov	r2, fp
   11ae0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   11ae2:	460b      	mov	r3, r1
   11ae4:	46b3      	mov	fp, r6
   11ae6:	4661      	mov	r1, ip
   11ae8:	4646      	mov	r6, r8
   11aea:	4690      	mov	r8, r2
   11aec:	4a28      	ldr	r2, [pc, #160]	; (11b90 <_vfiprintf_r+0x938>)
   11aee:	f8c9 5004 	str.w	r5, [r9, #4]
   11af2:	442b      	add	r3, r5
   11af4:	2907      	cmp	r1, #7
   11af6:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   11afa:	f8c9 2000 	str.w	r2, [r9]
   11afe:	f300 80f3 	bgt.w	11ce8 <_vfiprintf_r+0xa90>
   11b02:	f109 0908 	add.w	r9, r9, #8
   11b06:	3101      	adds	r1, #1
   11b08:	e5db      	b.n	116c2 <_vfiprintf_r+0x46a>
   11b0a:	f04f 0c01 	mov.w	ip, #1
   11b0e:	4608      	mov	r0, r1
   11b10:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11b14:	e7c5      	b.n	11aa2 <_vfiprintf_r+0x84a>
   11b16:	9903      	ldr	r1, [sp, #12]
   11b18:	aa18      	add	r2, sp, #96	; 0x60
   11b1a:	4658      	mov	r0, fp
   11b1c:	f7ff fb60 	bl	111e0 <__sprint_r.part.0>
   11b20:	2800      	cmp	r0, #0
   11b22:	f43f adfa 	beq.w	1171a <_vfiprintf_r+0x4c2>
   11b26:	e558      	b.n	115da <_vfiprintf_r+0x382>
   11b28:	f04f 0c01 	mov.w	ip, #1
   11b2c:	4608      	mov	r0, r1
   11b2e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11b32:	e75a      	b.n	119ea <_vfiprintf_r+0x792>
   11b34:	2b00      	cmp	r3, #0
   11b36:	f000 810c 	beq.w	11d52 <_vfiprintf_r+0xafa>
   11b3a:	9903      	ldr	r1, [sp, #12]
   11b3c:	aa18      	add	r2, sp, #96	; 0x60
   11b3e:	4658      	mov	r0, fp
   11b40:	f7ff fb4e 	bl	111e0 <__sprint_r.part.0>
   11b44:	2800      	cmp	r0, #0
   11b46:	f47f ad48 	bne.w	115da <_vfiprintf_r+0x382>
   11b4a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   11b4e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11b52:	1c41      	adds	r1, r0, #1
   11b54:	e58e      	b.n	11674 <_vfiprintf_r+0x41c>
   11b56:	2302      	movs	r3, #2
   11b58:	aa11      	add	r2, sp, #68	; 0x44
   11b5a:	931c      	str	r3, [sp, #112]	; 0x70
   11b5c:	921b      	str	r2, [sp, #108]	; 0x6c
   11b5e:	2101      	movs	r1, #1
   11b60:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11b64:	4608      	mov	r0, r1
   11b66:	f109 0908 	add.w	r9, r9, #8
   11b6a:	1c41      	adds	r1, r0, #1
   11b6c:	e5a0      	b.n	116b0 <_vfiprintf_r+0x458>
   11b6e:	2d10      	cmp	r5, #16
   11b70:	f340 82e2 	ble.w	12138 <_vfiprintf_r+0xee0>
   11b74:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   11b78:	4618      	mov	r0, r3
   11b7a:	4643      	mov	r3, r8
   11b7c:	940f      	str	r4, [sp, #60]	; 0x3c
   11b7e:	46b8      	mov	r8, r7
   11b80:	9c03      	ldr	r4, [sp, #12]
   11b82:	4637      	mov	r7, r6
   11b84:	465e      	mov	r6, fp
   11b86:	469b      	mov	fp, r3
   11b88:	e00c      	b.n	11ba4 <_vfiprintf_r+0x94c>
   11b8a:	bf00      	nop
   11b8c:	00014954 	.word	0x00014954
   11b90:	00014a60 	.word	0x00014a60
   11b94:	f101 0c02 	add.w	ip, r1, #2
   11b98:	f109 0908 	add.w	r9, r9, #8
   11b9c:	4611      	mov	r1, r2
   11b9e:	3d10      	subs	r5, #16
   11ba0:	2d10      	cmp	r5, #16
   11ba2:	dd1d      	ble.n	11be0 <_vfiprintf_r+0x988>
   11ba4:	4bb2      	ldr	r3, [pc, #712]	; (11e70 <_vfiprintf_r+0xc18>)
   11ba6:	f8c9 3000 	str.w	r3, [r9]
   11baa:	1c4a      	adds	r2, r1, #1
   11bac:	3010      	adds	r0, #16
   11bae:	2310      	movs	r3, #16
   11bb0:	2a07      	cmp	r2, #7
   11bb2:	e9cd 2019 	strd	r2, r0, [sp, #100]	; 0x64
   11bb6:	f8c9 3004 	str.w	r3, [r9, #4]
   11bba:	ddeb      	ble.n	11b94 <_vfiprintf_r+0x93c>
   11bbc:	aa18      	add	r2, sp, #96	; 0x60
   11bbe:	b330      	cbz	r0, 11c0e <_vfiprintf_r+0x9b6>
   11bc0:	4621      	mov	r1, r4
   11bc2:	4630      	mov	r0, r6
   11bc4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11bc8:	f7ff fb0a 	bl	111e0 <__sprint_r.part.0>
   11bcc:	2800      	cmp	r0, #0
   11bce:	f47f ad03 	bne.w	115d8 <_vfiprintf_r+0x380>
   11bd2:	e9dd 1019 	ldrd	r1, r0, [sp, #100]	; 0x64
   11bd6:	3d10      	subs	r5, #16
   11bd8:	2d10      	cmp	r5, #16
   11bda:	f101 0c01 	add.w	ip, r1, #1
   11bde:	dce1      	bgt.n	11ba4 <_vfiprintf_r+0x94c>
   11be0:	465a      	mov	r2, fp
   11be2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   11be4:	4603      	mov	r3, r0
   11be6:	46b3      	mov	fp, r6
   11be8:	4660      	mov	r0, ip
   11bea:	463e      	mov	r6, r7
   11bec:	4647      	mov	r7, r8
   11bee:	4690      	mov	r8, r2
   11bf0:	4a9f      	ldr	r2, [pc, #636]	; (11e70 <_vfiprintf_r+0xc18>)
   11bf2:	f8c9 5004 	str.w	r5, [r9, #4]
   11bf6:	442b      	add	r3, r5
   11bf8:	2807      	cmp	r0, #7
   11bfa:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   11bfe:	f8c9 2000 	str.w	r2, [r9]
   11c02:	f300 80b6 	bgt.w	11d72 <_vfiprintf_r+0xb1a>
   11c06:	f109 0908 	add.w	r9, r9, #8
   11c0a:	1c41      	adds	r1, r0, #1
   11c0c:	e51e      	b.n	1164c <_vfiprintf_r+0x3f4>
   11c0e:	4601      	mov	r1, r0
   11c10:	f04f 0c01 	mov.w	ip, #1
   11c14:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11c18:	e7c1      	b.n	11b9e <_vfiprintf_r+0x946>
   11c1a:	0776      	lsls	r6, r6, #29
   11c1c:	9319      	str	r3, [sp, #100]	; 0x64
   11c1e:	d54a      	bpl.n	11cb6 <_vfiprintf_r+0xa5e>
   11c20:	9a06      	ldr	r2, [sp, #24]
   11c22:	9902      	ldr	r1, [sp, #8]
   11c24:	1a54      	subs	r4, r2, r1
   11c26:	2c00      	cmp	r4, #0
   11c28:	dd45      	ble.n	11cb6 <_vfiprintf_r+0xa5e>
   11c2a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11c2e:	2c10      	cmp	r4, #16
   11c30:	f340 829d 	ble.w	1216e <_vfiprintf_r+0xf16>
   11c34:	9919      	ldr	r1, [sp, #100]	; 0x64
   11c36:	9e03      	ldr	r6, [sp, #12]
   11c38:	2510      	movs	r5, #16
   11c3a:	e006      	b.n	11c4a <_vfiprintf_r+0x9f2>
   11c3c:	1c88      	adds	r0, r1, #2
   11c3e:	f109 0908 	add.w	r9, r9, #8
   11c42:	4611      	mov	r1, r2
   11c44:	3c10      	subs	r4, #16
   11c46:	2c10      	cmp	r4, #16
   11c48:	dd1a      	ble.n	11c80 <_vfiprintf_r+0xa28>
   11c4a:	1c4a      	adds	r2, r1, #1
   11c4c:	4888      	ldr	r0, [pc, #544]	; (11e70 <_vfiprintf_r+0xc18>)
   11c4e:	3310      	adds	r3, #16
   11c50:	2a07      	cmp	r2, #7
   11c52:	e9c9 0500 	strd	r0, r5, [r9]
   11c56:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   11c5a:	ddef      	ble.n	11c3c <_vfiprintf_r+0x9e4>
   11c5c:	aa18      	add	r2, sp, #96	; 0x60
   11c5e:	b32b      	cbz	r3, 11cac <_vfiprintf_r+0xa54>
   11c60:	4631      	mov	r1, r6
   11c62:	4658      	mov	r0, fp
   11c64:	f7ff fabc 	bl	111e0 <__sprint_r.part.0>
   11c68:	2800      	cmp	r0, #0
   11c6a:	f47f acb6 	bne.w	115da <_vfiprintf_r+0x382>
   11c6e:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   11c72:	3c10      	subs	r4, #16
   11c74:	2c10      	cmp	r4, #16
   11c76:	f101 0001 	add.w	r0, r1, #1
   11c7a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11c7e:	dce4      	bgt.n	11c4a <_vfiprintf_r+0x9f2>
   11c80:	4a7b      	ldr	r2, [pc, #492]	; (11e70 <_vfiprintf_r+0xc18>)
   11c82:	f8c9 4004 	str.w	r4, [r9, #4]
   11c86:	4423      	add	r3, r4
   11c88:	2807      	cmp	r0, #7
   11c8a:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   11c8e:	f8c9 2000 	str.w	r2, [r9]
   11c92:	f77f ad37 	ble.w	11704 <_vfiprintf_r+0x4ac>
   11c96:	b173      	cbz	r3, 11cb6 <_vfiprintf_r+0xa5e>
   11c98:	9903      	ldr	r1, [sp, #12]
   11c9a:	aa18      	add	r2, sp, #96	; 0x60
   11c9c:	4658      	mov	r0, fp
   11c9e:	f7ff fa9f 	bl	111e0 <__sprint_r.part.0>
   11ca2:	2800      	cmp	r0, #0
   11ca4:	f47f ac99 	bne.w	115da <_vfiprintf_r+0x382>
   11ca8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   11caa:	e52b      	b.n	11704 <_vfiprintf_r+0x4ac>
   11cac:	2001      	movs	r0, #1
   11cae:	4619      	mov	r1, r3
   11cb0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11cb4:	e7c6      	b.n	11c44 <_vfiprintf_r+0x9ec>
   11cb6:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   11cba:	9902      	ldr	r1, [sp, #8]
   11cbc:	428a      	cmp	r2, r1
   11cbe:	bfac      	ite	ge
   11cc0:	189b      	addge	r3, r3, r2
   11cc2:	185b      	addlt	r3, r3, r1
   11cc4:	9305      	str	r3, [sp, #20]
   11cc6:	e528      	b.n	1171a <_vfiprintf_r+0x4c2>
   11cc8:	9b03      	ldr	r3, [sp, #12]
   11cca:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
   11cce:	058f      	lsls	r7, r1, #22
   11cd0:	b28a      	uxth	r2, r1
   11cd2:	f53f aae0 	bmi.w	11296 <_vfiprintf_r+0x3e>
   11cd6:	461d      	mov	r5, r3
   11cd8:	6d98      	ldr	r0, [r3, #88]	; 0x58
   11cda:	f7fb fbcf 	bl	d47c <__retarget_lock_acquire_recursive>
   11cde:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   11ce2:	b28a      	uxth	r2, r1
   11ce4:	f7ff bad7 	b.w	11296 <_vfiprintf_r+0x3e>
   11ce8:	2b00      	cmp	r3, #0
   11cea:	f43f ae59 	beq.w	119a0 <_vfiprintf_r+0x748>
   11cee:	9903      	ldr	r1, [sp, #12]
   11cf0:	aa18      	add	r2, sp, #96	; 0x60
   11cf2:	4658      	mov	r0, fp
   11cf4:	f7ff fa74 	bl	111e0 <__sprint_r.part.0>
   11cf8:	2800      	cmp	r0, #0
   11cfa:	f47f ac6e 	bne.w	115da <_vfiprintf_r+0x382>
   11cfe:	9919      	ldr	r1, [sp, #100]	; 0x64
   11d00:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   11d02:	3101      	adds	r1, #1
   11d04:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11d08:	e4db      	b.n	116c2 <_vfiprintf_r+0x46a>
   11d0a:	9219      	str	r2, [sp, #100]	; 0x64
   11d0c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11d10:	e44f      	b.n	115b2 <_vfiprintf_r+0x35a>
   11d12:	2f00      	cmp	r7, #0
   11d14:	f47f abba 	bne.w	1148c <_vfiprintf_r+0x234>
   11d18:	9e02      	ldr	r6, [sp, #8]
   11d1a:	2700      	movs	r7, #0
   11d1c:	9704      	str	r7, [sp, #16]
   11d1e:	ac44      	add	r4, sp, #272	; 0x110
   11d20:	f7ff bbbc 	b.w	1149c <_vfiprintf_r+0x244>
   11d24:	9b02      	ldr	r3, [sp, #8]
   11d26:	f013 0310 	ands.w	r3, r3, #16
   11d2a:	d154      	bne.n	11dd6 <_vfiprintf_r+0xb7e>
   11d2c:	9a02      	ldr	r2, [sp, #8]
   11d2e:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   11d32:	f000 8167 	beq.w	12004 <_vfiprintf_r+0xdac>
   11d36:	9907      	ldr	r1, [sp, #28]
   11d38:	461a      	mov	r2, r3
   11d3a:	f851 3b04 	ldr.w	r3, [r1], #4
   11d3e:	9107      	str	r1, [sp, #28]
   11d40:	b29b      	uxth	r3, r3
   11d42:	2101      	movs	r1, #1
   11d44:	f7ff bbf2 	b.w	1152c <_vfiprintf_r+0x2d4>
   11d48:	2101      	movs	r1, #1
   11d4a:	4618      	mov	r0, r3
   11d4c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11d50:	e4ae      	b.n	116b0 <_vfiprintf_r+0x458>
   11d52:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11d54:	2a00      	cmp	r2, #0
   11d56:	d15e      	bne.n	11e16 <_vfiprintf_r+0xbbe>
   11d58:	4618      	mov	r0, r3
   11d5a:	2101      	movs	r1, #1
   11d5c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11d60:	e4a6      	b.n	116b0 <_vfiprintf_r+0x458>
   11d62:	425b      	negs	r3, r3
   11d64:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   11d68:	9602      	str	r6, [sp, #8]
   11d6a:	202d      	movs	r0, #45	; 0x2d
   11d6c:	2101      	movs	r1, #1
   11d6e:	f7ff bbde 	b.w	1152e <_vfiprintf_r+0x2d6>
   11d72:	2b00      	cmp	r3, #0
   11d74:	f000 808d 	beq.w	11e92 <_vfiprintf_r+0xc3a>
   11d78:	9903      	ldr	r1, [sp, #12]
   11d7a:	aa18      	add	r2, sp, #96	; 0x60
   11d7c:	4658      	mov	r0, fp
   11d7e:	f7ff fa2f 	bl	111e0 <__sprint_r.part.0>
   11d82:	2800      	cmp	r0, #0
   11d84:	f47f ac29 	bne.w	115da <_vfiprintf_r+0x382>
   11d88:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   11d8c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11d90:	1c41      	adds	r1, r0, #1
   11d92:	e45b      	b.n	1164c <_vfiprintf_r+0x3f4>
   11d94:	f898 1000 	ldrb.w	r1, [r8]
   11d98:	9307      	str	r3, [sp, #28]
   11d9a:	f7ff bac9 	b.w	11330 <_vfiprintf_r+0xd8>
   11d9e:	ac44      	add	r4, sp, #272	; 0x110
   11da0:	f7ff bb7c 	b.w	1149c <_vfiprintf_r+0x244>
   11da4:	f109 0908 	add.w	r9, r9, #8
   11da8:	f10c 0101 	add.w	r1, ip, #1
   11dac:	4660      	mov	r0, ip
   11dae:	e483      	b.n	116b8 <_vfiprintf_r+0x460>
   11db0:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   11db4:	f040 8191 	bne.w	120da <_vfiprintf_r+0xe82>
   11db8:	f851 3b04 	ldr.w	r3, [r1], #4
   11dbc:	9107      	str	r1, [sp, #28]
   11dbe:	f7ff bbb1 	b.w	11524 <_vfiprintf_r+0x2cc>
   11dc2:	05b3      	lsls	r3, r6, #22
   11dc4:	f100 8182 	bmi.w	120cc <_vfiprintf_r+0xe74>
   11dc8:	f852 3b04 	ldr.w	r3, [r2], #4
   11dcc:	9207      	str	r2, [sp, #28]
   11dce:	17da      	asrs	r2, r3, #31
   11dd0:	4611      	mov	r1, r2
   11dd2:	f7ff bb49 	b.w	11468 <_vfiprintf_r+0x210>
   11dd6:	9907      	ldr	r1, [sp, #28]
   11dd8:	f851 3b04 	ldr.w	r3, [r1], #4
   11ddc:	9107      	str	r1, [sp, #28]
   11dde:	2101      	movs	r1, #1
   11de0:	f7ff bba4 	b.w	1152c <_vfiprintf_r+0x2d4>
   11de4:	9b07      	ldr	r3, [sp, #28]
   11de6:	9805      	ldr	r0, [sp, #20]
   11de8:	f853 1b04 	ldr.w	r1, [r3], #4
   11dec:	9307      	str	r3, [sp, #28]
   11dee:	17c2      	asrs	r2, r0, #31
   11df0:	e9c1 0200 	strd	r0, r2, [r1]
   11df4:	f7ff ba74 	b.w	112e0 <_vfiprintf_r+0x88>
   11df8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11dfa:	2b00      	cmp	r3, #0
   11dfc:	f43f ab1d 	beq.w	1143a <_vfiprintf_r+0x1e2>
   11e00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11e02:	781b      	ldrb	r3, [r3, #0]
   11e04:	2b00      	cmp	r3, #0
   11e06:	f43f ab18 	beq.w	1143a <_vfiprintf_r+0x1e2>
   11e0a:	f898 1000 	ldrb.w	r1, [r8]
   11e0e:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   11e12:	f7ff ba8d 	b.w	11330 <_vfiprintf_r+0xd8>
   11e16:	2302      	movs	r3, #2
   11e18:	aa11      	add	r2, sp, #68	; 0x44
   11e1a:	931c      	str	r3, [sp, #112]	; 0x70
   11e1c:	921b      	str	r2, [sp, #108]	; 0x6c
   11e1e:	2001      	movs	r0, #1
   11e20:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11e24:	e69f      	b.n	11b66 <_vfiprintf_r+0x90e>
   11e26:	9602      	str	r6, [sp, #8]
   11e28:	e552      	b.n	118d0 <_vfiprintf_r+0x678>
   11e2a:	4b12      	ldr	r3, [pc, #72]	; (11e74 <_vfiprintf_r+0xc1c>)
   11e2c:	930b      	str	r3, [sp, #44]	; 0x2c
   11e2e:	f016 0220 	ands.w	r2, r6, #32
   11e32:	d05f      	beq.n	11ef4 <_vfiprintf_r+0xc9c>
   11e34:	9b07      	ldr	r3, [sp, #28]
   11e36:	3307      	adds	r3, #7
   11e38:	f023 0307 	bic.w	r3, r3, #7
   11e3c:	4618      	mov	r0, r3
   11e3e:	685a      	ldr	r2, [r3, #4]
   11e40:	f850 3b08 	ldr.w	r3, [r0], #8
   11e44:	9007      	str	r0, [sp, #28]
   11e46:	07f4      	lsls	r4, r6, #31
   11e48:	d509      	bpl.n	11e5e <_vfiprintf_r+0xc06>
   11e4a:	ea53 0002 	orrs.w	r0, r3, r2
   11e4e:	d006      	beq.n	11e5e <_vfiprintf_r+0xc06>
   11e50:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   11e54:	2130      	movs	r1, #48	; 0x30
   11e56:	f046 0602 	orr.w	r6, r6, #2
   11e5a:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   11e5e:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   11e62:	9102      	str	r1, [sp, #8]
   11e64:	2102      	movs	r1, #2
   11e66:	f7ff bb61 	b.w	1152c <_vfiprintf_r+0x2d4>
   11e6a:	4b03      	ldr	r3, [pc, #12]	; (11e78 <_vfiprintf_r+0xc20>)
   11e6c:	930b      	str	r3, [sp, #44]	; 0x2c
   11e6e:	e7de      	b.n	11e2e <_vfiprintf_r+0xbd6>
   11e70:	00014a50 	.word	0x00014a50
   11e74:	00014954 	.word	0x00014954
   11e78:	00014968 	.word	0x00014968
   11e7c:	9b07      	ldr	r3, [sp, #28]
   11e7e:	2101      	movs	r1, #1
   11e80:	f853 2b04 	ldr.w	r2, [r3], #4
   11e84:	9102      	str	r1, [sp, #8]
   11e86:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   11e8a:	9307      	str	r3, [sp, #28]
   11e8c:	9104      	str	r1, [sp, #16]
   11e8e:	ac2b      	add	r4, sp, #172	; 0xac
   11e90:	e4ba      	b.n	11808 <_vfiprintf_r+0x5b0>
   11e92:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   11e96:	2a00      	cmp	r2, #0
   11e98:	f040 8126 	bne.w	120e8 <_vfiprintf_r+0xe90>
   11e9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11e9e:	2a00      	cmp	r2, #0
   11ea0:	f47f ae59 	bne.w	11b56 <_vfiprintf_r+0x8fe>
   11ea4:	4618      	mov	r0, r3
   11ea6:	2101      	movs	r1, #1
   11ea8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11eac:	e404      	b.n	116b8 <_vfiprintf_r+0x460>
   11eae:	2100      	movs	r1, #0
   11eb0:	2208      	movs	r2, #8
   11eb2:	a816      	add	r0, sp, #88	; 0x58
   11eb4:	9413      	str	r4, [sp, #76]	; 0x4c
   11eb6:	f7fb f9c3 	bl	d240 <memset>
   11eba:	1c79      	adds	r1, r7, #1
   11ebc:	f000 80b2 	beq.w	12024 <_vfiprintf_r+0xdcc>
   11ec0:	2500      	movs	r5, #0
   11ec2:	9407      	str	r4, [sp, #28]
   11ec4:	462c      	mov	r4, r5
   11ec6:	e00c      	b.n	11ee2 <_vfiprintf_r+0xc8a>
   11ec8:	a92b      	add	r1, sp, #172	; 0xac
   11eca:	4658      	mov	r0, fp
   11ecc:	f7ff f8c0 	bl	11050 <_wcrtomb_r>
   11ed0:	1c42      	adds	r2, r0, #1
   11ed2:	4420      	add	r0, r4
   11ed4:	f000 8161 	beq.w	1219a <_vfiprintf_r+0xf42>
   11ed8:	42b8      	cmp	r0, r7
   11eda:	dc08      	bgt.n	11eee <_vfiprintf_r+0xc96>
   11edc:	f000 8165 	beq.w	121aa <_vfiprintf_r+0xf52>
   11ee0:	4604      	mov	r4, r0
   11ee2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11ee4:	5952      	ldr	r2, [r2, r5]
   11ee6:	ab16      	add	r3, sp, #88	; 0x58
   11ee8:	3504      	adds	r5, #4
   11eea:	2a00      	cmp	r2, #0
   11eec:	d1ec      	bne.n	11ec8 <_vfiprintf_r+0xc70>
   11eee:	9404      	str	r4, [sp, #16]
   11ef0:	9c07      	ldr	r4, [sp, #28]
   11ef2:	e0a5      	b.n	12040 <_vfiprintf_r+0xde8>
   11ef4:	f016 0310 	ands.w	r3, r6, #16
   11ef8:	9807      	ldr	r0, [sp, #28]
   11efa:	d10c      	bne.n	11f16 <_vfiprintf_r+0xcbe>
   11efc:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   11f00:	d005      	beq.n	11f0e <_vfiprintf_r+0xcb6>
   11f02:	461a      	mov	r2, r3
   11f04:	f850 3b04 	ldr.w	r3, [r0], #4
   11f08:	9007      	str	r0, [sp, #28]
   11f0a:	b29b      	uxth	r3, r3
   11f0c:	e79b      	b.n	11e46 <_vfiprintf_r+0xbee>
   11f0e:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   11f12:	f040 80d5 	bne.w	120c0 <_vfiprintf_r+0xe68>
   11f16:	f850 3b04 	ldr.w	r3, [r0], #4
   11f1a:	9007      	str	r0, [sp, #28]
   11f1c:	e793      	b.n	11e46 <_vfiprintf_r+0xbee>
   11f1e:	9902      	ldr	r1, [sp, #8]
   11f20:	f8cd 8020 	str.w	r8, [sp, #32]
   11f24:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   11f28:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   11f2c:	9704      	str	r7, [sp, #16]
   11f2e:	f04f 0c00 	mov.w	ip, #0
   11f32:	ac44      	add	r4, sp, #272	; 0x110
   11f34:	e005      	b.n	11f42 <_vfiprintf_r+0xcea>
   11f36:	2b0a      	cmp	r3, #10
   11f38:	f172 0200 	sbcs.w	r2, r2, #0
   11f3c:	d336      	bcc.n	11fac <_vfiprintf_r+0xd54>
   11f3e:	463b      	mov	r3, r7
   11f40:	462a      	mov	r2, r5
   11f42:	f8df e290 	ldr.w	lr, [pc, #656]	; 121d4 <_vfiprintf_r+0xf7c>
   11f46:	1899      	adds	r1, r3, r2
   11f48:	f141 0100 	adc.w	r1, r1, #0
   11f4c:	fbae 0501 	umull	r0, r5, lr, r1
   11f50:	f025 0003 	bic.w	r0, r5, #3
   11f54:	eb00 0095 	add.w	r0, r0, r5, lsr #2
   11f58:	1a09      	subs	r1, r1, r0
   11f5a:	1a58      	subs	r0, r3, r1
   11f5c:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   11f60:	f162 0700 	sbc.w	r7, r2, #0
   11f64:	fb05 f500 	mul.w	r5, r5, r0
   11f68:	fb0e 5507 	mla	r5, lr, r7, r5
   11f6c:	fba0 700e 	umull	r7, r0, r0, lr
   11f70:	4405      	add	r5, r0
   11f72:	f007 0e01 	and.w	lr, r7, #1
   11f76:	2005      	movs	r0, #5
   11f78:	fbae 0e00 	umull	r0, lr, lr, r0
   11f7c:	1840      	adds	r0, r0, r1
   11f7e:	087f      	lsrs	r7, r7, #1
   11f80:	3030      	adds	r0, #48	; 0x30
   11f82:	f804 0c01 	strb.w	r0, [r4, #-1]
   11f86:	ea47 77c5 	orr.w	r7, r7, r5, lsl #31
   11f8a:	f10c 0c01 	add.w	ip, ip, #1
   11f8e:	3c01      	subs	r4, #1
   11f90:	086d      	lsrs	r5, r5, #1
   11f92:	2e00      	cmp	r6, #0
   11f94:	d0cf      	beq.n	11f36 <_vfiprintf_r+0xcde>
   11f96:	f898 1000 	ldrb.w	r1, [r8]
   11f9a:	4561      	cmp	r1, ip
   11f9c:	d1cb      	bne.n	11f36 <_vfiprintf_r+0xcde>
   11f9e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   11fa2:	d0c8      	beq.n	11f36 <_vfiprintf_r+0xcde>
   11fa4:	2b0a      	cmp	r3, #10
   11fa6:	f172 0200 	sbcs.w	r2, r2, #0
   11faa:	d26c      	bcs.n	12086 <_vfiprintf_r+0xe2e>
   11fac:	ab44      	add	r3, sp, #272	; 0x110
   11fae:	1b1b      	subs	r3, r3, r4
   11fb0:	9f04      	ldr	r7, [sp, #16]
   11fb2:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   11fb6:	9e02      	ldr	r6, [sp, #8]
   11fb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
   11fbc:	9304      	str	r3, [sp, #16]
   11fbe:	f7ff ba6d 	b.w	1149c <_vfiprintf_r+0x244>
   11fc2:	9602      	str	r6, [sp, #8]
   11fc4:	f7ff ba5d 	b.w	11482 <_vfiprintf_r+0x22a>
   11fc8:	4658      	mov	r0, fp
   11fca:	f7fb f809 	bl	cfe0 <__sinit>
   11fce:	f7ff b95a 	b.w	11286 <_vfiprintf_r+0x2e>
   11fd2:	2901      	cmp	r1, #1
   11fd4:	9602      	str	r6, [sp, #8]
   11fd6:	f47f acb2 	bne.w	1193e <_vfiprintf_r+0x6e6>
   11fda:	f7ff ba57 	b.w	1148c <_vfiprintf_r+0x234>
   11fde:	9b07      	ldr	r3, [sp, #28]
   11fe0:	9905      	ldr	r1, [sp, #20]
   11fe2:	f853 2b04 	ldr.w	r2, [r3], #4
   11fe6:	6011      	str	r1, [r2, #0]
   11fe8:	9307      	str	r3, [sp, #28]
   11fea:	f7ff b979 	b.w	112e0 <_vfiprintf_r+0x88>
   11fee:	2f06      	cmp	r7, #6
   11ff0:	463b      	mov	r3, r7
   11ff2:	9a02      	ldr	r2, [sp, #8]
   11ff4:	4c78      	ldr	r4, [pc, #480]	; (121d8 <_vfiprintf_r+0xf80>)
   11ff6:	9207      	str	r2, [sp, #28]
   11ff8:	bf28      	it	cs
   11ffa:	2306      	movcs	r3, #6
   11ffc:	9304      	str	r3, [sp, #16]
   11ffe:	9302      	str	r3, [sp, #8]
   12000:	f7ff bb0d 	b.w	1161e <_vfiprintf_r+0x3c6>
   12004:	9b02      	ldr	r3, [sp, #8]
   12006:	9907      	ldr	r1, [sp, #28]
   12008:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   1200c:	bf14      	ite	ne
   1200e:	f851 3b04 	ldrne.w	r3, [r1], #4
   12012:	f851 3b04 	ldreq.w	r3, [r1], #4
   12016:	9107      	str	r1, [sp, #28]
   12018:	bf1c      	itt	ne
   1201a:	4602      	movne	r2, r0
   1201c:	b2db      	uxtbne	r3, r3
   1201e:	2101      	movs	r1, #1
   12020:	f7ff ba84 	b.w	1152c <_vfiprintf_r+0x2d4>
   12024:	ab16      	add	r3, sp, #88	; 0x58
   12026:	9300      	str	r3, [sp, #0]
   12028:	2300      	movs	r3, #0
   1202a:	4619      	mov	r1, r3
   1202c:	aa13      	add	r2, sp, #76	; 0x4c
   1202e:	4658      	mov	r0, fp
   12030:	f7ff f834 	bl	1109c <_wcsrtombs_r>
   12034:	4603      	mov	r3, r0
   12036:	3301      	adds	r3, #1
   12038:	9004      	str	r0, [sp, #16]
   1203a:	f000 80ae 	beq.w	1219a <_vfiprintf_r+0xf42>
   1203e:	9413      	str	r4, [sp, #76]	; 0x4c
   12040:	9b04      	ldr	r3, [sp, #16]
   12042:	b37b      	cbz	r3, 120a4 <_vfiprintf_r+0xe4c>
   12044:	2b63      	cmp	r3, #99	; 0x63
   12046:	dc62      	bgt.n	1210e <_vfiprintf_r+0xeb6>
   12048:	2300      	movs	r3, #0
   1204a:	9308      	str	r3, [sp, #32]
   1204c:	ac2b      	add	r4, sp, #172	; 0xac
   1204e:	2208      	movs	r2, #8
   12050:	2100      	movs	r1, #0
   12052:	a816      	add	r0, sp, #88	; 0x58
   12054:	f7fb f8f4 	bl	d240 <memset>
   12058:	9d04      	ldr	r5, [sp, #16]
   1205a:	ab16      	add	r3, sp, #88	; 0x58
   1205c:	9300      	str	r3, [sp, #0]
   1205e:	aa13      	add	r2, sp, #76	; 0x4c
   12060:	462b      	mov	r3, r5
   12062:	4621      	mov	r1, r4
   12064:	4658      	mov	r0, fp
   12066:	f7ff f819 	bl	1109c <_wcsrtombs_r>
   1206a:	4285      	cmp	r5, r0
   1206c:	f040 80ab 	bne.w	121c6 <_vfiprintf_r+0xf6e>
   12070:	9b02      	ldr	r3, [sp, #8]
   12072:	9a04      	ldr	r2, [sp, #16]
   12074:	9307      	str	r3, [sp, #28]
   12076:	2300      	movs	r3, #0
   12078:	54a3      	strb	r3, [r4, r2]
   1207a:	461f      	mov	r7, r3
   1207c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   12080:	9302      	str	r3, [sp, #8]
   12082:	f7ff ba12 	b.w	114aa <_vfiprintf_r+0x252>
   12086:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12088:	990d      	ldr	r1, [sp, #52]	; 0x34
   1208a:	1ae4      	subs	r4, r4, r3
   1208c:	461a      	mov	r2, r3
   1208e:	4620      	mov	r0, r4
   12090:	f7fb f928 	bl	d2e4 <strncpy>
   12094:	f898 3001 	ldrb.w	r3, [r8, #1]
   12098:	b10b      	cbz	r3, 1209e <_vfiprintf_r+0xe46>
   1209a:	f108 0801 	add.w	r8, r8, #1
   1209e:	f04f 0c00 	mov.w	ip, #0
   120a2:	e74c      	b.n	11f3e <_vfiprintf_r+0xce6>
   120a4:	9b02      	ldr	r3, [sp, #8]
   120a6:	9307      	str	r3, [sp, #28]
   120a8:	9b04      	ldr	r3, [sp, #16]
   120aa:	9302      	str	r3, [sp, #8]
   120ac:	461f      	mov	r7, r3
   120ae:	9308      	str	r3, [sp, #32]
   120b0:	f7ff b9fb 	b.w	114aa <_vfiprintf_r+0x252>
   120b4:	2101      	movs	r1, #1
   120b6:	4618      	mov	r0, r3
   120b8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   120bc:	f7ff bafc 	b.w	116b8 <_vfiprintf_r+0x460>
   120c0:	f850 3b04 	ldr.w	r3, [r0], #4
   120c4:	9007      	str	r0, [sp, #28]
   120c6:	4622      	mov	r2, r4
   120c8:	b2db      	uxtb	r3, r3
   120ca:	e6bc      	b.n	11e46 <_vfiprintf_r+0xbee>
   120cc:	f912 3b04 	ldrsb.w	r3, [r2], #4
   120d0:	9207      	str	r2, [sp, #28]
   120d2:	17da      	asrs	r2, r3, #31
   120d4:	4611      	mov	r1, r2
   120d6:	f7ff b9c7 	b.w	11468 <_vfiprintf_r+0x210>
   120da:	f851 3b04 	ldr.w	r3, [r1], #4
   120de:	9107      	str	r1, [sp, #28]
   120e0:	4602      	mov	r2, r0
   120e2:	b2db      	uxtb	r3, r3
   120e4:	f7ff ba1e 	b.w	11524 <_vfiprintf_r+0x2cc>
   120e8:	2301      	movs	r3, #1
   120ea:	931c      	str	r3, [sp, #112]	; 0x70
   120ec:	2101      	movs	r1, #1
   120ee:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   120f2:	931b      	str	r3, [sp, #108]	; 0x6c
   120f4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   120f8:	460b      	mov	r3, r1
   120fa:	f7ff bab7 	b.w	1166c <_vfiprintf_r+0x414>
   120fe:	9b07      	ldr	r3, [sp, #28]
   12100:	9905      	ldr	r1, [sp, #20]
   12102:	f853 2b04 	ldr.w	r2, [r3], #4
   12106:	9307      	str	r3, [sp, #28]
   12108:	8011      	strh	r1, [r2, #0]
   1210a:	f7ff b8e9 	b.w	112e0 <_vfiprintf_r+0x88>
   1210e:	1c59      	adds	r1, r3, #1
   12110:	4658      	mov	r0, fp
   12112:	f7fa fa27 	bl	c564 <_malloc_r>
   12116:	4604      	mov	r4, r0
   12118:	2800      	cmp	r0, #0
   1211a:	d03e      	beq.n	1219a <_vfiprintf_r+0xf42>
   1211c:	9008      	str	r0, [sp, #32]
   1211e:	e796      	b.n	1204e <_vfiprintf_r+0xdf6>
   12120:	6d88      	ldr	r0, [r1, #88]	; 0x58
   12122:	f7fb f9ad 	bl	d480 <__retarget_lock_release_recursive>
   12126:	f7ff b9e3 	b.w	114f0 <_vfiprintf_r+0x298>
   1212a:	9b02      	ldr	r3, [sp, #8]
   1212c:	9704      	str	r7, [sp, #16]
   1212e:	9702      	str	r7, [sp, #8]
   12130:	9307      	str	r3, [sp, #28]
   12132:	9f08      	ldr	r7, [sp, #32]
   12134:	f7ff b9b9 	b.w	114aa <_vfiprintf_r+0x252>
   12138:	9819      	ldr	r0, [sp, #100]	; 0x64
   1213a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1213c:	3001      	adds	r0, #1
   1213e:	e557      	b.n	11bf0 <_vfiprintf_r+0x998>
   12140:	9b02      	ldr	r3, [sp, #8]
   12142:	9307      	str	r3, [sp, #28]
   12144:	4620      	mov	r0, r4
   12146:	f7fb f9bb 	bl	d4c0 <strlen>
   1214a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   1214e:	462f      	mov	r7, r5
   12150:	9004      	str	r0, [sp, #16]
   12152:	9302      	str	r3, [sp, #8]
   12154:	9508      	str	r5, [sp, #32]
   12156:	f7ff b9a8 	b.w	114aa <_vfiprintf_r+0x252>
   1215a:	9903      	ldr	r1, [sp, #12]
   1215c:	aa18      	add	r2, sp, #96	; 0x60
   1215e:	4658      	mov	r0, fp
   12160:	f7ff f83e 	bl	111e0 <__sprint_r.part.0>
   12164:	2800      	cmp	r0, #0
   12166:	f43f aa2e 	beq.w	115c6 <_vfiprintf_r+0x36e>
   1216a:	f7ff ba3c 	b.w	115e6 <_vfiprintf_r+0x38e>
   1216e:	9819      	ldr	r0, [sp, #100]	; 0x64
   12170:	3001      	adds	r0, #1
   12172:	e585      	b.n	11c80 <_vfiprintf_r+0xa28>
   12174:	468c      	mov	ip, r1
   12176:	e462      	b.n	11a3e <_vfiprintf_r+0x7e6>
   12178:	9b03      	ldr	r3, [sp, #12]
   1217a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   1217c:	07d9      	lsls	r1, r3, #31
   1217e:	d407      	bmi.n	12190 <_vfiprintf_r+0xf38>
   12180:	9b03      	ldr	r3, [sp, #12]
   12182:	899b      	ldrh	r3, [r3, #12]
   12184:	059a      	lsls	r2, r3, #22
   12186:	d403      	bmi.n	12190 <_vfiprintf_r+0xf38>
   12188:	9b03      	ldr	r3, [sp, #12]
   1218a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1218c:	f7fb f978 	bl	d480 <__retarget_lock_release_recursive>
   12190:	f04f 33ff 	mov.w	r3, #4294967295
   12194:	9305      	str	r3, [sp, #20]
   12196:	f7ff ba33 	b.w	11600 <_vfiprintf_r+0x3a8>
   1219a:	9a03      	ldr	r2, [sp, #12]
   1219c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   121a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   121a4:	8193      	strh	r3, [r2, #12]
   121a6:	f7ff ba21 	b.w	115ec <_vfiprintf_r+0x394>
   121aa:	9c07      	ldr	r4, [sp, #28]
   121ac:	9704      	str	r7, [sp, #16]
   121ae:	e747      	b.n	12040 <_vfiprintf_r+0xde8>
   121b0:	9b07      	ldr	r3, [sp, #28]
   121b2:	f898 1001 	ldrb.w	r1, [r8, #1]
   121b6:	f853 7b04 	ldr.w	r7, [r3], #4
   121ba:	9307      	str	r3, [sp, #28]
   121bc:	4690      	mov	r8, r2
   121be:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   121c2:	f7ff b8b5 	b.w	11330 <_vfiprintf_r+0xd8>
   121c6:	9a03      	ldr	r2, [sp, #12]
   121c8:	8993      	ldrh	r3, [r2, #12]
   121ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   121ce:	8193      	strh	r3, [r2, #12]
   121d0:	f7ff ba03 	b.w	115da <_vfiprintf_r+0x382>
   121d4:	cccccccd 	.word	0xcccccccd
   121d8:	0001497c 	.word	0x0001497c

000121dc <__sbprintf>:
   121dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   121de:	461f      	mov	r7, r3
   121e0:	898b      	ldrh	r3, [r1, #12]
   121e2:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   121e6:	f023 0302 	bic.w	r3, r3, #2
   121ea:	f8ad 300c 	strh.w	r3, [sp, #12]
   121ee:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   121f0:	9319      	str	r3, [sp, #100]	; 0x64
   121f2:	89cb      	ldrh	r3, [r1, #14]
   121f4:	f8ad 300e 	strh.w	r3, [sp, #14]
   121f8:	69cb      	ldr	r3, [r1, #28]
   121fa:	9307      	str	r3, [sp, #28]
   121fc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   121fe:	9309      	str	r3, [sp, #36]	; 0x24
   12200:	ab1a      	add	r3, sp, #104	; 0x68
   12202:	9300      	str	r3, [sp, #0]
   12204:	9304      	str	r3, [sp, #16]
   12206:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1220a:	4615      	mov	r5, r2
   1220c:	4606      	mov	r6, r0
   1220e:	9302      	str	r3, [sp, #8]
   12210:	9305      	str	r3, [sp, #20]
   12212:	a816      	add	r0, sp, #88	; 0x58
   12214:	2300      	movs	r3, #0
   12216:	460c      	mov	r4, r1
   12218:	9306      	str	r3, [sp, #24]
   1221a:	f7fb f92b 	bl	d474 <__retarget_lock_init_recursive>
   1221e:	462a      	mov	r2, r5
   12220:	463b      	mov	r3, r7
   12222:	4669      	mov	r1, sp
   12224:	4630      	mov	r0, r6
   12226:	f7ff f817 	bl	11258 <_vfiprintf_r>
   1222a:	1e05      	subs	r5, r0, #0
   1222c:	db07      	blt.n	1223e <__sbprintf+0x62>
   1222e:	4669      	mov	r1, sp
   12230:	4630      	mov	r0, r6
   12232:	f7fd fdb1 	bl	fd98 <_fflush_r>
   12236:	2800      	cmp	r0, #0
   12238:	bf18      	it	ne
   1223a:	f04f 35ff 	movne.w	r5, #4294967295
   1223e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   12242:	065b      	lsls	r3, r3, #25
   12244:	d503      	bpl.n	1224e <__sbprintf+0x72>
   12246:	89a3      	ldrh	r3, [r4, #12]
   12248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1224c:	81a3      	strh	r3, [r4, #12]
   1224e:	9816      	ldr	r0, [sp, #88]	; 0x58
   12250:	f7fb f912 	bl	d478 <__retarget_lock_close_recursive>
   12254:	4628      	mov	r0, r5
   12256:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   1225a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001225c <__sfvwrite_r>:
   1225c:	6893      	ldr	r3, [r2, #8]
   1225e:	2b00      	cmp	r3, #0
   12260:	f000 8081 	beq.w	12366 <__sfvwrite_r+0x10a>
   12264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12268:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   1226c:	460c      	mov	r4, r1
   1226e:	0719      	lsls	r1, r3, #28
   12270:	4680      	mov	r8, r0
   12272:	b083      	sub	sp, #12
   12274:	4617      	mov	r7, r2
   12276:	b298      	uxth	r0, r3
   12278:	d523      	bpl.n	122c2 <__sfvwrite_r+0x66>
   1227a:	6923      	ldr	r3, [r4, #16]
   1227c:	b30b      	cbz	r3, 122c2 <__sfvwrite_r+0x66>
   1227e:	f010 0302 	ands.w	r3, r0, #2
   12282:	683d      	ldr	r5, [r7, #0]
   12284:	d02b      	beq.n	122de <__sfvwrite_r+0x82>
   12286:	f04f 0a00 	mov.w	sl, #0
   1228a:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 12540 <__sfvwrite_r+0x2e4>
   1228e:	4656      	mov	r6, sl
   12290:	455e      	cmp	r6, fp
   12292:	4633      	mov	r3, r6
   12294:	4652      	mov	r2, sl
   12296:	bf28      	it	cs
   12298:	465b      	movcs	r3, fp
   1229a:	4640      	mov	r0, r8
   1229c:	2e00      	cmp	r6, #0
   1229e:	d04f      	beq.n	12340 <__sfvwrite_r+0xe4>
   122a0:	69e1      	ldr	r1, [r4, #28]
   122a2:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   122a6:	47e0      	blx	ip
   122a8:	2800      	cmp	r0, #0
   122aa:	dd52      	ble.n	12352 <__sfvwrite_r+0xf6>
   122ac:	68bb      	ldr	r3, [r7, #8]
   122ae:	1a1b      	subs	r3, r3, r0
   122b0:	4482      	add	sl, r0
   122b2:	1a36      	subs	r6, r6, r0
   122b4:	60bb      	str	r3, [r7, #8]
   122b6:	2b00      	cmp	r3, #0
   122b8:	d1ea      	bne.n	12290 <__sfvwrite_r+0x34>
   122ba:	2000      	movs	r0, #0
   122bc:	b003      	add	sp, #12
   122be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122c2:	4621      	mov	r1, r4
   122c4:	4640      	mov	r0, r8
   122c6:	f000 f93d 	bl	12544 <__swsetup_r>
   122ca:	2800      	cmp	r0, #0
   122cc:	f040 8134 	bne.w	12538 <__sfvwrite_r+0x2dc>
   122d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   122d4:	683d      	ldr	r5, [r7, #0]
   122d6:	b298      	uxth	r0, r3
   122d8:	f010 0302 	ands.w	r3, r0, #2
   122dc:	d1d3      	bne.n	12286 <__sfvwrite_r+0x2a>
   122de:	f010 0901 	ands.w	r9, r0, #1
   122e2:	d142      	bne.n	1236a <__sfvwrite_r+0x10e>
   122e4:	464e      	mov	r6, r9
   122e6:	b33e      	cbz	r6, 12338 <__sfvwrite_r+0xdc>
   122e8:	0582      	lsls	r2, r0, #22
   122ea:	f8d4 b008 	ldr.w	fp, [r4, #8]
   122ee:	f140 8081 	bpl.w	123f4 <__sfvwrite_r+0x198>
   122f2:	45b3      	cmp	fp, r6
   122f4:	465a      	mov	r2, fp
   122f6:	f200 80b1 	bhi.w	1245c <__sfvwrite_r+0x200>
   122fa:	f410 6f90 	tst.w	r0, #1152	; 0x480
   122fe:	f040 80be 	bne.w	1247e <__sfvwrite_r+0x222>
   12302:	6820      	ldr	r0, [r4, #0]
   12304:	9201      	str	r2, [sp, #4]
   12306:	4649      	mov	r1, r9
   12308:	f7fa ff1e 	bl	d148 <memmove>
   1230c:	68a3      	ldr	r3, [r4, #8]
   1230e:	9a01      	ldr	r2, [sp, #4]
   12310:	eba3 010b 	sub.w	r1, r3, fp
   12314:	6823      	ldr	r3, [r4, #0]
   12316:	60a1      	str	r1, [r4, #8]
   12318:	4413      	add	r3, r2
   1231a:	46b2      	mov	sl, r6
   1231c:	6023      	str	r3, [r4, #0]
   1231e:	2600      	movs	r6, #0
   12320:	68bb      	ldr	r3, [r7, #8]
   12322:	eba3 030a 	sub.w	r3, r3, sl
   12326:	44d1      	add	r9, sl
   12328:	60bb      	str	r3, [r7, #8]
   1232a:	2b00      	cmp	r3, #0
   1232c:	d0c5      	beq.n	122ba <__sfvwrite_r+0x5e>
   1232e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   12332:	b280      	uxth	r0, r0
   12334:	2e00      	cmp	r6, #0
   12336:	d1d7      	bne.n	122e8 <__sfvwrite_r+0x8c>
   12338:	e9d5 9600 	ldrd	r9, r6, [r5]
   1233c:	3508      	adds	r5, #8
   1233e:	e7d2      	b.n	122e6 <__sfvwrite_r+0x8a>
   12340:	e9d5 a600 	ldrd	sl, r6, [r5]
   12344:	3508      	adds	r5, #8
   12346:	e7a3      	b.n	12290 <__sfvwrite_r+0x34>
   12348:	4621      	mov	r1, r4
   1234a:	4640      	mov	r0, r8
   1234c:	f7fd fd24 	bl	fd98 <_fflush_r>
   12350:	b380      	cbz	r0, 123b4 <__sfvwrite_r+0x158>
   12352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   12356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1235a:	f04f 30ff 	mov.w	r0, #4294967295
   1235e:	81a3      	strh	r3, [r4, #12]
   12360:	b003      	add	sp, #12
   12362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12366:	2000      	movs	r0, #0
   12368:	4770      	bx	lr
   1236a:	461e      	mov	r6, r3
   1236c:	46ba      	mov	sl, r7
   1236e:	4699      	mov	r9, r3
   12370:	4618      	mov	r0, r3
   12372:	461f      	mov	r7, r3
   12374:	b366      	cbz	r6, 123d0 <__sfvwrite_r+0x174>
   12376:	b388      	cbz	r0, 123dc <__sfvwrite_r+0x180>
   12378:	464a      	mov	r2, r9
   1237a:	e9d4 c304 	ldrd	ip, r3, [r4, #16]
   1237e:	6820      	ldr	r0, [r4, #0]
   12380:	68a1      	ldr	r1, [r4, #8]
   12382:	42b2      	cmp	r2, r6
   12384:	bf28      	it	cs
   12386:	4632      	movcs	r2, r6
   12388:	4560      	cmp	r0, ip
   1238a:	d904      	bls.n	12396 <__sfvwrite_r+0x13a>
   1238c:	eb01 0b03 	add.w	fp, r1, r3
   12390:	455a      	cmp	r2, fp
   12392:	f300 80a7 	bgt.w	124e4 <__sfvwrite_r+0x288>
   12396:	4293      	cmp	r3, r2
   12398:	dc64      	bgt.n	12464 <__sfvwrite_r+0x208>
   1239a:	69e1      	ldr	r1, [r4, #28]
   1239c:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   123a0:	463a      	mov	r2, r7
   123a2:	4640      	mov	r0, r8
   123a4:	47e0      	blx	ip
   123a6:	f1b0 0b00 	subs.w	fp, r0, #0
   123aa:	ddd2      	ble.n	12352 <__sfvwrite_r+0xf6>
   123ac:	ebb9 090b 	subs.w	r9, r9, fp
   123b0:	d0ca      	beq.n	12348 <__sfvwrite_r+0xec>
   123b2:	2001      	movs	r0, #1
   123b4:	f8da 3008 	ldr.w	r3, [sl, #8]
   123b8:	eba3 030b 	sub.w	r3, r3, fp
   123bc:	445f      	add	r7, fp
   123be:	eba6 060b 	sub.w	r6, r6, fp
   123c2:	f8ca 3008 	str.w	r3, [sl, #8]
   123c6:	2b00      	cmp	r3, #0
   123c8:	f43f af77 	beq.w	122ba <__sfvwrite_r+0x5e>
   123cc:	2e00      	cmp	r6, #0
   123ce:	d1d2      	bne.n	12376 <__sfvwrite_r+0x11a>
   123d0:	686e      	ldr	r6, [r5, #4]
   123d2:	462b      	mov	r3, r5
   123d4:	3508      	adds	r5, #8
   123d6:	2e00      	cmp	r6, #0
   123d8:	d0fa      	beq.n	123d0 <__sfvwrite_r+0x174>
   123da:	681f      	ldr	r7, [r3, #0]
   123dc:	4632      	mov	r2, r6
   123de:	210a      	movs	r1, #10
   123e0:	4638      	mov	r0, r7
   123e2:	f7fd fd1d 	bl	fe20 <memchr>
   123e6:	2800      	cmp	r0, #0
   123e8:	f000 809d 	beq.w	12526 <__sfvwrite_r+0x2ca>
   123ec:	3001      	adds	r0, #1
   123ee:	eba0 0907 	sub.w	r9, r0, r7
   123f2:	e7c1      	b.n	12378 <__sfvwrite_r+0x11c>
   123f4:	6820      	ldr	r0, [r4, #0]
   123f6:	6923      	ldr	r3, [r4, #16]
   123f8:	4298      	cmp	r0, r3
   123fa:	d817      	bhi.n	1242c <__sfvwrite_r+0x1d0>
   123fc:	6962      	ldr	r2, [r4, #20]
   123fe:	42b2      	cmp	r2, r6
   12400:	d814      	bhi.n	1242c <__sfvwrite_r+0x1d0>
   12402:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   12406:	42b3      	cmp	r3, r6
   12408:	bf28      	it	cs
   1240a:	4633      	movcs	r3, r6
   1240c:	69e1      	ldr	r1, [r4, #28]
   1240e:	fb93 f3f2 	sdiv	r3, r3, r2
   12412:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   12416:	fb02 f303 	mul.w	r3, r2, r3
   1241a:	4640      	mov	r0, r8
   1241c:	464a      	mov	r2, r9
   1241e:	47e0      	blx	ip
   12420:	f1b0 0a00 	subs.w	sl, r0, #0
   12424:	dd95      	ble.n	12352 <__sfvwrite_r+0xf6>
   12426:	eba6 060a 	sub.w	r6, r6, sl
   1242a:	e779      	b.n	12320 <__sfvwrite_r+0xc4>
   1242c:	45b3      	cmp	fp, r6
   1242e:	46da      	mov	sl, fp
   12430:	bf28      	it	cs
   12432:	46b2      	movcs	sl, r6
   12434:	4652      	mov	r2, sl
   12436:	4649      	mov	r1, r9
   12438:	f7fa fe86 	bl	d148 <memmove>
   1243c:	68a3      	ldr	r3, [r4, #8]
   1243e:	6822      	ldr	r2, [r4, #0]
   12440:	eba3 030a 	sub.w	r3, r3, sl
   12444:	4452      	add	r2, sl
   12446:	60a3      	str	r3, [r4, #8]
   12448:	6022      	str	r2, [r4, #0]
   1244a:	2b00      	cmp	r3, #0
   1244c:	d1eb      	bne.n	12426 <__sfvwrite_r+0x1ca>
   1244e:	4621      	mov	r1, r4
   12450:	4640      	mov	r0, r8
   12452:	f7fd fca1 	bl	fd98 <_fflush_r>
   12456:	2800      	cmp	r0, #0
   12458:	d0e5      	beq.n	12426 <__sfvwrite_r+0x1ca>
   1245a:	e77a      	b.n	12352 <__sfvwrite_r+0xf6>
   1245c:	6820      	ldr	r0, [r4, #0]
   1245e:	46b3      	mov	fp, r6
   12460:	4632      	mov	r2, r6
   12462:	e74f      	b.n	12304 <__sfvwrite_r+0xa8>
   12464:	4639      	mov	r1, r7
   12466:	9201      	str	r2, [sp, #4]
   12468:	f7fa fe6e 	bl	d148 <memmove>
   1246c:	9a01      	ldr	r2, [sp, #4]
   1246e:	68a3      	ldr	r3, [r4, #8]
   12470:	1a9b      	subs	r3, r3, r2
   12472:	60a3      	str	r3, [r4, #8]
   12474:	6823      	ldr	r3, [r4, #0]
   12476:	4413      	add	r3, r2
   12478:	6023      	str	r3, [r4, #0]
   1247a:	4693      	mov	fp, r2
   1247c:	e796      	b.n	123ac <__sfvwrite_r+0x150>
   1247e:	6823      	ldr	r3, [r4, #0]
   12480:	6921      	ldr	r1, [r4, #16]
   12482:	eba3 0b01 	sub.w	fp, r3, r1
   12486:	6963      	ldr	r3, [r4, #20]
   12488:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   1248c:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   12490:	f10b 0301 	add.w	r3, fp, #1
   12494:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   12498:	4433      	add	r3, r6
   1249a:	4553      	cmp	r3, sl
   1249c:	4652      	mov	r2, sl
   1249e:	bf84      	itt	hi
   124a0:	469a      	movhi	sl, r3
   124a2:	4652      	movhi	r2, sl
   124a4:	0543      	lsls	r3, r0, #21
   124a6:	d52c      	bpl.n	12502 <__sfvwrite_r+0x2a6>
   124a8:	4611      	mov	r1, r2
   124aa:	4640      	mov	r0, r8
   124ac:	f7fa f85a 	bl	c564 <_malloc_r>
   124b0:	2800      	cmp	r0, #0
   124b2:	d03b      	beq.n	1252c <__sfvwrite_r+0x2d0>
   124b4:	465a      	mov	r2, fp
   124b6:	6921      	ldr	r1, [r4, #16]
   124b8:	9001      	str	r0, [sp, #4]
   124ba:	f7f6 fd71 	bl	8fa0 <memcpy>
   124be:	89a2      	ldrh	r2, [r4, #12]
   124c0:	9b01      	ldr	r3, [sp, #4]
   124c2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   124c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   124ca:	81a2      	strh	r2, [r4, #12]
   124cc:	eb03 000b 	add.w	r0, r3, fp
   124d0:	6123      	str	r3, [r4, #16]
   124d2:	ebaa 030b 	sub.w	r3, sl, fp
   124d6:	f8c4 a014 	str.w	sl, [r4, #20]
   124da:	60a3      	str	r3, [r4, #8]
   124dc:	6020      	str	r0, [r4, #0]
   124de:	46b3      	mov	fp, r6
   124e0:	4632      	mov	r2, r6
   124e2:	e70f      	b.n	12304 <__sfvwrite_r+0xa8>
   124e4:	4639      	mov	r1, r7
   124e6:	465a      	mov	r2, fp
   124e8:	f7fa fe2e 	bl	d148 <memmove>
   124ec:	6823      	ldr	r3, [r4, #0]
   124ee:	445b      	add	r3, fp
   124f0:	6023      	str	r3, [r4, #0]
   124f2:	4621      	mov	r1, r4
   124f4:	4640      	mov	r0, r8
   124f6:	f7fd fc4f 	bl	fd98 <_fflush_r>
   124fa:	2800      	cmp	r0, #0
   124fc:	f43f af56 	beq.w	123ac <__sfvwrite_r+0x150>
   12500:	e727      	b.n	12352 <__sfvwrite_r+0xf6>
   12502:	4640      	mov	r0, r8
   12504:	f7fa faea 	bl	cadc <_realloc_r>
   12508:	4603      	mov	r3, r0
   1250a:	2800      	cmp	r0, #0
   1250c:	d1de      	bne.n	124cc <__sfvwrite_r+0x270>
   1250e:	6921      	ldr	r1, [r4, #16]
   12510:	4640      	mov	r0, r8
   12512:	f7fb f8a3 	bl	d65c <_free_r>
   12516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1251a:	220c      	movs	r2, #12
   1251c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   12520:	f8c8 2000 	str.w	r2, [r8]
   12524:	e717      	b.n	12356 <__sfvwrite_r+0xfa>
   12526:	1c72      	adds	r2, r6, #1
   12528:	4691      	mov	r9, r2
   1252a:	e726      	b.n	1237a <__sfvwrite_r+0x11e>
   1252c:	220c      	movs	r2, #12
   1252e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   12532:	f8c8 2000 	str.w	r2, [r8]
   12536:	e70e      	b.n	12356 <__sfvwrite_r+0xfa>
   12538:	f04f 30ff 	mov.w	r0, #4294967295
   1253c:	e6be      	b.n	122bc <__sfvwrite_r+0x60>
   1253e:	bf00      	nop
   12540:	7ffffc00 	.word	0x7ffffc00

00012544 <__swsetup_r>:
   12544:	b538      	push	{r3, r4, r5, lr}
   12546:	4b31      	ldr	r3, [pc, #196]	; (1260c <__swsetup_r+0xc8>)
   12548:	681b      	ldr	r3, [r3, #0]
   1254a:	4605      	mov	r5, r0
   1254c:	460c      	mov	r4, r1
   1254e:	b113      	cbz	r3, 12556 <__swsetup_r+0x12>
   12550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   12552:	2a00      	cmp	r2, #0
   12554:	d04e      	beq.n	125f4 <__swsetup_r+0xb0>
   12556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1255a:	0718      	lsls	r0, r3, #28
   1255c:	b29a      	uxth	r2, r3
   1255e:	d51c      	bpl.n	1259a <__swsetup_r+0x56>
   12560:	6921      	ldr	r1, [r4, #16]
   12562:	b329      	cbz	r1, 125b0 <__swsetup_r+0x6c>
   12564:	f012 0001 	ands.w	r0, r2, #1
   12568:	d007      	beq.n	1257a <__swsetup_r+0x36>
   1256a:	2000      	movs	r0, #0
   1256c:	60a0      	str	r0, [r4, #8]
   1256e:	6960      	ldr	r0, [r4, #20]
   12570:	4240      	negs	r0, r0
   12572:	61a0      	str	r0, [r4, #24]
   12574:	b139      	cbz	r1, 12586 <__swsetup_r+0x42>
   12576:	2000      	movs	r0, #0
   12578:	bd38      	pop	{r3, r4, r5, pc}
   1257a:	0795      	lsls	r5, r2, #30
   1257c:	bf58      	it	pl
   1257e:	6960      	ldrpl	r0, [r4, #20]
   12580:	60a0      	str	r0, [r4, #8]
   12582:	2900      	cmp	r1, #0
   12584:	d1f7      	bne.n	12576 <__swsetup_r+0x32>
   12586:	0612      	lsls	r2, r2, #24
   12588:	bf58      	it	pl
   1258a:	4608      	movpl	r0, r1
   1258c:	d5f4      	bpl.n	12578 <__swsetup_r+0x34>
   1258e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12592:	81a3      	strh	r3, [r4, #12]
   12594:	f04f 30ff 	mov.w	r0, #4294967295
   12598:	bd38      	pop	{r3, r4, r5, pc}
   1259a:	06d1      	lsls	r1, r2, #27
   1259c:	d52e      	bpl.n	125fc <__swsetup_r+0xb8>
   1259e:	0752      	lsls	r2, r2, #29
   125a0:	d414      	bmi.n	125cc <__swsetup_r+0x88>
   125a2:	6921      	ldr	r1, [r4, #16]
   125a4:	f043 0308 	orr.w	r3, r3, #8
   125a8:	81a3      	strh	r3, [r4, #12]
   125aa:	b29a      	uxth	r2, r3
   125ac:	2900      	cmp	r1, #0
   125ae:	d1d9      	bne.n	12564 <__swsetup_r+0x20>
   125b0:	f402 7020 	and.w	r0, r2, #640	; 0x280
   125b4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   125b8:	d0d4      	beq.n	12564 <__swsetup_r+0x20>
   125ba:	4621      	mov	r1, r4
   125bc:	4628      	mov	r0, r5
   125be:	f000 f93f 	bl	12840 <__smakebuf_r>
   125c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   125c6:	6921      	ldr	r1, [r4, #16]
   125c8:	b29a      	uxth	r2, r3
   125ca:	e7cb      	b.n	12564 <__swsetup_r+0x20>
   125cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   125ce:	b151      	cbz	r1, 125e6 <__swsetup_r+0xa2>
   125d0:	f104 0240 	add.w	r2, r4, #64	; 0x40
   125d4:	4291      	cmp	r1, r2
   125d6:	d004      	beq.n	125e2 <__swsetup_r+0x9e>
   125d8:	4628      	mov	r0, r5
   125da:	f7fb f83f 	bl	d65c <_free_r>
   125de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   125e2:	2200      	movs	r2, #0
   125e4:	6322      	str	r2, [r4, #48]	; 0x30
   125e6:	6921      	ldr	r1, [r4, #16]
   125e8:	2200      	movs	r2, #0
   125ea:	e9c4 1200 	strd	r1, r2, [r4]
   125ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   125f2:	e7d7      	b.n	125a4 <__swsetup_r+0x60>
   125f4:	4618      	mov	r0, r3
   125f6:	f7fa fcf3 	bl	cfe0 <__sinit>
   125fa:	e7ac      	b.n	12556 <__swsetup_r+0x12>
   125fc:	2209      	movs	r2, #9
   125fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12602:	602a      	str	r2, [r5, #0]
   12604:	f04f 30ff 	mov.w	r0, #4294967295
   12608:	81a3      	strh	r3, [r4, #12]
   1260a:	bd38      	pop	{r3, r4, r5, pc}
   1260c:	1fff8f70 	.word	0x1fff8f70

00012610 <__fputwc>:
   12610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12614:	b083      	sub	sp, #12
   12616:	4607      	mov	r7, r0
   12618:	4688      	mov	r8, r1
   1261a:	4614      	mov	r4, r2
   1261c:	f7fa fe94 	bl	d348 <__locale_mb_cur_max>
   12620:	2801      	cmp	r0, #1
   12622:	d103      	bne.n	1262c <__fputwc+0x1c>
   12624:	f108 33ff 	add.w	r3, r8, #4294967295
   12628:	2bfe      	cmp	r3, #254	; 0xfe
   1262a:	d937      	bls.n	1269c <__fputwc+0x8c>
   1262c:	f10d 0904 	add.w	r9, sp, #4
   12630:	4642      	mov	r2, r8
   12632:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   12636:	4649      	mov	r1, r9
   12638:	4638      	mov	r0, r7
   1263a:	f7fe fd09 	bl	11050 <_wcrtomb_r>
   1263e:	1c42      	adds	r2, r0, #1
   12640:	4606      	mov	r6, r0
   12642:	d033      	beq.n	126ac <__fputwc+0x9c>
   12644:	b328      	cbz	r0, 12692 <__fputwc+0x82>
   12646:	f89d c004 	ldrb.w	ip, [sp, #4]
   1264a:	2500      	movs	r5, #0
   1264c:	e009      	b.n	12662 <__fputwc+0x52>
   1264e:	6823      	ldr	r3, [r4, #0]
   12650:	1c5a      	adds	r2, r3, #1
   12652:	6022      	str	r2, [r4, #0]
   12654:	f883 c000 	strb.w	ip, [r3]
   12658:	3501      	adds	r5, #1
   1265a:	42b5      	cmp	r5, r6
   1265c:	d219      	bcs.n	12692 <__fputwc+0x82>
   1265e:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   12662:	68a3      	ldr	r3, [r4, #8]
   12664:	3b01      	subs	r3, #1
   12666:	2b00      	cmp	r3, #0
   12668:	60a3      	str	r3, [r4, #8]
   1266a:	daf0      	bge.n	1264e <__fputwc+0x3e>
   1266c:	f8d4 e018 	ldr.w	lr, [r4, #24]
   12670:	4573      	cmp	r3, lr
   12672:	4661      	mov	r1, ip
   12674:	4622      	mov	r2, r4
   12676:	4638      	mov	r0, r7
   12678:	db02      	blt.n	12680 <__fputwc+0x70>
   1267a:	f1bc 0f0a 	cmp.w	ip, #10
   1267e:	d1e6      	bne.n	1264e <__fputwc+0x3e>
   12680:	f000 f94a 	bl	12918 <__swbuf_r>
   12684:	1c43      	adds	r3, r0, #1
   12686:	d1e7      	bne.n	12658 <__fputwc+0x48>
   12688:	4606      	mov	r6, r0
   1268a:	4630      	mov	r0, r6
   1268c:	b003      	add	sp, #12
   1268e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12692:	4646      	mov	r6, r8
   12694:	4630      	mov	r0, r6
   12696:	b003      	add	sp, #12
   12698:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1269c:	fa5f fc88 	uxtb.w	ip, r8
   126a0:	f88d c004 	strb.w	ip, [sp, #4]
   126a4:	4606      	mov	r6, r0
   126a6:	f10d 0904 	add.w	r9, sp, #4
   126aa:	e7ce      	b.n	1264a <__fputwc+0x3a>
   126ac:	89a3      	ldrh	r3, [r4, #12]
   126ae:	4630      	mov	r0, r6
   126b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   126b4:	81a3      	strh	r3, [r4, #12]
   126b6:	b003      	add	sp, #12
   126b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000126bc <_fputwc_r>:
   126bc:	b530      	push	{r4, r5, lr}
   126be:	6e53      	ldr	r3, [r2, #100]	; 0x64
   126c0:	f013 0f01 	tst.w	r3, #1
   126c4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   126c8:	4614      	mov	r4, r2
   126ca:	b083      	sub	sp, #12
   126cc:	4605      	mov	r5, r0
   126ce:	b29a      	uxth	r2, r3
   126d0:	d101      	bne.n	126d6 <_fputwc_r+0x1a>
   126d2:	0598      	lsls	r0, r3, #22
   126d4:	d51c      	bpl.n	12710 <_fputwc_r+0x54>
   126d6:	0490      	lsls	r0, r2, #18
   126d8:	d406      	bmi.n	126e8 <_fputwc_r+0x2c>
   126da:	6e62      	ldr	r2, [r4, #100]	; 0x64
   126dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   126e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   126e4:	81a3      	strh	r3, [r4, #12]
   126e6:	6662      	str	r2, [r4, #100]	; 0x64
   126e8:	4622      	mov	r2, r4
   126ea:	4628      	mov	r0, r5
   126ec:	f7ff ff90 	bl	12610 <__fputwc>
   126f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   126f2:	07da      	lsls	r2, r3, #31
   126f4:	4605      	mov	r5, r0
   126f6:	d402      	bmi.n	126fe <_fputwc_r+0x42>
   126f8:	89a3      	ldrh	r3, [r4, #12]
   126fa:	059b      	lsls	r3, r3, #22
   126fc:	d502      	bpl.n	12704 <_fputwc_r+0x48>
   126fe:	4628      	mov	r0, r5
   12700:	b003      	add	sp, #12
   12702:	bd30      	pop	{r4, r5, pc}
   12704:	6da0      	ldr	r0, [r4, #88]	; 0x58
   12706:	f7fa febb 	bl	d480 <__retarget_lock_release_recursive>
   1270a:	4628      	mov	r0, r5
   1270c:	b003      	add	sp, #12
   1270e:	bd30      	pop	{r4, r5, pc}
   12710:	6da0      	ldr	r0, [r4, #88]	; 0x58
   12712:	9101      	str	r1, [sp, #4]
   12714:	f7fa feb2 	bl	d47c <__retarget_lock_acquire_recursive>
   12718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1271c:	9901      	ldr	r1, [sp, #4]
   1271e:	b29a      	uxth	r2, r3
   12720:	e7d9      	b.n	126d6 <_fputwc_r+0x1a>
   12722:	bf00      	nop

00012724 <_wcsnrtombs_l>:
   12724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12728:	b089      	sub	sp, #36	; 0x24
   1272a:	e9dd 8a13 	ldrd	r8, sl, [sp, #76]	; 0x4c
   1272e:	9f12      	ldr	r7, [sp, #72]	; 0x48
   12730:	9101      	str	r1, [sp, #4]
   12732:	4681      	mov	r9, r0
   12734:	9203      	str	r2, [sp, #12]
   12736:	461e      	mov	r6, r3
   12738:	f1b8 0f00 	cmp.w	r8, #0
   1273c:	d055      	beq.n	127ea <_wcsnrtombs_l+0xc6>
   1273e:	9b01      	ldr	r3, [sp, #4]
   12740:	2b00      	cmp	r3, #0
   12742:	d057      	beq.n	127f4 <_wcsnrtombs_l+0xd0>
   12744:	9b03      	ldr	r3, [sp, #12]
   12746:	681d      	ldr	r5, [r3, #0]
   12748:	2f00      	cmp	r7, #0
   1274a:	d063      	beq.n	12814 <_wcsnrtombs_l+0xf0>
   1274c:	1e74      	subs	r4, r6, #1
   1274e:	b32e      	cbz	r6, 1279c <_wcsnrtombs_l+0x78>
   12750:	9b01      	ldr	r3, [sp, #4]
   12752:	9302      	str	r3, [sp, #8]
   12754:	3d04      	subs	r5, #4
   12756:	2600      	movs	r6, #0
   12758:	e00a      	b.n	12770 <_wcsnrtombs_l+0x4c>
   1275a:	9b01      	ldr	r3, [sp, #4]
   1275c:	bb13      	cbnz	r3, 127a4 <_wcsnrtombs_l+0x80>
   1275e:	682a      	ldr	r2, [r5, #0]
   12760:	2a00      	cmp	r2, #0
   12762:	d035      	beq.n	127d0 <_wcsnrtombs_l+0xac>
   12764:	45bc      	cmp	ip, r7
   12766:	d257      	bcs.n	12818 <_wcsnrtombs_l+0xf4>
   12768:	3c01      	subs	r4, #1
   1276a:	1c63      	adds	r3, r4, #1
   1276c:	4666      	mov	r6, ip
   1276e:	d015      	beq.n	1279c <_wcsnrtombs_l+0x78>
   12770:	f8d8 3000 	ldr.w	r3, [r8]
   12774:	f855 2f04 	ldr.w	r2, [r5, #4]!
   12778:	9300      	str	r3, [sp, #0]
   1277a:	f8da c0e0 	ldr.w	ip, [sl, #224]	; 0xe0
   1277e:	f8d8 b004 	ldr.w	fp, [r8, #4]
   12782:	4643      	mov	r3, r8
   12784:	a905      	add	r1, sp, #20
   12786:	4648      	mov	r0, r9
   12788:	47e0      	blx	ip
   1278a:	1c42      	adds	r2, r0, #1
   1278c:	d037      	beq.n	127fe <_wcsnrtombs_l+0xda>
   1278e:	eb00 0c06 	add.w	ip, r0, r6
   12792:	45bc      	cmp	ip, r7
   12794:	d9e1      	bls.n	1275a <_wcsnrtombs_l+0x36>
   12796:	9b00      	ldr	r3, [sp, #0]
   12798:	e9c8 3b00 	strd	r3, fp, [r8]
   1279c:	4630      	mov	r0, r6
   1279e:	b009      	add	sp, #36	; 0x24
   127a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127a4:	2800      	cmp	r0, #0
   127a6:	dd0c      	ble.n	127c2 <_wcsnrtombs_l+0x9e>
   127a8:	9b02      	ldr	r3, [sp, #8]
   127aa:	4418      	add	r0, r3
   127ac:	1e5a      	subs	r2, r3, #1
   127ae:	a905      	add	r1, sp, #20
   127b0:	f100 3eff 	add.w	lr, r0, #4294967295
   127b4:	f811 3b01 	ldrb.w	r3, [r1], #1
   127b8:	f802 3f01 	strb.w	r3, [r2, #1]!
   127bc:	4572      	cmp	r2, lr
   127be:	d1f9      	bne.n	127b4 <_wcsnrtombs_l+0x90>
   127c0:	9002      	str	r0, [sp, #8]
   127c2:	9b03      	ldr	r3, [sp, #12]
   127c4:	681a      	ldr	r2, [r3, #0]
   127c6:	3204      	adds	r2, #4
   127c8:	601a      	str	r2, [r3, #0]
   127ca:	682a      	ldr	r2, [r5, #0]
   127cc:	2a00      	cmp	r2, #0
   127ce:	d1c9      	bne.n	12764 <_wcsnrtombs_l+0x40>
   127d0:	9b01      	ldr	r3, [sp, #4]
   127d2:	b10b      	cbz	r3, 127d8 <_wcsnrtombs_l+0xb4>
   127d4:	9b03      	ldr	r3, [sp, #12]
   127d6:	601a      	str	r2, [r3, #0]
   127d8:	f10c 36ff 	add.w	r6, ip, #4294967295
   127dc:	2200      	movs	r2, #0
   127de:	4630      	mov	r0, r6
   127e0:	f8c8 2000 	str.w	r2, [r8]
   127e4:	b009      	add	sp, #36	; 0x24
   127e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127ea:	9b01      	ldr	r3, [sp, #4]
   127ec:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   127f0:	2b00      	cmp	r3, #0
   127f2:	d1a7      	bne.n	12744 <_wcsnrtombs_l+0x20>
   127f4:	9b03      	ldr	r3, [sp, #12]
   127f6:	f04f 37ff 	mov.w	r7, #4294967295
   127fa:	681d      	ldr	r5, [r3, #0]
   127fc:	e7a6      	b.n	1274c <_wcsnrtombs_l+0x28>
   127fe:	4606      	mov	r6, r0
   12800:	218a      	movs	r1, #138	; 0x8a
   12802:	2200      	movs	r2, #0
   12804:	4630      	mov	r0, r6
   12806:	f8c9 1000 	str.w	r1, [r9]
   1280a:	f8c8 2000 	str.w	r2, [r8]
   1280e:	b009      	add	sp, #36	; 0x24
   12810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12814:	463e      	mov	r6, r7
   12816:	e7c1      	b.n	1279c <_wcsnrtombs_l+0x78>
   12818:	4666      	mov	r6, ip
   1281a:	e7bf      	b.n	1279c <_wcsnrtombs_l+0x78>

0001281c <_wcsnrtombs_r>:
   1281c:	b510      	push	{r4, lr}
   1281e:	b084      	sub	sp, #16
   12820:	4c05      	ldr	r4, [pc, #20]	; (12838 <_wcsnrtombs_r+0x1c>)
   12822:	9806      	ldr	r0, [sp, #24]
   12824:	9000      	str	r0, [sp, #0]
   12826:	9807      	ldr	r0, [sp, #28]
   12828:	9001      	str	r0, [sp, #4]
   1282a:	4804      	ldr	r0, [pc, #16]	; (1283c <_wcsnrtombs_r+0x20>)
   1282c:	6800      	ldr	r0, [r0, #0]
   1282e:	9402      	str	r4, [sp, #8]
   12830:	f7ff ff78 	bl	12724 <_wcsnrtombs_l>
   12834:	b004      	add	sp, #16
   12836:	bd10      	pop	{r4, pc}
   12838:	1fff8ce4 	.word	0x1fff8ce4
   1283c:	1fff8f70 	.word	0x1fff8f70

00012840 <__smakebuf_r>:
   12840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12844:	898b      	ldrh	r3, [r1, #12]
   12846:	460c      	mov	r4, r1
   12848:	0799      	lsls	r1, r3, #30
   1284a:	b096      	sub	sp, #88	; 0x58
   1284c:	d508      	bpl.n	12860 <__smakebuf_r+0x20>
   1284e:	f104 0343 	add.w	r3, r4, #67	; 0x43
   12852:	2201      	movs	r2, #1
   12854:	e9c4 3204 	strd	r3, r2, [r4, #16]
   12858:	6023      	str	r3, [r4, #0]
   1285a:	b016      	add	sp, #88	; 0x58
   1285c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12860:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   12864:	2900      	cmp	r1, #0
   12866:	4606      	mov	r6, r0
   12868:	db25      	blt.n	128b6 <__smakebuf_r+0x76>
   1286a:	466a      	mov	r2, sp
   1286c:	f000 f8ac 	bl	129c8 <_fstat_r>
   12870:	2800      	cmp	r0, #0
   12872:	db1f      	blt.n	128b4 <__smakebuf_r+0x74>
   12874:	9d01      	ldr	r5, [sp, #4]
   12876:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   1287a:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   1287e:	fab5 f585 	clz	r5, r5
   12882:	f44f 6880 	mov.w	r8, #1024	; 0x400
   12886:	096d      	lsrs	r5, r5, #5
   12888:	f44f 6700 	mov.w	r7, #2048	; 0x800
   1288c:	4641      	mov	r1, r8
   1288e:	4630      	mov	r0, r6
   12890:	f7f9 fe68 	bl	c564 <_malloc_r>
   12894:	b1e0      	cbz	r0, 128d0 <__smakebuf_r+0x90>
   12896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1289a:	f8c4 8014 	str.w	r8, [r4, #20]
   1289e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   128a2:	6020      	str	r0, [r4, #0]
   128a4:	6120      	str	r0, [r4, #16]
   128a6:	81a3      	strh	r3, [r4, #12]
   128a8:	bb35      	cbnz	r5, 128f8 <__smakebuf_r+0xb8>
   128aa:	433b      	orrs	r3, r7
   128ac:	81a3      	strh	r3, [r4, #12]
   128ae:	b016      	add	sp, #88	; 0x58
   128b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   128b4:	89a3      	ldrh	r3, [r4, #12]
   128b6:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   128ba:	d019      	beq.n	128f0 <__smakebuf_r+0xb0>
   128bc:	f04f 0840 	mov.w	r8, #64	; 0x40
   128c0:	2500      	movs	r5, #0
   128c2:	4641      	mov	r1, r8
   128c4:	4630      	mov	r0, r6
   128c6:	462f      	mov	r7, r5
   128c8:	f7f9 fe4c 	bl	c564 <_malloc_r>
   128cc:	2800      	cmp	r0, #0
   128ce:	d1e2      	bne.n	12896 <__smakebuf_r+0x56>
   128d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   128d4:	059a      	lsls	r2, r3, #22
   128d6:	d4c0      	bmi.n	1285a <__smakebuf_r+0x1a>
   128d8:	f023 0303 	bic.w	r3, r3, #3
   128dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
   128e0:	f043 0302 	orr.w	r3, r3, #2
   128e4:	2101      	movs	r1, #1
   128e6:	e9c4 2104 	strd	r2, r1, [r4, #16]
   128ea:	81a3      	strh	r3, [r4, #12]
   128ec:	6022      	str	r2, [r4, #0]
   128ee:	e7b4      	b.n	1285a <__smakebuf_r+0x1a>
   128f0:	f44f 6880 	mov.w	r8, #1024	; 0x400
   128f4:	462f      	mov	r7, r5
   128f6:	e7c9      	b.n	1288c <__smakebuf_r+0x4c>
   128f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   128fc:	4630      	mov	r0, r6
   128fe:	f000 f879 	bl	129f4 <_isatty_r>
   12902:	b910      	cbnz	r0, 1290a <__smakebuf_r+0xca>
   12904:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   12908:	e7cf      	b.n	128aa <__smakebuf_r+0x6a>
   1290a:	89a3      	ldrh	r3, [r4, #12]
   1290c:	f023 0303 	bic.w	r3, r3, #3
   12910:	f043 0301 	orr.w	r3, r3, #1
   12914:	b21b      	sxth	r3, r3
   12916:	e7c8      	b.n	128aa <__smakebuf_r+0x6a>

00012918 <__swbuf_r>:
   12918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1291a:	460d      	mov	r5, r1
   1291c:	4614      	mov	r4, r2
   1291e:	4606      	mov	r6, r0
   12920:	b110      	cbz	r0, 12928 <__swbuf_r+0x10>
   12922:	6b43      	ldr	r3, [r0, #52]	; 0x34
   12924:	2b00      	cmp	r3, #0
   12926:	d04c      	beq.n	129c2 <__swbuf_r+0xaa>
   12928:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1292c:	69a3      	ldr	r3, [r4, #24]
   1292e:	60a3      	str	r3, [r4, #8]
   12930:	0717      	lsls	r7, r2, #28
   12932:	b290      	uxth	r0, r2
   12934:	d51b      	bpl.n	1296e <__swbuf_r+0x56>
   12936:	6923      	ldr	r3, [r4, #16]
   12938:	b1cb      	cbz	r3, 1296e <__swbuf_r+0x56>
   1293a:	b2ed      	uxtb	r5, r5
   1293c:	0481      	lsls	r1, r0, #18
   1293e:	462f      	mov	r7, r5
   12940:	d522      	bpl.n	12988 <__swbuf_r+0x70>
   12942:	6822      	ldr	r2, [r4, #0]
   12944:	6961      	ldr	r1, [r4, #20]
   12946:	1ad3      	subs	r3, r2, r3
   12948:	4299      	cmp	r1, r3
   1294a:	dd29      	ble.n	129a0 <__swbuf_r+0x88>
   1294c:	3301      	adds	r3, #1
   1294e:	68a1      	ldr	r1, [r4, #8]
   12950:	3901      	subs	r1, #1
   12952:	60a1      	str	r1, [r4, #8]
   12954:	1c51      	adds	r1, r2, #1
   12956:	6021      	str	r1, [r4, #0]
   12958:	7015      	strb	r5, [r2, #0]
   1295a:	6962      	ldr	r2, [r4, #20]
   1295c:	429a      	cmp	r2, r3
   1295e:	d027      	beq.n	129b0 <__swbuf_r+0x98>
   12960:	89a3      	ldrh	r3, [r4, #12]
   12962:	07db      	lsls	r3, r3, #31
   12964:	d501      	bpl.n	1296a <__swbuf_r+0x52>
   12966:	2d0a      	cmp	r5, #10
   12968:	d022      	beq.n	129b0 <__swbuf_r+0x98>
   1296a:	4638      	mov	r0, r7
   1296c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1296e:	4621      	mov	r1, r4
   12970:	4630      	mov	r0, r6
   12972:	f7ff fde7 	bl	12544 <__swsetup_r>
   12976:	bb08      	cbnz	r0, 129bc <__swbuf_r+0xa4>
   12978:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1297c:	6923      	ldr	r3, [r4, #16]
   1297e:	b290      	uxth	r0, r2
   12980:	b2ed      	uxtb	r5, r5
   12982:	0481      	lsls	r1, r0, #18
   12984:	462f      	mov	r7, r5
   12986:	d4dc      	bmi.n	12942 <__swbuf_r+0x2a>
   12988:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1298c:	81a2      	strh	r2, [r4, #12]
   1298e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   12990:	6961      	ldr	r1, [r4, #20]
   12992:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   12996:	6662      	str	r2, [r4, #100]	; 0x64
   12998:	6822      	ldr	r2, [r4, #0]
   1299a:	1ad3      	subs	r3, r2, r3
   1299c:	4299      	cmp	r1, r3
   1299e:	dcd5      	bgt.n	1294c <__swbuf_r+0x34>
   129a0:	4621      	mov	r1, r4
   129a2:	4630      	mov	r0, r6
   129a4:	f7fd f9f8 	bl	fd98 <_fflush_r>
   129a8:	b940      	cbnz	r0, 129bc <__swbuf_r+0xa4>
   129aa:	6822      	ldr	r2, [r4, #0]
   129ac:	2301      	movs	r3, #1
   129ae:	e7ce      	b.n	1294e <__swbuf_r+0x36>
   129b0:	4621      	mov	r1, r4
   129b2:	4630      	mov	r0, r6
   129b4:	f7fd f9f0 	bl	fd98 <_fflush_r>
   129b8:	2800      	cmp	r0, #0
   129ba:	d0d6      	beq.n	1296a <__swbuf_r+0x52>
   129bc:	f04f 37ff 	mov.w	r7, #4294967295
   129c0:	e7d3      	b.n	1296a <__swbuf_r+0x52>
   129c2:	f7fa fb0d 	bl	cfe0 <__sinit>
   129c6:	e7af      	b.n	12928 <__swbuf_r+0x10>

000129c8 <_fstat_r>:
   129c8:	b570      	push	{r4, r5, r6, lr}
   129ca:	460c      	mov	r4, r1
   129cc:	4d08      	ldr	r5, [pc, #32]	; (129f0 <_fstat_r+0x28>)
   129ce:	4603      	mov	r3, r0
   129d0:	2600      	movs	r6, #0
   129d2:	4620      	mov	r0, r4
   129d4:	4611      	mov	r1, r2
   129d6:	461c      	mov	r4, r3
   129d8:	602e      	str	r6, [r5, #0]
   129da:	f7f6 fbff 	bl	91dc <_fstat>
   129de:	1c43      	adds	r3, r0, #1
   129e0:	d000      	beq.n	129e4 <_fstat_r+0x1c>
   129e2:	bd70      	pop	{r4, r5, r6, pc}
   129e4:	682b      	ldr	r3, [r5, #0]
   129e6:	2b00      	cmp	r3, #0
   129e8:	d0fb      	beq.n	129e2 <_fstat_r+0x1a>
   129ea:	6023      	str	r3, [r4, #0]
   129ec:	bd70      	pop	{r4, r5, r6, pc}
   129ee:	bf00      	nop
   129f0:	1fffb888 	.word	0x1fffb888

000129f4 <_isatty_r>:
   129f4:	b538      	push	{r3, r4, r5, lr}
   129f6:	4d07      	ldr	r5, [pc, #28]	; (12a14 <_isatty_r+0x20>)
   129f8:	2200      	movs	r2, #0
   129fa:	4604      	mov	r4, r0
   129fc:	4608      	mov	r0, r1
   129fe:	602a      	str	r2, [r5, #0]
   12a00:	f7f6 fbf2 	bl	91e8 <_isatty>
   12a04:	1c43      	adds	r3, r0, #1
   12a06:	d000      	beq.n	12a0a <_isatty_r+0x16>
   12a08:	bd38      	pop	{r3, r4, r5, pc}
   12a0a:	682b      	ldr	r3, [r5, #0]
   12a0c:	2b00      	cmp	r3, #0
   12a0e:	d0fb      	beq.n	12a08 <_isatty_r+0x14>
   12a10:	6023      	str	r3, [r4, #0]
   12a12:	bd38      	pop	{r3, r4, r5, pc}
   12a14:	1fffb888 	.word	0x1fffb888

00012a18 <__aeabi_dmul>:
   12a18:	b570      	push	{r4, r5, r6, lr}
   12a1a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   12a1e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   12a22:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   12a26:	bf1d      	ittte	ne
   12a28:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   12a2c:	ea94 0f0c 	teqne	r4, ip
   12a30:	ea95 0f0c 	teqne	r5, ip
   12a34:	f000 f8de 	bleq	12bf4 <__aeabi_dmul+0x1dc>
   12a38:	442c      	add	r4, r5
   12a3a:	ea81 0603 	eor.w	r6, r1, r3
   12a3e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   12a42:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   12a46:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   12a4a:	bf18      	it	ne
   12a4c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   12a50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   12a54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   12a58:	d038      	beq.n	12acc <__aeabi_dmul+0xb4>
   12a5a:	fba0 ce02 	umull	ip, lr, r0, r2
   12a5e:	f04f 0500 	mov.w	r5, #0
   12a62:	fbe1 e502 	umlal	lr, r5, r1, r2
   12a66:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   12a6a:	fbe0 e503 	umlal	lr, r5, r0, r3
   12a6e:	f04f 0600 	mov.w	r6, #0
   12a72:	fbe1 5603 	umlal	r5, r6, r1, r3
   12a76:	f09c 0f00 	teq	ip, #0
   12a7a:	bf18      	it	ne
   12a7c:	f04e 0e01 	orrne.w	lr, lr, #1
   12a80:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   12a84:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   12a88:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   12a8c:	d204      	bcs.n	12a98 <__aeabi_dmul+0x80>
   12a8e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   12a92:	416d      	adcs	r5, r5
   12a94:	eb46 0606 	adc.w	r6, r6, r6
   12a98:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   12a9c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   12aa0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   12aa4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   12aa8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   12aac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   12ab0:	bf88      	it	hi
   12ab2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   12ab6:	d81e      	bhi.n	12af6 <__aeabi_dmul+0xde>
   12ab8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   12abc:	bf08      	it	eq
   12abe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   12ac2:	f150 0000 	adcs.w	r0, r0, #0
   12ac6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   12aca:	bd70      	pop	{r4, r5, r6, pc}
   12acc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   12ad0:	ea46 0101 	orr.w	r1, r6, r1
   12ad4:	ea40 0002 	orr.w	r0, r0, r2
   12ad8:	ea81 0103 	eor.w	r1, r1, r3
   12adc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   12ae0:	bfc2      	ittt	gt
   12ae2:	ebd4 050c 	rsbsgt	r5, r4, ip
   12ae6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   12aea:	bd70      	popgt	{r4, r5, r6, pc}
   12aec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   12af0:	f04f 0e00 	mov.w	lr, #0
   12af4:	3c01      	subs	r4, #1
   12af6:	f300 80ab 	bgt.w	12c50 <__aeabi_dmul+0x238>
   12afa:	f114 0f36 	cmn.w	r4, #54	; 0x36
   12afe:	bfde      	ittt	le
   12b00:	2000      	movle	r0, #0
   12b02:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   12b06:	bd70      	pople	{r4, r5, r6, pc}
   12b08:	f1c4 0400 	rsb	r4, r4, #0
   12b0c:	3c20      	subs	r4, #32
   12b0e:	da35      	bge.n	12b7c <__aeabi_dmul+0x164>
   12b10:	340c      	adds	r4, #12
   12b12:	dc1b      	bgt.n	12b4c <__aeabi_dmul+0x134>
   12b14:	f104 0414 	add.w	r4, r4, #20
   12b18:	f1c4 0520 	rsb	r5, r4, #32
   12b1c:	fa00 f305 	lsl.w	r3, r0, r5
   12b20:	fa20 f004 	lsr.w	r0, r0, r4
   12b24:	fa01 f205 	lsl.w	r2, r1, r5
   12b28:	ea40 0002 	orr.w	r0, r0, r2
   12b2c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   12b30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   12b34:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   12b38:	fa21 f604 	lsr.w	r6, r1, r4
   12b3c:	eb42 0106 	adc.w	r1, r2, r6
   12b40:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12b44:	bf08      	it	eq
   12b46:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   12b4a:	bd70      	pop	{r4, r5, r6, pc}
   12b4c:	f1c4 040c 	rsb	r4, r4, #12
   12b50:	f1c4 0520 	rsb	r5, r4, #32
   12b54:	fa00 f304 	lsl.w	r3, r0, r4
   12b58:	fa20 f005 	lsr.w	r0, r0, r5
   12b5c:	fa01 f204 	lsl.w	r2, r1, r4
   12b60:	ea40 0002 	orr.w	r0, r0, r2
   12b64:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12b68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   12b6c:	f141 0100 	adc.w	r1, r1, #0
   12b70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12b74:	bf08      	it	eq
   12b76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   12b7a:	bd70      	pop	{r4, r5, r6, pc}
   12b7c:	f1c4 0520 	rsb	r5, r4, #32
   12b80:	fa00 f205 	lsl.w	r2, r0, r5
   12b84:	ea4e 0e02 	orr.w	lr, lr, r2
   12b88:	fa20 f304 	lsr.w	r3, r0, r4
   12b8c:	fa01 f205 	lsl.w	r2, r1, r5
   12b90:	ea43 0302 	orr.w	r3, r3, r2
   12b94:	fa21 f004 	lsr.w	r0, r1, r4
   12b98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12b9c:	fa21 f204 	lsr.w	r2, r1, r4
   12ba0:	ea20 0002 	bic.w	r0, r0, r2
   12ba4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   12ba8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   12bac:	bf08      	it	eq
   12bae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   12bb2:	bd70      	pop	{r4, r5, r6, pc}
   12bb4:	f094 0f00 	teq	r4, #0
   12bb8:	d10f      	bne.n	12bda <__aeabi_dmul+0x1c2>
   12bba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   12bbe:	0040      	lsls	r0, r0, #1
   12bc0:	eb41 0101 	adc.w	r1, r1, r1
   12bc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12bc8:	bf08      	it	eq
   12bca:	3c01      	subeq	r4, #1
   12bcc:	d0f7      	beq.n	12bbe <__aeabi_dmul+0x1a6>
   12bce:	ea41 0106 	orr.w	r1, r1, r6
   12bd2:	f095 0f00 	teq	r5, #0
   12bd6:	bf18      	it	ne
   12bd8:	4770      	bxne	lr
   12bda:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   12bde:	0052      	lsls	r2, r2, #1
   12be0:	eb43 0303 	adc.w	r3, r3, r3
   12be4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   12be8:	bf08      	it	eq
   12bea:	3d01      	subeq	r5, #1
   12bec:	d0f7      	beq.n	12bde <__aeabi_dmul+0x1c6>
   12bee:	ea43 0306 	orr.w	r3, r3, r6
   12bf2:	4770      	bx	lr
   12bf4:	ea94 0f0c 	teq	r4, ip
   12bf8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   12bfc:	bf18      	it	ne
   12bfe:	ea95 0f0c 	teqne	r5, ip
   12c02:	d00c      	beq.n	12c1e <__aeabi_dmul+0x206>
   12c04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   12c08:	bf18      	it	ne
   12c0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   12c0e:	d1d1      	bne.n	12bb4 <__aeabi_dmul+0x19c>
   12c10:	ea81 0103 	eor.w	r1, r1, r3
   12c14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12c18:	f04f 0000 	mov.w	r0, #0
   12c1c:	bd70      	pop	{r4, r5, r6, pc}
   12c1e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   12c22:	bf06      	itte	eq
   12c24:	4610      	moveq	r0, r2
   12c26:	4619      	moveq	r1, r3
   12c28:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   12c2c:	d019      	beq.n	12c62 <__aeabi_dmul+0x24a>
   12c2e:	ea94 0f0c 	teq	r4, ip
   12c32:	d102      	bne.n	12c3a <__aeabi_dmul+0x222>
   12c34:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   12c38:	d113      	bne.n	12c62 <__aeabi_dmul+0x24a>
   12c3a:	ea95 0f0c 	teq	r5, ip
   12c3e:	d105      	bne.n	12c4c <__aeabi_dmul+0x234>
   12c40:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   12c44:	bf1c      	itt	ne
   12c46:	4610      	movne	r0, r2
   12c48:	4619      	movne	r1, r3
   12c4a:	d10a      	bne.n	12c62 <__aeabi_dmul+0x24a>
   12c4c:	ea81 0103 	eor.w	r1, r1, r3
   12c50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12c54:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   12c58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   12c5c:	f04f 0000 	mov.w	r0, #0
   12c60:	bd70      	pop	{r4, r5, r6, pc}
   12c62:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   12c66:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   12c6a:	bd70      	pop	{r4, r5, r6, pc}

00012c6c <__aeabi_ddiv>:
   12c6c:	b570      	push	{r4, r5, r6, lr}
   12c6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   12c72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   12c76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   12c7a:	bf1d      	ittte	ne
   12c7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   12c80:	ea94 0f0c 	teqne	r4, ip
   12c84:	ea95 0f0c 	teqne	r5, ip
   12c88:	f000 f8a7 	bleq	12dda <__aeabi_ddiv+0x16e>
   12c8c:	eba4 0405 	sub.w	r4, r4, r5
   12c90:	ea81 0e03 	eor.w	lr, r1, r3
   12c94:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   12c98:	ea4f 3101 	mov.w	r1, r1, lsl #12
   12c9c:	f000 8088 	beq.w	12db0 <__aeabi_ddiv+0x144>
   12ca0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   12ca4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   12ca8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   12cac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   12cb0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   12cb4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   12cb8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   12cbc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   12cc0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   12cc4:	429d      	cmp	r5, r3
   12cc6:	bf08      	it	eq
   12cc8:	4296      	cmpeq	r6, r2
   12cca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   12cce:	f504 7440 	add.w	r4, r4, #768	; 0x300
   12cd2:	d202      	bcs.n	12cda <__aeabi_ddiv+0x6e>
   12cd4:	085b      	lsrs	r3, r3, #1
   12cd6:	ea4f 0232 	mov.w	r2, r2, rrx
   12cda:	1ab6      	subs	r6, r6, r2
   12cdc:	eb65 0503 	sbc.w	r5, r5, r3
   12ce0:	085b      	lsrs	r3, r3, #1
   12ce2:	ea4f 0232 	mov.w	r2, r2, rrx
   12ce6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   12cea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   12cee:	ebb6 0e02 	subs.w	lr, r6, r2
   12cf2:	eb75 0e03 	sbcs.w	lr, r5, r3
   12cf6:	bf22      	ittt	cs
   12cf8:	1ab6      	subcs	r6, r6, r2
   12cfa:	4675      	movcs	r5, lr
   12cfc:	ea40 000c 	orrcs.w	r0, r0, ip
   12d00:	085b      	lsrs	r3, r3, #1
   12d02:	ea4f 0232 	mov.w	r2, r2, rrx
   12d06:	ebb6 0e02 	subs.w	lr, r6, r2
   12d0a:	eb75 0e03 	sbcs.w	lr, r5, r3
   12d0e:	bf22      	ittt	cs
   12d10:	1ab6      	subcs	r6, r6, r2
   12d12:	4675      	movcs	r5, lr
   12d14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   12d18:	085b      	lsrs	r3, r3, #1
   12d1a:	ea4f 0232 	mov.w	r2, r2, rrx
   12d1e:	ebb6 0e02 	subs.w	lr, r6, r2
   12d22:	eb75 0e03 	sbcs.w	lr, r5, r3
   12d26:	bf22      	ittt	cs
   12d28:	1ab6      	subcs	r6, r6, r2
   12d2a:	4675      	movcs	r5, lr
   12d2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   12d30:	085b      	lsrs	r3, r3, #1
   12d32:	ea4f 0232 	mov.w	r2, r2, rrx
   12d36:	ebb6 0e02 	subs.w	lr, r6, r2
   12d3a:	eb75 0e03 	sbcs.w	lr, r5, r3
   12d3e:	bf22      	ittt	cs
   12d40:	1ab6      	subcs	r6, r6, r2
   12d42:	4675      	movcs	r5, lr
   12d44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   12d48:	ea55 0e06 	orrs.w	lr, r5, r6
   12d4c:	d018      	beq.n	12d80 <__aeabi_ddiv+0x114>
   12d4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   12d52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   12d56:	ea4f 1606 	mov.w	r6, r6, lsl #4
   12d5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   12d5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   12d62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   12d66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   12d6a:	d1c0      	bne.n	12cee <__aeabi_ddiv+0x82>
   12d6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12d70:	d10b      	bne.n	12d8a <__aeabi_ddiv+0x11e>
   12d72:	ea41 0100 	orr.w	r1, r1, r0
   12d76:	f04f 0000 	mov.w	r0, #0
   12d7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   12d7e:	e7b6      	b.n	12cee <__aeabi_ddiv+0x82>
   12d80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12d84:	bf04      	itt	eq
   12d86:	4301      	orreq	r1, r0
   12d88:	2000      	moveq	r0, #0
   12d8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   12d8e:	bf88      	it	hi
   12d90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   12d94:	f63f aeaf 	bhi.w	12af6 <__aeabi_dmul+0xde>
   12d98:	ebb5 0c03 	subs.w	ip, r5, r3
   12d9c:	bf04      	itt	eq
   12d9e:	ebb6 0c02 	subseq.w	ip, r6, r2
   12da2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   12da6:	f150 0000 	adcs.w	r0, r0, #0
   12daa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   12dae:	bd70      	pop	{r4, r5, r6, pc}
   12db0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   12db4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   12db8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   12dbc:	bfc2      	ittt	gt
   12dbe:	ebd4 050c 	rsbsgt	r5, r4, ip
   12dc2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   12dc6:	bd70      	popgt	{r4, r5, r6, pc}
   12dc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   12dcc:	f04f 0e00 	mov.w	lr, #0
   12dd0:	3c01      	subs	r4, #1
   12dd2:	e690      	b.n	12af6 <__aeabi_dmul+0xde>
   12dd4:	ea45 0e06 	orr.w	lr, r5, r6
   12dd8:	e68d      	b.n	12af6 <__aeabi_dmul+0xde>
   12dda:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   12dde:	ea94 0f0c 	teq	r4, ip
   12de2:	bf08      	it	eq
   12de4:	ea95 0f0c 	teqeq	r5, ip
   12de8:	f43f af3b 	beq.w	12c62 <__aeabi_dmul+0x24a>
   12dec:	ea94 0f0c 	teq	r4, ip
   12df0:	d10a      	bne.n	12e08 <__aeabi_ddiv+0x19c>
   12df2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   12df6:	f47f af34 	bne.w	12c62 <__aeabi_dmul+0x24a>
   12dfa:	ea95 0f0c 	teq	r5, ip
   12dfe:	f47f af25 	bne.w	12c4c <__aeabi_dmul+0x234>
   12e02:	4610      	mov	r0, r2
   12e04:	4619      	mov	r1, r3
   12e06:	e72c      	b.n	12c62 <__aeabi_dmul+0x24a>
   12e08:	ea95 0f0c 	teq	r5, ip
   12e0c:	d106      	bne.n	12e1c <__aeabi_ddiv+0x1b0>
   12e0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   12e12:	f43f aefd 	beq.w	12c10 <__aeabi_dmul+0x1f8>
   12e16:	4610      	mov	r0, r2
   12e18:	4619      	mov	r1, r3
   12e1a:	e722      	b.n	12c62 <__aeabi_dmul+0x24a>
   12e1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   12e20:	bf18      	it	ne
   12e22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   12e26:	f47f aec5 	bne.w	12bb4 <__aeabi_dmul+0x19c>
   12e2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   12e2e:	f47f af0d 	bne.w	12c4c <__aeabi_dmul+0x234>
   12e32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   12e36:	f47f aeeb 	bne.w	12c10 <__aeabi_dmul+0x1f8>
   12e3a:	e712      	b.n	12c62 <__aeabi_dmul+0x24a>

00012e3c <__aeabi_d2iz>:
   12e3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   12e40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   12e44:	d215      	bcs.n	12e72 <__aeabi_d2iz+0x36>
   12e46:	d511      	bpl.n	12e6c <__aeabi_d2iz+0x30>
   12e48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   12e4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   12e50:	d912      	bls.n	12e78 <__aeabi_d2iz+0x3c>
   12e52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   12e56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   12e5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   12e5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   12e62:	fa23 f002 	lsr.w	r0, r3, r2
   12e66:	bf18      	it	ne
   12e68:	4240      	negne	r0, r0
   12e6a:	4770      	bx	lr
   12e6c:	f04f 0000 	mov.w	r0, #0
   12e70:	4770      	bx	lr
   12e72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   12e76:	d105      	bne.n	12e84 <__aeabi_d2iz+0x48>
   12e78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   12e7c:	bf08      	it	eq
   12e7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   12e82:	4770      	bx	lr
   12e84:	f04f 0000 	mov.w	r0, #0
   12e88:	4770      	bx	lr
   12e8a:	bf00      	nop
   12e8c:	44202020 	.word	0x44202020
   12e90:	47554245 	.word	0x47554245
   12e94:	6c614220 	.word	0x6c614220
   12e98:	65636e61 	.word	0x65636e61
   12e9c:	49202d20 	.word	0x49202d20
   12ea0:	20203a44 	.word	0x20203a44
   12ea4:	00002020 	.word	0x00002020
   12ea8:	20202020 	.word	0x20202020
   12eac:	00000000 	.word	0x00000000
   12eb0:	20202020 	.word	0x20202020
   12eb4:	3a736f70 	.word	0x3a736f70
   12eb8:	00000020 	.word	0x00000020
   12ebc:	202d2020 	.word	0x202d2020
   12ec0:	ffff0020 	.word	0xffff0020
   12ec4:	75646f4d 	.word	0x75646f4d
   12ec8:	3a73656c 	.word	0x3a73656c
   12ecc:	20692520 	.word	0x20692520
   12ed0:	6c654320 	.word	0x6c654320
   12ed4:	203a736c 	.word	0x203a736c
   12ed8:	20206925 	.word	0x20206925
   12edc:	746c6f56 	.word	0x746c6f56
   12ee0:	3a656761 	.word	0x3a656761
   12ee4:	56662520 	.word	0x56662520
   12ee8:	41202020 	.word	0x41202020
   12eec:	43206776 	.word	0x43206776
   12ef0:	206c6c65 	.word	0x206c6c65
   12ef4:	746c6f56 	.word	0x746c6f56
   12ef8:	3a656761 	.word	0x3a656761
   12efc:	56662520 	.word	0x56662520
   12f00:	20202020 	.word	0x20202020
   12f04:	67764120 	.word	0x67764120
   12f08:	6d655420 	.word	0x6d655420
   12f0c:	25203a70 	.word	0x25203a70
   12f10:	00204366 	.word	0x00204366
   12f14:	20202020 	.word	0x20202020
   12f18:	20202020 	.word	0x20202020
   12f1c:	20202020 	.word	0x20202020
   12f20:	20202020 	.word	0x20202020
   12f24:	20202020 	.word	0x20202020
   12f28:	20202020 	.word	0x20202020
   12f2c:	20202020 	.word	0x20202020
   12f30:	4d202020 	.word	0x4d202020
   12f34:	6c75646f 	.word	0x6c75646f
   12f38:	25232065 	.word	0x25232065
   12f3c:	00000069 	.word	0x00000069
   12f40:	6f562020 	.word	0x6f562020
   12f44:	6761746c 	.word	0x6761746c
   12f48:	25203a65 	.word	0x25203a65
   12f4c:	20205666 	.word	0x20205666
   12f50:	66252820 	.word	0x66252820
   12f54:	66252d56 	.word	0x66252d56
   12f58:	20202956 	.word	0x20202956
   12f5c:	54202020 	.word	0x54202020
   12f60:	65706d65 	.word	0x65706d65
   12f64:	75746172 	.word	0x75746172
   12f68:	3a736572 	.word	0x3a736572
   12f6c:	66252820 	.word	0x66252820
   12f70:	66252d43 	.word	0x66252d43
   12f74:	00002943 	.word	0x00002943
   12f78:	4f4d2020 	.word	0x4f4d2020
   12f7c:	454c5544 	.word	0x454c5544
   12f80:	20534920 	.word	0x20534920
   12f84:	4c554146 	.word	0x4c554146
   12f88:	3a444554 	.word	0x3a444554
   12f8c:	00000000 	.word	0x00000000
   12f90:	20202020 	.word	0x20202020
   12f94:	7265764f 	.word	0x7265764f
   12f98:	746c6f76 	.word	0x746c6f76
   12f9c:	20656761 	.word	0x20656761
   12fa0:	6c6c6543 	.word	0x6c6c6543
   12fa4:	6d754e20 	.word	0x6d754e20
   12fa8:	73726562 	.word	0x73726562
   12fac:	2d312820 	.word	0x2d312820
   12fb0:	203a2936 	.word	0x203a2936
   12fb4:	00000000 	.word	0x00000000
   12fb8:	20202020 	.word	0x20202020
   12fbc:	65646e55 	.word	0x65646e55
   12fc0:	6c6f7672 	.word	0x6c6f7672
   12fc4:	65676174 	.word	0x65676174
   12fc8:	6c654320 	.word	0x6c654320
   12fcc:	754e206c 	.word	0x754e206c
   12fd0:	7265626d 	.word	0x7265626d
   12fd4:	31282073 	.word	0x31282073
   12fd8:	3a29362d 	.word	0x3a29362d
   12fdc:	00000020 	.word	0x00000020
   12fe0:	20202020 	.word	0x20202020
   12fe4:	20435243 	.word	0x20435243
   12fe8:	6f727265 	.word	0x6f727265
   12fec:	6e692072 	.word	0x6e692072
   12ff0:	63657220 	.word	0x63657220
   12ff4:	65766965 	.word	0x65766965
   12ff8:	61702064 	.word	0x61702064
   12ffc:	74656b63 	.word	0x74656b63
   13000:	00000000 	.word	0x00000000
   13004:	20202020 	.word	0x20202020
   13008:	65776f50 	.word	0x65776f50
   1300c:	6e6f2072 	.word	0x6e6f2072
   13010:	73657220 	.word	0x73657220
   13014:	68207465 	.word	0x68207465
   13018:	6f207361 	.word	0x6f207361
   1301c:	72756363 	.word	0x72756363
   13020:	00646572 	.word	0x00646572
   13024:	20202020 	.word	0x20202020
   13028:	74736554 	.word	0x74736554
   1302c:	75616620 	.word	0x75616620
   13030:	6120746c 	.word	0x6120746c
   13034:	76697463 	.word	0x76697463
   13038:	00000065 	.word	0x00000065
   1303c:	20202020 	.word	0x20202020
   13040:	65746e49 	.word	0x65746e49
   13044:	6c616e72 	.word	0x6c616e72
   13048:	67657220 	.word	0x67657220
   1304c:	65747369 	.word	0x65747369
   13050:	69207372 	.word	0x69207372
   13054:	6e6f636e 	.word	0x6e6f636e
   13058:	74736973 	.word	0x74736973
   1305c:	00746e65 	.word	0x00746e65
   13060:	4f4d2020 	.word	0x4f4d2020
   13064:	454c5544 	.word	0x454c5544
   13068:	53414820 	.word	0x53414820
   1306c:	454c4120 	.word	0x454c4120
   13070:	3a535452 	.word	0x3a535452
   13074:	00000000 	.word	0x00000000
   13078:	20202020 	.word	0x20202020
   1307c:	7265764f 	.word	0x7265764f
   13080:	6d657420 	.word	0x6d657420
   13084:	61726570 	.word	0x61726570
   13088:	65727574 	.word	0x65727574
   1308c:	206e6f20 	.word	0x206e6f20
   13090:	00315354 	.word	0x00315354
   13094:	20202020 	.word	0x20202020
   13098:	7265764f 	.word	0x7265764f
   1309c:	6d657420 	.word	0x6d657420
   130a0:	61726570 	.word	0x61726570
   130a4:	65727574 	.word	0x65727574
   130a8:	206e6f20 	.word	0x206e6f20
   130ac:	00325354 	.word	0x00325354
   130b0:	20202020 	.word	0x20202020
   130b4:	65656c53 	.word	0x65656c53
   130b8:	6f6d2070 	.word	0x6f6d2070
   130bc:	61206564 	.word	0x61206564
   130c0:	76697463 	.word	0x76697463
   130c4:	00000065 	.word	0x00000065
   130c8:	20202020 	.word	0x20202020
   130cc:	72656854 	.word	0x72656854
   130d0:	206c616d 	.word	0x206c616d
   130d4:	74756873 	.word	0x74756873
   130d8:	6e776f64 	.word	0x6e776f64
   130dc:	74636120 	.word	0x74636120
   130e0:	00657669 	.word	0x00657669
   130e4:	20202020 	.word	0x20202020
   130e8:	74736554 	.word	0x74736554
   130ec:	656c4120 	.word	0x656c4120
   130f0:	00007472 	.word	0x00007472
   130f4:	20202020 	.word	0x20202020
   130f8:	2050544f 	.word	0x2050544f
   130fc:	4f525045 	.word	0x4f525045
   13100:	6e55204d 	.word	0x6e55204d
   13104:	72726f63 	.word	0x72726f63
   13108:	61746365 	.word	0x61746365
   1310c:	20656c62 	.word	0x20656c62
   13110:	6f727245 	.word	0x6f727245
   13114:	00000072 	.word	0x00000072
   13118:	20202020 	.word	0x20202020
   1311c:	554f5247 	.word	0x554f5247
   13120:	52203350 	.word	0x52203350
   13124:	20736765 	.word	0x20736765
   13128:	61766e49 	.word	0x61766e49
   1312c:	0064696c 	.word	0x0064696c
   13130:	20202020 	.word	0x20202020
   13134:	72646441 	.word	0x72646441
   13138:	20737365 	.word	0x20737365
   1313c:	20746f6e 	.word	0x20746f6e
   13140:	69676572 	.word	0x69676572
   13144:	72657473 	.word	0x72657473
   13148:	ff006465 	.word	0xff006465
   1314c:	75646f4d 	.word	0x75646f4d
   13150:	3a73656c 	.word	0x3a73656c
   13154:	20692520 	.word	0x20692520
   13158:	6c6c6543 	.word	0x6c6c6543
   1315c:	25203a73 	.word	0x25203a73
   13160:	74532069 	.word	0x74532069
   13164:	676e6972 	.word	0x676e6972
   13168:	25203a73 	.word	0x25203a73
   1316c:	56202069 	.word	0x56202069
   13170:	61746c6f 	.word	0x61746c6f
   13174:	203a6567 	.word	0x203a6567
   13178:	20566625 	.word	0x20566625
   1317c:	76412020 	.word	0x76412020
   13180:	65432067 	.word	0x65432067
   13184:	56206c6c 	.word	0x56206c6c
   13188:	61746c6f 	.word	0x61746c6f
   1318c:	203a6567 	.word	0x203a6567
   13190:	20566625 	.word	0x20566625
   13194:	776f4c20 	.word	0x776f4c20
   13198:	6c654320 	.word	0x6c654320
   1319c:	6f56206c 	.word	0x6f56206c
   131a0:	6761746c 	.word	0x6761746c
   131a4:	25203a65 	.word	0x25203a65
   131a8:	20205666 	.word	0x20205666
   131ac:	67694820 	.word	0x67694820
   131b0:	65432068 	.word	0x65432068
   131b4:	56206c6c 	.word	0x56206c6c
   131b8:	61746c6f 	.word	0x61746c6f
   131bc:	203a6567 	.word	0x203a6567
   131c0:	20566625 	.word	0x20566625
   131c4:	746c6544 	.word	0x746c6544
   131c8:	6f562061 	.word	0x6f562061
   131cc:	6761746c 	.word	0x6761746c
   131d0:	25203a65 	.word	0x25203a65
   131d4:	20566d7a 	.word	0x20566d7a
   131d8:	76412020 	.word	0x76412020
   131dc:	65542067 	.word	0x65542067
   131e0:	203a706d 	.word	0x203a706d
   131e4:	20436625 	.word	0x20436625
   131e8:	00000000 	.word	0x00000000
   131ec:	75646f4d 	.word	0x75646f4d
   131f0:	2320656c 	.word	0x2320656c
   131f4:	00000000 	.word	0x00000000
   131f8:	00000056 	.word	0x00000056
   131fc:	65432020 	.word	0x65432020
   13200:	002d6c6c 	.word	0x002d6c6c
   13204:	20202020 	.word	0x20202020
   13208:	20202020 	.word	0x20202020
   1320c:	20202020 	.word	0x20202020
   13210:	00202020 	.word	0x00202020
   13214:	6d655420 	.word	0x6d655420
   13218:	3a312070 	.word	0x3a312070
   1321c:	ffff0020 	.word	0xffff0020
   13220:	ffff002c 	.word	0xffff002c
   13224:	00007830 	.word	0x00007830
   13228:	00006230 	.word	0x00006230
   1322c:	00000054 	.word	0x00000054
   13230:	00000046 	.word	0x00000046
   13234:	45555254 	.word	0x45555254
   13238:	00000000 	.word	0x00000000
   1323c:	534c4146 	.word	0x534c4146
   13240:	ffff0045 	.word	0xffff0045
   13244:	65736552 	.word	0x65736552
   13248:	6e697474 	.word	0x6e697474
   1324c:	6f742067 	.word	0x6f742067
   13250:	63616620 	.word	0x63616620
   13254:	79726f74 	.word	0x79726f74
   13258:	66656420 	.word	0x66656420
   1325c:	746c7561 	.word	0x746c7561
   13260:	ffff0073 	.word	0xffff0073
   13264:	20434f53 	.word	0x20434f53
   13268:	0000203a 	.word	0x0000203a
   1326c:	75662020 	.word	0x75662020
   13270:	70206c65 	.word	0x70206c65
   13274:	3a206d77 	.word	0x3a206d77
   13278:	ffff0020 	.word	0xffff0020
   1327c:	20534d42 	.word	0x20534d42
   13280:	74617453 	.word	0x74617453
   13284:	3a207375 	.word	0x3a207375
   13288:	00000020 	.word	0x00000020
   1328c:	20535345 	.word	0x20535345
   13290:	65646f4d 	.word	0x65646f4d
   13294:	00000020 	.word	0x00000020
   13298:	6e55203a 	.word	0x6e55203a
   1329c:	56726564 	.word	0x56726564
   132a0:	61746c6f 	.word	0x61746c6f
   132a4:	00206567 	.word	0x00206567
   132a8:	764f203a 	.word	0x764f203a
   132ac:	6f567265 	.word	0x6f567265
   132b0:	6761746c 	.word	0x6761746c
   132b4:	00002065 	.word	0x00002065
   132b8:	6543203a 	.word	0x6543203a
   132bc:	49206c6c 	.word	0x49206c6c
   132c0:	6c61626d 	.word	0x6c61626d
   132c4:	65636e61 	.word	0x65636e61
   132c8:	00000020 	.word	0x00000020
   132cc:	764f203a 	.word	0x764f203a
   132d0:	54207265 	.word	0x54207265
   132d4:	20706d65 	.word	0x20706d65
   132d8:	00000000 	.word	0x00000000
   132dc:	6e55203a 	.word	0x6e55203a
   132e0:	20726564 	.word	0x20726564
   132e4:	706d6554 	.word	0x706d6554
   132e8:	00000020 	.word	0x00000020
   132ec:	764f203a 	.word	0x764f203a
   132f0:	6f567265 	.word	0x6f567265
   132f4:	6761746c 	.word	0x6761746c
   132f8:	74532065 	.word	0x74532065
   132fc:	6761726f 	.word	0x6761726f
   13300:	00002065 	.word	0x00002065
   13304:	4e55203a 	.word	0x4e55203a
   13308:	70706168 	.word	0x70706168
   1330c:	00003a79 	.word	0x00003a79
   13310:	6148203a 	.word	0x6148203a
   13314:	20797070 	.word	0x20797070
   13318:	00000000 	.word	0x00000000
   1331c:	6f6f4220 	.word	0x6f6f4220
   13320:	00002074 	.word	0x00002074
   13324:	61655220 	.word	0x61655220
   13328:	00207964 	.word	0x00207964
   1332c:	65725020 	.word	0x65725020
   13330:	72616863 	.word	0x72616863
   13334:	00206567 	.word	0x00206567
   13338:	69724420 	.word	0x69724420
   1333c:	00206576 	.word	0x00206576
   13340:	61684320 	.word	0x61684320
   13344:	20656772 	.word	0x20656772
   13348:	00000000 	.word	0x00000000
   1334c:	72724520 	.word	0x72724520
   13350:	0020726f 	.word	0x0020726f
   13354:	4341207c 	.word	0x4341207c
   13358:	65725020 	.word	0x65725020
   1335c:	746e6573 	.word	0x746e6573
   13360:	00007c20 	.word	0x00007c20
   13364:	654b207c 	.word	0x654b207c
   13368:	4e4f2079 	.word	0x4e4f2079
   1336c:	00007c20 	.word	0x00007c20
   13370:	6c61427c 	.word	0x6c61427c
   13374:	69636e61 	.word	0x69636e61
   13378:	4120676e 	.word	0x4120676e
   1337c:	76697463 	.word	0x76697463
   13380:	00000065 	.word	0x00000065
   13384:	3a74754f 	.word	0x3a74754f
   13388:	00000000 	.word	0x00000000
   1338c:	6e6f4320 	.word	0x6e6f4320
   13390:	00003a74 	.word	0x00003a74
   13394:	00000031 	.word	0x00000031
   13398:	00000030 	.word	0x00000030
   1339c:	3a6e4920 	.word	0x3a6e4920
   133a0:	ffffff00 	.word	0xffffff00
   133a4:	20776f4c 	.word	0x20776f4c
   133a8:	676e6152 	.word	0x676e6152
   133ac:	00203a65 	.word	0x00203a65
   133b0:	676e6953 	.word	0x676e6953
   133b4:	4920656c 	.word	0x4920656c
   133b8:	00203a6e 	.word	0x00203a6e
   133bc:	756c6156 	.word	0x756c6156
   133c0:	44412065 	.word	0x44412065
   133c4:	203a3043 	.word	0x203a3043
   133c8:	00000000 	.word	0x00000000
   133cc:	00416d20 	.word	0x00416d20
   133d0:	68676948 	.word	0x68676948
   133d4:	6e615220 	.word	0x6e615220
   133d8:	203a6567 	.word	0x203a6567
   133dc:	00000000 	.word	0x00000000
   133e0:	0000416d 	.word	0x0000416d
   133e4:	00207c20 	.word	0x00207c20
   133e8:	2020416d 	.word	0x2020416d
   133ec:	ffffff00 	.word	0xffffff00
   133f0:	2f2f2f2f 	.word	0x2f2f2f2f
   133f4:	2f2f2f2f 	.word	0x2f2f2f2f
   133f8:	2f2f2f2f 	.word	0x2f2f2f2f
   133fc:	2f2f2f2f 	.word	0x2f2f2f2f
   13400:	2f2f2f2f 	.word	0x2f2f2f2f
   13404:	2f2f2f2f 	.word	0x2f2f2f2f
   13408:	2f2f2f2f 	.word	0x2f2f2f2f
   1340c:	2f2f2f2f 	.word	0x2f2f2f2f
   13410:	2f2f2f2f 	.word	0x2f2f2f2f
   13414:	2f2f2f2f 	.word	0x2f2f2f2f
   13418:	434f5320 	.word	0x434f5320
   1341c:	54455320 	.word	0x54455320
   13420:	2f2f2f20 	.word	0x2f2f2f20
   13424:	2f2f2f2f 	.word	0x2f2f2f2f
   13428:	2f2f2f2f 	.word	0x2f2f2f2f
   1342c:	2f2f2f2f 	.word	0x2f2f2f2f
   13430:	2f2f2f2f 	.word	0x2f2f2f2f
   13434:	2f2f2f2f 	.word	0x2f2f2f2f
   13438:	2f2f2f2f 	.word	0x2f2f2f2f
   1343c:	2f2f2f2f 	.word	0x2f2f2f2f
   13440:	2f2f2f2f 	.word	0x2f2f2f2f
   13444:	2f2f2f2f 	.word	0x2f2f2f2f
   13448:	0000002f 	.word	0x0000002f
   1344c:	20776f4c 	.word	0x20776f4c
   13450:	676e6152 	.word	0x676e6152
   13454:	00002065 	.word	0x00002065
   13458:	68676948 	.word	0x68676948
   1345c:	6e615220 	.word	0x6e615220
   13460:	00006567 	.word	0x00006567
   13464:	6c616e41 	.word	0x6c616e41
   13468:	6575676f 	.word	0x6575676f
   1346c:	6e695320 	.word	0x6e695320
   13470:	20656c67 	.word	0x20656c67
   13474:	00000000 	.word	0x00000000
   13478:	624e4143 	.word	0x624e4143
   1347c:	00207375 	.word	0x00207375
   13480:	4f532025 	.word	0x4f532025
   13484:	00002043 	.word	0x00002043
   13488:	0068416d 	.word	0x0068416d
   1348c:	6c6c7570 	.word	0x6c6c7570
   13490:	206e6920 	.word	0x206e6920
   13494:	3654554f 	.word	0x3654554f
   13498:	00000000 	.word	0x00000000
   1349c:	6c6c7570 	.word	0x6c6c7570
   134a0:	206e6920 	.word	0x206e6920
   134a4:	3754554f 	.word	0x3754554f
   134a8:	ffffff00 	.word	0xffffff00
   134ac:	6c614320 	.word	0x6c614320
   134b0:	61726269 	.word	0x61726269
   134b4:	676e6974 	.word	0x676e6974
   134b8:	72754320 	.word	0x72754320
   134bc:	746e6572 	.word	0x746e6572
   134c0:	66664f20 	.word	0x66664f20
   134c4:	20746573 	.word	0x20746573
   134c8:	3a3a3a3a 	.word	0x3a3a3a3a
   134cc:	0000203a 	.word	0x0000203a
   134d0:	0000002e 	.word	0x0000002e
   134d4:	72756320 	.word	0x72756320
   134d8:	746e6572 	.word	0x746e6572
   134dc:	66666f20 	.word	0x66666f20
   134e0:	20746573 	.word	0x20746573
   134e4:	61632031 	.word	0x61632031
   134e8:	7262696c 	.word	0x7262696c
   134ec:	64657461 	.word	0x64657461
   134f0:	00000020 	.word	0x00000020
   134f4:	72756320 	.word	0x72756320
   134f8:	746e6572 	.word	0x746e6572
   134fc:	66666f20 	.word	0x66666f20
   13500:	20746573 	.word	0x20746573
   13504:	61632032 	.word	0x61632032
   13508:	7262696c 	.word	0x7262696c
   1350c:	64657461 	.word	0x64657461
   13510:	ffff0020 	.word	0xffff0020
   13514:	0020416d 	.word	0x0020416d
   13518:	65747845 	.word	0x65747845
   1351c:	6465646e 	.word	0x6465646e
   13520:	3a444920 	.word	0x3a444920
   13524:	25783020 	.word	0x25783020
   13528:	586c382e 	.word	0x586c382e
   1352c:	4c442020 	.word	0x4c442020
   13530:	25203a43 	.word	0x25203a43
   13534:	20206431 	.word	0x20206431
   13538:	61746144 	.word	0x61746144
   1353c:	0000003a 	.word	0x0000003a
   13540:	2578302c 	.word	0x2578302c
   13544:	586c332e 	.word	0x586c332e
   13548:	6c61662c 	.word	0x6c61662c
   1354c:	252c6573 	.word	0x252c6573
   13550:	00006431 	.word	0x00006431
   13554:	4d455220 	.word	0x4d455220
   13558:	2045544f 	.word	0x2045544f
   1355c:	55514552 	.word	0x55514552
   13560:	20545345 	.word	0x20545345
   13564:	4d415246 	.word	0x4d415246
   13568:	00000045 	.word	0x00000045
   1356c:	7830202c 	.word	0x7830202c
   13570:	58322e25 	.word	0x58322e25
   13574:	ffffff00 	.word	0xffffff00
   13578:	75706e49 	.word	0x75706e49
   1357c:	00203a74 	.word	0x00203a74
   13580:	4e4f2031 	.word	0x4e4f2031
   13584:	00002020 	.word	0x00002020
   13588:	464f2031 	.word	0x464f2031
   1358c:	00002046 	.word	0x00002046
   13590:	4e4f2032 	.word	0x4e4f2032
   13594:	00002020 	.word	0x00002020
   13598:	464f2032 	.word	0x464f2032
   1359c:	00002046 	.word	0x00002046
   135a0:	4e4f2033 	.word	0x4e4f2033
   135a4:	00002020 	.word	0x00002020
   135a8:	464f2033 	.word	0x464f2033
   135ac:	00002046 	.word	0x00002046
   135b0:	4e4f2034 	.word	0x4e4f2034
   135b4:	00002020 	.word	0x00002020
   135b8:	464f2034 	.word	0x464f2034
   135bc:	ff002046 	.word	0xff002046
   135c0:	74617473 	.word	0x74617473
   135c4:	7478742e 	.word	0x7478742e
   135c8:	0000003d 	.word	0x0000003d
   135cc:	74634120 	.word	0x74634120
   135d0:	20657669 	.word	0x20657669
   135d4:	00000000 	.word	0x00000000
   135d8:	2e636f73 	.word	0x2e636f73
   135dc:	3d6c6176 	.word	0x3d6c6176
   135e0:	00000000 	.word	0x00000000
   135e4:	31636f73 	.word	0x31636f73
   135e8:	6c61762e 	.word	0x6c61762e
   135ec:	0000003d 	.word	0x0000003d
   135f0:	72727563 	.word	0x72727563
   135f4:	2e746e65 	.word	0x2e746e65
   135f8:	3d6c6176 	.word	0x3d6c6176
   135fc:	00000000 	.word	0x00000000
   13600:	706d6574 	.word	0x706d6574
   13604:	6c61762e 	.word	0x6c61762e
   13608:	0000003d 	.word	0x0000003d
   1360c:	706d6574 	.word	0x706d6574
   13610:	2e776f6c 	.word	0x2e776f6c
   13614:	3d6c6176 	.word	0x3d6c6176
   13618:	00000000 	.word	0x00000000
   1361c:	706d6574 	.word	0x706d6574
   13620:	68676968 	.word	0x68676968
   13624:	6c61762e 	.word	0x6c61762e
   13628:	0000003d 	.word	0x0000003d
   1362c:	746c6f76 	.word	0x746c6f76
   13630:	6c61762e 	.word	0x6c61762e
   13634:	0000003d 	.word	0x0000003d
   13638:	63776f6c 	.word	0x63776f6c
   1363c:	2e6c6c65 	.word	0x2e6c6c65
   13640:	3d6c6176 	.word	0x3d6c6176
   13644:	00000000 	.word	0x00000000
   13648:	68676968 	.word	0x68676968
   1364c:	6c6c6563 	.word	0x6c6c6563
   13650:	6c61762e 	.word	0x6c61762e
   13654:	0000003d 	.word	0x0000003d
   13658:	6c6c6563 	.word	0x6c6c6563
   1365c:	746c6564 	.word	0x746c6564
   13660:	61762e61 	.word	0x61762e61
   13664:	00003d6c 	.word	0x00003d6c
   13668:	6c6c6563 	.word	0x6c6c6563
   1366c:	2e6c6162 	.word	0x2e6c6162
   13670:	3d6c6176 	.word	0x3d6c6176
   13674:	00000000 	.word	0x00000000
   13678:	6d726966 	.word	0x6d726966
   1367c:	6c61762e 	.word	0x6c61762e
   13680:	ffff003d 	.word	0xffff003d
   13684:	20544547 	.word	0x20544547
   13688:	41544144 	.word	0x41544144
   1368c:	4f524620 	.word	0x4f524620
   13690:	4449204d 	.word	0x4449204d
   13694:	ff00203a 	.word	0xff00203a
   13698:	20746573 	.word	0x20746573
   1369c:	206e6163 	.word	0x206e6163
   136a0:	65746172 	.word	0x65746172
   136a4:	006b6f20 	.word	0x006b6f20
   136a8:	20746573 	.word	0x20746573
   136ac:	206e6163 	.word	0x206e6163
   136b0:	65746172 	.word	0x65746172
   136b4:	69616620 	.word	0x69616620
   136b8:	0000006c 	.word	0x0000006c
   136bc:	6e6f7257 	.word	0x6e6f7257
   136c0:	41432067 	.word	0x41432067
   136c4:	7053204e 	.word	0x7053204e
   136c8:	00646565 	.word	0x00646565
   136cc:	72617453 	.word	0x72617453
   136d0:	676e6974 	.word	0x676e6974
   136d4:	21707520 	.word	0x21707520
   136d8:	00000000 	.word	0x00000000
   136dc:	706d6953 	.word	0x706d6953
   136e0:	20534d42 	.word	0x20534d42
   136e4:	56203256 	.word	0x56203256
   136e8:	2d746c6f 	.word	0x2d746c6f
   136ec:	65706d41 	.word	0x65706d41
   136f0:	00006172 	.word	0x00006172
   136f4:	73616552 	.word	0x73616552
   136f8:	66206e6f 	.word	0x66206e6f
   136fc:	6c20726f 	.word	0x6c20726f
   13700:	20747361 	.word	0x20747361
   13704:	65736552 	.word	0x65736552
   13708:	00203a74 	.word	0x00203a74
   1370c:	706f7453 	.word	0x706f7453
   13710:	646f4d20 	.word	0x646f4d20
   13714:	63412065 	.word	0x63412065
   13718:	776f6e6b 	.word	0x776f6e6b
   1371c:	6764656c 	.word	0x6764656c
   13720:	72452065 	.word	0x72452065
   13724:	20726f72 	.word	0x20726f72
   13728:	65736552 	.word	0x65736552
   1372c:	00000074 	.word	0x00000074
   13730:	2d4d444d 	.word	0x2d4d444d
   13734:	52205041 	.word	0x52205041
   13738:	74657365 	.word	0x74657365
   1373c:	00000000 	.word	0x00000000
   13740:	74666f53 	.word	0x74666f53
   13744:	65726177 	.word	0x65726177
   13748:	73655220 	.word	0x73655220
   1374c:	00007465 	.word	0x00007465
   13750:	65726f43 	.word	0x65726f43
   13754:	636f4c20 	.word	0x636f4c20
   13758:	2070756b 	.word	0x2070756b
   1375c:	6e657645 	.word	0x6e657645
   13760:	65522074 	.word	0x65522074
   13764:	00746573 	.word	0x00746573
   13768:	65776f50 	.word	0x65776f50
   1376c:	6e6f2d72 	.word	0x6e6f2d72
   13770:	73655220 	.word	0x73655220
   13774:	00007465 	.word	0x00007465
   13778:	65747845 	.word	0x65747845
   1377c:	6c616e72 	.word	0x6c616e72
   13780:	6e695020 	.word	0x6e695020
   13784:	73655220 	.word	0x73655220
   13788:	00007465 	.word	0x00007465
   1378c:	63746157 	.word	0x63746157
   13790:	676f6468 	.word	0x676f6468
   13794:	504f4328 	.word	0x504f4328
   13798:	65522029 	.word	0x65522029
   1379c:	00746573 	.word	0x00746573
   137a0:	73736f4c 	.word	0x73736f4c
   137a4:	20666f20 	.word	0x20666f20
   137a8:	65747845 	.word	0x65747845
   137ac:	6c616e72 	.word	0x6c616e72
   137b0:	6f6c4320 	.word	0x6f6c4320
   137b4:	52206b63 	.word	0x52206b63
   137b8:	74657365 	.word	0x74657365
   137bc:	00000000 	.word	0x00000000
   137c0:	73736f4c 	.word	0x73736f4c
   137c4:	20666f20 	.word	0x20666f20
   137c8:	6b636f4c 	.word	0x6b636f4c
   137cc:	206e6920 	.word	0x206e6920
   137d0:	204c4c50 	.word	0x204c4c50
   137d4:	65736552 	.word	0x65736552
   137d8:	00000074 	.word	0x00000074
   137dc:	2d776f4c 	.word	0x2d776f4c
   137e0:	746c6f76 	.word	0x746c6f76
   137e4:	20656761 	.word	0x20656761
   137e8:	65746544 	.word	0x65746544
   137ec:	52207463 	.word	0x52207463
   137f0:	74657365 	.word	0x74657365
   137f4:	00000000 	.word	0x00000000
   137f8:	72617453 	.word	0x72617453
   137fc:	20646574 	.word	0x20646574
   13800:	69726573 	.word	0x69726573
   13804:	69206c61 	.word	0x69206c61
   13808:	7265746e 	.word	0x7265746e
   1380c:	65636166 	.word	0x65636166
   13810:	ffffff00 	.word	0xffffff00
   13814:	6e6f7257 	.word	0x6e6f7257
   13818:	61422067 	.word	0x61422067
   1381c:	52206475 	.word	0x52206475
   13820:	00657461 	.word	0x00657461
   13824:	646f4320 	.word	0x646f4320
   13828:	53206465 	.word	0x53206465
   1382c:	69747465 	.word	0x69747465
   13830:	2073676e 	.word	0x2073676e
   13834:	64616f4c 	.word	0x64616f4c
   13838:	00206465 	.word	0x00206465
   1383c:	68416d20 	.word	0x68416d20
   13840:	73655220 	.word	0x73655220
   13844:	00207465 	.word	0x00207465
   13848:	202d2031 	.word	0x202d2031
   1384c:	69726553 	.word	0x69726553
   13850:	50206c61 	.word	0x50206c61
   13854:	2074726f 	.word	0x2074726f
   13858:	636e7546 	.word	0x636e7546
   1385c:	6e6f6974 	.word	0x6e6f6974
   13860:	0000003a 	.word	0x0000003a
   13864:	656e6f4e 	.word	0x656e6f4e
   13868:	00000000 	.word	0x00000000
   1386c:	206e6143 	.word	0x206e6143
   13870:	20737542 	.word	0x20737542
   13874:	61707845 	.word	0x61707845
   13878:	6f69736e 	.word	0x6f69736e
   1387c:	0000006e 	.word	0x0000006e
   13880:	202d2032 	.word	0x202d2032
   13884:	69726553 	.word	0x69726553
   13888:	43206c61 	.word	0x43206c61
   1388c:	53206e61 	.word	0x53206e61
   13890:	64656570 	.word	0x64656570
   13894:	0000003a 	.word	0x0000003a
   13898:	70626b20 	.word	0x70626b20
   1389c:	00000073 	.word	0x00000073
   138a0:	202d2033 	.word	0x202d2033
   138a4:	746c6f56 	.word	0x746c6f56
   138a8:	44434420 	.word	0x44434420
   138ac:	65722043 	.word	0x65722043
   138b0:	73657571 	.word	0x73657571
   138b4:	00003a74 	.word	0x00003a74
   138b8:	00005620 	.word	0x00005620
   138bc:	202d2034 	.word	0x202d2034
   138c0:	69726553 	.word	0x69726553
   138c4:	42206c61 	.word	0x42206c61
   138c8:	20647561 	.word	0x20647561
   138cc:	65746152 	.word	0x65746152
   138d0:	00000020 	.word	0x00000020
   138d4:	202d2071 	.word	0x202d2071
   138d8:	62206f47 	.word	0x62206f47
   138dc:	206b6361 	.word	0x206b6361
   138e0:	6d206f74 	.word	0x6d206f74
   138e4:	00756e65 	.word	0x00756e65
   138e8:	202d2031 	.word	0x202d2031
   138ec:	706d6554 	.word	0x706d6554
   138f0:	6e655320 	.word	0x6e655320
   138f4:	20726f73 	.word	0x20726f73
   138f8:	74746553 	.word	0x74746553
   138fc:	3a676e69 	.word	0x3a676e69
   13900:	00000000 	.word	0x00000000
   13904:	202d2032 	.word	0x202d2032
   13908:	746c6f56 	.word	0x746c6f56
   1390c:	20656761 	.word	0x20656761
   13910:	65646e55 	.word	0x65646e55
   13914:	68572072 	.word	0x68572072
   13918:	20686369 	.word	0x20686369
   1391c:	49206f54 	.word	0x49206f54
   13920:	726f6e67 	.word	0x726f6e67
   13924:	65432065 	.word	0x65432065
   13928:	3a736c6c 	.word	0x3a736c6c
   1392c:	00000000 	.word	0x00000000
   13930:	0000566d 	.word	0x0000566d
   13934:	202d2031 	.word	0x202d2031
   13938:	6c6c6543 	.word	0x6c6c6543
   1393c:	61684320 	.word	0x61684320
   13940:	20656772 	.word	0x20656772
   13944:	746c6f56 	.word	0x746c6f56
   13948:	20656761 	.word	0x20656761
   1394c:	696d694c 	.word	0x696d694c
   13950:	65532074 	.word	0x65532074
   13954:	696f7074 	.word	0x696f7074
   13958:	203a746e 	.word	0x203a746e
   1395c:	00000000 	.word	0x00000000
   13960:	202d2032 	.word	0x202d2032
   13964:	72616843 	.word	0x72616843
   13968:	48206567 	.word	0x48206567
   1396c:	65747379 	.word	0x65747379
   13970:	73697372 	.word	0x73697372
   13974:	0000203a 	.word	0x0000203a
   13978:	202d2033 	.word	0x202d2033
   1397c:	6b636150 	.word	0x6b636150
   13980:	78614d20 	.word	0x78614d20
   13984:	61684320 	.word	0x61684320
   13988:	20656772 	.word	0x20656772
   1398c:	72727543 	.word	0x72727543
   13990:	3a746e65 	.word	0x3a746e65
   13994:	00000020 	.word	0x00000020
   13998:	50202d34 	.word	0x50202d34
   1399c:	206b6361 	.word	0x206b6361
   139a0:	20646e45 	.word	0x20646e45
   139a4:	4320666f 	.word	0x4320666f
   139a8:	67726168 	.word	0x67726168
   139ac:	75432065 	.word	0x75432065
   139b0:	6e657272 	.word	0x6e657272
   139b4:	00203a74 	.word	0x00203a74
   139b8:	43202d35 	.word	0x43202d35
   139bc:	67726168 	.word	0x67726168
   139c0:	54207265 	.word	0x54207265
   139c4:	3a657079 	.word	0x3a657079
   139c8:	00000020 	.word	0x00000020
   139cc:	616c6552 	.word	0x616c6552
   139d0:	6f432079 	.word	0x6f432079
   139d4:	6f72746e 	.word	0x6f72746e
   139d8:	0000006c 	.word	0x0000006c
   139dc:	73757242 	.word	0x73757242
   139e0:	4c4e2061 	.word	0x4c4e2061
   139e4:	78783547 	.word	0x78783547
   139e8:	00000000 	.word	0x00000000
   139ec:	746c6f56 	.word	0x746c6f56
   139f0:	61684320 	.word	0x61684320
   139f4:	72656772 	.word	0x72656772
   139f8:	00000000 	.word	0x00000000
   139fc:	65746c45 	.word	0x65746c45
   13a00:	6843206b 	.word	0x6843206b
   13a04:	65677261 	.word	0x65677261
   13a08:	00000072 	.word	0x00000072
   13a0c:	6f636c45 	.word	0x6f636c45
   13a10:	6843206e 	.word	0x6843206e
   13a14:	65677261 	.word	0x65677261
   13a18:	00000072 	.word	0x00000072
   13a1c:	74636956 	.word	0x74636956
   13a20:	2f6e6f72 	.word	0x2f6e6f72
   13a24:	00414d53 	.word	0x00414d53
   13a28:	61646f43 	.word	0x61646f43
   13a2c:	00000000 	.word	0x00000000
   13a30:	43202d36 	.word	0x43202d36
   13a34:	67726168 	.word	0x67726168
   13a38:	43207265 	.word	0x43207265
   13a3c:	4d206e61 	.word	0x4d206e61
   13a40:	53206773 	.word	0x53206773
   13a44:	203a6470 	.word	0x203a6470
   13a48:	00000000 	.word	0x00000000
   13a4c:	0000536d 	.word	0x0000536d
   13a50:	202d2037 	.word	0x202d2037
   13a54:	72616843 	.word	0x72616843
   13a58:	20726567 	.word	0x20726567
   13a5c:	43205648 	.word	0x43205648
   13a60:	656e6e6f 	.word	0x656e6e6f
   13a64:	6f697463 	.word	0x6f697463
   13a68:	00203a6e 	.word	0x00203a6e
   13a6c:	68654220 	.word	0x68654220
   13a70:	20646e69 	.word	0x20646e69
   13a74:	746e6f43 	.word	0x746e6f43
   13a78:	6f746361 	.word	0x6f746361
   13a7c:	00007372 	.word	0x00007372
   13a80:	65726944 	.word	0x65726944
   13a84:	54207463 	.word	0x54207463
   13a88:	6142206f 	.word	0x6142206f
   13a8c:	72657474 	.word	0x72657474
   13a90:	56482079 	.word	0x56482079
   13a94:	00000000 	.word	0x00000000
   13a98:	72616c41 	.word	0x72616c41
   13a9c:	6e61206d 	.word	0x6e61206d
   13aa0:	61572064 	.word	0x61572064
   13aa4:	6e696e72 	.word	0x6e696e72
   13aa8:	65532067 	.word	0x65532067
   13aac:	6e697474 	.word	0x6e697474
   13ab0:	4d207367 	.word	0x4d207367
   13ab4:	00756e65 	.word	0x00756e65
   13ab8:	202d2031 	.word	0x202d2031
   13abc:	746c6f56 	.word	0x746c6f56
   13ac0:	20656761 	.word	0x20656761
   13ac4:	6e726157 	.word	0x6e726157
   13ac8:	20676e69 	.word	0x20676e69
   13acc:	7366664f 	.word	0x7366664f
   13ad0:	203a7465 	.word	0x203a7465
   13ad4:	00000000 	.word	0x00000000
   13ad8:	202d2032 	.word	0x202d2032
   13adc:	6c6c6543 	.word	0x6c6c6543
   13ae0:	6c6f5620 	.word	0x6c6f5620
   13ae4:	65676174 	.word	0x65676174
   13ae8:	66694420 	.word	0x66694420
   13aec:	65726566 	.word	0x65726566
   13af0:	2065636e 	.word	0x2065636e
   13af4:	72616c41 	.word	0x72616c41
   13af8:	00203a6d 	.word	0x00203a6d
   13afc:	202d2033 	.word	0x202d2033
   13b00:	706d6554 	.word	0x706d6554
   13b04:	72615720 	.word	0x72615720
   13b08:	676e696e 	.word	0x676e696e
   13b0c:	66664f20 	.word	0x66664f20
   13b10:	3a746573 	.word	0x3a746573
   13b14:	00000020 	.word	0x00000020
   13b18:	00004320 	.word	0x00004320
   13b1c:	202d2034 	.word	0x202d2034
   13b20:	7265764f 	.word	0x7265764f
   13b24:	646e6120 	.word	0x646e6120
   13b28:	646e5520 	.word	0x646e5520
   13b2c:	56207265 	.word	0x56207265
   13b30:	61746c6f 	.word	0x61746c6f
   13b34:	44206567 	.word	0x44206567
   13b38:	79616c65 	.word	0x79616c65
   13b3c:	0000203a 	.word	0x0000203a
   13b40:	00536d20 	.word	0x00536d20
   13b44:	746e6f43 	.word	0x746e6f43
   13b48:	6f746361 	.word	0x6f746361
   13b4c:	6e612072 	.word	0x6e612072
   13b50:	61472064 	.word	0x61472064
   13b54:	20656775 	.word	0x20656775
   13b58:	74746553 	.word	0x74746553
   13b5c:	73676e69 	.word	0x73676e69
   13b60:	6e654d20 	.word	0x6e654d20
   13b64:	00000075 	.word	0x00000075
   13b68:	202d2031 	.word	0x202d2031
   13b6c:	43657250 	.word	0x43657250
   13b70:	67726168 	.word	0x67726168
   13b74:	69542065 	.word	0x69542065
   13b78:	3a72656d 	.word	0x3a72656d
   13b7c:	00000020 	.word	0x00000020
   13b80:	202d2032 	.word	0x202d2032
   13b84:	43657250 	.word	0x43657250
   13b88:	67726168 	.word	0x67726168
   13b8c:	69462065 	.word	0x69462065
   13b90:	6873696e 	.word	0x6873696e
   13b94:	72754320 	.word	0x72754320
   13b98:	746e6572 	.word	0x746e6572
   13b9c:	0000203a 	.word	0x0000203a
   13ba0:	202d2033 	.word	0x202d2033
   13ba4:	204d5750 	.word	0x204d5750
   13ba8:	746e6f63 	.word	0x746e6f63
   13bac:	6f746361 	.word	0x6f746361
   13bb0:	6f482072 	.word	0x6f482072
   13bb4:	3020646c 	.word	0x3020646c
   13bb8:	3535322d 	.word	0x3535322d
   13bbc:	00003a20 	.word	0x00003a20
   13bc0:	202d2034 	.word	0x202d2034
   13bc4:	204d5750 	.word	0x204d5750
   13bc8:	20726f66 	.word	0x20726f66
   13bcc:	67756147 	.word	0x67756147
   13bd0:	6f4c2065 	.word	0x6f4c2065
   13bd4:	2d302077 	.word	0x2d302077
   13bd8:	20353532 	.word	0x20353532
   13bdc:	0000003a 	.word	0x0000003a
   13be0:	202d2035 	.word	0x202d2035
   13be4:	204d5750 	.word	0x204d5750
   13be8:	20726f66 	.word	0x20726f66
   13bec:	67756147 	.word	0x67756147
   13bf0:	69482065 	.word	0x69482065
   13bf4:	30206867 	.word	0x30206867
   13bf8:	3535322d 	.word	0x3535322d
   13bfc:	00003a20 	.word	0x00003a20
   13c00:	75626544 	.word	0x75626544
   13c04:	65532067 	.word	0x65532067
   13c08:	6e697474 	.word	0x6e697474
   13c0c:	4d207367 	.word	0x4d207367
   13c10:	00756e65 	.word	0x00756e65
   13c14:	67676f54 	.word	0x67676f54
   13c18:	6f20656c 	.word	0x6f20656c
   13c1c:	666f2f6e 	.word	0x666f2f6e
   13c20:	00000066 	.word	0x00000066
   13c24:	202d2031 	.word	0x202d2031
   13c28:	206e6143 	.word	0x206e6143
   13c2c:	75626544 	.word	0x75626544
   13c30:	003a2067 	.word	0x003a2067
   13c34:	202d2032 	.word	0x202d2032
   13c38:	72727543 	.word	0x72727543
   13c3c:	20746e65 	.word	0x20746e65
   13c40:	75626544 	.word	0x75626544
   13c44:	003a2067 	.word	0x003a2067
   13c48:	202d2033 	.word	0x202d2033
   13c4c:	7074754f 	.word	0x7074754f
   13c50:	43207475 	.word	0x43207475
   13c54:	6b636568 	.word	0x6b636568
   13c58:	00003a20 	.word	0x00003a20
   13c5c:	202d2034 	.word	0x202d2034
   13c60:	75706e49 	.word	0x75706e49
   13c64:	68432074 	.word	0x68432074
   13c68:	206b6365 	.word	0x206b6365
   13c6c:	0000003a 	.word	0x0000003a
   13c70:	202d2035 	.word	0x202d2035
   13c74:	20535345 	.word	0x20535345
   13c78:	65646f6d 	.word	0x65646f6d
   13c7c:	00003a20 	.word	0x00003a20
   13c80:	202d2036 	.word	0x202d2036
   13c84:	6c6c6543 	.word	0x6c6c6543
   13c88:	72502073 	.word	0x72502073
   13c8c:	6e657365 	.word	0x6e657365
   13c90:	65522074 	.word	0x65522074
   13c94:	20746573 	.word	0x20746573
   13c98:	0000003a 	.word	0x0000003a
   13c9c:	202d2037 	.word	0x202d2037
   13ca0:	67756147 	.word	0x67756147
   13ca4:	65442065 	.word	0x65442065
   13ca8:	20677562 	.word	0x20677562
   13cac:	0000003a 	.word	0x0000003a
   13cb0:	202d2038 	.word	0x202d2038
   13cb4:	20565343 	.word	0x20565343
   13cb8:	7074754f 	.word	0x7074754f
   13cbc:	3a207475 	.word	0x3a207475
   13cc0:	00000000 	.word	0x00000000
   13cc4:	202d2039 	.word	0x202d2039
   13cc8:	69636544 	.word	0x69636544
   13ccc:	206c616d 	.word	0x206c616d
   13cd0:	63616c50 	.word	0x63616c50
   13cd4:	74207365 	.word	0x74207365
   13cd8:	6853206f 	.word	0x6853206f
   13cdc:	3a20776f 	.word	0x3a20776f
   13ce0:	00000000 	.word	0x00000000
   13ce4:	202d2030 	.word	0x202d2030
   13ce8:	70736944 	.word	0x70736944
   13cec:	2079616c 	.word	0x2079616c
   13cf0:	5320726f 	.word	0x5320726f
   13cf4:	61697265 	.word	0x61697265
   13cf8:	694d206c 	.word	0x694d206c
   13cfc:	726f7272 	.word	0x726f7272
   13d00:	00003a20 	.word	0x00003a20
   13d04:	73694420 	.word	0x73694420
   13d08:	79616c70 	.word	0x79616c70
   13d0c:	74614420 	.word	0x74614420
   13d10:	00000061 	.word	0x00000061
   13d14:	72655320 	.word	0x72655320
   13d18:	206c6169 	.word	0x206c6169
   13d1c:	7272694d 	.word	0x7272694d
   13d20:	0000726f 	.word	0x0000726f
   13d24:	202d2061 	.word	0x202d2061
   13d28:	206e6143 	.word	0x206e6143
   13d2c:	75626544 	.word	0x75626544
   13d30:	65532067 	.word	0x65532067
   13d34:	6c616972 	.word	0x6c616972
   13d38:	0000003a 	.word	0x0000003a
   13d3c:	72727543 	.word	0x72727543
   13d40:	20746e65 	.word	0x20746e65
   13d44:	736e6553 	.word	0x736e6553
   13d48:	4320726f 	.word	0x4320726f
   13d4c:	62696c61 	.word	0x62696c61
   13d50:	69746172 	.word	0x69746172
   13d54:	4d206e6f 	.word	0x4d206e6f
   13d58:	00756e65 	.word	0x00756e65
   13d5c:	202d2063 	.word	0x202d2063
   13d60:	63206f54 	.word	0x63206f54
   13d64:	62696c61 	.word	0x62696c61
   13d68:	65746172 	.word	0x65746172
   13d6c:	6e657320 	.word	0x6e657320
   13d70:	20726f73 	.word	0x20726f73
   13d74:	7366666f 	.word	0x7366666f
   13d78:	00007465 	.word	0x00007465
   13d7c:	202d2073 	.word	0x202d2073
   13d80:	72727543 	.word	0x72727543
   13d84:	20746e65 	.word	0x20746e65
   13d88:	736e6553 	.word	0x736e6553
   13d8c:	5420726f 	.word	0x5420726f
   13d90:	20657079 	.word	0x20657079
   13d94:	0000203a 	.word	0x0000203a
   13d98:	616e4120 	.word	0x616e4120
   13d9c:	75676f6c 	.word	0x75676f6c
   13da0:	75442065 	.word	0x75442065
   13da4:	43206c61 	.word	0x43206c61
   13da8:	65727275 	.word	0x65727275
   13dac:	5320746e 	.word	0x5320746e
   13db0:	6f736e65 	.word	0x6f736e65
   13db4:	00002072 	.word	0x00002072
   13db8:	616e4120 	.word	0x616e4120
   13dbc:	75676f6c 	.word	0x75676f6c
   13dc0:	69532065 	.word	0x69532065
   13dc4:	656c676e 	.word	0x656c676e
   13dc8:	72754320 	.word	0x72754320
   13dcc:	746e6572 	.word	0x746e6572
   13dd0:	6e655320 	.word	0x6e655320
   13dd4:	20726f73 	.word	0x20726f73
   13dd8:	00000000 	.word	0x00000000
   13ddc:	6e614320 	.word	0x6e614320
   13de0:	20737562 	.word	0x20737562
   13de4:	72727543 	.word	0x72727543
   13de8:	20746e65 	.word	0x20746e65
   13dec:	736e6553 	.word	0x736e6553
   13df0:	0020726f 	.word	0x0020726f
   13df4:	65646e55 	.word	0x65646e55
   13df8:	656e6966 	.word	0x656e6966
   13dfc:	00000064 	.word	0x00000064
   13e00:	202d2031 	.word	0x202d2031
   13e04:	65766e69 	.word	0x65766e69
   13e08:	63207472 	.word	0x63207472
   13e0c:	65727275 	.word	0x65727275
   13e10:	3a20746e 	.word	0x3a20746e
   13e14:	00000000 	.word	0x00000000
   13e18:	202d2032 	.word	0x202d2032
   13e1c:	65727550 	.word	0x65727550
   13e20:	6c6f5620 	.word	0x6c6f5620
   13e24:	65676174 	.word	0x65676174
   13e28:	73616220 	.word	0x73616220
   13e2c:	53206465 	.word	0x53206465
   13e30:	3a20434f 	.word	0x3a20434f
   13e34:	00000000 	.word	0x00000000
   13e38:	202d2033 	.word	0x202d2033
   13e3c:	72727543 	.word	0x72727543
   13e40:	20746e65 	.word	0x20746e65
   13e44:	746c754d 	.word	0x746c754d
   13e48:	696c7069 	.word	0x696c7069
   13e4c:	69746163 	.word	0x69746163
   13e50:	3a206e6f 	.word	0x3a206e6f
   13e54:	00000000 	.word	0x00000000
   13e58:	202d2034 	.word	0x202d2034
   13e5c:	6c616e41 	.word	0x6c616e41
   13e60:	6575676f 	.word	0x6575676f
   13e64:	776f4c20 	.word	0x776f4c20
   13e68:	6e615220 	.word	0x6e615220
   13e6c:	43206567 	.word	0x43206567
   13e70:	3a766e6f 	.word	0x3a766e6f
   13e74:	00000000 	.word	0x00000000
   13e78:	2f566d20 	.word	0x2f566d20
   13e7c:	00000041 	.word	0x00000041
   13e80:	202d2035 	.word	0x202d2035
   13e84:	6c616e41 	.word	0x6c616e41
   13e88:	6575676f 	.word	0x6575676f
   13e8c:	67694820 	.word	0x67694820
   13e90:	61522068 	.word	0x61522068
   13e94:	2065676e 	.word	0x2065676e
   13e98:	766e6f43 	.word	0x766e6f43
   13e9c:	0000003a 	.word	0x0000003a
   13ea0:	202d2036 	.word	0x202d2036
   13ea4:	72727543 	.word	0x72727543
   13ea8:	20746e65 	.word	0x20746e65
   13eac:	736e6553 	.word	0x736e6553
   13eb0:	4420726f 	.word	0x4420726f
   13eb4:	62646165 	.word	0x62646165
   13eb8:	3a646e61 	.word	0x3a646e61
   13ebc:	00000000 	.word	0x00000000
   13ec0:	00566d20 	.word	0x00566d20
   13ec4:	202d2038 	.word	0x202d2038
   13ec8:	72727543 	.word	0x72727543
   13ecc:	20746e65 	.word	0x20746e65
   13ed0:	6e616843 	.word	0x6e616843
   13ed4:	206c656e 	.word	0x206c656e
   13ed8:	6e616843 	.word	0x6e616843
   13edc:	764f6567 	.word	0x764f6567
   13ee0:	003a7265 	.word	0x003a7265
   13ee4:	00004120 	.word	0x00004120
   13ee8:	74746142 	.word	0x74746142
   13eec:	20797265 	.word	0x20797265
   13ef0:	74746553 	.word	0x74746553
   13ef4:	73676e69 	.word	0x73676e69
   13ef8:	6e654d20 	.word	0x6e654d20
   13efc:	00000075 	.word	0x00000075
   13f00:	202d2072 	.word	0x202d2072
   13f04:	65736552 	.word	0x65736552
   13f08:	48412074 	.word	0x48412074
   13f0c:	756f6320 	.word	0x756f6320
   13f10:	7265746e 	.word	0x7265746e
   13f14:	00000000 	.word	0x00000000
   13f18:	202d2066 	.word	0x202d2066
   13f1c:	65736552 	.word	0x65736552
   13f20:	6f742074 	.word	0x6f742074
   13f24:	646f4320 	.word	0x646f4320
   13f28:	53206465 	.word	0x53206465
   13f2c:	69747465 	.word	0x69747465
   13f30:	0073676e 	.word	0x0073676e
   13f34:	202d2031 	.word	0x202d2031
   13f38:	6c6c6543 	.word	0x6c6c6543
   13f3c:	65764f20 	.word	0x65764f20
   13f40:	6f562072 	.word	0x6f562072
   13f44:	6761746c 	.word	0x6761746c
   13f48:	65532065 	.word	0x65532065
   13f4c:	696f7074 	.word	0x696f7074
   13f50:	203a746e 	.word	0x203a746e
   13f54:	00000000 	.word	0x00000000
   13f58:	202d2032 	.word	0x202d2032
   13f5c:	6c6c6543 	.word	0x6c6c6543
   13f60:	646e5520 	.word	0x646e5520
   13f64:	56207265 	.word	0x56207265
   13f68:	61746c6f 	.word	0x61746c6f
   13f6c:	53206567 	.word	0x53206567
   13f70:	6f707465 	.word	0x6f707465
   13f74:	3a746e69 	.word	0x3a746e69
   13f78:	00000020 	.word	0x00000020
   13f7c:	202d2033 	.word	0x202d2033
   13f80:	7265764f 	.word	0x7265764f
   13f84:	6d655420 	.word	0x6d655420
   13f88:	61726570 	.word	0x61726570
   13f8c:	65727574 	.word	0x65727574
   13f90:	74655320 	.word	0x74655320
   13f94:	6e696f70 	.word	0x6e696f70
   13f98:	00203a74 	.word	0x00203a74
   13f9c:	00000043 	.word	0x00000043
   13fa0:	202d2034 	.word	0x202d2034
   13fa4:	65646e55 	.word	0x65646e55
   13fa8:	65542072 	.word	0x65542072
   13fac:	7265706d 	.word	0x7265706d
   13fb0:	72757461 	.word	0x72757461
   13fb4:	65532065 	.word	0x65532065
   13fb8:	696f7074 	.word	0x696f7074
   13fbc:	203a746e 	.word	0x203a746e
   13fc0:	00000000 	.word	0x00000000
   13fc4:	202d2035 	.word	0x202d2035
   13fc8:	6c6c6543 	.word	0x6c6c6543
   13fcc:	6c614220 	.word	0x6c614220
   13fd0:	65636e61 	.word	0x65636e61
   13fd4:	6c6f5620 	.word	0x6c6f5620
   13fd8:	65676174 	.word	0x65676174
   13fdc:	74655320 	.word	0x74655320
   13fe0:	6e696f70 	.word	0x6e696f70
   13fe4:	00203a74 	.word	0x00203a74
   13fe8:	202d2036 	.word	0x202d2036
   13fec:	616c6142 	.word	0x616c6142
   13ff0:	2065636e 	.word	0x2065636e
   13ff4:	746c6f56 	.word	0x746c6f56
   13ff8:	20656761 	.word	0x20656761
   13ffc:	74737948 	.word	0x74737948
   14000:	69737265 	.word	0x69737265
   14004:	00203a73 	.word	0x00203a73
   14008:	202d2037 	.word	0x202d2037
   1400c:	42206841 	.word	0x42206841
   14010:	65747461 	.word	0x65747461
   14014:	43207972 	.word	0x43207972
   14018:	63617061 	.word	0x63617061
   1401c:	3a797469 	.word	0x3a797469
   14020:	00000020 	.word	0x00000020
   14024:	00006841 	.word	0x00006841
   14028:	202d2038 	.word	0x202d2038
   1402c:	6b636150 	.word	0x6b636150
   14030:	78614d20 	.word	0x78614d20
   14034:	73694420 	.word	0x73694420
   14038:	72616863 	.word	0x72616863
   1403c:	203a6567 	.word	0x203a6567
   14040:	00000000 	.word	0x00000000
   14044:	202d2039 	.word	0x202d2039
   14048:	6c6c6543 	.word	0x6c6c6543
   1404c:	73694420 	.word	0x73694420
   14050:	72616863 	.word	0x72616863
   14054:	56206567 	.word	0x56206567
   14058:	61746c6f 	.word	0x61746c6f
   1405c:	4c206567 	.word	0x4c206567
   14060:	74696d69 	.word	0x74696d69
   14064:	74655320 	.word	0x74655320
   14068:	6e696f70 	.word	0x6e696f70
   1406c:	00203a74 	.word	0x00203a74
   14070:	202d2030 	.word	0x202d2030
   14074:	76616c53 	.word	0x76616c53
   14078:	74732065 	.word	0x74732065
   1407c:	676e6972 	.word	0x676e6972
   14080:	6e692073 	.word	0x6e692073
   14084:	72617020 	.word	0x72617020
   14088:	656c6c61 	.word	0x656c6c61
   1408c:	00203a6c 	.word	0x00203a6c
   14090:	202d2061 	.word	0x202d2061
   14094:	6c6c6543 	.word	0x6c6c6543
   14098:	6e692073 	.word	0x6e692073
   1409c:	72655320 	.word	0x72655320
   140a0:	20736569 	.word	0x20736569
   140a4:	20726570 	.word	0x20726570
   140a8:	69727453 	.word	0x69727453
   140ac:	203a676e 	.word	0x203a676e
   140b0:	00000000 	.word	0x00000000
   140b4:	202d2062 	.word	0x202d2062
   140b8:	70746573 	.word	0x70746573
   140bc:	746e696f 	.word	0x746e696f
   140c0:	203a3120 	.word	0x203a3120
   140c4:	00000000 	.word	0x00000000
   140c8:	202d2063 	.word	0x202d2063
   140cc:	20434f53 	.word	0x20434f53
   140d0:	70746573 	.word	0x70746573
   140d4:	746e696f 	.word	0x746e696f
   140d8:	003a3120 	.word	0x003a3120
   140dc:	00000025 	.word	0x00000025
   140e0:	202d2064 	.word	0x202d2064
   140e4:	70746573 	.word	0x70746573
   140e8:	746e696f 	.word	0x746e696f
   140ec:	203a3220 	.word	0x203a3220
   140f0:	00000000 	.word	0x00000000
   140f4:	202d2065 	.word	0x202d2065
   140f8:	20434f53 	.word	0x20434f53
   140fc:	70746573 	.word	0x70746573
   14100:	746e696f 	.word	0x746e696f
   14104:	203a3220 	.word	0x203a3220
   14108:	00000000 	.word	0x00000000
   1410c:	202d2067 	.word	0x202d2067
   14110:	726f7453 	.word	0x726f7453
   14114:	20656761 	.word	0x20656761
   14118:	70746553 	.word	0x70746553
   1411c:	746e696f 	.word	0x746e696f
   14120:	0000203a 	.word	0x0000203a
   14124:	202d2068 	.word	0x202d2068
   14128:	63736944 	.word	0x63736944
   1412c:	67726168 	.word	0x67726168
   14130:	75432065 	.word	0x75432065
   14134:	6e657272 	.word	0x6e657272
   14138:	61542074 	.word	0x61542074
   1413c:	20726570 	.word	0x20726570
   14140:	7366664f 	.word	0x7366664f
   14144:	203a7465 	.word	0x203a7465
   14148:	00000000 	.word	0x00000000
   1414c:	554e454d 	.word	0x554e454d
   14150:	00000000 	.word	0x00000000
   14154:	75626544 	.word	0x75626544
   14158:	6e696767 	.word	0x6e696767
   1415c:	61502067 	.word	0x61502067
   14160:	64657375 	.word	0x64657375
   14164:	00000000 	.word	0x00000000
   14168:	6d726946 	.word	0x6d726946
   1416c:	65726177 	.word	0x65726177
   14170:	72655620 	.word	0x72655620
   14174:	6e6f6973 	.word	0x6e6f6973
   14178:	00203a20 	.word	0x00203a20
   1417c:	202d2062 	.word	0x202d2062
   14180:	74746142 	.word	0x74746142
   14184:	20797265 	.word	0x20797265
   14188:	74746553 	.word	0x74746553
   1418c:	73676e69 	.word	0x73676e69
   14190:	00000000 	.word	0x00000000
   14194:	202d2061 	.word	0x202d2061
   14198:	72616c41 	.word	0x72616c41
   1419c:	6e61206d 	.word	0x6e61206d
   141a0:	61572064 	.word	0x61572064
   141a4:	6e696e72 	.word	0x6e696e72
   141a8:	65532067 	.word	0x65532067
   141ac:	6e697474 	.word	0x6e697474
   141b0:	00007367 	.word	0x00007367
   141b4:	202d2065 	.word	0x202d2065
   141b8:	72616843 	.word	0x72616843
   141bc:	676e6967 	.word	0x676e6967
   141c0:	74655320 	.word	0x74655320
   141c4:	676e6974 	.word	0x676e6974
   141c8:	00000073 	.word	0x00000073
   141cc:	202d2063 	.word	0x202d2063
   141d0:	72727543 	.word	0x72727543
   141d4:	20746e65 	.word	0x20746e65
   141d8:	736e6553 	.word	0x736e6553
   141dc:	4320726f 	.word	0x4320726f
   141e0:	62696c61 	.word	0x62696c61
   141e4:	69746172 	.word	0x69746172
   141e8:	00006e6f 	.word	0x00006e6f
   141ec:	202d206b 	.word	0x202d206b
   141f0:	746e6f43 	.word	0x746e6f43
   141f4:	6f746361 	.word	0x6f746361
   141f8:	6e612072 	.word	0x6e612072
   141fc:	61472064 	.word	0x61472064
   14200:	20656775 	.word	0x20656775
   14204:	74746553 	.word	0x74746553
   14208:	73676e69 	.word	0x73676e69
   1420c:	00000000 	.word	0x00000000
   14210:	202d2069 	.word	0x202d2069
   14214:	6f6e6749 	.word	0x6f6e6749
   14218:	56206572 	.word	0x56206572
   1421c:	65756c61 	.word	0x65756c61
   14220:	74655320 	.word	0x74655320
   14224:	676e6974 	.word	0x676e6974
   14228:	00000073 	.word	0x00000073
   1422c:	202d2078 	.word	0x202d2078
   14230:	61707845 	.word	0x61707845
   14234:	6f69736e 	.word	0x6f69736e
   14238:	6553206e 	.word	0x6553206e
   1423c:	6e697474 	.word	0x6e697474
   14240:	00007367 	.word	0x00007367
   14244:	202d2064 	.word	0x202d2064
   14248:	75626544 	.word	0x75626544
   1424c:	65532067 	.word	0x65532067
   14250:	6e697474 	.word	0x6e697474
   14254:	00007367 	.word	0x00007367
   14258:	202d2052 	.word	0x202d2052
   1425c:	74736552 	.word	0x74736552
   14260:	20747261 	.word	0x20747261
   14264:	00534d42 	.word	0x00534d42
   14268:	202d2071 	.word	0x202d2071
   1426c:	74697865 	.word	0x74697865
   14270:	6e656d20 	.word	0x6e656d20
   14274:	ffff0075 	.word	0xffff0075
   14278:	21202020 	.word	0x21202020
   1427c:	53202121 	.word	0x53202121
   14280:	65697265 	.word	0x65697265
   14284:	65432073 	.word	0x65432073
   14288:	20736c6c 	.word	0x20736c6c
   1428c:	6c756146 	.word	0x6c756146
   14290:	21212074 	.word	0x21212074
   14294:	ffff0021 	.word	0xffff0021
   14298:	726f6241 	.word	0x726f6241
   1429c:	6e692074 	.word	0x6e692074
   142a0:	4e414320 	.word	0x4e414320
   142a4:	67656220 	.word	0x67656220
   142a8:	202e6e69 	.word	0x202e6e69
   142ac:	6c756f43 	.word	0x6c756f43
   142b0:	74276e64 	.word	0x74276e64
   142b4:	6e696620 	.word	0x6e696620
   142b8:	20612064 	.word	0x20612064
   142bc:	74697573 	.word	0x74697573
   142c0:	656c6261 	.word	0x656c6261
   142c4:	75616220 	.word	0x75616220
   142c8:	6f632064 	.word	0x6f632064
   142cc:	6769666e 	.word	0x6769666e
   142d0:	ffff0021 	.word	0xffff0021

000142d4 <ADC::diff_table_ADC0>:
   142d4:	03248022                                ".$.

000142d8 <ADC::diff_table_ADC1>:
   142d8:	80240322                                ".$.

000142dc <ADC::channel2sc1aADC0>:
   142dc:	09080e05 07060c0d 1300040f 0e051f03     ................
   142ec:	0c0d0908 040f0706 1f1f1f1f 1f1f1f1f     ................
   142fc:	53401f1f 161a5f43 1e1d1b17              ..@SC_......

00014308 <ADC::channel2sc1aADC1>:
   14308:	09081f1f 1f1f1f1f 1f031f1f 1f1f1300     ................
   14318:	1f1f0908 1f1f1f1f 05851f1f 84070604     ................
   14328:	5f431f1f 121a5340 1e1d1b1f              ..C_@S......

00014334 <SPIClass::spi0_hardware>:
   14334:	4004803c 00001000 00001a04 00007fff     <..@............
   14344:	00001011 00008229 0000080c 00000200     ....)...........
   14354:	00000200 0000070b 00000240 00000200     ........@.......
   14364:	00000e0d 00000240 00000200 0609020a     ....@...........
   14374:	16151714 0000000f 00000200 00000200     ................
   14384:	00000200 00000200 00000200 00000200     ................
   14394:	00000200 00000200 00000200 02020101     ................
   143a4:	08080404 00000010 002b2b2b 532b5441     ........+++.AT+S
   143b4:	0d64253d 0000000a 512b5441 ff000a0d     =%d.....AT+Q....
   143c4:	432b5441 6425303d 00000a0d 432b5441     AT+C=0%d....AT+C
   143d4:	0d64253d ffff000a 00000000 00000000     =%d.............
	...
   143ec:	00002580 00004b00 00009600 0000e100     .%...K..........
   143fc:	0001c200                                ....

00014400 <_serialEvent_default>:
   14400:	ffffff00                                ....

00014404 <vtable for HardwareSerial2>:
	...
   1440c:	000086ed 00008711 000087a1 0000879d     ................
   1441c:	00008799 00008795 00008791 000086b5     ................
   1442c:	00008771 0000876d 00008765 0000875d     q...m...e...]...
   1443c:	00008755 00008745 00008735 00008731     U...E...5...1...
   1444c:	00008729 00008721 000087c5 000087e5     )...!...........
   1445c:	00008805 000087a5 000086f9 000086e1     ................

0001446c <vtable for HardwareSerial3>:
	...
   14474:	0000885d 00008881 00008911 0000890d     ]...............
   14484:	00008909 00008905 00008901 00008825     ............%...
   14494:	000088e1 000088dd 000088d5 000088cd     ................
   144a4:	000088c5 000088b5 000088a5 000088a1     ................
   144b4:	00008899 00008891 00008935 00008955     ........5...U...
   144c4:	00008975 00008915 00008869 00008851     u.......i...Q...
   144d4:	006e616e 00666e69 0066766f 037ff06f     nan.inf.ovf.o...
   144e4:	78037003 0f80f013 4770d0fb              .p.x......pG

000144f0 <digital_pin_to_info_PGM>:
   144f0:	43fe0840 4004a040 43fe0844 4004a044     @..C@..@D..CD..@
   14500:	43fe1800 4004c000 43fe0030 40049030     ...C...@0..C0..@
   14510:	43fe0034 40049034 43fe181c 4004c01c     4..C4..@...C...@
   14520:	43fe1810 4004c010 43fe1808 4004c008     ...C...@...C...@
   14530:	43fe180c 4004c00c 43fe100c 4004b00c     ...C...@...C...@
   14540:	43fe1010 4004b010 43fe1018 4004b018     ...C...@...C...@
   14550:	43fe101c 4004b01c 43fe1014 4004b014     ...C...@...C...@
   14560:	43fe1804 4004c004 43fe1000 4004b000     ...C...@...C...@
   14570:	43fe0800 4004a000 43fe0804 4004a004     ...C...@...C...@
   14580:	43fe080c 4004a00c 43fe0808 4004a008     ...C...@...C...@
   14590:	43fe1814 4004c014 43fe1818 4004c018     ...C...@...C...@
   145a0:	43fe1004 4004b004 43fe1008 4004b008     ...C...@...C...@
   145b0:	43fe0014 40049014 43fe084c 4004a04c     ...C...@L..CL..@
   145c0:	43fe2004 4004d004 43fe1024 4004b024     . .C...@$..C$..@
   145d0:	43fe1020 4004b020 43fe1028 4004b028      ..C ..@(..C(..@
   145e0:	43fe102c 4004b02c 43fe2000 4004d000     ,..C,..@. .C...@
   145f0:	43fe0848 4004a048 43fe0010 40049010     H..CH..@...C...@

00014600 <vtable for usb_serial_class>:
	...
   14608:	0000b209 0000b201 0000b1fd 0000b1f9     ................
   14618:	0000b1f5 0000b1f1 0000b1ed 0000b1e9     ................

00014628 <usb_descriptor_list>:
   14628:	00000100 1fff8868 00000012 00000200     ....h...........
   14638:	1fff8824 00000043 00000300 1fff887c     $...C.......|...
   14648:	00000000 04090301 1fff8880 00000000     ................
   14658:	04090302 1fff8898 00000000 04090303     ................
   14668:	1fff88b0 00000000 00000000 00000000     ................
   14678:	00000000                                ....

0001467c <usb_endpoint_config_table>:
   1467c:	15191500 3f000000 bf000000 3f317180     .......?.....q1?
   1468c:	bf317180 3717f7d1 b717f7d1              .q1....7....

00014698 <_ctype_>:
   14698:	20202000 20202020 28282020 20282828     .         ((((( 
   146a8:	20202020 20202020 20202020 20202020                     
   146b8:	10108820 10101010 10101010 10101010      ...............
   146c8:	04040410 04040404 10040404 10101010     ................
   146d8:	41411010 41414141 01010101 01010101     ..AAAAAA........
   146e8:	01010101 01010101 01010101 10101010     ................
   146f8:	42421010 42424242 02020202 02020202     ..BBBBBB........
   14708:	02020202 02020202 02020202 10101010     ................
   14718:	00000020 00000000 00000000 00000000      ...............
	...
   14798:	ffffff00 435f434c 414c4c4f 00004554     ....LC_COLLATE..
   147a8:	435f434c 45505954 00000000 4d5f434c     LC_CTYPE....LC_M
   147b8:	54454e4f 00595241 4e5f434c 52454d55     ONETARY.LC_NUMER
   147c8:	00004349 545f434c 00454d49 4d5f434c     IC..LC_TIME.LC_M
   147d8:	41535345 00534547 6c6c6142 7320636f     ESSAGES.Balloc s
   147e8:	65636375 64656465 00000000 7461642f     ucceeded..../dat
   147f8:	656a2f61 6e696b6e 6f772f73 70736b72     a/jenkins/worksp
   14808:	2f656361 2d554e47 6c6f6f74 69616863     ace/GNU-toolchai
   14818:	72612f6e 31312d6d 6372732f 77656e2f     n/arm-11/src/new
   14828:	2d62696c 77677963 6e2f6e69 696c7765     lib-cygwin/newli
   14838:	696c2f62 732f6362 696c6474 706d2f62     b/libc/stdlib/mp
   14848:	2e636572 ffff0063                       rec.c...

00014850 <__mprec_bigtens>:
   14850:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   14860:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   14870:	7f73bf3c 75154fdd                       <.s..O.u

00014878 <__mprec_tens>:
   14878:	00000000 3ff00000 00000000 40240000     .......?......$@
   14888:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   14898:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   148a8:	00000000 412e8480 00000000 416312d0     .......A......cA
   148b8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   148c8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   148d8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   148e8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   148f8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   14908:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   14918:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   14928:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   14938:	79d99db4 44ea7843 00000005 00000019     ...yCx.D........
   14948:	0000007d 00464e49 004e414e 33323130     }...INF.NAN.0123
   14958:	37363534 62613938 66656463 00000000     456789abcdef....
   14968:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   14978:	00000000 6c756e28 ff00296c 20202020     ....(null)..    
   14988:	20202020 20202020 20202020 30303030                 0000
   14998:	30303030 30303030 30303030 7566202c     000000000000, fu
   149a8:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   149b8:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   149c8:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   149d8:	2520656e 25732564 ff000a73 69666e49     ne %d%s%s...Infi
   149e8:	7974696e 00000000 004e614e 7461642f     nity....NaN./dat
   149f8:	656a2f61 6e696b6e 6f772f73 70736b72     a/jenkins/worksp
   14a08:	2f656361 2d554e47 6c6f6f74 69616863     ace/GNU-toolchai
   14a18:	72612f6e 31312d6d 6372732f 77656e2f     n/arm-11/src/new
   14a28:	2d62696c 77677963 6e2f6e69 696c7765     lib-cygwin/newli
   14a38:	696c2f62 732f6362 696c6474 74642f62     b/libc/stdlib/dt
   14a48:	632e616f ffffff00 20202020 20202020     oa.c....        
   14a58:	20202020 20202020 30303030 30303030             00000000
   14a68:	30303030 30303030                       00000000

00014a70 <_init>:
   14a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14a72:	bf00      	nop
   14a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
   14a76:	bc08      	pop	{r3}
   14a78:	469e      	mov	lr, r3
   14a7a:	4770      	bx	lr

00014a7c <__init_array_start>:
   14a7c:	0000d59d 	.word	0x0000d59d

00014a80 <__frame_dummy_init_array_entry>:
   14a80:	00000435 000044ad 000079fd 00008239     5....D...y..9...

Disassembly of section .fini:

00014a90 <_fini>:
   14a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14a92:	bf00      	nop
