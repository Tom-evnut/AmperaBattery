
C:\Users\tomde\AppData\Local\Temp\arduino\sketches\F18E17D99E802212301FDB80DE85E1DB/VoltBMSV2.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
  reset = false;
  moduleAddress = 0;
}

void BMSModule::clearmodule()
{
       0:	00 80 00 20 bd 01 00 00 1d 8d 00 00 d9 8c 00 00     ... ............
  }
  moduleVolt = 0.0f;
  temperatures[0] = 0.0f;
  exists = false;
  reset = false;
  moduleAddress = 0;
      10:	d9 8c 00 00 d9 8c 00 00 d9 8c 00 00 d9 8c 00 00     ................
}
      20:	d9 8c 00 00 d9 8c 00 00 d9 8c 00 00 1d 8d 00 00     ................
  uint8_t CUV;

  Logger::console(0, "");
  Logger::console(0, "");
  Logger::console(0, "");
  Logger::console(0, "Modules: %i  Cells: %i  Voltage: %fV   Avg Cell Voltage: %fV     Avg Temp: %fC ", numFoundModules, seriescells(),
      30:	1d 8d 00 00 d9 8c 00 00 31 82 00 00 35 82 00 00     ........1...5...
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
      40:	1d 8d 00 00 1d 8d 00 00 1d 8d 00 00 1d 8d 00 00     ................
      spack = spack + modules[y].getscells();
      50:	1d 8d 00 00 1d 8d 00 00 1d 8d 00 00 1d 8d 00 00     ................
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
      60:	1d 8d 00 00 1d 8d 00 00 1d 8d 00 00 1d 8d 00 00     ................
  Logger::console(0, "Modules: %i  Cells: %i  Voltage: %fV   Avg Cell Voltage: %fV     Avg Temp: %fC ", numFoundModules, seriescells(),
      70:	1d 8d 00 00 1d 8d 00 00 1d 8d 00 00 1d 8d 00 00     ................
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
      80:	1d 8d 00 00 1d 8d 00 00 1d 8d 00 00 1d 8d 00 00     ................
      avg += modules[x].getAverageV();
      90:	1d 8d 00 00 1d 8d 00 00 1d 8d 00 00 1d 8d 00 00     ................
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
      a0:	1d 8d 00 00 1d 8d 00 00 1d 8d 00 00 1d 8d 00 00     ................
  avg = avg / (float)numFoundModules;
      b0:	1d 8d 00 00 b5 75 00 00 c1 75 00 00 c5 75 00 00     .....u...u...u..
                  getPackVoltage(), getAvgCellVolt(), getAvgTemperature());
      c0:	d1 75 00 00 d5 75 00 00 d9 75 00 00 1d 8d 00 00     .u...u...u......
  Logger::console(0, "Modules: %i  Cells: %i  Voltage: %fV   Avg Cell Voltage: %fV     Avg Temp: %fC ", numFoundModules, seriescells(),
      d0:	1d 8d 00 00 1d 8d 00 00 1d 8d 00 00 1d 8d 00 00     ................
      e0:	1d 8d 00 00 1d 8d 00 00 1d 8d 00 00 1d 8d 00 00     ................
  Logger::console(0, "");
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
      f0:	1d 8d 00 00 1d 8d 00 00 1d 8d 00 00 55 9b 00 00     ............U...
  {
    if (modules[y].isExisting())
     100:	1d 8d 00 00 7d a2 00 00 1d 8d 00 00 1d 8d 00 00     ....}...........
    {
      faults = modules[y].getFaults();
     110:	1d 8d 00 00 1d 8d 00 00 1d 8d 00 00 1d 8d 00 00     ................
      alerts = modules[y].getAlerts();
      COV = modules[y].getCOVCells();
     120:	1d 8d 00 00 1d 8d 00 00 1d 8d 00 00 1d 8d 00 00     ................
      CUV = modules[y].getCUVCells();

      Logger::console(0, "                               Module #%i", y);
     130:	1d 8d 00 00 1d 8d 00 00 1d 8d 00 00 1d 8d 00 00     ................

      Logger::console(0, "  Voltage: %fV   (%fV-%fV)     Temperatures: (%fC-%fC)", modules[y].getModuleVoltage(),
                      modules[y].getLowCellV(), modules[y].getHighCellV(), modules[y].getLowTemp(), modules[y].getHighTemp());
     140:	1d 8d 00 00 1d 8d 00 00 1d 8d 00 00 1d 8d 00 00     ................
     150:	1d 8d 00 00 1d 8d 00 00 1d 8d 00 00 1d 8d 00 00     ................
      Logger::console(0, "  Voltage: %fV   (%fV-%fV)     Temperatures: (%fC-%fC)", modules[y].getModuleVoltage(),
     160:	1d 8d 00 00 7d a5 00 00 1d 8d 00 00 1d 8d 00 00     ....}...........
     170:	1d 8d 00 00 1d 8d 00 00 1d 8d 00 00 1d 8d 00 00     ................
     180:	1d 8d 00 00 1d 8d 00 00 1d 8d 00 00 1d 8d 00 00     ................
     190:	1d 8d 00 00 1d 8d 00 00 1d 8d 00 00 1d 8d 00 00     ................
     1a0:	1d 8d 00 00 1d 8d 00 00 1d 8d 00 00 1d 8d 00 00     ................
        }
      }
      if (alerts > 0)
      {
        Logger::console(0, "  MODULE HAS ALERTS:");
        if (alerts & 1)
     1b0:	1d 8d 00 00 1d 8d 00 00 1d 8d 00 00                 ............

000001bc <ResetHandler>:
        }
        if (alerts & 4)
        {
          Logger::console(0, "    Sleep mode active");
        }
        if (alerts & 8)
     1bc:	4b57      	ldr	r3, [pc, #348]	; (31c <ResetHandler+0x160>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
        {
          Logger::console(0, "    Thermal shutdown active");
        }
        if (alerts & 0x10)
     1c2:	b510      	push	{r4, lr}
        {
          Logger::console(0, "    Test Alert");
        }
        if (alerts & 0x20)
     1c4:	81da      	strh	r2, [r3, #14]
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
        {
          Logger::console(0, "    OTP EPROM Uncorrectable Error");
        }
        if (alerts & 0x40)
     1ca:	81da      	strh	r2, [r3, #14]
        {
          Logger::console(0, "    GROUP3 Regs Invalid");
        }
        if (alerts & 0x80)
     1cc:	bf00      	nop
     1ce:	bf00      	nop
        {
          Logger::console(0, "    Address not registered");
        }
      }
      if (faults > 0 || alerts > 0)
        SERIALCONSOLE.println();
     1d0:	f008 fda8 	bl	8d24 <startup_early_hook>
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
     1d4:	4b52      	ldr	r3, [pc, #328]	; (320 <ResetHandler+0x164>)
        SERIALCONSOLE.println();
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
     1da:	631a      	str	r2, [r3, #48]	; 0x30
     1dc:	4a51      	ldr	r2, [pc, #324]	; (324 <ResetHandler+0x168>)
     1de:	639a      	str	r2, [r3, #56]	; 0x38
     1e0:	4a51      	ldr	r2, [pc, #324]	; (328 <ResetHandler+0x16c>)
     1e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }
}
     1e4:	4a51      	ldr	r2, [pc, #324]	; (32c <ResetHandler+0x170>)
     1e6:	6913      	ldr	r3, [r2, #16]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
        Logger::console(0, "  MODULE IS FAULTED:");
     1ec:	d103      	bne.n	1f6 <ResetHandler+0x3a>
     1ee:	6153      	str	r3, [r2, #20]
     1f0:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
        if (faults & 1)
     1f4:	6113      	str	r3, [r2, #16]
     1f6:	4b4e      	ldr	r3, [pc, #312]	; (330 <ResetHandler+0x174>)
        if (faults & 2)
     1f8:	789a      	ldrb	r2, [r3, #2]
     1fa:	0711      	lsls	r1, r2, #28
        if (faults & 4)
     1fc:	d503      	bpl.n	206 <ResetHandler+0x4a>
     1fe:	789a      	ldrb	r2, [r3, #2]
        if (faults & 8)
     200:	f042 0208 	orr.w	r2, r2, #8
        if (faults & 0x10)
     204:	709a      	strb	r2, [r3, #2]
     206:	4b4b      	ldr	r3, [pc, #300]	; (334 <ResetHandler+0x178>)
        if (faults & 0x20)
     208:	484b      	ldr	r0, [pc, #300]	; (338 <ResetHandler+0x17c>)
     20a:	222a      	movs	r2, #42	; 0x2a
      if (alerts > 0)
     20c:	701a      	strb	r2, [r3, #0]
     20e:	4b4b      	ldr	r3, [pc, #300]	; (33c <ResetHandler+0x180>)
     210:	1cda      	adds	r2, r3, #3
          Logger::console(0, "    Internal registers inconsistent");
     212:	1a12      	subs	r2, r2, r0
     214:	1ec1      	subs	r1, r0, #3
     216:	f022 0203 	bic.w	r2, r2, #3
      if (alerts > 0)
     21a:	4299      	cmp	r1, r3
     21c:	bf88      	it	hi
     21e:	2200      	movhi	r2, #0
          Logger::console(0, "    Power on reset has occurred");
     220:	4947      	ldr	r1, [pc, #284]	; (340 <ResetHandler+0x184>)
     222:	f008 fc85 	bl	8b30 <memcpy>
     226:	4b47      	ldr	r3, [pc, #284]	; (344 <ResetHandler+0x188>)
        if (faults & 0x10)
     228:	4847      	ldr	r0, [pc, #284]	; (348 <ResetHandler+0x18c>)
     22a:	1cda      	adds	r2, r3, #3
          Logger::console(0, "    Test fault active");
     22c:	1a12      	subs	r2, r2, r0
     22e:	1ec1      	subs	r1, r0, #3
     230:	f022 0203 	bic.w	r2, r2, #3
     234:	4299      	cmp	r1, r3
          Logger::console(0, "    CRC error in received packet");
     236:	bf88      	it	hi
     238:	2200      	movhi	r2, #0
     23a:	2100      	movs	r1, #0
     23c:	f00c fdc8 	bl	cdd0 <memset>
          Logger::console(0, "    GROUP3 Regs Invalid");
     240:	4942      	ldr	r1, [pc, #264]	; (34c <ResetHandler+0x190>)
     242:	4843      	ldr	r0, [pc, #268]	; (350 <ResetHandler+0x194>)
     244:	f44f 72de 	mov.w	r2, #444	; 0x1bc
        if (alerts & 0x80)
     248:	f008 fc72 	bl	8b30 <memcpy>
          Logger::console(0, "    Address not registered");
     24c:	4b41      	ldr	r3, [pc, #260]	; (354 <ResetHandler+0x198>)
     24e:	4a42      	ldr	r2, [pc, #264]	; (358 <ResetHandler+0x19c>)
     250:	2180      	movs	r1, #128	; 0x80
     252:	f803 1b01 	strb.w	r1, [r3], #1
          Logger::console(0, "    OTP EPROM Uncorrectable Error");
     256:	4293      	cmp	r3, r2
     258:	d1fb      	bne.n	252 <ResetHandler+0x96>
     25a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     25e:	4a3c      	ldr	r2, [pc, #240]	; (350 <ResetHandler+0x194>)
          Logger::console(0, "    Test Alert");
     260:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
     264:	4b3d      	ldr	r3, [pc, #244]	; (35c <ResetHandler+0x1a0>)
     266:	228a      	movs	r2, #138	; 0x8a
     268:	701a      	strb	r2, [r3, #0]
          Logger::console(0, "    Thermal shutdown active");
     26a:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     26e:	2224      	movs	r2, #36	; 0x24
     270:	705a      	strb	r2, [r3, #1]
     272:	22a0      	movs	r2, #160	; 0xa0
          Logger::console(0, "    Sleep mode active");
     274:	701a      	strb	r2, [r3, #0]
     276:	799a      	ldrb	r2, [r3, #6]
     278:	0792      	lsls	r2, r2, #30
     27a:	d5fc      	bpl.n	276 <ResetHandler+0xba>
     27c:	799a      	ldrb	r2, [r3, #6]
          Logger::console(0, "    Over temperature on TS2");
     27e:	06d4      	lsls	r4, r2, #27
     280:	d4fc      	bmi.n	27c <ResetHandler+0xc0>
     282:	4b37      	ldr	r3, [pc, #220]	; (360 <ResetHandler+0x1a4>)
     284:	799a      	ldrb	r2, [r3, #6]
     286:	f002 020c 	and.w	r2, r2, #12
          Logger::console(0, "    Over temperature on TS1");
     28a:	2a08      	cmp	r2, #8
     28c:	d1fa      	bne.n	284 <ResetHandler+0xc8>
     28e:	2203      	movs	r2, #3
     290:	711a      	strb	r2, [r3, #4]
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     292:	2240      	movs	r2, #64	; 0x40
     294:	715a      	strb	r2, [r3, #5]
     296:	799a      	ldrb	r2, [r3, #6]
     298:	0690      	lsls	r0, r2, #26
     29a:	d5fc      	bpl.n	296 <ResetHandler+0xda>
     29c:	4a30      	ldr	r2, [pc, #192]	; (360 <ResetHandler+0x1a4>)
            if (CUV & (1 << i))
     29e:	7993      	ldrb	r3, [r2, #6]
     2a0:	0659      	lsls	r1, r3, #25
     2a2:	d5fc      	bpl.n	29e <ResetHandler+0xe2>
     2a4:	4b1e      	ldr	r3, [pc, #120]	; (320 <ResetHandler+0x164>)
     2a6:	492f      	ldr	r1, [pc, #188]	; (364 <ResetHandler+0x1a8>)
     2a8:	6459      	str	r1, [r3, #68]	; 0x44
     2aa:	2102      	movs	r1, #2
     2ac:	6499      	str	r1, [r3, #72]	; 0x48
     2ae:	2120      	movs	r1, #32
     2b0:	7011      	strb	r1, [r2, #0]
     2b2:	7991      	ldrb	r1, [r2, #6]
     2b4:	f001 010c 	and.w	r1, r1, #12
     2b8:	290c      	cmp	r1, #12
     2ba:	d1fa      	bne.n	2b2 <ResetHandler+0xf6>
     2bc:	4a2a      	ldr	r2, [pc, #168]	; (368 <ResetHandler+0x1ac>)
     2be:	605a      	str	r2, [r3, #4]
     2c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     2c4:	4a29      	ldr	r2, [pc, #164]	; (36c <ResetHandler+0x1b0>)
     2c6:	615a      	str	r2, [r3, #20]
     2c8:	2200      	movs	r2, #0
     2ca:	619a      	str	r2, [r3, #24]
     2cc:	2207      	movs	r2, #7
     2ce:	611a      	str	r2, [r3, #16]
     2d0:	4a27      	ldr	r2, [pc, #156]	; (370 <ResetHandler+0x1b4>)
     2d2:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
     2d6:	b662      	cpsie	i
     2d8:	f008 fdd8 	bl	8e8c <_init_Teensyduino_internal_>
     2dc:	4b13      	ldr	r3, [pc, #76]	; (32c <ResetHandler+0x170>)
     2de:	695b      	ldr	r3, [r3, #20]
     2e0:	07da      	lsls	r2, r3, #31
     2e2:	d505      	bpl.n	2f0 <ResetHandler+0x134>
     2e4:	4823      	ldr	r0, [pc, #140]	; (374 <ResetHandler+0x1b8>)
     2e6:	f008 fdc5 	bl	8e74 <rtc_set>
     2ea:	4b23      	ldr	r3, [pc, #140]	; (378 <ResetHandler+0x1bc>)
     2ec:	4a23      	ldr	r2, [pc, #140]	; (37c <ResetHandler+0x1c0>)
     2ee:	61da      	str	r2, [r3, #28]
     2f0:	4b23      	ldr	r3, [pc, #140]	; (380 <ResetHandler+0x1c4>)
     2f2:	781b      	ldrb	r3, [r3, #0]
     2f4:	065b      	lsls	r3, r3, #25
     2f6:	d509      	bpl.n	30c <ResetHandler+0x150>
          for (int i = 0; i < 32; i++)
     2f8:	4c1f      	ldr	r4, [pc, #124]	; (378 <ResetHandler+0x1bc>)
     2fa:	4b20      	ldr	r3, [pc, #128]	; (37c <ResetHandler+0x1c0>)
     2fc:	69e2      	ldr	r2, [r4, #28]
     2fe:	429a      	cmp	r2, r3
     300:	d104      	bne.n	30c <ResetHandler+0x150>
            if (CUV & (1 << i))
     302:	481c      	ldr	r0, [pc, #112]	; (374 <ResetHandler+0x1b8>)
     304:	f008 fdb6 	bl	8e74 <rtc_set>
     308:	2300      	movs	r3, #0
     30a:	61e3      	str	r3, [r4, #28]
     30c:	f008 fd10 	bl	8d30 <startup_late_hook>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     310:	f00c fe54 	bl	cfbc <__libc_init_array>
     314:	f008 fc04 	bl	8b20 <main>
          for (int i = 0; i < 32; i++)
     318:	e7fe      	b.n	318 <ResetHandler+0x15c>
     31a:	bf00      	nop
     31c:	40052000 	.word	0x40052000
     320:	40048000 	.word	0x40048000
     324:	00043f82 	.word	0x00043f82
          SERIALCONSOLE.println();
     328:	2b000001 	.word	0x2b000001
     32c:	4003d000 	.word	0x4003d000
     330:	4007d000 	.word	0x4007d000
     334:	4007e000 	.word	0x4007e000
     338:	1fff8720 	.word	0x1fff8720
            if (COV & (1 << i))
     33c:	1fff8f78 	.word	0x1fff8f78
     340:	000145ec 	.word	0x000145ec
          for (int i = 0; i < 32; i++)
     344:	1fffba24 	.word	0x1fffba24
     348:	1fff8f78 	.word	0x1fff8f78
            if (COV & (1 << i))
     34c:	00000000 	.word	0x00000000
     350:	1fff8200 	.word	0x1fff8200
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	40065000 	.word	0x40065000
          for (int i = 0; i < 32; i++)
     360:	40064000 	.word	0x40064000
     364:	01030000 	.word	0x01030000
     368:	000510c0 	.word	0x000510c0
     36c:	000176ff 	.word	0x000176ff
     370:	20200000 	.word	0x20200000
          SERIALCONSOLE.println();
     374:	65353080 	.word	0x65353080
     378:	4003e000 	.word	0x4003e000
     37c:	5a94c3a5 	.word	0x5a94c3a5
     380:	4007f000 	.word	0x4007f000
     384:	ffffffff 	.word	0xffffffff
     388:	ffffffff 	.word	0xffffffff
     38c:	ffffffff 	.word	0xffffffff
     390:	ffffffff 	.word	0xffffffff
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <register_tm_clones>:
     410:	4805      	ldr	r0, [pc, #20]	; (428 <register_tm_clones+0x18>)
     412:	4b06      	ldr	r3, [pc, #24]	; (42c <register_tm_clones+0x1c>)
     414:	1a1b      	subs	r3, r3, r0
     416:	0fd9      	lsrs	r1, r3, #31
     418:	eb01 01a3 	add.w	r1, r1, r3, asr #2
     41c:	1049      	asrs	r1, r1, #1
     41e:	d002      	beq.n	426 <register_tm_clones+0x16>
     420:	4b03      	ldr	r3, [pc, #12]	; (430 <register_tm_clones+0x20>)
     422:	b103      	cbz	r3, 426 <register_tm_clones+0x16>
     424:	4718      	bx	r3
     426:	4770      	bx	lr
     428:	1fff8f78 	.word	0x1fff8f78
     42c:	1fff8f78 	.word	0x1fff8f78
     430:	00000000 	.word	0x00000000

00000434 <frame_dummy>:
     434:	b508      	push	{r3, lr}
     436:	4b05      	ldr	r3, [pc, #20]	; (44c <frame_dummy+0x18>)
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4905      	ldr	r1, [pc, #20]	; (450 <frame_dummy+0x1c>)
     43c:	4805      	ldr	r0, [pc, #20]	; (454 <frame_dummy+0x20>)
     43e:	f3af 8000 	nop.w
     442:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     446:	f7ff bfe3 	b.w	410 <register_tm_clones>
     44a:	bf00      	nop
     44c:	00000000 	.word	0x00000000
     450:	1fff8f78 	.word	0x1fff8f78
     454:	000145ec 	.word	0x000145ec

00000458 <BMSModule::BMSModule()>:
BMSModule::BMSModule()
     458:	b510      	push	{r4, lr}
    cellVolt[i] = 0.0f;
     45a:	2280      	movs	r2, #128	; 0x80
     45c:	2100      	movs	r1, #0
BMSModule::BMSModule()
     45e:	4604      	mov	r4, r0
    cellVolt[i] = 0.0f;
     460:	f00c fcb6 	bl	cdd0 <memset>
    lowestCellVolt[i] = 5.0f;
     464:	4912      	ldr	r1, [pc, #72]	; (4b0 <BMSModule::BMSModule()+0x58>)
     466:	f104 0380 	add.w	r3, r4, #128	; 0x80
     46a:	f504 7280 	add.w	r2, r4, #256	; 0x100
     46e:	f843 1f04 	str.w	r1, [r3, #4]!
  for (int i = 0; i < 32; i++)
     472:	429a      	cmp	r2, r3
     474:	d1fb      	bne.n	46e <BMSModule::BMSModule()+0x16>
    highestCellVolt[i] = 0.0f;
     476:	2280      	movs	r2, #128	; 0x80
     478:	2100      	movs	r1, #0
     47a:	f504 7084 	add.w	r0, r4, #264	; 0x108
     47e:	f00c fca7 	bl	cdd0 <memset>
  exists = false;
     482:	2200      	movs	r2, #0
  moduleVolt = 0.0f;
     484:	2300      	movs	r3, #0
  lowestTemperature = 200.0f;
     486:	490b      	ldr	r1, [pc, #44]	; (4b4 <BMSModule::BMSModule()+0x5c>)
  highestTemperature = -100.0f;
     488:	480b      	ldr	r0, [pc, #44]	; (4b8 <BMSModule::BMSModule()+0x60>)
  moduleAddress = 0;
     48a:	f884 21d0 	strb.w	r2, [r4, #464]	; 0x1d0
  highestTemperature = -100.0f;
     48e:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
  moduleVolt = 0.0f;
     492:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
  temperatures[0] = 0.0f;
     496:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
  lowestTemperature = 200.0f;
     49a:	f8c4 11a4 	str.w	r1, [r4, #420]	; 0x1a4
  lowestModuleVolt = 200.0f;
     49e:	f8c4 11ac 	str.w	r1, [r4, #428]	; 0x1ac
  highestModuleVolt = 0.0f;
     4a2:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
  exists = false;
     4a6:	f8a4 21b8 	strh.w	r2, [r4, #440]	; 0x1b8
}
     4aa:	4620      	mov	r0, r4
     4ac:	bd10      	pop	{r4, pc}
     4ae:	bf00      	nop
     4b0:	40a00000 	.word	0x40a00000
     4b4:	43480000 	.word	0x43480000
     4b8:	c2c80000 	.word	0xc2c80000

000004bc <BMSModule::decodeCellVoltage(int, CAN_message_t&, int, int)>:

float BMSModule::decodeCellVoltage(int cell, CAN_message_t &msg, int msb, int lsb)
{
     4bc:	b508      	push	{r3, lr}
     4be:	9c02      	ldr	r4, [sp, #8]
  if ((((msg.buf[msb] & 0x0F) << 8) + msg.buf[lsb]) > 0)
     4c0:	4413      	add	r3, r2
     4c2:	4422      	add	r2, r4
     4c4:	7a1b      	ldrb	r3, [r3, #8]
     4c6:	7a12      	ldrb	r2, [r2, #8]
     4c8:	021b      	lsls	r3, r3, #8
     4ca:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
{
     4ce:	4604      	mov	r4, r0
  {
    cellVolt[cell] = float((((msg.buf[msb] & 0x0F) << 8) + msg.buf[lsb]) * 0.00125);
     4d0:	1898      	adds	r0, r3, r2
{
     4d2:	460d      	mov	r5, r1
    cellVolt[cell] = float((((msg.buf[msb] & 0x0F) << 8) + msg.buf[lsb]) * 0.00125);
     4d4:	f00b fba6 	bl	bc24 <__aeabi_i2f>
     4d8:	4902      	ldr	r1, [pc, #8]	; (4e4 <BMSModule::decodeCellVoltage(int, CAN_message_t&, int, int)+0x28>)
     4da:	f00b fbf7 	bl	bccc <__aeabi_fmul>
     4de:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
     4e2:	bf00      	nop
     4e4:	3aa3d70a 	.word	0x3aa3d70a

000004e8 <BMSModule::decodecan(int, CAN_message_t&)>:
  }
}

void BMSModule::decodecan(int Id, CAN_message_t &msg)
{
     4e8:	b510      	push	{r4, lr}
  if (0x1 < moduleAddress && moduleAddress < 0xC) // handle 8-cell frames
     4ea:	f890 31d0 	ldrb.w	r3, [r0, #464]	; 0x1d0
     4ee:	3b02      	subs	r3, #2
     4f0:	2b09      	cmp	r3, #9
{
     4f2:	b082      	sub	sp, #8
     4f4:	4604      	mov	r4, r0
     4f6:	4694      	mov	ip, r2
  if (0x1 < moduleAddress && moduleAddress < 0xC) // handle 8-cell frames
     4f8:	d81e      	bhi.n	538 <BMSModule::decodecan(int, CAN_message_t&)+0x50>
  {
    switch (Id)
     4fa:	29e0      	cmp	r1, #224	; 0xe0
     4fc:	d111      	bne.n	522 <BMSModule::decodecan(int, CAN_message_t&)+0x3a>
      decodeCellVoltage(5, msg, 2, 3);
      decodeCellVoltage(6, msg, 4, 5);
      break;

    case 0xE0:
      temperatures[0] = float(((msg.buf[6] << 8) + msg.buf[7]) * -0.0324 + 150);
     4fe:	f89c 000e 	ldrb.w	r0, [ip, #14]
     502:	f89c 300f 	ldrb.w	r3, [ip, #15]
     506:	eb03 2000 	add.w	r0, r3, r0, lsl #8
     50a:	f00b fb8b 	bl	bc24 <__aeabi_i2f>
     50e:	4914      	ldr	r1, [pc, #80]	; (560 <BMSModule::decodecan(int, CAN_message_t&)+0x78>)
     510:	f00b fbdc 	bl	bccc <__aeabi_fmul>
     514:	4913      	ldr	r1, [pc, #76]	; (564 <BMSModule::decodecan(int, CAN_message_t&)+0x7c>)
     516:	f00b fad1 	bl	babc <__addsf3>
     51a:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
    {
      highestCellVolt[i] = cellVolt[i];
    }
    }
  */
}
     51e:	b002      	add	sp, #8
     520:	bd10      	pop	{r4, pc}
    switch (Id)
     522:	dcfc      	bgt.n	51e <BMSModule::decodecan(int, CAN_message_t&)+0x36>
     524:	2960      	cmp	r1, #96	; 0x60
     526:	d014      	beq.n	552 <BMSModule::decodecan(int, CAN_message_t&)+0x6a>
     528:	2970      	cmp	r1, #112	; 0x70
     52a:	d1f8      	bne.n	51e <BMSModule::decodecan(int, CAN_message_t&)+0x36>
      decodeCellVoltage(5, msg, 0, 1);
     52c:	2301      	movs	r3, #1
     52e:	9300      	str	r3, [sp, #0]
     530:	2105      	movs	r1, #5
     532:	2300      	movs	r3, #0
     534:	f7ff ffc2 	bl	4bc <BMSModule::decodeCellVoltage(int, CAN_message_t&, int, int)>
    switch (Id)
     538:	29e0      	cmp	r1, #224	; 0xe0
     53a:	d0e0      	beq.n	4fe <BMSModule::decodecan(int, CAN_message_t&)+0x16>
     53c:	dcef      	bgt.n	51e <BMSModule::decodecan(int, CAN_message_t&)+0x36>
     53e:	2960      	cmp	r1, #96	; 0x60
     540:	d007      	beq.n	552 <BMSModule::decodecan(int, CAN_message_t&)+0x6a>
     542:	2970      	cmp	r1, #112	; 0x70
     544:	d1eb      	bne.n	51e <BMSModule::decodecan(int, CAN_message_t&)+0x36>
      decodeCellVoltage(4, msg, 0, 1);
     546:	2301      	movs	r3, #1
     548:	9300      	str	r3, [sp, #0]
     54a:	2104      	movs	r1, #4
     54c:	2300      	movs	r3, #0
     54e:	f7ff ffb5 	bl	4bc <BMSModule::decodeCellVoltage(int, CAN_message_t&, int, int)>
      decodeCellVoltage(1, msg, 0, 1);
     552:	2101      	movs	r1, #1
     554:	9100      	str	r1, [sp, #0]
     556:	2300      	movs	r3, #0
     558:	4662      	mov	r2, ip
     55a:	4620      	mov	r0, r4
     55c:	f7ff ffae 	bl	4bc <BMSModule::decodeCellVoltage(int, CAN_message_t&, int, int)>
     560:	bd04b5dd 	.word	0xbd04b5dd
     564:	43160000 	.word	0x43160000

00000568 <BMSModule::getCellsUsed()>:

int BMSModule::getCellsUsed()
{
  return cellsused;
}
     568:	f8d0 01dc 	ldr.w	r0, [r0, #476]	; 0x1dc
     56c:	4770      	bx	lr
     56e:	bf00      	nop

00000570 <BMSModule::getFaults()>:

uint8_t BMSModule::getFaults()
{
  return faults;
}
     570:	f890 01c0 	ldrb.w	r0, [r0, #448]	; 0x1c0
     574:	4770      	bx	lr
     576:	bf00      	nop

00000578 <BMSModule::getAlerts()>:

uint8_t BMSModule::getAlerts()
{
  return alerts;
}
     578:	f890 01bc 	ldrb.w	r0, [r0, #444]	; 0x1bc
     57c:	4770      	bx	lr
     57e:	bf00      	nop

00000580 <BMSModule::getCOVCells()>:

uint8_t BMSModule::getCOVCells()
{
  return COVFaults;
}
     580:	f890 01c4 	ldrb.w	r0, [r0, #452]	; 0x1c4
     584:	4770      	bx	lr
     586:	bf00      	nop

00000588 <BMSModule::getCUVCells()>:

uint8_t BMSModule::getCUVCells()
{
  return CUVFaults;
}
     588:	f890 01c8 	ldrb.w	r0, [r0, #456]	; 0x1c8
     58c:	4770      	bx	lr
     58e:	bf00      	nop

00000590 <BMSModule::getCellVoltage(int)>:

float BMSModule::getCellVoltage(int cell)
{
  if (cell < 0 || cell > 32)
     590:	2920      	cmp	r1, #32
    return 0.0f;
  return cellVolt[cell];
     592:	bf94      	ite	ls
     594:	f850 0021 	ldrls.w	r0, [r0, r1, lsl #2]
    return 0.0f;
     598:	2000      	movhi	r0, #0
}
     59a:	4770      	bx	lr

0000059c <BMSModule::getLowCellV()>:

float BMSModule::getLowCellV()
{
     59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  float lowVal = 10.0f;
     5a0:	4e0c      	ldr	r6, [pc, #48]	; (5d4 <BMSModule::getLowCellV()+0x38>)
{
     5a2:	4680      	mov	r8, r0
     5a4:	1f05      	subs	r5, r0, #4
     5a6:	f100 077c 	add.w	r7, r0, #124	; 0x7c
  for (int i = 0; i < 32; i++)
    if (cellVolt[i] < lowVal && cellVolt[i] > IgnoreCell)
     5aa:	f855 4f04 	ldr.w	r4, [r5, #4]!
     5ae:	4631      	mov	r1, r6
     5b0:	4620      	mov	r0, r4
     5b2:	f00b fd29 	bl	c008 <__aeabi_fcmplt>
     5b6:	4603      	mov	r3, r0
     5b8:	4620      	mov	r0, r4
     5ba:	b12b      	cbz	r3, 5c8 <BMSModule::getLowCellV()+0x2c>
     5bc:	f8d8 11b4 	ldr.w	r1, [r8, #436]	; 0x1b4
     5c0:	f00b fd40 	bl	c044 <__aeabi_fcmpgt>
     5c4:	b100      	cbz	r0, 5c8 <BMSModule::getLowCellV()+0x2c>
      lowVal = cellVolt[i];
     5c6:	4626      	mov	r6, r4
  for (int i = 0; i < 32; i++)
     5c8:	42bd      	cmp	r5, r7
     5ca:	d1ee      	bne.n	5aa <BMSModule::getLowCellV()+0xe>
  return lowVal;
}
     5cc:	4630      	mov	r0, r6
     5ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     5d2:	bf00      	nop
     5d4:	41200000 	.word	0x41200000

000005d8 <BMSModule::getHighCellV()>:

float BMSModule::getHighCellV()
{
     5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  float hiVal = 0.0f;
  for (int i = 0; i < 32; i++)
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 60.0)
     5dc:	f8d0 81b4 	ldr.w	r8, [r0, #436]	; 0x1b4
     5e0:	4f0f      	ldr	r7, [pc, #60]	; (620 <BMSModule::getHighCellV()+0x48>)
  float hiVal = 0.0f;
     5e2:	f04f 0900 	mov.w	r9, #0
     5e6:	1f05      	subs	r5, r0, #4
     5e8:	f100 067c 	add.w	r6, r0, #124	; 0x7c
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 60.0)
     5ec:	f855 4f04 	ldr.w	r4, [r5, #4]!
     5f0:	4641      	mov	r1, r8
     5f2:	4620      	mov	r0, r4
     5f4:	f00b fd26 	bl	c044 <__aeabi_fcmpgt>
     5f8:	4603      	mov	r3, r0
     5fa:	4639      	mov	r1, r7
     5fc:	4620      	mov	r0, r4
     5fe:	b14b      	cbz	r3, 614 <BMSModule::getHighCellV()+0x3c>
     600:	f00b fd02 	bl	c008 <__aeabi_fcmplt>
     604:	4603      	mov	r3, r0
    {
      if (cellVolt[i] > hiVal)
     606:	4649      	mov	r1, r9
     608:	4620      	mov	r0, r4
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 60.0)
     60a:	b11b      	cbz	r3, 614 <BMSModule::getHighCellV()+0x3c>
      if (cellVolt[i] > hiVal)
     60c:	f00b fd1a 	bl	c044 <__aeabi_fcmpgt>
     610:	b100      	cbz	r0, 614 <BMSModule::getHighCellV()+0x3c>
        hiVal = cellVolt[i];
     612:	46a1      	mov	r9, r4
  for (int i = 0; i < 32; i++)
     614:	42b5      	cmp	r5, r6
     616:	d1e9      	bne.n	5ec <BMSModule::getHighCellV()+0x14>
    }
  return hiVal;
}
     618:	4648      	mov	r0, r9
     61a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     61e:	bf00      	nop
     620:	42700000 	.word	0x42700000

00000624 <BMSModule::getAverageV()>:

float BMSModule::getAverageV()
{
     624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     628:	b083      	sub	sp, #12
  int x = 0;
  cellsused = 0;
     62a:	2500      	movs	r5, #0
  float avgVal = 0.0f;
  for (int i = 0; i < 32; i++)
  {
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 60.0)
     62c:	f8d0 91b4 	ldr.w	r9, [r0, #436]	; 0x1b4
     630:	4f18      	ldr	r7, [pc, #96]	; (694 <BMSModule::getAverageV()+0x70>)
{
     632:	9001      	str	r0, [sp, #4]
  cellsused = 0;
     634:	f8c0 51dc 	str.w	r5, [r0, #476]	; 0x1dc
  for (int i = 0; i < 32; i++)
     638:	1f04      	subs	r4, r0, #4
     63a:	f100 087c 	add.w	r8, r0, #124	; 0x7c
  float avgVal = 0.0f;
     63e:	2600      	movs	r6, #0
  int x = 0;
     640:	46aa      	mov	sl, r5
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 60.0)
     642:	f854 bf04 	ldr.w	fp, [r4, #4]!
     646:	4649      	mov	r1, r9
     648:	4658      	mov	r0, fp
     64a:	f00b fcfb 	bl	c044 <__aeabi_fcmpgt>
     64e:	4602      	mov	r2, r0
     650:	4639      	mov	r1, r7
     652:	4658      	mov	r0, fp
     654:	b162      	cbz	r2, 670 <BMSModule::getAverageV()+0x4c>
     656:	f00b fcd7 	bl	c008 <__aeabi_fcmplt>
     65a:	b148      	cbz	r0, 670 <BMSModule::getAverageV()+0x4c>
    {
      x++;
      avgVal += cellVolt[i];
     65c:	4630      	mov	r0, r6
     65e:	4659      	mov	r1, fp
     660:	f00b fa2c 	bl	babc <__addsf3>
      cellsused = i;
     664:	9b01      	ldr	r3, [sp, #4]
      x++;
     666:	f10a 0a01 	add.w	sl, sl, #1
      cellsused = i;
     66a:	f8c3 51dc 	str.w	r5, [r3, #476]	; 0x1dc
      avgVal += cellVolt[i];
     66e:	4606      	mov	r6, r0
  for (int i = 0; i < 32; i++)
     670:	4544      	cmp	r4, r8
     672:	f105 0501 	add.w	r5, r5, #1
     676:	d1e4      	bne.n	642 <BMSModule::getAverageV()+0x1e>
    }
  }

  scells = x;
     678:	9b01      	ldr	r3, [sp, #4]
  avgVal /= x;
     67a:	4650      	mov	r0, sl
  scells = x;
     67c:	f8c3 a1d4 	str.w	sl, [r3, #468]	; 0x1d4
  avgVal /= x;
     680:	f00b fad0 	bl	bc24 <__aeabi_i2f>
     684:	4601      	mov	r1, r0
     686:	4630      	mov	r0, r6
     688:	f00b fbd4 	bl	be34 <__aeabi_fdiv>
  return avgVal;
}
     68c:	b003      	add	sp, #12
     68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     692:	bf00      	nop
     694:	42700000 	.word	0x42700000

00000698 <BMSModule::getscells()>:

int BMSModule::getscells()
{
  return scells;
}
     698:	f8d0 01d4 	ldr.w	r0, [r0, #468]	; 0x1d4
     69c:	4770      	bx	lr
     69e:	bf00      	nop

000006a0 <BMSModule::getLowTemp()>:
}

float BMSModule::getLowTemp()
{
  return (temperatures[0]);
}
     6a0:	f8d0 0190 	ldr.w	r0, [r0, #400]	; 0x190
     6a4:	4770      	bx	lr
     6a6:	bf00      	nop

000006a8 <BMSModule::getHighTemp()>:
     6a8:	f8d0 0190 	ldr.w	r0, [r0, #400]	; 0x190
     6ac:	4770      	bx	lr
     6ae:	bf00      	nop

000006b0 <BMSModule::getAvgTemp()>:
     6b0:	f8d0 0190 	ldr.w	r0, [r0, #400]	; 0x190
     6b4:	4770      	bx	lr
     6b6:	bf00      	nop

000006b8 <BMSModule::getModuleVoltage()>:
{
  return (temperatures[0]);
}

float BMSModule::getModuleVoltage()
{
     6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  moduleVolt = 0;
     6bc:	2600      	movs	r6, #0
  for (int I; I < 32; I++)
  {
    if (cellVolt[I] > IgnoreCell && cellVolt[I] < 60.0)
     6be:	f8d0 91b4 	ldr.w	r9, [r0, #436]	; 0x1b4
     6c2:	4f10      	ldr	r7, [pc, #64]	; (704 <BMSModule::getModuleVoltage()+0x4c>)
  moduleVolt = 0;
     6c4:	f8c0 618c 	str.w	r6, [r0, #396]	; 0x18c
{
     6c8:	4682      	mov	sl, r0
     6ca:	1f05      	subs	r5, r0, #4
     6cc:	f100 087c 	add.w	r8, r0, #124	; 0x7c
    if (cellVolt[I] > IgnoreCell && cellVolt[I] < 60.0)
     6d0:	f855 4f04 	ldr.w	r4, [r5, #4]!
     6d4:	4649      	mov	r1, r9
     6d6:	4620      	mov	r0, r4
     6d8:	f00b fcb4 	bl	c044 <__aeabi_fcmpgt>
     6dc:	4603      	mov	r3, r0
     6de:	4639      	mov	r1, r7
     6e0:	4620      	mov	r0, r4
     6e2:	b153      	cbz	r3, 6fa <BMSModule::getModuleVoltage()+0x42>
     6e4:	f00b fc90 	bl	c008 <__aeabi_fcmplt>
     6e8:	4603      	mov	r3, r0
    {
      moduleVolt = moduleVolt + cellVolt[I];
     6ea:	4621      	mov	r1, r4
     6ec:	4630      	mov	r0, r6
    if (cellVolt[I] > IgnoreCell && cellVolt[I] < 60.0)
     6ee:	b123      	cbz	r3, 6fa <BMSModule::getModuleVoltage()+0x42>
      moduleVolt = moduleVolt + cellVolt[I];
     6f0:	f00b f9e4 	bl	babc <__addsf3>
     6f4:	4606      	mov	r6, r0
     6f6:	f8ca 018c 	str.w	r0, [sl, #396]	; 0x18c
  for (int I; I < 32; I++)
     6fa:	4545      	cmp	r5, r8
     6fc:	d1e8      	bne.n	6d0 <BMSModule::getModuleVoltage()+0x18>
    }
  }
  return moduleVolt;
}
     6fe:	4630      	mov	r0, r6
     700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     704:	42700000 	.word	0x42700000

00000708 <BMSModule::getTemperature(int)>:

float BMSModule::getTemperature(int temp)
{
  if (temp < 0 || temp > 2)
     708:	2902      	cmp	r1, #2
    return 0.0f;
  return temperatures[temp];
     70a:	bf9a      	itte	ls
     70c:	3164      	addls	r1, #100	; 0x64
     70e:	f850 0021 	ldrls.w	r0, [r0, r1, lsl #2]
    return 0.0f;
     712:	2000      	movhi	r0, #0
}
     714:	4770      	bx	lr
     716:	bf00      	nop

00000718 <BMSModule::setAddress(int)>:

void BMSModule::setAddress(int newAddr)
{
  if (newAddr < 0 || newAddr > MAX_MODULE_ADDR)
     718:	2910      	cmp	r1, #16
    return;
  moduleAddress = newAddr;
     71a:	bf98      	it	ls
     71c:	f880 11d0 	strbls.w	r1, [r0, #464]	; 0x1d0
}
     720:	4770      	bx	lr
     722:	bf00      	nop

00000724 <BMSModule::isExisting()>:
}

bool BMSModule::isExisting()
{
  return exists;
}
     724:	f890 01b8 	ldrb.w	r0, [r0, #440]	; 0x1b8
     728:	4770      	bx	lr
     72a:	bf00      	nop

0000072c <BMSModule::settempsensor(int)>:
  return reset;
}

void BMSModule::settempsensor(int tempsensor)
{
  sensor = tempsensor;
     72c:	f8c0 11cc 	str.w	r1, [r0, #460]	; 0x1cc
}
     730:	4770      	bx	lr
     732:	bf00      	nop

00000734 <BMSModule::setExists(bool)>:

void BMSModule::setExists(bool ex)
{
  exists = ex;
     734:	f880 11b8 	strb.w	r1, [r0, #440]	; 0x1b8
}
     738:	4770      	bx	lr
     73a:	bf00      	nop

0000073c <BMSModule::setReset(bool)>:

void BMSModule::setReset(bool ex)
{
  reset = ex;
     73c:	f880 11b9 	strb.w	r1, [r0, #441]	; 0x1b9
}
     740:	4770      	bx	lr
     742:	bf00      	nop

00000744 <BMSModule::setIgnoreCell(float)>:

void BMSModule::setIgnoreCell(float Ignore)
{
     744:	b510      	push	{r4, lr}
  IgnoreCell = Ignore;
     746:	f8c0 11b4 	str.w	r1, [r0, #436]	; 0x1b4
{
     74a:	b082      	sub	sp, #8
  Serial.print(Ignore);
     74c:	4608      	mov	r0, r1
     74e:	f00b f899 	bl	b884 <__aeabi_f2d>
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int64_t n, int base)		{ return (base == 10) ? print(n) : printNumber64(n, base, 0); }
	size_t print(uint64_t n, int base)		{ return printNumber64(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     752:	4c07      	ldr	r4, [pc, #28]	; (770 <BMSModule::setIgnoreCell(float)+0x2c>)
     754:	460b      	mov	r3, r1
     756:	2102      	movs	r1, #2
     758:	4602      	mov	r2, r0
     75a:	9100      	str	r1, [sp, #0]
     75c:	4620      	mov	r0, r4
     75e:	f007 ff4f 	bl	8600 <Print::printFloat(double, unsigned char)>
  Serial.println();
     762:	4620      	mov	r0, r4
}
     764:	b002      	add	sp, #8
     766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Serial.println();
     76a:	f007 bf25 	b.w	85b8 <Print::println()>
     76e:	bf00      	nop
     770:	1fff880c 	.word	0x1fff880c

00000774 <BMSModuleManager::BMSModuleManager()>:
BMSModuleManager::BMSModuleManager()
     774:	b570      	push	{r4, r5, r6, lr}
     776:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
     77a:	4606      	mov	r6, r0
     77c:	f100 0438 	add.w	r4, r0, #56	; 0x38
     780:	3518      	adds	r5, #24
     782:	4620      	mov	r0, r4
     784:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
     788:	f7ff fe66 	bl	458 <BMSModule::BMSModule()>
     78c:	42ac      	cmp	r4, r5
     78e:	d1f8      	bne.n	782 <BMSModuleManager::BMSModuleManager()+0xe>
     790:	f506 7506 	add.w	r5, r6, #536	; 0x218
  for (int i = 1; i <= MAX_MODULE_ADDR; i++)
     794:	2401      	movs	r4, #1
    modules[i].setExists(false);
     796:	4628      	mov	r0, r5
     798:	2100      	movs	r1, #0
     79a:	f7ff ffcb 	bl	734 <BMSModule::setExists(bool)>
    modules[i].setAddress(i);
     79e:	4621      	mov	r1, r4
     7a0:	4628      	mov	r0, r5
  for (int i = 1; i <= MAX_MODULE_ADDR; i++)
     7a2:	3401      	adds	r4, #1
    modules[i].setAddress(i);
     7a4:	f7ff ffb8 	bl	718 <BMSModule::setAddress(int)>
  for (int i = 1; i <= MAX_MODULE_ADDR; i++)
     7a8:	2c11      	cmp	r4, #17
     7aa:	f505 75f0 	add.w	r5, r5, #480	; 0x1e0
     7ae:	d1f2      	bne.n	796 <BMSModuleManager::BMSModuleManager()+0x22>
  lowestPackVolt = 1000.0f;
     7b0:	4907      	ldr	r1, [pc, #28]	; (7d0 <BMSModuleManager::BMSModuleManager()+0x5c>)
     7b2:	6231      	str	r1, [r6, #32]
  isFaulted = false;
     7b4:	f506 5300 	add.w	r3, r6, #8192	; 0x2000
  highestPackVolt = 0.0f;
     7b8:	2200      	movs	r2, #0
     7ba:	6272      	str	r2, [r6, #36]	; 0x24
  lowestPackTemp = 200.0f;
     7bc:	4805      	ldr	r0, [pc, #20]	; (7d4 <BMSModuleManager::BMSModuleManager()+0x60>)
  highestPackTemp = -100.0f;
     7be:	4906      	ldr	r1, [pc, #24]	; (7d8 <BMSModuleManager::BMSModuleManager()+0x64>)
  lowestPackTemp = 200.0f;
     7c0:	62b0      	str	r0, [r6, #40]	; 0x28
  isFaulted = false;
     7c2:	2200      	movs	r2, #0
  highestPackTemp = -100.0f;
     7c4:	62f1      	str	r1, [r6, #44]	; 0x2c
}
     7c6:	4630      	mov	r0, r6
  isFaulted = false;
     7c8:	f883 2020 	strb.w	r2, [r3, #32]
}
     7cc:	bd70      	pop	{r4, r5, r6, pc}
     7ce:	bf00      	nop
     7d0:	447a0000 	.word	0x447a0000
     7d4:	43480000 	.word	0x43480000
     7d8:	c2c80000 	.word	0xc2c80000

000007dc <BMSModuleManager::seriescells()>:
{
     7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  spack = 0;
     7de:	f500 5700 	add.w	r7, r0, #8192	; 0x2000
     7e2:	2300      	movs	r3, #0
     7e4:	f500 56f1 	add.w	r6, r0, #7712	; 0x1e20
     7e8:	627b      	str	r3, [r7, #36]	; 0x24
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
     7ea:	f500 7406 	add.w	r4, r0, #536	; 0x218
     7ee:	3618      	adds	r6, #24
     7f0:	e003      	b.n	7fa <BMSModuleManager::seriescells()+0x1e>
     7f2:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
     7f6:	42b4      	cmp	r4, r6
     7f8:	d00e      	beq.n	818 <BMSModuleManager::seriescells()+0x3c>
    if (modules[y].isExisting())
     7fa:	4620      	mov	r0, r4
     7fc:	f7ff ff92 	bl	724 <BMSModule::isExisting()>
     800:	2800      	cmp	r0, #0
     802:	d0f6      	beq.n	7f2 <BMSModuleManager::seriescells()+0x16>
      spack = spack + modules[y].getscells();
     804:	4620      	mov	r0, r4
     806:	6a7d      	ldr	r5, [r7, #36]	; 0x24
     808:	f7ff ff46 	bl	698 <BMSModule::getscells()>
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
     80c:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
      spack = spack + modules[y].getscells();
     810:	4405      	add	r5, r0
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
     812:	42b4      	cmp	r4, r6
      spack = spack + modules[y].getscells();
     814:	627d      	str	r5, [r7, #36]	; 0x24
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
     816:	d1f0      	bne.n	7fa <BMSModuleManager::seriescells()+0x1e>
}
     818:	6a78      	ldr	r0, [r7, #36]	; 0x24
     81a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000081c <BMSModuleManager::decodecan(CAN_message_t&)>:
{
     81c:	b570      	push	{r4, r5, r6, lr}
  CMU = (msg.id & 0x00F) + 1;
     81e:	680e      	ldr	r6, [r1, #0]
{
     820:	460d      	mov	r5, r1
  CMU = (msg.id & 0x00F) + 1;
     822:	f006 030f 	and.w	r3, r6, #15
  modules[CMU].setExists(true);
     826:	2101      	movs	r1, #1
  CMU = (msg.id & 0x00F) + 1;
     828:	440b      	add	r3, r1
  modules[CMU].setExists(true);
     82a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
     82e:	eb00 1443 	add.w	r4, r0, r3, lsl #5
     832:	3438      	adds	r4, #56	; 0x38
     834:	4620      	mov	r0, r4
     836:	f7ff ff7d 	bl	734 <BMSModule::setExists(bool)>
  modules[CMU].setReset(true);
     83a:	4620      	mov	r0, r4
     83c:	2101      	movs	r1, #1
     83e:	f7ff ff7d 	bl	73c <BMSModule::setReset(bool)>
  modules[CMU].decodecan(Id, msg);
     842:	462a      	mov	r2, r5
     844:	f006 01f0 	and.w	r1, r6, #240	; 0xf0
     848:	4620      	mov	r0, r4
}
     84a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  modules[CMU].decodecan(Id, msg);
     84e:	f7ff be4b 	b.w	4e8 <BMSModule::decodecan(int, CAN_message_t&)>
     852:	bf00      	nop

00000854 <BMSModuleManager::getAllVoltTemp()>:
{
     854:	b570      	push	{r4, r5, r6, lr}
  packVolt = 0.0f;
     856:	2300      	movs	r3, #0
     858:	f500 5600 	add.w	r6, r0, #8192	; 0x2000
{
     85c:	4605      	mov	r5, r0
  packVolt = 0.0f;
     85e:	6103      	str	r3, [r0, #16]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     860:	f500 7406 	add.w	r4, r0, #536	; 0x218
     864:	3618      	adds	r6, #24
     866:	e003      	b.n	870 <BMSModuleManager::getAllVoltTemp()+0x1c>
     868:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
     86c:	42a6      	cmp	r6, r4
     86e:	d023      	beq.n	8b8 <BMSModuleManager::getAllVoltTemp()+0x64>
    if (modules[x].isExisting())
     870:	4620      	mov	r0, r4
     872:	f7ff ff57 	bl	724 <BMSModule::isExisting()>
     876:	2800      	cmp	r0, #0
     878:	d0f6      	beq.n	868 <BMSModuleManager::getAllVoltTemp()+0x14>
      packVolt += modules[x].getModuleVoltage();
     87a:	4620      	mov	r0, r4
     87c:	f7ff ff1c 	bl	6b8 <BMSModule::getModuleVoltage()>
     880:	4601      	mov	r1, r0
     882:	6928      	ldr	r0, [r5, #16]
     884:	f00b f91a 	bl	babc <__addsf3>
     888:	6128      	str	r0, [r5, #16]
      if (modules[x].getLowTemp() < lowestPackTemp)
     88a:	4620      	mov	r0, r4
     88c:	f7ff ff08 	bl	6a0 <BMSModule::getLowTemp()>
     890:	6aa9      	ldr	r1, [r5, #40]	; 0x28
     892:	f00b fbb9 	bl	c008 <__aeabi_fcmplt>
     896:	bb20      	cbnz	r0, 8e2 <BMSModuleManager::getAllVoltTemp()+0x8e>
      if (modules[x].getHighTemp() > highestPackTemp)
     898:	4620      	mov	r0, r4
     89a:	f7ff ff05 	bl	6a8 <BMSModule::getHighTemp()>
     89e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
     8a0:	f00b fbd0 	bl	c044 <__aeabi_fcmpgt>
     8a4:	2800      	cmp	r0, #0
     8a6:	d0df      	beq.n	868 <BMSModuleManager::getAllVoltTemp()+0x14>
        highestPackTemp = modules[x].getHighTemp();
     8a8:	4620      	mov	r0, r4
     8aa:	f7ff fefd 	bl	6a8 <BMSModule::getHighTemp()>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     8ae:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
     8b2:	42a6      	cmp	r6, r4
        highestPackTemp = modules[x].getHighTemp();
     8b4:	62e8      	str	r0, [r5, #44]	; 0x2c
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     8b6:	d1db      	bne.n	870 <BMSModuleManager::getAllVoltTemp()+0x1c>
  packVolt = packVolt / Pstring;
     8b8:	6968      	ldr	r0, [r5, #20]
     8ba:	f00b f9b3 	bl	bc24 <__aeabi_i2f>
     8be:	4601      	mov	r1, r0
     8c0:	6928      	ldr	r0, [r5, #16]
     8c2:	f00b fab7 	bl	be34 <__aeabi_fdiv>
  if (packVolt > highestPackVolt)
     8c6:	6a69      	ldr	r1, [r5, #36]	; 0x24
  packVolt = packVolt / Pstring;
     8c8:	6128      	str	r0, [r5, #16]
     8ca:	4604      	mov	r4, r0
  if (packVolt > highestPackVolt)
     8cc:	f00b fbba 	bl	c044 <__aeabi_fcmpgt>
     8d0:	b100      	cbz	r0, 8d4 <BMSModuleManager::getAllVoltTemp()+0x80>
    highestPackVolt = packVolt;
     8d2:	626c      	str	r4, [r5, #36]	; 0x24
  if (packVolt < lowestPackVolt)
     8d4:	6a29      	ldr	r1, [r5, #32]
     8d6:	4620      	mov	r0, r4
     8d8:	f00b fb96 	bl	c008 <__aeabi_fcmplt>
     8dc:	b100      	cbz	r0, 8e0 <BMSModuleManager::getAllVoltTemp()+0x8c>
    lowestPackVolt = packVolt;
     8de:	622c      	str	r4, [r5, #32]
}
     8e0:	bd70      	pop	{r4, r5, r6, pc}
        lowestPackTemp = modules[x].getLowTemp();
     8e2:	4620      	mov	r0, r4
     8e4:	f7ff fedc 	bl	6a0 <BMSModule::getLowTemp()>
     8e8:	62a8      	str	r0, [r5, #40]	; 0x28
     8ea:	e7d5      	b.n	898 <BMSModuleManager::getAllVoltTemp()+0x44>

000008ec <BMSModuleManager::balanceCells()>:
{
     8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     8f0:	f100 0308 	add.w	r3, r0, #8
     8f4:	b087      	sub	sp, #28
     8f6:	4607      	mov	r7, r0
    msg.buf[c] = 0;
     8f8:	2208      	movs	r2, #8
     8fa:	4618      	mov	r0, r3
     8fc:	2100      	movs	r1, #0
     8fe:	4699      	mov	r9, r3
     900:	9305      	str	r3, [sp, #20]
     902:	f507 7b06 	add.w	fp, r7, #536	; 0x218
     906:	f00c fa63 	bl	cdd0 <memset>
     90a:	f507 5500 	add.w	r5, r7, #8192	; 0x2000
     90e:	f107 0311 	add.w	r3, r7, #17
     912:	9301      	str	r3, [sp, #4]
     914:	3518      	adds	r5, #24
     916:	46d8      	mov	r8, fp
     918:	f8cd b010 	str.w	fp, [sp, #16]
     91c:	9702      	str	r7, [sp, #8]
     91e:	e006      	b.n	92e <BMSModuleManager::balanceCells()+0x42>
  for (int y = 1; y <= 9; y++)
     920:	9b01      	ldr	r3, [sp, #4]
     922:	f109 0901 	add.w	r9, r9, #1
     926:	454b      	cmp	r3, r9
     928:	f508 78f0 	add.w	r8, r8, #480	; 0x1e0
     92c:	d04e      	beq.n	9cc <BMSModuleManager::balanceCells()+0xe0>
    if (modules[y].isExisting() == 1)
     92e:	4640      	mov	r0, r8
     930:	f7ff fef8 	bl	724 <BMSModule::isExisting()>
     934:	2800      	cmp	r0, #0
     936:	d0f3      	beq.n	920 <BMSModuleManager::balanceCells()+0x34>
     938:	9b02      	ldr	r3, [sp, #8]
          balance = balance | (1 << (i - 1));
     93a:	f8dd b010 	ldr.w	fp, [sp, #16]
     93e:	f8cd 900c 	str.w	r9, [sp, #12]
      for (int i = 1; i < 9; i++)
     942:	2601      	movs	r6, #1
      int balance = 0;
     944:	2700      	movs	r7, #0
     946:	f503 5a00 	add.w	sl, r3, #8192	; 0x2000
    msg.buf[c] = 0;
     94a:	46d9      	mov	r9, fp
  float avg = 0.0f;
     94c:	2400      	movs	r4, #0
     94e:	e003      	b.n	958 <BMSModuleManager::balanceCells()+0x6c>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     950:	f509 79f0 	add.w	r9, r9, #480	; 0x1e0
     954:	454d      	cmp	r5, r9
     956:	d010      	beq.n	97a <BMSModuleManager::balanceCells()+0x8e>
    if (modules[x].isExisting())
     958:	4648      	mov	r0, r9
     95a:	f7ff fee3 	bl	724 <BMSModule::isExisting()>
     95e:	2800      	cmp	r0, #0
     960:	d0f6      	beq.n	950 <BMSModuleManager::balanceCells()+0x64>
      avg += modules[x].getAverageV();
     962:	4648      	mov	r0, r9
     964:	f7ff fe5e 	bl	624 <BMSModule::getAverageV()>
     968:	4601      	mov	r1, r0
     96a:	4620      	mov	r0, r4
     96c:	f00b f8a6 	bl	babc <__addsf3>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     970:	f509 79f0 	add.w	r9, r9, #480	; 0x1e0
     974:	454d      	cmp	r5, r9
      avg += modules[x].getAverageV();
     976:	4604      	mov	r4, r0
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     978:	d1ee      	bne.n	958 <BMSModuleManager::balanceCells()+0x6c>
  avg = avg / (float)numFoundModules;
     97a:	f8da 001c 	ldr.w	r0, [sl, #28]
     97e:	f00b f951 	bl	bc24 <__aeabi_i2f>
     982:	4601      	mov	r1, r0
     984:	4620      	mov	r0, r4
     986:	f00b fa55 	bl	be34 <__aeabi_fdiv>
        if (getAvgCellVolt() < modules[y].getCellVoltage(i))
     98a:	4631      	mov	r1, r6
  avg = avg / (float)numFoundModules;
     98c:	4604      	mov	r4, r0
        if (getAvgCellVolt() < modules[y].getCellVoltage(i))
     98e:	4640      	mov	r0, r8
     990:	f7ff fdfe 	bl	590 <BMSModule::getCellVoltage(int)>
     994:	4621      	mov	r1, r4
     996:	f00b fb55 	bl	c044 <__aeabi_fcmpgt>
     99a:	b120      	cbz	r0, 9a6 <BMSModuleManager::balanceCells()+0xba>
          balance = balance | (1 << (i - 1));
     99c:	1e73      	subs	r3, r6, #1
     99e:	2201      	movs	r2, #1
     9a0:	fa02 f303 	lsl.w	r3, r2, r3
     9a4:	431f      	orrs	r7, r3
      for (int i = 1; i < 9; i++)
     9a6:	3601      	adds	r6, #1
     9a8:	2e09      	cmp	r6, #9
     9aa:	d1ce      	bne.n	94a <BMSModuleManager::balanceCells()+0x5e>
      if (y == 9) // hack for missing module #8
     9ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
     9b0:	9b02      	ldr	r3, [sp, #8]
     9b2:	eba9 0303 	sub.w	r3, r9, r3
     9b6:	2b10      	cmp	r3, #16
     9b8:	d00c      	beq.n	9d4 <BMSModuleManager::balanceCells()+0xe8>
  for (int y = 1; y <= 9; y++)
     9ba:	9b01      	ldr	r3, [sp, #4]
        msg.buf[y - 1] = balance;
     9bc:	f889 7000 	strb.w	r7, [r9]
  for (int y = 1; y <= 9; y++)
     9c0:	f109 0901 	add.w	r9, r9, #1
     9c4:	454b      	cmp	r3, r9
     9c6:	f508 78f0 	add.w	r8, r8, #480	; 0x1e0
     9ca:	d1b0      	bne.n	92e <BMSModuleManager::balanceCells()+0x42>
     9cc:	f8dd b010 	ldr.w	fp, [sp, #16]
     9d0:	9f02      	ldr	r7, [sp, #8]
     9d2:	e004      	b.n	9de <BMSModuleManager::balanceCells()+0xf2>
        msg.buf[y - 2] = balance;
     9d4:	463b      	mov	r3, r7
     9d6:	9f02      	ldr	r7, [sp, #8]
     9d8:	f8dd b010 	ldr.w	fp, [sp, #16]
     9dc:	73fb      	strb	r3, [r7, #15]
  msg.id = 0x300;
     9de:	f44f 7240 	mov.w	r2, #768	; 0x300
  msg.len = 8;
     9e2:	2308      	movs	r3, #8
  msg.id = 0x300;
     9e4:	603a      	str	r2, [r7, #0]
  msg.len = 8;
     9e6:	71fb      	strb	r3, [r7, #7]
     9e8:	211a      	movs	r1, #26
     9ea:	4872      	ldr	r0, [pc, #456]	; (bb4 <BMSModuleManager::balanceCells()+0x2c8>)
     9ec:	f00a fa8e 	bl	af0c <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
     9f0:	2300      	movs	r3, #0
     9f2:	2210      	movs	r2, #16
     9f4:	6839      	ldr	r1, [r7, #0]
     9f6:	4870      	ldr	r0, [pc, #448]	; (bb8 <BMSModuleManager::balanceCells()+0x2cc>)
     9f8:	f007 fdf6 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     9fc:	2104      	movs	r1, #4
     9fe:	486f      	ldr	r0, [pc, #444]	; (bbc <BMSModuleManager::balanceCells()+0x2d0>)
     a00:	f00a fa84 	bl	af0c <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     a04:	486c      	ldr	r0, [pc, #432]	; (bb8 <BMSModuleManager::balanceCells()+0x2cc>)
     a06:	f007 fdd7 	bl	85b8 <Print::println()>
  for (byte i = 0; i < msg.len; i++)
     a0a:	79fb      	ldrb	r3, [r7, #7]
     a0c:	b323      	cbz	r3, a58 <BMSModuleManager::balanceCells()+0x16c>
     a0e:	2500      	movs	r5, #0
     a10:	f8df 81ac 	ldr.w	r8, [pc, #428]	; bc0 <BMSModuleManager::balanceCells()+0x2d4>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     a14:	4e68      	ldr	r6, [pc, #416]	; (bb8 <BMSModuleManager::balanceCells()+0x2cc>)
     a16:	462c      	mov	r4, r5
     a18:	2109      	movs	r1, #9
     a1a:	4640      	mov	r0, r8
     a1c:	f00a fa76 	bl	af0c <usb_serial_write>
     a20:	2300      	movs	r3, #0
     a22:	220a      	movs	r2, #10
     a24:	4621      	mov	r1, r4
     a26:	4630      	mov	r0, r6
    SERIALCONSOLE.print(msg.buf[i], BIN);
     a28:	443c      	add	r4, r7
     a2a:	f007 fddd 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     a2e:	2105      	movs	r1, #5
     a30:	4864      	ldr	r0, [pc, #400]	; (bc4 <BMSModuleManager::balanceCells()+0x2d8>)
     a32:	f00a fa6b 	bl	af0c <usb_serial_write>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     a36:	7a21      	ldrb	r1, [r4, #8]
     a38:	2300      	movs	r3, #0
     a3a:	2202      	movs	r2, #2
     a3c:	4630      	mov	r0, r6
     a3e:	f007 fdd3 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     a42:	2020      	movs	r0, #32
     a44:	f00a fae6 	bl	b014 <usb_serial_putchar>
	size_t println(char c)				{ return print(c) + println(); }
     a48:	4630      	mov	r0, r6
     a4a:	f007 fdb5 	bl	85b8 <Print::println()>
  for (byte i = 0; i < msg.len; i++)
     a4e:	3501      	adds	r5, #1
     a50:	79fb      	ldrb	r3, [r7, #7]
     a52:	b2ec      	uxtb	r4, r5
     a54:	42a3      	cmp	r3, r4
     a56:	d8df      	bhi.n	a18 <BMSModuleManager::balanceCells()+0x12c>
  Can0.write(msg);
     a58:	4639      	mov	r1, r7
     a5a:	485b      	ldr	r0, [pc, #364]	; (bc8 <BMSModuleManager::balanceCells()+0x2dc>)
     a5c:	f006 fbce 	bl	71fc <FlexCAN::write(CAN_message_t const&)>
    msg.buf[c] = 0;
     a60:	9805      	ldr	r0, [sp, #20]
     a62:	2208      	movs	r2, #8
     a64:	2100      	movs	r1, #0
     a66:	f00c f9b3 	bl	cdd0 <memset>
     a6a:	1dfb      	adds	r3, r7, #7
     a6c:	f507 5897 	add.w	r8, r7, #4832	; 0x12e0
     a70:	f507 5500 	add.w	r5, r7, #8192	; 0x2000
     a74:	9301      	str	r3, [sp, #4]
     a76:	230b      	movs	r3, #11
  float avg = 0.0f;
     a78:	9702      	str	r7, [sp, #8]
     a7a:	f108 0818 	add.w	r8, r8, #24
     a7e:	3518      	adds	r5, #24
     a80:	461f      	mov	r7, r3
     a82:	e007      	b.n	a94 <BMSModuleManager::balanceCells()+0x1a8>
  for (int y = 10; y <= 15; y++)
     a84:	2f10      	cmp	r7, #16
     a86:	d04c      	beq.n	b22 <BMSModuleManager::balanceCells()+0x236>
     a88:	9b01      	ldr	r3, [sp, #4]
     a8a:	3301      	adds	r3, #1
     a8c:	f508 78f0 	add.w	r8, r8, #480	; 0x1e0
     a90:	3701      	adds	r7, #1
     a92:	9301      	str	r3, [sp, #4]
    if (modules[y].isExisting() == 1)
     a94:	4640      	mov	r0, r8
     a96:	f7ff fe45 	bl	724 <BMSModule::isExisting()>
     a9a:	2800      	cmp	r0, #0
     a9c:	d0f2      	beq.n	a84 <BMSModuleManager::balanceCells()+0x198>
     a9e:	9b02      	ldr	r3, [sp, #8]
          balance = balance | (1 << (i - 1)); // 8 cell internal module bitshift correctly
     aa0:	9703      	str	r7, [sp, #12]
      for (int i = 1; i < 9; i++)
     aa2:	2601      	movs	r6, #1
      int balance = 0;
     aa4:	f04f 0900 	mov.w	r9, #0
     aa8:	f503 5a00 	add.w	sl, r3, #8192	; 0x2000
    msg.buf[c] = 0;
     aac:	465f      	mov	r7, fp
  float avg = 0.0f;
     aae:	2400      	movs	r4, #0
     ab0:	e003      	b.n	aba <BMSModuleManager::balanceCells()+0x1ce>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     ab2:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
     ab6:	42bd      	cmp	r5, r7
     ab8:	d010      	beq.n	adc <BMSModuleManager::balanceCells()+0x1f0>
    if (modules[x].isExisting())
     aba:	4638      	mov	r0, r7
     abc:	f7ff fe32 	bl	724 <BMSModule::isExisting()>
     ac0:	2800      	cmp	r0, #0
     ac2:	d0f6      	beq.n	ab2 <BMSModuleManager::balanceCells()+0x1c6>
      avg += modules[x].getAverageV();
     ac4:	4638      	mov	r0, r7
     ac6:	f7ff fdad 	bl	624 <BMSModule::getAverageV()>
     aca:	4601      	mov	r1, r0
     acc:	4620      	mov	r0, r4
     ace:	f00a fff5 	bl	babc <__addsf3>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     ad2:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
     ad6:	42bd      	cmp	r5, r7
      avg += modules[x].getAverageV();
     ad8:	4604      	mov	r4, r0
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     ada:	d1ee      	bne.n	aba <BMSModuleManager::balanceCells()+0x1ce>
  avg = avg / (float)numFoundModules;
     adc:	f8da 001c 	ldr.w	r0, [sl, #28]
     ae0:	f00b f8a0 	bl	bc24 <__aeabi_i2f>
     ae4:	4601      	mov	r1, r0
     ae6:	4620      	mov	r0, r4
     ae8:	f00b f9a4 	bl	be34 <__aeabi_fdiv>
        if (getAvgCellVolt() < modules[y].getCellVoltage(i))
     aec:	4631      	mov	r1, r6
  avg = avg / (float)numFoundModules;
     aee:	4604      	mov	r4, r0
        if (getAvgCellVolt() < modules[y].getCellVoltage(i))
     af0:	4640      	mov	r0, r8
     af2:	f7ff fd4d 	bl	590 <BMSModule::getCellVoltage(int)>
     af6:	4621      	mov	r1, r4
     af8:	f00b faa4 	bl	c044 <__aeabi_fcmpgt>
     afc:	b128      	cbz	r0, b0a <BMSModuleManager::balanceCells()+0x21e>
          balance = balance | (1 << (i - 1)); // 8 cell internal module bitshift correctly
     afe:	1e73      	subs	r3, r6, #1
     b00:	2201      	movs	r2, #1
     b02:	fa02 f303 	lsl.w	r3, r2, r3
     b06:	ea49 0903 	orr.w	r9, r9, r3
      for (int i = 1; i < 9; i++)
     b0a:	3601      	adds	r6, #1
     b0c:	2e09      	cmp	r6, #9
     b0e:	d1cd      	bne.n	aac <BMSModuleManager::balanceCells()+0x1c0>
     b10:	9f03      	ldr	r7, [sp, #12]
      if (y > 11) // hack for missing module #12
     b12:	1e7b      	subs	r3, r7, #1
     b14:	2b0b      	cmp	r3, #11
        msg.buf[y - 11] = balance;
     b16:	9b01      	ldr	r3, [sp, #4]
      if (y > 11) // hack for missing module #12
     b18:	d949      	bls.n	bae <BMSModuleManager::balanceCells()+0x2c2>
  for (int y = 10; y <= 15; y++)
     b1a:	2f10      	cmp	r7, #16
        msg.buf[y - 11] = balance;
     b1c:	f883 9000 	strb.w	r9, [r3]
  for (int y = 10; y <= 15; y++)
     b20:	d1b2      	bne.n	a88 <BMSModuleManager::balanceCells()+0x19c>
  msg.id = 0x310;
     b22:	463c      	mov	r4, r7
     b24:	9f02      	ldr	r7, [sp, #8]
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     b26:	4823      	ldr	r0, [pc, #140]	; (bb4 <BMSModuleManager::balanceCells()+0x2c8>)
     b28:	f44f 7244 	mov.w	r2, #784	; 0x310
  msg.len = 5;
     b2c:	2305      	movs	r3, #5
     b2e:	211a      	movs	r1, #26
  msg.id = 0x310;
     b30:	603a      	str	r2, [r7, #0]
  msg.len = 5;
     b32:	71fb      	strb	r3, [r7, #7]
     b34:	f00a f9ea 	bl	af0c <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
     b38:	2300      	movs	r3, #0
     b3a:	4622      	mov	r2, r4
     b3c:	6839      	ldr	r1, [r7, #0]
     b3e:	481e      	ldr	r0, [pc, #120]	; (bb8 <BMSModuleManager::balanceCells()+0x2cc>)
     b40:	f007 fd52 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     b44:	2104      	movs	r1, #4
     b46:	481d      	ldr	r0, [pc, #116]	; (bbc <BMSModuleManager::balanceCells()+0x2d0>)
     b48:	f00a f9e0 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
     b4c:	481a      	ldr	r0, [pc, #104]	; (bb8 <BMSModuleManager::balanceCells()+0x2cc>)
     b4e:	f007 fd33 	bl	85b8 <Print::println()>
  for (byte i = 0; i < msg.len; i++)
     b52:	79fb      	ldrb	r3, [r7, #7]
     b54:	b323      	cbz	r3, ba0 <BMSModuleManager::balanceCells()+0x2b4>
     b56:	2500      	movs	r5, #0
     b58:	f8df 8064 	ldr.w	r8, [pc, #100]	; bc0 <BMSModuleManager::balanceCells()+0x2d4>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     b5c:	4e16      	ldr	r6, [pc, #88]	; (bb8 <BMSModuleManager::balanceCells()+0x2cc>)
     b5e:	462c      	mov	r4, r5
     b60:	2109      	movs	r1, #9
     b62:	4640      	mov	r0, r8
     b64:	f00a f9d2 	bl	af0c <usb_serial_write>
     b68:	2300      	movs	r3, #0
     b6a:	220a      	movs	r2, #10
     b6c:	4621      	mov	r1, r4
     b6e:	4630      	mov	r0, r6
    SERIALCONSOLE.print(msg.buf[i], BIN);
     b70:	443c      	add	r4, r7
     b72:	f007 fd39 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     b76:	2105      	movs	r1, #5
     b78:	4812      	ldr	r0, [pc, #72]	; (bc4 <BMSModuleManager::balanceCells()+0x2d8>)
     b7a:	f00a f9c7 	bl	af0c <usb_serial_write>
	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     b7e:	7a21      	ldrb	r1, [r4, #8]
     b80:	2300      	movs	r3, #0
     b82:	2202      	movs	r2, #2
     b84:	4630      	mov	r0, r6
     b86:	f007 fd2f 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
     b8a:	2020      	movs	r0, #32
     b8c:	f00a fa42 	bl	b014 <usb_serial_putchar>
	size_t println(char c)				{ return print(c) + println(); }
     b90:	4630      	mov	r0, r6
     b92:	f007 fd11 	bl	85b8 <Print::println()>
  for (byte i = 0; i < msg.len; i++)
     b96:	3501      	adds	r5, #1
     b98:	79fb      	ldrb	r3, [r7, #7]
     b9a:	b2ec      	uxtb	r4, r5
     b9c:	42a3      	cmp	r3, r4
     b9e:	d8df      	bhi.n	b60 <BMSModuleManager::balanceCells()+0x274>
  Can0.write(msg);
     ba0:	4809      	ldr	r0, [pc, #36]	; (bc8 <BMSModuleManager::balanceCells()+0x2dc>)
     ba2:	4639      	mov	r1, r7
}
     ba4:	b007      	add	sp, #28
     ba6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Can0.write(msg);
     baa:	f006 bb27 	b.w	71fc <FlexCAN::write(CAN_message_t const&)>
        msg.buf[y - 10] = balance;
     bae:	f883 9001 	strb.w	r9, [r3, #1]
  for (int y = 10; y <= 15; y++)
     bb2:	e769      	b.n	a88 <BMSModuleManager::balanceCells()+0x19c>
     bb4:	00012a0c 	.word	0x00012a0c
     bb8:	1fff880c 	.word	0x1fff880c
     bbc:	00012a28 	.word	0x00012a28
     bc0:	00012a30 	.word	0x00012a30
     bc4:	00012a3c 	.word	0x00012a3c
     bc8:	1fffb2e4 	.word	0x1fffb2e4

00000bcc <BMSModuleManager::getLowCellVolt()>:
{
     bcc:	b570      	push	{r4, r5, r6, lr}
  LowCellVolt = 5.0;
     bce:	4b12      	ldr	r3, [pc, #72]	; (c18 <BMSModuleManager::getLowCellVolt()+0x4c>)
     bd0:	6183      	str	r3, [r0, #24]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     bd2:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
{
     bd6:	4606      	mov	r6, r0
     bd8:	f500 7406 	add.w	r4, r0, #536	; 0x218
     bdc:	3518      	adds	r5, #24
     bde:	e003      	b.n	be8 <BMSModuleManager::getLowCellVolt()+0x1c>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     be0:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
     be4:	42ac      	cmp	r4, r5
     be6:	d014      	beq.n	c12 <BMSModuleManager::getLowCellVolt()+0x46>
    if (modules[x].isExisting())
     be8:	4620      	mov	r0, r4
     bea:	f7ff fd9b 	bl	724 <BMSModule::isExisting()>
     bee:	2800      	cmp	r0, #0
     bf0:	d0f6      	beq.n	be0 <BMSModuleManager::getLowCellVolt()+0x14>
      if (modules[x].getLowCellV() < LowCellVolt)
     bf2:	4620      	mov	r0, r4
     bf4:	f7ff fcd2 	bl	59c <BMSModule::getLowCellV()>
     bf8:	69b1      	ldr	r1, [r6, #24]
     bfa:	f00b fa05 	bl	c008 <__aeabi_fcmplt>
     bfe:	2800      	cmp	r0, #0
     c00:	d0ee      	beq.n	be0 <BMSModuleManager::getLowCellVolt()+0x14>
        LowCellVolt = modules[x].getLowCellV();
     c02:	4620      	mov	r0, r4
     c04:	f7ff fcca 	bl	59c <BMSModule::getLowCellV()>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     c08:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
     c0c:	42ac      	cmp	r4, r5
        LowCellVolt = modules[x].getLowCellV();
     c0e:	61b0      	str	r0, [r6, #24]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     c10:	d1ea      	bne.n	be8 <BMSModuleManager::getLowCellVolt()+0x1c>
}
     c12:	69b0      	ldr	r0, [r6, #24]
     c14:	bd70      	pop	{r4, r5, r6, pc}
     c16:	bf00      	nop
     c18:	40a00000 	.word	0x40a00000

00000c1c <BMSModuleManager::getHighCellVolt()>:
{
     c1c:	b570      	push	{r4, r5, r6, lr}
  HighCellVolt = 0.0;
     c1e:	2300      	movs	r3, #0
     c20:	f500 5500 	add.w	r5, r0, #8192	; 0x2000
{
     c24:	4606      	mov	r6, r0
  HighCellVolt = 0.0;
     c26:	61c3      	str	r3, [r0, #28]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     c28:	f500 7406 	add.w	r4, r0, #536	; 0x218
     c2c:	3518      	adds	r5, #24
     c2e:	e003      	b.n	c38 <BMSModuleManager::getHighCellVolt()+0x1c>
     c30:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
     c34:	42ac      	cmp	r4, r5
     c36:	d014      	beq.n	c62 <BMSModuleManager::getHighCellVolt()+0x46>
    if (modules[x].isExisting())
     c38:	4620      	mov	r0, r4
     c3a:	f7ff fd73 	bl	724 <BMSModule::isExisting()>
     c3e:	2800      	cmp	r0, #0
     c40:	d0f6      	beq.n	c30 <BMSModuleManager::getHighCellVolt()+0x14>
      if (modules[x].getHighCellV() > HighCellVolt)
     c42:	4620      	mov	r0, r4
     c44:	f7ff fcc8 	bl	5d8 <BMSModule::getHighCellV()>
     c48:	69f1      	ldr	r1, [r6, #28]
     c4a:	f00b f9fb 	bl	c044 <__aeabi_fcmpgt>
     c4e:	2800      	cmp	r0, #0
     c50:	d0ee      	beq.n	c30 <BMSModuleManager::getHighCellVolt()+0x14>
        HighCellVolt = modules[x].getHighCellV();
     c52:	4620      	mov	r0, r4
     c54:	f7ff fcc0 	bl	5d8 <BMSModule::getHighCellV()>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     c58:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
     c5c:	42ac      	cmp	r4, r5
        HighCellVolt = modules[x].getHighCellV();
     c5e:	61f0      	str	r0, [r6, #28]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     c60:	d1ea      	bne.n	c38 <BMSModuleManager::getHighCellVolt()+0x1c>
}
     c62:	69f0      	ldr	r0, [r6, #28]
     c64:	bd70      	pop	{r4, r5, r6, pc}
     c66:	bf00      	nop

00000c68 <BMSModuleManager::getPackVoltage()>:
}
     c68:	6900      	ldr	r0, [r0, #16]
     c6a:	4770      	bx	lr

00000c6c <BMSModuleManager::setPstrings(int)>:
  Pstring = Pstrings;
     c6c:	6141      	str	r1, [r0, #20]
}
     c6e:	4770      	bx	lr

00000c70 <BMSModuleManager::setSensors(int, float)>:
{
     c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t print(int n)				{ return print((long)n); }
     c74:	4e14      	ldr	r6, [pc, #80]	; (cc8 <BMSModuleManager::setSensors(int, float)+0x58>)
     c76:	4688      	mov	r8, r1
     c78:	4617      	mov	r7, r2
     c7a:	f500 7406 	add.w	r4, r0, #536	; 0x218
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     c7e:	2501      	movs	r5, #1
     c80:	e004      	b.n	c8c <BMSModuleManager::setSensors(int, float)+0x1c>
     c82:	3501      	adds	r5, #1
     c84:	2d11      	cmp	r5, #17
     c86:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
     c8a:	d01b      	beq.n	cc4 <BMSModuleManager::setSensors(int, float)+0x54>
    if (modules[x].isExisting())
     c8c:	4620      	mov	r0, r4
     c8e:	f7ff fd49 	bl	724 <BMSModule::isExisting()>
     c92:	2800      	cmp	r0, #0
     c94:	d0f5      	beq.n	c82 <BMSModuleManager::setSensors(int, float)+0x12>
     c96:	4629      	mov	r1, r5
     c98:	4630      	mov	r0, r6
     c9a:	f007 fc85 	bl	85a8 <Print::print(long)>
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
     c9e:	4630      	mov	r0, r6
     ca0:	f007 fc8a 	bl	85b8 <Print::println()>
     ca4:	2078      	movs	r0, #120	; 0x78
     ca6:	f00a f9b5 	bl	b014 <usb_serial_putchar>
      modules[x].settempsensor(sensor);
     caa:	4620      	mov	r0, r4
     cac:	4641      	mov	r1, r8
     cae:	f7ff fd3d 	bl	72c <BMSModule::settempsensor(int)>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     cb2:	3501      	adds	r5, #1
      modules[x].setIgnoreCell(Ignore);
     cb4:	4620      	mov	r0, r4
     cb6:	4639      	mov	r1, r7
     cb8:	f7ff fd44 	bl	744 <BMSModule::setIgnoreCell(float)>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     cbc:	2d11      	cmp	r5, #17
     cbe:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
     cc2:	d1e3      	bne.n	c8c <BMSModuleManager::setSensors(int, float)+0x1c>
}
     cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     cc8:	1fff880c 	.word	0x1fff880c

00000ccc <BMSModuleManager::getAvgTemperature()>:
{
     ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  highTemp = -999.0f;
     cd0:	4b2a      	ldr	r3, [pc, #168]	; (d7c <BMSModuleManager::getAvgTemperature()+0xb0>)
     cd2:	6303      	str	r3, [r0, #48]	; 0x30
  numFoundModules = 0;
     cd4:	f500 5800 	add.w	r8, r0, #8192	; 0x2000
  lowTemp = 999.0f;
     cd8:	4a29      	ldr	r2, [pc, #164]	; (d80 <BMSModuleManager::getAvgTemperature()+0xb4>)
     cda:	6342      	str	r2, [r0, #52]	; 0x34
  float avg = 0.0f;
     cdc:	2700      	movs	r7, #0
  numFoundModules = 0;
     cde:	2300      	movs	r3, #0
     ce0:	4645      	mov	r5, r8
{
     ce2:	4606      	mov	r6, r0
  numFoundModules = 0;
     ce4:	f8c8 301c 	str.w	r3, [r8, #28]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     ce8:	f500 7406 	add.w	r4, r0, #536	; 0x218
     cec:	3518      	adds	r5, #24
      if (modules[x].getAvgTemp() > 0)
     cee:	46b9      	mov	r9, r7
     cf0:	e003      	b.n	cfa <BMSModuleManager::getAvgTemperature()+0x2e>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     cf2:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
     cf6:	42a5      	cmp	r5, r4
     cf8:	d031      	beq.n	d5e <BMSModuleManager::getAvgTemperature()+0x92>
    if (modules[x].isExisting())
     cfa:	4620      	mov	r0, r4
     cfc:	f7ff fd12 	bl	724 <BMSModule::isExisting()>
     d00:	2800      	cmp	r0, #0
     d02:	d0f6      	beq.n	cf2 <BMSModuleManager::getAvgTemperature()+0x26>
      if (modules[x].getAvgTemp() > 0)
     d04:	4620      	mov	r0, r4
     d06:	f7ff fcd3 	bl	6b0 <BMSModule::getAvgTemp()>
     d0a:	4649      	mov	r1, r9
     d0c:	f00b f99a 	bl	c044 <__aeabi_fcmpgt>
     d10:	4603      	mov	r3, r0
        avg += modules[x].getAvgTemp();
     d12:	4620      	mov	r0, r4
      if (modules[x].getAvgTemp() > 0)
     d14:	2b00      	cmp	r3, #0
     d16:	d0ec      	beq.n	cf2 <BMSModuleManager::getAvgTemperature()+0x26>
        numFoundModules++;
     d18:	f8d8 301c 	ldr.w	r3, [r8, #28]
     d1c:	3301      	adds	r3, #1
     d1e:	f8c8 301c 	str.w	r3, [r8, #28]
        avg += modules[x].getAvgTemp();
     d22:	f7ff fcc5 	bl	6b0 <BMSModule::getAvgTemp()>
     d26:	4601      	mov	r1, r0
     d28:	4638      	mov	r0, r7
     d2a:	f00a fec7 	bl	babc <__addsf3>
     d2e:	4607      	mov	r7, r0
        if (modules[x].getHighTemp() > highTemp)
     d30:	4620      	mov	r0, r4
     d32:	f7ff fcb9 	bl	6a8 <BMSModule::getHighTemp()>
     d36:	6b31      	ldr	r1, [r6, #48]	; 0x30
     d38:	f00b f984 	bl	c044 <__aeabi_fcmpgt>
     d3c:	b9c8      	cbnz	r0, d72 <BMSModuleManager::getAvgTemperature()+0xa6>
        if (modules[x].getLowTemp() < lowTemp)
     d3e:	4620      	mov	r0, r4
     d40:	f7ff fcae 	bl	6a0 <BMSModule::getLowTemp()>
     d44:	6b71      	ldr	r1, [r6, #52]	; 0x34
     d46:	f00b f95f 	bl	c008 <__aeabi_fcmplt>
     d4a:	2800      	cmp	r0, #0
     d4c:	d0d1      	beq.n	cf2 <BMSModuleManager::getAvgTemperature()+0x26>
          lowTemp = modules[x].getLowTemp();
     d4e:	4620      	mov	r0, r4
     d50:	f7ff fca6 	bl	6a0 <BMSModule::getLowTemp()>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     d54:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
     d58:	42a5      	cmp	r5, r4
          lowTemp = modules[x].getLowTemp();
     d5a:	6370      	str	r0, [r6, #52]	; 0x34
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     d5c:	d1cd      	bne.n	cfa <BMSModuleManager::getAvgTemperature()+0x2e>
  avg = avg / (float)(numFoundModules);
     d5e:	f8d8 001c 	ldr.w	r0, [r8, #28]
     d62:	f00a ff5f 	bl	bc24 <__aeabi_i2f>
     d66:	4601      	mov	r1, r0
     d68:	4638      	mov	r0, r7
     d6a:	f00b f863 	bl	be34 <__aeabi_fdiv>
}
     d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          highTemp = modules[x].getHighTemp();
     d72:	4620      	mov	r0, r4
     d74:	f7ff fc98 	bl	6a8 <BMSModule::getHighTemp()>
     d78:	6330      	str	r0, [r6, #48]	; 0x30
     d7a:	e7e0      	b.n	d3e <BMSModuleManager::getAvgTemperature()+0x72>
     d7c:	c479c000 	.word	0xc479c000
     d80:	4479c000 	.word	0x4479c000

00000d84 <BMSModuleManager::getHighTemperature()>:
}
     d84:	6b00      	ldr	r0, [r0, #48]	; 0x30
     d86:	4770      	bx	lr

00000d88 <BMSModuleManager::getLowTemperature()>:
}
     d88:	6b40      	ldr	r0, [r0, #52]	; 0x34
     d8a:	4770      	bx	lr

00000d8c <BMSModuleManager::getAvgCellVolt()>:
{
     d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d8e:	f500 5600 	add.w	r6, r0, #8192	; 0x2000
     d92:	4607      	mov	r7, r0
  float avg = 0.0f;
     d94:	2500      	movs	r5, #0
     d96:	f500 7406 	add.w	r4, r0, #536	; 0x218
     d9a:	3618      	adds	r6, #24
     d9c:	e003      	b.n	da6 <BMSModuleManager::getAvgCellVolt()+0x1a>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     d9e:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
     da2:	42b4      	cmp	r4, r6
     da4:	d010      	beq.n	dc8 <BMSModuleManager::getAvgCellVolt()+0x3c>
    if (modules[x].isExisting())
     da6:	4620      	mov	r0, r4
     da8:	f7ff fcbc 	bl	724 <BMSModule::isExisting()>
     dac:	2800      	cmp	r0, #0
     dae:	d0f6      	beq.n	d9e <BMSModuleManager::getAvgCellVolt()+0x12>
      avg += modules[x].getAverageV();
     db0:	4620      	mov	r0, r4
     db2:	f7ff fc37 	bl	624 <BMSModule::getAverageV()>
     db6:	4601      	mov	r1, r0
     db8:	4628      	mov	r0, r5
     dba:	f00a fe7f 	bl	babc <__addsf3>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     dbe:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
     dc2:	42b4      	cmp	r4, r6
      avg += modules[x].getAverageV();
     dc4:	4605      	mov	r5, r0
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     dc6:	d1ee      	bne.n	da6 <BMSModuleManager::getAvgCellVolt()+0x1a>
  avg = avg / (float)numFoundModules;
     dc8:	f507 5700 	add.w	r7, r7, #8192	; 0x2000
     dcc:	69f8      	ldr	r0, [r7, #28]
     dce:	f00a ff29 	bl	bc24 <__aeabi_i2f>
     dd2:	4601      	mov	r1, r0
     dd4:	4628      	mov	r0, r5
     dd6:	f00b f82d 	bl	be34 <__aeabi_fdiv>
}
     dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000ddc <BMSModuleManager::printPackDetails(int, bool)>:

void BMSModuleManager::printPackDetails(int digits, bool port)
{
     ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     de0:	b093      	sub	sp, #76	; 0x4c
     de2:	4606      	mov	r6, r0
     de4:	910e      	str	r1, [sp, #56]	; 0x38
  uint8_t faults;
  uint8_t alerts;
  uint8_t COV;
  uint8_t CUV;
  int cellNum = 0;
  if (port == 0)
     de6:	2a00      	cmp	r2, #0
     de8:	f040 810a 	bne.w	1000 <BMSModuleManager::printPackDetails(int, bool)+0x224>
  {
    Logger::console(0, "");
     dec:	4614      	mov	r4, r2
     dee:	4610      	mov	r0, r2
     df0:	49a3      	ldr	r1, [pc, #652]	; (1080 <BMSModuleManager::printPackDetails(int, bool)+0x2a4>)
     df2:	f000 ff1b 	bl	1c2c <Logger::console(bool, char*, ...)>
    Logger::console(0, "");
    Logger::console(0, "");
    Logger::console(0, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
     df6:	f506 5500 	add.w	r5, r6, #8192	; 0x2000
    Logger::console(0, "");
     dfa:	4620      	mov	r0, r4
     dfc:	49a0      	ldr	r1, [pc, #640]	; (1080 <BMSModuleManager::printPackDetails(int, bool)+0x2a4>)
     dfe:	f000 ff15 	bl	1c2c <Logger::console(bool, char*, ...)>
    Logger::console(0, "");
     e02:	4620      	mov	r0, r4
     e04:	499e      	ldr	r1, [pc, #632]	; (1080 <BMSModuleManager::printPackDetails(int, bool)+0x2a4>)
     e06:	f000 ff11 	bl	1c2c <Logger::console(bool, char*, ...)>
    Logger::console(0, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
     e0a:	f506 58f1 	add.w	r8, r6, #7712	; 0x1e20
  spack = 0;
     e0e:	626c      	str	r4, [r5, #36]	; 0x24
     e10:	f506 7406 	add.w	r4, r6, #536	; 0x218
    Logger::console(0, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
     e14:	f8d5 a01c 	ldr.w	sl, [r5, #28]
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
     e18:	f108 0818 	add.w	r8, r8, #24
  spack = 0;
     e1c:	4627      	mov	r7, r4
     e1e:	46a1      	mov	r9, r4
     e20:	e003      	b.n	e2a <BMSModuleManager::printPackDetails(int, bool)+0x4e>
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
     e22:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
     e26:	45b8      	cmp	r8, r7
     e28:	d00e      	beq.n	e48 <BMSModuleManager::printPackDetails(int, bool)+0x6c>
    if (modules[y].isExisting())
     e2a:	4638      	mov	r0, r7
     e2c:	f7ff fc7a 	bl	724 <BMSModule::isExisting()>
     e30:	2800      	cmp	r0, #0
     e32:	d0f6      	beq.n	e22 <BMSModuleManager::printPackDetails(int, bool)+0x46>
      spack = spack + modules[y].getscells();
     e34:	4638      	mov	r0, r7
     e36:	6a6c      	ldr	r4, [r5, #36]	; 0x24
     e38:	f7ff fc2e 	bl	698 <BMSModule::getscells()>
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
     e3c:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
      spack = spack + modules[y].getscells();
     e40:	4404      	add	r4, r0
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
     e42:	45b8      	cmp	r8, r7
      spack = spack + modules[y].getscells();
     e44:	626c      	str	r4, [r5, #36]	; 0x24
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
     e46:	d1f0      	bne.n	e2a <BMSModuleManager::printPackDetails(int, bool)+0x4e>
    Logger::console(0, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
     e48:	6930      	ldr	r0, [r6, #16]
     e4a:	f00a fd1b 	bl	b884 <__aeabi_f2d>
     e4e:	464c      	mov	r4, r9
     e50:	6973      	ldr	r3, [r6, #20]
  return spack;
     e52:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
    Logger::console(0, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
     e56:	930f      	str	r3, [sp, #60]	; 0x3c
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     e58:	f506 5900 	add.w	r9, r6, #8192	; 0x2000
    Logger::console(0, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
     e5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
     e60:	f109 0918 	add.w	r9, r9, #24
  float avg = 0.0f;
     e64:	f04f 0800 	mov.w	r8, #0
    Logger::console(0, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
     e68:	4627      	mov	r7, r4
     e6a:	e003      	b.n	e74 <BMSModuleManager::printPackDetails(int, bool)+0x98>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     e6c:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
     e70:	45b9      	cmp	r9, r7
     e72:	d010      	beq.n	e96 <BMSModuleManager::printPackDetails(int, bool)+0xba>
    if (modules[x].isExisting())
     e74:	4638      	mov	r0, r7
     e76:	f7ff fc55 	bl	724 <BMSModule::isExisting()>
     e7a:	2800      	cmp	r0, #0
     e7c:	d0f6      	beq.n	e6c <BMSModuleManager::printPackDetails(int, bool)+0x90>
      avg += modules[x].getAverageV();
     e7e:	4638      	mov	r0, r7
     e80:	f7ff fbd0 	bl	624 <BMSModule::getAverageV()>
     e84:	4601      	mov	r1, r0
     e86:	4640      	mov	r0, r8
     e88:	f00a fe18 	bl	babc <__addsf3>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     e8c:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
     e90:	45b9      	cmp	r9, r7
      avg += modules[x].getAverageV();
     e92:	4680      	mov	r8, r0
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     e94:	d1ee      	bne.n	e74 <BMSModuleManager::printPackDetails(int, bool)+0x98>
  avg = avg / (float)numFoundModules;
     e96:	69e8      	ldr	r0, [r5, #28]
     e98:	f00a fec4 	bl	bc24 <__aeabi_i2f>
     e9c:	4601      	mov	r1, r0
     e9e:	4640      	mov	r0, r8
     ea0:	f00a ffc8 	bl	be34 <__aeabi_fdiv>
    Logger::console(0, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
     ea4:	f00a fcee 	bl	b884 <__aeabi_f2d>
     ea8:	4680      	mov	r8, r0
                    Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVolt, HighCellVolt, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
     eaa:	4630      	mov	r0, r6
     eac:	69b5      	ldr	r5, [r6, #24]
     eae:	69f7      	ldr	r7, [r6, #28]
    Logger::console(0, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
     eb0:	4689      	mov	r9, r1
                    Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVolt, HighCellVolt, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
     eb2:	f7ff ff0b 	bl	ccc <BMSModuleManager::getAvgTemperature()>
    Logger::console(0, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
     eb6:	f00a fce5 	bl	b884 <__aeabi_f2d>
     eba:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
                    Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVolt, HighCellVolt, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
     ebe:	4629      	mov	r1, r5
     ec0:	4638      	mov	r0, r7
     ec2:	f00a fdf9 	bl	bab8 <__aeabi_fsub>
     ec6:	496f      	ldr	r1, [pc, #444]	; (1084 <BMSModuleManager::printPackDetails(int, bool)+0x2a8>)
     ec8:	f00a ff00 	bl	bccc <__aeabi_fmul>
    Logger::console(0, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
     ecc:	f00a fcda 	bl	b884 <__aeabi_f2d>
     ed0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
     ed4:	4638      	mov	r0, r7
     ed6:	f00a fcd5 	bl	b884 <__aeabi_f2d>
     eda:	e9cd 0108 	strd	r0, r1, [sp, #32]
     ede:	4628      	mov	r0, r5
     ee0:	f00a fcd0 	bl	b884 <__aeabi_f2d>
     ee4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
     ee8:	e9cd 0106 	strd	r0, r1, [sp, #24]
     eec:	990f      	ldr	r1, [sp, #60]	; 0x3c
     eee:	9100      	str	r1, [sp, #0]
     ef0:	e9cd 2302 	strd	r2, r3, [sp, #8]
     ef4:	4964      	ldr	r1, [pc, #400]	; (1088 <BMSModuleManager::printPackDetails(int, bool)+0x2ac>)
	size_t print(int n)				{ return print((long)n); }
     ef6:	4d65      	ldr	r5, [pc, #404]	; (108c <BMSModuleManager::printPackDetails(int, bool)+0x2b0>)
     ef8:	465b      	mov	r3, fp
     efa:	4652      	mov	r2, sl
     efc:	2000      	movs	r0, #0
     efe:	e9cd 8904 	strd	r8, r9, [sp, #16]
     f02:	f000 fe93 	bl	1c2c <Logger::console(bool, char*, ...)>
    Logger::console(0, "");
     f06:	495e      	ldr	r1, [pc, #376]	; (1080 <BMSModuleManager::printPackDetails(int, bool)+0x2a4>)
     f08:	2000      	movs	r0, #0
     f0a:	f000 fe8f 	bl	1c2c <Logger::console(bool, char*, ...)>
    for (int y = 1; y < MAX_MODULE_ADDR; y++)
     f0e:	f04f 0b01 	mov.w	fp, #1
  int cellNum = 0;
     f12:	2600      	movs	r6, #0
     f14:	e007      	b.n	f26 <BMSModuleManager::printPackDetails(int, bool)+0x14a>
    for (int y = 1; y < MAX_MODULE_ADDR; y++)
     f16:	f10b 0b01 	add.w	fp, fp, #1
     f1a:	f1bb 0f10 	cmp.w	fp, #16
     f1e:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
     f22:	f000 8225 	beq.w	1370 <BMSModuleManager::printPackDetails(int, bool)+0x594>
    {
      if (modules[y].isExisting())
     f26:	4620      	mov	r0, r4
     f28:	f7ff fbfc 	bl	724 <BMSModule::isExisting()>
     f2c:	2800      	cmp	r0, #0
     f2e:	d0f2      	beq.n	f16 <BMSModuleManager::printPackDetails(int, bool)+0x13a>
      {
        faults = modules[y].getFaults();
     f30:	4620      	mov	r0, r4
     f32:	f7ff fb1d 	bl	570 <BMSModule::getFaults()>
        alerts = modules[y].getAlerts();
     f36:	4620      	mov	r0, r4
     f38:	f7ff fb1e 	bl	578 <BMSModule::getAlerts()>
        COV = modules[y].getCOVCells();
     f3c:	4620      	mov	r0, r4
     f3e:	f7ff fb1f 	bl	580 <BMSModule::getCOVCells()>
        CUV = modules[y].getCUVCells();
     f42:	4620      	mov	r0, r4
     f44:	f7ff fb20 	bl	588 <BMSModule::getCUVCells()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     f48:	2108      	movs	r1, #8
     f4a:	4851      	ldr	r0, [pc, #324]	; (1090 <BMSModuleManager::printPackDetails(int, bool)+0x2b4>)
     f4c:	f009 ffde 	bl	af0c <usb_serial_write>
     f50:	4659      	mov	r1, fp
     f52:	4628      	mov	r0, r5
     f54:	f007 fb28 	bl	85a8 <Print::print(long)>

        SERIALCONSOLE.print("Module #");
        SERIALCONSOLE.print(y);
        if (y < 10)
     f58:	f1bb 0f09 	cmp.w	fp, #9
     f5c:	dc03      	bgt.n	f66 <BMSModuleManager::printPackDetails(int, bool)+0x18a>
     f5e:	484d      	ldr	r0, [pc, #308]	; (1094 <BMSModuleManager::printPackDetails(int, bool)+0x2b8>)
     f60:	2101      	movs	r1, #1
     f62:	f009 ffd3 	bl	af0c <usb_serial_write>
     f66:	2102      	movs	r1, #2
     f68:	484b      	ldr	r0, [pc, #300]	; (1098 <BMSModuleManager::printPackDetails(int, bool)+0x2bc>)
     f6a:	f8df a128 	ldr.w	sl, [pc, #296]	; 1094 <BMSModuleManager::printPackDetails(int, bool)+0x2b8>
     f6e:	f009 ffcd 	bl	af0c <usb_serial_write>
          SERIALCONSOLE.print(" ");
        SERIALCONSOLE.print("  ");
        SERIALCONSOLE.print(modules[y].getModuleVoltage(), digits);
     f72:	4620      	mov	r0, r4
     f74:	f7ff fba0 	bl	6b8 <BMSModule::getModuleVoltage()>
     f78:	f00a fc84 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     f7c:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
     f80:	9700      	str	r7, [sp, #0]
     f82:	4602      	mov	r2, r0
     f84:	460b      	mov	r3, r1
     f86:	4628      	mov	r0, r5
     f88:	f007 fb3a 	bl	8600 <Print::printFloat(double, unsigned char)>
     f8c:	2101      	movs	r1, #1
     f8e:	4843      	ldr	r0, [pc, #268]	; (109c <BMSModuleManager::printPackDetails(int, bool)+0x2c0>)
     f90:	f009 ffbc 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.print("V");
        if (modules[y].getCellsUsed() > 12)
     f94:	4620      	mov	r0, r4
     f96:	f7ff fae7 	bl	568 <BMSModule::getCellsUsed()>
     f9a:	280c      	cmp	r0, #12
     f9c:	f340 814e 	ble.w	123c <BMSModuleManager::printPackDetails(int, bool)+0x460>
     fa0:	46b1      	mov	r9, r6
        {
          for (int i = 1; i < 12; i++)
     fa2:	f04f 0801 	mov.w	r8, #1
     fa6:	e021      	b.n	fec <BMSModuleManager::printPackDetails(int, bool)+0x210>
     fa8:	2107      	movs	r1, #7
     faa:	483d      	ldr	r0, [pc, #244]	; (10a0 <BMSModuleManager::printPackDetails(int, bool)+0x2c4>)
     fac:	f009 ffae 	bl	af0c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
     fb0:	4649      	mov	r1, r9
     fb2:	4628      	mov	r0, r5
     fb4:	f007 faf8 	bl	85a8 <Print::print(long)>
     fb8:	2102      	movs	r1, #2
     fba:	483a      	ldr	r0, [pc, #232]	; (10a4 <BMSModuleManager::printPackDetails(int, bool)+0x2c8>)
     fbc:	f009 ffa6 	bl	af0c <usb_serial_write>
            if (cellNum < 10)
              SERIALCONSOLE.print(" ");
            SERIALCONSOLE.print("  Cell-");
            SERIALCONSOLE.print(1 + cellNum++);
            SERIALCONSOLE.print(": ");
            SERIALCONSOLE.print(modules[y].getCellVoltage(i), digits);
     fc0:	4641      	mov	r1, r8
     fc2:	4620      	mov	r0, r4
     fc4:	f7ff fae4 	bl	590 <BMSModule::getCellVoltage(int)>
     fc8:	f00a fc5c 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     fcc:	9700      	str	r7, [sp, #0]
     fce:	4602      	mov	r2, r0
     fd0:	460b      	mov	r3, r1
     fd2:	4628      	mov	r0, r5
     fd4:	f007 fb14 	bl	8600 <Print::printFloat(double, unsigned char)>
          for (int i = 1; i < 12; i++)
     fd8:	f108 0801 	add.w	r8, r8, #1
     fdc:	482f      	ldr	r0, [pc, #188]	; (109c <BMSModuleManager::printPackDetails(int, bool)+0x2c0>)
     fde:	2101      	movs	r1, #1
     fe0:	f009 ff94 	bl	af0c <usb_serial_write>
     fe4:	f1b8 0f0c 	cmp.w	r8, #12
     fe8:	f000 8159 	beq.w	129e <BMSModuleManager::printPackDetails(int, bool)+0x4c2>
            if (cellNum < 10)
     fec:	f1b9 0f09 	cmp.w	r9, #9
            SERIALCONSOLE.print(1 + cellNum++);
     ff0:	f109 0901 	add.w	r9, r9, #1
            if (cellNum < 10)
     ff4:	dcd8      	bgt.n	fa8 <BMSModuleManager::printPackDetails(int, bool)+0x1cc>
     ff6:	2101      	movs	r1, #1
     ff8:	4650      	mov	r0, sl
     ffa:	f009 ff87 	bl	af0c <usb_serial_write>
     ffe:	e7d3      	b.n	fa8 <BMSModuleManager::printPackDetails(int, bool)+0x1cc>
      }
    }
  }
  else
  {
    Logger::console(1, "");
    1000:	491f      	ldr	r1, [pc, #124]	; (1080 <BMSModuleManager::printPackDetails(int, bool)+0x2a4>)
    1002:	2001      	movs	r0, #1
    1004:	f000 fe12 	bl	1c2c <Logger::console(bool, char*, ...)>
    Logger::console(1, "");
    1008:	491d      	ldr	r1, [pc, #116]	; (1080 <BMSModuleManager::printPackDetails(int, bool)+0x2a4>)
    100a:	2001      	movs	r0, #1
    100c:	f000 fe0e 	bl	1c2c <Logger::console(bool, char*, ...)>
    Logger::console(1, "");
    Logger::console(1, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1010:	f506 5500 	add.w	r5, r6, #8192	; 0x2000
    Logger::console(1, "");
    1014:	491a      	ldr	r1, [pc, #104]	; (1080 <BMSModuleManager::printPackDetails(int, bool)+0x2a4>)
    1016:	2001      	movs	r0, #1
    1018:	f000 fe08 	bl	1c2c <Logger::console(bool, char*, ...)>
    Logger::console(1, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    101c:	f506 7406 	add.w	r4, r6, #536	; 0x218
  spack = 0;
    1020:	2300      	movs	r3, #0
    1022:	f506 58f1 	add.w	r8, r6, #7712	; 0x1e20
    Logger::console(1, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1026:	f8d5 a01c 	ldr.w	sl, [r5, #28]
  spack = 0;
    102a:	626b      	str	r3, [r5, #36]	; 0x24
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
    102c:	f108 0818 	add.w	r8, r8, #24
  spack = 0;
    1030:	4627      	mov	r7, r4
    1032:	46a1      	mov	r9, r4
    1034:	e003      	b.n	103e <BMSModuleManager::printPackDetails(int, bool)+0x262>
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
    1036:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
    103a:	45b8      	cmp	r8, r7
    103c:	d00e      	beq.n	105c <BMSModuleManager::printPackDetails(int, bool)+0x280>
    if (modules[y].isExisting())
    103e:	4638      	mov	r0, r7
    1040:	f7ff fb70 	bl	724 <BMSModule::isExisting()>
    1044:	2800      	cmp	r0, #0
    1046:	d0f6      	beq.n	1036 <BMSModuleManager::printPackDetails(int, bool)+0x25a>
      spack = spack + modules[y].getscells();
    1048:	4638      	mov	r0, r7
    104a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    104c:	f7ff fb24 	bl	698 <BMSModule::getscells()>
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
    1050:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
      spack = spack + modules[y].getscells();
    1054:	4404      	add	r4, r0
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
    1056:	45b8      	cmp	r8, r7
      spack = spack + modules[y].getscells();
    1058:	626c      	str	r4, [r5, #36]	; 0x24
  for (int y = 1; y < MAX_MODULE_ADDR; y++)
    105a:	d1f0      	bne.n	103e <BMSModuleManager::printPackDetails(int, bool)+0x262>
    Logger::console(1, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    105c:	6930      	ldr	r0, [r6, #16]
    105e:	f00a fc11 	bl	b884 <__aeabi_f2d>
    1062:	464c      	mov	r4, r9
    1064:	6973      	ldr	r3, [r6, #20]
  return spack;
    1066:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
    Logger::console(1, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    106a:	930f      	str	r3, [sp, #60]	; 0x3c
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    106c:	f506 5900 	add.w	r9, r6, #8192	; 0x2000
    Logger::console(1, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1070:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    1074:	f109 0918 	add.w	r9, r9, #24
  float avg = 0.0f;
    1078:	f04f 0800 	mov.w	r8, #0
    Logger::console(1, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    107c:	4627      	mov	r7, r4
    107e:	e017      	b.n	10b0 <BMSModuleManager::printPackDetails(int, bool)+0x2d4>
    1080:	00012a2c 	.word	0x00012a2c
    1084:	447a0000 	.word	0x447a0000
    1088:	00012ccc 	.word	0x00012ccc
    108c:	1fff880c 	.word	0x1fff880c
    1090:	00012d6c 	.word	0x00012d6c
    1094:	00012a40 	.word	0x00012a40
    1098:	00012a24 	.word	0x00012a24
    109c:	00012d78 	.word	0x00012d78
    10a0:	00012d7c 	.word	0x00012d7c
    10a4:	00012de8 	.word	0x00012de8
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    10a8:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
    10ac:	45b9      	cmp	r9, r7
    10ae:	d010      	beq.n	10d2 <BMSModuleManager::printPackDetails(int, bool)+0x2f6>
    if (modules[x].isExisting())
    10b0:	4638      	mov	r0, r7
    10b2:	f7ff fb37 	bl	724 <BMSModule::isExisting()>
    10b6:	2800      	cmp	r0, #0
    10b8:	d0f6      	beq.n	10a8 <BMSModuleManager::printPackDetails(int, bool)+0x2cc>
      avg += modules[x].getAverageV();
    10ba:	4638      	mov	r0, r7
    10bc:	f7ff fab2 	bl	624 <BMSModule::getAverageV()>
    10c0:	4601      	mov	r1, r0
    10c2:	4640      	mov	r0, r8
    10c4:	f00a fcfa 	bl	babc <__addsf3>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    10c8:	f507 77f0 	add.w	r7, r7, #480	; 0x1e0
    10cc:	45b9      	cmp	r9, r7
      avg += modules[x].getAverageV();
    10ce:	4680      	mov	r8, r0
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    10d0:	d1ee      	bne.n	10b0 <BMSModuleManager::printPackDetails(int, bool)+0x2d4>
  avg = avg / (float)numFoundModules;
    10d2:	69e8      	ldr	r0, [r5, #28]
    10d4:	f00a fda6 	bl	bc24 <__aeabi_i2f>
    10d8:	4601      	mov	r1, r0
    10da:	4640      	mov	r0, r8
    10dc:	f00a feaa 	bl	be34 <__aeabi_fdiv>
    Logger::console(1, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    10e0:	f00a fbd0 	bl	b884 <__aeabi_f2d>
    10e4:	4680      	mov	r8, r0
                    Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVolt, HighCellVolt, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
    10e6:	4630      	mov	r0, r6
    10e8:	69b5      	ldr	r5, [r6, #24]
    10ea:	69f7      	ldr	r7, [r6, #28]
    Logger::console(1, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    10ec:	4689      	mov	r9, r1
                    Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVolt, HighCellVolt, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
    10ee:	f7ff fded 	bl	ccc <BMSModuleManager::getAvgTemperature()>
    Logger::console(1, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    10f2:	f00a fbc7 	bl	b884 <__aeabi_f2d>
    10f6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
                    Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVolt, HighCellVolt, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
    10fa:	4629      	mov	r1, r5
    10fc:	4638      	mov	r0, r7
    10fe:	f00a fcdb 	bl	bab8 <__aeabi_fsub>
    1102:	49b5      	ldr	r1, [pc, #724]	; (13d8 <BMSModuleManager::printPackDetails(int, bool)+0x5fc>)
    1104:	f00a fde2 	bl	bccc <__aeabi_fmul>
    Logger::console(1, "Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1108:	f00a fbbc 	bl	b884 <__aeabi_f2d>
    110c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    1110:	4638      	mov	r0, r7
    1112:	f00a fbb7 	bl	b884 <__aeabi_f2d>
    1116:	e9cd 0108 	strd	r0, r1, [sp, #32]
    111a:	4628      	mov	r0, r5
    111c:	f00a fbb2 	bl	b884 <__aeabi_f2d>
    1120:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    1124:	e9cd 0106 	strd	r0, r1, [sp, #24]
    1128:	990f      	ldr	r1, [sp, #60]	; 0x3c
    112a:	9100      	str	r1, [sp, #0]
    112c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    1130:	49aa      	ldr	r1, [pc, #680]	; (13dc <BMSModuleManager::printPackDetails(int, bool)+0x600>)
	size_t print(int n)				{ return print((long)n); }
    1132:	4dab      	ldr	r5, [pc, #684]	; (13e0 <BMSModuleManager::printPackDetails(int, bool)+0x604>)
    1134:	465b      	mov	r3, fp
    1136:	4652      	mov	r2, sl
    1138:	2001      	movs	r0, #1
    113a:	e9cd 8904 	strd	r8, r9, [sp, #16]
    113e:	f000 fd75 	bl	1c2c <Logger::console(bool, char*, ...)>
    Logger::console(1, "");
    1142:	49a8      	ldr	r1, [pc, #672]	; (13e4 <BMSModuleManager::printPackDetails(int, bool)+0x608>)
    1144:	2001      	movs	r0, #1
    1146:	f000 fd71 	bl	1c2c <Logger::console(bool, char*, ...)>
    for (int y = 1; y < MAX_MODULE_ADDR; y++)
    114a:	f04f 0b01 	mov.w	fp, #1
  int cellNum = 0;
    114e:	2600      	movs	r6, #0
    1150:	e007      	b.n	1162 <BMSModuleManager::printPackDetails(int, bool)+0x386>
    for (int y = 1; y < MAX_MODULE_ADDR; y++)
    1152:	f10b 0b01 	add.w	fp, fp, #1
    1156:	f1bb 0f10 	cmp.w	fp, #16
    115a:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
    115e:	f000 8107 	beq.w	1370 <BMSModuleManager::printPackDetails(int, bool)+0x594>
    {
      if (modules[y].isExisting())
    1162:	4620      	mov	r0, r4
    1164:	f7ff fade 	bl	724 <BMSModule::isExisting()>
    1168:	2800      	cmp	r0, #0
    116a:	d0f2      	beq.n	1152 <BMSModuleManager::printPackDetails(int, bool)+0x376>
      {
        faults = modules[y].getFaults();
    116c:	4620      	mov	r0, r4
    116e:	f7ff f9ff 	bl	570 <BMSModule::getFaults()>
        alerts = modules[y].getAlerts();
    1172:	4620      	mov	r0, r4
    1174:	f7ff fa00 	bl	578 <BMSModule::getAlerts()>
        COV = modules[y].getCOVCells();
    1178:	4620      	mov	r0, r4
    117a:	f7ff fa01 	bl	580 <BMSModule::getCOVCells()>
        CUV = modules[y].getCUVCells();
    117e:	4620      	mov	r0, r4
    1180:	f7ff fa02 	bl	588 <BMSModule::getCUVCells()>
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial2_write(buffer, size); return size; }
    1184:	4898      	ldr	r0, [pc, #608]	; (13e8 <BMSModuleManager::printPackDetails(int, bool)+0x60c>)
    1186:	2108      	movs	r1, #8
    1188:	f008 fb94 	bl	98b4 <serial2_write>
    118c:	4659      	mov	r1, fp
    118e:	4628      	mov	r0, r5
    1190:	f007 fa0a 	bl	85a8 <Print::print(long)>

        Serial2.print("Module #");
        Serial2.print(y);
        if (y < 10)
    1194:	f1bb 0f09 	cmp.w	fp, #9
    1198:	dc03      	bgt.n	11a2 <BMSModuleManager::printPackDetails(int, bool)+0x3c6>
    119a:	4894      	ldr	r0, [pc, #592]	; (13ec <BMSModuleManager::printPackDetails(int, bool)+0x610>)
    119c:	2101      	movs	r1, #1
    119e:	f008 fb89 	bl	98b4 <serial2_write>
    11a2:	2102      	movs	r1, #2
    11a4:	4892      	ldr	r0, [pc, #584]	; (13f0 <BMSModuleManager::printPackDetails(int, bool)+0x614>)
    11a6:	f8df a244 	ldr.w	sl, [pc, #580]	; 13ec <BMSModuleManager::printPackDetails(int, bool)+0x610>
    11aa:	f008 fb83 	bl	98b4 <serial2_write>
          Serial2.print(" ");
        Serial2.print("  ");
        Serial2.print(modules[y].getModuleVoltage(), digits);
    11ae:	4620      	mov	r0, r4
    11b0:	f7ff fa82 	bl	6b8 <BMSModule::getModuleVoltage()>
    11b4:	f00a fb66 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    11b8:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    11bc:	9700      	str	r7, [sp, #0]
    11be:	4602      	mov	r2, r0
    11c0:	460b      	mov	r3, r1
    11c2:	4628      	mov	r0, r5
    11c4:	f007 fa1c 	bl	8600 <Print::printFloat(double, unsigned char)>
    11c8:	488a      	ldr	r0, [pc, #552]	; (13f4 <BMSModuleManager::printPackDetails(int, bool)+0x618>)
    11ca:	2101      	movs	r1, #1
    11cc:	f008 fb72 	bl	98b4 <serial2_write>
        Serial2.print("V");
        if (modules[y].getCellsUsed() > 12)
    11d0:	4620      	mov	r0, r4
    11d2:	f7ff f9c9 	bl	568 <BMSModule::getCellsUsed()>
    11d6:	280c      	cmp	r0, #12
    11d8:	f340 80cd 	ble.w	1376 <BMSModuleManager::printPackDetails(int, bool)+0x59a>
    11dc:	46b1      	mov	r9, r6
        {
          for (int i = 1; i < 12; i++)
    11de:	f04f 0801 	mov.w	r8, #1
    11e2:	e021      	b.n	1228 <BMSModuleManager::printPackDetails(int, bool)+0x44c>
    11e4:	4884      	ldr	r0, [pc, #528]	; (13f8 <BMSModuleManager::printPackDetails(int, bool)+0x61c>)
    11e6:	2107      	movs	r1, #7
    11e8:	f008 fb64 	bl	98b4 <serial2_write>
	size_t print(int n)				{ return print((long)n); }
    11ec:	4649      	mov	r1, r9
    11ee:	4628      	mov	r0, r5
    11f0:	f007 f9da 	bl	85a8 <Print::print(long)>
    11f4:	4881      	ldr	r0, [pc, #516]	; (13fc <BMSModuleManager::printPackDetails(int, bool)+0x620>)
    11f6:	2102      	movs	r1, #2
    11f8:	f008 fb5c 	bl	98b4 <serial2_write>
            if (cellNum < 10)
              Serial2.print(" ");
            Serial2.print("  Cell-");
            Serial2.print(1 + cellNum++);
            Serial2.print(": ");
            Serial2.print(modules[y].getCellVoltage(i), digits);
    11fc:	4641      	mov	r1, r8
    11fe:	4620      	mov	r0, r4
    1200:	f7ff f9c6 	bl	590 <BMSModule::getCellVoltage(int)>
    1204:	f00a fb3e 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1208:	9700      	str	r7, [sp, #0]
    120a:	4602      	mov	r2, r0
    120c:	460b      	mov	r3, r1
    120e:	4628      	mov	r0, r5
    1210:	f007 f9f6 	bl	8600 <Print::printFloat(double, unsigned char)>
          for (int i = 1; i < 12; i++)
    1214:	f108 0801 	add.w	r8, r8, #1
    1218:	4876      	ldr	r0, [pc, #472]	; (13f4 <BMSModuleManager::printPackDetails(int, bool)+0x618>)
    121a:	2101      	movs	r1, #1
    121c:	f008 fb4a 	bl	98b4 <serial2_write>
    1220:	f1b8 0f0c 	cmp.w	r8, #12
    1224:	f000 80f0 	beq.w	1408 <BMSModuleManager::printPackDetails(int, bool)+0x62c>
            if (cellNum < 10)
    1228:	f1b9 0f09 	cmp.w	r9, #9
            Serial2.print(1 + cellNum++);
    122c:	f109 0901 	add.w	r9, r9, #1
            if (cellNum < 10)
    1230:	dcd8      	bgt.n	11e4 <BMSModuleManager::printPackDetails(int, bool)+0x408>
    1232:	2101      	movs	r1, #1
    1234:	4650      	mov	r0, sl
    1236:	f008 fb3d 	bl	98b4 <serial2_write>
    123a:	e7d3      	b.n	11e4 <BMSModuleManager::printPackDetails(int, bool)+0x408>
    123c:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 13f8 <BMSModuleManager::printPackDetails(int, bool)+0x61c>
          for (int i = 1; i < modules[y].getCellsUsed() + 1; i++)
    1240:	f04f 0801 	mov.w	r8, #1
    1244:	e01d      	b.n	1282 <BMSModuleManager::printPackDetails(int, bool)+0x4a6>
    1246:	2107      	movs	r1, #7
    1248:	4648      	mov	r0, r9
    124a:	f009 fe5f 	bl	af0c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    124e:	4631      	mov	r1, r6
    1250:	4628      	mov	r0, r5
    1252:	f007 f9a9 	bl	85a8 <Print::print(long)>
    1256:	2102      	movs	r1, #2
    1258:	4868      	ldr	r0, [pc, #416]	; (13fc <BMSModuleManager::printPackDetails(int, bool)+0x620>)
    125a:	f009 fe57 	bl	af0c <usb_serial_write>
            SERIALCONSOLE.print(modules[y].getCellVoltage(i), digits);
    125e:	4641      	mov	r1, r8
    1260:	4620      	mov	r0, r4
    1262:	f7ff f995 	bl	590 <BMSModule::getCellVoltage(int)>
    1266:	f00a fb0d 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    126a:	9700      	str	r7, [sp, #0]
    126c:	4602      	mov	r2, r0
    126e:	460b      	mov	r3, r1
    1270:	4628      	mov	r0, r5
    1272:	f007 f9c5 	bl	8600 <Print::printFloat(double, unsigned char)>
    1276:	485f      	ldr	r0, [pc, #380]	; (13f4 <BMSModuleManager::printPackDetails(int, bool)+0x618>)
    1278:	2101      	movs	r1, #1
    127a:	f009 fe47 	bl	af0c <usb_serial_write>
          for (int i = 1; i < modules[y].getCellsUsed() + 1; i++)
    127e:	f108 0801 	add.w	r8, r8, #1
    1282:	4620      	mov	r0, r4
    1284:	f7ff f970 	bl	568 <BMSModule::getCellsUsed()>
    1288:	4540      	cmp	r0, r8
    128a:	db4a      	blt.n	1322 <BMSModuleManager::printPackDetails(int, bool)+0x546>
            if (cellNum < 10)
    128c:	2e09      	cmp	r6, #9
            SERIALCONSOLE.print(1 + cellNum++);
    128e:	f106 0601 	add.w	r6, r6, #1
            if (cellNum < 10)
    1292:	dcd8      	bgt.n	1246 <BMSModuleManager::printPackDetails(int, bool)+0x46a>
    1294:	2101      	movs	r1, #1
    1296:	4650      	mov	r0, sl
    1298:	f009 fe38 	bl	af0c <usb_serial_write>
    129c:	e7d3      	b.n	1246 <BMSModuleManager::printPackDetails(int, bool)+0x46a>
          if (modules[y].getCellsUsed() > 12 && modules[y].getCellsUsed() < 24)
    129e:	4620      	mov	r0, r4
    12a0:	f7ff f962 	bl	568 <BMSModule::getCellsUsed()>
    12a4:	280c      	cmp	r0, #12
            SERIALCONSOLE.print(1 + cellNum++);
    12a6:	f106 090b 	add.w	r9, r6, #11
          if (modules[y].getCellsUsed() > 12 && modules[y].getCellsUsed() < 24)
    12aa:	dd05      	ble.n	12b8 <BMSModuleManager::printPackDetails(int, bool)+0x4dc>
    12ac:	4620      	mov	r0, r4
    12ae:	f7ff f95b 	bl	568 <BMSModule::getCellsUsed()>
    12b2:	2817      	cmp	r0, #23
    12b4:	f340 8138 	ble.w	1528 <BMSModuleManager::printPackDetails(int, bool)+0x74c>
    12b8:	f8df a140 	ldr.w	sl, [pc, #320]	; 13fc <BMSModuleManager::printPackDetails(int, bool)+0x620>
    12bc:	f04f 080d 	mov.w	r8, #13
    12c0:	2107      	movs	r1, #7
    12c2:	484d      	ldr	r0, [pc, #308]	; (13f8 <BMSModuleManager::printPackDetails(int, bool)+0x61c>)
              SERIALCONSOLE.print(1 + cellNum++);
    12c4:	f109 0901 	add.w	r9, r9, #1
    12c8:	f009 fe20 	bl	af0c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    12cc:	4649      	mov	r1, r9
    12ce:	4628      	mov	r0, r5
    12d0:	f007 f96a 	bl	85a8 <Print::print(long)>
    12d4:	2102      	movs	r1, #2
    12d6:	4650      	mov	r0, sl
    12d8:	f009 fe18 	bl	af0c <usb_serial_write>
              SERIALCONSOLE.print(modules[y].getCellVoltage(i), digits);
    12dc:	4641      	mov	r1, r8
    12de:	4620      	mov	r0, r4
    12e0:	f7ff f956 	bl	590 <BMSModule::getCellVoltage(int)>
    12e4:	f00a face 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    12e8:	9700      	str	r7, [sp, #0]
    12ea:	4602      	mov	r2, r0
    12ec:	460b      	mov	r3, r1
    12ee:	4628      	mov	r0, r5
    12f0:	f007 f986 	bl	8600 <Print::printFloat(double, unsigned char)>
            for (int i = 13; i < 24; i++)
    12f4:	f108 0801 	add.w	r8, r8, #1
    12f8:	483e      	ldr	r0, [pc, #248]	; (13f4 <BMSModuleManager::printPackDetails(int, bool)+0x618>)
    12fa:	2101      	movs	r1, #1
    12fc:	f009 fe06 	bl	af0c <usb_serial_write>
    1300:	f1b8 0f18 	cmp.w	r8, #24
    1304:	d1dc      	bne.n	12c0 <BMSModuleManager::printPackDetails(int, bool)+0x4e4>
              SERIALCONSOLE.print(1 + cellNum++);
    1306:	3616      	adds	r6, #22
    1308:	210f      	movs	r1, #15
    130a:	483d      	ldr	r0, [pc, #244]	; (1400 <BMSModuleManager::printPackDetails(int, bool)+0x624>)
    130c:	f009 fdfe 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1310:	4628      	mov	r0, r5
    1312:	f007 f951 	bl	85b8 <Print::println()>
          if (modules[y].getCellsUsed() > 25)
    1316:	4620      	mov	r0, r4
    1318:	f7ff f926 	bl	568 <BMSModule::getCellsUsed()>
    131c:	2819      	cmp	r0, #25
    131e:	f300 8132 	bgt.w	1586 <BMSModuleManager::printPackDetails(int, bool)+0x7aa>
    1322:	210f      	movs	r1, #15
    1324:	4836      	ldr	r0, [pc, #216]	; (1400 <BMSModuleManager::printPackDetails(int, bool)+0x624>)
    1326:	f009 fdf1 	bl	af0c <usb_serial_write>
    132a:	4628      	mov	r0, r5
    132c:	f007 f944 	bl	85b8 <Print::println()>
    1330:	2109      	movs	r1, #9
    1332:	4834      	ldr	r0, [pc, #208]	; (1404 <BMSModuleManager::printPackDetails(int, bool)+0x628>)
    1334:	f009 fdea 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.print(modules[y].getTemperature(0));
    1338:	2100      	movs	r1, #0
    133a:	4620      	mov	r0, r4
    133c:	f7ff f9e4 	bl	708 <BMSModule::getTemperature(int)>
    1340:	f00a faa0 	bl	b884 <__aeabi_f2d>
    1344:	460b      	mov	r3, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1346:	2102      	movs	r1, #2
    1348:	4602      	mov	r2, r0
    134a:	9100      	str	r1, [sp, #0]
    134c:	4628      	mov	r0, r5
    134e:	f007 f957 	bl	8600 <Print::printFloat(double, unsigned char)>
    1352:	210f      	movs	r1, #15
    1354:	482a      	ldr	r0, [pc, #168]	; (1400 <BMSModuleManager::printPackDetails(int, bool)+0x624>)
    1356:	f009 fdd9 	bl	af0c <usb_serial_write>
    for (int y = 1; y < MAX_MODULE_ADDR; y++)
    135a:	f10b 0b01 	add.w	fp, fp, #1
	size_t println(const char s[])			{ return print(s) + println(); }
    135e:	4628      	mov	r0, r5
    1360:	f007 f92a 	bl	85b8 <Print::println()>
    1364:	f1bb 0f10 	cmp.w	fp, #16
    1368:	f504 74f0 	add.w	r4, r4, #480	; 0x1e0
    136c:	f47f addb 	bne.w	f26 <BMSModuleManager::printPackDetails(int, bool)+0x14a>
        Serial2.print(modules[y].getTemperature(0));
        Serial2.println("               ");
      }
    }
  }
}
    1370:	b013      	add	sp, #76	; 0x4c
    1372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1376:	f8df 9080 	ldr.w	r9, [pc, #128]	; 13f8 <BMSModuleManager::printPackDetails(int, bool)+0x61c>
          for (int i = 1; i < modules[y].getCellsUsed() + 1; i++)
    137a:	f04f 0801 	mov.w	r8, #1
    137e:	e01d      	b.n	13bc <BMSModuleManager::printPackDetails(int, bool)+0x5e0>
    1380:	2107      	movs	r1, #7
    1382:	4648      	mov	r0, r9
    1384:	f008 fa96 	bl	98b4 <serial2_write>
	size_t print(int n)				{ return print((long)n); }
    1388:	4631      	mov	r1, r6
    138a:	4628      	mov	r0, r5
    138c:	f007 f90c 	bl	85a8 <Print::print(long)>
    1390:	481a      	ldr	r0, [pc, #104]	; (13fc <BMSModuleManager::printPackDetails(int, bool)+0x620>)
    1392:	2102      	movs	r1, #2
    1394:	f008 fa8e 	bl	98b4 <serial2_write>
            Serial2.print(modules[y].getCellVoltage(i), digits);
    1398:	4641      	mov	r1, r8
    139a:	4620      	mov	r0, r4
    139c:	f7ff f8f8 	bl	590 <BMSModule::getCellVoltage(int)>
    13a0:	f00a fa70 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    13a4:	9700      	str	r7, [sp, #0]
    13a6:	4602      	mov	r2, r0
    13a8:	460b      	mov	r3, r1
    13aa:	4628      	mov	r0, r5
    13ac:	f007 f928 	bl	8600 <Print::printFloat(double, unsigned char)>
    13b0:	4810      	ldr	r0, [pc, #64]	; (13f4 <BMSModuleManager::printPackDetails(int, bool)+0x618>)
    13b2:	2101      	movs	r1, #1
    13b4:	f008 fa7e 	bl	98b4 <serial2_write>
          for (int i = 1; i < modules[y].getCellsUsed() + 1; i++)
    13b8:	f108 0801 	add.w	r8, r8, #1
    13bc:	4620      	mov	r0, r4
    13be:	f7ff f8d3 	bl	568 <BMSModule::getCellsUsed()>
    13c2:	4540      	cmp	r0, r8
    13c4:	db61      	blt.n	148a <BMSModuleManager::printPackDetails(int, bool)+0x6ae>
            if (cellNum < 10)
    13c6:	2e09      	cmp	r6, #9
            Serial2.print(1 + cellNum++);
    13c8:	f106 0601 	add.w	r6, r6, #1
            if (cellNum < 10)
    13cc:	dcd8      	bgt.n	1380 <BMSModuleManager::printPackDetails(int, bool)+0x5a4>
    13ce:	4650      	mov	r0, sl
    13d0:	2101      	movs	r1, #1
    13d2:	f008 fa6f 	bl	98b4 <serial2_write>
    13d6:	e7d3      	b.n	1380 <BMSModuleManager::printPackDetails(int, bool)+0x5a4>
    13d8:	447a0000 	.word	0x447a0000
    13dc:	00012ccc 	.word	0x00012ccc
    13e0:	1fff87ac 	.word	0x1fff87ac
    13e4:	00012a2c 	.word	0x00012a2c
    13e8:	00012d6c 	.word	0x00012d6c
    13ec:	00012a40 	.word	0x00012a40
    13f0:	00012a24 	.word	0x00012a24
    13f4:	00012d78 	.word	0x00012d78
    13f8:	00012d7c 	.word	0x00012d7c
    13fc:	00012de8 	.word	0x00012de8
    1400:	00012d84 	.word	0x00012d84
    1404:	00012d94 	.word	0x00012d94
          if (modules[y].getCellsUsed() > 12 && modules[y].getCellsUsed() < 24)
    1408:	4620      	mov	r0, r4
    140a:	f7ff f8ad 	bl	568 <BMSModule::getCellsUsed()>
    140e:	280c      	cmp	r0, #12
            Serial2.print(1 + cellNum++);
    1410:	f106 090b 	add.w	r9, r6, #11
          if (modules[y].getCellsUsed() > 12 && modules[y].getCellsUsed() < 24)
    1414:	dd04      	ble.n	1420 <BMSModuleManager::printPackDetails(int, bool)+0x644>
    1416:	4620      	mov	r0, r4
    1418:	f7ff f8a6 	bl	568 <BMSModule::getCellsUsed()>
    141c:	2817      	cmp	r0, #23
    141e:	dd54      	ble.n	14ca <BMSModuleManager::printPackDetails(int, bool)+0x6ee>
    1420:	f8df a21c 	ldr.w	sl, [pc, #540]	; 1640 <BMSModuleManager::printPackDetails(int, bool)+0x864>
    1424:	f04f 080d 	mov.w	r8, #13
    1428:	4886      	ldr	r0, [pc, #536]	; (1644 <BMSModuleManager::printPackDetails(int, bool)+0x868>)
    142a:	2107      	movs	r1, #7
              Serial2.print(1 + cellNum++);
    142c:	f109 0901 	add.w	r9, r9, #1
    1430:	f008 fa40 	bl	98b4 <serial2_write>
	size_t print(int n)				{ return print((long)n); }
    1434:	4649      	mov	r1, r9
    1436:	4628      	mov	r0, r5
    1438:	f007 f8b6 	bl	85a8 <Print::print(long)>
    143c:	2102      	movs	r1, #2
    143e:	4650      	mov	r0, sl
    1440:	f008 fa38 	bl	98b4 <serial2_write>
              Serial2.print(modules[y].getCellVoltage(i), digits);
    1444:	4641      	mov	r1, r8
    1446:	4620      	mov	r0, r4
    1448:	f7ff f8a2 	bl	590 <BMSModule::getCellVoltage(int)>
    144c:	f00a fa1a 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1450:	9700      	str	r7, [sp, #0]
    1452:	4602      	mov	r2, r0
    1454:	460b      	mov	r3, r1
    1456:	4628      	mov	r0, r5
    1458:	f007 f8d2 	bl	8600 <Print::printFloat(double, unsigned char)>
            for (int i = 13; i < 24; i++)
    145c:	f108 0801 	add.w	r8, r8, #1
    1460:	4879      	ldr	r0, [pc, #484]	; (1648 <BMSModuleManager::printPackDetails(int, bool)+0x86c>)
    1462:	2101      	movs	r1, #1
    1464:	f008 fa26 	bl	98b4 <serial2_write>
    1468:	f1b8 0f18 	cmp.w	r8, #24
    146c:	d1dc      	bne.n	1428 <BMSModuleManager::printPackDetails(int, bool)+0x64c>
              Serial2.print(1 + cellNum++);
    146e:	3616      	adds	r6, #22
    1470:	210f      	movs	r1, #15
    1472:	4876      	ldr	r0, [pc, #472]	; (164c <BMSModuleManager::printPackDetails(int, bool)+0x870>)
    1474:	f008 fa1e 	bl	98b4 <serial2_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    1478:	4628      	mov	r0, r5
    147a:	f007 f89d 	bl	85b8 <Print::println()>
          if (modules[y].getCellsUsed() > 25)
    147e:	4620      	mov	r0, r4
    1480:	f7ff f872 	bl	568 <BMSModule::getCellsUsed()>
    1484:	2819      	cmp	r0, #25
    1486:	f300 80ac 	bgt.w	15e2 <BMSModuleManager::printPackDetails(int, bool)+0x806>
    148a:	210f      	movs	r1, #15
    148c:	486f      	ldr	r0, [pc, #444]	; (164c <BMSModuleManager::printPackDetails(int, bool)+0x870>)
    148e:	f008 fa11 	bl	98b4 <serial2_write>
    1492:	4628      	mov	r0, r5
    1494:	f007 f890 	bl	85b8 <Print::println()>
    1498:	486d      	ldr	r0, [pc, #436]	; (1650 <BMSModuleManager::printPackDetails(int, bool)+0x874>)
    149a:	2109      	movs	r1, #9
    149c:	f008 fa0a 	bl	98b4 <serial2_write>
        Serial2.print(modules[y].getTemperature(0));
    14a0:	2100      	movs	r1, #0
    14a2:	4620      	mov	r0, r4
    14a4:	f7ff f930 	bl	708 <BMSModule::getTemperature(int)>
    14a8:	f00a f9ec 	bl	b884 <__aeabi_f2d>
    14ac:	460b      	mov	r3, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    14ae:	2102      	movs	r1, #2
    14b0:	4602      	mov	r2, r0
    14b2:	9100      	str	r1, [sp, #0]
    14b4:	4628      	mov	r0, r5
    14b6:	f007 f8a3 	bl	8600 <Print::printFloat(double, unsigned char)>
    14ba:	4864      	ldr	r0, [pc, #400]	; (164c <BMSModuleManager::printPackDetails(int, bool)+0x870>)
    14bc:	210f      	movs	r1, #15
    14be:	f008 f9f9 	bl	98b4 <serial2_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    14c2:	4628      	mov	r0, r5
    14c4:	f007 f878 	bl	85b8 <Print::println()>
    14c8:	e643      	b.n	1152 <BMSModuleManager::printPackDetails(int, bool)+0x376>
            Serial2.print(1 + cellNum++);
    14ca:	464e      	mov	r6, r9
    14cc:	f8df a170 	ldr.w	sl, [pc, #368]	; 1640 <BMSModuleManager::printPackDetails(int, bool)+0x864>
    14d0:	f8df 9170 	ldr.w	r9, [pc, #368]	; 1644 <BMSModuleManager::printPackDetails(int, bool)+0x868>
    14d4:	f04f 080d 	mov.w	r8, #13
    14d8:	e01c      	b.n	1514 <BMSModuleManager::printPackDetails(int, bool)+0x738>
              Serial2.print(1 + cellNum++);
    14da:	3601      	adds	r6, #1
    14dc:	f008 f9ea 	bl	98b4 <serial2_write>
	size_t print(int n)				{ return print((long)n); }
    14e0:	4631      	mov	r1, r6
    14e2:	4628      	mov	r0, r5
    14e4:	f007 f860 	bl	85a8 <Print::print(long)>
    14e8:	2102      	movs	r1, #2
    14ea:	4650      	mov	r0, sl
    14ec:	f008 f9e2 	bl	98b4 <serial2_write>
              Serial2.print(modules[y].getCellVoltage(i), digits);
    14f0:	4641      	mov	r1, r8
    14f2:	4620      	mov	r0, r4
    14f4:	f7ff f84c 	bl	590 <BMSModule::getCellVoltage(int)>
    14f8:	f00a f9c4 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    14fc:	9700      	str	r7, [sp, #0]
    14fe:	4602      	mov	r2, r0
    1500:	460b      	mov	r3, r1
    1502:	4628      	mov	r0, r5
    1504:	f007 f87c 	bl	8600 <Print::printFloat(double, unsigned char)>
    1508:	484f      	ldr	r0, [pc, #316]	; (1648 <BMSModuleManager::printPackDetails(int, bool)+0x86c>)
    150a:	2101      	movs	r1, #1
    150c:	f008 f9d2 	bl	98b4 <serial2_write>
            for (int i = 13; i < modules[y].getCellsUsed() + 1; i++)
    1510:	f108 0801 	add.w	r8, r8, #1
    1514:	4620      	mov	r0, r4
    1516:	f7ff f827 	bl	568 <BMSModule::getCellsUsed()>
    151a:	4603      	mov	r3, r0
    151c:	4543      	cmp	r3, r8
    151e:	f04f 0107 	mov.w	r1, #7
    1522:	4648      	mov	r0, r9
    1524:	dad9      	bge.n	14da <BMSModuleManager::printPackDetails(int, bool)+0x6fe>
    1526:	e7a3      	b.n	1470 <BMSModuleManager::printPackDetails(int, bool)+0x694>
            SERIALCONSOLE.print(1 + cellNum++);
    1528:	464e      	mov	r6, r9
    152a:	f8df a114 	ldr.w	sl, [pc, #276]	; 1640 <BMSModuleManager::printPackDetails(int, bool)+0x864>
    152e:	f8df 9114 	ldr.w	r9, [pc, #276]	; 1644 <BMSModuleManager::printPackDetails(int, bool)+0x868>
    1532:	f04f 080d 	mov.w	r8, #13
    1536:	e01c      	b.n	1572 <BMSModuleManager::printPackDetails(int, bool)+0x796>
              SERIALCONSOLE.print(1 + cellNum++);
    1538:	3601      	adds	r6, #1
    153a:	f009 fce7 	bl	af0c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    153e:	4631      	mov	r1, r6
    1540:	4628      	mov	r0, r5
    1542:	f007 f831 	bl	85a8 <Print::print(long)>
    1546:	2102      	movs	r1, #2
    1548:	4650      	mov	r0, sl
    154a:	f009 fcdf 	bl	af0c <usb_serial_write>
              SERIALCONSOLE.print(modules[y].getCellVoltage(i), digits);
    154e:	4641      	mov	r1, r8
    1550:	4620      	mov	r0, r4
    1552:	f7ff f81d 	bl	590 <BMSModule::getCellVoltage(int)>
    1556:	f00a f995 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    155a:	9700      	str	r7, [sp, #0]
    155c:	4602      	mov	r2, r0
    155e:	460b      	mov	r3, r1
    1560:	4628      	mov	r0, r5
    1562:	f007 f84d 	bl	8600 <Print::printFloat(double, unsigned char)>
    1566:	4838      	ldr	r0, [pc, #224]	; (1648 <BMSModuleManager::printPackDetails(int, bool)+0x86c>)
    1568:	2101      	movs	r1, #1
    156a:	f009 fccf 	bl	af0c <usb_serial_write>
            for (int i = 13; i < modules[y].getCellsUsed() + 1; i++)
    156e:	f108 0801 	add.w	r8, r8, #1
    1572:	4620      	mov	r0, r4
    1574:	f7fe fff8 	bl	568 <BMSModule::getCellsUsed()>
    1578:	4603      	mov	r3, r0
    157a:	4543      	cmp	r3, r8
    157c:	f04f 0107 	mov.w	r1, #7
    1580:	4648      	mov	r0, r9
    1582:	dad9      	bge.n	1538 <BMSModuleManager::printPackDetails(int, bool)+0x75c>
    1584:	e6c0      	b.n	1308 <BMSModuleManager::printPackDetails(int, bool)+0x52c>
    1586:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 1644 <BMSModuleManager::printPackDetails(int, bool)+0x868>
    158a:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 1640 <BMSModuleManager::printPackDetails(int, bool)+0x864>
            for (int i = 25; i < modules[y].getCellsUsed() + 1; i++)
    158e:	f04f 0819 	mov.w	r8, #25
    1592:	e01c      	b.n	15ce <BMSModuleManager::printPackDetails(int, bool)+0x7f2>
              SERIALCONSOLE.print(1 + cellNum++);
    1594:	3601      	adds	r6, #1
    1596:	f009 fcb9 	bl	af0c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    159a:	4631      	mov	r1, r6
    159c:	4628      	mov	r0, r5
    159e:	f007 f803 	bl	85a8 <Print::print(long)>
    15a2:	2102      	movs	r1, #2
    15a4:	4650      	mov	r0, sl
    15a6:	f009 fcb1 	bl	af0c <usb_serial_write>
              SERIALCONSOLE.print(modules[y].getCellVoltage(i), digits);
    15aa:	4641      	mov	r1, r8
    15ac:	4620      	mov	r0, r4
    15ae:	f7fe ffef 	bl	590 <BMSModule::getCellVoltage(int)>
    15b2:	f00a f967 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    15b6:	9700      	str	r7, [sp, #0]
    15b8:	4602      	mov	r2, r0
    15ba:	460b      	mov	r3, r1
    15bc:	4628      	mov	r0, r5
    15be:	f007 f81f 	bl	8600 <Print::printFloat(double, unsigned char)>
    15c2:	4821      	ldr	r0, [pc, #132]	; (1648 <BMSModuleManager::printPackDetails(int, bool)+0x86c>)
    15c4:	2101      	movs	r1, #1
    15c6:	f009 fca1 	bl	af0c <usb_serial_write>
            for (int i = 25; i < modules[y].getCellsUsed() + 1; i++)
    15ca:	f108 0801 	add.w	r8, r8, #1
    15ce:	4620      	mov	r0, r4
    15d0:	f7fe ffca 	bl	568 <BMSModule::getCellsUsed()>
    15d4:	4603      	mov	r3, r0
    15d6:	4543      	cmp	r3, r8
    15d8:	f04f 0107 	mov.w	r1, #7
    15dc:	4648      	mov	r0, r9
    15de:	dad9      	bge.n	1594 <BMSModuleManager::printPackDetails(int, bool)+0x7b8>
    15e0:	e69f      	b.n	1322 <BMSModuleManager::printPackDetails(int, bool)+0x546>
    15e2:	f8df 9060 	ldr.w	r9, [pc, #96]	; 1644 <BMSModuleManager::printPackDetails(int, bool)+0x868>
    15e6:	f8df a058 	ldr.w	sl, [pc, #88]	; 1640 <BMSModuleManager::printPackDetails(int, bool)+0x864>
            for (int i = 25; i < modules[y].getCellsUsed() + 1; i++)
    15ea:	f04f 0819 	mov.w	r8, #25
    15ee:	e01c      	b.n	162a <BMSModuleManager::printPackDetails(int, bool)+0x84e>
              Serial2.print(1 + cellNum++);
    15f0:	3601      	adds	r6, #1
    15f2:	f008 f95f 	bl	98b4 <serial2_write>
	size_t print(int n)				{ return print((long)n); }
    15f6:	4631      	mov	r1, r6
    15f8:	4628      	mov	r0, r5
    15fa:	f006 ffd5 	bl	85a8 <Print::print(long)>
    15fe:	2102      	movs	r1, #2
    1600:	4650      	mov	r0, sl
    1602:	f008 f957 	bl	98b4 <serial2_write>
              Serial2.print(modules[y].getCellVoltage(i), digits);
    1606:	4641      	mov	r1, r8
    1608:	4620      	mov	r0, r4
    160a:	f7fe ffc1 	bl	590 <BMSModule::getCellVoltage(int)>
    160e:	f00a f939 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1612:	9700      	str	r7, [sp, #0]
    1614:	4602      	mov	r2, r0
    1616:	460b      	mov	r3, r1
    1618:	4628      	mov	r0, r5
    161a:	f006 fff1 	bl	8600 <Print::printFloat(double, unsigned char)>
    161e:	480a      	ldr	r0, [pc, #40]	; (1648 <BMSModuleManager::printPackDetails(int, bool)+0x86c>)
    1620:	2101      	movs	r1, #1
    1622:	f008 f947 	bl	98b4 <serial2_write>
            for (int i = 25; i < modules[y].getCellsUsed() + 1; i++)
    1626:	f108 0801 	add.w	r8, r8, #1
    162a:	4620      	mov	r0, r4
    162c:	f7fe ff9c 	bl	568 <BMSModule::getCellsUsed()>
    1630:	4603      	mov	r3, r0
    1632:	4543      	cmp	r3, r8
    1634:	f04f 0107 	mov.w	r1, #7
    1638:	4648      	mov	r0, r9
    163a:	dad9      	bge.n	15f0 <BMSModuleManager::printPackDetails(int, bool)+0x814>
    163c:	e725      	b.n	148a <BMSModuleManager::printPackDetails(int, bool)+0x6ae>
    163e:	bf00      	nop
    1640:	00012de8 	.word	0x00012de8
    1644:	00012d7c 	.word	0x00012d7c
    1648:	00012d78 	.word	0x00012d78
    164c:	00012d84 	.word	0x00012d84
    1650:	00012d94 	.word	0x00012d94

00001654 <BMSModuleManager::printAllCSV(unsigned long, float, int)>:

void BMSModuleManager::printAllCSV(unsigned long timestamp, float current, int SOC)
{
    1654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1658:	b087      	sub	sp, #28
    165a:	f500 7506 	add.w	r5, r0, #536	; 0x218
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    165e:	f8df 9224 	ldr.w	r9, [pc, #548]	; 1884 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x230>
    1662:	f8df a224 	ldr.w	sl, [pc, #548]	; 1888 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x234>
    1666:	9103      	str	r1, [sp, #12]
    1668:	9204      	str	r2, [sp, #16]
    166a:	4698      	mov	r8, r3
    166c:	462e      	mov	r6, r5
  for (int y = 1; y < 63; y++)
    166e:	2701      	movs	r7, #1
    1670:	9505      	str	r5, [sp, #20]
    1672:	4693      	mov	fp, r2
    1674:	e004      	b.n	1680 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x2c>
    1676:	3701      	adds	r7, #1
    1678:	2f3f      	cmp	r7, #63	; 0x3f
    167a:	f506 76f0 	add.w	r6, r6, #480	; 0x1e0
    167e:	d075      	beq.n	176c <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x118>
  {
    if (modules[y].isExisting())
    1680:	4630      	mov	r0, r6
    1682:	f7ff f84f 	bl	724 <BMSModule::isExisting()>
    1686:	2800      	cmp	r0, #0
    1688:	d0f5      	beq.n	1676 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x22>
    168a:	2300      	movs	r3, #0
    168c:	220a      	movs	r2, #10
    168e:	9903      	ldr	r1, [sp, #12]
    1690:	4648      	mov	r0, r9
    1692:	f006 ffa9 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1696:	2101      	movs	r1, #1
    1698:	4650      	mov	r0, sl
    169a:	f009 fc37 	bl	af0c <usb_serial_write>
    {
      SERIALCONSOLE.print(timestamp);
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(current, 0);
    169e:	4658      	mov	r0, fp
    16a0:	f00a f8f0 	bl	b884 <__aeabi_f2d>
    16a4:	460b      	mov	r3, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    16a6:	2100      	movs	r1, #0
    16a8:	4602      	mov	r2, r0
    16aa:	9100      	str	r1, [sp, #0]
    16ac:	4648      	mov	r0, r9
    16ae:	f006 ffa7 	bl	8600 <Print::printFloat(double, unsigned char)>
    16b2:	2101      	movs	r1, #1
    16b4:	4650      	mov	r0, sl
    16b6:	f009 fc29 	bl	af0c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    16ba:	4641      	mov	r1, r8
    16bc:	4648      	mov	r0, r9
    16be:	f006 ff73 	bl	85a8 <Print::print(long)>
    16c2:	2101      	movs	r1, #1
    16c4:	4650      	mov	r0, sl
    16c6:	f009 fc21 	bl	af0c <usb_serial_write>
    16ca:	4639      	mov	r1, r7
    16cc:	4648      	mov	r0, r9
    16ce:	f006 ff6b 	bl	85a8 <Print::print(long)>
    16d2:	2101      	movs	r1, #1
    16d4:	4650      	mov	r0, sl
    16d6:	f009 fc19 	bl	af0c <usb_serial_write>
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(SOC);
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(y);
      SERIALCONSOLE.print(",");
      for (int i = 0; i < 8; i++)
    16da:	2400      	movs	r4, #0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    16dc:	2502      	movs	r5, #2
      {
        SERIALCONSOLE.print(modules[y].getCellVoltage(i));
    16de:	4621      	mov	r1, r4
    16e0:	4630      	mov	r0, r6
    16e2:	f7fe ff55 	bl	590 <BMSModule::getCellVoltage(int)>
    16e6:	f00a f8cd 	bl	b884 <__aeabi_f2d>
    16ea:	9500      	str	r5, [sp, #0]
    16ec:	4602      	mov	r2, r0
    16ee:	460b      	mov	r3, r1
    16f0:	4648      	mov	r0, r9
    16f2:	f006 ff85 	bl	8600 <Print::printFloat(double, unsigned char)>
      for (int i = 0; i < 8; i++)
    16f6:	3401      	adds	r4, #1
    16f8:	2101      	movs	r1, #1
    16fa:	4650      	mov	r0, sl
    16fc:	f009 fc06 	bl	af0c <usb_serial_write>
    1700:	2c08      	cmp	r4, #8
    1702:	d1ec      	bne.n	16de <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x8a>
        SERIALCONSOLE.print(",");
      }
      SERIALCONSOLE.print(modules[y].getTemperature(0));
    1704:	2100      	movs	r1, #0
    1706:	4630      	mov	r0, r6
    1708:	f7fe fffe 	bl	708 <BMSModule::getTemperature(int)>
    170c:	f00a f8ba 	bl	b884 <__aeabi_f2d>
    1710:	9500      	str	r5, [sp, #0]
    1712:	4602      	mov	r2, r0
    1714:	460b      	mov	r3, r1
    1716:	4648      	mov	r0, r9
    1718:	f006 ff72 	bl	8600 <Print::printFloat(double, unsigned char)>
    171c:	2101      	movs	r1, #1
    171e:	4650      	mov	r0, sl
    1720:	f009 fbf4 	bl	af0c <usb_serial_write>
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(modules[y].getTemperature(1));
    1724:	2101      	movs	r1, #1
    1726:	4630      	mov	r0, r6
    1728:	f7fe ffee 	bl	708 <BMSModule::getTemperature(int)>
    172c:	f00a f8aa 	bl	b884 <__aeabi_f2d>
    1730:	9500      	str	r5, [sp, #0]
    1732:	4602      	mov	r2, r0
    1734:	460b      	mov	r3, r1
    1736:	4648      	mov	r0, r9
    1738:	f006 ff62 	bl	8600 <Print::printFloat(double, unsigned char)>
    173c:	2101      	movs	r1, #1
    173e:	4650      	mov	r0, sl
    1740:	f009 fbe4 	bl	af0c <usb_serial_write>
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(modules[y].getTemperature(2));
    1744:	2102      	movs	r1, #2
    1746:	4630      	mov	r0, r6
    1748:	f7fe ffde 	bl	708 <BMSModule::getTemperature(int)>
    174c:	f00a f89a 	bl	b884 <__aeabi_f2d>
    1750:	9500      	str	r5, [sp, #0]
    1752:	4602      	mov	r2, r0
    1754:	460b      	mov	r3, r1
    1756:	4648      	mov	r0, r9
    1758:	f006 ff52 	bl	8600 <Print::printFloat(double, unsigned char)>
  for (int y = 1; y < 63; y++)
    175c:	3701      	adds	r7, #1
      SERIALCONSOLE.println();
    175e:	4648      	mov	r0, r9
    1760:	f006 ff2a 	bl	85b8 <Print::println()>
  for (int y = 1; y < 63; y++)
    1764:	2f3f      	cmp	r7, #63	; 0x3f
    1766:	f506 76f0 	add.w	r6, r6, #480	; 0x1e0
    176a:	d189      	bne.n	1680 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x2c>
    }
  }
  for (int y = 1; y < 63; y++)
    176c:	9d05      	ldr	r5, [sp, #20]
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    176e:	4f47      	ldr	r7, [pc, #284]	; (188c <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x238>)
    1770:	f8df 9114 	ldr.w	r9, [pc, #276]	; 1888 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x234>
    1774:	2601      	movs	r6, #1
    1776:	f04f 0b00 	mov.w	fp, #0
    177a:	e004      	b.n	1786 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x132>
    177c:	3601      	adds	r6, #1
    177e:	2e3f      	cmp	r6, #63	; 0x3f
    1780:	f505 75f0 	add.w	r5, r5, #480	; 0x1e0
    1784:	d07a      	beq.n	187c <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x228>
  {
    if (modules[y].isExisting())
    1786:	4628      	mov	r0, r5
    1788:	f7fe ffcc 	bl	724 <BMSModule::isExisting()>
    178c:	2800      	cmp	r0, #0
    178e:	d0f5      	beq.n	177c <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x128>
    1790:	2300      	movs	r3, #0
    1792:	220a      	movs	r2, #10
    1794:	9903      	ldr	r1, [sp, #12]
    1796:	4638      	mov	r0, r7
    1798:	f006 ff26 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    179c:	2101      	movs	r1, #1
    179e:	4648      	mov	r0, r9
    17a0:	f008 f888 	bl	98b4 <serial2_write>
    {
      Serial2.print(timestamp);
      Serial2.print(",");
      Serial2.print(current, 0);
    17a4:	9804      	ldr	r0, [sp, #16]
    17a6:	f00a f86d 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    17aa:	f8cd b000 	str.w	fp, [sp]
    17ae:	4602      	mov	r2, r0
    17b0:	460b      	mov	r3, r1
    17b2:	4638      	mov	r0, r7
    17b4:	f006 ff24 	bl	8600 <Print::printFloat(double, unsigned char)>
    17b8:	2101      	movs	r1, #1
    17ba:	4648      	mov	r0, r9
    17bc:	f008 f87a 	bl	98b4 <serial2_write>
	size_t print(int n)				{ return print((long)n); }
    17c0:	4641      	mov	r1, r8
    17c2:	4638      	mov	r0, r7
    17c4:	f006 fef0 	bl	85a8 <Print::print(long)>
    17c8:	2101      	movs	r1, #1
    17ca:	4648      	mov	r0, r9
    17cc:	f008 f872 	bl	98b4 <serial2_write>
    17d0:	4631      	mov	r1, r6
    17d2:	4638      	mov	r0, r7
    17d4:	f006 fee8 	bl	85a8 <Print::print(long)>
    17d8:	2101      	movs	r1, #1
    17da:	4648      	mov	r0, r9
    17dc:	f008 f86a 	bl	98b4 <serial2_write>
      Serial2.print(",");
      Serial2.print(SOC);
      Serial2.print(",");
      Serial2.print(y);
      Serial2.print(",");
      for (int i = 0; i < 8; i++)
    17e0:	2400      	movs	r4, #0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    17e2:	f04f 0a02 	mov.w	sl, #2
      {
        Serial2.print(modules[y].getCellVoltage(i));
    17e6:	4621      	mov	r1, r4
    17e8:	4628      	mov	r0, r5
    17ea:	f7fe fed1 	bl	590 <BMSModule::getCellVoltage(int)>
    17ee:	f00a f849 	bl	b884 <__aeabi_f2d>
    17f2:	f8cd a000 	str.w	sl, [sp]
    17f6:	4602      	mov	r2, r0
    17f8:	460b      	mov	r3, r1
    17fa:	4638      	mov	r0, r7
    17fc:	f006 ff00 	bl	8600 <Print::printFloat(double, unsigned char)>
      for (int i = 0; i < 8; i++)
    1800:	3401      	adds	r4, #1
    1802:	2101      	movs	r1, #1
    1804:	4648      	mov	r0, r9
    1806:	f008 f855 	bl	98b4 <serial2_write>
    180a:	2c08      	cmp	r4, #8
    180c:	d1eb      	bne.n	17e6 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x192>
        Serial2.print(",");
      }
      Serial2.print(modules[y].getTemperature(0));
    180e:	2100      	movs	r1, #0
    1810:	4628      	mov	r0, r5
    1812:	f7fe ff79 	bl	708 <BMSModule::getTemperature(int)>
    1816:	f00a f835 	bl	b884 <__aeabi_f2d>
    181a:	f8cd a000 	str.w	sl, [sp]
    181e:	4602      	mov	r2, r0
    1820:	460b      	mov	r3, r1
    1822:	4638      	mov	r0, r7
    1824:	f006 feec 	bl	8600 <Print::printFloat(double, unsigned char)>
    1828:	2101      	movs	r1, #1
    182a:	4648      	mov	r0, r9
    182c:	f008 f842 	bl	98b4 <serial2_write>
      Serial2.print(",");
      Serial2.print(modules[y].getTemperature(1));
    1830:	2101      	movs	r1, #1
    1832:	4628      	mov	r0, r5
    1834:	f7fe ff68 	bl	708 <BMSModule::getTemperature(int)>
    1838:	f00a f824 	bl	b884 <__aeabi_f2d>
    183c:	f8cd a000 	str.w	sl, [sp]
    1840:	4602      	mov	r2, r0
    1842:	460b      	mov	r3, r1
    1844:	4638      	mov	r0, r7
    1846:	f006 fedb 	bl	8600 <Print::printFloat(double, unsigned char)>
    184a:	2101      	movs	r1, #1
    184c:	4648      	mov	r0, r9
    184e:	f008 f831 	bl	98b4 <serial2_write>
      Serial2.print(",");
      Serial2.print(modules[y].getTemperature(2));
    1852:	2102      	movs	r1, #2
    1854:	4628      	mov	r0, r5
    1856:	f7fe ff57 	bl	708 <BMSModule::getTemperature(int)>
    185a:	f00a f813 	bl	b884 <__aeabi_f2d>
    185e:	f8cd a000 	str.w	sl, [sp]
    1862:	4602      	mov	r2, r0
    1864:	460b      	mov	r3, r1
    1866:	4638      	mov	r0, r7
    1868:	f006 feca 	bl	8600 <Print::printFloat(double, unsigned char)>
  for (int y = 1; y < 63; y++)
    186c:	3601      	adds	r6, #1
      Serial2.println();
    186e:	4638      	mov	r0, r7
    1870:	f006 fea2 	bl	85b8 <Print::println()>
  for (int y = 1; y < 63; y++)
    1874:	2e3f      	cmp	r6, #63	; 0x3f
    1876:	f505 75f0 	add.w	r5, r5, #480	; 0x1e0
    187a:	d184      	bne.n	1786 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x132>
    }
  }
}
    187c:	b007      	add	sp, #28
    187e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1882:	bf00      	nop
    1884:	1fff880c 	.word	0x1fff880c
    1888:	00012da0 	.word	0x00012da0
    188c:	1fff87ac 	.word	0x1fff87ac

00001890 <Logger::setLoglevel(Logger::LogLevel)>:

/*
   Set the log level. Any output below the specified log level will be omitted.
*/
void Logger::setLoglevel(LogLevel level) {
  logLevel = level;
    1890:	4b01      	ldr	r3, [pc, #4]	; (1898 <Logger::setLoglevel(Logger::LogLevel)+0x8>)
    1892:	7018      	strb	r0, [r3, #0]
}
    1894:	4770      	bx	lr
    1896:	bf00      	nop
    1898:	1fff8720 	.word	0x1fff8720

0000189c <Logger::logMessage(char*, std::__va_list, bool)>:
   %l - prints the next parameter as long
   %c - prints the next parameter as a character
   %t - prints the next parameter as boolean ('T' or 'F')
   %T - prints the next parameter as boolean ('true' or 'false')
*/
void Logger::logMessage(char *format, va_list args, bool port) {
    189c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    18a0:	4684      	mov	ip, r0
  for (; *format != 0; ++format) {
    18a2:	7800      	ldrb	r0, [r0, #0]
void Logger::logMessage(char *format, va_list args, bool port) {
    18a4:	b082      	sub	sp, #8
    18a6:	4616      	mov	r6, r2
  for (; *format != 0; ++format) {
    18a8:	b190      	cbz	r0, 18d0 <Logger::logMessage(char*, std::__va_list, bool)+0x34>
    18aa:	f8df 8320 	ldr.w	r8, [pc, #800]	; 1bcc <Logger::logMessage(char*, std::__va_list, bool)+0x330>
    18ae:	f8df 9320 	ldr.w	r9, [pc, #800]	; 1bd0 <Logger::logMessage(char*, std::__va_list, bool)+0x334>
    18b2:	4fc8      	ldr	r7, [pc, #800]	; (1bd4 <Logger::logMessage(char*, std::__va_list, bool)+0x338>)
    18b4:	460d      	mov	r5, r1
    if (*format == '%') {
    18b6:	2825      	cmp	r0, #37	; 0x25
    18b8:	d019      	beq.n	18ee <Logger::logMessage(char*, std::__va_list, bool)+0x52>
      }

    }
    if (port == 0)
    {
      SERIALCONSOLE.print(*format);
    18ba:	f89c 0000 	ldrb.w	r0, [ip]
    18be:	4664      	mov	r4, ip
    if (port == 0)
    18c0:	b996      	cbnz	r6, 18e8 <Logger::logMessage(char*, std::__va_list, bool)+0x4c>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    18c2:	f009 fba7 	bl	b014 <usb_serial_putchar>
  for (; *format != 0; ++format) {
    18c6:	7860      	ldrb	r0, [r4, #1]
    18c8:	f104 0c01 	add.w	ip, r4, #1
    18cc:	2800      	cmp	r0, #0
    18ce:	d1f2      	bne.n	18b6 <Logger::logMessage(char*, std::__va_list, bool)+0x1a>
    else
    {
      Serial2.print(*format);
    }
  }
  if (port == 0)
    18d0:	2e00      	cmp	r6, #0
    18d2:	f040 80cc 	bne.w	1a6e <Logger::logMessage(char*, std::__va_list, bool)+0x1d2>
  {
    SERIALCONSOLE.println();
    18d6:	48c0      	ldr	r0, [pc, #768]	; (1bd8 <Logger::logMessage(char*, std::__va_list, bool)+0x33c>)
  }
  else
  {
    Serial2.println();
  }
}
    18d8:	b002      	add	sp, #8
    18da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    Serial2.println();
    18de:	f006 be6b 	b.w	85b8 <Print::println()>
    18e2:	2025      	movs	r0, #37	; 0x25
        if (port == 0)
    18e4:	2e00      	cmp	r6, #0
    18e6:	d0ec      	beq.n	18c2 <Logger::logMessage(char*, std::__va_list, bool)+0x26>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    18e8:	f007 ff68 	bl	97bc <serial2_putchar>
    18ec:	e7eb      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
      if (*format == '\0')
    18ee:	f89c 0001 	ldrb.w	r0, [ip, #1]
      ++format;
    18f2:	f10c 0401 	add.w	r4, ip, #1
      if (*format == '\0')
    18f6:	2800      	cmp	r0, #0
    18f8:	d0ea      	beq.n	18d0 <Logger::logMessage(char*, std::__va_list, bool)+0x34>
      if (*format == '%') {
    18fa:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
    18fe:	2b55      	cmp	r3, #85	; 0x55
    1900:	d8de      	bhi.n	18c0 <Logger::logMessage(char*, std::__va_list, bool)+0x24>
    1902:	a201      	add	r2, pc, #4	; (adr r2, 1908 <Logger::logMessage(char*, std::__va_list, bool)+0x6c>)
    1904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1908:	000018e3 	.word	0x000018e3
    190c:	000018c1 	.word	0x000018c1
    1910:	000018c1 	.word	0x000018c1
    1914:	000018c1 	.word	0x000018c1
    1918:	000018c1 	.word	0x000018c1
    191c:	000018c1 	.word	0x000018c1
    1920:	000018c1 	.word	0x000018c1
    1924:	000018c1 	.word	0x000018c1
    1928:	000018c1 	.word	0x000018c1
    192c:	000018c1 	.word	0x000018c1
    1930:	000018c1 	.word	0x000018c1
    1934:	000018c1 	.word	0x000018c1
    1938:	000018c1 	.word	0x000018c1
    193c:	000018c1 	.word	0x000018c1
    1940:	000018c1 	.word	0x000018c1
    1944:	000018c1 	.word	0x000018c1
    1948:	000018c1 	.word	0x000018c1
    194c:	000018c1 	.word	0x000018c1
    1950:	000018c1 	.word	0x000018c1
    1954:	000018c1 	.word	0x000018c1
    1958:	000018c1 	.word	0x000018c1
    195c:	000018c1 	.word	0x000018c1
    1960:	000018c1 	.word	0x000018c1
    1964:	000018c1 	.word	0x000018c1
    1968:	000018c1 	.word	0x000018c1
    196c:	000018c1 	.word	0x000018c1
    1970:	000018c1 	.word	0x000018c1
    1974:	000018c1 	.word	0x000018c1
    1978:	000018c1 	.word	0x000018c1
    197c:	00001b53 	.word	0x00001b53
    1980:	000018c1 	.word	0x000018c1
    1984:	000018c1 	.word	0x000018c1
    1988:	000018c1 	.word	0x000018c1
    198c:	000018c1 	.word	0x000018c1
    1990:	000018c1 	.word	0x000018c1
    1994:	000018c1 	.word	0x000018c1
    1998:	000018c1 	.word	0x000018c1
    199c:	000018c1 	.word	0x000018c1
    19a0:	000018c1 	.word	0x000018c1
    19a4:	000018c1 	.word	0x000018c1
    19a8:	000018c1 	.word	0x000018c1
    19ac:	000018c1 	.word	0x000018c1
    19b0:	000018c1 	.word	0x000018c1
    19b4:	000018c1 	.word	0x000018c1
    19b8:	000018c1 	.word	0x000018c1
    19bc:	000018c1 	.word	0x000018c1
    19c0:	000018c1 	.word	0x000018c1
    19c4:	00001b3b 	.word	0x00001b3b
    19c8:	000018c1 	.word	0x000018c1
    19cc:	000018c1 	.word	0x000018c1
    19d0:	000018c1 	.word	0x000018c1
    19d4:	00001b1f 	.word	0x00001b1f
    19d8:	000018c1 	.word	0x000018c1
    19dc:	000018c1 	.word	0x000018c1
    19e0:	000018c1 	.word	0x000018c1
    19e4:	000018c1 	.word	0x000018c1
    19e8:	000018c1 	.word	0x000018c1
    19ec:	000018c1 	.word	0x000018c1
    19f0:	000018c1 	.word	0x000018c1
    19f4:	000018c1 	.word	0x000018c1
    19f8:	000018c1 	.word	0x000018c1
    19fc:	00001b0b 	.word	0x00001b0b
    1a00:	00001a61 	.word	0x00001a61
    1a04:	00001a61 	.word	0x00001a61
    1a08:	000018c1 	.word	0x000018c1
    1a0c:	00001ad9 	.word	0x00001ad9
    1a10:	000018c1 	.word	0x000018c1
    1a14:	000018c1 	.word	0x000018c1
    1a18:	00001a61 	.word	0x00001a61
    1a1c:	000018c1 	.word	0x000018c1
    1a20:	000018c1 	.word	0x000018c1
    1a24:	00001a61 	.word	0x00001a61
    1a28:	000018c1 	.word	0x000018c1
    1a2c:	000018c1 	.word	0x000018c1
    1a30:	000018c1 	.word	0x000018c1
    1a34:	000018c1 	.word	0x000018c1
    1a38:	000018c1 	.word	0x000018c1
    1a3c:	000018c1 	.word	0x000018c1
    1a40:	00001aa1 	.word	0x00001aa1
    1a44:	00001a87 	.word	0x00001a87
    1a48:	000018c1 	.word	0x000018c1
    1a4c:	000018c1 	.word	0x000018c1
    1a50:	000018c1 	.word	0x000018c1
    1a54:	00001ac3 	.word	0x00001ac3
    1a58:	000018c1 	.word	0x000018c1
    1a5c:	00001af1 	.word	0x00001af1
        if (port == 0)
    1a60:	b95e      	cbnz	r6, 1a7a <Logger::logMessage(char*, std::__va_list, bool)+0x1de>
	size_t print(int n)				{ return print((long)n); }
    1a62:	f855 1b04 	ldr.w	r1, [r5], #4
    1a66:	485c      	ldr	r0, [pc, #368]	; (1bd8 <Logger::logMessage(char*, std::__va_list, bool)+0x33c>)
    1a68:	f006 fd9e 	bl	85a8 <Print::print(long)>
    1a6c:	e72b      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
    Serial2.println();
    1a6e:	485b      	ldr	r0, [pc, #364]	; (1bdc <Logger::logMessage(char*, std::__va_list, bool)+0x340>)
}
    1a70:	b002      	add	sp, #8
    1a72:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    Serial2.println();
    1a76:	f006 bd9f 	b.w	85b8 <Print::println()>
    1a7a:	f855 1b04 	ldr.w	r1, [r5], #4
    1a7e:	4857      	ldr	r0, [pc, #348]	; (1bdc <Logger::logMessage(char*, std::__va_list, bool)+0x340>)
    1a80:	f006 fd92 	bl	85a8 <Print::print(long)>
    1a84:	e71f      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
          if (va_arg( args, int ) == 1) {
    1a86:	f855 1b04 	ldr.w	r1, [r5], #4
        if (port == 0)
    1a8a:	2e00      	cmp	r6, #0
    1a8c:	f040 80c2 	bne.w	1c14 <Logger::logMessage(char*, std::__va_list, bool)+0x378>
          if (va_arg( args, int ) == 1) {
    1a90:	2901      	cmp	r1, #1
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1a92:	bf0e      	itee	eq
    1a94:	4852      	ldreq	r0, [pc, #328]	; (1be0 <Logger::logMessage(char*, std::__va_list, bool)+0x344>)
    1a96:	2101      	movne	r1, #1
    1a98:	4638      	movne	r0, r7
    1a9a:	f009 fa37 	bl	af0c <usb_serial_write>
    1a9e:	e712      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
        register char *s = (char *) va_arg( args, int );
    1aa0:	f855 ab04 	ldr.w	sl, [r5], #4
        if (port == 0)
    1aa4:	2e00      	cmp	r6, #0
    1aa6:	f040 80a9 	bne.w	1bfc <Logger::logMessage(char*, std::__va_list, bool)+0x360>
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    1aaa:	f1ba 0f00 	cmp.w	sl, #0
    1aae:	f43f af0a 	beq.w	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
							  return write((const uint8_t *)str, strlen(str)); }
    1ab2:	4650      	mov	r0, sl
    1ab4:	f00b fac4 	bl	d040 <strlen>
    1ab8:	4601      	mov	r1, r0
    1aba:	4650      	mov	r0, sl
    1abc:	f009 fa26 	bl	af0c <usb_serial_write>
    1ac0:	e701      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
        if (port == 0)
    1ac2:	2e00      	cmp	r6, #0
    1ac4:	f040 8092 	bne.w	1bec <Logger::logMessage(char*, std::__va_list, bool)+0x350>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    1ac8:	f855 1b04 	ldr.w	r1, [r5], #4
    1acc:	4842      	ldr	r0, [pc, #264]	; (1bd8 <Logger::logMessage(char*, std::__va_list, bool)+0x33c>)
    1ace:	4633      	mov	r3, r6
    1ad0:	2210      	movs	r2, #16
    1ad2:	f006 fd89 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1ad6:	e6f6      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
          SERIALCONSOLE.print(va_arg( args, double ), 3);
    1ad8:	3507      	adds	r5, #7
    1ada:	f025 0507 	bic.w	r5, r5, #7
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1ade:	2103      	movs	r1, #3
        if (port == 0)
    1ae0:	b966      	cbnz	r6, 1afc <Logger::logMessage(char*, std::__va_list, bool)+0x260>
    1ae2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
    1ae6:	483c      	ldr	r0, [pc, #240]	; (1bd8 <Logger::logMessage(char*, std::__va_list, bool)+0x33c>)
    1ae8:	9100      	str	r1, [sp, #0]
    1aea:	f006 fd89 	bl	8600 <Print::printFloat(double, unsigned char)>
    1aee:	e6ea      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
          SERIALCONSOLE.print(va_arg( args, double ), 0);
    1af0:	3507      	adds	r5, #7
    1af2:	f025 0507 	bic.w	r5, r5, #7
        if (port == 0)
    1af6:	2e00      	cmp	r6, #0
    1af8:	d061      	beq.n	1bbe <Logger::logMessage(char*, std::__va_list, bool)+0x322>
    1afa:	2100      	movs	r1, #0
    1afc:	e8f5 2302 	ldrd	r2, r3, [r5], #8
    1b00:	4836      	ldr	r0, [pc, #216]	; (1bdc <Logger::logMessage(char*, std::__va_list, bool)+0x340>)
    1b02:	9100      	str	r1, [sp, #0]
    1b04:	f006 fd7c 	bl	8600 <Print::printFloat(double, unsigned char)>
    1b08:	e6dd      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
        if (port == 0)
    1b0a:	2e00      	cmp	r6, #0
    1b0c:	d14f      	bne.n	1bae <Logger::logMessage(char*, std::__va_list, bool)+0x312>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    1b0e:	f855 1b04 	ldr.w	r1, [r5], #4
    1b12:	4831      	ldr	r0, [pc, #196]	; (1bd8 <Logger::logMessage(char*, std::__va_list, bool)+0x33c>)
    1b14:	4633      	mov	r3, r6
    1b16:	2202      	movs	r2, #2
    1b18:	f006 fd66 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1b1c:	e6d3      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
        if (port == 0)
    1b1e:	2e00      	cmp	r6, #0
    1b20:	d139      	bne.n	1b96 <Logger::logMessage(char*, std::__va_list, bool)+0x2fa>
    1b22:	2102      	movs	r1, #2
    1b24:	482f      	ldr	r0, [pc, #188]	; (1be4 <Logger::logMessage(char*, std::__va_list, bool)+0x348>)
    1b26:	f009 f9f1 	bl	af0c <usb_serial_write>
    1b2a:	f855 1b04 	ldr.w	r1, [r5], #4
    1b2e:	482a      	ldr	r0, [pc, #168]	; (1bd8 <Logger::logMessage(char*, std::__va_list, bool)+0x33c>)
    1b30:	4633      	mov	r3, r6
    1b32:	2210      	movs	r2, #16
    1b34:	f006 fd58 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1b38:	e6c5      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
          if (va_arg( args, int ) == 1) {
    1b3a:	f855 3b04 	ldr.w	r3, [r5], #4
        if (port == 0)
    1b3e:	bb0e      	cbnz	r6, 1b84 <Logger::logMessage(char*, std::__va_list, bool)+0x2e8>
          if (va_arg( args, int ) == 1) {
    1b40:	2b01      	cmp	r3, #1
    1b42:	bf07      	ittee	eq
    1b44:	2104      	moveq	r1, #4
    1b46:	4648      	moveq	r0, r9
    1b48:	2105      	movne	r1, #5
    1b4a:	4640      	movne	r0, r8
    1b4c:	f009 f9de 	bl	af0c <usb_serial_write>
    1b50:	e6b9      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
        if (port == 0)
    1b52:	b95e      	cbnz	r6, 1b6c <Logger::logMessage(char*, std::__va_list, bool)+0x2d0>
    1b54:	2102      	movs	r1, #2
    1b56:	4824      	ldr	r0, [pc, #144]	; (1be8 <Logger::logMessage(char*, std::__va_list, bool)+0x34c>)
    1b58:	f009 f9d8 	bl	af0c <usb_serial_write>
    1b5c:	f855 1b04 	ldr.w	r1, [r5], #4
    1b60:	481d      	ldr	r0, [pc, #116]	; (1bd8 <Logger::logMessage(char*, std::__va_list, bool)+0x33c>)
    1b62:	4633      	mov	r3, r6
    1b64:	2202      	movs	r2, #2
    1b66:	f006 fd3f 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1b6a:	e6ac      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
					{ serial2_write(buffer, size); return size; }
    1b6c:	481e      	ldr	r0, [pc, #120]	; (1be8 <Logger::logMessage(char*, std::__va_list, bool)+0x34c>)
    1b6e:	2102      	movs	r1, #2
    1b70:	f007 fea0 	bl	98b4 <serial2_write>
    1b74:	f855 1b04 	ldr.w	r1, [r5], #4
    1b78:	4818      	ldr	r0, [pc, #96]	; (1bdc <Logger::logMessage(char*, std::__va_list, bool)+0x340>)
    1b7a:	2300      	movs	r3, #0
    1b7c:	2202      	movs	r2, #2
    1b7e:	f006 fd33 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1b82:	e6a0      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
          if (va_arg( args, int ) == 1) {
    1b84:	2b01      	cmp	r3, #1
    1b86:	bf07      	ittee	eq
    1b88:	2104      	moveq	r1, #4
    1b8a:	4648      	moveq	r0, r9
    1b8c:	2105      	movne	r1, #5
    1b8e:	4640      	movne	r0, r8
    1b90:	f007 fe90 	bl	98b4 <serial2_write>
    1b94:	e697      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
    1b96:	4813      	ldr	r0, [pc, #76]	; (1be4 <Logger::logMessage(char*, std::__va_list, bool)+0x348>)
    1b98:	2102      	movs	r1, #2
    1b9a:	f007 fe8b 	bl	98b4 <serial2_write>
    1b9e:	f855 1b04 	ldr.w	r1, [r5], #4
    1ba2:	480e      	ldr	r0, [pc, #56]	; (1bdc <Logger::logMessage(char*, std::__va_list, bool)+0x340>)
    1ba4:	2300      	movs	r3, #0
    1ba6:	2210      	movs	r2, #16
    1ba8:	f006 fd1e 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1bac:	e68b      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
    1bae:	f855 1b04 	ldr.w	r1, [r5], #4
    1bb2:	480a      	ldr	r0, [pc, #40]	; (1bdc <Logger::logMessage(char*, std::__va_list, bool)+0x340>)
    1bb4:	2300      	movs	r3, #0
    1bb6:	2202      	movs	r2, #2
    1bb8:	f006 fd16 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1bbc:	e683      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1bbe:	e8f5 2302 	ldrd	r2, r3, [r5], #8
    1bc2:	4805      	ldr	r0, [pc, #20]	; (1bd8 <Logger::logMessage(char*, std::__va_list, bool)+0x33c>)
    1bc4:	9600      	str	r6, [sp, #0]
    1bc6:	f006 fd1b 	bl	8600 <Print::printFloat(double, unsigned char)>
    1bca:	e67c      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
    1bcc:	00012dbc 	.word	0x00012dbc
    1bd0:	00012db4 	.word	0x00012db4
    1bd4:	00012db0 	.word	0x00012db0
    1bd8:	1fff880c 	.word	0x1fff880c
    1bdc:	1fff87ac 	.word	0x1fff87ac
    1be0:	00012dac 	.word	0x00012dac
    1be4:	00012da4 	.word	0x00012da4
    1be8:	00012da8 	.word	0x00012da8
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    1bec:	f855 1b04 	ldr.w	r1, [r5], #4
    1bf0:	480c      	ldr	r0, [pc, #48]	; (1c24 <Logger::logMessage(char*, std::__va_list, bool)+0x388>)
    1bf2:	2300      	movs	r3, #0
    1bf4:	2210      	movs	r2, #16
    1bf6:	f006 fcf7 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1bfa:	e664      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    1bfc:	f1ba 0f00 	cmp.w	sl, #0
    1c00:	f43f ae61 	beq.w	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
							  return write((const uint8_t *)str, strlen(str)); }
    1c04:	4650      	mov	r0, sl
    1c06:	f00b fa1b 	bl	d040 <strlen>
    1c0a:	4601      	mov	r1, r0
    1c0c:	4650      	mov	r0, sl
    1c0e:	f007 fe51 	bl	98b4 <serial2_write>
    1c12:	e658      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
          if (va_arg( args, int ) == 1) {
    1c14:	2901      	cmp	r1, #1
    1c16:	bf0e      	itee	eq
    1c18:	4803      	ldreq	r0, [pc, #12]	; (1c28 <Logger::logMessage(char*, std::__va_list, bool)+0x38c>)
    1c1a:	2101      	movne	r1, #1
    1c1c:	4638      	movne	r0, r7
    1c1e:	f007 fe49 	bl	98b4 <serial2_write>
    1c22:	e650      	b.n	18c6 <Logger::logMessage(char*, std::__va_list, bool)+0x2a>
    1c24:	1fff87ac 	.word	0x1fff87ac
    1c28:	00012dac 	.word	0x00012dac

00001c2c <Logger::console(bool, char*, ...)>:
void Logger::console(bool port, char *message, ...) {
    1c2c:	b40e      	push	{r1, r2, r3}
    1c2e:	b500      	push	{lr}
    1c30:	b082      	sub	sp, #8
    1c32:	a903      	add	r1, sp, #12
    1c34:	4602      	mov	r2, r0
    1c36:	f851 0b04 	ldr.w	r0, [r1], #4
  va_start(args, message);
    1c3a:	9101      	str	r1, [sp, #4]
  Logger::logMessage(message, args, port);
    1c3c:	f7ff fe2e 	bl	189c <Logger::logMessage(char*, std::__va_list, bool)>
}
    1c40:	b002      	add	sp, #8
    1c42:	f85d eb04 	ldr.w	lr, [sp], #4
    1c46:	b003      	add	sp, #12
    1c48:	4770      	bx	lr
    1c4a:	bf00      	nop

00001c4c <SerialConsole::SerialConsole()>:

bool printPrettyDisplay;
uint32_t prettyCounter;
int whichDisplay;

SerialConsole::SerialConsole() {
    1c4c:	b430      	push	{r4, r5}
    //State variables for serial console
    ptrBuffer = 0;
    state = STATE_ROOT_MENU;
    loopcount=0;
    cancel=false;
    printPrettyDisplay = false;
    1c4e:	4d07      	ldr	r5, [pc, #28]	; (1c6c <SerialConsole::SerialConsole()+0x20>)
    prettyCounter = 0;
    1c50:	4c07      	ldr	r4, [pc, #28]	; (1c70 <SerialConsole::SerialConsole()+0x24>)
    whichDisplay = 0;
    1c52:	4908      	ldr	r1, [pc, #32]	; (1c74 <SerialConsole::SerialConsole()+0x28>)
    ptrBuffer = 0;
    1c54:	2300      	movs	r3, #0
    printPrettyDisplay = false;
    1c56:	702b      	strb	r3, [r5, #0]
    prettyCounter = 0;
    1c58:	6023      	str	r3, [r4, #0]
    ptrBuffer = 0;
    1c5a:	6503      	str	r3, [r0, #80]	; 0x50
}
    1c5c:	bc30      	pop	{r4, r5}
    state = STATE_ROOT_MENU;
    1c5e:	6543      	str	r3, [r0, #84]	; 0x54
    loopcount=0;
    1c60:	6583      	str	r3, [r0, #88]	; 0x58
    cancel=false;
    1c62:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    whichDisplay = 0;
    1c66:	600b      	str	r3, [r1, #0]
}
    1c68:	4770      	bx	lr
    1c6a:	bf00      	nop
    1c6c:	1fff8f94 	.word	0x1fff8f94
    1c70:	1fff8f90 	.word	0x1fff8f90
    1c74:	1fff8f98 	.word	0x1fff8f98

00001c78 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]>:
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	}
#endif
	long in_range = in_max - in_min;
	long out_range = out_max - out_min;
    1c78:	f8dd c000 	ldr.w	ip, [sp]
	if (in_range == 0) return out_min + out_range / 2;
    1c7c:	1a52      	subs	r2, r2, r1
	long out_range = out_max - out_min;
    1c7e:	ebac 0c03 	sub.w	ip, ip, r3
	if (in_range == 0) return out_min + out_range / 2;
    1c82:	d01c      	beq.n	1cbe <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x46>
	long num = (x - in_min) * out_range;
    1c84:	1a40      	subs	r0, r0, r1
	if (out_range >= 0) {
    1c86:	f1bc 0f00 	cmp.w	ip, #0
	long num = (x - in_min) * out_range;
    1c8a:	fb0c f000 	mul.w	r0, ip, r0
		num += in_range / 2;
    1c8e:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
	if (out_range >= 0) {
    1c92:	db09      	blt.n	1ca8 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x30>
		num += in_range / 2;
    1c94:	eb00 0061 	add.w	r0, r0, r1, asr #1
	} else {
		num -= in_range / 2;
	}
	long result = num / in_range + out_min;
	if (out_range >= 0) {
		if (in_range * num < 0) return result - 1;
    1c98:	fb00 f102 	mul.w	r1, r0, r2
    1c9c:	2900      	cmp	r1, #0
	long result = num / in_range + out_min;
    1c9e:	fb90 f0f2 	sdiv	r0, r0, r2
    1ca2:	4418      	add	r0, r3
		if (in_range * num < 0) return result - 1;
    1ca4:	db10      	blt.n	1cc8 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x50>
		if (in_range * num >= 0) return result + 1;
	}
	return result;
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
}
    1ca6:	4770      	bx	lr
		num -= in_range / 2;
    1ca8:	eba0 0061 	sub.w	r0, r0, r1, asr #1
		if (in_range * num >= 0) return result + 1;
    1cac:	fb00 f102 	mul.w	r1, r0, r2
    1cb0:	2900      	cmp	r1, #0
	long result = num / in_range + out_min;
    1cb2:	fb90 f0f2 	sdiv	r0, r0, r2
    1cb6:	4418      	add	r0, r3
		if (in_range * num >= 0) return result + 1;
    1cb8:	dbf5      	blt.n	1ca6 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x2e>
    1cba:	3001      	adds	r0, #1
}
    1cbc:	4770      	bx	lr
	if (in_range == 0) return out_min + out_range / 2;
    1cbe:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
    1cc2:	eb03 006c 	add.w	r0, r3, ip, asr #1
    1cc6:	4770      	bx	lr
		if (in_range * num < 0) return result - 1;
    1cc8:	3801      	subs	r0, #1
    1cca:	4770      	bx	lr

00001ccc <loadSettings()>:
int menuload = 0;
int debugdigits = 2;  //amount of digits behind decimal for voltage reading


ADC *adc = new ADC();  // adc object
void loadSettings() {
    1ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Logger::console(0, "Resetting to factory defaults");
    1cd0:	494a      	ldr	r1, [pc, #296]	; (1dfc <loadSettings()+0x130>)
  settings.ChargeHys = 0.2f;  // voltage drop required for charger to kick back on
  settings.WarnOff = 0.1f;    //voltage offset to raise a warning
  settings.DischVsetpoint = 3.2f;
  settings.CellGap = 0.2f;  //max delta between high and low cell
  settings.OverTSetpoint = 65.0f;
  settings.UnderTSetpoint = -10.0f;
    1cd2:	4f4b      	ldr	r7, [pc, #300]	; (1e00 <loadSettings()+0x134>)
  settings.OverVSetpoint = 4.2f;
    1cd4:	4c4b      	ldr	r4, [pc, #300]	; (1e04 <loadSettings()+0x138>)
  settings.conthold = 50;         //holding duty cycle for contactor 0-255
  settings.Precurrent = 1000;     //ma before closing main contator
  settings.convhigh = 58;         // mV/A current sensor high range channel
  settings.convlow = 643;         // mV/A current sensor low range channel
  settings.changecur = 20000;     //mA change overpoint
  settings.offset1 = 1750;        //mV mid point of channel 1
    1cd6:	f8df 8130 	ldr.w	r8, [pc, #304]	; 1e08 <loadSettings()+0x13c>
  Logger::console(0, "Resetting to factory defaults");
    1cda:	2000      	movs	r0, #0
    1cdc:	f7ff ffa6 	bl	1c2c <Logger::console(bool, char*, ...)>
  settings.version = EEPROM_VERSION;
    1ce0:	4b4a      	ldr	r3, [pc, #296]	; (1e0c <loadSettings()+0x140>)
  settings.ChargeHys = 0.2f;  // voltage drop required for charger to kick back on
    1ce2:	484b      	ldr	r0, [pc, #300]	; (1e10 <loadSettings()+0x144>)
  settings.UnderTSetpoint = -10.0f;
    1ce4:	62df      	str	r7, [r3, #44]	; 0x2c
  settings.ChargeTSetpoint = 0.0f;
    1ce6:	2700      	movs	r7, #0
    1ce8:	631f      	str	r7, [r3, #48]	; 0x30
  settings.DisTSetpoint = 40.0f;
    1cea:	4f4a      	ldr	r7, [pc, #296]	; (1e14 <loadSettings()+0x148>)
  settings.OverVSetpoint = 4.2f;
    1cec:	60dc      	str	r4, [r3, #12]
  settings.DisTSetpoint = 40.0f;
    1cee:	635f      	str	r7, [r3, #52]	; 0x34
  settings.UnderVSetpoint = 3.0f;
    1cf0:	4c49      	ldr	r4, [pc, #292]	; (1e18 <loadSettings()+0x14c>)
  settings.WarnToff = 5.0f;   //temp offset before raising warning
    1cf2:	4f4a      	ldr	r7, [pc, #296]	; (1e1c <loadSettings()+0x150>)
  settings.UnderVSetpoint = 3.0f;
    1cf4:	611c      	str	r4, [r3, #16]
  settings.batteryID = 0x01;  //in the future should be 0xFF to force it to ask for an address
    1cf6:	f240 2901 	movw	r9, #513	; 0x201
  settings.ChargeVsetpoint = 4.1f;
    1cfa:	4c49      	ldr	r4, [pc, #292]	; (1e20 <loadSettings()+0x154>)
  settings.WarnToff = 5.0f;   //temp offset before raising warning
    1cfc:	639f      	str	r7, [r3, #56]	; 0x38
  settings.batteryID = 0x01;  //in the future should be 0xFF to force it to ask for an address
    1cfe:	f8a3 9008 	strh.w	r9, [r3, #8]
  settings.canSpeed = 125000;
    1d02:	4f48      	ldr	r7, [pc, #288]	; (1e24 <loadSettings()+0x158>)
  settings.ChargeVsetpoint = 4.1f;
    1d04:	615c      	str	r4, [r3, #20]
  settings.Scells = 12;             //Cells in series
    1d06:	f04f 090c 	mov.w	r9, #12
  settings.WarnOff = 0.1f;    //voltage offset to raise a warning
    1d0a:	4c47      	ldr	r4, [pc, #284]	; (1e28 <loadSettings()+0x15c>)
  settings.canSpeed = 125000;
    1d0c:	605f      	str	r7, [r3, #4]
  settings.Scells = 12;             //Cells in series
    1d0e:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
  settings.StoreVsetpoint = 3.8;    // V storage mode charge max
    1d12:	4f46      	ldr	r7, [pc, #280]	; (1e2c <loadSettings()+0x160>)
  settings.WarnOff = 0.1f;    //voltage offset to raise a warning
    1d14:	625c      	str	r4, [r3, #36]	; 0x24
  settings.socvolt[0] = 3100;       //Voltage and SOC curve for voltage based SOC calc
    1d16:	f640 491c 	movw	r9, #3100	; 0xc1c
  settings.DischVsetpoint = 3.2f;
    1d1a:	4c45      	ldr	r4, [pc, #276]	; (1e30 <loadSettings()+0x164>)
  settings.StoreVsetpoint = 3.8;    // V storage mode charge max
    1d1c:	621f      	str	r7, [r3, #32]
  settings.version = EEPROM_VERSION;
    1d1e:	f240 2512 	movw	r5, #530	; 0x212
  settings.IgnoreVolt = 0.5;  //
    1d22:	f04f 577c 	mov.w	r7, #1056964608	; 0x3f000000
  settings.socvolt[0] = 3100;       //Voltage and SOC curve for voltage based SOC calc
    1d26:	f8c3 9068 	str.w	r9, [r3, #104]	; 0x68
  settings.socvolt[1] = 10;         //Voltage and SOC curve for voltage based SOC calc
    1d2a:	f04f 090a 	mov.w	r9, #10
  settings.version = EEPROM_VERSION;
    1d2e:	801d      	strh	r5, [r3, #0]
  settings.DischVsetpoint = 3.2f;
    1d30:	619c      	str	r4, [r3, #24]
  settings.chargecurrentmax = 300;  //max charge current in 0.1A
    1d32:	f44f 7596 	mov.w	r5, #300	; 0x12c
  settings.OverTSetpoint = 65.0f;
    1d36:	4c3f      	ldr	r4, [pc, #252]	; (1e34 <loadSettings()+0x168>)
  settings.IgnoreVolt = 0.5;  //
    1d38:	645f      	str	r7, [r3, #68]	; 0x44
  settings.socvolt[1] = 10;         //Voltage and SOC curve for voltage based SOC calc
    1d3a:	f8c3 906c 	str.w	r9, [r3, #108]	; 0x6c
  settings.balanceVoltage = 3.9f;
    1d3e:	4f3e      	ldr	r7, [pc, #248]	; (1e38 <loadSettings()+0x16c>)
  settings.ChargeHys = 0.2f;  // voltage drop required for charger to kick back on
    1d40:	61d8      	str	r0, [r3, #28]
  settings.socvolt[2] = 4100;       //Voltage and SOC curve for voltage based SOC calc
    1d42:	f241 0904 	movw	r9, #4100	; 0x1004
  settings.IgnoreTemp = 0;    // 0 - use both sensors, 1 or 2 only use that sensor
    1d46:	2200      	movs	r2, #0
  settings.Pstrings = 1;            // strings in parallel used to divide voltage of pack
    1d48:	2101      	movs	r1, #1
  settings.gaugehigh = 255;       //full fuel gauge pwm
  settings.ESSmode = 0;           //activate ESS mode
  settings.ncur = 1;              //number of multiples to use for current measurement
  settings.chargertype = 2;       // 1 - Brusa NLG5xx 2 - Volt charger 0 -No Charger
  settings.chargerspd = 100;      //ms per message
  settings.triptime = 5000;       //ms of allowed undervoltage before throwing open stopping discharge.
    1d4a:	f241 3688 	movw	r6, #5000	; 0x1388
  settings.OverTSetpoint = 65.0f;
    1d4e:	629c      	str	r4, [r3, #40]	; 0x28
  settings.CellGap = 0.2f;  //max delta between high and low cell
    1d50:	63d8      	str	r0, [r3, #60]	; 0x3c
  settings.CAP = 100;               //battery size in Ah
    1d52:	2464      	movs	r4, #100	; 0x64
  settings.chargecurrentend = 50;   //end charge current in 0.1A
    1d54:	2032      	movs	r0, #50	; 0x32
  settings.chargecurrentmax = 300;  //max charge current in 0.1A
    1d56:	65dd      	str	r5, [r3, #92]	; 0x5c
  settings.discurrentmax = 300;     // max discharge current in 0.1A
    1d58:	665d      	str	r5, [r3, #100]	; 0x64
  settings.balanceVoltage = 3.9f;
    1d5a:	649f      	str	r7, [r3, #72]	; 0x48
  settings.cursens = 2;
    1d5c:	2502      	movs	r5, #2
  settings.balanceHyst = 0.04f;
    1d5e:	4f37      	ldr	r7, [pc, #220]	; (1e3c <loadSettings()+0x170>)
  settings.socvolt[2] = 4100;       //Voltage and SOC curve for voltage based SOC calc
    1d60:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
  settings.socvolt[3] = 90;         //Voltage and SOC curve for voltage based SOC calc
    1d64:	f04f 095a 	mov.w	r9, #90	; 0x5a
  settings.IgnoreTemp = 0;    // 0 - use both sensors, 1 or 2 only use that sensor
    1d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  settings.Pstrings = 1;            // strings in parallel used to divide voltage of pack
    1d6c:	6559      	str	r1, [r3, #84]	; 0x54
  settings.invertcur = 0;           //Invert current sensor direction
    1d6e:	679a      	str	r2, [r3, #120]	; 0x78
  settings.chargecurrentend = 50;   //end charge current in 0.1A
    1d70:	6618      	str	r0, [r3, #96]	; 0x60
  settings.CAP = 100;               //battery size in Ah
    1d72:	659c      	str	r4, [r3, #88]	; 0x58
  settings.balanceHyst = 0.04f;
    1d74:	64df      	str	r7, [r3, #76]	; 0x4c
  settings.triptime = 5000;       //ms of allowed undervoltage before throwing open stopping discharge.
    1d76:	f8a3 60ce 	strh.w	r6, [r3, #206]	; 0xce
  settings.socvolt[3] = 90;         //Voltage and SOC curve for voltage based SOC calc
    1d7a:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
  settings.cursens = 2;
    1d7e:	67dd      	str	r5, [r3, #124]	; 0x7c
  settings.voltsoc = 0;           //SOC purely voltage based
    1d80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  settings.ESSmode = 0;           //activate ESS mode
    1d84:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  settings.gaugehigh = 255;       //full fuel gauge pwm
    1d88:	22ff      	movs	r2, #255	; 0xff
    1d8a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  settings.CurDead = 5;           // mV of dead band on current sensor
    1d8e:	2205      	movs	r2, #5
  settings.chargerspd = 100;      //ms per message
    1d90:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
  settings.conthold = 50;         //holding duty cycle for contactor 0-255
    1d94:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  settings.ChargerDirect = 1;     //1 - charger is always connected to HV battery // 0 - Charger is behind the contactors
    1d98:	f240 1401 	movw	r4, #257	; 0x101
  settings.gaugelow = 50;         //empty fuel gauge pwm
    1d9c:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
  settings.CurDead = 5;           // mV of dead band on current sensor
    1da0:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
  settings.disp = 1;              // 1 - display is used 0 - mirror serial data onto serial bus
  settings.SerialCan = 1;         // 1- serial can adapter used 0- Not used
  settings.SerialCanSpeed = 500;  //serial can adapter speed
  settings.DCDCreq = 140;         //requested DCDC voltage output in 0.1V
    1da4:	208c      	movs	r0, #140	; 0x8c
  settings.SerialCanBaud = 19200;
    1da6:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
  settings.convhigh = 58;         // mV/A current sensor high range channel
    1daa:	4f25      	ldr	r7, [pc, #148]	; (1e40 <loadSettings()+0x174>)
  settings.convlow = 643;         // mV/A current sensor low range channel
    1dac:	f8df e094 	ldr.w	lr, [pc, #148]	; 1e44 <loadSettings()+0x178>
  settings.DisTaper = 0.3f;         //V offset to bring in discharge taper to Zero Amps at settings.DischVsetpoint
    1db0:	f8df c094 	ldr.w	ip, [pc, #148]	; 1e48 <loadSettings()+0x17c>
  settings.ncur = 1;              //number of multiples to use for current measurement
    1db4:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
  settings.ChargerDirect = 1;     //1 - charger is always connected to HV battery // 0 - Charger is behind the contactors
    1db8:	f8a3 40c0 	strh.w	r4, [r3, #192]	; 0xc0
  settings.SerialCan = 1;         // 1- serial can adapter used 0- Not used
    1dbc:	f883 10c2 	strb.w	r1, [r3, #194]	; 0xc2
  settings.SerialCanSpeed = 500;  //serial can adapter speed
    1dc0:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
  settings.SerialCanBaud = 19200;
    1dc4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  settings.changecur = 20000;     //mA change overpoint
    1dc8:	f644 6120 	movw	r1, #20000	; 0x4e20
  settings.Precurrent = 1000;     //ma before closing main contator
    1dcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  settings.DCDCreq = 140;         //requested DCDC voltage output in 0.1V
    1dd0:	f883 00cc 	strb.w	r0, [r3, #204]	; 0xcc
  settings.offset1 = 1750;        //mV mid point of channel 1
    1dd4:	f8c3 8084 	str.w	r8, [r3, #132]	; 0x84
  settings.convhigh = 58;         // mV/A current sensor high range channel
    1dd8:	f8c3 7088 	str.w	r7, [r3, #136]	; 0x88
  settings.convlow = 643;         // mV/A current sensor low range channel
    1ddc:	f8c3 e08c 	str.w	lr, [r3, #140]	; 0x8c
  settings.Pretime = 5000;        //ms of precharge time
    1de0:	f8c3 6094 	str.w	r6, [r3, #148]	; 0x94
  settings.chargertype = 2;       // 1 - Brusa NLG5xx 2 - Volt charger 0 -No Charger
    1de4:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
  settings.DisTaper = 0.3f;         //V offset to bring in discharge taper to Zero Amps at settings.DischVsetpoint
    1de8:	f8c3 c0bc 	str.w	ip, [r3, #188]	; 0xbc
  settings.SerialCanSpeed = 500;  //serial can adapter speed
    1dec:	f8a3 40c4 	strh.w	r4, [r3, #196]	; 0xc4
  settings.changecur = 20000;     //mA change overpoint
    1df0:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  settings.Precurrent = 1000;     //ma before closing main contator
    1df4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
    1df8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1dfc:	00012dc4 	.word	0x00012dc4
    1e00:	c1200000 	.word	0xc1200000
    1e04:	40866666 	.word	0x40866666
    1e08:	06d606d6 	.word	0x06d606d6
    1e0c:	1fffb204 	.word	0x1fffb204
    1e10:	3e4ccccd 	.word	0x3e4ccccd
    1e14:	42200000 	.word	0x42200000
    1e18:	40400000 	.word	0x40400000
    1e1c:	40a00000 	.word	0x40a00000
    1e20:	40833333 	.word	0x40833333
    1e24:	0001e848 	.word	0x0001e848
    1e28:	3dcccccd 	.word	0x3dcccccd
    1e2c:	40733333 	.word	0x40733333
    1e30:	404ccccd 	.word	0x404ccccd
    1e34:	42820000 	.word	0x42820000
    1e38:	4079999a 	.word	0x4079999a
    1e3c:	3d23d70a 	.word	0x3d23d70a
    1e40:	42680000 	.word	0x42680000
    1e44:	4420c000 	.word	0x4420c000
    1e48:	3e99999a 	.word	0x3e99999a

00001e4c <alarmupdate()>:
      }
    }
  }
}

void alarmupdate() {
    1e4c:	b570      	push	{r4, r5, r6, lr}
  alarm[0] = 0x00;
    1e4e:	4d45      	ldr	r5, [pc, #276]	; (1f64 <alarmupdate()+0x118>)
  if (settings.OverVSetpoint < bms.getHighCellVolt()) {
    1e50:	4c45      	ldr	r4, [pc, #276]	; (1f68 <alarmupdate()+0x11c>)
    1e52:	4846      	ldr	r0, [pc, #280]	; (1f6c <alarmupdate()+0x120>)
    1e54:	68e6      	ldr	r6, [r4, #12]
  alarm[0] = 0x00;
    1e56:	2300      	movs	r3, #0
    1e58:	702b      	strb	r3, [r5, #0]
  if (settings.OverVSetpoint < bms.getHighCellVolt()) {
    1e5a:	f7fe fedf 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    1e5e:	4601      	mov	r1, r0
    1e60:	4630      	mov	r0, r6
    1e62:	f00a f8d1 	bl	c008 <__aeabi_fcmplt>
    1e66:	b108      	cbz	r0, 1e6c <alarmupdate()+0x20>
    alarm[0] = 0x04;
    1e68:	2304      	movs	r3, #4
    1e6a:	702b      	strb	r3, [r5, #0]
  }
  if (bms.getLowCellVolt() < settings.UnderVSetpoint) {
    1e6c:	483f      	ldr	r0, [pc, #252]	; (1f6c <alarmupdate()+0x120>)
    1e6e:	f7fe fead 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    1e72:	6921      	ldr	r1, [r4, #16]
    1e74:	f00a f8c8 	bl	c008 <__aeabi_fcmplt>
    1e78:	b118      	cbz	r0, 1e82 <alarmupdate()+0x36>
    alarm[0] |= 0x10;
    1e7a:	782b      	ldrb	r3, [r5, #0]
    1e7c:	f043 0310 	orr.w	r3, r3, #16
    1e80:	702b      	strb	r3, [r5, #0]
  }
  if (bms.getHighTemperature() > settings.OverTSetpoint) {
    1e82:	483a      	ldr	r0, [pc, #232]	; (1f6c <alarmupdate()+0x120>)
    1e84:	f7fe ff7e 	bl	d84 <BMSModuleManager::getHighTemperature()>
    1e88:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1e8a:	f00a f8db 	bl	c044 <__aeabi_fcmpgt>
    1e8e:	b118      	cbz	r0, 1e98 <alarmupdate()+0x4c>
    alarm[0] |= 0x40;
    1e90:	782b      	ldrb	r3, [r5, #0]
    1e92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1e96:	702b      	strb	r3, [r5, #0]
  }
  alarm[1] = 0;
    1e98:	2300      	movs	r3, #0
  if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    1e9a:	4834      	ldr	r0, [pc, #208]	; (1f6c <alarmupdate()+0x120>)
  alarm[1] = 0;
    1e9c:	706b      	strb	r3, [r5, #1]
  if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    1e9e:	f7fe ff73 	bl	d88 <BMSModuleManager::getLowTemperature()>
    1ea2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1ea4:	f00a f8b0 	bl	c008 <__aeabi_fcmplt>
    1ea8:	b108      	cbz	r0, 1eae <alarmupdate()+0x62>
    alarm[1] = 0x01;
    1eaa:	2301      	movs	r3, #1
    1eac:	706b      	strb	r3, [r5, #1]
  }
  alarm[3] = 0;
    1eae:	2300      	movs	r3, #0
    1eb0:	70eb      	strb	r3, [r5, #3]
  if ((bms.getHighCellVolt() - bms.getLowCellVolt()) > settings.CellGap) {
    1eb2:	482e      	ldr	r0, [pc, #184]	; (1f6c <alarmupdate()+0x120>)
    1eb4:	f7fe feb2 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    1eb8:	4606      	mov	r6, r0
    1eba:	482c      	ldr	r0, [pc, #176]	; (1f6c <alarmupdate()+0x120>)
    1ebc:	f7fe fe86 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    1ec0:	4601      	mov	r1, r0
    1ec2:	4630      	mov	r0, r6
    1ec4:	f009 fdf8 	bl	bab8 <__aeabi_fsub>
    1ec8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    1eca:	f00a f8bb 	bl	c044 <__aeabi_fcmpgt>
    1ece:	b108      	cbz	r0, 1ed4 <alarmupdate()+0x88>
    alarm[3] = 0x01;
    1ed0:	2301      	movs	r3, #1
    1ed2:	70eb      	strb	r3, [r5, #3]
  }

  ///warnings///
  warning[0] = 0;
    1ed4:	4d26      	ldr	r5, [pc, #152]	; (1f70 <alarmupdate()+0x124>)

  if (bms.getHighCellVolt() > (settings.OverVSetpoint - settings.WarnOff)) {
    1ed6:	4825      	ldr	r0, [pc, #148]	; (1f6c <alarmupdate()+0x120>)
  warning[0] = 0;
    1ed8:	2300      	movs	r3, #0
    1eda:	702b      	strb	r3, [r5, #0]
  if (bms.getHighCellVolt() > (settings.OverVSetpoint - settings.WarnOff)) {
    1edc:	f7fe fe9e 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    1ee0:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1ee2:	4606      	mov	r6, r0
    1ee4:	68e0      	ldr	r0, [r4, #12]
    1ee6:	f009 fde7 	bl	bab8 <__aeabi_fsub>
    1eea:	4601      	mov	r1, r0
    1eec:	4630      	mov	r0, r6
    1eee:	f00a f8a9 	bl	c044 <__aeabi_fcmpgt>
    1ef2:	b108      	cbz	r0, 1ef8 <alarmupdate()+0xac>
    warning[0] = 0x04;
    1ef4:	2304      	movs	r3, #4
    1ef6:	702b      	strb	r3, [r5, #0]
  }
  if (bms.getLowCellVolt() < (settings.UnderVSetpoint + settings.WarnOff)) {
    1ef8:	481c      	ldr	r0, [pc, #112]	; (1f6c <alarmupdate()+0x120>)
    1efa:	f7fe fe67 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    1efe:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1f00:	4606      	mov	r6, r0
    1f02:	6920      	ldr	r0, [r4, #16]
    1f04:	f009 fdda 	bl	babc <__addsf3>
    1f08:	4601      	mov	r1, r0
    1f0a:	4630      	mov	r0, r6
    1f0c:	f00a f87c 	bl	c008 <__aeabi_fcmplt>
    1f10:	b118      	cbz	r0, 1f1a <alarmupdate()+0xce>
    warning[0] |= 0x10;
    1f12:	782b      	ldrb	r3, [r5, #0]
    1f14:	f043 0310 	orr.w	r3, r3, #16
    1f18:	702b      	strb	r3, [r5, #0]
  }

  if (bms.getHighTemperature() > (settings.OverTSetpoint - settings.WarnToff)) {
    1f1a:	4814      	ldr	r0, [pc, #80]	; (1f6c <alarmupdate()+0x120>)
    1f1c:	f7fe ff32 	bl	d84 <BMSModuleManager::getHighTemperature()>
    1f20:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    1f22:	4606      	mov	r6, r0
    1f24:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    1f26:	f009 fdc7 	bl	bab8 <__aeabi_fsub>
    1f2a:	4601      	mov	r1, r0
    1f2c:	4630      	mov	r0, r6
    1f2e:	f00a f889 	bl	c044 <__aeabi_fcmpgt>
    1f32:	b118      	cbz	r0, 1f3c <alarmupdate()+0xf0>
    warning[0] |= 0x40;
    1f34:	782b      	ldrb	r3, [r5, #0]
    1f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1f3a:	702b      	strb	r3, [r5, #0]
  }
  warning[1] = 0;
    1f3c:	2300      	movs	r3, #0
    1f3e:	706b      	strb	r3, [r5, #1]
  if (bms.getLowTemperature() < (settings.UnderTSetpoint + settings.WarnToff)) {
    1f40:	480a      	ldr	r0, [pc, #40]	; (1f6c <alarmupdate()+0x120>)
    1f42:	f7fe ff21 	bl	d88 <BMSModuleManager::getLowTemperature()>
    1f46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    1f48:	4603      	mov	r3, r0
    1f4a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    1f4c:	461c      	mov	r4, r3
    1f4e:	f009 fdb5 	bl	babc <__addsf3>
    1f52:	4601      	mov	r1, r0
    1f54:	4620      	mov	r0, r4
    1f56:	f00a f857 	bl	c008 <__aeabi_fcmplt>
    1f5a:	b108      	cbz	r0, 1f60 <alarmupdate()+0x114>
    warning[1] = 0x01;
    1f5c:	2301      	movs	r3, #1
    1f5e:	706b      	strb	r3, [r5, #1]
  }
}
    1f60:	bd70      	pop	{r4, r5, r6, pc}
    1f62:	bf00      	nop
    1f64:	1fff8fd4 	.word	0x1fff8fd4
    1f68:	1fffb204 	.word	0x1fffb204
    1f6c:	1fff8fe0 	.word	0x1fff8fe0
    1f70:	1fffb2dc 	.word	0x1fffb2dc

00001f74 <gaugeupdate()>:

void gaugeupdate() {
    1f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (gaugedebug == 1) {
    1f78:	4c7f      	ldr	r4, [pc, #508]	; (2178 <gaugeupdate()+0x204>)
    1f7a:	6823      	ldr	r3, [r4, #0]
    1f7c:	2b01      	cmp	r3, #1
void gaugeupdate() {
    1f7e:	b082      	sub	sp, #8
  if (gaugedebug == 1) {
    1f80:	d049      	beq.n	2016 <gaugeupdate()+0xa2>
    SERIALCONSOLE.print(SOCtest * 0.1);
    SERIALCONSOLE.print("  fuel pwm : ");
    SERIALCONSOLE.print(map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    SERIALCONSOLE.println("  ");
  }
  if (gaugedebug == 2) {
    1f82:	2b02      	cmp	r3, #2
    1f84:	f000 80c3 	beq.w	210e <gaugeupdate()+0x19a>
    SOCtest = 0;
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
  }
  if (gaugedebug == 3) {
    1f88:	2b03      	cmp	r3, #3
    1f8a:	d003      	beq.n	1f94 <gaugeupdate()+0x20>
    SOCtest = 1000;
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
  }
  if (gaugedebug == 0) {
    1f8c:	b32b      	cbz	r3, 1fda <gaugeupdate()+0x66>
    analogWrite(OUT8, map(SOC, 0, 100, settings.gaugelow, settings.gaugehigh));
  }
}
    1f8e:	b002      	add	sp, #8
    1f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SOCtest = 1000;
    1f94:	4b79      	ldr	r3, [pc, #484]	; (217c <gaugeupdate()+0x208>)
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    1f96:	4e7a      	ldr	r6, [pc, #488]	; (2180 <gaugeupdate()+0x20c>)
    SOCtest = 1000;
    1f98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1f9c:	601a      	str	r2, [r3, #0]
// when the input is a float or double, do all math using the input's type
template <class T, class A, class B, class C, class D>
T map(T x, A in_min, B in_max, C out_min, D out_max, typename std::enable_if<std::is_floating_point<T>::value >::type* = 0)
{
	return (x - (T)in_min) * ((T)out_max - (T)out_min) / ((T)in_max - (T)in_min) + (T)out_min;
    1f9e:	f8d6 00a4 	ldr.w	r0, [r6, #164]	; 0xa4
    1fa2:	f009 fe3f 	bl	bc24 <__aeabi_i2f>
    1fa6:	4605      	mov	r5, r0
    1fa8:	f8d6 00a8 	ldr.w	r0, [r6, #168]	; 0xa8
    1fac:	f009 fe3a 	bl	bc24 <__aeabi_i2f>
    1fb0:	4629      	mov	r1, r5
    1fb2:	f009 fd81 	bl	bab8 <__aeabi_fsub>
    1fb6:	4973      	ldr	r1, [pc, #460]	; (2184 <gaugeupdate()+0x210>)
    1fb8:	f009 fe88 	bl	bccc <__aeabi_fmul>
    1fbc:	4971      	ldr	r1, [pc, #452]	; (2184 <gaugeupdate()+0x210>)
    1fbe:	f009 ff39 	bl	be34 <__aeabi_fdiv>
    1fc2:	4629      	mov	r1, r5
    1fc4:	f009 fd7a 	bl	babc <__addsf3>
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    1fc8:	f00a f846 	bl	c058 <__aeabi_f2iz>
    1fcc:	4601      	mov	r1, r0
    1fce:	2006      	movs	r0, #6
    1fd0:	f006 ffae 	bl	8f30 <analogWrite>
  if (gaugedebug == 0) {
    1fd4:	6823      	ldr	r3, [r4, #0]
    1fd6:	2b00      	cmp	r3, #0
    1fd8:	d1d9      	bne.n	1f8e <gaugeupdate()+0x1a>
    analogWrite(OUT8, map(SOC, 0, 100, settings.gaugelow, settings.gaugehigh));
    1fda:	4b69      	ldr	r3, [pc, #420]	; (2180 <gaugeupdate()+0x20c>)
    1fdc:	486a      	ldr	r0, [pc, #424]	; (2188 <gaugeupdate()+0x214>)
    1fde:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
	long out_range = out_max - out_min;
    1fe2:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
	long num = (x - in_min) * out_range;
    1fe6:	6803      	ldr	r3, [r0, #0]
	long result = num / in_range + out_min;
    1fe8:	4868      	ldr	r0, [pc, #416]	; (218c <gaugeupdate()+0x218>)
	long out_range = out_max - out_min;
    1fea:	1a52      	subs	r2, r2, r1
	if (out_range >= 0) {
    1fec:	2a00      	cmp	r2, #0
	long num = (x - in_min) * out_range;
    1fee:	fb02 f303 	mul.w	r3, r2, r3
	if (out_range >= 0) {
    1ff2:	f2c0 80b2 	blt.w	215a <gaugeupdate()+0x1e6>
		num += in_range / 2;
    1ff6:	3332      	adds	r3, #50	; 0x32
	long result = num / in_range + out_min;
    1ff8:	fb80 2003 	smull	r2, r0, r0, r3
    1ffc:	17da      	asrs	r2, r3, #31
    1ffe:	ebc2 1260 	rsb	r2, r2, r0, asr #5
		if (in_range * num < 0) return result - 1;
    2002:	2b00      	cmp	r3, #0
	long result = num / in_range + out_min;
    2004:	4411      	add	r1, r2
		if (in_range * num < 0) return result - 1;
    2006:	f2c0 80b4 	blt.w	2172 <gaugeupdate()+0x1fe>
    200a:	2006      	movs	r0, #6
}
    200c:	b002      	add	sp, #8
    200e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    analogWrite(OUT8, map(SOC, 0, 100, settings.gaugelow, settings.gaugehigh));
    2012:	f006 bf8d 	b.w	8f30 <analogWrite>
    SOCtest = SOCtest + 10;
    2016:	4f59      	ldr	r7, [pc, #356]	; (217c <gaugeupdate()+0x208>)
    2018:	6838      	ldr	r0, [r7, #0]
    201a:	300a      	adds	r0, #10
    if (SOCtest > 1000) {
    201c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    2020:	f300 8096 	bgt.w	2150 <gaugeupdate()+0x1dc>
    SOCtest = SOCtest + 10;
    2024:	6038      	str	r0, [r7, #0]
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    2026:	f009 fdfd 	bl	bc24 <__aeabi_i2f>
    202a:	4959      	ldr	r1, [pc, #356]	; (2190 <gaugeupdate()+0x21c>)
    202c:	f009 fe4e 	bl	bccc <__aeabi_fmul>
    2030:	4680      	mov	r8, r0
    2032:	4e53      	ldr	r6, [pc, #332]	; (2180 <gaugeupdate()+0x20c>)
	return (x - (T)in_min) * ((T)out_max - (T)out_min) / ((T)in_max - (T)in_min) + (T)out_min;
    2034:	f8d6 00a4 	ldr.w	r0, [r6, #164]	; 0xa4
    2038:	f009 fdf4 	bl	bc24 <__aeabi_i2f>
    203c:	4605      	mov	r5, r0
    203e:	f8d6 00a8 	ldr.w	r0, [r6, #168]	; 0xa8
    2042:	f009 fdef 	bl	bc24 <__aeabi_i2f>
    2046:	4629      	mov	r1, r5
    2048:	f009 fd36 	bl	bab8 <__aeabi_fsub>
    204c:	4641      	mov	r1, r8
    204e:	f009 fe3d 	bl	bccc <__aeabi_fmul>
    2052:	494c      	ldr	r1, [pc, #304]	; (2184 <gaugeupdate()+0x210>)
    2054:	f009 feee 	bl	be34 <__aeabi_fdiv>
    2058:	4629      	mov	r1, r5
    205a:	f009 fd2f 	bl	babc <__addsf3>
    205e:	f009 fffb 	bl	c058 <__aeabi_f2iz>
    2062:	4601      	mov	r1, r0
    2064:	2006      	movs	r0, #6
    2066:	f006 ff63 	bl	8f30 <analogWrite>
    206a:	2102      	movs	r1, #2
    206c:	4849      	ldr	r0, [pc, #292]	; (2194 <gaugeupdate()+0x220>)
    206e:	f008 ff4d 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    2072:	4849      	ldr	r0, [pc, #292]	; (2198 <gaugeupdate()+0x224>)
    2074:	f006 faa0 	bl	85b8 <Print::println()>
    2078:	2106      	movs	r1, #6
    207a:	4848      	ldr	r0, [pc, #288]	; (219c <gaugeupdate()+0x228>)
    207c:	f008 ff46 	bl	af0c <usb_serial_write>
    SERIALCONSOLE.print(SOCtest * 0.1);
    2080:	6838      	ldr	r0, [r7, #0]
    2082:	f009 fdcf 	bl	bc24 <__aeabi_i2f>
    2086:	4942      	ldr	r1, [pc, #264]	; (2190 <gaugeupdate()+0x21c>)
    2088:	f009 fe20 	bl	bccc <__aeabi_fmul>
    208c:	f009 fbfa 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2090:	f04f 0802 	mov.w	r8, #2
    2094:	4602      	mov	r2, r0
    2096:	460b      	mov	r3, r1
    2098:	483f      	ldr	r0, [pc, #252]	; (2198 <gaugeupdate()+0x224>)
    209a:	f8cd 8000 	str.w	r8, [sp]
    209e:	f006 faaf 	bl	8600 <Print::printFloat(double, unsigned char)>
    20a2:	210d      	movs	r1, #13
    20a4:	483e      	ldr	r0, [pc, #248]	; (21a0 <gaugeupdate()+0x22c>)
    20a6:	f008 ff31 	bl	af0c <usb_serial_write>
    20aa:	f8d6 00a4 	ldr.w	r0, [r6, #164]	; 0xa4
    20ae:	f009 fdb9 	bl	bc24 <__aeabi_i2f>
    20b2:	4605      	mov	r5, r0
    SERIALCONSOLE.print(map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    20b4:	6838      	ldr	r0, [r7, #0]
    20b6:	f009 fdb5 	bl	bc24 <__aeabi_i2f>
    20ba:	4935      	ldr	r1, [pc, #212]	; (2190 <gaugeupdate()+0x21c>)
    20bc:	f009 fe06 	bl	bccc <__aeabi_fmul>
    20c0:	4603      	mov	r3, r0
    20c2:	f8d6 00a8 	ldr.w	r0, [r6, #168]	; 0xa8
    20c6:	461e      	mov	r6, r3
    20c8:	f009 fdac 	bl	bc24 <__aeabi_i2f>
    20cc:	4629      	mov	r1, r5
    20ce:	f009 fcf3 	bl	bab8 <__aeabi_fsub>
    20d2:	4601      	mov	r1, r0
    20d4:	4630      	mov	r0, r6
    20d6:	f009 fdf9 	bl	bccc <__aeabi_fmul>
    20da:	492a      	ldr	r1, [pc, #168]	; (2184 <gaugeupdate()+0x210>)
    20dc:	f009 feaa 	bl	be34 <__aeabi_fdiv>
    20e0:	4629      	mov	r1, r5
    20e2:	f009 fceb 	bl	babc <__addsf3>
    20e6:	f009 fbcd 	bl	b884 <__aeabi_f2d>
    20ea:	f8cd 8000 	str.w	r8, [sp]
    20ee:	460b      	mov	r3, r1
    20f0:	4602      	mov	r2, r0
    20f2:	4829      	ldr	r0, [pc, #164]	; (2198 <gaugeupdate()+0x224>)
    20f4:	f006 fa84 	bl	8600 <Print::printFloat(double, unsigned char)>
    20f8:	4641      	mov	r1, r8
    20fa:	4826      	ldr	r0, [pc, #152]	; (2194 <gaugeupdate()+0x220>)
    20fc:	f008 ff06 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    2100:	4825      	ldr	r0, [pc, #148]	; (2198 <gaugeupdate()+0x224>)
    2102:	f006 fa59 	bl	85b8 <Print::println()>
  if (gaugedebug == 2) {
    2106:	6823      	ldr	r3, [r4, #0]
    2108:	2b02      	cmp	r3, #2
    210a:	f47f af3d 	bne.w	1f88 <gaugeupdate()+0x14>
    SOCtest = 0;
    210e:	4b1b      	ldr	r3, [pc, #108]	; (217c <gaugeupdate()+0x208>)
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    2110:	4e1b      	ldr	r6, [pc, #108]	; (2180 <gaugeupdate()+0x20c>)
    SOCtest = 0;
    2112:	2200      	movs	r2, #0
    2114:	601a      	str	r2, [r3, #0]
    2116:	f8d6 00a4 	ldr.w	r0, [r6, #164]	; 0xa4
    211a:	f009 fd83 	bl	bc24 <__aeabi_i2f>
    211e:	4605      	mov	r5, r0
    2120:	f8d6 00a8 	ldr.w	r0, [r6, #168]	; 0xa8
    2124:	f009 fd7e 	bl	bc24 <__aeabi_i2f>
    2128:	4629      	mov	r1, r5
    212a:	f009 fcc5 	bl	bab8 <__aeabi_fsub>
    212e:	2100      	movs	r1, #0
    2130:	f009 fdcc 	bl	bccc <__aeabi_fmul>
    2134:	4913      	ldr	r1, [pc, #76]	; (2184 <gaugeupdate()+0x210>)
    2136:	f009 fe7d 	bl	be34 <__aeabi_fdiv>
    213a:	4629      	mov	r1, r5
    213c:	f009 fcbe 	bl	babc <__addsf3>
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    2140:	f009 ff8a 	bl	c058 <__aeabi_f2iz>
    2144:	4601      	mov	r1, r0
    2146:	2006      	movs	r0, #6
    2148:	f006 fef2 	bl	8f30 <analogWrite>
  if (gaugedebug == 3) {
    214c:	6823      	ldr	r3, [r4, #0]
    214e:	e71b      	b.n	1f88 <gaugeupdate()+0x14>
      SOCtest = 0;
    2150:	2300      	movs	r3, #0
    2152:	f04f 0800 	mov.w	r8, #0
    2156:	603b      	str	r3, [r7, #0]
    2158:	e76b      	b.n	2032 <gaugeupdate()+0xbe>
		num -= in_range / 2;
    215a:	3b32      	subs	r3, #50	; 0x32
	long result = num / in_range + out_min;
    215c:	fb80 2003 	smull	r2, r0, r0, r3
    2160:	17da      	asrs	r2, r3, #31
    2162:	ebc2 1260 	rsb	r2, r2, r0, asr #5
		if (in_range * num >= 0) return result + 1;
    2166:	2b00      	cmp	r3, #0
	long result = num / in_range + out_min;
    2168:	4411      	add	r1, r2
		if (in_range * num >= 0) return result + 1;
    216a:	f6ff af4e 	blt.w	200a <gaugeupdate()+0x96>
    216e:	3101      	adds	r1, #1
    2170:	e74b      	b.n	200a <gaugeupdate()+0x96>
		if (in_range * num < 0) return result - 1;
    2172:	3901      	subs	r1, #1
    2174:	e749      	b.n	200a <gaugeupdate()+0x96>
    2176:	bf00      	nop
    2178:	1fffb114 	.word	0x1fffb114
    217c:	1fff8fc8 	.word	0x1fff8fc8
    2180:	1fffb204 	.word	0x1fffb204
    2184:	42c80000 	.word	0x42c80000
    2188:	1fff8724 	.word	0x1fff8724
    218c:	51eb851f 	.word	0x51eb851f
    2190:	3dcccccd 	.word	0x3dcccccd
    2194:	00012a24 	.word	0x00012a24
    2198:	1fff880c 	.word	0x1fff880c
    219c:	00012de4 	.word	0x00012de4
    21a0:	00012dec 	.word	0x00012dec

000021a4 <printbmsstat()>:

void printbmsstat() {
    21a4:	b570      	push	{r4, r5, r6, lr}
  SERIALCONSOLE.println();
    21a6:	48b2      	ldr	r0, [pc, #712]	; (2470 <printbmsstat()+0x2cc>)
  SERIALCONSOLE.println();
  SERIALCONSOLE.println();
  SERIALCONSOLE.print("BMS Status : ");
  if (settings.ESSmode == 1) {
    21a8:	4cb2      	ldr	r4, [pc, #712]	; (2474 <printbmsstat()+0x2d0>)
  SERIALCONSOLE.println();
    21aa:	f006 fa05 	bl	85b8 <Print::println()>
  SERIALCONSOLE.println();
    21ae:	48b0      	ldr	r0, [pc, #704]	; (2470 <printbmsstat()+0x2cc>)
    21b0:	f006 fa02 	bl	85b8 <Print::println()>
  SERIALCONSOLE.println();
    21b4:	48ae      	ldr	r0, [pc, #696]	; (2470 <printbmsstat()+0x2cc>)
    21b6:	f006 f9ff 	bl	85b8 <Print::println()>
    21ba:	48af      	ldr	r0, [pc, #700]	; (2478 <printbmsstat()+0x2d4>)
    21bc:	210d      	movs	r1, #13
    21be:	f008 fea5 	bl	af0c <usb_serial_write>
  if (settings.ESSmode == 1) {
    21c2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    21c6:	2b01      	cmp	r3, #1
    21c8:	d011      	beq.n	21ee <printbmsstat()+0x4a>
          SERIALCONSOLE.print(": Happy ");
        }
      }
    }
  } else {
    SERIALCONSOLE.print(bmsstatus);
    21ca:	4cac      	ldr	r4, [pc, #688]	; (247c <printbmsstat()+0x2d8>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    21cc:	48a8      	ldr	r0, [pc, #672]	; (2470 <printbmsstat()+0x2cc>)
    21ce:	7821      	ldrb	r1, [r4, #0]
    21d0:	2300      	movs	r3, #0
    21d2:	220a      	movs	r2, #10
    21d4:	f006 fa08 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    switch (bmsstatus) {
    21d8:	7823      	ldrb	r3, [r4, #0]
    21da:	2b05      	cmp	r3, #5
    21dc:	d84e      	bhi.n	227c <printbmsstat()+0xd8>
    21de:	e8df f013 	tbh	[pc, r3, lsl #1]
    21e2:	0102      	.short	0x0102
    21e4:	010c0107 	.word	0x010c0107
    21e8:	01160111 	.word	0x01160111
    21ec:	00f8      	.short	0x00f8
    21ee:	2109      	movs	r1, #9
    21f0:	48a3      	ldr	r0, [pc, #652]	; (2480 <printbmsstat()+0x2dc>)
    21f2:	f008 fe8b 	bl	af0c <usb_serial_write>
    if (bms.getLowCellVolt() < settings.UnderVSetpoint) {
    21f6:	48a3      	ldr	r0, [pc, #652]	; (2484 <printbmsstat()+0x2e0>)
    21f8:	f7fe fce8 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    21fc:	6921      	ldr	r1, [r4, #16]
    21fe:	f009 ff03 	bl	c008 <__aeabi_fcmplt>
    2202:	2800      	cmp	r0, #0
    2204:	f040 812a 	bne.w	245c <printbmsstat()+0x2b8>
    if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    2208:	489e      	ldr	r0, [pc, #632]	; (2484 <printbmsstat()+0x2e0>)
    220a:	f7fe fd07 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    220e:	68e1      	ldr	r1, [r4, #12]
    2210:	f009 ff18 	bl	c044 <__aeabi_fcmpgt>
    2214:	2800      	cmp	r0, #0
    2216:	f040 8167 	bne.w	24e8 <printbmsstat()+0x344>
    if ((bms.getHighCellVolt() - bms.getLowCellVolt()) > settings.CellGap) {
    221a:	489a      	ldr	r0, [pc, #616]	; (2484 <printbmsstat()+0x2e0>)
    221c:	f7fe fcfe 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    2220:	4605      	mov	r5, r0
    2222:	4898      	ldr	r0, [pc, #608]	; (2484 <printbmsstat()+0x2e0>)
    2224:	f7fe fcd2 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    2228:	4601      	mov	r1, r0
    222a:	4628      	mov	r0, r5
    222c:	f009 fc44 	bl	bab8 <__aeabi_fsub>
    2230:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    2232:	f009 ff07 	bl	c044 <__aeabi_fcmpgt>
    2236:	2800      	cmp	r0, #0
    2238:	f040 8115 	bne.w	2466 <printbmsstat()+0x2c2>
    if (bms.getAvgTemperature() > settings.OverTSetpoint) {
    223c:	4891      	ldr	r0, [pc, #580]	; (2484 <printbmsstat()+0x2e0>)
    223e:	f7fe fd45 	bl	ccc <BMSModuleManager::getAvgTemperature()>
    2242:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    2244:	f009 fefe 	bl	c044 <__aeabi_fcmpgt>
    2248:	2800      	cmp	r0, #0
    224a:	f040 8157 	bne.w	24fc <printbmsstat()+0x358>
    if (bms.getAvgTemperature() < settings.UnderTSetpoint) {
    224e:	488d      	ldr	r0, [pc, #564]	; (2484 <printbmsstat()+0x2e0>)
    2250:	f7fe fd3c 	bl	ccc <BMSModuleManager::getAvgTemperature()>
    2254:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    2256:	f009 fed7 	bl	c008 <__aeabi_fcmplt>
    225a:	2800      	cmp	r0, #0
    225c:	f040 8149 	bne.w	24f2 <printbmsstat()+0x34e>
    if (storagemode == 1) {
    2260:	4b89      	ldr	r3, [pc, #548]	; (2488 <printbmsstat()+0x2e4>)
      if (bms.getLowCellVolt() > settings.StoreVsetpoint) {
    2262:	4888      	ldr	r0, [pc, #544]	; (2484 <printbmsstat()+0x2e0>)
    if (storagemode == 1) {
    2264:	681b      	ldr	r3, [r3, #0]
    2266:	2b01      	cmp	r3, #1
    2268:	f000 80e8 	beq.w	243c <printbmsstat()+0x298>
      if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint) {
    226c:	f7fe fcae 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    2270:	6921      	ldr	r1, [r4, #16]
    2272:	f009 fee7 	bl	c044 <__aeabi_fcmpgt>
    2276:	2800      	cmp	r0, #0
    2278:	f040 80ce 	bne.w	2418 <printbmsstat()+0x274>
    227c:	2102      	movs	r1, #2
    227e:	4883      	ldr	r0, [pc, #524]	; (248c <printbmsstat()+0x2e8>)
    2280:	f008 fe44 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.print(ErrorReason);
        break;
    }
  }
  SERIALCONSOLE.print("  ");
  if (digitalRead(IN3) == HIGH) {
    2284:	2012      	movs	r0, #18
    2286:	f006 fff5 	bl	9274 <digitalRead>
    228a:	2801      	cmp	r0, #1
    228c:	f000 809c 	beq.w	23c8 <printbmsstat()+0x224>
    SERIALCONSOLE.print("| AC Present |");
  }
  if (digitalRead(IN1) == HIGH) {
    2290:	2011      	movs	r0, #17
    2292:	f006 ffef 	bl	9274 <digitalRead>
    2296:	2801      	cmp	r0, #1
    2298:	f000 8091 	beq.w	23be <printbmsstat()+0x21a>
    SERIALCONSOLE.print("| Key ON |");
  }
  if (balancecells == 1) {
    229c:	4b7c      	ldr	r3, [pc, #496]	; (2490 <printbmsstat()+0x2ec>)
    229e:	681b      	ldr	r3, [r3, #0]
    22a0:	2b01      	cmp	r3, #1
    22a2:	f000 8087 	beq.w	23b4 <printbmsstat()+0x210>
    22a6:	2102      	movs	r1, #2
    22a8:	4878      	ldr	r0, [pc, #480]	; (248c <printbmsstat()+0x2e8>)
  SERIALCONSOLE.print(digitalRead(OUT1));
  SERIALCONSOLE.print(digitalRead(OUT2));
  SERIALCONSOLE.print(digitalRead(OUT3));
  SERIALCONSOLE.print(digitalRead(OUT4));
  SERIALCONSOLE.print(" Cont:");
  if ((contstat & 1) == 1) {
    22aa:	4c7a      	ldr	r4, [pc, #488]	; (2494 <printbmsstat()+0x2f0>)
    22ac:	f008 fe2e 	bl	af0c <usb_serial_write>
  SERIALCONSOLE.print(cellspresent);
    22b0:	4b79      	ldr	r3, [pc, #484]	; (2498 <printbmsstat()+0x2f4>)
	size_t print(int n)				{ return print((long)n); }
    22b2:	486f      	ldr	r0, [pc, #444]	; (2470 <printbmsstat()+0x2cc>)
    22b4:	6819      	ldr	r1, [r3, #0]
    22b6:	f006 f977 	bl	85a8 <Print::print(long)>
  SERIALCONSOLE.println();
    22ba:	486d      	ldr	r0, [pc, #436]	; (2470 <printbmsstat()+0x2cc>)
    22bc:	f006 f97c 	bl	85b8 <Print::println()>
    22c0:	2104      	movs	r1, #4
    22c2:	4876      	ldr	r0, [pc, #472]	; (249c <printbmsstat()+0x2f8>)
    22c4:	f008 fe22 	bl	af0c <usb_serial_write>
  SERIALCONSOLE.print(digitalRead(OUT1));
    22c8:	200b      	movs	r0, #11
    22ca:	f006 ffd3 	bl	9274 <digitalRead>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    22ce:	2300      	movs	r3, #0
    22d0:	4601      	mov	r1, r0
    22d2:	220a      	movs	r2, #10
    22d4:	4866      	ldr	r0, [pc, #408]	; (2470 <printbmsstat()+0x2cc>)
    22d6:	f006 f987 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(OUT2));
    22da:	200c      	movs	r0, #12
    22dc:	f006 ffca 	bl	9274 <digitalRead>
    22e0:	2300      	movs	r3, #0
    22e2:	4601      	mov	r1, r0
    22e4:	220a      	movs	r2, #10
    22e6:	4862      	ldr	r0, [pc, #392]	; (2470 <printbmsstat()+0x2cc>)
    22e8:	f006 f97e 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(OUT3));
    22ec:	2014      	movs	r0, #20
    22ee:	f006 ffc1 	bl	9274 <digitalRead>
    22f2:	2300      	movs	r3, #0
    22f4:	4601      	mov	r1, r0
    22f6:	220a      	movs	r2, #10
    22f8:	485d      	ldr	r0, [pc, #372]	; (2470 <printbmsstat()+0x2cc>)
    22fa:	f006 f975 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(OUT4));
    22fe:	2015      	movs	r0, #21
    2300:	f006 ffb8 	bl	9274 <digitalRead>
    2304:	220a      	movs	r2, #10
    2306:	4601      	mov	r1, r0
    2308:	2300      	movs	r3, #0
    230a:	4859      	ldr	r0, [pc, #356]	; (2470 <printbmsstat()+0x2cc>)
    230c:	f006 f96c 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2310:	2106      	movs	r1, #6
    2312:	4863      	ldr	r0, [pc, #396]	; (24a0 <printbmsstat()+0x2fc>)
    2314:	f008 fdfa 	bl	af0c <usb_serial_write>
  if ((contstat & 1) == 1) {
    2318:	6823      	ldr	r3, [r4, #0]
    231a:	07d8      	lsls	r0, r3, #31
    231c:	bf4b      	itete	mi
    231e:	2101      	movmi	r1, #1
    2320:	2101      	movpl	r1, #1
    2322:	4860      	ldrmi	r0, [pc, #384]	; (24a4 <printbmsstat()+0x300>)
    2324:	4860      	ldrpl	r0, [pc, #384]	; (24a8 <printbmsstat()+0x304>)
    2326:	f008 fdf1 	bl	af0c <usb_serial_write>
    SERIALCONSOLE.print("1");
  } else {
    SERIALCONSOLE.print("0");
  }
  if ((contstat & 2) == 2) {
    232a:	6823      	ldr	r3, [r4, #0]
    232c:	0799      	lsls	r1, r3, #30
    232e:	bf4b      	itete	mi
    2330:	2101      	movmi	r1, #1
    2332:	2101      	movpl	r1, #1
    2334:	485b      	ldrmi	r0, [pc, #364]	; (24a4 <printbmsstat()+0x300>)
    2336:	485c      	ldrpl	r0, [pc, #368]	; (24a8 <printbmsstat()+0x304>)
    2338:	f008 fde8 	bl	af0c <usb_serial_write>
    SERIALCONSOLE.print("1");
  } else {
    SERIALCONSOLE.print("0");
  }
  if ((contstat & 4) == 4) {
    233c:	6823      	ldr	r3, [r4, #0]
    233e:	075a      	lsls	r2, r3, #29
    2340:	bf4b      	itete	mi
    2342:	2101      	movmi	r1, #1
    2344:	2101      	movpl	r1, #1
    2346:	4857      	ldrmi	r0, [pc, #348]	; (24a4 <printbmsstat()+0x300>)
    2348:	4857      	ldrpl	r0, [pc, #348]	; (24a8 <printbmsstat()+0x304>)
    234a:	f008 fddf 	bl	af0c <usb_serial_write>
    SERIALCONSOLE.print("1");
  } else {
    SERIALCONSOLE.print("0");
  }
  if ((contstat & 8) == 8) {
    234e:	6823      	ldr	r3, [r4, #0]
    2350:	071b      	lsls	r3, r3, #28
    2352:	bf4b      	itete	mi
    2354:	2101      	movmi	r1, #1
    2356:	2101      	movpl	r1, #1
    2358:	4852      	ldrmi	r0, [pc, #328]	; (24a4 <printbmsstat()+0x300>)
    235a:	4853      	ldrpl	r0, [pc, #332]	; (24a8 <printbmsstat()+0x304>)
    235c:	f008 fdd6 	bl	af0c <usb_serial_write>
    2360:	2104      	movs	r1, #4
    2362:	4852      	ldr	r0, [pc, #328]	; (24ac <printbmsstat()+0x308>)
    2364:	f008 fdd2 	bl	af0c <usb_serial_write>
    SERIALCONSOLE.print("1");
  } else {
    SERIALCONSOLE.print("0");
  }
  SERIALCONSOLE.print(" In:");
  SERIALCONSOLE.print(digitalRead(IN1));
    2368:	2011      	movs	r0, #17
    236a:	f006 ff83 	bl	9274 <digitalRead>
    236e:	2300      	movs	r3, #0
    2370:	4601      	mov	r1, r0
    2372:	220a      	movs	r2, #10
    2374:	483e      	ldr	r0, [pc, #248]	; (2470 <printbmsstat()+0x2cc>)
    2376:	f006 f937 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(IN2));
    237a:	2010      	movs	r0, #16
    237c:	f006 ff7a 	bl	9274 <digitalRead>
    2380:	2300      	movs	r3, #0
    2382:	4601      	mov	r1, r0
    2384:	220a      	movs	r2, #10
    2386:	483a      	ldr	r0, [pc, #232]	; (2470 <printbmsstat()+0x2cc>)
    2388:	f006 f92e 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(IN3));
    238c:	2012      	movs	r0, #18
    238e:	f006 ff71 	bl	9274 <digitalRead>
    2392:	2300      	movs	r3, #0
    2394:	4601      	mov	r1, r0
    2396:	220a      	movs	r2, #10
    2398:	4835      	ldr	r0, [pc, #212]	; (2470 <printbmsstat()+0x2cc>)
    239a:	f006 f925 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(IN4));
    239e:	2013      	movs	r0, #19
    23a0:	f006 ff68 	bl	9274 <digitalRead>
}
    23a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SERIALCONSOLE.print(digitalRead(IN4));
    23a8:	4601      	mov	r1, r0
    23aa:	2300      	movs	r3, #0
    23ac:	4830      	ldr	r0, [pc, #192]	; (2470 <printbmsstat()+0x2cc>)
    23ae:	220a      	movs	r2, #10
    23b0:	f006 b91a 	b.w	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    23b4:	2111      	movs	r1, #17
    23b6:	483e      	ldr	r0, [pc, #248]	; (24b0 <printbmsstat()+0x30c>)
    23b8:	f008 fda8 	bl	af0c <usb_serial_write>
    23bc:	e773      	b.n	22a6 <printbmsstat()+0x102>
    23be:	210a      	movs	r1, #10
    23c0:	483c      	ldr	r0, [pc, #240]	; (24b4 <printbmsstat()+0x310>)
    23c2:	f008 fda3 	bl	af0c <usb_serial_write>
    23c6:	e769      	b.n	229c <printbmsstat()+0xf8>
    23c8:	210e      	movs	r1, #14
    23ca:	483b      	ldr	r0, [pc, #236]	; (24b8 <printbmsstat()+0x314>)
    23cc:	f008 fd9e 	bl	af0c <usb_serial_write>
    23d0:	e75e      	b.n	2290 <printbmsstat()+0xec>
    23d2:	2107      	movs	r1, #7
    23d4:	4839      	ldr	r0, [pc, #228]	; (24bc <printbmsstat()+0x318>)
    23d6:	f008 fd99 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.print(ErrorReason);
    23da:	4b39      	ldr	r3, [pc, #228]	; (24c0 <printbmsstat()+0x31c>)
	size_t print(int n)				{ return print((long)n); }
    23dc:	4824      	ldr	r0, [pc, #144]	; (2470 <printbmsstat()+0x2cc>)
    23de:	6819      	ldr	r1, [r3, #0]
    23e0:	f006 f8e2 	bl	85a8 <Print::print(long)>
    23e4:	e74a      	b.n	227c <printbmsstat()+0xd8>
    23e6:	2106      	movs	r1, #6
    23e8:	4836      	ldr	r0, [pc, #216]	; (24c4 <printbmsstat()+0x320>)
    23ea:	f008 fd8f 	bl	af0c <usb_serial_write>
    23ee:	e745      	b.n	227c <printbmsstat()+0xd8>
    23f0:	2107      	movs	r1, #7
    23f2:	4835      	ldr	r0, [pc, #212]	; (24c8 <printbmsstat()+0x324>)
    23f4:	f008 fd8a 	bl	af0c <usb_serial_write>
    23f8:	e740      	b.n	227c <printbmsstat()+0xd8>
    23fa:	2107      	movs	r1, #7
    23fc:	4833      	ldr	r0, [pc, #204]	; (24cc <printbmsstat()+0x328>)
    23fe:	f008 fd85 	bl	af0c <usb_serial_write>
    2402:	e73b      	b.n	227c <printbmsstat()+0xd8>
    2404:	2108      	movs	r1, #8
    2406:	4832      	ldr	r0, [pc, #200]	; (24d0 <printbmsstat()+0x32c>)
    2408:	f008 fd80 	bl	af0c <usb_serial_write>
    240c:	e736      	b.n	227c <printbmsstat()+0xd8>
    240e:	210b      	movs	r1, #11
    2410:	4830      	ldr	r0, [pc, #192]	; (24d4 <printbmsstat()+0x330>)
    2412:	f008 fd7b 	bl	af0c <usb_serial_write>
    2416:	e731      	b.n	227c <printbmsstat()+0xd8>
      if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint) {
    2418:	481a      	ldr	r0, [pc, #104]	; (2484 <printbmsstat()+0x2e0>)
    241a:	f7fe fbff 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    241e:	68e1      	ldr	r1, [r4, #12]
    2420:	f009 fdf2 	bl	c008 <__aeabi_fcmplt>
    2424:	2800      	cmp	r0, #0
    2426:	f43f af29 	beq.w	227c <printbmsstat()+0xd8>
        if (bmsstatus == Error) {
    242a:	4b14      	ldr	r3, [pc, #80]	; (247c <printbmsstat()+0x2d8>)
    242c:	781b      	ldrb	r3, [r3, #0]
    242e:	2b05      	cmp	r3, #5
    2430:	d169      	bne.n	2506 <printbmsstat()+0x362>
    2432:	210a      	movs	r1, #10
    2434:	4828      	ldr	r0, [pc, #160]	; (24d8 <printbmsstat()+0x334>)
    2436:	f008 fd69 	bl	af0c <usb_serial_write>
    243a:	e71f      	b.n	227c <printbmsstat()+0xd8>
      if (bms.getLowCellVolt() > settings.StoreVsetpoint) {
    243c:	f7fe fbc6 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    2440:	6a21      	ldr	r1, [r4, #32]
    2442:	f009 fdff 	bl	c044 <__aeabi_fcmpgt>
    2446:	2800      	cmp	r0, #0
    2448:	d05d      	beq.n	2506 <printbmsstat()+0x362>
    244a:	2116      	movs	r1, #22
    244c:	4823      	ldr	r0, [pc, #140]	; (24dc <printbmsstat()+0x338>)
    244e:	f008 fd5d 	bl	af0c <usb_serial_write>
    2452:	210a      	movs	r1, #10
    2454:	4820      	ldr	r0, [pc, #128]	; (24d8 <printbmsstat()+0x334>)
    2456:	f008 fd59 	bl	af0c <usb_serial_write>
    245a:	e70f      	b.n	227c <printbmsstat()+0xd8>
    245c:	210f      	movs	r1, #15
    245e:	4820      	ldr	r0, [pc, #128]	; (24e0 <printbmsstat()+0x33c>)
    2460:	f008 fd54 	bl	af0c <usb_serial_write>
    2464:	e6d0      	b.n	2208 <printbmsstat()+0x64>
    2466:	2111      	movs	r1, #17
    2468:	481e      	ldr	r0, [pc, #120]	; (24e4 <printbmsstat()+0x340>)
    246a:	f008 fd4f 	bl	af0c <usb_serial_write>
    246e:	e6e5      	b.n	223c <printbmsstat()+0x98>
    2470:	1fff880c 	.word	0x1fff880c
    2474:	1fffb204 	.word	0x1fffb204
    2478:	00012dfc 	.word	0x00012dfc
    247c:	1fffb008 	.word	0x1fffb008
    2480:	00012e0c 	.word	0x00012e0c
    2484:	1fff8fe0 	.word	0x1fff8fe0
    2488:	1fffb2d4 	.word	0x1fffb2d4
    248c:	00012a24 	.word	0x00012a24
    2490:	1fff8fdc 	.word	0x1fff8fdc
    2494:	1fffb0e8 	.word	0x1fffb0e8
    2498:	1fffb074 	.word	0x1fffb074
    249c:	00012f04 	.word	0x00012f04
    24a0:	00012f0c 	.word	0x00012f0c
    24a4:	00012f14 	.word	0x00012f14
    24a8:	00012f18 	.word	0x00012f18
    24ac:	00012f1c 	.word	0x00012f1c
    24b0:	00012ef0 	.word	0x00012ef0
    24b4:	00012ee4 	.word	0x00012ee4
    24b8:	00012ed4 	.word	0x00012ed4
    24bc:	00012ecc 	.word	0x00012ecc
    24c0:	1fff8fb0 	.word	0x1fff8fb0
    24c4:	00012e9c 	.word	0x00012e9c
    24c8:	00012ea4 	.word	0x00012ea4
    24cc:	00012eb8 	.word	0x00012eb8
    24d0:	00012ec0 	.word	0x00012ec0
    24d4:	00012eac 	.word	0x00012eac
    24d8:	00012e84 	.word	0x00012e84
    24dc:	00012e6c 	.word	0x00012e6c
    24e0:	00012e18 	.word	0x00012e18
    24e4:	00012e38 	.word	0x00012e38
    24e8:	210e      	movs	r1, #14
    24ea:	4809      	ldr	r0, [pc, #36]	; (2510 <printbmsstat()+0x36c>)
    24ec:	f008 fd0e 	bl	af0c <usb_serial_write>
    24f0:	e693      	b.n	221a <printbmsstat()+0x76>
    24f2:	210d      	movs	r1, #13
    24f4:	4807      	ldr	r0, [pc, #28]	; (2514 <printbmsstat()+0x370>)
    24f6:	f008 fd09 	bl	af0c <usb_serial_write>
    24fa:	e6b1      	b.n	2260 <printbmsstat()+0xbc>
    24fc:	210c      	movs	r1, #12
    24fe:	4806      	ldr	r0, [pc, #24]	; (2518 <printbmsstat()+0x374>)
    2500:	f008 fd04 	bl	af0c <usb_serial_write>
    2504:	e6a3      	b.n	224e <printbmsstat()+0xaa>
    2506:	2108      	movs	r1, #8
    2508:	4804      	ldr	r0, [pc, #16]	; (251c <printbmsstat()+0x378>)
    250a:	f008 fcff 	bl	af0c <usb_serial_write>
    250e:	e6b5      	b.n	227c <printbmsstat()+0xd8>
    2510:	00012e28 	.word	0x00012e28
    2514:	00012e5c 	.word	0x00012e5c
    2518:	00012e4c 	.word	0x00012e4c
    251c:	00012e90 	.word	0x00012e90

00002520 <getcurrent()>:


void getcurrent() {
    2520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (settings.cursens == Analoguedual || settings.cursens == Analoguesing) {
    2524:	4cb4      	ldr	r4, [pc, #720]	; (27f8 <getcurrent()+0x2d8>)
    2526:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
    2528:	2e01      	cmp	r6, #1
void getcurrent() {
    252a:	b08c      	sub	sp, #48	; 0x30
  if (settings.cursens == Analoguedual || settings.cursens == Analoguesing) {
    252c:	f000 8143 	beq.w	27b6 <getcurrent()+0x296>
    2530:	2e03      	cmp	r6, #3
    2532:	d05b      	beq.n	25ec <getcurrent()+0xcc>
    2534:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 27fc <getcurrent()+0x2dc>
    2538:	4fb1      	ldr	r7, [pc, #708]	; (2800 <getcurrent()+0x2e0>)
    253a:	4eb2      	ldr	r6, [pc, #712]	; (2804 <getcurrent()+0x2e4>)
        SERIALCONSOLE.print("  ");
      }
    }
  }

  if (settings.invertcur == 1) {
    253c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    RawCur = RawCur * -1;
  }

  lowpassFilter.input(RawCur);
    253e:	48b2      	ldr	r0, [pc, #712]	; (2808 <getcurrent()+0x2e8>)
  if (settings.invertcur == 1) {
    2540:	2b01      	cmp	r3, #1
    RawCur = RawCur * -1;
    2542:	bf09      	itett	eq
    2544:	6831      	ldreq	r1, [r6, #0]
    2546:	6831      	ldrne	r1, [r6, #0]
    2548:	f101 4100 	addeq.w	r1, r1, #2147483648	; 0x80000000
    254c:	6031      	streq	r1, [r6, #0]
  lowpassFilter.input(RawCur);
    254e:	f005 fcc9 	bl	7ee4 <FilterOnePole::input(float)>
  if (debugCur != 0) {
    2552:	683b      	ldr	r3, [r7, #0]
    2554:	2b00      	cmp	r3, #0
    2556:	f040 8114 	bne.w	2782 <getcurrent()+0x262>
    SERIALCONSOLE.print(" | ");
    SERIALCONSOLE.print(settings.changecur);
    SERIALCONSOLE.print(" | ");
  }

  currentact = lowpassFilter.output();
    255a:	48ab      	ldr	r0, [pc, #684]	; (2808 <getcurrent()+0x2e8>)
    255c:	f005 fc96 	bl	7e8c <FilterOnePole::output()>

  if (debugCur != 0) {
    2560:	683b      	ldr	r3, [r7, #0]
  currentact = lowpassFilter.output();
    2562:	f8c8 0000 	str.w	r0, [r8]
    2566:	4605      	mov	r5, r0
  if (debugCur != 0) {
    2568:	2b00      	cmp	r3, #0
    256a:	f040 80fa 	bne.w	2762 <getcurrent()+0x242>
    SERIALCONSOLE.print(currentact);
    SERIALCONSOLE.print("mA  ");
  }

  if (settings.cursens == Analoguedual) {
    256e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    2570:	2b01      	cmp	r3, #1
    2572:	f000 80ba 	beq.w	26ea <getcurrent()+0x1ca>
      } else {
        lasttime = millis();
      }
    }
  } else {
    if (currentact > 500 || currentact < -500) {
    2576:	49a5      	ldr	r1, [pc, #660]	; (280c <getcurrent()+0x2ec>)
    2578:	4628      	mov	r0, r5
    257a:	f009 fd63 	bl	c044 <__aeabi_fcmpgt>
    257e:	b930      	cbnz	r0, 258e <getcurrent()+0x6e>
    2580:	49a3      	ldr	r1, [pc, #652]	; (2810 <getcurrent()+0x2f0>)
    2582:	4628      	mov	r0, r5
    2584:	f009 fd40 	bl	c008 <__aeabi_fcmplt>
    2588:	2800      	cmp	r0, #0
    258a:	f000 81e0 	beq.w	294e <getcurrent()+0x42e>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    258e:	f8df a284 	ldr.w	sl, [pc, #644]	; 2814 <getcurrent()+0x2f4>
      ampsecond = ampsecond + ((currentact * (millis() - lasttime) / 1000) / 1000);
    2592:	f8df 9284 	ldr.w	r9, [pc, #644]	; 2818 <getcurrent()+0x2f8>
    2596:	f8da 3000 	ldr.w	r3, [sl]
    259a:	930a      	str	r3, [sp, #40]	; 0x28
	return ret;
    259c:	980a      	ldr	r0, [sp, #40]	; 0x28
    259e:	f8d9 3000 	ldr.w	r3, [r9]
    25a2:	4f9e      	ldr	r7, [pc, #632]	; (281c <getcurrent()+0x2fc>)
    25a4:	1ac0      	subs	r0, r0, r3
    25a6:	f009 fb39 	bl	bc1c <__aeabi_ui2f>
    25aa:	4629      	mov	r1, r5
    25ac:	f009 fb8e 	bl	bccc <__aeabi_fmul>
    25b0:	499b      	ldr	r1, [pc, #620]	; (2820 <getcurrent()+0x300>)
    25b2:	f009 fc3f 	bl	be34 <__aeabi_fdiv>
    25b6:	499a      	ldr	r1, [pc, #616]	; (2820 <getcurrent()+0x300>)
    25b8:	f009 fc3c 	bl	be34 <__aeabi_fdiv>
    25bc:	6839      	ldr	r1, [r7, #0]
    25be:	f009 fa7d 	bl	babc <__addsf3>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    25c2:	f8da 3000 	ldr.w	r3, [sl]
    25c6:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    25c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    25ca:	6038      	str	r0, [r7, #0]
      lasttime = millis();
    25cc:	f8c9 3000 	str.w	r3, [r9]
    } else {
      lasttime = millis();
    }
  }
  currentact = settings.ncur * currentact;
    25d0:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
    25d4:	f009 fb26 	bl	bc24 <__aeabi_i2f>
    25d8:	4629      	mov	r1, r5
    25da:	f009 fb77 	bl	bccc <__aeabi_fmul>
  RawCur = 0;
    25de:	2300      	movs	r3, #0
  currentact = settings.ncur * currentact;
    25e0:	f8c8 0000 	str.w	r0, [r8]
  RawCur = 0;
    25e4:	6033      	str	r3, [r6, #0]
      SERIALCONSOLE.print(AverageCurrentTotal);
      SERIALCONSOLE.print(" | ");
      SERIALCONSOLE.print(NextRunningAverage);
    }
  */
}
    25e6:	b00c      	add	sp, #48	; 0x30
    25e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      adc->adc0->startContinuous(ACUR1);
    25ec:	4d8d      	ldr	r5, [pc, #564]	; (2824 <getcurrent()+0x304>)
      sensor = 1;
    25ee:	4f8e      	ldr	r7, [pc, #568]	; (2828 <getcurrent()+0x308>)
      adc->adc0->startContinuous(ACUR1);
    25f0:	682a      	ldr	r2, [r5, #0]
    25f2:	f8df 8208 	ldr.w	r8, [pc, #520]	; 27fc <getcurrent()+0x2dc>
    25f6:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      sensor = 1;
    25fa:	2301      	movs	r3, #1
      adc->adc0->startContinuous(ACUR1);
    25fc:	210f      	movs	r1, #15
      sensor = 1;
    25fe:	603b      	str	r3, [r7, #0]
      adc->adc0->startContinuous(ACUR1);
    2600:	f005 fb2e 	bl	7c60 <ADC_Module::startContinuous(unsigned char)>
    if (sensor == 1) {
    2604:	683b      	ldr	r3, [r7, #0]
      if (debugCur != 0) {
    2606:	4f7e      	ldr	r7, [pc, #504]	; (2800 <getcurrent()+0x2e0>)
    if (sensor == 1) {
    2608:	2b01      	cmp	r3, #1
      if (debugCur != 0) {
    260a:	683b      	ldr	r3, [r7, #0]
    if (sensor == 1) {
    260c:	f000 812c 	beq.w	2868 <getcurrent()+0x348>
      if (debugCur != 0) {
    2610:	2b00      	cmp	r3, #0
    2612:	f040 81af 	bne.w	2974 <getcurrent()+0x454>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    2616:	682b      	ldr	r3, [r5, #0]
    2618:	f8df 9210 	ldr.w	r9, [pc, #528]	; 282c <getcurrent()+0x30c>
    261c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    int analogReadContinuous() __attribute__((always_inline))
    {
#ifdef ADC_TEENSY_4
        return (int16_t)(int32_t)adc_regs.R0;
#else
        return (int16_t)(int32_t)adc_regs.RA;
    2620:	6b43      	ldr	r3, [r0, #52]	; 0x34
    2622:	691e      	ldr	r6, [r3, #16]
    2624:	b2b6      	uxth	r6, r6
    2626:	f8c9 6000 	str.w	r6, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.0000066);
    262a:	f005 f861 	bl	76f0 <ADC_Module::getMaxValue()>
    262e:	f8b4 2086 	ldrh.w	r2, [r4, #134]	; 0x86
    2632:	f640 43e4 	movw	r3, #3300	; 0xce4
    2636:	fb06 f303 	mul.w	r3, r6, r3
    263a:	fbb3 f0f0 	udiv	r0, r3, r0
    263e:	1a80      	subs	r0, r0, r2
    2640:	b200      	sxth	r0, r0
    2642:	f009 faef 	bl	bc24 <__aeabi_i2f>
    2646:	497a      	ldr	r1, [pc, #488]	; (2830 <getcurrent()+0x310>)
    2648:	4606      	mov	r6, r0
    264a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    264e:	f009 fb3d 	bl	bccc <__aeabi_fmul>
    2652:	4601      	mov	r1, r0
    2654:	4630      	mov	r0, r6
    2656:	f009 fbed 	bl	be34 <__aeabi_fdiv>
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    265a:	f8d9 3000 	ldr.w	r3, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.0000066);
    265e:	4e69      	ldr	r6, [pc, #420]	; (2804 <getcurrent()+0x2e4>)
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    2660:	2b63      	cmp	r3, #99	; 0x63
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.0000066);
    2662:	6030      	str	r0, [r6, #0]
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    2664:	f300 817a 	bgt.w	295c <getcurrent()+0x43c>
        RawCur = 0;
    2668:	2300      	movs	r3, #0
    266a:	6033      	str	r3, [r6, #0]
      if (debugCur != 0) {
    266c:	683b      	ldr	r3, [r7, #0]
    266e:	2b00      	cmp	r3, #0
    2670:	f43f af64 	beq.w	253c <getcurrent()+0x1c>
    2674:	2102      	movs	r1, #2
    2676:	486f      	ldr	r0, [pc, #444]	; (2834 <getcurrent()+0x314>)
    2678:	f008 fc48 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.print((float(value * 3300 / adc->adc0->getMaxValue()) - settings.offset2));
    267c:	682b      	ldr	r3, [r5, #0]
    267e:	f8d9 5000 	ldr.w	r5, [r9]
    2682:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2686:	f640 43e4 	movw	r3, #3300	; 0xce4
    268a:	fb03 f505 	mul.w	r5, r3, r5
    268e:	f005 f82f 	bl	76f0 <ADC_Module::getMaxValue()>
    2692:	fbb5 f0f0 	udiv	r0, r5, r0
    2696:	f009 fac1 	bl	bc1c <__aeabi_ui2f>
    269a:	4605      	mov	r5, r0
    269c:	f8b4 0086 	ldrh.w	r0, [r4, #134]	; 0x86
    26a0:	f009 fac0 	bl	bc24 <__aeabi_i2f>
    26a4:	4601      	mov	r1, r0
    26a6:	4628      	mov	r0, r5
    26a8:	f009 fa06 	bl	bab8 <__aeabi_fsub>
    26ac:	f009 f8ea 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    26b0:	2502      	movs	r5, #2
    26b2:	4602      	mov	r2, r0
    26b4:	460b      	mov	r3, r1
    26b6:	9500      	str	r5, [sp, #0]
    26b8:	485f      	ldr	r0, [pc, #380]	; (2838 <getcurrent()+0x318>)
    26ba:	f005 ffa1 	bl	8600 <Print::printFloat(double, unsigned char)>
    26be:	4629      	mov	r1, r5
    26c0:	485c      	ldr	r0, [pc, #368]	; (2834 <getcurrent()+0x314>)
    26c2:	f008 fc23 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.print(RawCur);
    26c6:	6830      	ldr	r0, [r6, #0]
    26c8:	f009 f8dc 	bl	b884 <__aeabi_f2d>
    26cc:	9500      	str	r5, [sp, #0]
    26ce:	4602      	mov	r2, r0
    26d0:	460b      	mov	r3, r1
    26d2:	4859      	ldr	r0, [pc, #356]	; (2838 <getcurrent()+0x318>)
    26d4:	f005 ff94 	bl	8600 <Print::printFloat(double, unsigned char)>
    26d8:	4629      	mov	r1, r5
    26da:	4858      	ldr	r0, [pc, #352]	; (283c <getcurrent()+0x31c>)
    26dc:	f008 fc16 	bl	af0c <usb_serial_write>
    26e0:	4629      	mov	r1, r5
    26e2:	4854      	ldr	r0, [pc, #336]	; (2834 <getcurrent()+0x314>)
    26e4:	f008 fc12 	bl	af0c <usb_serial_write>
    26e8:	e728      	b.n	253c <getcurrent()+0x1c>
    if (sensor == 1) {
    26ea:	4b4f      	ldr	r3, [pc, #316]	; (2828 <getcurrent()+0x308>)
    26ec:	681b      	ldr	r3, [r3, #0]
    26ee:	2b01      	cmp	r3, #1
    26f0:	f000 8175 	beq.w	29de <getcurrent()+0x4be>
    if (sensor == 2) {
    26f4:	2b02      	cmp	r3, #2
    26f6:	f47f af6b 	bne.w	25d0 <getcurrent()+0xb0>
      if (currentact > settings.changecur || currentact < (settings.changecur * -1)) {
    26fa:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
    26fe:	4638      	mov	r0, r7
    2700:	f009 fa90 	bl	bc24 <__aeabi_i2f>
    2704:	4629      	mov	r1, r5
    2706:	f009 fc7f 	bl	c008 <__aeabi_fcmplt>
    270a:	b940      	cbnz	r0, 271e <getcurrent()+0x1fe>
    270c:	4278      	negs	r0, r7
    270e:	f009 fa89 	bl	bc24 <__aeabi_i2f>
    2712:	4629      	mov	r1, r5
    2714:	f009 fc96 	bl	c044 <__aeabi_fcmpgt>
    2718:	2800      	cmp	r0, #0
    271a:	f000 81cd 	beq.w	2ab8 <getcurrent()+0x598>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    271e:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 2814 <getcurrent()+0x2f4>
        ampsecond = ampsecond + ((currentact * (millis() - lasttime) / 1000) / 1000);
    2722:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 2818 <getcurrent()+0x2f8>
    2726:	f8da 3000 	ldr.w	r3, [sl]
    272a:	9307      	str	r3, [sp, #28]
	return ret;
    272c:	9807      	ldr	r0, [sp, #28]
    272e:	f8d9 3000 	ldr.w	r3, [r9]
    2732:	4f3a      	ldr	r7, [pc, #232]	; (281c <getcurrent()+0x2fc>)
    2734:	1ac0      	subs	r0, r0, r3
    2736:	f009 fa71 	bl	bc1c <__aeabi_ui2f>
    273a:	4629      	mov	r1, r5
    273c:	f009 fac6 	bl	bccc <__aeabi_fmul>
    2740:	4937      	ldr	r1, [pc, #220]	; (2820 <getcurrent()+0x300>)
    2742:	f009 fb77 	bl	be34 <__aeabi_fdiv>
    2746:	4936      	ldr	r1, [pc, #216]	; (2820 <getcurrent()+0x300>)
    2748:	f009 fb74 	bl	be34 <__aeabi_fdiv>
    274c:	6839      	ldr	r1, [r7, #0]
    274e:	f009 f9b5 	bl	babc <__addsf3>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2752:	f8da 3000 	ldr.w	r3, [sl]
    2756:	9306      	str	r3, [sp, #24]
	return ret;
    2758:	9b06      	ldr	r3, [sp, #24]
    275a:	6038      	str	r0, [r7, #0]
        lasttime = millis();
    275c:	f8c9 3000 	str.w	r3, [r9]
    2760:	e736      	b.n	25d0 <getcurrent()+0xb0>
    SERIALCONSOLE.print(currentact);
    2762:	f009 f88f 	bl	b884 <__aeabi_f2d>
    2766:	460b      	mov	r3, r1
    2768:	2102      	movs	r1, #2
    276a:	4602      	mov	r2, r0
    276c:	9100      	str	r1, [sp, #0]
    276e:	4832      	ldr	r0, [pc, #200]	; (2838 <getcurrent()+0x318>)
    2770:	f005 ff46 	bl	8600 <Print::printFloat(double, unsigned char)>
    2774:	4832      	ldr	r0, [pc, #200]	; (2840 <getcurrent()+0x320>)
    2776:	2104      	movs	r1, #4
    2778:	f008 fbc8 	bl	af0c <usb_serial_write>
      if (currentact > 500 || currentact < -500) {
    277c:	f8d8 5000 	ldr.w	r5, [r8]
    2780:	e6f5      	b.n	256e <getcurrent()+0x4e>
    SERIALCONSOLE.print(lowpassFilter.output());
    2782:	4821      	ldr	r0, [pc, #132]	; (2808 <getcurrent()+0x2e8>)
    2784:	f005 fb82 	bl	7e8c <FilterOnePole::output()>
    2788:	f009 f87c 	bl	b884 <__aeabi_f2d>
    278c:	460b      	mov	r3, r1
    278e:	2102      	movs	r1, #2
    2790:	4602      	mov	r2, r0
    2792:	9100      	str	r1, [sp, #0]
    2794:	4828      	ldr	r0, [pc, #160]	; (2838 <getcurrent()+0x318>)
    2796:	f005 ff33 	bl	8600 <Print::printFloat(double, unsigned char)>
    279a:	2103      	movs	r1, #3
    279c:	4829      	ldr	r0, [pc, #164]	; (2844 <getcurrent()+0x324>)
    279e:	f008 fbb5 	bl	af0c <usb_serial_write>
    SERIALCONSOLE.print(settings.changecur);
    27a2:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
    27a6:	4824      	ldr	r0, [pc, #144]	; (2838 <getcurrent()+0x318>)
    27a8:	f005 fefe 	bl	85a8 <Print::print(long)>
    27ac:	2103      	movs	r1, #3
    27ae:	4825      	ldr	r0, [pc, #148]	; (2844 <getcurrent()+0x324>)
    27b0:	f008 fbac 	bl	af0c <usb_serial_write>
    27b4:	e6d1      	b.n	255a <getcurrent()+0x3a>
      if (currentact < settings.changecur && currentact > (settings.changecur * -1)) {
    27b6:	f8df 8044 	ldr.w	r8, [pc, #68]	; 27fc <getcurrent()+0x2dc>
    27ba:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
    27be:	f8d8 5000 	ldr.w	r5, [r8]
    27c2:	4638      	mov	r0, r7
    27c4:	f009 fa2e 	bl	bc24 <__aeabi_i2f>
    27c8:	4629      	mov	r1, r5
    27ca:	f009 fc3b 	bl	c044 <__aeabi_fcmpgt>
    27ce:	2800      	cmp	r0, #0
    27d0:	d03a      	beq.n	2848 <getcurrent()+0x328>
    27d2:	4278      	negs	r0, r7
    27d4:	f009 fa26 	bl	bc24 <__aeabi_i2f>
    27d8:	4601      	mov	r1, r0
    27da:	4628      	mov	r0, r5
    27dc:	f009 fc32 	bl	c044 <__aeabi_fcmpgt>
    27e0:	b390      	cbz	r0, 2848 <getcurrent()+0x328>
        adc->adc0->startContinuous(ACUR1);
    27e2:	4d10      	ldr	r5, [pc, #64]	; (2824 <getcurrent()+0x304>)
        sensor = 1;
    27e4:	4f10      	ldr	r7, [pc, #64]	; (2828 <getcurrent()+0x308>)
        adc->adc0->startContinuous(ACUR1);
    27e6:	682b      	ldr	r3, [r5, #0]
        sensor = 1;
    27e8:	603e      	str	r6, [r7, #0]
        adc->adc0->startContinuous(ACUR1);
    27ea:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    27ee:	210f      	movs	r1, #15
    27f0:	f005 fa36 	bl	7c60 <ADC_Module::startContinuous(unsigned char)>
    27f4:	e706      	b.n	2604 <getcurrent()+0xe4>
    27f6:	bf00      	nop
    27f8:	1fffb204 	.word	0x1fffb204
    27fc:	1fffb0f8 	.word	0x1fffb0f8
    2800:	1fffb0fc 	.word	0x1fffb0fc
    2804:	1fff8fc0 	.word	0x1fff8fc0
    2808:	1fffb148 	.word	0x1fffb148
    280c:	43fa0000 	.word	0x43fa0000
    2810:	c3fa0000 	.word	0xc3fa0000
    2814:	1fffb4d8 	.word	0x1fffb4d8
    2818:	1fffb13c 	.word	0x1fffb13c
    281c:	1fff8fd8 	.word	0x1fff8fd8
    2820:	447a0000 	.word	0x447a0000
    2824:	1fff8fd0 	.word	0x1fff8fd0
    2828:	1fff8768 	.word	0x1fff8768
    282c:	1fffb2d8 	.word	0x1fffb2d8
    2830:	36dd7591 	.word	0x36dd7591
    2834:	00012a24 	.word	0x00012a24
    2838:	1fff880c 	.word	0x1fff880c
    283c:	00012f60 	.word	0x00012f60
    2840:	00012f68 	.word	0x00012f68
    2844:	00012f64 	.word	0x00012f64
        sensor = 2;
    2848:	4f9f      	ldr	r7, [pc, #636]	; (2ac8 <getcurrent()+0x5a8>)
        adc->adc0->startContinuous(ACUR2);
    284a:	4da0      	ldr	r5, [pc, #640]	; (2acc <getcurrent()+0x5ac>)
        sensor = 2;
    284c:	2302      	movs	r3, #2
    284e:	603b      	str	r3, [r7, #0]
        adc->adc0->startContinuous(ACUR2);
    2850:	682b      	ldr	r3, [r5, #0]
    2852:	210e      	movs	r1, #14
    2854:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2858:	f005 fa02 	bl	7c60 <ADC_Module::startContinuous(unsigned char)>
    if (sensor == 1) {
    285c:	683b      	ldr	r3, [r7, #0]
      if (debugCur != 0) {
    285e:	4f9c      	ldr	r7, [pc, #624]	; (2ad0 <getcurrent()+0x5b0>)
    if (sensor == 1) {
    2860:	2b01      	cmp	r3, #1
      if (debugCur != 0) {
    2862:	683b      	ldr	r3, [r7, #0]
    if (sensor == 1) {
    2864:	f47f aed4 	bne.w	2610 <getcurrent()+0xf0>
      if (debugCur != 0) {
    2868:	2b00      	cmp	r3, #0
    286a:	f040 80e5 	bne.w	2a38 <getcurrent()+0x518>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    286e:	682b      	ldr	r3, [r5, #0]
    2870:	f8df 9260 	ldr.w	r9, [pc, #608]	; 2ad4 <getcurrent()+0x5b4>
    2874:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2878:	6b43      	ldr	r3, [r0, #52]	; 0x34
    287a:	691e      	ldr	r6, [r3, #16]
    287c:	b2b6      	uxth	r6, r6
    287e:	f8c9 6000 	str.w	r6, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.0000066);
    2882:	f004 ff35 	bl	76f0 <ADC_Module::getMaxValue()>
    2886:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
    288a:	f640 4ae4 	movw	sl, #3300	; 0xce4
    288e:	fb0a f606 	mul.w	r6, sl, r6
    2892:	fbb6 f6f0 	udiv	r6, r6, r0
    2896:	1af0      	subs	r0, r6, r3
    2898:	b200      	sxth	r0, r0
    289a:	f009 f9c3 	bl	bc24 <__aeabi_i2f>
    289e:	498e      	ldr	r1, [pc, #568]	; (2ad8 <getcurrent()+0x5b8>)
    28a0:	4606      	mov	r6, r0
    28a2:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    28a6:	f009 fa11 	bl	bccc <__aeabi_fmul>
    28aa:	4601      	mov	r1, r0
    28ac:	4630      	mov	r0, r6
    28ae:	f009 fac1 	bl	be34 <__aeabi_fdiv>
      if (abs((int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1)) < settings.CurDead) {
    28b2:	682b      	ldr	r3, [r5, #0]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.0000066);
    28b4:	4e89      	ldr	r6, [pc, #548]	; (2adc <getcurrent()+0x5bc>)
    28b6:	4602      	mov	r2, r0
      if (abs((int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1)) < settings.CurDead) {
    28b8:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    28bc:	f8d9 3000 	ldr.w	r3, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.0000066);
    28c0:	6032      	str	r2, [r6, #0]
      if (abs((int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1)) < settings.CurDead) {
    28c2:	fb0a fa03 	mul.w	sl, sl, r3
    28c6:	f004 ff13 	bl	76f0 <ADC_Module::getMaxValue()>
    28ca:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
    28ce:	fbba f3f0 	udiv	r3, sl, r0
    28d2:	b21b      	sxth	r3, r3
    28d4:	1a9b      	subs	r3, r3, r2
    28d6:	2b00      	cmp	r3, #0
    28d8:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
    28dc:	bfb8      	it	lt
    28de:	425b      	neglt	r3, r3
    28e0:	429a      	cmp	r2, r3
        RawCur = 0;
    28e2:	bfc4      	itt	gt
    28e4:	2300      	movgt	r3, #0
    28e6:	6033      	strgt	r3, [r6, #0]
      if (debugCur != 0) {
    28e8:	683b      	ldr	r3, [r7, #0]
    28ea:	2b00      	cmp	r3, #0
    28ec:	f43f ae26 	beq.w	253c <getcurrent()+0x1c>
    28f0:	2102      	movs	r1, #2
    28f2:	487b      	ldr	r0, [pc, #492]	; (2ae0 <getcurrent()+0x5c0>)
    28f4:	f008 fb0a 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.print(int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1);
    28f8:	682b      	ldr	r3, [r5, #0]
    28fa:	f8d9 5000 	ldr.w	r5, [r9]
    28fe:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2902:	f640 43e4 	movw	r3, #3300	; 0xce4
    2906:	fb03 f505 	mul.w	r5, r3, r5
    290a:	f004 fef1 	bl	76f0 <ADC_Module::getMaxValue()>
    290e:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
    2912:	fbb5 f5f0 	udiv	r5, r5, r0
    2916:	b22d      	sxth	r5, r5
	size_t print(int n)				{ return print((long)n); }
    2918:	1a69      	subs	r1, r5, r1
    291a:	4872      	ldr	r0, [pc, #456]	; (2ae4 <getcurrent()+0x5c4>)
    291c:	f005 fe44 	bl	85a8 <Print::print(long)>
    2920:	2102      	movs	r1, #2
    2922:	486f      	ldr	r0, [pc, #444]	; (2ae0 <getcurrent()+0x5c0>)
    2924:	f008 faf2 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.print(RawCur);
    2928:	6830      	ldr	r0, [r6, #0]
    292a:	f008 ffab 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    292e:	2502      	movs	r5, #2
    2930:	4602      	mov	r2, r0
    2932:	460b      	mov	r3, r1
    2934:	9500      	str	r5, [sp, #0]
    2936:	486b      	ldr	r0, [pc, #428]	; (2ae4 <getcurrent()+0x5c4>)
    2938:	f005 fe62 	bl	8600 <Print::printFloat(double, unsigned char)>
    293c:	2103      	movs	r1, #3
    293e:	486a      	ldr	r0, [pc, #424]	; (2ae8 <getcurrent()+0x5c8>)
    2940:	f008 fae4 	bl	af0c <usb_serial_write>
    2944:	4629      	mov	r1, r5
    2946:	4866      	ldr	r0, [pc, #408]	; (2ae0 <getcurrent()+0x5c0>)
    2948:	f008 fae0 	bl	af0c <usb_serial_write>
    294c:	e5f6      	b.n	253c <getcurrent()+0x1c>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    294e:	4b67      	ldr	r3, [pc, #412]	; (2aec <getcurrent()+0x5cc>)
    2950:	681b      	ldr	r3, [r3, #0]
    2952:	930b      	str	r3, [sp, #44]	; 0x2c
      lasttime = millis();
    2954:	4b66      	ldr	r3, [pc, #408]	; (2af0 <getcurrent()+0x5d0>)
	return ret;
    2956:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    2958:	601a      	str	r2, [r3, #0]
    295a:	e639      	b.n	25d0 <getcurrent()+0xb0>
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    295c:	682b      	ldr	r3, [r5, #0]
    295e:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2962:	f004 fec5 	bl	76f0 <ADC_Module::getMaxValue()>
    2966:	f8d9 3000 	ldr.w	r3, [r9]
    296a:	3864      	subs	r0, #100	; 0x64
    296c:	4298      	cmp	r0, r3
    296e:	f4ff ae7b 	bcc.w	2668 <getcurrent()+0x148>
    2972:	e67b      	b.n	266c <getcurrent()+0x14c>
        SERIALCONSOLE.println();
    2974:	485b      	ldr	r0, [pc, #364]	; (2ae4 <getcurrent()+0x5c4>)
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    2976:	f8df 915c 	ldr.w	r9, [pc, #348]	; 2ad4 <getcurrent()+0x5b4>
        SERIALCONSOLE.println();
    297a:	f005 fe1d 	bl	85b8 <Print::println()>
    297e:	210c      	movs	r1, #12
    2980:	485c      	ldr	r0, [pc, #368]	; (2af4 <getcurrent()+0x5d4>)
    2982:	f008 fac3 	bl	af0c <usb_serial_write>
    2986:	485c      	ldr	r0, [pc, #368]	; (2af8 <getcurrent()+0x5d8>)
    2988:	210c      	movs	r1, #12
    298a:	f008 fabf 	bl	af0c <usb_serial_write>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    298e:	682b      	ldr	r3, [r5, #0]
      if (debugCur != 0) {
    2990:	683a      	ldr	r2, [r7, #0]
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    2992:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2996:	6b43      	ldr	r3, [r0, #52]	; 0x34
    2998:	691e      	ldr	r6, [r3, #16]
    299a:	b2b6      	uxth	r6, r6
    299c:	f8c9 6000 	str.w	r6, [r9]
      if (debugCur != 0) {
    29a0:	2a00      	cmp	r2, #0
    29a2:	f43f ae42 	beq.w	262a <getcurrent()+0x10a>
        SERIALCONSOLE.print(value * 3300 / adc->adc0->getMaxValue());  //- settings.offset2)
    29a6:	f004 fea3 	bl	76f0 <ADC_Module::getMaxValue()>
    29aa:	f640 42e4 	movw	r2, #3300	; 0xce4
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    29ae:	2300      	movs	r3, #0
    29b0:	fb06 f202 	mul.w	r2, r6, r2
    29b4:	fbb2 f1f0 	udiv	r1, r2, r0
    29b8:	220a      	movs	r2, #10
    29ba:	484a      	ldr	r0, [pc, #296]	; (2ae4 <getcurrent()+0x5c4>)
    29bc:	f005 fe14 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    29c0:	2102      	movs	r1, #2
    29c2:	4847      	ldr	r0, [pc, #284]	; (2ae0 <getcurrent()+0x5c0>)
    29c4:	f008 faa2 	bl	af0c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    29c8:	f8b4 1086 	ldrh.w	r1, [r4, #134]	; 0x86
    29cc:	4845      	ldr	r0, [pc, #276]	; (2ae4 <getcurrent()+0x5c4>)
    29ce:	f005 fdeb 	bl	85a8 <Print::print(long)>
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.0000066);
    29d2:	682b      	ldr	r3, [r5, #0]
    29d4:	f8d9 6000 	ldr.w	r6, [r9]
    29d8:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    29dc:	e625      	b.n	262a <getcurrent()+0x10a>
      if (currentact > 500 || currentact < -500) {
    29de:	4947      	ldr	r1, [pc, #284]	; (2afc <getcurrent()+0x5dc>)
    29e0:	4628      	mov	r0, r5
    29e2:	f009 fb2f 	bl	c044 <__aeabi_fcmpgt>
    29e6:	b928      	cbnz	r0, 29f4 <getcurrent()+0x4d4>
    29e8:	4945      	ldr	r1, [pc, #276]	; (2b00 <getcurrent()+0x5e0>)
    29ea:	4628      	mov	r0, r5
    29ec:	f009 fb0c 	bl	c008 <__aeabi_fcmplt>
    29f0:	2800      	cmp	r0, #0
    29f2:	d05a      	beq.n	2aaa <getcurrent()+0x58a>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    29f4:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 2aec <getcurrent()+0x5cc>
        ampsecond = ampsecond + ((currentact * (millis() - lasttime) / 1000) / 1000);
    29f8:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 2af0 <getcurrent()+0x5d0>
    29fc:	f8da 3000 	ldr.w	r3, [sl]
    2a00:	9304      	str	r3, [sp, #16]
	return ret;
    2a02:	9804      	ldr	r0, [sp, #16]
    2a04:	f8d9 3000 	ldr.w	r3, [r9]
    2a08:	4f3e      	ldr	r7, [pc, #248]	; (2b04 <getcurrent()+0x5e4>)
    2a0a:	1ac0      	subs	r0, r0, r3
    2a0c:	f009 f906 	bl	bc1c <__aeabi_ui2f>
    2a10:	4629      	mov	r1, r5
    2a12:	f009 f95b 	bl	bccc <__aeabi_fmul>
    2a16:	493c      	ldr	r1, [pc, #240]	; (2b08 <getcurrent()+0x5e8>)
    2a18:	f009 fa0c 	bl	be34 <__aeabi_fdiv>
    2a1c:	493a      	ldr	r1, [pc, #232]	; (2b08 <getcurrent()+0x5e8>)
    2a1e:	f009 fa09 	bl	be34 <__aeabi_fdiv>
    2a22:	6839      	ldr	r1, [r7, #0]
    2a24:	f009 f84a 	bl	babc <__addsf3>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2a28:	f8da 3000 	ldr.w	r3, [sl]
    2a2c:	9303      	str	r3, [sp, #12]
	return ret;
    2a2e:	9b03      	ldr	r3, [sp, #12]
    2a30:	6038      	str	r0, [r7, #0]
        lasttime = millis();
    2a32:	f8c9 3000 	str.w	r3, [r9]
    2a36:	e5cb      	b.n	25d0 <getcurrent()+0xb0>
        SERIALCONSOLE.println();
    2a38:	482a      	ldr	r0, [pc, #168]	; (2ae4 <getcurrent()+0x5c4>)
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    2a3a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 2ad4 <getcurrent()+0x5b4>
        SERIALCONSOLE.println();
    2a3e:	f005 fdbb 	bl	85b8 <Print::println()>
        if (settings.cursens == Analoguedual) {
    2a42:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    2a44:	2b01      	cmp	r3, #1
    2a46:	bf0c      	ite	eq
    2a48:	4830      	ldreq	r0, [pc, #192]	; (2b0c <getcurrent()+0x5ec>)
    2a4a:	4831      	ldrne	r0, [pc, #196]	; (2b10 <getcurrent()+0x5f0>)
    2a4c:	210b      	movs	r1, #11
    2a4e:	f008 fa5d 	bl	af0c <usb_serial_write>
    2a52:	4829      	ldr	r0, [pc, #164]	; (2af8 <getcurrent()+0x5d8>)
    2a54:	210c      	movs	r1, #12
    2a56:	f008 fa59 	bl	af0c <usb_serial_write>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    2a5a:	682a      	ldr	r2, [r5, #0]
      if (debugCur != 0) {
    2a5c:	683b      	ldr	r3, [r7, #0]
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    2a5e:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    2a62:	6b42      	ldr	r2, [r0, #52]	; 0x34
    2a64:	6916      	ldr	r6, [r2, #16]
    2a66:	b2b6      	uxth	r6, r6
    2a68:	f8c9 6000 	str.w	r6, [r9]
      if (debugCur != 0) {
    2a6c:	2b00      	cmp	r3, #0
    2a6e:	f43f af08 	beq.w	2882 <getcurrent()+0x362>
        SERIALCONSOLE.print(value * 3300 / adc->adc0->getMaxValue());  //- settings.offset1)
    2a72:	f004 fe3d 	bl	76f0 <ADC_Module::getMaxValue()>
    2a76:	f640 43e4 	movw	r3, #3300	; 0xce4
    2a7a:	fb06 f303 	mul.w	r3, r6, r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    2a7e:	220a      	movs	r2, #10
    2a80:	fbb3 f1f0 	udiv	r1, r3, r0
    2a84:	2300      	movs	r3, #0
    2a86:	4817      	ldr	r0, [pc, #92]	; (2ae4 <getcurrent()+0x5c4>)
    2a88:	f005 fdae 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2a8c:	2101      	movs	r1, #1
    2a8e:	4821      	ldr	r0, [pc, #132]	; (2b14 <getcurrent()+0x5f4>)
    2a90:	f008 fa3c 	bl	af0c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    2a94:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
    2a98:	4812      	ldr	r0, [pc, #72]	; (2ae4 <getcurrent()+0x5c4>)
    2a9a:	f005 fd85 	bl	85a8 <Print::print(long)>
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.0000066);
    2a9e:	682b      	ldr	r3, [r5, #0]
    2aa0:	f8d9 6000 	ldr.w	r6, [r9]
    2aa4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2aa8:	e6eb      	b.n	2882 <getcurrent()+0x362>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2aaa:	4b10      	ldr	r3, [pc, #64]	; (2aec <getcurrent()+0x5cc>)
    2aac:	681b      	ldr	r3, [r3, #0]
    2aae:	9305      	str	r3, [sp, #20]
        lasttime = millis();
    2ab0:	4b0f      	ldr	r3, [pc, #60]	; (2af0 <getcurrent()+0x5d0>)
	return ret;
    2ab2:	9a05      	ldr	r2, [sp, #20]
    2ab4:	601a      	str	r2, [r3, #0]
    2ab6:	e58b      	b.n	25d0 <getcurrent()+0xb0>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2ab8:	4b0c      	ldr	r3, [pc, #48]	; (2aec <getcurrent()+0x5cc>)
    2aba:	681b      	ldr	r3, [r3, #0]
    2abc:	9308      	str	r3, [sp, #32]
        lasttime = millis();
    2abe:	4b0c      	ldr	r3, [pc, #48]	; (2af0 <getcurrent()+0x5d0>)
	return ret;
    2ac0:	9a08      	ldr	r2, [sp, #32]
    2ac2:	601a      	str	r2, [r3, #0]
    2ac4:	e584      	b.n	25d0 <getcurrent()+0xb0>
    2ac6:	bf00      	nop
    2ac8:	1fff8768 	.word	0x1fff8768
    2acc:	1fff8fd0 	.word	0x1fff8fd0
    2ad0:	1fffb0fc 	.word	0x1fffb0fc
    2ad4:	1fffb2d8 	.word	0x1fffb2d8
    2ad8:	36dd7591 	.word	0x36dd7591
    2adc:	1fff8fc0 	.word	0x1fff8fc0
    2ae0:	00012a24 	.word	0x00012a24
    2ae4:	1fff880c 	.word	0x1fff880c
    2ae8:	00012f4c 	.word	0x00012f4c
    2aec:	1fffb4d8 	.word	0x1fffb4d8
    2af0:	1fffb13c 	.word	0x1fffb13c
    2af4:	00012f50 	.word	0x00012f50
    2af8:	00012f3c 	.word	0x00012f3c
    2afc:	43fa0000 	.word	0x43fa0000
    2b00:	c3fa0000 	.word	0xc3fa0000
    2b04:	1fff8fd8 	.word	0x1fff8fd8
    2b08:	447a0000 	.word	0x447a0000
    2b0c:	00012f24 	.word	0x00012f24
    2b10:	00012f30 	.word	0x00012f30
    2b14:	00012a40 	.word	0x00012a40

00002b18 <updateSOC()>:

void updateSOC() {
    2b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (SOCset == 0) {
    2b1c:	4d8c      	ldr	r5, [pc, #560]	; (2d50 <updateSOC()+0x238>)
    2b1e:	682b      	ldr	r3, [r5, #0]
void updateSOC() {
    2b20:	b084      	sub	sp, #16
  if (SOCset == 0) {
    2b22:	2b00      	cmp	r3, #0
    2b24:	d07b      	beq.n	2c1e <updateSOC()+0x106>
    2b26:	4c8b      	ldr	r4, [pc, #556]	; (2d54 <updateSOC()+0x23c>)
    2b28:	4e8b      	ldr	r6, [pc, #556]	; (2d58 <updateSOC()+0x240>)
    2b2a:	4f8c      	ldr	r7, [pc, #560]	; (2d5c <updateSOC()+0x244>)
    2b2c:	f8df 8230 	ldr.w	r8, [pc, #560]	; 2d60 <updateSOC()+0x248>
        SERIALCONSOLE.println("//////////////////////////////////////// SOC SET ////////////////////////////////////////");
      }
    }
  }

  if (settings.voltsoc == 1) {
    2b30:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    2b34:	2b01      	cmp	r3, #1
    2b36:	f000 808c 	beq.w	2c52 <updateSOC()+0x13a>
    SOC = map(uint16_t(bms.getAvgCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);

    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
  }
  SOC = ((ampsecond * 0.27777777777778) / (settings.CAP * settings.Pstrings * 1000)) * 100;
    2b3a:	f8d7 9000 	ldr.w	r9, [r7]
    2b3e:	6da5      	ldr	r5, [r4, #88]	; 0x58
    2b40:	f8d4 a054 	ldr.w	sl, [r4, #84]	; 0x54
    2b44:	fb0a f505 	mul.w	r5, sl, r5
    2b48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2b4c:	fb05 f000 	mul.w	r0, r5, r0
    2b50:	f009 f868 	bl	bc24 <__aeabi_i2f>
    2b54:	4983      	ldr	r1, [pc, #524]	; (2d64 <updateSOC()+0x24c>)
    2b56:	4605      	mov	r5, r0
    2b58:	4648      	mov	r0, r9
    2b5a:	f009 f8b7 	bl	bccc <__aeabi_fmul>
    2b5e:	4629      	mov	r1, r5
    2b60:	f009 f968 	bl	be34 <__aeabi_fdiv>
    2b64:	4980      	ldr	r1, [pc, #512]	; (2d68 <updateSOC()+0x250>)
    2b66:	f009 f8b1 	bl	bccc <__aeabi_fmul>
    2b6a:	f009 fa75 	bl	c058 <__aeabi_f2iz>
  if (SOC >= 100) {
    2b6e:	2863      	cmp	r0, #99	; 0x63
  SOC = ((ampsecond * 0.27777777777778) / (settings.CAP * settings.Pstrings * 1000)) * 100;
    2b70:	6030      	str	r0, [r6, #0]
  if (SOC >= 100) {
    2b72:	dd49      	ble.n	2c08 <updateSOC()+0xf0>
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    2b74:	497b      	ldr	r1, [pc, #492]	; (2d64 <updateSOC()+0x24c>)
    2b76:	4628      	mov	r0, r5
    2b78:	f009 f95c 	bl	be34 <__aeabi_fdiv>
    SOC = 100;
    2b7c:	2364      	movs	r3, #100	; 0x64
    2b7e:	6033      	str	r3, [r6, #0]

  if (SOC < 0) {
    SOC = 0;  //reset SOC this way the can messages remain in range for other devices. Ampseconds will keep counting.
  }

  if (debug != 0) {
    2b80:	f8d8 3000 	ldr.w	r3, [r8]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    2b84:	6038      	str	r0, [r7, #0]
  if (debug != 0) {
    2b86:	2b00      	cmp	r3, #0
    2b88:	d046      	beq.n	2c18 <updateSOC()+0x100>
    if (settings.cursens == Analoguedual) {
    2b8a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    2b8c:	2b01      	cmp	r3, #1
    2b8e:	f000 8082 	beq.w	2c96 <updateSOC()+0x17e>
        SERIALCONSOLE.print("Low Range ");
      } else {
        SERIALCONSOLE.print("High Range");
      }
    }
    if (settings.cursens == Analoguesing) {
    2b92:	2b03      	cmp	r3, #3
    2b94:	f000 808c 	beq.w	2cb0 <updateSOC()+0x198>
      SERIALCONSOLE.print("Analogue Single ");
    }
    if (settings.cursens == Canbus) {
    2b98:	2b02      	cmp	r3, #2
    2b9a:	f000 8091 	beq.w	2cc0 <updateSOC()+0x1a8>
    2b9e:	2102      	movs	r1, #2
    2ba0:	4872      	ldr	r0, [pc, #456]	; (2d6c <updateSOC()+0x254>)
    2ba2:	f008 f9b3 	bl	af0c <usb_serial_write>
      SERIALCONSOLE.print("CANbus ");
    }
    SERIALCONSOLE.print("  ");
    SERIALCONSOLE.print(currentact);
    2ba6:	4b72      	ldr	r3, [pc, #456]	; (2d70 <updateSOC()+0x258>)
    2ba8:	6818      	ldr	r0, [r3, #0]
    2baa:	f008 fe6b 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2bae:	2402      	movs	r4, #2
    2bb0:	4602      	mov	r2, r0
    2bb2:	460b      	mov	r3, r1
    2bb4:	9400      	str	r4, [sp, #0]
    2bb6:	486f      	ldr	r0, [pc, #444]	; (2d74 <updateSOC()+0x25c>)
    2bb8:	f005 fd22 	bl	8600 <Print::printFloat(double, unsigned char)>
    2bbc:	4621      	mov	r1, r4
    2bbe:	486e      	ldr	r0, [pc, #440]	; (2d78 <updateSOC()+0x260>)
    2bc0:	f008 f9a4 	bl	af0c <usb_serial_write>
    2bc4:	4621      	mov	r1, r4
    2bc6:	4869      	ldr	r0, [pc, #420]	; (2d6c <updateSOC()+0x254>)
    2bc8:	f008 f9a0 	bl	af0c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    2bcc:	6831      	ldr	r1, [r6, #0]
    2bce:	4869      	ldr	r0, [pc, #420]	; (2d74 <updateSOC()+0x25c>)
    2bd0:	f005 fcea 	bl	85a8 <Print::print(long)>
    2bd4:	2106      	movs	r1, #6
    2bd6:	4869      	ldr	r0, [pc, #420]	; (2d7c <updateSOC()+0x264>)
    2bd8:	f008 f998 	bl	af0c <usb_serial_write>
    SERIALCONSOLE.print("mA");
    SERIALCONSOLE.print("  ");
    SERIALCONSOLE.print(SOC);
    SERIALCONSOLE.print("% SOC ");
    SERIALCONSOLE.print(ampsecond * 0.27777777777778, 2);
    2bdc:	6838      	ldr	r0, [r7, #0]
    2bde:	4961      	ldr	r1, [pc, #388]	; (2d64 <updateSOC()+0x24c>)
    2be0:	f009 f874 	bl	bccc <__aeabi_fmul>
    2be4:	f008 fe4e 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2be8:	9400      	str	r4, [sp, #0]
    2bea:	4602      	mov	r2, r0
    2bec:	460b      	mov	r3, r1
    2bee:	4861      	ldr	r0, [pc, #388]	; (2d74 <updateSOC()+0x25c>)
    2bf0:	f005 fd06 	bl	8600 <Print::printFloat(double, unsigned char)>
    2bf4:	2103      	movs	r1, #3
    2bf6:	4862      	ldr	r0, [pc, #392]	; (2d80 <updateSOC()+0x268>)
    2bf8:	f008 f988 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    2bfc:	485d      	ldr	r0, [pc, #372]	; (2d74 <updateSOC()+0x25c>)
    SERIALCONSOLE.println("mAh");
  }
}
    2bfe:	b004      	add	sp, #16
    2c00:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2c04:	f005 bcd8 	b.w	85b8 <Print::println()>
  if (SOC < 0) {
    2c08:	2800      	cmp	r0, #0
    SOC = 0;  //reset SOC this way the can messages remain in range for other devices. Ampseconds will keep counting.
    2c0a:	bfbc      	itt	lt
    2c0c:	2300      	movlt	r3, #0
    2c0e:	6033      	strlt	r3, [r6, #0]
  if (debug != 0) {
    2c10:	f8d8 3000 	ldr.w	r3, [r8]
    2c14:	2b00      	cmp	r3, #0
    2c16:	d1b8      	bne.n	2b8a <updateSOC()+0x72>
}
    2c18:	b004      	add	sp, #16
    2c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2c1e:	4e59      	ldr	r6, [pc, #356]	; (2d84 <updateSOC()+0x26c>)
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt);
    2c20:	4c4c      	ldr	r4, [pc, #304]	; (2d54 <updateSOC()+0x23c>)
    2c22:	6832      	ldr	r2, [r6, #0]
    2c24:	9202      	str	r2, [sp, #8]
	return ret;
    2c26:	9a02      	ldr	r2, [sp, #8]
    if (millis() > 9000) {
    2c28:	f242 3328 	movw	r3, #9000	; 0x2328
    2c2c:	429a      	cmp	r2, r3
    2c2e:	f200 8088 	bhi.w	2d42 <updateSOC()+0x22a>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2c32:	6833      	ldr	r3, [r6, #0]
    2c34:	9303      	str	r3, [sp, #12]
	return ret;
    2c36:	9a03      	ldr	r2, [sp, #12]
    if (millis() > 10000) {
    2c38:	f242 7310 	movw	r3, #10000	; 0x2710
    2c3c:	429a      	cmp	r2, r3
    2c3e:	d844      	bhi.n	2cca <updateSOC()+0x1b2>
  if (settings.voltsoc == 1) {
    2c40:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    2c44:	4e44      	ldr	r6, [pc, #272]	; (2d58 <updateSOC()+0x240>)
    2c46:	4f45      	ldr	r7, [pc, #276]	; (2d5c <updateSOC()+0x244>)
    2c48:	f8df 8114 	ldr.w	r8, [pc, #276]	; 2d60 <updateSOC()+0x248>
    2c4c:	2b01      	cmp	r3, #1
    2c4e:	f47f af74 	bne.w	2b3a <updateSOC()+0x22>
    SOC = map(uint16_t(bms.getAvgCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    2c52:	484d      	ldr	r0, [pc, #308]	; (2d88 <updateSOC()+0x270>)
    2c54:	f7fe f89a 	bl	d8c <BMSModuleManager::getAvgCellVolt()>
    2c58:	494c      	ldr	r1, [pc, #304]	; (2d8c <updateSOC()+0x274>)
    2c5a:	f009 f837 	bl	bccc <__aeabi_fmul>
    2c5e:	f009 fa21 	bl	c0a4 <__aeabi_f2uiz>
    2c62:	6f65      	ldr	r5, [r4, #116]	; 0x74
    2c64:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    2c66:	6f22      	ldr	r2, [r4, #112]	; 0x70
    2c68:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    2c6a:	9500      	str	r5, [sp, #0]
    2c6c:	b280      	uxth	r0, r0
    2c6e:	f7ff f803 	bl	1c78 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]>
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    2c72:	6da5      	ldr	r5, [r4, #88]	; 0x58
    2c74:	f8d4 a054 	ldr.w	sl, [r4, #84]	; 0x54
    2c78:	fb05 f000 	mul.w	r0, r5, r0
    2c7c:	fb0a f000 	mul.w	r0, sl, r0
    2c80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2c84:	0040      	lsls	r0, r0, #1
    2c86:	f008 ffcd 	bl	bc24 <__aeabi_i2f>
    2c8a:	4936      	ldr	r1, [pc, #216]	; (2d64 <updateSOC()+0x24c>)
    2c8c:	f009 f8d2 	bl	be34 <__aeabi_fdiv>
    2c90:	4681      	mov	r9, r0
    2c92:	6038      	str	r0, [r7, #0]
    2c94:	e756      	b.n	2b44 <updateSOC()+0x2c>
      if (sensor == 1) {
    2c96:	4b3e      	ldr	r3, [pc, #248]	; (2d90 <updateSOC()+0x278>)
    2c98:	681b      	ldr	r3, [r3, #0]
    2c9a:	2b01      	cmp	r3, #1
    2c9c:	bf0c      	ite	eq
    2c9e:	483d      	ldreq	r0, [pc, #244]	; (2d94 <updateSOC()+0x27c>)
    2ca0:	483d      	ldrne	r0, [pc, #244]	; (2d98 <updateSOC()+0x280>)
    2ca2:	210a      	movs	r1, #10
    2ca4:	f008 f932 	bl	af0c <usb_serial_write>
    if (settings.cursens == Analoguesing) {
    2ca8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    2caa:	2b03      	cmp	r3, #3
    2cac:	f47f af74 	bne.w	2b98 <updateSOC()+0x80>
    2cb0:	483a      	ldr	r0, [pc, #232]	; (2d9c <updateSOC()+0x284>)
    2cb2:	2110      	movs	r1, #16
    2cb4:	f008 f92a 	bl	af0c <usb_serial_write>
    if (settings.cursens == Canbus) {
    2cb8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    2cba:	2b02      	cmp	r3, #2
    2cbc:	f47f af6f 	bne.w	2b9e <updateSOC()+0x86>
    2cc0:	2107      	movs	r1, #7
    2cc2:	4837      	ldr	r0, [pc, #220]	; (2da0 <updateSOC()+0x288>)
    2cc4:	f008 f922 	bl	af0c <usb_serial_write>
    2cc8:	e769      	b.n	2b9e <updateSOC()+0x86>
      SOC = map(uint16_t(bms.getAvgCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    2cca:	482f      	ldr	r0, [pc, #188]	; (2d88 <updateSOC()+0x270>)
      if (debug != 0) {
    2ccc:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2d60 <updateSOC()+0x248>
      SOC = map(uint16_t(bms.getAvgCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    2cd0:	f7fe f85c 	bl	d8c <BMSModuleManager::getAvgCellVolt()>
    2cd4:	492d      	ldr	r1, [pc, #180]	; (2d8c <updateSOC()+0x274>)
    2cd6:	6f26      	ldr	r6, [r4, #112]	; 0x70
    2cd8:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
    2cda:	f008 fff7 	bl	bccc <__aeabi_fmul>
    2cde:	f009 f9e1 	bl	c0a4 <__aeabi_f2uiz>
    2ce2:	4632      	mov	r2, r6
    2ce4:	6f66      	ldr	r6, [r4, #116]	; 0x74
    2ce6:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    2ce8:	9600      	str	r6, [sp, #0]
    2cea:	463b      	mov	r3, r7
    2cec:	b280      	uxth	r0, r0
    2cee:	f7fe ffc3 	bl	1c78 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]>
    2cf2:	4e19      	ldr	r6, [pc, #100]	; (2d58 <updateSOC()+0x240>)
      ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    2cf4:	6da3      	ldr	r3, [r4, #88]	; 0x58
      SOC = map(uint16_t(bms.getAvgCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    2cf6:	6030      	str	r0, [r6, #0]
      ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    2cf8:	fb03 f000 	mul.w	r0, r3, r0
    2cfc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    2cfe:	4f17      	ldr	r7, [pc, #92]	; (2d5c <updateSOC()+0x244>)
    2d00:	fb03 f000 	mul.w	r0, r3, r0
    2d04:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2d08:	0040      	lsls	r0, r0, #1
    2d0a:	f008 ff8b 	bl	bc24 <__aeabi_i2f>
    2d0e:	4915      	ldr	r1, [pc, #84]	; (2d64 <updateSOC()+0x24c>)
    2d10:	f009 f890 	bl	be34 <__aeabi_fdiv>
      if (debug != 0) {
    2d14:	f8d8 3000 	ldr.w	r3, [r8]
      ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    2d18:	6038      	str	r0, [r7, #0]
      SOCset = 1;
    2d1a:	2201      	movs	r2, #1
    2d1c:	602a      	str	r2, [r5, #0]
      if (debug != 0) {
    2d1e:	2b00      	cmp	r3, #0
    2d20:	f43f af06 	beq.w	2b30 <updateSOC()+0x18>
    2d24:	2102      	movs	r1, #2
    2d26:	4811      	ldr	r0, [pc, #68]	; (2d6c <updateSOC()+0x254>)
    2d28:	f008 f8f0 	bl	af0c <usb_serial_write>
    2d2c:	4811      	ldr	r0, [pc, #68]	; (2d74 <updateSOC()+0x25c>)
    2d2e:	f005 fc43 	bl	85b8 <Print::println()>
    2d32:	2159      	movs	r1, #89	; 0x59
    2d34:	481b      	ldr	r0, [pc, #108]	; (2da4 <updateSOC()+0x28c>)
    2d36:	f008 f8e9 	bl	af0c <usb_serial_write>
    2d3a:	480e      	ldr	r0, [pc, #56]	; (2d74 <updateSOC()+0x25c>)
    2d3c:	f005 fc3c 	bl	85b8 <Print::println()>
    2d40:	e6f6      	b.n	2b30 <updateSOC()+0x18>
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt);
    2d42:	6c62      	ldr	r2, [r4, #68]	; 0x44
    2d44:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    2d48:	480f      	ldr	r0, [pc, #60]	; (2d88 <updateSOC()+0x270>)
    2d4a:	f7fd ff91 	bl	c70 <BMSModuleManager::setSensors(int, float)>
    2d4e:	e770      	b.n	2c32 <updateSOC()+0x11a>
    2d50:	1fff8fc4 	.word	0x1fff8fc4
    2d54:	1fffb204 	.word	0x1fffb204
    2d58:	1fff8724 	.word	0x1fff8724
    2d5c:	1fff8fd8 	.word	0x1fff8fd8
    2d60:	1fff8744 	.word	0x1fff8744
    2d64:	3e8e38e4 	.word	0x3e8e38e4
    2d68:	42c80000 	.word	0x42c80000
    2d6c:	00012a24 	.word	0x00012a24
    2d70:	1fffb0f8 	.word	0x1fffb0f8
    2d74:	1fff880c 	.word	0x1fff880c
    2d78:	00012f60 	.word	0x00012f60
    2d7c:	00013000 	.word	0x00013000
    2d80:	00013008 	.word	0x00013008
    2d84:	1fffb4d8 	.word	0x1fffb4d8
    2d88:	1fff8fe0 	.word	0x1fff8fe0
    2d8c:	447a0000 	.word	0x447a0000
    2d90:	1fff8768 	.word	0x1fff8768
    2d94:	00012fcc 	.word	0x00012fcc
    2d98:	00012fd8 	.word	0x00012fd8
    2d9c:	00012fe4 	.word	0x00012fe4
    2da0:	00012ff8 	.word	0x00012ff8
    2da4:	00012f70 	.word	0x00012f70

00002da8 <Prechargecon()>:
    SOC = 100;
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
  }
}

void Prechargecon() {
    2da8:	b530      	push	{r4, r5, lr}
  if (digitalRead(IN1) == HIGH || digitalRead(IN3) == HIGH)  //detect Key ON or AC present
    2daa:	2011      	movs	r0, #17
void Prechargecon() {
    2dac:	b083      	sub	sp, #12
  if (digitalRead(IN1) == HIGH || digitalRead(IN3) == HIGH)  //detect Key ON or AC present
    2dae:	f006 fa61 	bl	9274 <digitalRead>
    2db2:	2801      	cmp	r0, #1
    2db4:	d004      	beq.n	2dc0 <Prechargecon()+0x18>
    2db6:	2012      	movs	r0, #18
    2db8:	f006 fa5c 	bl	9274 <digitalRead>
    2dbc:	2801      	cmp	r0, #1
    2dbe:	d122      	bne.n	2e06 <Prechargecon()+0x5e>
  {
    digitalWrite(OUT4, HIGH);  //Negative Contactor Close
    2dc0:	2101      	movs	r1, #1
    2dc2:	2015      	movs	r0, #21
    2dc4:	f006 fa30 	bl	9228 <digitalWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2dc8:	4b2a      	ldr	r3, [pc, #168]	; (2e74 <Prechargecon()+0xcc>)
    contctrl = 2;
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    2dca:	4a2b      	ldr	r2, [pc, #172]	; (2e78 <Prechargecon()+0xd0>)
    2dcc:	4c2b      	ldr	r4, [pc, #172]	; (2e7c <Prechargecon()+0xd4>)
    2dce:	681b      	ldr	r3, [r3, #0]
    contctrl = 2;
    2dd0:	4d2b      	ldr	r5, [pc, #172]	; (2e80 <Prechargecon()+0xd8>)
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    2dd2:	6811      	ldr	r1, [r2, #0]
    2dd4:	9301      	str	r3, [sp, #4]
    contctrl = 2;
    2dd6:	2202      	movs	r2, #2
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    2dd8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    contctrl = 2;
    2ddc:	602a      	str	r2, [r5, #0]
	return ret;
    2dde:	9a01      	ldr	r2, [sp, #4]
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    2de0:	440b      	add	r3, r1
    2de2:	4293      	cmp	r3, r2
    2de4:	d808      	bhi.n	2df8 <Prechargecon()+0x50>
    2de6:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    2dea:	f008 ff1b 	bl	bc24 <__aeabi_i2f>
    2dee:	4b25      	ldr	r3, [pc, #148]	; (2e84 <Prechargecon()+0xdc>)
    2df0:	6819      	ldr	r1, [r3, #0]
    2df2:	f009 f909 	bl	c008 <__aeabi_fcmplt>
    2df6:	b1d0      	cbz	r0, 2e2e <Prechargecon()+0x86>
      digitalWrite(OUT2, HIGH);  //precharge
    2df8:	2101      	movs	r1, #1
        }
        if (digitalRead(IN1) == HIGH) {
          bmsstatus = Drive;
        }
      }
      digitalWrite(OUT2, LOW);
    2dfa:	200c      	movs	r0, #12
    digitalWrite(OUT2, LOW);
    digitalWrite(OUT4, LOW);
    bmsstatus = Ready;
    contctrl = 0;
  }
}
    2dfc:	b003      	add	sp, #12
    2dfe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      digitalWrite(OUT2, LOW);
    2e02:	f006 ba11 	b.w	9228 <digitalWrite>
    digitalWrite(OUT1, LOW);
    2e06:	2100      	movs	r1, #0
    2e08:	200b      	movs	r0, #11
    2e0a:	f006 fa0d 	bl	9228 <digitalWrite>
    digitalWrite(OUT2, LOW);
    2e0e:	2100      	movs	r1, #0
    2e10:	200c      	movs	r0, #12
    2e12:	f006 fa09 	bl	9228 <digitalWrite>
    digitalWrite(OUT4, LOW);
    2e16:	2100      	movs	r1, #0
    2e18:	2015      	movs	r0, #21
    2e1a:	f006 fa05 	bl	9228 <digitalWrite>
    bmsstatus = Ready;
    2e1e:	491a      	ldr	r1, [pc, #104]	; (2e88 <Prechargecon()+0xe0>)
    contctrl = 0;
    2e20:	4b17      	ldr	r3, [pc, #92]	; (2e80 <Prechargecon()+0xd8>)
    bmsstatus = Ready;
    2e22:	2001      	movs	r0, #1
    contctrl = 0;
    2e24:	2200      	movs	r2, #0
    bmsstatus = Ready;
    2e26:	7008      	strb	r0, [r1, #0]
    contctrl = 0;
    2e28:	601a      	str	r2, [r3, #0]
}
    2e2a:	b003      	add	sp, #12
    2e2c:	bd30      	pop	{r4, r5, pc}
      digitalWrite(OUT1, HIGH);  //Positive Contactor Close
    2e2e:	2101      	movs	r1, #1
    2e30:	200b      	movs	r0, #11
    2e32:	f006 f9f9 	bl	9228 <digitalWrite>
      if (settings.ChargerDirect == 1) {
    2e36:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
      contctrl = 3;
    2e3a:	2403      	movs	r4, #3
    2e3c:	602c      	str	r4, [r5, #0]
      if (settings.ChargerDirect == 1) {
    2e3e:	b14b      	cbz	r3, 2e54 <Prechargecon()+0xac>
        bmsstatus = Drive;
    2e40:	4b11      	ldr	r3, [pc, #68]	; (2e88 <Prechargecon()+0xe0>)
    2e42:	2202      	movs	r2, #2
    2e44:	701a      	strb	r2, [r3, #0]
      digitalWrite(OUT2, LOW);
    2e46:	2100      	movs	r1, #0
    2e48:	200c      	movs	r0, #12
}
    2e4a:	b003      	add	sp, #12
    2e4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      digitalWrite(OUT2, LOW);
    2e50:	f006 b9ea 	b.w	9228 <digitalWrite>
        if (digitalRead(IN3) == HIGH) {
    2e54:	2012      	movs	r0, #18
    2e56:	f006 fa0d 	bl	9274 <digitalRead>
    2e5a:	2801      	cmp	r0, #1
          bmsstatus = Charge;
    2e5c:	bf08      	it	eq
    2e5e:	4b0a      	ldreq	r3, [pc, #40]	; (2e88 <Prechargecon()+0xe0>)
        if (digitalRead(IN1) == HIGH) {
    2e60:	f04f 0011 	mov.w	r0, #17
          bmsstatus = Charge;
    2e64:	bf08      	it	eq
    2e66:	701c      	strbeq	r4, [r3, #0]
        if (digitalRead(IN1) == HIGH) {
    2e68:	f006 fa04 	bl	9274 <digitalRead>
    2e6c:	2801      	cmp	r0, #1
    2e6e:	d1ea      	bne.n	2e46 <Prechargecon()+0x9e>
    2e70:	e7e6      	b.n	2e40 <Prechargecon()+0x98>
    2e72:	bf00      	nop
    2e74:	1fffb4d8 	.word	0x1fffb4d8
    2e78:	1fff8fb8 	.word	0x1fff8fb8
    2e7c:	1fffb204 	.word	0x1fffb204
    2e80:	1fffb0e4 	.word	0x1fffb0e4
    2e84:	1fffb0f8 	.word	0x1fffb0f8
    2e88:	1fffb008 	.word	0x1fffb008

00002e8c <contcon()>:

void contcon() {
    2e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (contctrl != contstat)  //check for contactor request change
    2e8e:	4e75      	ldr	r6, [pc, #468]	; (3064 <contcon()+0x1d8>)
    2e90:	4c75      	ldr	r4, [pc, #468]	; (3068 <contcon()+0x1dc>)
    2e92:	6833      	ldr	r3, [r6, #0]
    2e94:	6825      	ldr	r5, [r4, #0]
    2e96:	42ab      	cmp	r3, r5
void contcon() {
    2e98:	b087      	sub	sp, #28
  if (contctrl != contstat)  //check for contactor request change
    2e9a:	d02c      	beq.n	2ef6 <contcon()+0x6a>
  {
    if ((contctrl & 1) == 0) {
    2e9c:	f013 0101 	ands.w	r1, r3, #1
    2ea0:	d04a      	beq.n	2f38 <contcon()+0xac>
      analogWrite(OUT5, 0);
      contstat = contstat & 254;
    }
    if ((contctrl & 2) == 0) {
    2ea2:	f013 0102 	ands.w	r1, r3, #2
    2ea6:	d05e      	beq.n	2f66 <contcon()+0xda>
      analogWrite(OUT6, 0);
      contstat = contstat & 253;
    }
    if ((contctrl & 4) == 0) {
    2ea8:	f013 0104 	ands.w	r1, r3, #4
    2eac:	d050      	beq.n	2f50 <contcon()+0xc4>
      analogWrite(OUT7, 0);
      contstat = contstat & 251;
    }


    if ((contctrl & 1) == 1) {
    2eae:	07da      	lsls	r2, r3, #31
    2eb0:	d50f      	bpl.n	2ed2 <contcon()+0x46>
      if ((contstat & 1) != 1) {
    2eb2:	6822      	ldr	r2, [r4, #0]
    2eb4:	07d7      	lsls	r7, r2, #31
    2eb6:	d40c      	bmi.n	2ed2 <contcon()+0x46>
        if (conttimer1 == 0) {
    2eb8:	4d6c      	ldr	r5, [pc, #432]	; (306c <contcon()+0x1e0>)
    2eba:	682a      	ldr	r2, [r5, #0]
    2ebc:	2a00      	cmp	r2, #0
    2ebe:	f000 80ae 	beq.w	301e <contcon()+0x192>
    2ec2:	4b6b      	ldr	r3, [pc, #428]	; (3070 <contcon()+0x1e4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2ec4:	681b      	ldr	r3, [r3, #0]
    2ec6:	9301      	str	r3, [sp, #4]
	return ret;
    2ec8:	9b01      	ldr	r3, [sp, #4]
          analogWrite(OUT5, 255);
          conttimer1 = millis() + pulltime;
        }
        if (conttimer1 < millis()) {
    2eca:	4293      	cmp	r3, r2
    2ecc:	f200 809a 	bhi.w	3004 <contcon()+0x178>
          conttimer1 = 0;
        }
      }
    }

    if ((contctrl & 2) == 2) {
    2ed0:	6833      	ldr	r3, [r6, #0]
    2ed2:	079d      	lsls	r5, r3, #30
    2ed4:	d412      	bmi.n	2efc <contcon()+0x70>
          contstat = contstat | 2;
          conttimer2 = 0;
        }
      }
    }
    if ((contctrl & 4) == 4) {
    2ed6:	0759      	lsls	r1, r3, #29
    2ed8:	d520      	bpl.n	2f1c <contcon()+0x90>
      if ((contstat & 4) != 4) {
    2eda:	6822      	ldr	r2, [r4, #0]
    2edc:	0752      	lsls	r2, r2, #29
    2ede:	d40b      	bmi.n	2ef8 <contcon()+0x6c>
        if (conttimer3 == 0) {
    2ee0:	4f64      	ldr	r7, [pc, #400]	; (3074 <contcon()+0x1e8>)
    2ee2:	683a      	ldr	r2, [r7, #0]
    2ee4:	2a00      	cmp	r2, #0
    2ee6:	d05e      	beq.n	2fa6 <contcon()+0x11a>
    2ee8:	4b61      	ldr	r3, [pc, #388]	; (3070 <contcon()+0x1e4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2eea:	681b      	ldr	r3, [r3, #0]
    2eec:	9305      	str	r3, [sp, #20]
	return ret;
    2eee:	9b05      	ldr	r3, [sp, #20]
            Serial.println("pull in OUT7");
          }
          analogWrite(OUT7, 255);
          conttimer3 = millis() + pulltime;
        }
        if (conttimer3 < millis()) {
    2ef0:	4293      	cmp	r3, r2
    2ef2:	d876      	bhi.n	2fe2 <contcon()+0x156>
       SERIALCONSOLE.print("  ");
       SERIALCONSOLE.print(contstat);
       SERIALCONSOLE.println("  ");
    */
  }
  if (contctrl == 0) {
    2ef4:	6835      	ldr	r5, [r6, #0]
    2ef6:	b1a5      	cbz	r5, 2f22 <contcon()+0x96>
    analogWrite(OUT5, 0);
    analogWrite(OUT6, 0);
  }
}
    2ef8:	b007      	add	sp, #28
    2efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((contstat & 2) != 2) {
    2efc:	6822      	ldr	r2, [r4, #0]
    2efe:	0790      	lsls	r0, r2, #30
    2f00:	d43d      	bmi.n	2f7e <contcon()+0xf2>
        if (conttimer2 == 0) {
    2f02:	4d5d      	ldr	r5, [pc, #372]	; (3078 <contcon()+0x1ec>)
    2f04:	682a      	ldr	r2, [r5, #0]
    2f06:	2a00      	cmp	r2, #0
    2f08:	d03c      	beq.n	2f84 <contcon()+0xf8>
    2f0a:	4b59      	ldr	r3, [pc, #356]	; (3070 <contcon()+0x1e4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2f0c:	681b      	ldr	r3, [r3, #0]
    2f0e:	9303      	str	r3, [sp, #12]
	return ret;
    2f10:	9b03      	ldr	r3, [sp, #12]
        if (conttimer2 < millis()) {
    2f12:	429a      	cmp	r2, r3
    2f14:	d358      	bcc.n	2fc8 <contcon()+0x13c>
    if ((contctrl & 4) == 4) {
    2f16:	6833      	ldr	r3, [r6, #0]
    2f18:	0759      	lsls	r1, r3, #29
    2f1a:	d4de      	bmi.n	2eda <contcon()+0x4e>
    2f1c:	461d      	mov	r5, r3
  if (contctrl == 0) {
    2f1e:	2d00      	cmp	r5, #0
    2f20:	d1ea      	bne.n	2ef8 <contcon()+0x6c>
    analogWrite(OUT5, 0);
    2f22:	4629      	mov	r1, r5
    2f24:	2016      	movs	r0, #22
    2f26:	f006 f803 	bl	8f30 <analogWrite>
    analogWrite(OUT6, 0);
    2f2a:	4629      	mov	r1, r5
    2f2c:	2017      	movs	r0, #23
}
    2f2e:	b007      	add	sp, #28
    2f30:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    analogWrite(OUT6, 0);
    2f34:	f005 bffc 	b.w	8f30 <analogWrite>
      analogWrite(OUT5, 0);
    2f38:	2016      	movs	r0, #22
    2f3a:	f005 fff9 	bl	8f30 <analogWrite>
      contstat = contstat & 254;
    2f3e:	6822      	ldr	r2, [r4, #0]
    if ((contctrl & 2) == 0) {
    2f40:	6833      	ldr	r3, [r6, #0]
      contstat = contstat & 254;
    2f42:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if ((contctrl & 2) == 0) {
    2f46:	f013 0102 	ands.w	r1, r3, #2
      contstat = contstat & 254;
    2f4a:	6022      	str	r2, [r4, #0]
    if ((contctrl & 2) == 0) {
    2f4c:	d1ac      	bne.n	2ea8 <contcon()+0x1c>
    2f4e:	e00a      	b.n	2f66 <contcon()+0xda>
      analogWrite(OUT7, 0);
    2f50:	2005      	movs	r0, #5
    2f52:	f005 ffed 	bl	8f30 <analogWrite>
      contstat = contstat & 251;
    2f56:	6822      	ldr	r2, [r4, #0]
    if ((contctrl & 1) == 1) {
    2f58:	6833      	ldr	r3, [r6, #0]
      contstat = contstat & 251;
    2f5a:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    2f5e:	6022      	str	r2, [r4, #0]
    if ((contctrl & 1) == 1) {
    2f60:	07da      	lsls	r2, r3, #31
    2f62:	d5b6      	bpl.n	2ed2 <contcon()+0x46>
    2f64:	e7a5      	b.n	2eb2 <contcon()+0x26>
      analogWrite(OUT6, 0);
    2f66:	2017      	movs	r0, #23
    2f68:	f005 ffe2 	bl	8f30 <analogWrite>
      contstat = contstat & 253;
    2f6c:	6822      	ldr	r2, [r4, #0]
    if ((contctrl & 4) == 0) {
    2f6e:	6833      	ldr	r3, [r6, #0]
      contstat = contstat & 253;
    2f70:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    if ((contctrl & 4) == 0) {
    2f74:	f013 0104 	ands.w	r1, r3, #4
      contstat = contstat & 253;
    2f78:	6022      	str	r2, [r4, #0]
    if ((contctrl & 4) == 0) {
    2f7a:	d198      	bne.n	2eae <contcon()+0x22>
    2f7c:	e7e8      	b.n	2f50 <contcon()+0xc4>
    if ((contctrl & 4) == 4) {
    2f7e:	075b      	lsls	r3, r3, #29
    2f80:	d4ac      	bmi.n	2edc <contcon()+0x50>
    2f82:	e7b9      	b.n	2ef8 <contcon()+0x6c>
          if (debug != 0) {
    2f84:	4b3d      	ldr	r3, [pc, #244]	; (307c <contcon()+0x1f0>)
    2f86:	681b      	ldr	r3, [r3, #0]
    2f88:	2b00      	cmp	r3, #0
    2f8a:	d155      	bne.n	3038 <contcon()+0x1ac>
          analogWrite(OUT6, 255);
    2f8c:	21ff      	movs	r1, #255	; 0xff
    2f8e:	2017      	movs	r0, #23
    2f90:	f005 ffce 	bl	8f30 <analogWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2f94:	4b36      	ldr	r3, [pc, #216]	; (3070 <contcon()+0x1e4>)
          conttimer2 = millis() + pulltime;
    2f96:	493a      	ldr	r1, [pc, #232]	; (3080 <contcon()+0x1f4>)
    2f98:	681a      	ldr	r2, [r3, #0]
    2f9a:	9202      	str	r2, [sp, #8]
	return ret;
    2f9c:	9a02      	ldr	r2, [sp, #8]
    2f9e:	6809      	ldr	r1, [r1, #0]
    2fa0:	440a      	add	r2, r1
    2fa2:	602a      	str	r2, [r5, #0]
    2fa4:	e7b2      	b.n	2f0c <contcon()+0x80>
          if (debug != 0) {
    2fa6:	4b35      	ldr	r3, [pc, #212]	; (307c <contcon()+0x1f0>)
    2fa8:	681b      	ldr	r3, [r3, #0]
    2faa:	2b00      	cmp	r3, #0
    2fac:	d14f      	bne.n	304e <contcon()+0x1c2>
          analogWrite(OUT7, 255);
    2fae:	21ff      	movs	r1, #255	; 0xff
    2fb0:	2005      	movs	r0, #5
    2fb2:	f005 ffbd 	bl	8f30 <analogWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2fb6:	4b2e      	ldr	r3, [pc, #184]	; (3070 <contcon()+0x1e4>)
          conttimer3 = millis() + pulltime;
    2fb8:	4931      	ldr	r1, [pc, #196]	; (3080 <contcon()+0x1f4>)
    2fba:	681a      	ldr	r2, [r3, #0]
    2fbc:	9204      	str	r2, [sp, #16]
	return ret;
    2fbe:	9a04      	ldr	r2, [sp, #16]
    2fc0:	6809      	ldr	r1, [r1, #0]
    2fc2:	440a      	add	r2, r1
    2fc4:	603a      	str	r2, [r7, #0]
    2fc6:	e790      	b.n	2eea <contcon()+0x5e>
          analogWrite(OUT6, settings.conthold);
    2fc8:	4b2e      	ldr	r3, [pc, #184]	; (3084 <contcon()+0x1f8>)
    2fca:	2017      	movs	r0, #23
    2fcc:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    2fd0:	f005 ffae 	bl	8f30 <analogWrite>
          contstat = contstat | 2;
    2fd4:	6823      	ldr	r3, [r4, #0]
          conttimer2 = 0;
    2fd6:	2200      	movs	r2, #0
          contstat = contstat | 2;
    2fd8:	f043 0302 	orr.w	r3, r3, #2
    2fdc:	6023      	str	r3, [r4, #0]
          conttimer2 = 0;
    2fde:	602a      	str	r2, [r5, #0]
    2fe0:	e799      	b.n	2f16 <contcon()+0x8a>
          analogWrite(OUT7, settings.conthold);
    2fe2:	4b28      	ldr	r3, [pc, #160]	; (3084 <contcon()+0x1f8>)
    2fe4:	2005      	movs	r0, #5
    2fe6:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    2fea:	f005 ffa1 	bl	8f30 <analogWrite>
          contstat = contstat | 4;
    2fee:	6823      	ldr	r3, [r4, #0]
  if (contctrl == 0) {
    2ff0:	6835      	ldr	r5, [r6, #0]
          conttimer3 = 0;
    2ff2:	2200      	movs	r2, #0
          contstat = contstat | 4;
    2ff4:	f043 0304 	orr.w	r3, r3, #4
    2ff8:	6023      	str	r3, [r4, #0]
          conttimer3 = 0;
    2ffa:	603a      	str	r2, [r7, #0]
  if (contctrl == 0) {
    2ffc:	2d00      	cmp	r5, #0
    2ffe:	f47f af7b 	bne.w	2ef8 <contcon()+0x6c>
    3002:	e78e      	b.n	2f22 <contcon()+0x96>
          analogWrite(OUT5, settings.conthold);
    3004:	4b1f      	ldr	r3, [pc, #124]	; (3084 <contcon()+0x1f8>)
    3006:	2016      	movs	r0, #22
    3008:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
    300c:	f005 ff90 	bl	8f30 <analogWrite>
          contstat = contstat | 1;
    3010:	6823      	ldr	r3, [r4, #0]
          conttimer1 = 0;
    3012:	2200      	movs	r2, #0
          contstat = contstat | 1;
    3014:	f043 0301 	orr.w	r3, r3, #1
    3018:	6023      	str	r3, [r4, #0]
          conttimer1 = 0;
    301a:	602a      	str	r2, [r5, #0]
    301c:	e758      	b.n	2ed0 <contcon()+0x44>
          analogWrite(OUT5, 255);
    301e:	21ff      	movs	r1, #255	; 0xff
    3020:	2016      	movs	r0, #22
    3022:	f005 ff85 	bl	8f30 <analogWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3026:	4b12      	ldr	r3, [pc, #72]	; (3070 <contcon()+0x1e4>)
          conttimer1 = millis() + pulltime;
    3028:	4915      	ldr	r1, [pc, #84]	; (3080 <contcon()+0x1f4>)
    302a:	681a      	ldr	r2, [r3, #0]
    302c:	9200      	str	r2, [sp, #0]
	return ret;
    302e:	9a00      	ldr	r2, [sp, #0]
    3030:	6809      	ldr	r1, [r1, #0]
    3032:	440a      	add	r2, r1
    3034:	602a      	str	r2, [r5, #0]
    3036:	e745      	b.n	2ec4 <contcon()+0x38>
            Serial.println();
    3038:	4813      	ldr	r0, [pc, #76]	; (3088 <contcon()+0x1fc>)
    303a:	f005 fabd 	bl	85b8 <Print::println()>
    303e:	210c      	movs	r1, #12
    3040:	4812      	ldr	r0, [pc, #72]	; (308c <contcon()+0x200>)
    3042:	f007 ff63 	bl	af0c <usb_serial_write>
    3046:	4810      	ldr	r0, [pc, #64]	; (3088 <contcon()+0x1fc>)
    3048:	f005 fab6 	bl	85b8 <Print::println()>
    304c:	e79e      	b.n	2f8c <contcon()+0x100>
            Serial.println();
    304e:	480e      	ldr	r0, [pc, #56]	; (3088 <contcon()+0x1fc>)
    3050:	f005 fab2 	bl	85b8 <Print::println()>
    3054:	210c      	movs	r1, #12
    3056:	480e      	ldr	r0, [pc, #56]	; (3090 <contcon()+0x204>)
    3058:	f007 ff58 	bl	af0c <usb_serial_write>
    305c:	480a      	ldr	r0, [pc, #40]	; (3088 <contcon()+0x1fc>)
    305e:	f005 faab 	bl	85b8 <Print::println()>
    3062:	e7a4      	b.n	2fae <contcon()+0x122>
    3064:	1fffb0e4 	.word	0x1fffb0e4
    3068:	1fffb0e8 	.word	0x1fffb0e8
    306c:	1fffb0ec 	.word	0x1fffb0ec
    3070:	1fffb4d8 	.word	0x1fffb4d8
    3074:	1fffb0f4 	.word	0x1fffb0f4
    3078:	1fffb0f0 	.word	0x1fffb0f0
    307c:	1fff8744 	.word	0x1fff8744
    3080:	1fff8760 	.word	0x1fff8760
    3084:	1fffb204 	.word	0x1fffb204
    3088:	1fff880c 	.word	0x1fff880c
    308c:	0001300c 	.word	0x0001300c
    3090:	0001301c 	.word	0x0001301c

00003094 <calcur()>:

void calcur() {
    3094:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  adc->adc0->startContinuous(ACUR1);
    3098:	4e53      	ldr	r6, [pc, #332]	; (31e8 <calcur()+0x154>)
  sensor = 1;
    309a:	f8df a150 	ldr.w	sl, [pc, #336]	; 31ec <calcur()+0x158>
  adc->adc0->startContinuous(ACUR1);
    309e:	6833      	ldr	r3, [r6, #0]
  x = 0;
    30a0:	f8df 914c 	ldr.w	r9, [pc, #332]	; 31f0 <calcur()+0x15c>
  adc->adc0->startContinuous(ACUR1);
    30a4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    30a8:	4d52      	ldr	r5, [pc, #328]	; (31f4 <calcur()+0x160>)
    30aa:	210f      	movs	r1, #15
    30ac:	f004 fdd8 	bl	7c60 <ADC_Module::startContinuous(unsigned char)>
  sensor = 1;
    30b0:	2301      	movs	r3, #1
    30b2:	f8ca 3000 	str.w	r3, [sl]
    30b6:	4850      	ldr	r0, [pc, #320]	; (31f8 <calcur()+0x164>)
  x = 0;
    30b8:	2300      	movs	r3, #0
    30ba:	2122      	movs	r1, #34	; 0x22
    30bc:	f8c9 3000 	str.w	r3, [r9]
    30c0:	f007 ff24 	bl	af0c <usb_serial_write>
  SERIALCONSOLE.print(" Calibrating Current Offset ::::: ");
  while (x < 20) {
    30c4:	f8d9 3000 	ldr.w	r3, [r9]
    30c8:	2b13      	cmp	r3, #19
    30ca:	dc21      	bgt.n	3110 <calcur()+0x7c>
    30cc:	4f4b      	ldr	r7, [pc, #300]	; (31fc <calcur()+0x168>)
    settings.offset1 = settings.offset1 + ((uint16_t)adc->adc0->analogReadContinuous() * 3300 / adc->adc0->getMaxValue());
    30ce:	f640 48e4 	movw	r8, #3300	; 0xce4
    30d2:	6833      	ldr	r3, [r6, #0]
    30d4:	f8b5 b084 	ldrh.w	fp, [r5, #132]	; 0x84
    30d8:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    30dc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    30de:	691c      	ldr	r4, [r3, #16]
    30e0:	f004 fb06 	bl	76f0 <ADC_Module::getMaxValue()>
    30e4:	b2a4      	uxth	r4, r4
    30e6:	2101      	movs	r1, #1
    30e8:	fb08 f404 	mul.w	r4, r8, r4
    30ec:	fbb4 f4f0 	udiv	r4, r4, r0
    30f0:	4638      	mov	r0, r7
    30f2:	44a3      	add	fp, r4
    30f4:	f8a5 b084 	strh.w	fp, [r5, #132]	; 0x84
    30f8:	f007 ff08 	bl	af0c <usb_serial_write>
    SERIALCONSOLE.print(".");
    delay(100);
    30fc:	2064      	movs	r0, #100	; 0x64
    30fe:	f006 f923 	bl	9348 <delay>
    x++;
    3102:	f8d9 3000 	ldr.w	r3, [r9]
    3106:	3301      	adds	r3, #1
  while (x < 20) {
    3108:	2b13      	cmp	r3, #19
    x++;
    310a:	f8c9 3000 	str.w	r3, [r9]
  while (x < 20) {
    310e:	dde0      	ble.n	30d2 <calcur()+0x3e>
  }
  settings.offset1 = settings.offset1 / 21;
    3110:	f8b5 3084 	ldrh.w	r3, [r5, #132]	; 0x84
    3114:	493a      	ldr	r1, [pc, #232]	; (3200 <calcur()+0x16c>)
	size_t print(int n)				{ return print((long)n); }
    3116:	483b      	ldr	r0, [pc, #236]	; (3204 <calcur()+0x170>)
    3118:	fba1 2103 	umull	r2, r1, r1, r3
    311c:	1a5b      	subs	r3, r3, r1
    311e:	eb01 0153 	add.w	r1, r1, r3, lsr #1
    3122:	f3c1 110f 	ubfx	r1, r1, #4, #16
    3126:	f8a5 1084 	strh.w	r1, [r5, #132]	; 0x84
    312a:	f005 fa3d 	bl	85a8 <Print::print(long)>
    312e:	211d      	movs	r1, #29
    3130:	4835      	ldr	r0, [pc, #212]	; (3208 <calcur()+0x174>)
    3132:	f007 feeb 	bl	af0c <usb_serial_write>
    3136:	2102      	movs	r1, #2
    3138:	4834      	ldr	r0, [pc, #208]	; (320c <calcur()+0x178>)
    313a:	f007 fee7 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    313e:	4831      	ldr	r0, [pc, #196]	; (3204 <calcur()+0x170>)
    3140:	f005 fa3a 	bl	85b8 <Print::println()>
  SERIALCONSOLE.print(settings.offset1);
  SERIALCONSOLE.print(" current offset 1 calibrated ");
  SERIALCONSOLE.println("  ");
  x = 0;
    3144:	2200      	movs	r2, #0
  adc->startContinuous(ACUR2, ADC_0);
    3146:	210e      	movs	r1, #14
    3148:	6830      	ldr	r0, [r6, #0]
  x = 0;
    314a:	f8c9 2000 	str.w	r2, [r9]
  adc->startContinuous(ACUR2, ADC_0);
    314e:	f004 fa79 	bl	7644 <ADC::startContinuous(unsigned char, signed char)>
  sensor = 2;
    3152:	2302      	movs	r3, #2
    3154:	4828      	ldr	r0, [pc, #160]	; (31f8 <calcur()+0x164>)
    3156:	f8ca 3000 	str.w	r3, [sl]
    315a:	2122      	movs	r1, #34	; 0x22
    315c:	f007 fed6 	bl	af0c <usb_serial_write>
  SERIALCONSOLE.print(" Calibrating Current Offset ::::: ");
  while (x < 20) {
    3160:	f8d9 3000 	ldr.w	r3, [r9]
    3164:	2b13      	cmp	r3, #19
    3166:	dc22      	bgt.n	31ae <calcur()+0x11a>
    3168:	f8df 8090 	ldr.w	r8, [pc, #144]	; 31fc <calcur()+0x168>
    settings.offset2 = settings.offset2 + ((uint16_t)adc->adc0->analogReadContinuous() * 3300 / adc->adc0->getMaxValue());
    316c:	f640 47e4 	movw	r7, #3300	; 0xce4
    3170:	6833      	ldr	r3, [r6, #0]
    3172:	f8b5 a086 	ldrh.w	sl, [r5, #134]	; 0x86
    3176:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    317a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    317c:	691c      	ldr	r4, [r3, #16]
    317e:	f004 fab7 	bl	76f0 <ADC_Module::getMaxValue()>
    3182:	b2a4      	uxth	r4, r4
    3184:	2101      	movs	r1, #1
    3186:	fb07 f404 	mul.w	r4, r7, r4
    318a:	fbb4 f4f0 	udiv	r4, r4, r0
    318e:	4640      	mov	r0, r8
    3190:	44a2      	add	sl, r4
    3192:	f8a5 a086 	strh.w	sl, [r5, #134]	; 0x86
    3196:	f007 feb9 	bl	af0c <usb_serial_write>
    SERIALCONSOLE.print(".");
    delay(100);
    319a:	2064      	movs	r0, #100	; 0x64
    319c:	f006 f8d4 	bl	9348 <delay>
    x++;
    31a0:	f8d9 3000 	ldr.w	r3, [r9]
    31a4:	3301      	adds	r3, #1
  while (x < 20) {
    31a6:	2b13      	cmp	r3, #19
    x++;
    31a8:	f8c9 3000 	str.w	r3, [r9]
  while (x < 20) {
    31ac:	dde0      	ble.n	3170 <calcur()+0xdc>
  }
  settings.offset2 = settings.offset2 / 21;
    31ae:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
    31b2:	4913      	ldr	r1, [pc, #76]	; (3200 <calcur()+0x16c>)
	size_t print(int n)				{ return print((long)n); }
    31b4:	4813      	ldr	r0, [pc, #76]	; (3204 <calcur()+0x170>)
    31b6:	fba1 2103 	umull	r2, r1, r1, r3
    31ba:	1a5b      	subs	r3, r3, r1
    31bc:	eb01 0153 	add.w	r1, r1, r3, lsr #1
    31c0:	f3c1 110f 	ubfx	r1, r1, #4, #16
    31c4:	f8a5 1086 	strh.w	r1, [r5, #134]	; 0x86
    31c8:	f005 f9ee 	bl	85a8 <Print::print(long)>
    31cc:	211d      	movs	r1, #29
    31ce:	4810      	ldr	r0, [pc, #64]	; (3210 <calcur()+0x17c>)
    31d0:	f007 fe9c 	bl	af0c <usb_serial_write>
    31d4:	480d      	ldr	r0, [pc, #52]	; (320c <calcur()+0x178>)
    31d6:	2102      	movs	r1, #2
    31d8:	f007 fe98 	bl	af0c <usb_serial_write>
  SERIALCONSOLE.print(settings.offset2);
  SERIALCONSOLE.print(" current offset 2 calibrated ");
  SERIALCONSOLE.println("  ");
}
    31dc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t println(const char s[])			{ return print(s) + println(); }
    31e0:	4808      	ldr	r0, [pc, #32]	; (3204 <calcur()+0x170>)
    31e2:	f005 b9e9 	b.w	85b8 <Print::println()>
    31e6:	bf00      	nop
    31e8:	1fff8fd0 	.word	0x1fff8fd0
    31ec:	1fff8768 	.word	0x1fff8768
    31f0:	1fffb2e0 	.word	0x1fffb2e0
    31f4:	1fffb204 	.word	0x1fffb204
    31f8:	0001302c 	.word	0x0001302c
    31fc:	00013050 	.word	0x00013050
    3200:	86186187 	.word	0x86186187
    3204:	1fff880c 	.word	0x1fff880c
    3208:	00013054 	.word	0x00013054
    320c:	00012a24 	.word	0x00012a24
    3210:	00013074 	.word	0x00013074

00003214 <VEcan()>:
void VEcan()  //communication with Victron system over CAN
{
  msg.id = 0x351;
  msg.len = 8;
  if (storagemode == 0) {
    3214:	4b5d      	ldr	r3, [pc, #372]	; (338c <VEcan()+0x178>)
{
    3216:	b570      	push	{r4, r5, r6, lr}
  if (storagemode == 0) {
    3218:	681b      	ldr	r3, [r3, #0]
  msg.id = 0x351;
    321a:	4c5d      	ldr	r4, [pc, #372]	; (3390 <VEcan()+0x17c>)
    msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    321c:	4e5d      	ldr	r6, [pc, #372]	; (3394 <VEcan()+0x180>)
  msg.id = 0x351;
    321e:	f240 3151 	movw	r1, #849	; 0x351
  msg.len = 8;
    3222:	2208      	movs	r2, #8
    msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3224:	6d30      	ldr	r0, [r6, #80]	; 0x50
  msg.id = 0x351;
    3226:	6021      	str	r1, [r4, #0]
  msg.len = 8;
    3228:	71e2      	strb	r2, [r4, #7]
  if (storagemode == 0) {
    322a:	2b00      	cmp	r3, #0
    322c:	f040 80aa 	bne.w	3384 <VEcan()+0x170>
    msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3230:	f008 fcf8 	bl	bc24 <__aeabi_i2f>
    3234:	6971      	ldr	r1, [r6, #20]
    msg.buf[1] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
  } else {
    msg.buf[0] = lowByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    3236:	4605      	mov	r5, r0
    3238:	f008 fd48 	bl	bccc <__aeabi_fmul>
    323c:	4956      	ldr	r1, [pc, #344]	; (3398 <VEcan()+0x184>)
    323e:	f008 fd45 	bl	bccc <__aeabi_fmul>
    3242:	f008 ff2f 	bl	c0a4 <__aeabi_f2uiz>
    3246:	b2c2      	uxtb	r2, r0
    msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3248:	7222      	strb	r2, [r4, #8]
    msg.buf[1] = highByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
  }
  msg.buf[2] = lowByte(chargecurrent);
    324a:	4a54      	ldr	r2, [pc, #336]	; (339c <VEcan()+0x188>)
  msg.buf[3] = highByte(chargecurrent);
  msg.buf[4] = lowByte(discurrent);
  msg.buf[5] = highByte(discurrent);
  msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    324c:	69b1      	ldr	r1, [r6, #24]
    msg.buf[1] = highByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    324e:	f3c0 2307 	ubfx	r3, r0, #8, #8
    msg.buf[1] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3252:	7263      	strb	r3, [r4, #9]
  msg.buf[2] = lowByte(chargecurrent);
    3254:	8813      	ldrh	r3, [r2, #0]
    3256:	8163      	strh	r3, [r4, #10]
  msg.buf[4] = lowByte(discurrent);
    3258:	4b51      	ldr	r3, [pc, #324]	; (33a0 <VEcan()+0x18c>)
  msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    325a:	4628      	mov	r0, r5
  msg.buf[4] = lowByte(discurrent);
    325c:	881b      	ldrh	r3, [r3, #0]
    325e:	81a3      	strh	r3, [r4, #12]
  msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    3260:	f008 fd34 	bl	bccc <__aeabi_fmul>
    3264:	494c      	ldr	r1, [pc, #304]	; (3398 <VEcan()+0x184>)
    3266:	f008 fd31 	bl	bccc <__aeabi_fmul>
    326a:	f008 ff1b 	bl	c0a4 <__aeabi_f2uiz>
  msg.buf[7] = highByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
  Can0.write(msg);
    326e:	4948      	ldr	r1, [pc, #288]	; (3390 <VEcan()+0x17c>)
  msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    3270:	4603      	mov	r3, r0
  Can0.write(msg);
    3272:	484c      	ldr	r0, [pc, #304]	; (33a4 <VEcan()+0x190>)
  msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    3274:	81e3      	strh	r3, [r4, #14]
  Can0.write(msg);
    3276:	f003 ffc1 	bl	71fc <FlexCAN::write(CAN_message_t const&)>

  msg.id = 0x355;
  msg.len = 8;
  msg.buf[0] = lowByte(SOC);
    327a:	4a4b      	ldr	r2, [pc, #300]	; (33a8 <VEcan()+0x194>)
  msg.buf[3] = highByte(SOH);
  msg.buf[4] = lowByte(SOC * 10);
  msg.buf[5] = highByte(SOC * 10);
  msg.buf[6] = 0;
  msg.buf[7] = 0;
  Can0.write(msg);
    327c:	4849      	ldr	r0, [pc, #292]	; (33a4 <VEcan()+0x190>)
  msg.buf[0] = lowByte(SOC);
    327e:	6813      	ldr	r3, [r2, #0]
    3280:	8812      	ldrh	r2, [r2, #0]
    3282:	8122      	strh	r2, [r4, #8]
  msg.buf[2] = lowByte(SOH);
    3284:	4a49      	ldr	r2, [pc, #292]	; (33ac <VEcan()+0x198>)
  msg.buf[4] = lowByte(SOC * 10);
    3286:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  msg.len = 8;
    328a:	2508      	movs	r5, #8
  msg.buf[4] = lowByte(SOC * 10);
    328c:	005b      	lsls	r3, r3, #1
  msg.buf[2] = lowByte(SOH);
    328e:	8812      	ldrh	r2, [r2, #0]
    3290:	8162      	strh	r2, [r4, #10]
  msg.id = 0x355;
    3292:	f240 3155 	movw	r1, #853	; 0x355
  msg.buf[5] = highByte(SOC * 10);
    3296:	fa43 f205 	asr.w	r2, r3, r5
  msg.id = 0x355;
    329a:	6021      	str	r1, [r4, #0]
  msg.buf[6] = 0;
    329c:	2600      	movs	r6, #0
  Can0.write(msg);
    329e:	493c      	ldr	r1, [pc, #240]	; (3390 <VEcan()+0x17c>)
  msg.buf[5] = highByte(SOC * 10);
    32a0:	7362      	strb	r2, [r4, #13]
  msg.buf[4] = lowByte(SOC * 10);
    32a2:	7323      	strb	r3, [r4, #12]
  msg.len = 8;
    32a4:	71e5      	strb	r5, [r4, #7]
  msg.buf[6] = 0;
    32a6:	81e6      	strh	r6, [r4, #14]
  Can0.write(msg);
    32a8:	f003 ffa8 	bl	71fc <FlexCAN::write(CAN_message_t const&)>

  msg.id = 0x356;
    32ac:	f240 3356 	movw	r3, #854	; 0x356
  msg.len = 8;
  msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    32b0:	483f      	ldr	r0, [pc, #252]	; (33b0 <VEcan()+0x19c>)
  msg.id = 0x356;
    32b2:	6023      	str	r3, [r4, #0]
  msg.len = 8;
    32b4:	71e5      	strb	r5, [r4, #7]
  msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    32b6:	f7fd fcd7 	bl	c68 <BMSModuleManager::getPackVoltage()>
    32ba:	493e      	ldr	r1, [pc, #248]	; (33b4 <VEcan()+0x1a0>)
    32bc:	f008 fd06 	bl	bccc <__aeabi_fmul>
    32c0:	f008 fef0 	bl	c0a4 <__aeabi_f2uiz>
    32c4:	4603      	mov	r3, r0
  msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    32c6:	483a      	ldr	r0, [pc, #232]	; (33b0 <VEcan()+0x19c>)
  msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    32c8:	7223      	strb	r3, [r4, #8]
  msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    32ca:	f7fd fccd 	bl	c68 <BMSModuleManager::getPackVoltage()>
    32ce:	4939      	ldr	r1, [pc, #228]	; (33b4 <VEcan()+0x1a0>)
    32d0:	f008 fcfc 	bl	bccc <__aeabi_fmul>
    32d4:	f008 fee6 	bl	c0a4 <__aeabi_f2uiz>
  msg.buf[2] = lowByte(long(currentact / 100));
    32d8:	4a37      	ldr	r2, [pc, #220]	; (33b8 <VEcan()+0x1a4>)
    32da:	4936      	ldr	r1, [pc, #216]	; (33b4 <VEcan()+0x1a0>)
  msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    32dc:	f3c0 2307 	ubfx	r3, r0, #8, #8
  msg.buf[2] = lowByte(long(currentact / 100));
    32e0:	6810      	ldr	r0, [r2, #0]
  msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    32e2:	7263      	strb	r3, [r4, #9]
  msg.buf[2] = lowByte(long(currentact / 100));
    32e4:	f008 fda6 	bl	be34 <__aeabi_fdiv>
    32e8:	f008 feb6 	bl	c058 <__aeabi_f2iz>
    32ec:	4603      	mov	r3, r0
  msg.buf[3] = highByte(long(currentact / 100));
  msg.buf[4] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    32ee:	4830      	ldr	r0, [pc, #192]	; (33b0 <VEcan()+0x19c>)
  msg.buf[2] = lowByte(long(currentact / 100));
    32f0:	8163      	strh	r3, [r4, #10]
  msg.buf[4] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    32f2:	f7fd fceb 	bl	ccc <BMSModuleManager::getAvgTemperature()>
    32f6:	4928      	ldr	r1, [pc, #160]	; (3398 <VEcan()+0x184>)
    32f8:	f008 fce8 	bl	bccc <__aeabi_fmul>
    32fc:	f008 feac 	bl	c058 <__aeabi_f2iz>
    3300:	4603      	mov	r3, r0
  msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    3302:	482b      	ldr	r0, [pc, #172]	; (33b0 <VEcan()+0x19c>)
  msg.buf[4] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    3304:	7323      	strb	r3, [r4, #12]
  msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    3306:	f7fd fce1 	bl	ccc <BMSModuleManager::getAvgTemperature()>
    330a:	4923      	ldr	r1, [pc, #140]	; (3398 <VEcan()+0x184>)
    330c:	f008 fcde 	bl	bccc <__aeabi_fmul>
    3310:	f008 fea2 	bl	c058 <__aeabi_f2iz>
    3314:	f340 2007 	sbfx	r0, r0, #8, #8
  msg.buf[6] = 0;
  msg.buf[7] = 0;
  Can0.write(msg);
    3318:	491d      	ldr	r1, [pc, #116]	; (3390 <VEcan()+0x17c>)
  msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    331a:	7360      	strb	r0, [r4, #13]
  Can0.write(msg);
    331c:	4821      	ldr	r0, [pc, #132]	; (33a4 <VEcan()+0x190>)
  msg.buf[6] = 0;
    331e:	81e6      	strh	r6, [r4, #14]
  Can0.write(msg);
    3320:	f003 ff6c 	bl	71fc <FlexCAN::write(CAN_message_t const&)>

  delay(2);
    3324:	2002      	movs	r0, #2
    3326:	f006 f80f 	bl	9348 <delay>
  msg.id = 0x35A;
  msg.len = 8;
  msg.buf[0] = alarm[0];    //High temp  Low Voltage | High Voltage
    332a:	4a24      	ldr	r2, [pc, #144]	; (33bc <VEcan()+0x1a8>)
  msg.buf[1] = alarm[1];    // High Discharge Current | Low Temperature
  msg.buf[2] = alarm[2];    //Internal Failure | High Charge current
  msg.buf[3] = alarm[3];    // Cell Imbalance
  msg.buf[4] = warning[0];  //High temp  Low Voltage | High Voltage
    332c:	4b24      	ldr	r3, [pc, #144]	; (33c0 <VEcan()+0x1ac>)
  msg.buf[0] = alarm[0];    //High temp  Low Voltage | High Voltage
    332e:	6812      	ldr	r2, [r2, #0]
  msg.buf[4] = warning[0];  //High temp  Low Voltage | High Voltage
    3330:	681b      	ldr	r3, [r3, #0]
  msg.buf[5] = warning[1];  // High Discharge Current | Low Temperature
  msg.buf[6] = warning[2];  //Internal Failure | High Charge current
  msg.buf[7] = warning[3];  // Cell Imbalance
  Can0.write(msg);
    3332:	4917      	ldr	r1, [pc, #92]	; (3390 <VEcan()+0x17c>)
  msg.buf[0] = alarm[0];    //High temp  Low Voltage | High Voltage
    3334:	60a2      	str	r2, [r4, #8]
  msg.id = 0x35A;
    3336:	f240 305a 	movw	r0, #858	; 0x35a
    333a:	6020      	str	r0, [r4, #0]
  Can0.write(msg);
    333c:	4819      	ldr	r0, [pc, #100]	; (33a4 <VEcan()+0x190>)
  msg.buf[4] = warning[0];  //High temp  Low Voltage | High Voltage
    333e:	60e3      	str	r3, [r4, #12]
  msg.len = 8;
    3340:	71e5      	strb	r5, [r4, #7]
  Can0.write(msg);
    3342:	f003 ff5b 	bl	71fc <FlexCAN::write(CAN_message_t const&)>

  msg.id = 0x35E;
  msg.len = 8;
  msg.buf[0] = bmsname[0];
    3346:	4b1f      	ldr	r3, [pc, #124]	; (33c4 <VEcan()+0x1b0>)
  msg.buf[3] = bmsname[3];
  msg.buf[4] = bmsname[4];
  msg.buf[5] = bmsname[5];
  msg.buf[6] = bmsname[6];
  msg.buf[7] = bmsname[7];
  Can0.write(msg);
    3348:	4911      	ldr	r1, [pc, #68]	; (3390 <VEcan()+0x17c>)
  msg.len = 8;
    334a:	71e5      	strb	r5, [r4, #7]
  msg.buf[4] = bmsname[4];
    334c:	e9d3 2300 	ldrd	r2, r3, [r3]
  msg.id = 0x35E;
    3350:	f240 305e 	movw	r0, #862	; 0x35e
    3354:	6020      	str	r0, [r4, #0]
  Can0.write(msg);
    3356:	4813      	ldr	r0, [pc, #76]	; (33a4 <VEcan()+0x190>)
  msg.buf[0] = bmsname[0];
    3358:	60a2      	str	r2, [r4, #8]
  msg.buf[4] = bmsname[4];
    335a:	60e3      	str	r3, [r4, #12]
  Can0.write(msg);
    335c:	f003 ff4e 	bl	71fc <FlexCAN::write(CAN_message_t const&)>

  delay(2);
    3360:	2002      	movs	r0, #2
    3362:	f005 fff1 	bl	9348 <delay>
  msg.id = 0x370;
  msg.len = 8;
  msg.buf[0] = bmsmanu[0];
    3366:	4b18      	ldr	r3, [pc, #96]	; (33c8 <VEcan()+0x1b4>)
  msg.len = 8;
    3368:	71e5      	strb	r5, [r4, #7]
  msg.buf[1] = bmsmanu[1];
  msg.buf[2] = bmsmanu[2];
  msg.buf[3] = bmsmanu[3];
  msg.buf[4] = bmsmanu[4];
    336a:	e9d3 2300 	ldrd	r2, r3, [r3]
  msg.id = 0x370;
    336e:	f44f 715c 	mov.w	r1, #880	; 0x370
    3372:	6021      	str	r1, [r4, #0]
  msg.buf[0] = bmsmanu[0];
    3374:	60a2      	str	r2, [r4, #8]
  msg.buf[4] = bmsmanu[4];
    3376:	60e3      	str	r3, [r4, #12]
  msg.buf[5] = bmsmanu[5];
  msg.buf[6] = bmsmanu[6];
  msg.buf[7] = bmsmanu[7];
  Can0.write(msg);
    3378:	4905      	ldr	r1, [pc, #20]	; (3390 <VEcan()+0x17c>)
    337a:	480a      	ldr	r0, [pc, #40]	; (33a4 <VEcan()+0x190>)
}
    337c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  Can0.write(msg);
    3380:	f003 bf3c 	b.w	71fc <FlexCAN::write(CAN_message_t const&)>
    msg.buf[0] = lowByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    3384:	f008 fc4e 	bl	bc24 <__aeabi_i2f>
    3388:	6a31      	ldr	r1, [r6, #32]
    338a:	e754      	b.n	3236 <VEcan()+0x22>
    338c:	1fffb2d4 	.word	0x1fffb2d4
    3390:	1fffb16c 	.word	0x1fffb16c
    3394:	1fffb204 	.word	0x1fffb204
    3398:	41200000 	.word	0x41200000
    339c:	1fffb078 	.word	0x1fffb078
    33a0:	1fffb100 	.word	0x1fffb100
    33a4:	1fffb2e4 	.word	0x1fffb2e4
    33a8:	1fff8724 	.word	0x1fff8724
    33ac:	1fff8728 	.word	0x1fff8728
    33b0:	1fff8fe0 	.word	0x1fff8fe0
    33b4:	42c80000 	.word	0x42c80000
    33b8:	1fffb0f8 	.word	0x1fffb0f8
    33bc:	1fff8fd4 	.word	0x1fff8fd4
    33c0:	1fffb2dc 	.word	0x1fffb2dc
    33c4:	1fff8734 	.word	0x1fff8734
    33c8:	1fff872c 	.word	0x1fff872c

000033cc <CAB300()>:
      Serial.println();
    }
  }
}

void CAB300() {
    33cc:	b538      	push	{r3, r4, r5, lr}
    33ce:	4c17      	ldr	r4, [pc, #92]	; (342c <CAB300()+0x60>)
    33d0:	4b17      	ldr	r3, [pc, #92]	; (3430 <CAB300()+0x64>)
    33d2:	6822      	ldr	r2, [r4, #0]
    33d4:	1d18      	adds	r0, r3, #4
  for (int i = 0; i < 4; i++) {
    inbox = (inbox << 8) | inMsg.buf[i];
    33d6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  for (int i = 0; i < 4; i++) {
    33da:	4298      	cmp	r0, r3
    inbox = (inbox << 8) | inMsg.buf[i];
    33dc:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  for (int i = 0; i < 4; i++) {
    33e0:	d1f9      	bne.n	33d6 <CAB300()+0xa>
  if (CANmilliamps > 0x80000000) {
    CANmilliamps -= 0x80000000;
  } else {
    CANmilliamps = (0x80000000 - CANmilliamps) * -1;
  }
  if (settings.cursens == Canbus) {
    33e2:	4b14      	ldr	r3, [pc, #80]	; (3434 <CAB300()+0x68>)
    33e4:	4d14      	ldr	r5, [pc, #80]	; (3438 <CAB300()+0x6c>)
    33e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    33e8:	6022      	str	r2, [r4, #0]
    CANmilliamps = (0x80000000 - CANmilliamps) * -1;
    33ea:	f102 4000 	add.w	r0, r2, #2147483648	; 0x80000000
  if (settings.cursens == Canbus) {
    33ee:	2b02      	cmp	r3, #2
    33f0:	6028      	str	r0, [r5, #0]
    33f2:	d004      	beq.n	33fe <CAB300()+0x32>
    RawCur = CANmilliamps;
    getcurrent();
  }
  if (candebug == 1) {
    33f4:	4b11      	ldr	r3, [pc, #68]	; (343c <CAB300()+0x70>)
    33f6:	681b      	ldr	r3, [r3, #0]
    33f8:	2b01      	cmp	r3, #1
    33fa:	d00a      	beq.n	3412 <CAB300()+0x46>
    Serial.println();
    Serial.print(CANmilliamps);
    Serial.print("mA ");
  }
}
    33fc:	bd38      	pop	{r3, r4, r5, pc}
    RawCur = CANmilliamps;
    33fe:	f008 fc11 	bl	bc24 <__aeabi_i2f>
    3402:	4c0f      	ldr	r4, [pc, #60]	; (3440 <CAB300()+0x74>)
    3404:	6020      	str	r0, [r4, #0]
    getcurrent();
    3406:	f7ff f88b 	bl	2520 <getcurrent()>
  if (candebug == 1) {
    340a:	4b0c      	ldr	r3, [pc, #48]	; (343c <CAB300()+0x70>)
    340c:	681b      	ldr	r3, [r3, #0]
    340e:	2b01      	cmp	r3, #1
    3410:	d1f4      	bne.n	33fc <CAB300()+0x30>
    Serial.println();
    3412:	480c      	ldr	r0, [pc, #48]	; (3444 <CAB300()+0x78>)
    3414:	f005 f8d0 	bl	85b8 <Print::println()>
    Serial.print(CANmilliamps);
    3418:	6829      	ldr	r1, [r5, #0]
    341a:	480a      	ldr	r0, [pc, #40]	; (3444 <CAB300()+0x78>)
    341c:	f005 f8c4 	bl	85a8 <Print::print(long)>
}
    3420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    3424:	4808      	ldr	r0, [pc, #32]	; (3448 <CAB300()+0x7c>)
    3426:	2103      	movs	r1, #3
    3428:	f007 bd70 	b.w	af0c <usb_serial_write>
    342c:	1fffb12c 	.word	0x1fffb12c
    3430:	1fffb123 	.word	0x1fffb123
    3434:	1fffb204 	.word	0x1fffb204
    3438:	1fff8f9c 	.word	0x1fff8f9c
    343c:	1fffb070 	.word	0x1fffb070
    3440:	1fff8fc0 	.word	0x1fff8fc0
    3444:	1fff880c 	.word	0x1fff880c
    3448:	00013094 	.word	0x00013094

0000344c <canread()>:
void canread() {
    344c:	b5f0      	push	{r4, r5, r6, r7, lr}
  Can0.read(inMsg);
    344e:	4c3d      	ldr	r4, [pc, #244]	; (3544 <canread()+0xf8>)
    3450:	483d      	ldr	r0, [pc, #244]	; (3548 <canread()+0xfc>)
void canread() {
    3452:	b083      	sub	sp, #12
  Can0.read(inMsg);
    3454:	4621      	mov	r1, r4
    3456:	f003 fe15 	bl	7084 <FlexCAN::read(CAN_message_t&)>
  switch (inMsg.id) {
    345a:	6823      	ldr	r3, [r4, #0]
    345c:	f240 32c2 	movw	r2, #962	; 0x3c2
    3460:	4293      	cmp	r3, r2
    3462:	d058      	beq.n	3516 <canread()+0xca>
  if (inMsg.id >= 0x460 && inMsg.id < 0x480)  //do volt magic if ids are ones identified to be modules
    3464:	f5a3 628c 	sub.w	r2, r3, #1120	; 0x460
    3468:	2a1f      	cmp	r2, #31
    346a:	d94e      	bls.n	350a <canread()+0xbe>
  if (inMsg.id >= 0x7E0 && inMsg.id < 0x7F0)  //do volt magic if ids are ones identified to be modules
    346c:	f5a3 63fc 	sub.w	r3, r3, #2016	; 0x7e0
    3470:	2b0f      	cmp	r3, #15
    3472:	d945      	bls.n	3500 <canread()+0xb4>
  if (debug == 1) {
    3474:	4b35      	ldr	r3, [pc, #212]	; (354c <canread()+0x100>)
    3476:	681b      	ldr	r3, [r3, #0]
    3478:	2b01      	cmp	r3, #1
    347a:	d001      	beq.n	3480 <canread()+0x34>
}
    347c:	b003      	add	sp, #12
    347e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (candebug == 1) {
    3480:	4b33      	ldr	r3, [pc, #204]	; (3550 <canread()+0x104>)
    3482:	681b      	ldr	r3, [r3, #0]
    3484:	2b01      	cmp	r3, #1
    3486:	d1f9      	bne.n	347c <canread()+0x30>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3488:	4b32      	ldr	r3, [pc, #200]	; (3554 <canread()+0x108>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    348a:	4833      	ldr	r0, [pc, #204]	; (3558 <canread()+0x10c>)
    348c:	681b      	ldr	r3, [r3, #0]
    348e:	9301      	str	r3, [sp, #4]
	return ret;
    3490:	9901      	ldr	r1, [sp, #4]
    3492:	2300      	movs	r3, #0
    3494:	220a      	movs	r2, #10
    3496:	f005 f8a7 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
      if ((inMsg.id & 0x80000000) == 0x80000000)  // Determine if ID is standard (11 bits) or extended (29 bits)
    349a:	6822      	ldr	r2, [r4, #0]
        sprintf(msgString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (inMsg.id & 0x1FFFFFFF), inMsg.len);
    349c:	79e3      	ldrb	r3, [r4, #7]
        sprintf(msgString, ",0x%.3lX,false,%1d", inMsg.id, inMsg.len);
    349e:	482f      	ldr	r0, [pc, #188]	; (355c <canread()+0x110>)
      if ((inMsg.id & 0x80000000) == 0x80000000)  // Determine if ID is standard (11 bits) or extended (29 bits)
    34a0:	2a00      	cmp	r2, #0
        sprintf(msgString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (inMsg.id & 0x1FFFFFFF), inMsg.len);
    34a2:	bfb6      	itet	lt
    34a4:	492e      	ldrlt	r1, [pc, #184]	; (3560 <canread()+0x114>)
        sprintf(msgString, ",0x%.3lX,false,%1d", inMsg.id, inMsg.len);
    34a6:	492f      	ldrge	r1, [pc, #188]	; (3564 <canread()+0x118>)
        sprintf(msgString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (inMsg.id & 0x1FFFFFFF), inMsg.len);
    34a8:	f022 4260 	biclt.w	r2, r2, #3758096384	; 0xe0000000
        sprintf(msgString, ",0x%.3lX,false,%1d", inMsg.id, inMsg.len);
    34ac:	f009 fbae 	bl	cc0c <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    34b0:	482a      	ldr	r0, [pc, #168]	; (355c <canread()+0x110>)
    34b2:	f009 fdc5 	bl	d040 <strlen>
    34b6:	4601      	mov	r1, r0
    34b8:	4828      	ldr	r0, [pc, #160]	; (355c <canread()+0x110>)
    34ba:	f007 fd27 	bl	af0c <usb_serial_write>
      if ((inMsg.id & 0x40000000) == 0x40000000) {  // Determine if message is a remote request frame.
    34be:	6825      	ldr	r5, [r4, #0]
    34c0:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
    34c4:	d12b      	bne.n	351e <canread()+0xd2>
        for (byte i = 0; i < inMsg.len; i++) {
    34c6:	79e3      	ldrb	r3, [r4, #7]
    34c8:	b1a3      	cbz	r3, 34f4 <canread()+0xa8>
          sprintf(msgString, ", 0x%.2X", inMsg.buf[i]);
    34ca:	4f27      	ldr	r7, [pc, #156]	; (3568 <canread()+0x11c>)
    34cc:	4e23      	ldr	r6, [pc, #140]	; (355c <canread()+0x110>)
    34ce:	462b      	mov	r3, r5
    34d0:	4423      	add	r3, r4
    34d2:	4639      	mov	r1, r7
    34d4:	7a1a      	ldrb	r2, [r3, #8]
    34d6:	4630      	mov	r0, r6
    34d8:	f009 fb98 	bl	cc0c <sprintf>
    34dc:	4630      	mov	r0, r6
    34de:	f009 fdaf 	bl	d040 <strlen>
    34e2:	4601      	mov	r1, r0
    34e4:	4630      	mov	r0, r6
    34e6:	f007 fd11 	bl	af0c <usb_serial_write>
        for (byte i = 0; i < inMsg.len; i++) {
    34ea:	3501      	adds	r5, #1
    34ec:	79e2      	ldrb	r2, [r4, #7]
    34ee:	b2eb      	uxtb	r3, r5
    34f0:	429a      	cmp	r2, r3
    34f2:	d8ed      	bhi.n	34d0 <canread()+0x84>
      Serial.println();
    34f4:	4818      	ldr	r0, [pc, #96]	; (3558 <canread()+0x10c>)
}
    34f6:	b003      	add	sp, #12
    34f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      Serial.println();
    34fc:	f005 b85c 	b.w	85b8 <Print::println()>
    bms.decodecan(inMsg);  //do volt magic if ids are ones identified to be modules
    3500:	4910      	ldr	r1, [pc, #64]	; (3544 <canread()+0xf8>)
    3502:	481a      	ldr	r0, [pc, #104]	; (356c <canread()+0x120>)
    3504:	f7fd f98a 	bl	81c <BMSModuleManager::decodecan(CAN_message_t&)>
    3508:	e7b4      	b.n	3474 <canread()+0x28>
    bms.decodecan(inMsg);  //do volt magic if ids are ones identified to be modules
    350a:	490e      	ldr	r1, [pc, #56]	; (3544 <canread()+0xf8>)
    350c:	4817      	ldr	r0, [pc, #92]	; (356c <canread()+0x120>)
    350e:	f7fd f985 	bl	81c <BMSModuleManager::decodecan(CAN_message_t&)>
  if (inMsg.id >= 0x7E0 && inMsg.id < 0x7F0)  //do volt magic if ids are ones identified to be modules
    3512:	6823      	ldr	r3, [r4, #0]
    3514:	e7aa      	b.n	346c <canread()+0x20>
      CAB300();
    3516:	f7ff ff59 	bl	33cc <CAB300()>
  if (inMsg.id >= 0x460 && inMsg.id < 0x480)  //do volt magic if ids are ones identified to be modules
    351a:	6823      	ldr	r3, [r4, #0]
      break;
    351c:	e7a2      	b.n	3464 <canread()+0x18>
        sprintf(msgString, " REMOTE REQUEST FRAME");
    351e:	4d14      	ldr	r5, [pc, #80]	; (3570 <canread()+0x124>)
    3520:	4c0e      	ldr	r4, [pc, #56]	; (355c <canread()+0x110>)
    3522:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3526:	e895 0003 	ldmia.w	r5, {r0, r1}
    352a:	f844 0b04 	str.w	r0, [r4], #4
    352e:	4620      	mov	r0, r4
    3530:	f820 1914 	strh.w	r1, [r0], #-20
    3534:	f009 fd84 	bl	d040 <strlen>
    3538:	4601      	mov	r1, r0
    353a:	f1a4 0014 	sub.w	r0, r4, #20
    353e:	f007 fce5 	bl	af0c <usb_serial_write>
    3542:	e7d7      	b.n	34f4 <canread()+0xa8>
    3544:	1fffb11c 	.word	0x1fffb11c
    3548:	1fffb2e4 	.word	0x1fffb2e4
    354c:	1fff8744 	.word	0x1fff8744
    3550:	1fffb070 	.word	0x1fffb070
    3554:	1fffb4d8 	.word	0x1fffb4d8
    3558:	1fff880c 	.word	0x1fff880c
    355c:	1fffb17c 	.word	0x1fffb17c
    3560:	00013098 	.word	0x00013098
    3564:	000130c0 	.word	0x000130c0
    3568:	000130ec 	.word	0x000130ec
    356c:	1fff8fe0 	.word	0x1fff8fe0
    3570:	000130d4 	.word	0x000130d4

00003574 <currentlimit()>:

void currentlimit() {
    3574:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (bmsstatus == Error) {
    3578:	4b74      	ldr	r3, [pc, #464]	; (374c <currentlimit()+0x1d8>)
    357a:	781b      	ldrb	r3, [r3, #0]
    357c:	2b05      	cmp	r3, #5
    357e:	d106      	bne.n	358e <currentlimit()+0x1a>
    discurrent = 0;
    3580:	4973      	ldr	r1, [pc, #460]	; (3750 <currentlimit()+0x1dc>)
    chargecurrent = 0;
    3582:	4a74      	ldr	r2, [pc, #464]	; (3754 <currentlimit()+0x1e0>)
    discurrent = 0;
    3584:	2300      	movs	r3, #0
    3586:	600b      	str	r3, [r1, #0]
    chargecurrent = 0;
    3588:	6013      	str	r3, [r2, #0]
    discurrent = 0;
  }
  if (chargecurrent < 0) {
    chargecurrent = 0;
  }
}
    358a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    discurrent = settings.discurrentmax;
    358e:	4c72      	ldr	r4, [pc, #456]	; (3758 <currentlimit()+0x1e4>)
    3590:	4e6f      	ldr	r6, [pc, #444]	; (3750 <currentlimit()+0x1dc>)
    chargecurrent = settings.chargecurrentmax;
    3592:	4d70      	ldr	r5, [pc, #448]	; (3754 <currentlimit()+0x1e0>)
    discurrent = settings.discurrentmax;
    3594:	6e62      	ldr	r2, [r4, #100]	; 0x64
    chargecurrent = settings.chargecurrentmax;
    3596:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    3598:	4870      	ldr	r0, [pc, #448]	; (375c <currentlimit()+0x1e8>)
    discurrent = settings.discurrentmax;
    359a:	6032      	str	r2, [r6, #0]
    chargecurrent = settings.chargecurrentmax;
    359c:	602b      	str	r3, [r5, #0]
    if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    359e:	f7fd fbf3 	bl	d88 <BMSModuleManager::getLowTemperature()>
    35a2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    35a4:	f008 fd30 	bl	c008 <__aeabi_fcmplt>
    35a8:	b108      	cbz	r0, 35ae <currentlimit()+0x3a>
      chargecurrent = 0;
    35aa:	2300      	movs	r3, #0
    35ac:	602b      	str	r3, [r5, #0]
    if (bms.getHighTemperature() > settings.OverTSetpoint) {
    35ae:	486b      	ldr	r0, [pc, #428]	; (375c <currentlimit()+0x1e8>)
    35b0:	f7fd fbe8 	bl	d84 <BMSModuleManager::getHighTemperature()>
    35b4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    35b6:	f008 fd45 	bl	c044 <__aeabi_fcmpgt>
    35ba:	b110      	cbz	r0, 35c2 <currentlimit()+0x4e>
      discurrent = 0;
    35bc:	2300      	movs	r3, #0
    35be:	6033      	str	r3, [r6, #0]
      chargecurrent = 0;
    35c0:	602b      	str	r3, [r5, #0]
    if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    35c2:	4866      	ldr	r0, [pc, #408]	; (375c <currentlimit()+0x1e8>)
    35c4:	f7fd fb2a 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    35c8:	68e1      	ldr	r1, [r4, #12]
    35ca:	f008 fd3b 	bl	c044 <__aeabi_fcmpgt>
    35ce:	b108      	cbz	r0, 35d4 <currentlimit()+0x60>
      chargecurrent = 0;
    35d0:	2300      	movs	r3, #0
    35d2:	602b      	str	r3, [r5, #0]
    if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    35d4:	4861      	ldr	r0, [pc, #388]	; (375c <currentlimit()+0x1e8>)
    35d6:	f7fd fb21 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    35da:	68e1      	ldr	r1, [r4, #12]
    35dc:	f008 fd32 	bl	c044 <__aeabi_fcmpgt>
    35e0:	b108      	cbz	r0, 35e6 <currentlimit()+0x72>
      chargecurrent = 0;
    35e2:	2300      	movs	r3, #0
    35e4:	602b      	str	r3, [r5, #0]
    if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getLowCellVolt() < settings.DischVsetpoint) {
    35e6:	485d      	ldr	r0, [pc, #372]	; (375c <currentlimit()+0x1e8>)
    35e8:	f7fd faf0 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    35ec:	6921      	ldr	r1, [r4, #16]
    35ee:	f008 fd0b 	bl	c008 <__aeabi_fcmplt>
    35f2:	2800      	cmp	r0, #0
    35f4:	f000 80b6 	beq.w	3764 <currentlimit()+0x1f0>
      discurrent = 0;
    35f8:	2300      	movs	r3, #0
    35fa:	6033      	str	r3, [r6, #0]
    if (chargecurrent > 0) {
    35fc:	682b      	ldr	r3, [r5, #0]
    35fe:	2b00      	cmp	r3, #0
    3600:	dc0c      	bgt.n	361c <currentlimit()+0xa8>
  if (discurrent < 0) {
    3602:	6833      	ldr	r3, [r6, #0]
    3604:	2b00      	cmp	r3, #0
  if (chargecurrent < 0) {
    3606:	bfb7      	itett	lt
    3608:	682b      	ldrlt	r3, [r5, #0]
    360a:	682b      	ldrge	r3, [r5, #0]
    discurrent = 0;
    360c:	2200      	movlt	r2, #0
    360e:	6032      	strlt	r2, [r6, #0]
  if (chargecurrent < 0) {
    3610:	2b00      	cmp	r3, #0
    chargecurrent = 0;
    3612:	bfbc      	itt	lt
    3614:	2300      	movlt	r3, #0
    3616:	602b      	strlt	r3, [r5, #0]
}
    3618:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (bms.getHighTemperature() < settings.ChargeTSetpoint) {
    361c:	484f      	ldr	r0, [pc, #316]	; (375c <currentlimit()+0x1e8>)
    361e:	f7fd fbb1 	bl	d84 <BMSModuleManager::getHighTemperature()>
    3622:	6b21      	ldr	r1, [r4, #48]	; 0x30
    3624:	f008 fcf0 	bl	c008 <__aeabi_fcmplt>
    3628:	2800      	cmp	r0, #0
    362a:	d15f      	bne.n	36ec <currentlimit()+0x178>
      if (storagemode == 1) {
    362c:	4b4c      	ldr	r3, [pc, #304]	; (3760 <currentlimit()+0x1ec>)
        if (bms.getHighCellVolt() > (settings.StoreVsetpoint - settings.ChargeHys)) {
    362e:	484b      	ldr	r0, [pc, #300]	; (375c <currentlimit()+0x1e8>)
      if (storagemode == 1) {
    3630:	681b      	ldr	r3, [r3, #0]
    3632:	2b01      	cmp	r3, #1
    3634:	d042      	beq.n	36bc <currentlimit()+0x148>
        if (bms.getHighCellVolt() > (settings.ChargeVsetpoint - settings.ChargeHys)) {
    3636:	f7fd faf1 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    363a:	69e1      	ldr	r1, [r4, #28]
    363c:	4607      	mov	r7, r0
    363e:	6960      	ldr	r0, [r4, #20]
    3640:	f008 fa3a 	bl	bab8 <__aeabi_fsub>
    3644:	4601      	mov	r1, r0
    3646:	4638      	mov	r0, r7
    3648:	f008 fcfc 	bl	c044 <__aeabi_fcmpgt>
    364c:	2800      	cmp	r0, #0
    364e:	d0d8      	beq.n	3602 <currentlimit()+0x8e>
          chargecurrent = chargecurrent - map(bms.getHighCellVolt(), (settings.ChargeVsetpoint - settings.ChargeHys), settings.ChargeVsetpoint, settings.chargecurrentend, settings.chargecurrentmax);
    3650:	6828      	ldr	r0, [r5, #0]
    3652:	f008 fae7 	bl	bc24 <__aeabi_i2f>
    3656:	4681      	mov	r9, r0
    3658:	4840      	ldr	r0, [pc, #256]	; (375c <currentlimit()+0x1e8>)
    365a:	f7fd fadf 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    365e:	f8d4 a014 	ldr.w	sl, [r4, #20]
    3662:	4683      	mov	fp, r0
    3664:	69e1      	ldr	r1, [r4, #28]
    3666:	4650      	mov	r0, sl
    3668:	f008 fa26 	bl	bab8 <__aeabi_fsub>
    366c:	4680      	mov	r8, r0
	return (x - (T)in_min) * ((T)out_max - (T)out_min) / ((T)in_max - (T)in_min) + (T)out_min;
    366e:	6e20      	ldr	r0, [r4, #96]	; 0x60
    3670:	f008 fad8 	bl	bc24 <__aeabi_i2f>
    3674:	4607      	mov	r7, r0
    3676:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    3678:	f008 fad4 	bl	bc24 <__aeabi_i2f>
    367c:	4639      	mov	r1, r7
    367e:	f008 fa1b 	bl	bab8 <__aeabi_fsub>
    3682:	4641      	mov	r1, r8
    3684:	4604      	mov	r4, r0
    3686:	4658      	mov	r0, fp
    3688:	f008 fa16 	bl	bab8 <__aeabi_fsub>
    368c:	4601      	mov	r1, r0
    368e:	4620      	mov	r0, r4
    3690:	f008 fb1c 	bl	bccc <__aeabi_fmul>
    3694:	4641      	mov	r1, r8
    3696:	4604      	mov	r4, r0
    3698:	4650      	mov	r0, sl
    369a:	f008 fa0d 	bl	bab8 <__aeabi_fsub>
    369e:	4601      	mov	r1, r0
    36a0:	4620      	mov	r0, r4
    36a2:	f008 fbc7 	bl	be34 <__aeabi_fdiv>
    36a6:	4639      	mov	r1, r7
    36a8:	f008 fa08 	bl	babc <__addsf3>
    36ac:	4601      	mov	r1, r0
    36ae:	4648      	mov	r0, r9
    36b0:	f008 fa02 	bl	bab8 <__aeabi_fsub>
    36b4:	f008 fcd0 	bl	c058 <__aeabi_f2iz>
    36b8:	6028      	str	r0, [r5, #0]
    36ba:	e7a2      	b.n	3602 <currentlimit()+0x8e>
        if (bms.getHighCellVolt() > (settings.StoreVsetpoint - settings.ChargeHys)) {
    36bc:	f7fd faae 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    36c0:	69e1      	ldr	r1, [r4, #28]
    36c2:	4607      	mov	r7, r0
    36c4:	6a20      	ldr	r0, [r4, #32]
    36c6:	f008 f9f7 	bl	bab8 <__aeabi_fsub>
    36ca:	4601      	mov	r1, r0
    36cc:	4638      	mov	r0, r7
    36ce:	f008 fcb9 	bl	c044 <__aeabi_fcmpgt>
    36d2:	2800      	cmp	r0, #0
    36d4:	d095      	beq.n	3602 <currentlimit()+0x8e>
          chargecurrent = chargecurrent - map(bms.getHighCellVolt(), (settings.StoreVsetpoint - settings.ChargeHys), settings.StoreVsetpoint, settings.chargecurrentend, settings.chargecurrentmax);
    36d6:	6828      	ldr	r0, [r5, #0]
    36d8:	f008 faa4 	bl	bc24 <__aeabi_i2f>
    36dc:	4681      	mov	r9, r0
    36de:	481f      	ldr	r0, [pc, #124]	; (375c <currentlimit()+0x1e8>)
    36e0:	f7fd fa9c 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    36e4:	f8d4 a020 	ldr.w	sl, [r4, #32]
    36e8:	4683      	mov	fp, r0
    36ea:	e7bb      	b.n	3664 <currentlimit()+0xf0>
        chargecurrent = chargecurrent - map(bms.getHighTemperature(), settings.UnderTSetpoint, settings.ChargeTSetpoint, settings.chargecurrentmax, 0);
    36ec:	6828      	ldr	r0, [r5, #0]
    36ee:	f008 fa99 	bl	bc24 <__aeabi_i2f>
    36f2:	4680      	mov	r8, r0
    36f4:	4819      	ldr	r0, [pc, #100]	; (375c <currentlimit()+0x1e8>)
    36f6:	f7fd fb45 	bl	d84 <BMSModuleManager::getHighTemperature()>
    36fa:	4681      	mov	r9, r0
    36fc:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    36fe:	f8d4 a02c 	ldr.w	sl, [r4, #44]	; 0x2c
    3702:	f008 fa8f 	bl	bc24 <__aeabi_i2f>
    3706:	4651      	mov	r1, sl
    3708:	4607      	mov	r7, r0
    370a:	4648      	mov	r0, r9
    370c:	f008 f9d4 	bl	bab8 <__aeabi_fsub>
    3710:	4639      	mov	r1, r7
    3712:	4681      	mov	r9, r0
    3714:	2000      	movs	r0, #0
    3716:	f008 f9cf 	bl	bab8 <__aeabi_fsub>
    371a:	4601      	mov	r1, r0
    371c:	4648      	mov	r0, r9
    371e:	f008 fad5 	bl	bccc <__aeabi_fmul>
    3722:	4651      	mov	r1, sl
    3724:	4681      	mov	r9, r0
    3726:	6b20      	ldr	r0, [r4, #48]	; 0x30
    3728:	f008 f9c6 	bl	bab8 <__aeabi_fsub>
    372c:	4601      	mov	r1, r0
    372e:	4648      	mov	r0, r9
    3730:	f008 fb80 	bl	be34 <__aeabi_fdiv>
    3734:	4639      	mov	r1, r7
    3736:	f008 f9c1 	bl	babc <__addsf3>
    373a:	4601      	mov	r1, r0
    373c:	4640      	mov	r0, r8
    373e:	f008 f9bb 	bl	bab8 <__aeabi_fsub>
    3742:	f008 fc89 	bl	c058 <__aeabi_f2iz>
    3746:	6028      	str	r0, [r5, #0]
    3748:	e770      	b.n	362c <currentlimit()+0xb8>
    374a:	bf00      	nop
    374c:	1fffb008 	.word	0x1fffb008
    3750:	1fffb100 	.word	0x1fffb100
    3754:	1fffb078 	.word	0x1fffb078
    3758:	1fffb204 	.word	0x1fffb204
    375c:	1fff8fe0 	.word	0x1fff8fe0
    3760:	1fffb2d4 	.word	0x1fffb2d4
    if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getLowCellVolt() < settings.DischVsetpoint) {
    3764:	4848      	ldr	r0, [pc, #288]	; (3888 <currentlimit()+0x314>)
    3766:	f7fd fa31 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    376a:	69a1      	ldr	r1, [r4, #24]
    376c:	f008 fc4c 	bl	c008 <__aeabi_fcmplt>
    3770:	2800      	cmp	r0, #0
    3772:	f47f af41 	bne.w	35f8 <currentlimit()+0x84>
    if (discurrent > 0) {
    3776:	6833      	ldr	r3, [r6, #0]
    3778:	2b00      	cmp	r3, #0
    377a:	f77f af3f 	ble.w	35fc <currentlimit()+0x88>
      if (bms.getLowTemperature() > settings.DisTSetpoint) {
    377e:	4842      	ldr	r0, [pc, #264]	; (3888 <currentlimit()+0x314>)
    3780:	f7fd fb02 	bl	d88 <BMSModuleManager::getLowTemperature()>
    3784:	6b61      	ldr	r1, [r4, #52]	; 0x34
    3786:	f008 fc5d 	bl	c044 <__aeabi_fcmpgt>
    378a:	2800      	cmp	r0, #0
    378c:	d152      	bne.n	3834 <currentlimit()+0x2c0>
      if (bms.getLowCellVolt() > settings.UnderVSetpoint || bms.getLowCellVolt() > settings.DischVsetpoint) {
    378e:	483e      	ldr	r0, [pc, #248]	; (3888 <currentlimit()+0x314>)
    3790:	f7fd fa1c 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    3794:	6921      	ldr	r1, [r4, #16]
    3796:	f008 fc55 	bl	c044 <__aeabi_fcmpgt>
    379a:	b940      	cbnz	r0, 37ae <currentlimit()+0x23a>
    379c:	483a      	ldr	r0, [pc, #232]	; (3888 <currentlimit()+0x314>)
    379e:	f7fd fa15 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    37a2:	69a1      	ldr	r1, [r4, #24]
    37a4:	f008 fc4e 	bl	c044 <__aeabi_fcmpgt>
    37a8:	2800      	cmp	r0, #0
    37aa:	f43f af27 	beq.w	35fc <currentlimit()+0x88>
        if (bms.getLowCellVolt() < (settings.DischVsetpoint + settings.DisTaper)) {
    37ae:	4836      	ldr	r0, [pc, #216]	; (3888 <currentlimit()+0x314>)
    37b0:	f7fd fa0c 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    37b4:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
    37b8:	4607      	mov	r7, r0
    37ba:	69a0      	ldr	r0, [r4, #24]
    37bc:	f008 f97e 	bl	babc <__addsf3>
    37c0:	4601      	mov	r1, r0
    37c2:	4638      	mov	r0, r7
    37c4:	f008 fc20 	bl	c008 <__aeabi_fcmplt>
    37c8:	2800      	cmp	r0, #0
    37ca:	f43f af17 	beq.w	35fc <currentlimit()+0x88>
          discurrent = discurrent - map(bms.getLowCellVolt(), settings.DischVsetpoint, (settings.DischVsetpoint + settings.DisTaper), settings.discurrentmax, 0);
    37ce:	6830      	ldr	r0, [r6, #0]
    37d0:	f008 fa28 	bl	bc24 <__aeabi_i2f>
    37d4:	4680      	mov	r8, r0
    37d6:	482c      	ldr	r0, [pc, #176]	; (3888 <currentlimit()+0x314>)
    37d8:	f7fd f9f8 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    37dc:	4681      	mov	r9, r0
    37de:	6e60      	ldr	r0, [r4, #100]	; 0x64
    37e0:	f8d4 a018 	ldr.w	sl, [r4, #24]
    37e4:	f008 fa1e 	bl	bc24 <__aeabi_i2f>
    37e8:	4651      	mov	r1, sl
    37ea:	4607      	mov	r7, r0
    37ec:	4648      	mov	r0, r9
    37ee:	f008 f963 	bl	bab8 <__aeabi_fsub>
    37f2:	4639      	mov	r1, r7
    37f4:	4681      	mov	r9, r0
    37f6:	2000      	movs	r0, #0
    37f8:	f008 f95e 	bl	bab8 <__aeabi_fsub>
    37fc:	4601      	mov	r1, r0
    37fe:	4648      	mov	r0, r9
    3800:	f008 fa64 	bl	bccc <__aeabi_fmul>
    3804:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
    3808:	4681      	mov	r9, r0
    380a:	4650      	mov	r0, sl
    380c:	f008 f956 	bl	babc <__addsf3>
    3810:	4651      	mov	r1, sl
    3812:	f008 f951 	bl	bab8 <__aeabi_fsub>
    3816:	4601      	mov	r1, r0
    3818:	4648      	mov	r0, r9
    381a:	f008 fb0b 	bl	be34 <__aeabi_fdiv>
    381e:	4639      	mov	r1, r7
    3820:	f008 f94c 	bl	babc <__addsf3>
    3824:	4601      	mov	r1, r0
    3826:	4640      	mov	r0, r8
    3828:	f008 f946 	bl	bab8 <__aeabi_fsub>
    382c:	f008 fc14 	bl	c058 <__aeabi_f2iz>
    3830:	6030      	str	r0, [r6, #0]
    3832:	e6e3      	b.n	35fc <currentlimit()+0x88>
        discurrent = discurrent - map(bms.getLowTemperature(), settings.DisTSetpoint, settings.OverTSetpoint, 0, settings.discurrentmax);
    3834:	6830      	ldr	r0, [r6, #0]
    3836:	f008 f9f5 	bl	bc24 <__aeabi_i2f>
    383a:	4607      	mov	r7, r0
    383c:	4812      	ldr	r0, [pc, #72]	; (3888 <currentlimit()+0x314>)
    383e:	f7fd faa3 	bl	d88 <BMSModuleManager::getLowTemperature()>
    3842:	4681      	mov	r9, r0
    3844:	6e60      	ldr	r0, [r4, #100]	; 0x64
    3846:	f8d4 a034 	ldr.w	sl, [r4, #52]	; 0x34
    384a:	f008 f9eb 	bl	bc24 <__aeabi_i2f>
    384e:	4651      	mov	r1, sl
    3850:	4680      	mov	r8, r0
    3852:	4648      	mov	r0, r9
    3854:	f008 f930 	bl	bab8 <__aeabi_fsub>
    3858:	4601      	mov	r1, r0
    385a:	4640      	mov	r0, r8
    385c:	f008 fa36 	bl	bccc <__aeabi_fmul>
    3860:	4651      	mov	r1, sl
    3862:	4680      	mov	r8, r0
    3864:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    3866:	f008 f927 	bl	bab8 <__aeabi_fsub>
    386a:	4601      	mov	r1, r0
    386c:	4640      	mov	r0, r8
    386e:	f008 fae1 	bl	be34 <__aeabi_fdiv>
    3872:	2100      	movs	r1, #0
    3874:	f008 f922 	bl	babc <__addsf3>
    3878:	4601      	mov	r1, r0
    387a:	4638      	mov	r0, r7
    387c:	f008 f91c 	bl	bab8 <__aeabi_fsub>
    3880:	f008 fbea 	bl	c058 <__aeabi_f2iz>
    3884:	6030      	str	r0, [r6, #0]
    3886:	e782      	b.n	378e <currentlimit()+0x21a>
    3888:	1fff8fe0 	.word	0x1fff8fe0

0000388c <inputdebug()>:

void inputdebug() {
    388c:	b508      	push	{r3, lr}
  Serial.println();
    388e:	4828      	ldr	r0, [pc, #160]	; (3930 <inputdebug()+0xa4>)
    3890:	f004 fe92 	bl	85b8 <Print::println()>
    3894:	4827      	ldr	r0, [pc, #156]	; (3934 <inputdebug()+0xa8>)
    3896:	2107      	movs	r1, #7
    3898:	f007 fb38 	bl	af0c <usb_serial_write>
  Serial.print("Input: ");
  if (digitalRead(IN1)) {
    389c:	2011      	movs	r0, #17
    389e:	f005 fce9 	bl	9274 <digitalRead>
    38a2:	b300      	cbz	r0, 38e6 <inputdebug()+0x5a>
    38a4:	4824      	ldr	r0, [pc, #144]	; (3938 <inputdebug()+0xac>)
    38a6:	2106      	movs	r1, #6
    38a8:	f007 fb30 	bl	af0c <usb_serial_write>
    Serial.print("1 ON  ");
  } else {
    Serial.print("1 OFF ");
  }
  if (digitalRead(IN3)) {
    38ac:	2012      	movs	r0, #18
    38ae:	f005 fce1 	bl	9274 <digitalRead>
    38b2:	b308      	cbz	r0, 38f8 <inputdebug()+0x6c>
    38b4:	4821      	ldr	r0, [pc, #132]	; (393c <inputdebug()+0xb0>)
    38b6:	2106      	movs	r1, #6
    38b8:	f007 fb28 	bl	af0c <usb_serial_write>
    Serial.print("2 ON  ");
  } else {
    Serial.print("2 OFF ");
  }
  if (digitalRead(IN3)) {
    38bc:	2012      	movs	r0, #18
    38be:	f005 fcd9 	bl	9274 <digitalRead>
    38c2:	b310      	cbz	r0, 390a <inputdebug()+0x7e>
    38c4:	481e      	ldr	r0, [pc, #120]	; (3940 <inputdebug()+0xb4>)
    38c6:	2106      	movs	r1, #6
    38c8:	f007 fb20 	bl	af0c <usb_serial_write>
    Serial.print("3 ON  ");
  } else {
    Serial.print("3 OFF ");
  }
  if (digitalRead(IN4)) {
    38cc:	2013      	movs	r0, #19
    38ce:	f005 fcd1 	bl	9274 <digitalRead>
    38d2:	b318      	cbz	r0, 391c <inputdebug()+0x90>
    38d4:	481b      	ldr	r0, [pc, #108]	; (3944 <inputdebug()+0xb8>)
    38d6:	2106      	movs	r1, #6
    38d8:	f007 fb18 	bl	af0c <usb_serial_write>
    Serial.print("4 ON  ");
  } else {
    Serial.print("4 OFF ");
  }
  Serial.println();
}
    38dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println();
    38e0:	4813      	ldr	r0, [pc, #76]	; (3930 <inputdebug()+0xa4>)
    38e2:	f004 be69 	b.w	85b8 <Print::println()>
    38e6:	4818      	ldr	r0, [pc, #96]	; (3948 <inputdebug()+0xbc>)
    38e8:	2106      	movs	r1, #6
    38ea:	f007 fb0f 	bl	af0c <usb_serial_write>
  if (digitalRead(IN3)) {
    38ee:	2012      	movs	r0, #18
    38f0:	f005 fcc0 	bl	9274 <digitalRead>
    38f4:	2800      	cmp	r0, #0
    38f6:	d1dd      	bne.n	38b4 <inputdebug()+0x28>
    38f8:	4814      	ldr	r0, [pc, #80]	; (394c <inputdebug()+0xc0>)
    38fa:	2106      	movs	r1, #6
    38fc:	f007 fb06 	bl	af0c <usb_serial_write>
  if (digitalRead(IN3)) {
    3900:	2012      	movs	r0, #18
    3902:	f005 fcb7 	bl	9274 <digitalRead>
    3906:	2800      	cmp	r0, #0
    3908:	d1dc      	bne.n	38c4 <inputdebug()+0x38>
    390a:	4811      	ldr	r0, [pc, #68]	; (3950 <inputdebug()+0xc4>)
    390c:	2106      	movs	r1, #6
    390e:	f007 fafd 	bl	af0c <usb_serial_write>
  if (digitalRead(IN4)) {
    3912:	2013      	movs	r0, #19
    3914:	f005 fcae 	bl	9274 <digitalRead>
    3918:	2800      	cmp	r0, #0
    391a:	d1db      	bne.n	38d4 <inputdebug()+0x48>
    391c:	480d      	ldr	r0, [pc, #52]	; (3954 <inputdebug()+0xc8>)
    391e:	2106      	movs	r1, #6
    3920:	f007 faf4 	bl	af0c <usb_serial_write>
}
    3924:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println();
    3928:	4801      	ldr	r0, [pc, #4]	; (3930 <inputdebug()+0xa4>)
    392a:	f004 be45 	b.w	85b8 <Print::println()>
    392e:	bf00      	nop
    3930:	1fff880c 	.word	0x1fff880c
    3934:	000130f8 	.word	0x000130f8
    3938:	00013100 	.word	0x00013100
    393c:	00013110 	.word	0x00013110
    3940:	00013120 	.word	0x00013120
    3944:	00013130 	.word	0x00013130
    3948:	00013108 	.word	0x00013108
    394c:	00013118 	.word	0x00013118
    3950:	00013128 	.word	0x00013128
    3954:	00013138 	.word	0x00013138

00003958 <outputdebug()>:

void outputdebug() {
    3958:	b510      	push	{r4, lr}
  if (outputstate < 5) {
    395a:	4c29      	ldr	r4, [pc, #164]	; (3a00 <outputdebug()+0xa8>)
    395c:	6823      	ldr	r3, [r4, #0]
    395e:	2b04      	cmp	r3, #4
    3960:	dc26      	bgt.n	39b0 <outputdebug()+0x58>
    digitalWrite(OUT1, HIGH);
    3962:	2101      	movs	r1, #1
    3964:	200b      	movs	r0, #11
    3966:	f005 fc5f 	bl	9228 <digitalWrite>
    digitalWrite(OUT2, HIGH);
    396a:	2101      	movs	r1, #1
    396c:	200c      	movs	r0, #12
    396e:	f005 fc5b 	bl	9228 <digitalWrite>
    digitalWrite(OUT3, HIGH);
    3972:	2101      	movs	r1, #1
    3974:	2014      	movs	r0, #20
    3976:	f005 fc57 	bl	9228 <digitalWrite>
    digitalWrite(OUT4, HIGH);
    397a:	2101      	movs	r1, #1
    397c:	2015      	movs	r0, #21
    397e:	f005 fc53 	bl	9228 <digitalWrite>
    analogWrite(OUT5, 255);
    3982:	21ff      	movs	r1, #255	; 0xff
    3984:	2016      	movs	r0, #22
    3986:	f005 fad3 	bl	8f30 <analogWrite>
    analogWrite(OUT6, 255);
    398a:	21ff      	movs	r1, #255	; 0xff
    398c:	2017      	movs	r0, #23
    398e:	f005 facf 	bl	8f30 <analogWrite>
    analogWrite(OUT7, 255);
    3992:	21ff      	movs	r1, #255	; 0xff
    3994:	2005      	movs	r0, #5
    3996:	f005 facb 	bl	8f30 <analogWrite>
    analogWrite(OUT8, 255);
    399a:	21ff      	movs	r1, #255	; 0xff
    399c:	2006      	movs	r0, #6
    399e:	f005 fac7 	bl	8f30 <analogWrite>
    outputstate++;
    39a2:	6823      	ldr	r3, [r4, #0]
    39a4:	3301      	adds	r3, #1
    analogWrite(OUT6, 0);
    analogWrite(OUT7, 0);
    analogWrite(OUT8, 0);
    outputstate++;
  }
  if (outputstate > 10) {
    39a6:	2b0a      	cmp	r3, #10
    outputstate = 0;
    39a8:	bfc8      	it	gt
    39aa:	2300      	movgt	r3, #0
    39ac:	6023      	str	r3, [r4, #0]
  }
}
    39ae:	bd10      	pop	{r4, pc}
    digitalWrite(OUT1, LOW);
    39b0:	2100      	movs	r1, #0
    39b2:	200b      	movs	r0, #11
    39b4:	f005 fc38 	bl	9228 <digitalWrite>
    digitalWrite(OUT2, LOW);
    39b8:	2100      	movs	r1, #0
    39ba:	200c      	movs	r0, #12
    39bc:	f005 fc34 	bl	9228 <digitalWrite>
    digitalWrite(OUT3, LOW);
    39c0:	2100      	movs	r1, #0
    39c2:	2014      	movs	r0, #20
    39c4:	f005 fc30 	bl	9228 <digitalWrite>
    digitalWrite(OUT4, LOW);
    39c8:	2100      	movs	r1, #0
    39ca:	2015      	movs	r0, #21
    39cc:	f005 fc2c 	bl	9228 <digitalWrite>
    analogWrite(OUT5, 0);
    39d0:	2100      	movs	r1, #0
    39d2:	2016      	movs	r0, #22
    39d4:	f005 faac 	bl	8f30 <analogWrite>
    analogWrite(OUT6, 0);
    39d8:	2100      	movs	r1, #0
    39da:	2017      	movs	r0, #23
    39dc:	f005 faa8 	bl	8f30 <analogWrite>
    analogWrite(OUT7, 0);
    39e0:	2100      	movs	r1, #0
    39e2:	2005      	movs	r0, #5
    39e4:	f005 faa4 	bl	8f30 <analogWrite>
    analogWrite(OUT8, 0);
    39e8:	2100      	movs	r1, #0
    39ea:	2006      	movs	r0, #6
    39ec:	f005 faa0 	bl	8f30 <analogWrite>
    outputstate++;
    39f0:	6823      	ldr	r3, [r4, #0]
    39f2:	3301      	adds	r3, #1
  if (outputstate > 10) {
    39f4:	2b0a      	cmp	r3, #10
    outputstate = 0;
    39f6:	bfc8      	it	gt
    39f8:	2300      	movgt	r3, #0
    39fa:	6023      	str	r3, [r4, #0]
}
    39fc:	bd10      	pop	{r4, pc}
    39fe:	bf00      	nop
    3a00:	1fffb200 	.word	0x1fffb200

00003a04 <dashupdate()>:
      Serial.print(p);
      Serial.print(" OUT7 ");
  */
}

void dashupdate() {
    3a04:	b570      	push	{r4, r5, r6, lr}
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial2_write((const uint8_t *)str, len);
    3a06:	48ba      	ldr	r0, [pc, #744]	; (3cf0 <dashupdate()+0x2ec>)
    3a08:	b082      	sub	sp, #8
    3a0a:	2109      	movs	r1, #9
    3a0c:	f005 ff52 	bl	98b4 <serial2_write>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3a10:	2022      	movs	r0, #34	; 0x22
    3a12:	f005 fed3 	bl	97bc <serial2_putchar>
  Serial2.write("stat.txt=");
  Serial2.write(0x22);
  if (settings.ESSmode == 1) {
    3a16:	4bb7      	ldr	r3, [pc, #732]	; (3cf4 <dashupdate()+0x2f0>)
    3a18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    3a1c:	2b01      	cmp	r3, #1
    switch (bmsstatus) {
    3a1e:	4bb6      	ldr	r3, [pc, #728]	; (3cf8 <dashupdate()+0x2f4>)
    3a20:	781b      	ldrb	r3, [r3, #0]
  if (settings.ESSmode == 1) {
    3a22:	d009      	beq.n	3a38 <dashupdate()+0x34>
      case (Error):
        Serial2.print(" Error ");
        break;
    }
  } else {
    switch (bmsstatus) {
    3a24:	2b05      	cmp	r3, #5
    3a26:	d810      	bhi.n	3a4a <dashupdate()+0x46>
    3a28:	e8df f013 	tbh	[pc, r3, lsl #1]
    3a2c:	014d0148 	.word	0x014d0148
    3a30:	01570152 	.word	0x01570152
    3a34:	000b0143 	.word	0x000b0143
    switch (bmsstatus) {
    3a38:	2b00      	cmp	r3, #0
    3a3a:	f000 8153 	beq.w	3ce4 <dashupdate()+0x2e0>
    3a3e:	2b05      	cmp	r3, #5
    3a40:	d103      	bne.n	3a4a <dashupdate()+0x46>
					{ serial2_write(buffer, size); return size; }
    3a42:	48ae      	ldr	r0, [pc, #696]	; (3cfc <dashupdate()+0x2f8>)
    3a44:	2107      	movs	r1, #7
    3a46:	f005 ff35 	bl	98b4 <serial2_write>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3a4a:	2022      	movs	r0, #34	; 0x22
    3a4c:	f005 feb6 	bl	97bc <serial2_putchar>
    3a50:	20ff      	movs	r0, #255	; 0xff
    3a52:	f005 feb3 	bl	97bc <serial2_putchar>
    3a56:	20ff      	movs	r0, #255	; 0xff
    3a58:	f005 feb0 	bl	97bc <serial2_putchar>
  Serial2.write(0x22);
  Serial2.write(0xff);  // We always have to send this three lines after each command sent to the nextion display.
  Serial2.write(0xff);
  Serial2.write(0xff);
  Serial2.print("soc.val=");
  Serial2.print(SOC);
    3a5c:	4ca8      	ldr	r4, [pc, #672]	; (3d00 <dashupdate()+0x2fc>)
    3a5e:	20ff      	movs	r0, #255	; 0xff
    3a60:	f005 feac 	bl	97bc <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3a64:	48a7      	ldr	r0, [pc, #668]	; (3d04 <dashupdate()+0x300>)
    3a66:	2108      	movs	r1, #8
    3a68:	f005 ff24 	bl	98b4 <serial2_write>
	size_t print(int n)				{ return print((long)n); }
    3a6c:	6821      	ldr	r1, [r4, #0]
    3a6e:	48a6      	ldr	r0, [pc, #664]	; (3d08 <dashupdate()+0x304>)
    3a70:	f004 fd9a 	bl	85a8 <Print::print(long)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3a74:	20ff      	movs	r0, #255	; 0xff
    3a76:	f005 fea1 	bl	97bc <serial2_putchar>
    3a7a:	20ff      	movs	r0, #255	; 0xff
    3a7c:	f005 fe9e 	bl	97bc <serial2_putchar>
    3a80:	20ff      	movs	r0, #255	; 0xff
    3a82:	f005 fe9b 	bl	97bc <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3a86:	48a1      	ldr	r0, [pc, #644]	; (3d0c <dashupdate()+0x308>)
    3a88:	2109      	movs	r1, #9
    3a8a:	f005 ff13 	bl	98b4 <serial2_write>
    3a8e:	6821      	ldr	r1, [r4, #0]
    3a90:	489d      	ldr	r0, [pc, #628]	; (3d08 <dashupdate()+0x304>)
    3a92:	f004 fd89 	bl	85a8 <Print::print(long)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3a96:	20ff      	movs	r0, #255	; 0xff
    3a98:	f005 fe90 	bl	97bc <serial2_putchar>
    3a9c:	20ff      	movs	r0, #255	; 0xff
    3a9e:	f005 fe8d 	bl	97bc <serial2_putchar>
    3aa2:	20ff      	movs	r0, #255	; 0xff
    3aa4:	f005 fe8a 	bl	97bc <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3aa8:	4899      	ldr	r0, [pc, #612]	; (3d10 <dashupdate()+0x30c>)
    3aaa:	210c      	movs	r1, #12
    3aac:	f005 ff02 	bl	98b4 <serial2_write>
  Serial2.print(SOC);
  Serial2.write(0xff);  // We always have to send this three lines after each command sent to the nextion display.
  Serial2.write(0xff);
  Serial2.write(0xff);
  Serial2.print("current.val=");
  Serial2.print(currentact / 100, 0);
    3ab0:	4b98      	ldr	r3, [pc, #608]	; (3d14 <dashupdate()+0x310>)
    3ab2:	4999      	ldr	r1, [pc, #612]	; (3d18 <dashupdate()+0x314>)
    3ab4:	6818      	ldr	r0, [r3, #0]
    3ab6:	f008 f9bd 	bl	be34 <__aeabi_fdiv>
    3aba:	f007 fee3 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    3abe:	2400      	movs	r4, #0
    3ac0:	4602      	mov	r2, r0
    3ac2:	460b      	mov	r3, r1
    3ac4:	9400      	str	r4, [sp, #0]
    3ac6:	4890      	ldr	r0, [pc, #576]	; (3d08 <dashupdate()+0x304>)
    3ac8:	f004 fd9a 	bl	8600 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3acc:	20ff      	movs	r0, #255	; 0xff
    3ace:	f005 fe75 	bl	97bc <serial2_putchar>
    3ad2:	20ff      	movs	r0, #255	; 0xff
    3ad4:	f005 fe72 	bl	97bc <serial2_putchar>
    3ad8:	20ff      	movs	r0, #255	; 0xff
    3ada:	f005 fe6f 	bl	97bc <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3ade:	2109      	movs	r1, #9
    3ae0:	488e      	ldr	r0, [pc, #568]	; (3d1c <dashupdate()+0x318>)
    3ae2:	f005 fee7 	bl	98b4 <serial2_write>
  Serial2.write(0xff);  // We always have to send this three lines after each command sent to the nextion display.
  Serial2.write(0xff);
  Serial2.write(0xff);
  Serial2.print("temp.val=");
  Serial2.print(bms.getAvgTemperature(), 0);
    3ae6:	488e      	ldr	r0, [pc, #568]	; (3d20 <dashupdate()+0x31c>)
    3ae8:	f7fd f8f0 	bl	ccc <BMSModuleManager::getAvgTemperature()>
    3aec:	f007 feca 	bl	b884 <__aeabi_f2d>
    3af0:	9400      	str	r4, [sp, #0]
    3af2:	4602      	mov	r2, r0
    3af4:	460b      	mov	r3, r1
    3af6:	4884      	ldr	r0, [pc, #528]	; (3d08 <dashupdate()+0x304>)
    3af8:	f004 fd82 	bl	8600 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3afc:	20ff      	movs	r0, #255	; 0xff
    3afe:	f005 fe5d 	bl	97bc <serial2_putchar>
    3b02:	20ff      	movs	r0, #255	; 0xff
    3b04:	f005 fe5a 	bl	97bc <serial2_putchar>
    3b08:	20ff      	movs	r0, #255	; 0xff
    3b0a:	f005 fe57 	bl	97bc <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3b0e:	210c      	movs	r1, #12
    3b10:	4884      	ldr	r0, [pc, #528]	; (3d24 <dashupdate()+0x320>)
    3b12:	f005 fecf 	bl	98b4 <serial2_write>
  Serial2.write(0xff);  // We always have to send this three lines after each command sent to the nextion display.
  Serial2.write(0xff);
  Serial2.write(0xff);
  Serial2.print("templow.val=");
  Serial2.print(bms.getLowTemperature(), 0);
    3b16:	4882      	ldr	r0, [pc, #520]	; (3d20 <dashupdate()+0x31c>)
    3b18:	f7fd f936 	bl	d88 <BMSModuleManager::getLowTemperature()>
    3b1c:	f007 feb2 	bl	b884 <__aeabi_f2d>
    3b20:	9400      	str	r4, [sp, #0]
    3b22:	4602      	mov	r2, r0
    3b24:	460b      	mov	r3, r1
    3b26:	4878      	ldr	r0, [pc, #480]	; (3d08 <dashupdate()+0x304>)
    3b28:	f004 fd6a 	bl	8600 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3b2c:	20ff      	movs	r0, #255	; 0xff
    3b2e:	f005 fe45 	bl	97bc <serial2_putchar>
    3b32:	20ff      	movs	r0, #255	; 0xff
    3b34:	f005 fe42 	bl	97bc <serial2_putchar>
    3b38:	20ff      	movs	r0, #255	; 0xff
    3b3a:	f005 fe3f 	bl	97bc <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3b3e:	210d      	movs	r1, #13
    3b40:	4879      	ldr	r0, [pc, #484]	; (3d28 <dashupdate()+0x324>)
    3b42:	f005 feb7 	bl	98b4 <serial2_write>
  Serial2.write(0xff);  // We always have to send this three lines after each command sent to the nextion display.
  Serial2.write(0xff);
  Serial2.write(0xff);
  Serial2.print("temphigh.val=");
  Serial2.print(bms.getHighTemperature(), 0);
    3b46:	4876      	ldr	r0, [pc, #472]	; (3d20 <dashupdate()+0x31c>)
    3b48:	f7fd f91c 	bl	d84 <BMSModuleManager::getHighTemperature()>
    3b4c:	f007 fe9a 	bl	b884 <__aeabi_f2d>
    3b50:	9400      	str	r4, [sp, #0]
    3b52:	4602      	mov	r2, r0
    3b54:	460b      	mov	r3, r1
    3b56:	486c      	ldr	r0, [pc, #432]	; (3d08 <dashupdate()+0x304>)
    3b58:	f004 fd52 	bl	8600 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3b5c:	20ff      	movs	r0, #255	; 0xff
    3b5e:	f005 fe2d 	bl	97bc <serial2_putchar>
    3b62:	20ff      	movs	r0, #255	; 0xff
    3b64:	f005 fe2a 	bl	97bc <serial2_putchar>
    3b68:	20ff      	movs	r0, #255	; 0xff
    3b6a:	f005 fe27 	bl	97bc <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3b6e:	2109      	movs	r1, #9
    3b70:	486e      	ldr	r0, [pc, #440]	; (3d2c <dashupdate()+0x328>)
    3b72:	f005 fe9f 	bl	98b4 <serial2_write>
  Serial2.write(0xff);  // We always have to send this three lines after each command sent to the nextion display.
  Serial2.write(0xff);
  Serial2.write(0xff);
  Serial2.print("volt.val=");
  Serial2.print(bms.getPackVoltage() * 10, 0);
    3b76:	486a      	ldr	r0, [pc, #424]	; (3d20 <dashupdate()+0x31c>)
    3b78:	f7fd f876 	bl	c68 <BMSModuleManager::getPackVoltage()>
    3b7c:	496c      	ldr	r1, [pc, #432]	; (3d30 <dashupdate()+0x32c>)
    3b7e:	f008 f8a5 	bl	bccc <__aeabi_fmul>
    3b82:	f007 fe7f 	bl	b884 <__aeabi_f2d>
    3b86:	9400      	str	r4, [sp, #0]
    3b88:	4602      	mov	r2, r0
    3b8a:	460b      	mov	r3, r1
    3b8c:	485e      	ldr	r0, [pc, #376]	; (3d08 <dashupdate()+0x304>)
    3b8e:	f004 fd37 	bl	8600 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3b92:	20ff      	movs	r0, #255	; 0xff
    3b94:	f005 fe12 	bl	97bc <serial2_putchar>
    3b98:	20ff      	movs	r0, #255	; 0xff
    3b9a:	f005 fe0f 	bl	97bc <serial2_putchar>
    3b9e:	20ff      	movs	r0, #255	; 0xff
    3ba0:	f005 fe0c 	bl	97bc <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3ba4:	210c      	movs	r1, #12
    3ba6:	4863      	ldr	r0, [pc, #396]	; (3d34 <dashupdate()+0x330>)
    3ba8:	f005 fe84 	bl	98b4 <serial2_write>
  Serial2.write(0xff);  // We always have to send this three lines after each command sent to the nextion display.
  Serial2.write(0xff);
  Serial2.write(0xff);
  Serial2.print("lowcell.val=");
  Serial2.print(bms.getLowCellVolt() * 1000, 0);
    3bac:	485c      	ldr	r0, [pc, #368]	; (3d20 <dashupdate()+0x31c>)
    3bae:	f7fd f80d 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    3bb2:	4961      	ldr	r1, [pc, #388]	; (3d38 <dashupdate()+0x334>)
    3bb4:	f008 f88a 	bl	bccc <__aeabi_fmul>
    3bb8:	f007 fe64 	bl	b884 <__aeabi_f2d>
    3bbc:	9400      	str	r4, [sp, #0]
    3bbe:	4602      	mov	r2, r0
    3bc0:	460b      	mov	r3, r1
    3bc2:	4851      	ldr	r0, [pc, #324]	; (3d08 <dashupdate()+0x304>)
    3bc4:	f004 fd1c 	bl	8600 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3bc8:	20ff      	movs	r0, #255	; 0xff
    3bca:	f005 fdf7 	bl	97bc <serial2_putchar>
    3bce:	20ff      	movs	r0, #255	; 0xff
    3bd0:	f005 fdf4 	bl	97bc <serial2_putchar>
    3bd4:	20ff      	movs	r0, #255	; 0xff
    3bd6:	f005 fdf1 	bl	97bc <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3bda:	210d      	movs	r1, #13
    3bdc:	4857      	ldr	r0, [pc, #348]	; (3d3c <dashupdate()+0x338>)
    3bde:	f005 fe69 	bl	98b4 <serial2_write>
  Serial2.write(0xff);  // We always have to send this three lines after each command sent to the nextion display.
  Serial2.write(0xff);
  Serial2.write(0xff);
  Serial2.print("highcell.val=");
  Serial2.print(bms.getHighCellVolt() * 1000, 0);
    3be2:	484f      	ldr	r0, [pc, #316]	; (3d20 <dashupdate()+0x31c>)
    3be4:	f7fd f81a 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    3be8:	4953      	ldr	r1, [pc, #332]	; (3d38 <dashupdate()+0x334>)
    3bea:	f008 f86f 	bl	bccc <__aeabi_fmul>
    3bee:	f007 fe49 	bl	b884 <__aeabi_f2d>
    3bf2:	9400      	str	r4, [sp, #0]
    3bf4:	4602      	mov	r2, r0
    3bf6:	460b      	mov	r3, r1
    3bf8:	4843      	ldr	r0, [pc, #268]	; (3d08 <dashupdate()+0x304>)
    3bfa:	f004 fd01 	bl	8600 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3bfe:	20ff      	movs	r0, #255	; 0xff
    3c00:	f005 fddc 	bl	97bc <serial2_putchar>
    3c04:	20ff      	movs	r0, #255	; 0xff
    3c06:	f005 fdd9 	bl	97bc <serial2_putchar>
    3c0a:	20ff      	movs	r0, #255	; 0xff
    3c0c:	f005 fdd6 	bl	97bc <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3c10:	210e      	movs	r1, #14
    3c12:	484b      	ldr	r0, [pc, #300]	; (3d40 <dashupdate()+0x33c>)
    3c14:	f005 fe4e 	bl	98b4 <serial2_write>
  Serial2.write(0xff);  // We always have to send this three lines after each command sent to the nextion display.
  Serial2.write(0xff);
  Serial2.write(0xff);
  Serial2.print("celldelta.val=");
  Serial2.print(bms.getHighCellVolt() * 1000 - bms.getLowCellVolt() * 1000, 0);
    3c18:	4841      	ldr	r0, [pc, #260]	; (3d20 <dashupdate()+0x31c>)
    3c1a:	f7fc ffff 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    3c1e:	4605      	mov	r5, r0
    3c20:	483f      	ldr	r0, [pc, #252]	; (3d20 <dashupdate()+0x31c>)
    3c22:	f7fc ffd3 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    3c26:	4944      	ldr	r1, [pc, #272]	; (3d38 <dashupdate()+0x334>)
    3c28:	4606      	mov	r6, r0
    3c2a:	4628      	mov	r0, r5
    3c2c:	f008 f84e 	bl	bccc <__aeabi_fmul>
    3c30:	4941      	ldr	r1, [pc, #260]	; (3d38 <dashupdate()+0x334>)
    3c32:	4605      	mov	r5, r0
    3c34:	4630      	mov	r0, r6
    3c36:	f008 f849 	bl	bccc <__aeabi_fmul>
    3c3a:	4601      	mov	r1, r0
    3c3c:	4628      	mov	r0, r5
    3c3e:	f007 ff3b 	bl	bab8 <__aeabi_fsub>
    3c42:	f007 fe1f 	bl	b884 <__aeabi_f2d>
    3c46:	9400      	str	r4, [sp, #0]
    3c48:	4602      	mov	r2, r0
    3c4a:	460b      	mov	r3, r1
    3c4c:	482e      	ldr	r0, [pc, #184]	; (3d08 <dashupdate()+0x304>)
    3c4e:	f004 fcd7 	bl	8600 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3c52:	20ff      	movs	r0, #255	; 0xff
    3c54:	f005 fdb2 	bl	97bc <serial2_putchar>
    3c58:	20ff      	movs	r0, #255	; 0xff
    3c5a:	f005 fdaf 	bl	97bc <serial2_putchar>
    3c5e:	20ff      	movs	r0, #255	; 0xff
    3c60:	f005 fdac 	bl	97bc <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3c64:	4837      	ldr	r0, [pc, #220]	; (3d44 <dashupdate()+0x340>)
    3c66:	210c      	movs	r1, #12
    3c68:	f005 fe24 	bl	98b4 <serial2_write>
  Serial2.write(0xff);  // We always have to send this three lines after each command sent to the nextion display.
  Serial2.write(0xff);
  Serial2.write(0xff);
  Serial2.print("cellbal.val=");
  Serial2.print(balancecells);
    3c6c:	4b36      	ldr	r3, [pc, #216]	; (3d48 <dashupdate()+0x344>)
	size_t print(int n)				{ return print((long)n); }
    3c6e:	4826      	ldr	r0, [pc, #152]	; (3d08 <dashupdate()+0x304>)
    3c70:	6819      	ldr	r1, [r3, #0]
    3c72:	f004 fc99 	bl	85a8 <Print::print(long)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3c76:	20ff      	movs	r0, #255	; 0xff
    3c78:	f005 fda0 	bl	97bc <serial2_putchar>
    3c7c:	20ff      	movs	r0, #255	; 0xff
    3c7e:	f005 fd9d 	bl	97bc <serial2_putchar>
    3c82:	20ff      	movs	r0, #255	; 0xff
    3c84:	f005 fd9a 	bl	97bc <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3c88:	4830      	ldr	r0, [pc, #192]	; (3d4c <dashupdate()+0x348>)
    3c8a:	2109      	movs	r1, #9
    3c8c:	f005 fe12 	bl	98b4 <serial2_write>
  Serial2.write(0xff);  // We always have to send this three lines after each command sent to the nextion display.
  Serial2.write(0xff);
  Serial2.write(0xff);
  Serial2.print("firm.val=");
  Serial2.print(firmver);
    3c90:	4b2f      	ldr	r3, [pc, #188]	; (3d50 <dashupdate()+0x34c>)
    3c92:	481d      	ldr	r0, [pc, #116]	; (3d08 <dashupdate()+0x304>)
    3c94:	6819      	ldr	r1, [r3, #0]
    3c96:	f004 fc87 	bl	85a8 <Print::print(long)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    3c9a:	20ff      	movs	r0, #255	; 0xff
    3c9c:	f005 fd8e 	bl	97bc <serial2_putchar>
    3ca0:	20ff      	movs	r0, #255	; 0xff
    3ca2:	f005 fd8b 	bl	97bc <serial2_putchar>
    3ca6:	20ff      	movs	r0, #255	; 0xff
  Serial2.write(0xff);  // We always have to send this three lines after each command sent to the nextion display.
  Serial2.write(0xff);
  Serial2.write(0xff);
}
    3ca8:	b002      	add	sp, #8
    3caa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3cae:	f005 bd85 	b.w	97bc <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    3cb2:	4828      	ldr	r0, [pc, #160]	; (3d54 <dashupdate()+0x350>)
    3cb4:	210b      	movs	r1, #11
    3cb6:	f005 fdfd 	bl	98b4 <serial2_write>
    3cba:	e6c6      	b.n	3a4a <dashupdate()+0x46>
    3cbc:	4826      	ldr	r0, [pc, #152]	; (3d58 <dashupdate()+0x354>)
    3cbe:	2106      	movs	r1, #6
    3cc0:	f005 fdf8 	bl	98b4 <serial2_write>
    3cc4:	e6c1      	b.n	3a4a <dashupdate()+0x46>
    3cc6:	4825      	ldr	r0, [pc, #148]	; (3d5c <dashupdate()+0x358>)
    3cc8:	2107      	movs	r1, #7
    3cca:	f005 fdf3 	bl	98b4 <serial2_write>
    3cce:	e6bc      	b.n	3a4a <dashupdate()+0x46>
    3cd0:	4823      	ldr	r0, [pc, #140]	; (3d60 <dashupdate()+0x35c>)
    3cd2:	2107      	movs	r1, #7
    3cd4:	f005 fdee 	bl	98b4 <serial2_write>
    3cd8:	e6b7      	b.n	3a4a <dashupdate()+0x46>
    3cda:	4822      	ldr	r0, [pc, #136]	; (3d64 <dashupdate()+0x360>)
    3cdc:	2108      	movs	r1, #8
    3cde:	f005 fde9 	bl	98b4 <serial2_write>
    3ce2:	e6b2      	b.n	3a4a <dashupdate()+0x46>
    3ce4:	4820      	ldr	r0, [pc, #128]	; (3d68 <dashupdate()+0x364>)
    3ce6:	2108      	movs	r1, #8
    3ce8:	f005 fde4 	bl	98b4 <serial2_write>
    3cec:	e6ad      	b.n	3a4a <dashupdate()+0x46>
    3cee:	bf00      	nop
    3cf0:	00013140 	.word	0x00013140
    3cf4:	1fffb204 	.word	0x1fffb204
    3cf8:	1fffb008 	.word	0x1fffb008
    3cfc:	00012ecc 	.word	0x00012ecc
    3d00:	1fff8724 	.word	0x1fff8724
    3d04:	00013158 	.word	0x00013158
    3d08:	1fff87ac 	.word	0x1fff87ac
    3d0c:	00013164 	.word	0x00013164
    3d10:	00013170 	.word	0x00013170
    3d14:	1fffb0f8 	.word	0x1fffb0f8
    3d18:	42c80000 	.word	0x42c80000
    3d1c:	00013180 	.word	0x00013180
    3d20:	1fff8fe0 	.word	0x1fff8fe0
    3d24:	0001318c 	.word	0x0001318c
    3d28:	0001319c 	.word	0x0001319c
    3d2c:	000131ac 	.word	0x000131ac
    3d30:	41200000 	.word	0x41200000
    3d34:	000131b8 	.word	0x000131b8
    3d38:	447a0000 	.word	0x447a0000
    3d3c:	000131c8 	.word	0x000131c8
    3d40:	000131d8 	.word	0x000131d8
    3d44:	000131e8 	.word	0x000131e8
    3d48:	1fff8fdc 	.word	0x1fff8fdc
    3d4c:	000131f8 	.word	0x000131f8
    3d50:	1fff8750 	.word	0x1fff8750
    3d54:	00012eac 	.word	0x00012eac
    3d58:	00012e9c 	.word	0x00012e9c
    3d5c:	00012ea4 	.word	0x00012ea4
    3d60:	00012eb8 	.word	0x00012eb8
    3d64:	00012ec0 	.word	0x00012ec0
    3d68:	0001314c 	.word	0x0001314c

00003d6c <chargercomms()>:

void chargercomms() {
    3d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (settings.chargertype == Elcon) {
    3d6e:	4d8b      	ldr	r5, [pc, #556]	; (3f9c <chargercomms()+0x230>)
    3d70:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
    3d74:	2b04      	cmp	r3, #4
    3d76:	d007      	beq.n	3d88 <chargercomms()+0x1c>

    Can0.write(msg);
    msg.ext = 0;
  }

  if (settings.chargertype == Eltek) {
    3d78:	2b03      	cmp	r3, #3
    3d7a:	d033      	beq.n	3de4 <chargercomms()+0x78>
    msg.buf[5] = lowByte(chargecurrent / ncharger);
    msg.buf[6] = highByte(chargecurrent / ncharger);

    Can0.write(msg);
  }
  if (settings.chargertype == BrusaNLG5) {
    3d7c:	2b01      	cmp	r3, #1
    3d7e:	d05b      	beq.n	3e38 <chargercomms()+0xcc>
    msg.buf[4] = lowByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    msg.buf[5] = highByte(chargecurrent / ncharger);
    msg.buf[6] = lowByte(chargecurrent / ncharger);
    Can0.write(msg);
  }
  if (settings.chargertype == ChevyVolt) {
    3d80:	2b02      	cmp	r3, #2
    3d82:	f000 80cd 	beq.w	3f20 <chargercomms()+0x1b4>
      msg.buf[2] = highByte(400);
      msg.buf[3] = lowByte(400);
    }
    Can0.write(msg);
  }
}
    3d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    msg.id = 0x1806E5F4;  //broadcast to all Elteks
    3d88:	4c85      	ldr	r4, [pc, #532]	; (3fa0 <chargercomms()+0x234>)
    3d8a:	4a86      	ldr	r2, [pc, #536]	; (3fa4 <chargercomms()+0x238>)
    msg.ext = 1;
    3d8c:	88e3      	ldrh	r3, [r4, #6]
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    3d8e:	6d28      	ldr	r0, [r5, #80]	; 0x50
    msg.id = 0x1806E5F4;  //broadcast to all Elteks
    3d90:	6022      	str	r2, [r4, #0]
    msg.ext = 1;
    3d92:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    3d96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    3d9a:	f043 0301 	orr.w	r3, r3, #1
    3d9e:	80e3      	strh	r3, [r4, #6]
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    3da0:	f007 ff40 	bl	bc24 <__aeabi_i2f>
    3da4:	6969      	ldr	r1, [r5, #20]
    3da6:	f007 ff91 	bl	bccc <__aeabi_fmul>
    3daa:	497f      	ldr	r1, [pc, #508]	; (3fa8 <chargercomms()+0x23c>)
    3dac:	f007 ff8e 	bl	bccc <__aeabi_fmul>
    3db0:	f008 f978 	bl	c0a4 <__aeabi_f2uiz>
    msg.buf[2] = highByte(chargecurrent / ncharger);
    3db4:	4b7d      	ldr	r3, [pc, #500]	; (3fac <chargercomms()+0x240>)
    3db6:	4a7e      	ldr	r2, [pc, #504]	; (3fb0 <chargercomms()+0x244>)
    3db8:	681b      	ldr	r3, [r3, #0]
    3dba:	6812      	ldr	r2, [r2, #0]
    3dbc:	fb93 f3f2 	sdiv	r3, r3, r2
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    3dc0:	ba40      	rev16	r0, r0
    msg.buf[2] = highByte(chargecurrent / ncharger);
    3dc2:	ba5b      	rev16	r3, r3
    msg.buf[4] = 0x00;
    3dc4:	2600      	movs	r6, #0
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    3dc6:	8120      	strh	r0, [r4, #8]
    Can0.write(msg);
    3dc8:	4621      	mov	r1, r4
    3dca:	487a      	ldr	r0, [pc, #488]	; (3fb4 <chargercomms()+0x248>)
    msg.buf[2] = highByte(chargecurrent / ncharger);
    3dcc:	8163      	strh	r3, [r4, #10]
    msg.buf[4] = 0x00;
    3dce:	60e6      	str	r6, [r4, #12]
    Can0.write(msg);
    3dd0:	f003 fa14 	bl	71fc <FlexCAN::write(CAN_message_t const&)>
    msg.ext = 0;
    3dd4:	79a2      	ldrb	r2, [r4, #6]
  if (settings.chargertype == Eltek) {
    3dd6:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
    msg.ext = 0;
    3dda:	f366 0200 	bfi	r2, r6, #0, #1
  if (settings.chargertype == Eltek) {
    3dde:	2b03      	cmp	r3, #3
    msg.ext = 0;
    3de0:	71a2      	strb	r2, [r4, #6]
  if (settings.chargertype == Eltek) {
    3de2:	d1cb      	bne.n	3d7c <chargercomms()+0x10>
    msg.id = 0x2FF;  //broadcast to all Elteks
    3de4:	4c6e      	ldr	r4, [pc, #440]	; (3fa0 <chargercomms()+0x234>)
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    3de6:	6d28      	ldr	r0, [r5, #80]	; 0x50
    msg.buf[2] = highByte(1000);
    3de8:	72a3      	strb	r3, [r4, #10]
    msg.id = 0x2FF;  //broadcast to all Elteks
    3dea:	f240 22ff 	movw	r2, #767	; 0x2ff
    msg.buf[0] = 0x01;
    3dee:	f64e 0301 	movw	r3, #59393	; 0xe801
    msg.id = 0x2FF;  //broadcast to all Elteks
    3df2:	6022      	str	r2, [r4, #0]
    msg.len = 7;
    3df4:	2207      	movs	r2, #7
    3df6:	71e2      	strb	r2, [r4, #7]
    msg.buf[0] = 0x01;
    3df8:	8123      	strh	r3, [r4, #8]
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    3dfa:	f007 ff13 	bl	bc24 <__aeabi_i2f>
    3dfe:	6969      	ldr	r1, [r5, #20]
    3e00:	f007 ff64 	bl	bccc <__aeabi_fmul>
    3e04:	4968      	ldr	r1, [pc, #416]	; (3fa8 <chargercomms()+0x23c>)
    3e06:	f007 ff61 	bl	bccc <__aeabi_fmul>
    3e0a:	f008 f94b 	bl	c0a4 <__aeabi_f2uiz>
    msg.buf[5] = lowByte(chargecurrent / ncharger);
    3e0e:	4a68      	ldr	r2, [pc, #416]	; (3fb0 <chargercomms()+0x244>)
    3e10:	4b66      	ldr	r3, [pc, #408]	; (3fac <chargercomms()+0x240>)
    3e12:	6811      	ldr	r1, [r2, #0]
    3e14:	681b      	ldr	r3, [r3, #0]
    3e16:	fb93 f3f1 	sdiv	r3, r3, r1
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    3e1a:	b280      	uxth	r0, r0
    msg.buf[4] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    3e1c:	0a02      	lsrs	r2, r0, #8
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    3e1e:	72e0      	strb	r0, [r4, #11]
    msg.buf[5] = lowByte(chargecurrent / ncharger);
    3e20:	7363      	strb	r3, [r4, #13]
    Can0.write(msg);
    3e22:	4864      	ldr	r0, [pc, #400]	; (3fb4 <chargercomms()+0x248>)
    msg.buf[4] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    3e24:	7322      	strb	r2, [r4, #12]
    msg.buf[6] = highByte(chargecurrent / ncharger);
    3e26:	121b      	asrs	r3, r3, #8
    Can0.write(msg);
    3e28:	4621      	mov	r1, r4
    msg.buf[6] = highByte(chargecurrent / ncharger);
    3e2a:	73a3      	strb	r3, [r4, #14]
    Can0.write(msg);
    3e2c:	f003 f9e6 	bl	71fc <FlexCAN::write(CAN_message_t const&)>
  if (settings.chargertype == BrusaNLG5) {
    3e30:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
    3e34:	2b01      	cmp	r3, #1
    3e36:	d1a3      	bne.n	3d80 <chargercomms()+0x14>
    msg.id = chargerid1;
    3e38:	4b5f      	ldr	r3, [pc, #380]	; (3fb8 <chargercomms()+0x24c>)
    3e3a:	4c59      	ldr	r4, [pc, #356]	; (3fa0 <chargercomms()+0x234>)
    3e3c:	6819      	ldr	r1, [r3, #0]
    3e3e:	6021      	str	r1, [r4, #0]
    msg.len = 7;
    3e40:	2207      	movs	r2, #7
    msg.buf[0] = 0x80;
    3e42:	2380      	movs	r3, #128	; 0x80
    if (digitalRead(IN2) == LOW)  //Gen OFF
    3e44:	2010      	movs	r0, #16
    msg.len = 7;
    3e46:	71e2      	strb	r2, [r4, #7]
    msg.buf[0] = 0x80;
    3e48:	7223      	strb	r3, [r4, #8]
    if (digitalRead(IN2) == LOW)  //Gen OFF
    3e4a:	f005 fa13 	bl	9274 <digitalRead>
    3e4e:	2800      	cmp	r0, #0
    3e50:	f000 8096 	beq.w	3f80 <chargercomms()+0x214>
      msg.buf[1] = highByte(maxac2 * 10);
    3e54:	4b59      	ldr	r3, [pc, #356]	; (3fbc <chargercomms()+0x250>)
    3e56:	681b      	ldr	r3, [r3, #0]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    3e58:	4e54      	ldr	r6, [pc, #336]	; (3fac <chargercomms()+0x240>)
    3e5a:	4f55      	ldr	r7, [pc, #340]	; (3fb0 <chargercomms()+0x244>)
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    3e5c:	6d28      	ldr	r0, [r5, #80]	; 0x50
      msg.buf[1] = highByte(maxac2 * 10);
    3e5e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3e62:	005a      	lsls	r2, r3, #1
      msg.buf[2] = lowByte(maxac2 * 10);
    3e64:	b2d2      	uxtb	r2, r2
      msg.buf[1] = highByte(maxac2 * 10);
    3e66:	f3c3 13c7 	ubfx	r3, r3, #7, #8
      msg.buf[1] = highByte(maxac1 * 10);
    3e6a:	7263      	strb	r3, [r4, #9]
      msg.buf[2] = lowByte(maxac1 * 10);
    3e6c:	72a2      	strb	r2, [r4, #10]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    3e6e:	6833      	ldr	r3, [r6, #0]
    3e70:	683a      	ldr	r2, [r7, #0]
    3e72:	fb93 f3f2 	sdiv	r3, r3, r2
    msg.buf[6] = lowByte(chargecurrent / ncharger);
    3e76:	73a3      	strb	r3, [r4, #14]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    3e78:	121b      	asrs	r3, r3, #8
    3e7a:	7363      	strb	r3, [r4, #13]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    3e7c:	f007 fed2 	bl	bc24 <__aeabi_i2f>
    3e80:	6969      	ldr	r1, [r5, #20]
    3e82:	f007 ff23 	bl	bccc <__aeabi_fmul>
    3e86:	4b4e      	ldr	r3, [pc, #312]	; (3fc0 <chargercomms()+0x254>)
    3e88:	6819      	ldr	r1, [r3, #0]
    3e8a:	f007 fe15 	bl	bab8 <__aeabi_fsub>
    3e8e:	4946      	ldr	r1, [pc, #280]	; (3fa8 <chargercomms()+0x23c>)
    3e90:	f007 ff1c 	bl	bccc <__aeabi_fmul>
    3e94:	f008 f906 	bl	c0a4 <__aeabi_f2uiz>
    msg.buf[4] = lowByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    3e98:	7320      	strb	r0, [r4, #12]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    3e9a:	f3c0 2007 	ubfx	r0, r0, #8, #8
    Can0.write(msg);
    3e9e:	4940      	ldr	r1, [pc, #256]	; (3fa0 <chargercomms()+0x234>)
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    3ea0:	72e0      	strb	r0, [r4, #11]
    Can0.write(msg);
    3ea2:	4844      	ldr	r0, [pc, #272]	; (3fb4 <chargercomms()+0x248>)
    3ea4:	f003 f9aa 	bl	71fc <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3ea8:	2002      	movs	r0, #2
    3eaa:	f005 fa4d 	bl	9348 <delay>
    msg.id = chargerid2;
    3eae:	4b45      	ldr	r3, [pc, #276]	; (3fc4 <chargercomms()+0x258>)
    3eb0:	681b      	ldr	r3, [r3, #0]
    3eb2:	6023      	str	r3, [r4, #0]
    msg.len = 7;
    3eb4:	2307      	movs	r3, #7
    3eb6:	71e3      	strb	r3, [r4, #7]
    if (digitalRead(IN2) == LOW)  //Gen OFF
    3eb8:	2010      	movs	r0, #16
    msg.buf[0] = 0x80;
    3eba:	2380      	movs	r3, #128	; 0x80
    3ebc:	7223      	strb	r3, [r4, #8]
    if (digitalRead(IN2) == LOW)  //Gen OFF
    3ebe:	f005 f9d9 	bl	9274 <digitalRead>
    3ec2:	2800      	cmp	r0, #0
    3ec4:	d168      	bne.n	3f98 <chargercomms()+0x22c>
      msg.buf[1] = highByte(maxac1 * 10);
    3ec6:	4b40      	ldr	r3, [pc, #256]	; (3fc8 <chargercomms()+0x25c>)
      msg.buf[1] = highByte(maxac2 * 10);
    3ec8:	681b      	ldr	r3, [r3, #0]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    3eca:	6d28      	ldr	r0, [r5, #80]	; 0x50
      msg.buf[1] = highByte(maxac2 * 10);
    3ecc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    3ed0:	005a      	lsls	r2, r3, #1
      msg.buf[2] = lowByte(maxac2 * 10);
    3ed2:	b2d2      	uxtb	r2, r2
      msg.buf[1] = highByte(maxac2 * 10);
    3ed4:	f3c3 13c7 	ubfx	r3, r3, #7, #8
      msg.buf[2] = lowByte(maxac1 * 10);
    3ed8:	72a2      	strb	r2, [r4, #10]
      msg.buf[1] = highByte(maxac1 * 10);
    3eda:	7263      	strb	r3, [r4, #9]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    3edc:	f007 fea2 	bl	bc24 <__aeabi_i2f>
    3ee0:	6969      	ldr	r1, [r5, #20]
    3ee2:	f007 fef3 	bl	bccc <__aeabi_fmul>
    3ee6:	4b39      	ldr	r3, [pc, #228]	; (3fcc <chargercomms()+0x260>)
    3ee8:	6819      	ldr	r1, [r3, #0]
    3eea:	f007 fde5 	bl	bab8 <__aeabi_fsub>
    3eee:	492e      	ldr	r1, [pc, #184]	; (3fa8 <chargercomms()+0x23c>)
    3ef0:	f007 feec 	bl	bccc <__aeabi_fmul>
    3ef4:	f008 f8d6 	bl	c0a4 <__aeabi_f2uiz>
    msg.buf[4] = lowByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    3ef8:	7320      	strb	r0, [r4, #12]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    3efa:	f3c0 2007 	ubfx	r0, r0, #8, #8
    msg.buf[5] = highByte(chargecurrent / ncharger);
    3efe:	683a      	ldr	r2, [r7, #0]
    3f00:	6833      	ldr	r3, [r6, #0]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    3f02:	72e0      	strb	r0, [r4, #11]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    3f04:	fb93 f3f2 	sdiv	r3, r3, r2
    Can0.write(msg);
    3f08:	4925      	ldr	r1, [pc, #148]	; (3fa0 <chargercomms()+0x234>)
    3f0a:	482a      	ldr	r0, [pc, #168]	; (3fb4 <chargercomms()+0x248>)
    msg.buf[6] = lowByte(chargecurrent / ncharger);
    3f0c:	73a3      	strb	r3, [r4, #14]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    3f0e:	121a      	asrs	r2, r3, #8
    3f10:	7362      	strb	r2, [r4, #13]
    Can0.write(msg);
    3f12:	f003 f973 	bl	71fc <FlexCAN::write(CAN_message_t const&)>
  if (settings.chargertype == ChevyVolt) {
    3f16:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
    3f1a:	2b02      	cmp	r3, #2
    3f1c:	f47f af33 	bne.w	3d86 <chargercomms()+0x1a>
    msg.id = 0x30E;
    3f20:	4c1f      	ldr	r4, [pc, #124]	; (3fa0 <chargercomms()+0x234>)
    Can0.write(msg);
    3f22:	4824      	ldr	r0, [pc, #144]	; (3fb4 <chargercomms()+0x248>)
    msg.buf[0] = 0x02;  //only HV charging , 0x03 hv and 12V charging
    3f24:	7223      	strb	r3, [r4, #8]
    msg.id = 0x30E;
    3f26:	f240 320e 	movw	r2, #782	; 0x30e
    3f2a:	6022      	str	r2, [r4, #0]
    Can0.write(msg);
    3f2c:	4621      	mov	r1, r4
    msg.len = 1;
    3f2e:	2201      	movs	r2, #1
    3f30:	71e2      	strb	r2, [r4, #7]
    Can0.write(msg);
    3f32:	f003 f963 	bl	71fc <FlexCAN::write(CAN_message_t const&)>
    if ((chargecurrent * 2) > 255) {
    3f36:	4b1d      	ldr	r3, [pc, #116]	; (3fac <chargercomms()+0x240>)
    if ((settings.ChargeVsetpoint * settings.Scells) > 200) {
    3f38:	6d28      	ldr	r0, [r5, #80]	; 0x50
    if ((chargecurrent * 2) > 255) {
    3f3a:	681b      	ldr	r3, [r3, #0]
    3f3c:	005b      	lsls	r3, r3, #1
    3f3e:	2bff      	cmp	r3, #255	; 0xff
    msg.len = 4;
    3f40:	f04f 0204 	mov.w	r2, #4
      msg.buf[1] = (chargecurrent * 2);
    3f44:	bfd4      	ite	le
    3f46:	b2db      	uxtble	r3, r3
      msg.buf[1] = 255;
    3f48:	23ff      	movgt	r3, #255	; 0xff
    msg.id = 0x304;
    3f4a:	f44f 7141 	mov.w	r1, #772	; 0x304
    msg.len = 4;
    3f4e:	71e2      	strb	r2, [r4, #7]
    msg.buf[0] = 0x40;  //fixed
    3f50:	2240      	movs	r2, #64	; 0x40
    msg.id = 0x304;
    3f52:	6021      	str	r1, [r4, #0]
    msg.buf[0] = 0x40;  //fixed
    3f54:	7222      	strb	r2, [r4, #8]
      msg.buf[1] = (chargecurrent * 2);
    3f56:	7263      	strb	r3, [r4, #9]
    if ((settings.ChargeVsetpoint * settings.Scells) > 200) {
    3f58:	f007 fe64 	bl	bc24 <__aeabi_i2f>
    3f5c:	6969      	ldr	r1, [r5, #20]
    3f5e:	f007 feb5 	bl	bccc <__aeabi_fmul>
    3f62:	491b      	ldr	r1, [pc, #108]	; (3fd0 <chargercomms()+0x264>)
    3f64:	4605      	mov	r5, r0
    3f66:	f008 f86d 	bl	c044 <__aeabi_fcmpgt>
    3f6a:	b958      	cbnz	r0, 3f84 <chargercomms()+0x218>
    3f6c:	2201      	movs	r2, #1
    3f6e:	2390      	movs	r3, #144	; 0x90
      msg.buf[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    3f70:	72a2      	strb	r2, [r4, #10]
      msg.buf[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    3f72:	72e3      	strb	r3, [r4, #11]
    Can0.write(msg);
    3f74:	490a      	ldr	r1, [pc, #40]	; (3fa0 <chargercomms()+0x234>)
    3f76:	480f      	ldr	r0, [pc, #60]	; (3fb4 <chargercomms()+0x248>)
}
    3f78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Can0.write(msg);
    3f7c:	f003 b93e 	b.w	71fc <FlexCAN::write(CAN_message_t const&)>
      msg.buf[1] = highByte(maxac1 * 10);
    3f80:	4b11      	ldr	r3, [pc, #68]	; (3fc8 <chargercomms()+0x25c>)
    3f82:	e768      	b.n	3e56 <chargercomms()+0xea>
      msg.buf[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    3f84:	4629      	mov	r1, r5
    3f86:	4628      	mov	r0, r5
    3f88:	f007 fd98 	bl	babc <__addsf3>
    3f8c:	f008 f88a 	bl	c0a4 <__aeabi_f2uiz>
    3f90:	f3c0 2207 	ubfx	r2, r0, #8, #8
      msg.buf[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    3f94:	b2c3      	uxtb	r3, r0
    3f96:	e7eb      	b.n	3f70 <chargercomms()+0x204>
      msg.buf[1] = highByte(maxac2 * 10);
    3f98:	4b08      	ldr	r3, [pc, #32]	; (3fbc <chargercomms()+0x250>)
    3f9a:	e795      	b.n	3ec8 <chargercomms()+0x15c>
    3f9c:	1fffb204 	.word	0x1fffb204
    3fa0:	1fffb16c 	.word	0x1fffb16c
    3fa4:	1806e5f4 	.word	0x1806e5f4
    3fa8:	41200000 	.word	0x41200000
    3fac:	1fffb078 	.word	0x1fffb078
    3fb0:	1fff875c 	.word	0x1fff875c
    3fb4:	1fffb2e4 	.word	0x1fffb2e4
    3fb8:	1fff873c 	.word	0x1fff873c
    3fbc:	1fff8758 	.word	0x1fff8758
    3fc0:	1fffb080 	.word	0x1fffb080
    3fc4:	1fff8740 	.word	0x1fff8740
    3fc8:	1fff8754 	.word	0x1fff8754
    3fcc:	1fffb07c 	.word	0x1fffb07c
    3fd0:	43480000 	.word	0x43480000

00003fd4 <SerialCanRecieve()>:

void SerialCanRecieve() {
    3fd4:	b570      	push	{r4, r5, r6, lr}
  if (can.recv(&id, dta)) {
    3fd6:	4c17      	ldr	r4, [pc, #92]	; (4034 <SerialCanRecieve()+0x60>)
    3fd8:	4a17      	ldr	r2, [pc, #92]	; (4038 <SerialCanRecieve()+0x64>)
    3fda:	4818      	ldr	r0, [pc, #96]	; (403c <SerialCanRecieve()+0x68>)
    3fdc:	4621      	mov	r1, r4
    3fde:	f003 ffb5 	bl	7f4c <Serial_CAN::recv(unsigned long*, unsigned char*)>
    3fe2:	b118      	cbz	r0, 3fec <SerialCanRecieve()+0x18>
    if (CanDebugSerial == 1) {
    3fe4:	4b16      	ldr	r3, [pc, #88]	; (4040 <SerialCanRecieve()+0x6c>)
    3fe6:	681b      	ldr	r3, [r3, #0]
    3fe8:	2b01      	cmp	r3, #1
    3fea:	d000      	beq.n	3fee <SerialCanRecieve()+0x1a>
        Serial.print('\t');
      }
      Serial.println();
    }
  }
}
    3fec:	bd70      	pop	{r4, r5, r6, pc}
    3fee:	2112      	movs	r1, #18
    3ff0:	4814      	ldr	r0, [pc, #80]	; (4044 <SerialCanRecieve()+0x70>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    3ff2:	4e15      	ldr	r6, [pc, #84]	; (4048 <SerialCanRecieve()+0x74>)
    3ff4:	f006 ff8a 	bl	af0c <usb_serial_write>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    3ff8:	6821      	ldr	r1, [r4, #0]
    3ffa:	4813      	ldr	r0, [pc, #76]	; (4048 <SerialCanRecieve()+0x74>)
    3ffc:	4c13      	ldr	r4, [pc, #76]	; (404c <SerialCanRecieve()+0x78>)
    3ffe:	2300      	movs	r3, #0
    4000:	2210      	movs	r2, #16
    4002:	f004 faf1 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
	size_t println(int n, int base)			{ return print(n, base) + println(); }
	size_t println(unsigned int n, int base)	{ return print(n, base) + println(); }
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
    4006:	4810      	ldr	r0, [pc, #64]	; (4048 <SerialCanRecieve()+0x74>)
    4008:	f004 fad6 	bl	85b8 <Print::println()>
      for (int i = 0; i < 8; i++) {
    400c:	f104 0508 	add.w	r5, r4, #8
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    4010:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    4014:	2300      	movs	r3, #0
    4016:	220a      	movs	r2, #10
    4018:	4630      	mov	r0, r6
    401a:	f004 fae5 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    401e:	2009      	movs	r0, #9
    4020:	f006 fff8 	bl	b014 <usb_serial_putchar>
    4024:	42ac      	cmp	r4, r5
    4026:	d1f3      	bne.n	4010 <SerialCanRecieve()+0x3c>
}
    4028:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      Serial.println();
    402c:	4806      	ldr	r0, [pc, #24]	; (4048 <SerialCanRecieve()+0x74>)
    402e:	f004 bac3 	b.w	85b8 <Print::println()>
    4032:	bf00      	nop
    4034:	1fffb118 	.word	0x1fffb118
    4038:	1fffb104 	.word	0x1fffb104
    403c:	1fffb00c 	.word	0x1fffb00c
    4040:	1fff8fa4 	.word	0x1fff8fa4
    4044:	00013204 	.word	0x00013204
    4048:	1fff880c 	.word	0x1fff880c
    404c:	1fffb103 	.word	0x1fffb103

00004050 <SetSerialCan(int)>:

void SetSerialCan(int Speed) {
  switch (Speed) {
    4050:	28fa      	cmp	r0, #250	; 0xfa
void SetSerialCan(int Speed) {
    4052:	b510      	push	{r4, lr}
    4054:	4604      	mov	r4, r0
  switch (Speed) {
    4056:	d012      	beq.n	407e <SetSerialCan(int)+0x2e>
    4058:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    405c:	d11e      	bne.n	409c <SetSerialCan(int)+0x4c>
    case 500:
      if (can.canRate(CAN_RATE_500)) {
    405e:	4814      	ldr	r0, [pc, #80]	; (40b0 <SetSerialCan(int)+0x60>)
    4060:	2110      	movs	r1, #16
    4062:	f004 f843 	bl	80ec <Serial_CAN::canRate(unsigned char)>
    4066:	b180      	cbz	r0, 408a <SetSerialCan(int)+0x3a>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4068:	210f      	movs	r1, #15
    406a:	4812      	ldr	r0, [pc, #72]	; (40b4 <SetSerialCan(int)+0x64>)
    406c:	f006 ff4e 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4070:	4811      	ldr	r0, [pc, #68]	; (40b8 <SetSerialCan(int)+0x68>)
    4072:	f004 faa1 	bl	85b8 <Print::println()>
      break;

    case 250:
      if (can.canRate(CAN_RATE_250)) {
        Serial.println("set can rate ok");
        settings.SerialCanSpeed = 250;
    4076:	4b11      	ldr	r3, [pc, #68]	; (40bc <SetSerialCan(int)+0x6c>)
    4078:	f8a3 40c4 	strh.w	r4, [r3, #196]	; 0xc4
      Serial.println("Wrong CAN Speed");
      // if nothing else matches, do the default
      // default is optional
      break;
  }
}
    407c:	bd10      	pop	{r4, pc}
      if (can.canRate(CAN_RATE_250)) {
    407e:	480c      	ldr	r0, [pc, #48]	; (40b0 <SetSerialCan(int)+0x60>)
    4080:	210f      	movs	r1, #15
    4082:	f004 f833 	bl	80ec <Serial_CAN::canRate(unsigned char)>
    4086:	2800      	cmp	r0, #0
    4088:	d1ee      	bne.n	4068 <SetSerialCan(int)+0x18>
    408a:	480d      	ldr	r0, [pc, #52]	; (40c0 <SetSerialCan(int)+0x70>)
    408c:	2111      	movs	r1, #17
    408e:	f006 ff3d 	bl	af0c <usb_serial_write>
}
    4092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4096:	4808      	ldr	r0, [pc, #32]	; (40b8 <SetSerialCan(int)+0x68>)
    4098:	f004 ba8e 	b.w	85b8 <Print::println()>
    409c:	4809      	ldr	r0, [pc, #36]	; (40c4 <SetSerialCan(int)+0x74>)
    409e:	210f      	movs	r1, #15
    40a0:	f006 ff34 	bl	af0c <usb_serial_write>
    40a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    40a8:	4803      	ldr	r0, [pc, #12]	; (40b8 <SetSerialCan(int)+0x68>)
    40aa:	f004 ba85 	b.w	85b8 <Print::println()>
    40ae:	bf00      	nop
    40b0:	1fffb00c 	.word	0x1fffb00c
    40b4:	00013218 	.word	0x00013218
    40b8:	1fff880c 	.word	0x1fff880c
    40bc:	1fffb204 	.word	0x1fffb204
    40c0:	00013228 	.word	0x00013228
    40c4:	0001323c 	.word	0x0001323c

000040c8 <_GLOBAL__sub_I_can>:
  mescycl++;
  if (mescycl > 2) {
    mescycl = 0;
  }
  */
}
    40c8:	b510      	push	{r4, lr}
***/

struct EEPROMClass{

#if defined(__arm__) && defined(TEENSYDUINO)
    EEPROMClass()                        { eeprom_initialize(); }
    40ca:	f004 fc5b 	bl	8984 <eeprom_initialize>
BMSModuleManager bms;
    40ce:	480b      	ldr	r0, [pc, #44]	; (40fc <_GLOBAL__sub_I_can+0x34>)
    40d0:	f7fc fb50 	bl	774 <BMSModuleManager::BMSModuleManager()>
SerialConsole console;
    40d4:	480a      	ldr	r0, [pc, #40]	; (4100 <_GLOBAL__sub_I_can+0x38>)
    40d6:	f7fd fdb9 	bl	1c4c <SerialConsole::SerialConsole()>
FilterOnePole lowpassFilter(LOWPASS, filterFrequency);
    40da:	4a0a      	ldr	r2, [pc, #40]	; (4104 <_GLOBAL__sub_I_can+0x3c>)
    40dc:	480a      	ldr	r0, [pc, #40]	; (4108 <_GLOBAL__sub_I_can+0x40>)
    40de:	6812      	ldr	r2, [r2, #0]
    40e0:	2300      	movs	r3, #0
    40e2:	2101      	movs	r1, #1
    40e4:	f003 feb4 	bl	7e50 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)>
ADC *adc = new ADC();  // adc object
    40e8:	2094      	movs	r0, #148	; 0x94
    40ea:	f004 fe6f 	bl	8dcc <operator new(unsigned int)>
    40ee:	4604      	mov	r4, r0
    40f0:	f003 fa7a 	bl	75e8 <ADC::ADC()>
    40f4:	4b05      	ldr	r3, [pc, #20]	; (410c <_GLOBAL__sub_I_can+0x44>)
    40f6:	601c      	str	r4, [r3, #0]
}
    40f8:	bd10      	pop	{r4, pc}
    40fa:	bf00      	nop
    40fc:	1fff8fe0 	.word	0x1fff8fe0
    4100:	1fffb084 	.word	0x1fffb084
    4104:	1fff874c 	.word	0x1fff874c
    4108:	1fffb148 	.word	0x1fffb148
    410c:	1fff8fd0 	.word	0x1fff8fd0

00004110 <setup>:
void setup() {
    4110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  delay(4000);  //just for easy debugging. It takes a few seconds for USB to come up properly on most OS's
    4114:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
void setup() {
    4118:	b085      	sub	sp, #20
  delay(4000);  //just for easy debugging. It takes a few seconds for USB to come up properly on most OS's
    411a:	f005 f915 	bl	9348 <delay>
  pinMode(IN1, INPUT);
    411e:	2100      	movs	r1, #0
    4120:	2011      	movs	r0, #17
    4122:	f005 f8b5 	bl	9290 <pinMode>
  pinMode(IN2, INPUT);
    4126:	2100      	movs	r1, #0
    4128:	2010      	movs	r0, #16
    412a:	f005 f8b1 	bl	9290 <pinMode>
  pinMode(IN3, INPUT);
    412e:	2100      	movs	r1, #0
    4130:	2012      	movs	r0, #18
    4132:	f005 f8ad 	bl	9290 <pinMode>
  pinMode(IN4, INPUT);
    4136:	2100      	movs	r1, #0
    4138:	2013      	movs	r0, #19
    413a:	f005 f8a9 	bl	9290 <pinMode>
  pinMode(OUT1, OUTPUT);  // drive contactor
    413e:	2101      	movs	r1, #1
    4140:	200b      	movs	r0, #11
    4142:	f005 f8a5 	bl	9290 <pinMode>
  pinMode(OUT2, OUTPUT);  // precharge
    4146:	2101      	movs	r1, #1
    4148:	200c      	movs	r0, #12
    414a:	f005 f8a1 	bl	9290 <pinMode>
  pinMode(OUT3, OUTPUT);  // charge relay
    414e:	2101      	movs	r1, #1
    4150:	2014      	movs	r0, #20
    4152:	f005 f89d 	bl	9290 <pinMode>
  pinMode(OUT4, OUTPUT);  // Negative contactor
    4156:	2101      	movs	r1, #1
    4158:	2015      	movs	r0, #21
    415a:	f005 f899 	bl	9290 <pinMode>
  pinMode(OUT5, OUTPUT);  // pwm driver output
    415e:	2101      	movs	r1, #1
    4160:	2016      	movs	r0, #22
    4162:	f005 f895 	bl	9290 <pinMode>
  pinMode(OUT6, OUTPUT);  // pwm driver output
    4166:	2101      	movs	r1, #1
    4168:	2017      	movs	r0, #23
    416a:	f005 f891 	bl	9290 <pinMode>
  pinMode(OUT7, OUTPUT);  // pwm driver output
    416e:	2101      	movs	r1, #1
    4170:	2005      	movs	r0, #5
    4172:	f005 f88d 	bl	9290 <pinMode>
  analogWriteFrequency(OUT5, pwmfreq);
    4176:	4cb0      	ldr	r4, [pc, #704]	; (4438 <L_13442_delayMicroseconds+0xf2>)
    Can0.getFilter(filter, i);
    4178:	4fb0      	ldr	r7, [pc, #704]	; (443c <L_13442_delayMicroseconds+0xf6>)
  pinMode(OUT8, OUTPUT);  // pwm driver output
    417a:	2101      	movs	r1, #1
    417c:	2006      	movs	r0, #6
    417e:	f005 f887 	bl	9290 <pinMode>
  pinMode(led, OUTPUT);
    4182:	2101      	movs	r1, #1
    4184:	200d      	movs	r0, #13
    4186:	f005 f883 	bl	9290 <pinMode>
  analogWriteFrequency(OUT5, pwmfreq);
    418a:	8820      	ldrh	r0, [r4, #0]
    418c:	f007 fd46 	bl	bc1c <__aeabi_ui2f>
    4190:	4601      	mov	r1, r0
    4192:	2016      	movs	r0, #22
    4194:	f004 ffde 	bl	9154 <analogWriteFrequency>
  analogWriteFrequency(OUT6, pwmfreq);
    4198:	8820      	ldrh	r0, [r4, #0]
    419a:	f007 fd3f 	bl	bc1c <__aeabi_ui2f>
    419e:	4601      	mov	r1, r0
    41a0:	2017      	movs	r0, #23
    41a2:	f004 ffd7 	bl	9154 <analogWriteFrequency>
  analogWriteFrequency(OUT7, pwmfreq);
    41a6:	8820      	ldrh	r0, [r4, #0]
    41a8:	f007 fd38 	bl	bc1c <__aeabi_ui2f>
    41ac:	4601      	mov	r1, r0
    41ae:	2005      	movs	r0, #5
    41b0:	f004 ffd0 	bl	9154 <analogWriteFrequency>
  analogWriteFrequency(OUT8, pwmfreq);
    41b4:	8820      	ldrh	r0, [r4, #0]
    41b6:	4ca2      	ldr	r4, [pc, #648]	; (4440 <L_13442_delayMicroseconds+0xfa>)
    41b8:	f007 fd30 	bl	bc1c <__aeabi_ui2f>
  Can0.begin(125000);
    41bc:	2500      	movs	r5, #0
  analogWriteFrequency(OUT8, pwmfreq);
    41be:	4601      	mov	r1, r0
    41c0:	2006      	movs	r0, #6
    41c2:	f004 ffc7 	bl	9154 <analogWriteFrequency>
  Can0.begin(125000);
    41c6:	4a9f      	ldr	r2, [pc, #636]	; (4444 <L_13442_delayMicroseconds+0xfe>)
    41c8:	499f      	ldr	r1, [pc, #636]	; (4448 <L_13442_delayMicroseconds+0x102>)
    41ca:	489c      	ldr	r0, [pc, #624]	; (443c <L_13442_delayMicroseconds+0xf6>)
    41cc:	9500      	str	r5, [sp, #0]
    41ce:	462b      	mov	r3, r5
    41d0:	f002 fe4a 	bl	6e68 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)>
    Can0.getFilter(filter, i);
    41d4:	b2ee      	uxtb	r6, r5
    41d6:	4632      	mov	r2, r6
    41d8:	4621      	mov	r1, r4
    41da:	4638      	mov	r0, r7
    41dc:	f002 fdec 	bl	6db8 <FlexCAN::getFilter(CAN_filter_t&, unsigned char)>
    filter.flags.extended = 0;
    41e0:	7923      	ldrb	r3, [r4, #4]
    Can0.setFilter(filter, i);
    41e2:	4632      	mov	r2, r6
    filter.flags.extended = 0;
    41e4:	f36f 0300 	bfc	r3, #0, #1
    Can0.setFilter(filter, i);
    41e8:	4621      	mov	r1, r4
    41ea:	4638      	mov	r0, r7
  for (int i = 0; i < 8; i++) {
    41ec:	3501      	adds	r5, #1
    filter.flags.extended = 0;
    41ee:	7123      	strb	r3, [r4, #4]
    Can0.setFilter(filter, i);
    41f0:	f002 fda0 	bl	6d34 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>
  for (int i = 0; i < 8; i++) {
    41f4:	2d08      	cmp	r5, #8
    41f6:	d1ed      	bne.n	41d4 <setup+0xc4>
    Can0.getFilter(filter, i);
    41f8:	f8df 8244 	ldr.w	r8, [pc, #580]	; 4440 <L_13442_delayMicroseconds+0xfa>
    41fc:	4f8f      	ldr	r7, [pc, #572]	; (443c <L_13442_delayMicroseconds+0xf6>)
  for (int i = 9; i < 13; i++) {
    41fe:	2509      	movs	r5, #9
    Can0.getFilter(filter, i);
    4200:	b2ee      	uxtb	r6, r5
    4202:	4632      	mov	r2, r6
    4204:	4641      	mov	r1, r8
    4206:	4638      	mov	r0, r7
    4208:	f002 fdd6 	bl	6db8 <FlexCAN::getFilter(CAN_filter_t&, unsigned char)>
    filter.flags.extended = 1;
    420c:	7923      	ldrb	r3, [r4, #4]
    Can0.setFilter(filter, i);
    420e:	4632      	mov	r2, r6
    filter.flags.extended = 1;
    4210:	f043 0301 	orr.w	r3, r3, #1
    Can0.setFilter(filter, i);
    4214:	4641      	mov	r1, r8
    4216:	4638      	mov	r0, r7
  for (int i = 9; i < 13; i++) {
    4218:	3501      	adds	r5, #1
    filter.flags.extended = 1;
    421a:	7123      	strb	r3, [r4, #4]
    Can0.setFilter(filter, i);
    421c:	f002 fd8a 	bl	6d34 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>
  for (int i = 9; i < 13; i++) {
    4220:	2d0d      	cmp	r5, #13
    4222:	d1ed      	bne.n	4200 <setup+0xf0>
  adc->adc0->setAveraging(16);   // set number of averages
    4224:	4c89      	ldr	r4, [pc, #548]	; (444c <L_13442_delayMicroseconds+0x106>)
		uint32_t millis_begin = systick_millis_count;
    4226:	4f8a      	ldr	r7, [pc, #552]	; (4450 <L_13442_delayMicroseconds+0x10a>)
    4228:	6823      	ldr	r3, [r4, #0]
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    422a:	4e8a      	ldr	r6, [pc, #552]	; (4454 <L_13442_delayMicroseconds+0x10e>)
    422c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    4230:	f8df 9224 	ldr.w	r9, [pc, #548]	; 4458 <L_13442_delayMicroseconds+0x112>
    4234:	2110      	movs	r1, #16
    4236:	f003 fcaf 	bl	7b98 <ADC_Module::setAveraging(unsigned char)>
  adc->adc0->setResolution(16);  // set bits of resolution
    423a:	6823      	ldr	r3, [r4, #0]
    423c:	2110      	movs	r1, #16
    423e:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    4242:	f003 fb6f 	bl	7924 <ADC_Module::setResolution(unsigned char)>
  adc->adc0->setConversionSpeed(ADC_CONVERSION_SPEED::MED_SPEED);
    4246:	6823      	ldr	r3, [r4, #0]
    4248:	2102      	movs	r1, #2
    424a:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    424e:	f003 fa51 	bl	76f4 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
  adc->adc0->setSamplingSpeed(ADC_SAMPLING_SPEED::MED_SPEED);
    4252:	6823      	ldr	r3, [r4, #0]
    4254:	2102      	movs	r1, #2
    4256:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    425a:	f003 fc49 	bl	7af0 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>
  adc->adc0->startContinuous(ACUR1);
    425e:	6823      	ldr	r3, [r4, #0]
    4260:	4c7e      	ldr	r4, [pc, #504]	; (445c <L_13442_delayMicroseconds+0x116>)
    4262:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    4266:	210f      	movs	r1, #15
    4268:	f003 fcfa 	bl	7c60 <ADC_Module::startContinuous(unsigned char)>
		uint32_t millis_begin = systick_millis_count;
    426c:	683d      	ldr	r5, [r7, #0]
				if (elapsed > 750) break;
    426e:	f240 28ee 	movw	r8, #750	; 0x2ee
		yield();
    4272:	f006 ff51 	bl	b118 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    4276:	7823      	ldrb	r3, [r4, #0]
    4278:	2b00      	cmp	r3, #0
    427a:	f000 80b6 	beq.w	43ea <L_13442_delayMicroseconds+0xa4>
    427e:	7833      	ldrb	r3, [r6, #0]
    4280:	07d8      	lsls	r0, r3, #31
    4282:	f140 80b2 	bpl.w	43ea <L_13442_delayMicroseconds+0xa4>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    4286:	683b      	ldr	r3, [r7, #0]
    4288:	f8d9 2000 	ldr.w	r2, [r9]
    428c:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    428e:	2b0e      	cmp	r3, #14
    4290:	f240 80ab 	bls.w	43ea <L_13442_delayMicroseconds+0xa4>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4294:	210c      	movs	r1, #12
    4296:	4872      	ldr	r0, [pc, #456]	; (4460 <L_13442_delayMicroseconds+0x11a>)
    4298:	f006 fe38 	bl	af0c <usb_serial_write>
    429c:	4871      	ldr	r0, [pc, #452]	; (4464 <L_13442_delayMicroseconds+0x11e>)
    429e:	f004 f98b 	bl	85b8 <Print::println()>
    42a2:	2116      	movs	r1, #22
    42a4:	4870      	ldr	r0, [pc, #448]	; (4468 <L_13442_delayMicroseconds+0x122>)
    42a6:	f006 fe31 	bl	af0c <usb_serial_write>
    42aa:	486e      	ldr	r0, [pc, #440]	; (4464 <L_13442_delayMicroseconds+0x11e>)
    42ac:	f004 f984 	bl	85b8 <Print::println()>
  Serial2.begin(115200);
    42b0:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    42b4:	486d      	ldr	r0, [pc, #436]	; (446c <L_13442_delayMicroseconds+0x126>)
    42b6:	f003 ffc5 	bl	8244 <HardwareSerial2::begin(unsigned long)>
  Serial.println();
    42ba:	486a      	ldr	r0, [pc, #424]	; (4464 <L_13442_delayMicroseconds+0x11e>)
    42bc:	f004 f97c 	bl	85b8 <Print::println()>
    42c0:	2117      	movs	r1, #23
    42c2:	486b      	ldr	r0, [pc, #428]	; (4470 <L_13442_delayMicroseconds+0x12a>)
    42c4:	f006 fe22 	bl	af0c <usb_serial_write>
    42c8:	4866      	ldr	r0, [pc, #408]	; (4464 <L_13442_delayMicroseconds+0x11e>)
    42ca:	f004 f975 	bl	85b8 <Print::println()>
  if (RCM_SRS1 & RCM_SRS1_SACKERR) Serial.println("Stop Mode Acknowledge Error Reset");
    42ce:	4b69      	ldr	r3, [pc, #420]	; (4474 <L_13442_delayMicroseconds+0x12e>)
    42d0:	785b      	ldrb	r3, [r3, #1]
    42d2:	0699      	lsls	r1, r3, #26
    42d4:	f100 811a 	bmi.w	450c <L_13442_delayMicroseconds+0x1c6>
  if (RCM_SRS1 & RCM_SRS1_MDM_AP) Serial.println("MDM-AP Reset");
    42d8:	4b66      	ldr	r3, [pc, #408]	; (4474 <L_13442_delayMicroseconds+0x12e>)
    42da:	785b      	ldrb	r3, [r3, #1]
    42dc:	071a      	lsls	r2, r3, #28
    42de:	f100 810d 	bmi.w	44fc <L_13442_delayMicroseconds+0x1b6>
  if (RCM_SRS1 & RCM_SRS1_SW) Serial.println("Software Reset");  // reboot with SCB_AIRCR = 0x05FA0004
    42e2:	4b64      	ldr	r3, [pc, #400]	; (4474 <L_13442_delayMicroseconds+0x12e>)
    42e4:	785b      	ldrb	r3, [r3, #1]
    42e6:	075b      	lsls	r3, r3, #29
    42e8:	f100 8100 	bmi.w	44ec <L_13442_delayMicroseconds+0x1a6>
  if (RCM_SRS1 & RCM_SRS1_LOCKUP) Serial.println("Core Lockup Event Reset");
    42ec:	4b61      	ldr	r3, [pc, #388]	; (4474 <L_13442_delayMicroseconds+0x12e>)
    42ee:	785b      	ldrb	r3, [r3, #1]
    42f0:	079e      	lsls	r6, r3, #30
    42f2:	f100 80e7 	bmi.w	44c4 <L_13442_delayMicroseconds+0x17e>
  if (RCM_SRS0 & RCM_SRS0_POR) Serial.println("Power-on Reset");        // removed / applied power
    42f6:	4b5f      	ldr	r3, [pc, #380]	; (4474 <L_13442_delayMicroseconds+0x12e>)
    42f8:	781b      	ldrb	r3, [r3, #0]
    42fa:	061d      	lsls	r5, r3, #24
    42fc:	f100 80ee 	bmi.w	44dc <L_13442_delayMicroseconds+0x196>
  if (RCM_SRS0 & RCM_SRS0_PIN) Serial.println("External Pin Reset");    // Reboot with software download
    4300:	4b5c      	ldr	r3, [pc, #368]	; (4474 <L_13442_delayMicroseconds+0x12e>)
    4302:	781b      	ldrb	r3, [r3, #0]
    4304:	065c      	lsls	r4, r3, #25
    4306:	f100 80d5 	bmi.w	44b4 <L_13442_delayMicroseconds+0x16e>
  if (RCM_SRS0 & RCM_SRS0_WDOG) Serial.println("Watchdog(COP) Reset");  // WDT timed out
    430a:	4b5a      	ldr	r3, [pc, #360]	; (4474 <L_13442_delayMicroseconds+0x12e>)
    430c:	781b      	ldrb	r3, [r3, #0]
    430e:	0698      	lsls	r0, r3, #26
    4310:	f100 80c8 	bmi.w	44a4 <L_13442_delayMicroseconds+0x15e>
  if (RCM_SRS0 & RCM_SRS0_LOC) Serial.println("Loss of External Clock Reset");
    4314:	4b57      	ldr	r3, [pc, #348]	; (4474 <L_13442_delayMicroseconds+0x12e>)
    4316:	781b      	ldrb	r3, [r3, #0]
    4318:	0759      	lsls	r1, r3, #29
    431a:	f100 8084 	bmi.w	4426 <L_13442_delayMicroseconds+0xe0>
  if (RCM_SRS0 & RCM_SRS0_LOL) Serial.println("Loss of Lock in PLL Reset");
    431e:	4b55      	ldr	r3, [pc, #340]	; (4474 <L_13442_delayMicroseconds+0x12e>)
    4320:	781b      	ldrb	r3, [r3, #0]
    4322:	071a      	lsls	r2, r3, #28
    4324:	d477      	bmi.n	4416 <L_13442_delayMicroseconds+0xd0>
  if (RCM_SRS0 & RCM_SRS0_LVD) Serial.println("Low-voltage Detect Reset");
    4326:	4b53      	ldr	r3, [pc, #332]	; (4474 <L_13442_delayMicroseconds+0x12e>)
    4328:	781b      	ldrb	r3, [r3, #0]
    432a:	079b      	lsls	r3, r3, #30
    432c:	d46b      	bmi.n	4406 <L_13442_delayMicroseconds+0xc0>
  Serial.println();
    432e:	484d      	ldr	r0, [pc, #308]	; (4464 <L_13442_delayMicroseconds+0x11e>)
    4330:	f004 f942 	bl	85b8 <Print::println()>
  noInterrupts();                  // don't allow interrupts while setting up WDOG
    4334:	b672      	cpsid	i
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;  // unlock access to WDOG registers
    4336:	4b50      	ldr	r3, [pc, #320]	; (4478 <L_13442_delayMicroseconds+0x132>)
    4338:	f24c 5020 	movw	r0, #50464	; 0xc520
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
    433c:	f64d 1128 	movw	r1, #55592	; 0xd928
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;  // unlock access to WDOG registers
    4340:	81d8      	strh	r0, [r3, #14]
#elif F_CPU == 2000000
	uint32_t n = usec >> 1;
#endif
    // changed because a delay of 1 micro Sec @ 2MHz will be 0
	if (n == 0) return;
	__asm__ volatile(
    4342:	2220      	movs	r2, #32
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
    4344:	81d9      	strh	r1, [r3, #14]

00004346 <L_13442_delayMicroseconds>:
    4346:	3a01      	subs	r2, #1
    4348:	d1fd      	bne.n	4346 <L_13442_delayMicroseconds>
  WDOG_TOVALL = 0x0000;
    434a:	2200      	movs	r2, #0
  WDOG_TOVALH = 0x1000;
    434c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    4350:	8099      	strh	r1, [r3, #4]
  WDOG_TOVALL = 0x0000;
    4352:	80da      	strh	r2, [r3, #6]
  WDOG_PRESC = 0;
    4354:	82da      	strh	r2, [r3, #22]
  WDOG_STCTRLH |= WDOG_STCTRLH_ALLOWUPDATE | WDOG_STCTRLH_WDOGEN | WDOG_STCTRLH_WAITEN | WDOG_STCTRLH_STOPEN | WDOG_STCTRLH_CLKSRC;
    4356:	881a      	ldrh	r2, [r3, #0]
    4358:	b292      	uxth	r2, r2
    435a:	f042 02d3 	orr.w	r2, r2, #211	; 0xd3
    435e:	801a      	strh	r2, [r3, #0]
  interrupts();
    4360:	b662      	cpsie	i
    4362:	2118      	movs	r1, #24
    4364:	4845      	ldr	r0, [pc, #276]	; (447c <L_13442_delayMicroseconds+0x136>)
    4366:	f8df 8118 	ldr.w	r8, [pc, #280]	; 4480 <L_13442_delayMicroseconds+0x13a>
    436a:	f006 fdcf 	bl	af0c <usb_serial_write>
    436e:	483d      	ldr	r0, [pc, #244]	; (4464 <L_13442_delayMicroseconds+0x11e>)
    4370:	f004 f922 	bl	85b8 <Print::println()>
        #if defined(__has_include) && __has_include(<type_traits>)
        static_assert(std::is_trivially_copyable<T>::value,"You can not use this type with EEPROM.get" ); // the code below only makes sense if you can "memcpy" T
        #endif
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    4374:	f108 34ff 	add.w	r4, r8, #4294967295
    4378:	f108 06cf 	add.w	r6, r8, #207	; 0xcf
    437c:	f1c8 0501 	rsb	r5, r8, #1
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    4380:	1928      	adds	r0, r5, r4
    4382:	f004 fb35 	bl	89f0 <eeprom_read_byte>
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    4386:	f804 0f01 	strb.w	r0, [r4, #1]!
    438a:	42b4      	cmp	r4, r6
    438c:	d1f8      	bne.n	4380 <L_13442_delayMicroseconds+0x3a>
  if (settings.version != EEPROM_VERSION) {
    438e:	f898 3000 	ldrb.w	r3, [r8]
    4392:	2b12      	cmp	r3, #18
    4394:	d001      	beq.n	439a <L_13442_delayMicroseconds+0x54>
    loadSettings();
    4396:	f7fd fc99 	bl	1ccc <loadSettings()>
  canSerial.begin(settings.SerialCanBaud);  //Expansion serial bus
    439a:	f8d8 10c8 	ldr.w	r1, [r8, #200]	; 0xc8
    439e:	4839      	ldr	r0, [pc, #228]	; (4484 <L_13442_delayMicroseconds+0x13e>)
    43a0:	f004 f808 	bl	83b4 <HardwareSerial3::begin(unsigned long)>
  Logger::setLoglevel(Logger::Off);         //Debug = 0, Info = 1, Warn = 2, Error = 3, Off = 4
    43a4:	2004      	movs	r0, #4
    43a6:	f7fd fa73 	bl	1890 <Logger::setLoglevel(Logger::LogLevel)>
  lastUpdate = 0;
    43aa:	4b37      	ldr	r3, [pc, #220]	; (4488 <L_13442_delayMicroseconds+0x142>)
    43ac:	2200      	movs	r2, #0
  digitalWrite(led, HIGH);
    43ae:	2101      	movs	r1, #1
    43b0:	200d      	movs	r0, #13
  lastUpdate = 0;
    43b2:	601a      	str	r2, [r3, #0]
  digitalWrite(led, HIGH);
    43b4:	f004 ff38 	bl	9228 <digitalWrite>
  bms.setPstrings(settings.Pstrings);
    43b8:	f8d8 1054 	ldr.w	r1, [r8, #84]	; 0x54
    43bc:	4833      	ldr	r0, [pc, #204]	; (448c <L_13442_delayMicroseconds+0x146>)
    43be:	f7fc fc55 	bl	c6c <BMSModuleManager::setPstrings(int)>
  bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt);
    43c2:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
    43c6:	f898 1040 	ldrb.w	r1, [r8, #64]	; 0x40
    43ca:	4830      	ldr	r0, [pc, #192]	; (448c <L_13442_delayMicroseconds+0x146>)
    43cc:	f7fc fc50 	bl	c70 <BMSModuleManager::setSensors(int, float)>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    43d0:	683b      	ldr	r3, [r7, #0]
    43d2:	9303      	str	r3, [sp, #12]
	return ret;
    43d4:	9803      	ldr	r0, [sp, #12]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    43d6:	683a      	ldr	r2, [r7, #0]
    43d8:	9202      	str	r2, [sp, #8]
  Pretimer = millis();
    43da:	492d      	ldr	r1, [pc, #180]	; (4490 <L_13442_delayMicroseconds+0x14a>)
  Pretimer1 = millis();
    43dc:	4b2d      	ldr	r3, [pc, #180]	; (4494 <L_13442_delayMicroseconds+0x14e>)
	return ret;
    43de:	9a02      	ldr	r2, [sp, #8]
  Pretimer = millis();
    43e0:	6008      	str	r0, [r1, #0]
  Pretimer1 = millis();
    43e2:	601a      	str	r2, [r3, #0]
}
    43e4:	b005      	add	sp, #20
    43e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
    43ea:	683b      	ldr	r3, [r7, #0]
			if (usb_configuration) {
    43ec:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
    43ee:	1b5b      	subs	r3, r3, r5
			if (usb_configuration) {
    43f0:	b132      	cbz	r2, 4400 <L_13442_delayMicroseconds+0xba>
				if (elapsed > 2000) break;
    43f2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    43f6:	f63f af4d 	bhi.w	4294 <setup+0x184>
			yield();
    43fa:	f006 fe8d 	bl	b118 <yield>
    43fe:	e738      	b.n	4272 <setup+0x162>
				if (elapsed > 750) break;
    4400:	4543      	cmp	r3, r8
    4402:	d9fa      	bls.n	43fa <L_13442_delayMicroseconds+0xb4>
    4404:	e746      	b.n	4294 <setup+0x184>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4406:	2118      	movs	r1, #24
    4408:	4823      	ldr	r0, [pc, #140]	; (4498 <L_13442_delayMicroseconds+0x152>)
    440a:	f006 fd7f 	bl	af0c <usb_serial_write>
    440e:	4815      	ldr	r0, [pc, #84]	; (4464 <L_13442_delayMicroseconds+0x11e>)
    4410:	f004 f8d2 	bl	85b8 <Print::println()>
    4414:	e78b      	b.n	432e <setup+0x21e>
    4416:	2119      	movs	r1, #25
    4418:	4820      	ldr	r0, [pc, #128]	; (449c <L_13442_delayMicroseconds+0x156>)
    441a:	f006 fd77 	bl	af0c <usb_serial_write>
    441e:	4811      	ldr	r0, [pc, #68]	; (4464 <L_13442_delayMicroseconds+0x11e>)
    4420:	f004 f8ca 	bl	85b8 <Print::println()>
    4424:	e77f      	b.n	4326 <setup+0x216>
    4426:	211c      	movs	r1, #28
    4428:	481d      	ldr	r0, [pc, #116]	; (44a0 <L_13442_delayMicroseconds+0x15a>)
    442a:	f006 fd6f 	bl	af0c <usb_serial_write>
    442e:	480d      	ldr	r0, [pc, #52]	; (4464 <L_13442_delayMicroseconds+0x11e>)
    4430:	f004 f8c2 	bl	85b8 <Print::println()>
    4434:	e773      	b.n	431e <setup+0x20e>
    4436:	bf00      	nop
    4438:	1fff8764 	.word	0x1fff8764
    443c:	1fffb2e4 	.word	0x1fffb2e4
    4440:	1fffb10c 	.word	0x1fffb10c
    4444:	1fffb480 	.word	0x1fffb480
    4448:	0001e848 	.word	0x0001e848
    444c:	1fff8fd0 	.word	0x1fff8fd0
    4450:	1fffb4d8 	.word	0x1fffb4d8
    4454:	1fffb6f4 	.word	0x1fffb6f4
    4458:	1fffb6f8 	.word	0x1fffb6f8
    445c:	1fffb6d0 	.word	0x1fffb6d0
    4460:	0001324c 	.word	0x0001324c
    4464:	1fff880c 	.word	0x1fff880c
    4468:	0001325c 	.word	0x0001325c
    446c:	1fff87ac 	.word	0x1fff87ac
    4470:	00013274 	.word	0x00013274
    4474:	4007f000 	.word	0x4007f000
    4478:	40052000 	.word	0x40052000
    447c:	00013378 	.word	0x00013378
    4480:	1fffb204 	.word	0x1fffb204
    4484:	1fff87c0 	.word	0x1fff87c0
    4488:	1fffb138 	.word	0x1fffb138
    448c:	1fff8fe0 	.word	0x1fff8fe0
    4490:	1fff8fb8 	.word	0x1fff8fb8
    4494:	1fff8fbc 	.word	0x1fff8fbc
    4498:	0001335c 	.word	0x0001335c
    449c:	00013340 	.word	0x00013340
    44a0:	00013320 	.word	0x00013320
    44a4:	2113      	movs	r1, #19
    44a6:	481d      	ldr	r0, [pc, #116]	; (451c <L_13442_delayMicroseconds+0x1d6>)
    44a8:	f006 fd30 	bl	af0c <usb_serial_write>
    44ac:	481c      	ldr	r0, [pc, #112]	; (4520 <L_13442_delayMicroseconds+0x1da>)
    44ae:	f004 f883 	bl	85b8 <Print::println()>
    44b2:	e72f      	b.n	4314 <setup+0x204>
    44b4:	2112      	movs	r1, #18
    44b6:	481b      	ldr	r0, [pc, #108]	; (4524 <L_13442_delayMicroseconds+0x1de>)
    44b8:	f006 fd28 	bl	af0c <usb_serial_write>
    44bc:	4818      	ldr	r0, [pc, #96]	; (4520 <L_13442_delayMicroseconds+0x1da>)
    44be:	f004 f87b 	bl	85b8 <Print::println()>
    44c2:	e722      	b.n	430a <setup+0x1fa>
    44c4:	2117      	movs	r1, #23
    44c6:	4818      	ldr	r0, [pc, #96]	; (4528 <L_13442_delayMicroseconds+0x1e2>)
    44c8:	f006 fd20 	bl	af0c <usb_serial_write>
    44cc:	4814      	ldr	r0, [pc, #80]	; (4520 <L_13442_delayMicroseconds+0x1da>)
    44ce:	f004 f873 	bl	85b8 <Print::println()>
  if (RCM_SRS0 & RCM_SRS0_POR) Serial.println("Power-on Reset");        // removed / applied power
    44d2:	4b16      	ldr	r3, [pc, #88]	; (452c <L_13442_delayMicroseconds+0x1e6>)
    44d4:	781b      	ldrb	r3, [r3, #0]
    44d6:	061d      	lsls	r5, r3, #24
    44d8:	f57f af12 	bpl.w	4300 <setup+0x1f0>
    44dc:	210e      	movs	r1, #14
    44de:	4814      	ldr	r0, [pc, #80]	; (4530 <L_13442_delayMicroseconds+0x1ea>)
    44e0:	f006 fd14 	bl	af0c <usb_serial_write>
    44e4:	480e      	ldr	r0, [pc, #56]	; (4520 <L_13442_delayMicroseconds+0x1da>)
    44e6:	f004 f867 	bl	85b8 <Print::println()>
    44ea:	e709      	b.n	4300 <setup+0x1f0>
    44ec:	210e      	movs	r1, #14
    44ee:	4811      	ldr	r0, [pc, #68]	; (4534 <L_13442_delayMicroseconds+0x1ee>)
    44f0:	f006 fd0c 	bl	af0c <usb_serial_write>
    44f4:	480a      	ldr	r0, [pc, #40]	; (4520 <L_13442_delayMicroseconds+0x1da>)
    44f6:	f004 f85f 	bl	85b8 <Print::println()>
    44fa:	e6f7      	b.n	42ec <setup+0x1dc>
    44fc:	210c      	movs	r1, #12
    44fe:	480e      	ldr	r0, [pc, #56]	; (4538 <L_13442_delayMicroseconds+0x1f2>)
    4500:	f006 fd04 	bl	af0c <usb_serial_write>
    4504:	4806      	ldr	r0, [pc, #24]	; (4520 <L_13442_delayMicroseconds+0x1da>)
    4506:	f004 f857 	bl	85b8 <Print::println()>
    450a:	e6ea      	b.n	42e2 <setup+0x1d2>
    450c:	2121      	movs	r1, #33	; 0x21
    450e:	480b      	ldr	r0, [pc, #44]	; (453c <L_13442_delayMicroseconds+0x1f6>)
    4510:	f006 fcfc 	bl	af0c <usb_serial_write>
    4514:	4802      	ldr	r0, [pc, #8]	; (4520 <L_13442_delayMicroseconds+0x1da>)
    4516:	f004 f84f 	bl	85b8 <Print::println()>
    451a:	e6dd      	b.n	42d8 <setup+0x1c8>
    451c:	0001330c 	.word	0x0001330c
    4520:	1fff880c 	.word	0x1fff880c
    4524:	000132f8 	.word	0x000132f8
    4528:	000132d0 	.word	0x000132d0
    452c:	4007f000 	.word	0x4007f000
    4530:	000132e8 	.word	0x000132e8
    4534:	000132c0 	.word	0x000132c0
    4538:	000132b0 	.word	0x000132b0
    453c:	0001328c 	.word	0x0001328c

00004540 <SetSerialBaud(unsigned long)>:
void SetSerialBaud(uint32_t Speed) {
    4540:	b510      	push	{r4, lr}
    4542:	4604      	mov	r4, r0
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    4544:	2300      	movs	r3, #0
    4546:	220a      	movs	r2, #10
    4548:	4621      	mov	r1, r4
    454a:	481a      	ldr	r0, [pc, #104]	; (45b4 <SetSerialBaud(unsigned long)+0x74>)
    454c:	f004 f84c 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    4550:	4818      	ldr	r0, [pc, #96]	; (45b4 <SetSerialBaud(unsigned long)+0x74>)
    4552:	f004 f831 	bl	85b8 <Print::println()>
  switch (Speed) {
    4556:	f5b4 4f16 	cmp.w	r4, #38400	; 0x9600
    455a:	d01e      	beq.n	459a <SetSerialBaud(unsigned long)+0x5a>
    455c:	d818      	bhi.n	4590 <SetSerialBaud(unsigned long)+0x50>
    455e:	f5b4 5f16 	cmp.w	r4, #9600	; 0x2580
    4562:	d025      	beq.n	45b0 <SetSerialBaud(unsigned long)+0x70>
    4564:	f5b4 4f96 	cmp.w	r4, #19200	; 0x4b00
      can.baudRate(1);
    4568:	bf08      	it	eq
    456a:	2101      	moveq	r1, #1
  switch (Speed) {
    456c:	d117      	bne.n	459e <SetSerialBaud(unsigned long)+0x5e>
      can.baudRate(1);
    456e:	4812      	ldr	r0, [pc, #72]	; (45b8 <SetSerialBaud(unsigned long)+0x78>)
    4570:	f003 fd92 	bl	8098 <Serial_CAN::baudRate(unsigned char)>
      settings.SerialCanBaud = 19200;
    4574:	4b11      	ldr	r3, [pc, #68]	; (45bc <SetSerialBaud(unsigned long)+0x7c>)
    4576:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
	virtual int available(void)     { return serial3_available(); }
	virtual int peek(void)          { return serial3_peek(); }
	virtual int read(void)          { return serial3_getchar(); }
	virtual void flush(void)        { serial3_flush(); }
    457a:	f005 fdc9 	bl	a110 <serial3_flush>
      canSerial.begin(19200);
    457e:	4810      	ldr	r0, [pc, #64]	; (45c0 <SetSerialBaud(unsigned long)+0x80>)
    4580:	4621      	mov	r1, r4
    4582:	f003 ff17 	bl	83b4 <HardwareSerial3::begin(unsigned long)>
}
    4586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      can.exitSettingMode();
    458a:	480b      	ldr	r0, [pc, #44]	; (45b8 <SetSerialBaud(unsigned long)+0x78>)
    458c:	f003 bddc 	b.w	8148 <Serial_CAN::exitSettingMode()>
  switch (Speed) {
    4590:	f5b4 3fe1 	cmp.w	r4, #115200	; 0x1c200
    4594:	d103      	bne.n	459e <SetSerialBaud(unsigned long)+0x5e>
      can.baudRate(4);
    4596:	2104      	movs	r1, #4
    4598:	e7e9      	b.n	456e <SetSerialBaud(unsigned long)+0x2e>
      can.baudRate(2);
    459a:	2102      	movs	r1, #2
    459c:	e7e7      	b.n	456e <SetSerialBaud(unsigned long)+0x2e>
    459e:	4809      	ldr	r0, [pc, #36]	; (45c4 <SetSerialBaud(unsigned long)+0x84>)
    45a0:	210f      	movs	r1, #15
    45a2:	f006 fcb3 	bl	af0c <usb_serial_write>
}
    45a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	size_t println(const char s[])			{ return print(s) + println(); }
    45aa:	4802      	ldr	r0, [pc, #8]	; (45b4 <SetSerialBaud(unsigned long)+0x74>)
    45ac:	f004 b804 	b.w	85b8 <Print::println()>
      can.baudRate(0);
    45b0:	2100      	movs	r1, #0
    45b2:	e7dc      	b.n	456e <SetSerialBaud(unsigned long)+0x2e>
    45b4:	1fff880c 	.word	0x1fff880c
    45b8:	1fffb00c 	.word	0x1fffb00c
    45bc:	1fffb204 	.word	0x1fffb204
    45c0:	1fff87c0 	.word	0x1fff87c0
    45c4:	00013394 	.word	0x00013394

000045c8 <menu()>:
void menu() {
    45c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (menuload == 4) {
    45ca:	4cb7      	ldr	r4, [pc, #732]	; (48a8 <menu()+0x2e0>)
  incomingByte = Serial.read();  // read the incoming byte:
    45cc:	4eb7      	ldr	r6, [pc, #732]	; (48ac <menu()+0x2e4>)
void menu() {
    45ce:	b083      	sub	sp, #12
        virtual int read() { return usb_serial_getchar(); }
    45d0:	f006 fc2e 	bl	ae30 <usb_serial_getchar>
  if (menuload == 4) {
    45d4:	6823      	ldr	r3, [r4, #0]
  incomingByte = Serial.read();  // read the incoming byte:
    45d6:	6030      	str	r0, [r6, #0]
  if (menuload == 4) {
    45d8:	2b04      	cmp	r3, #4
    45da:	d05c      	beq.n	4696 <menu()+0xce>
  if (menuload == 2) {
    45dc:	2b02      	cmp	r3, #2
    45de:	f040 8153 	bne.w	4888 <menu()+0x2c0>
    switch (incomingByte) {
    45e2:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
    45e6:	2a42      	cmp	r2, #66	; 0x42
    45e8:	d84a      	bhi.n	4680 <menu()+0xb8>
    45ea:	e8df f012 	tbh	[pc, r2, lsl #1]
    45ee:	0664      	.short	0x0664
    45f0:	067d0670 	.word	0x067d0670
    45f4:	06b7069a 	.word	0x06b7069a
    45f8:	004906c6 	.word	0x004906c6
    45fc:	00490709 	.word	0x00490709
    4600:	00490049 	.word	0x00490049
    4604:	00490049 	.word	0x00490049
    4608:	00490049 	.word	0x00490049
    460c:	00490049 	.word	0x00490049
    4610:	00490049 	.word	0x00490049
    4614:	00490049 	.word	0x00490049
    4618:	00490049 	.word	0x00490049
    461c:	00490049 	.word	0x00490049
    4620:	00490049 	.word	0x00490049
    4624:	00490049 	.word	0x00490049
    4628:	00490049 	.word	0x00490049
    462c:	00490049 	.word	0x00490049
    4630:	00490049 	.word	0x00490049
    4634:	00490049 	.word	0x00490049
    4638:	00490049 	.word	0x00490049
    463c:	00490049 	.word	0x00490049
    4640:	00490049 	.word	0x00490049
    4644:	00490049 	.word	0x00490049
    4648:	00490049 	.word	0x00490049
    464c:	00490049 	.word	0x00490049
    4650:	01490049 	.word	0x01490049
    4654:	00490049 	.word	0x00490049
    4658:	00490049 	.word	0x00490049
    465c:	00490049 	.word	0x00490049
    4660:	00490049 	.word	0x00490049
    4664:	00490049 	.word	0x00490049
    4668:	00490049 	.word	0x00490049
    466c:	00450049 	.word	0x00450049
    4670:	068e0049 	.word	0x068e0049
    switch (incomingByte) {
    4674:	2871      	cmp	r0, #113	; 0x71
    4676:	d103      	bne.n	4680 <menu()+0xb8>
          menuload = 1;
    4678:	2300      	movs	r3, #0
          incomingByte = 'i';
    467a:	2073      	movs	r0, #115	; 0x73
          menuload = 1;
    467c:	6023      	str	r3, [r4, #0]
          incomingByte = 'i';
    467e:	6030      	str	r0, [r6, #0]
  if (incomingByte == 115 & menuload == 0) {
    4680:	2873      	cmp	r0, #115	; 0x73
    4682:	bf08      	it	eq
    4684:	2b00      	cmpeq	r3, #0
    4686:	bf0c      	ite	eq
    4688:	2301      	moveq	r3, #1
    468a:	2300      	movne	r3, #0
    468c:	2b00      	cmp	r3, #0
    468e:	f040 808d 	bne.w	47ac <menu()+0x1e4>
}
    4692:	b003      	add	sp, #12
    4694:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (incomingByte) {
    4696:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    469a:	2a41      	cmp	r2, #65	; 0x41
    469c:	d8f0      	bhi.n	4680 <menu()+0xb8>
    469e:	a101      	add	r1, pc, #4	; (adr r1, 46a4 <menu()+0xdc>)
    46a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    46a4:	00004f3f 	.word	0x00004f3f
    46a8:	00005241 	.word	0x00005241
    46ac:	00005257 	.word	0x00005257
    46b0:	0000525b 	.word	0x0000525b
    46b4:	00005277 	.word	0x00005277
    46b8:	0000527b 	.word	0x0000527b
    46bc:	00005295 	.word	0x00005295
    46c0:	000052ab 	.word	0x000052ab
    46c4:	000052af 	.word	0x000052af
    46c8:	00004f09 	.word	0x00004f09
    46cc:	00004681 	.word	0x00004681
    46d0:	00004681 	.word	0x00004681
    46d4:	00004681 	.word	0x00004681
    46d8:	00004681 	.word	0x00004681
    46dc:	00004681 	.word	0x00004681
    46e0:	00004681 	.word	0x00004681
    46e4:	00004681 	.word	0x00004681
    46e8:	00004681 	.word	0x00004681
    46ec:	00004681 	.word	0x00004681
    46f0:	00004681 	.word	0x00004681
    46f4:	00004681 	.word	0x00004681
    46f8:	00004681 	.word	0x00004681
    46fc:	00004681 	.word	0x00004681
    4700:	00004681 	.word	0x00004681
    4704:	00004681 	.word	0x00004681
    4708:	00004681 	.word	0x00004681
    470c:	00004681 	.word	0x00004681
    4710:	00004681 	.word	0x00004681
    4714:	00004681 	.word	0x00004681
    4718:	00004681 	.word	0x00004681
    471c:	00004681 	.word	0x00004681
    4720:	00004681 	.word	0x00004681
    4724:	00004681 	.word	0x00004681
    4728:	00004681 	.word	0x00004681
    472c:	00004681 	.word	0x00004681
    4730:	00004681 	.word	0x00004681
    4734:	00004681 	.word	0x00004681
    4738:	00004681 	.word	0x00004681
    473c:	00004681 	.word	0x00004681
    4740:	00004681 	.word	0x00004681
    4744:	00004681 	.word	0x00004681
    4748:	00004681 	.word	0x00004681
    474c:	00004681 	.word	0x00004681
    4750:	00004681 	.word	0x00004681
    4754:	00004681 	.word	0x00004681
    4758:	00004681 	.word	0x00004681
    475c:	00004681 	.word	0x00004681
    4760:	00004681 	.word	0x00004681
    4764:	00004681 	.word	0x00004681
    4768:	000052b3 	.word	0x000052b3
    476c:	00004681 	.word	0x00004681
    4770:	00004681 	.word	0x00004681
    4774:	00004681 	.word	0x00004681
    4778:	00004681 	.word	0x00004681
    477c:	00004681 	.word	0x00004681
    4780:	00004681 	.word	0x00004681
    4784:	00004681 	.word	0x00004681
    4788:	00004681 	.word	0x00004681
    478c:	00004681 	.word	0x00004681
    4790:	00004681 	.word	0x00004681
    4794:	00004681 	.word	0x00004681
    4798:	00004681 	.word	0x00004681
    479c:	00004681 	.word	0x00004681
    47a0:	00004681 	.word	0x00004681
    47a4:	00004681 	.word	0x00004681
    47a8:	00004679 	.word	0x00004679
    47ac:	4d40      	ldr	r5, [pc, #256]	; (48b0 <menu()+0x2e8>)
    SERIALCONSOLE.println();
    47ae:	4841      	ldr	r0, [pc, #260]	; (48b4 <menu()+0x2ec>)
    47b0:	f003 ff02 	bl	85b8 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    47b4:	2104      	movs	r1, #4
    47b6:	4840      	ldr	r0, [pc, #256]	; (48b8 <menu()+0x2f0>)
    47b8:	f006 fba8 	bl	af0c <usb_serial_write>
    47bc:	483d      	ldr	r0, [pc, #244]	; (48b4 <menu()+0x2ec>)
    47be:	f003 fefb 	bl	85b8 <Print::println()>
    47c2:	2110      	movs	r1, #16
    47c4:	483d      	ldr	r0, [pc, #244]	; (48bc <menu()+0x2f4>)
    47c6:	f006 fba1 	bl	af0c <usb_serial_write>
    47ca:	483a      	ldr	r0, [pc, #232]	; (48b4 <menu()+0x2ec>)
    47cc:	f003 fef4 	bl	85b8 <Print::println()>
    47d0:	2113      	movs	r1, #19
    47d2:	483b      	ldr	r0, [pc, #236]	; (48c0 <menu()+0x2f8>)
    47d4:	f006 fb9a 	bl	af0c <usb_serial_write>
    SERIALCONSOLE.println(firmver);
    47d8:	4b3a      	ldr	r3, [pc, #232]	; (48c4 <menu()+0x2fc>)
	size_t print(int n)				{ return print((long)n); }
    47da:	4836      	ldr	r0, [pc, #216]	; (48b4 <menu()+0x2ec>)
    47dc:	6819      	ldr	r1, [r3, #0]
    47de:	f003 fee3 	bl	85a8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    47e2:	4834      	ldr	r0, [pc, #208]	; (48b4 <menu()+0x2ec>)
    47e4:	f003 fee8 	bl	85b8 <Print::println()>
    47e8:	2114      	movs	r1, #20
    47ea:	4837      	ldr	r0, [pc, #220]	; (48c8 <menu()+0x300>)
    47ec:	f006 fb8e 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    47f0:	4830      	ldr	r0, [pc, #192]	; (48b4 <menu()+0x2ec>)
    47f2:	f003 fee1 	bl	85b8 <Print::println()>
    47f6:	211e      	movs	r1, #30
    47f8:	4834      	ldr	r0, [pc, #208]	; (48cc <menu()+0x304>)
    47fa:	f006 fb87 	bl	af0c <usb_serial_write>
    47fe:	482d      	ldr	r0, [pc, #180]	; (48b4 <menu()+0x2ec>)
    4800:	f003 feda 	bl	85b8 <Print::println()>
    4804:	2115      	movs	r1, #21
    4806:	4832      	ldr	r0, [pc, #200]	; (48d0 <menu()+0x308>)
    4808:	f006 fb80 	bl	af0c <usb_serial_write>
    480c:	4829      	ldr	r0, [pc, #164]	; (48b4 <menu()+0x2ec>)
    480e:	f003 fed3 	bl	85b8 <Print::println()>
    4812:	211e      	movs	r1, #30
    4814:	482f      	ldr	r0, [pc, #188]	; (48d4 <menu()+0x30c>)
    4816:	f006 fb79 	bl	af0c <usb_serial_write>
    481a:	4826      	ldr	r0, [pc, #152]	; (48b4 <menu()+0x2ec>)
    481c:	f003 fecc 	bl	85b8 <Print::println()>
    4820:	2120      	movs	r1, #32
    4822:	482d      	ldr	r0, [pc, #180]	; (48d8 <menu()+0x310>)
    4824:	f006 fb72 	bl	af0c <usb_serial_write>
    4828:	4822      	ldr	r0, [pc, #136]	; (48b4 <menu()+0x2ec>)
    482a:	f003 fec5 	bl	85b8 <Print::println()>
    482e:	2119      	movs	r1, #25
    4830:	482a      	ldr	r0, [pc, #168]	; (48dc <menu()+0x314>)
    4832:	f006 fb6b 	bl	af0c <usb_serial_write>
    4836:	481f      	ldr	r0, [pc, #124]	; (48b4 <menu()+0x2ec>)
    4838:	f003 febe 	bl	85b8 <Print::println()>
    483c:	2116      	movs	r1, #22
    483e:	4828      	ldr	r0, [pc, #160]	; (48e0 <menu()+0x318>)
    4840:	f006 fb64 	bl	af0c <usb_serial_write>
    4844:	481b      	ldr	r0, [pc, #108]	; (48b4 <menu()+0x2ec>)
    4846:	f003 feb7 	bl	85b8 <Print::println()>
    484a:	2112      	movs	r1, #18
    484c:	4825      	ldr	r0, [pc, #148]	; (48e4 <menu()+0x31c>)
    484e:	f006 fb5d 	bl	af0c <usb_serial_write>
    4852:	4818      	ldr	r0, [pc, #96]	; (48b4 <menu()+0x2ec>)
    4854:	f003 feb0 	bl	85b8 <Print::println()>
    4858:	210f      	movs	r1, #15
    485a:	4823      	ldr	r0, [pc, #140]	; (48e8 <menu()+0x320>)
    485c:	f006 fb56 	bl	af0c <usb_serial_write>
    4860:	4814      	ldr	r0, [pc, #80]	; (48b4 <menu()+0x2ec>)
    4862:	f003 fea9 	bl	85b8 <Print::println()>
    4866:	210d      	movs	r1, #13
    4868:	4820      	ldr	r0, [pc, #128]	; (48ec <menu()+0x324>)
    486a:	f006 fb4f 	bl	af0c <usb_serial_write>
    486e:	4811      	ldr	r0, [pc, #68]	; (48b4 <menu()+0x2ec>)
    4870:	f003 fea2 	bl	85b8 <Print::println()>
    debug = 0;
    4874:	2200      	movs	r2, #0
    menuload = 1;
    4876:	2301      	movs	r3, #1
    debug = 0;
    4878:	602a      	str	r2, [r5, #0]
    menuload = 1;
    487a:	6023      	str	r3, [r4, #0]
}
    487c:	b003      	add	sp, #12
    487e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        calcur();
    4880:	f7fe fc08 	bl	3094 <calcur()>
  if (menuload == 9) {
    4884:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    4886:	6830      	ldr	r0, [r6, #0]
  if (menuload == 9) {
    4888:	2b09      	cmp	r3, #9
    488a:	d138      	bne.n	48fe <menu()+0x336>
    switch (incomingByte) {
    488c:	2834      	cmp	r0, #52	; 0x34
    488e:	f73f aef1 	bgt.w	4674 <menu()+0xac>
    4892:	2830      	cmp	r0, #48	; 0x30
    4894:	f77f aef4 	ble.w	4680 <menu()+0xb8>
    4898:	3832      	subs	r0, #50	; 0x32
    489a:	2802      	cmp	r0, #2
    489c:	f201 8410 	bhi.w	60c0 <menu()+0x1af8>
    48a0:	e8df f000 	tbb	[pc, r0]
    48a4:	2638      	.short	0x2638
    48a6:	4d          	.byte	0x4d
    48a7:	00          	.byte	0x00
    48a8:	1fffb168 	.word	0x1fffb168
    48ac:	1fffb130 	.word	0x1fffb130
    48b0:	1fff8744 	.word	0x1fff8744
    48b4:	1fff880c 	.word	0x1fff880c
    48b8:	00013ccc 	.word	0x00013ccc
    48bc:	00013cd4 	.word	0x00013cd4
    48c0:	00013ce8 	.word	0x00013ce8
    48c4:	1fff8750 	.word	0x1fff8750
    48c8:	00013cfc 	.word	0x00013cfc
    48cc:	00013d14 	.word	0x00013d14
    48d0:	00013d34 	.word	0x00013d34
    48d4:	00013d4c 	.word	0x00013d4c
    48d8:	00013d6c 	.word	0x00013d6c
    48dc:	00013d90 	.word	0x00013d90
    48e0:	00013dac 	.word	0x00013dac
    48e4:	00013dc4 	.word	0x00013dc4
    48e8:	00013dd8 	.word	0x00013dd8
    48ec:	00013de8 	.word	0x00013de8
        virtual int available() { return usb_serial_available(); }
    48f0:	f006 fada 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    48f4:	2800      	cmp	r0, #0
    48f6:	f300 8295 	bgt.w	4e24 <menu()+0x85c>
  if (menuload == 8) {
    48fa:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    48fc:	6830      	ldr	r0, [r6, #0]
  if (menuload == 8) {
    48fe:	2b08      	cmp	r3, #8
    4900:	d133      	bne.n	496a <menu()+0x3a2>
    switch (incomingByte) {
    4902:	2832      	cmp	r0, #50	; 0x32
    4904:	d02a      	beq.n	495c <menu()+0x394>
    4906:	2871      	cmp	r0, #113	; 0x71
    4908:	f43f aeb6 	beq.w	4678 <menu()+0xb0>
    490c:	2831      	cmp	r0, #49	; 0x31
    490e:	d03c      	beq.n	498a <menu()+0x3c2>
  if (menuload == 7) {
    4910:	2308      	movs	r3, #8
    4912:	e6b5      	b.n	4680 <menu()+0xb8>
        menuload = 1;
    4914:	2301      	movs	r3, #1
    4916:	6023      	str	r3, [r4, #0]
    4918:	f006 fac6 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    491c:	2800      	cmp	r0, #0
    491e:	f300 827b 	bgt.w	4e18 <menu()+0x850>
  if (menuload == 8) {
    4922:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'x';
    4924:	2078      	movs	r0, #120	; 0x78
  if (menuload == 7) {
    4926:	2b07      	cmp	r3, #7
        incomingByte = 'x';
    4928:	6030      	str	r0, [r6, #0]
  if (menuload == 7) {
    492a:	f43f aea9 	beq.w	4680 <menu()+0xb8>
  if (menuload == 6)  //Charging settings
    492e:	2b06      	cmp	r3, #6
    4930:	f43f aea6 	beq.w	4680 <menu()+0xb8>
  if (menuload == 5) {
    4934:	2b05      	cmp	r3, #5
    4936:	f041 8384 	bne.w	6042 <menu()+0x1a7a>
          incomingByte = 'a';
    493a:	2305      	movs	r3, #5
    493c:	e6a0      	b.n	4680 <menu()+0xb8>
        menuload = 1;
    493e:	2301      	movs	r3, #1
    4940:	6023      	str	r3, [r4, #0]
    4942:	f006 fab1 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    4946:	2800      	cmp	r0, #0
    4948:	ddeb      	ble.n	4922 <menu()+0x35a>
          SetSerialBaud(Serial.parseInt() * 100);
    494a:	4872      	ldr	r0, [pc, #456]	; (4b14 <menu()+0x54c>)
    494c:	f003 ff94 	bl	8878 <Stream::parseInt()>
    4950:	2364      	movs	r3, #100	; 0x64
    4952:	fb03 f000 	mul.w	r0, r3, r0
    4956:	f7ff fdf3 	bl	4540 <SetSerialBaud(unsigned long)>
    495a:	e7e2      	b.n	4922 <menu()+0x35a>
    495c:	f006 faa4 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    4960:	2800      	cmp	r0, #0
    4962:	f300 81c4 	bgt.w	4cee <menu()+0x726>
  if (menuload == 7) {
    4966:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    4968:	6830      	ldr	r0, [r6, #0]
  if (menuload == 7) {
    496a:	2b07      	cmp	r3, #7
    496c:	d176      	bne.n	4a5c <menu()+0x494>
    switch (incomingByte) {
    496e:	2834      	cmp	r0, #52	; 0x34
    4970:	f73f ae80 	bgt.w	4674 <menu()+0xac>
    4974:	2830      	cmp	r0, #48	; 0x30
    4976:	f77f ae83 	ble.w	4680 <menu()+0xb8>
    497a:	3832      	subs	r0, #50	; 0x32
    497c:	2802      	cmp	r0, #2
    497e:	f201 838a 	bhi.w	6096 <menu()+0x1ace>
    4982:	e8df f000 	tbb	[pc, r0]
    4986:	647f      	.short	0x647f
    4988:	92          	.byte	0x92
    4989:	00          	.byte	0x00
    498a:	f006 fa8d 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    498e:	2800      	cmp	r0, #0
    4990:	f300 81bb 	bgt.w	4d0a <menu()+0x742>
        if (settings.IgnoreTemp > 2) {
    4994:	4d60      	ldr	r5, [pc, #384]	; (4b18 <menu()+0x550>)
    4996:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
        bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt);
    499a:	6c6a      	ldr	r2, [r5, #68]	; 0x44
        if (settings.IgnoreTemp > 2) {
    499c:	2902      	cmp	r1, #2
          settings.IgnoreTemp = 0;
    499e:	bf84      	itt	hi
    49a0:	2100      	movhi	r1, #0
    49a2:	f885 1040 	strbhi.w	r1, [r5, #64]	; 0x40
          bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt);
    49a6:	485d      	ldr	r0, [pc, #372]	; (4b1c <menu()+0x554>)
    49a8:	f7fc f962 	bl	c70 <BMSModuleManager::setSensors(int, float)>
          menuload = 1;
    49ac:	2201      	movs	r2, #1
          incomingByte = 'i';
    49ae:	2369      	movs	r3, #105	; 0x69
          menuload = 1;
    49b0:	6022      	str	r2, [r4, #0]
          incomingByte = 'i';
    49b2:	6033      	str	r3, [r6, #0]
  if (menuload == 1) {
    49b4:	e001      	b.n	49ba <menu()+0x3f2>
        virtual int read() { return usb_serial_getchar(); }
    49b6:	f006 fa3b 	bl	ae30 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    49ba:	f006 fa75 	bl	aea8 <usb_serial_available>
        while (Serial.available()) {
    49be:	4606      	mov	r6, r0
    49c0:	2800      	cmp	r0, #0
    49c2:	d1f8      	bne.n	49b6 <menu()+0x3ee>
        SERIALCONSOLE.println();
    49c4:	4853      	ldr	r0, [pc, #332]	; (4b14 <menu()+0x54c>)
    49c6:	f003 fdf7 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    49ca:	4852      	ldr	r0, [pc, #328]	; (4b14 <menu()+0x54c>)
    49cc:	f003 fdf4 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    49d0:	4850      	ldr	r0, [pc, #320]	; (4b14 <menu()+0x54c>)
    49d2:	f003 fdf1 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    49d6:	484f      	ldr	r0, [pc, #316]	; (4b14 <menu()+0x54c>)
    49d8:	f003 fdee 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    49dc:	484d      	ldr	r0, [pc, #308]	; (4b14 <menu()+0x54c>)
    49de:	f003 fdeb 	bl	85b8 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    49e2:	2115      	movs	r1, #21
    49e4:	484e      	ldr	r0, [pc, #312]	; (4b20 <menu()+0x558>)
    49e6:	f006 fa91 	bl	af0c <usb_serial_write>
    49ea:	484a      	ldr	r0, [pc, #296]	; (4b14 <menu()+0x54c>)
    49ec:	f003 fde4 	bl	85b8 <Print::println()>
    49f0:	2118      	movs	r1, #24
    49f2:	484c      	ldr	r0, [pc, #304]	; (4b24 <menu()+0x55c>)
    49f4:	f006 fa8a 	bl	af0c <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    49f8:	4633      	mov	r3, r6
    49fa:	220a      	movs	r2, #10
    49fc:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
    4a00:	4844      	ldr	r0, [pc, #272]	; (4b14 <menu()+0x54c>)
    4a02:	f003 fdf1 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(uint8_t b)			{ return print(b) + println(); }
    4a06:	4843      	ldr	r0, [pc, #268]	; (4b14 <menu()+0x54c>)
    4a08:	f003 fdd6 	bl	85b8 <Print::println()>
    4a0c:	2128      	movs	r1, #40	; 0x28
    4a0e:	4846      	ldr	r0, [pc, #280]	; (4b28 <menu()+0x560>)
    4a10:	f006 fa7c 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.print(settings.IgnoreVolt * 1000, 0);
    4a14:	6c68      	ldr	r0, [r5, #68]	; 0x44
    4a16:	4945      	ldr	r1, [pc, #276]	; (4b2c <menu()+0x564>)
    4a18:	f007 f958 	bl	bccc <__aeabi_fmul>
    4a1c:	f006 ff32 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4a20:	9600      	str	r6, [sp, #0]
    4a22:	460b      	mov	r3, r1
    4a24:	4602      	mov	r2, r0
    4a26:	483b      	ldr	r0, [pc, #236]	; (4b14 <menu()+0x54c>)
    4a28:	f003 fdea 	bl	8600 <Print::printFloat(double, unsigned char)>
    4a2c:	2102      	movs	r1, #2
    4a2e:	4840      	ldr	r0, [pc, #256]	; (4b30 <menu()+0x568>)
    4a30:	f006 fa6c 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4a34:	4837      	ldr	r0, [pc, #220]	; (4b14 <menu()+0x54c>)
    4a36:	f003 fdbf 	bl	85b8 <Print::println()>
    4a3a:	2113      	movs	r1, #19
    4a3c:	483d      	ldr	r0, [pc, #244]	; (4b34 <menu()+0x56c>)
    4a3e:	f006 fa65 	bl	af0c <usb_serial_write>
    4a42:	4834      	ldr	r0, [pc, #208]	; (4b14 <menu()+0x54c>)
    4a44:	f003 fdb8 	bl	85b8 <Print::println()>
        menuload = 8;
    4a48:	2308      	movs	r3, #8
    4a4a:	6023      	str	r3, [r4, #0]
        break;
    4a4c:	e621      	b.n	4692 <menu()+0xca>
        virtual int available() { return usb_serial_available(); }
    4a4e:	f006 fa2b 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    4a52:	2800      	cmp	r0, #0
    4a54:	f300 8161 	bgt.w	4d1a <menu()+0x752>
  if (menuload == 6)  //Charging settings
    4a58:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    4a5a:	6830      	ldr	r0, [r6, #0]
  if (menuload == 6)  //Charging settings
    4a5c:	2b06      	cmp	r3, #6
    4a5e:	d13a      	bne.n	4ad6 <menu()+0x50e>
    switch (incomingByte) {
    4a60:	2837      	cmp	r0, #55	; 0x37
    4a62:	f73f ae07 	bgt.w	4674 <menu()+0xac>
    4a66:	2830      	cmp	r0, #48	; 0x30
    4a68:	f77f ae0a 	ble.w	4680 <menu()+0xb8>
    4a6c:	3832      	subs	r0, #50	; 0x32
    4a6e:	2805      	cmp	r0, #5
    4a70:	f201 82fc 	bhi.w	606c <menu()+0x1aa4>
    4a74:	e8df f010 	tbh	[pc, r0, lsl #1]
    4a78:	01290115 	.word	0x01290115
    4a7c:	003f00f8 	.word	0x003f00f8
    4a80:	010a0028 	.word	0x010a0028
    4a84:	f006 fa10 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    4a88:	2800      	cmp	r0, #0
    4a8a:	dde5      	ble.n	4a58 <menu()+0x490>
          settings.CellGap = Serial.parseInt();
    4a8c:	4821      	ldr	r0, [pc, #132]	; (4b14 <menu()+0x54c>)
          settings.CellGap = settings.CellGap * 0.001;
    4a8e:	4d22      	ldr	r5, [pc, #136]	; (4b18 <menu()+0x550>)
          settings.CellGap = Serial.parseInt();
    4a90:	f003 fef2 	bl	8878 <Stream::parseInt()>
    4a94:	f007 f8c6 	bl	bc24 <__aeabi_i2f>
          settings.CellGap = settings.CellGap * 0.001;
    4a98:	4927      	ldr	r1, [pc, #156]	; (4b38 <menu()+0x570>)
    4a9a:	f007 f917 	bl	bccc <__aeabi_fmul>
          menuload = 1;
    4a9e:	2301      	movs	r3, #1
    4aa0:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    4aa2:	2361      	movs	r3, #97	; 0x61
          settings.CellGap = settings.CellGap * 0.001;
    4aa4:	63e8      	str	r0, [r5, #60]	; 0x3c
          incomingByte = 'a';
    4aa6:	6033      	str	r3, [r6, #0]
    switch (incomingByte) {
    4aa8:	e145      	b.n	4d36 <menu()+0x76e>
    4aaa:	f006 f9fd 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    4aae:	2800      	cmp	r0, #0
    4ab0:	ddd2      	ble.n	4a58 <menu()+0x490>
          settings.triptime = Serial.parseInt();
    4ab2:	4818      	ldr	r0, [pc, #96]	; (4b14 <menu()+0x54c>)
    4ab4:	4d18      	ldr	r5, [pc, #96]	; (4b18 <menu()+0x550>)
    4ab6:	f003 fedf 	bl	8878 <Stream::parseInt()>
          menuload = 1;
    4aba:	2301      	movs	r3, #1
    4abc:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    4abe:	2361      	movs	r3, #97	; 0x61
          settings.triptime = Serial.parseInt();
    4ac0:	f8a5 00ce 	strh.w	r0, [r5, #206]	; 0xce
          incomingByte = 'a';
    4ac4:	6033      	str	r3, [r6, #0]
    switch (incomingByte) {
    4ac6:	e136      	b.n	4d36 <menu()+0x76e>
    4ac8:	f006 f9ee 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    4acc:	2800      	cmp	r0, #0
    4ace:	f301 8192 	bgt.w	5df6 <menu()+0x182e>
  if (menuload == 5) {
    4ad2:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    4ad4:	6830      	ldr	r0, [r6, #0]
  if (menuload == 5) {
    4ad6:	2b05      	cmp	r3, #5
    4ad8:	f040 8747 	bne.w	596a <menu()+0x13a2>
    switch (incomingByte) {
    4adc:	2835      	cmp	r0, #53	; 0x35
    4ade:	f340 8730 	ble.w	5942 <menu()+0x137a>
    4ae2:	2871      	cmp	r0, #113	; 0x71
    4ae4:	f47f af29 	bne.w	493a <menu()+0x372>
        gaugedebug = 0;
    4ae8:	4a14      	ldr	r2, [pc, #80]	; (4b3c <menu()+0x574>)
    4aea:	2300      	movs	r3, #0
          incomingByte = 'k';
    4aec:	2073      	movs	r0, #115	; 0x73
        gaugedebug = 0;
    4aee:	6013      	str	r3, [r2, #0]
          menuload = 1;
    4af0:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    4af2:	6030      	str	r0, [r6, #0]
  if (menuload == 1) {
    4af4:	e5c4      	b.n	4680 <menu()+0xb8>
        settings.chargertype = settings.chargertype + 1;
    4af6:	4d08      	ldr	r5, [pc, #32]	; (4b18 <menu()+0x550>)
    4af8:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
          menuload = 1;
    4afc:	2201      	movs	r2, #1
        settings.chargertype = settings.chargertype + 1;
    4afe:	4413      	add	r3, r2
          settings.chargertype = 0;
    4b00:	2b07      	cmp	r3, #7
          menuload = 1;
    4b02:	6022      	str	r2, [r4, #0]
          settings.chargertype = 0;
    4b04:	bfa8      	it	ge
    4b06:	2300      	movge	r3, #0
          incomingByte = 'e';
    4b08:	2265      	movs	r2, #101	; 0x65
    4b0a:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
    4b0e:	6032      	str	r2, [r6, #0]
    switch (incomingByte) {
    4b10:	e018      	b.n	4b44 <menu()+0x57c>
    4b12:	bf00      	nop
    4b14:	1fff880c 	.word	0x1fff880c
    4b18:	1fffb204 	.word	0x1fffb204
    4b1c:	1fff8fe0 	.word	0x1fff8fe0
    4b20:	00013d94 	.word	0x00013d94
    4b24:	00013468 	.word	0x00013468
    4b28:	00013484 	.word	0x00013484
    4b2c:	447a0000 	.word	0x447a0000
    4b30:	000134b0 	.word	0x000134b0
    4b34:	00013454 	.word	0x00013454
    4b38:	3a83126f 	.word	0x3a83126f
    4b3c:	1fffb114 	.word	0x1fffb114
        virtual int read() { return usb_serial_getchar(); }
    4b40:	f006 f976 	bl	ae30 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    4b44:	f006 f9b0 	bl	aea8 <usb_serial_available>
        while (Serial.available()) {
    4b48:	4606      	mov	r6, r0
    4b4a:	2800      	cmp	r0, #0
    4b4c:	d1f8      	bne.n	4b40 <menu()+0x578>
        SERIALCONSOLE.println();
    4b4e:	48bb      	ldr	r0, [pc, #748]	; (4e3c <menu()+0x874>)
    4b50:	f003 fd32 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    4b54:	48b9      	ldr	r0, [pc, #740]	; (4e3c <menu()+0x874>)
    4b56:	f003 fd2f 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    4b5a:	48b8      	ldr	r0, [pc, #736]	; (4e3c <menu()+0x874>)
    4b5c:	f003 fd2c 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    4b60:	48b6      	ldr	r0, [pc, #728]	; (4e3c <menu()+0x874>)
    4b62:	f003 fd29 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    4b66:	48b5      	ldr	r0, [pc, #724]	; (4e3c <menu()+0x874>)
    4b68:	f003 fd26 	bl	85b8 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4b6c:	2111      	movs	r1, #17
    4b6e:	48b4      	ldr	r0, [pc, #720]	; (4e40 <menu()+0x878>)
    4b70:	f006 f9cc 	bl	af0c <usb_serial_write>
    4b74:	48b1      	ldr	r0, [pc, #708]	; (4e3c <menu()+0x874>)
    4b76:	f003 fd1f 	bl	85b8 <Print::println()>
    4b7a:	2128      	movs	r1, #40	; 0x28
    4b7c:	48b1      	ldr	r0, [pc, #708]	; (4e44 <menu()+0x87c>)
    4b7e:	f006 f9c5 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.print(settings.ChargeVsetpoint * 1000, 0);
    4b82:	6968      	ldr	r0, [r5, #20]
    4b84:	49b0      	ldr	r1, [pc, #704]	; (4e48 <menu()+0x880>)
    4b86:	f007 f8a1 	bl	bccc <__aeabi_fmul>
    4b8a:	f006 fe7b 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4b8e:	9600      	str	r6, [sp, #0]
    4b90:	4602      	mov	r2, r0
    4b92:	460b      	mov	r3, r1
    4b94:	48a9      	ldr	r0, [pc, #676]	; (4e3c <menu()+0x874>)
    4b96:	f003 fd33 	bl	8600 <Print::printFloat(double, unsigned char)>
    4b9a:	2102      	movs	r1, #2
    4b9c:	48ab      	ldr	r0, [pc, #684]	; (4e4c <menu()+0x884>)
    4b9e:	f006 f9b5 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4ba2:	48a6      	ldr	r0, [pc, #664]	; (4e3c <menu()+0x874>)
    4ba4:	f003 fd08 	bl	85b8 <Print::println()>
    4ba8:	2116      	movs	r1, #22
    4baa:	48a9      	ldr	r0, [pc, #676]	; (4e50 <menu()+0x888>)
    4bac:	f006 f9ae 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.print(settings.ChargeHys * 1000, 0);
    4bb0:	69e8      	ldr	r0, [r5, #28]
    4bb2:	49a5      	ldr	r1, [pc, #660]	; (4e48 <menu()+0x880>)
    4bb4:	f007 f88a 	bl	bccc <__aeabi_fmul>
    4bb8:	f006 fe64 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4bbc:	9600      	str	r6, [sp, #0]
    4bbe:	460b      	mov	r3, r1
    4bc0:	4602      	mov	r2, r0
    4bc2:	489e      	ldr	r0, [pc, #632]	; (4e3c <menu()+0x874>)
    4bc4:	f003 fd1c 	bl	8600 <Print::printFloat(double, unsigned char)>
    4bc8:	2102      	movs	r1, #2
    4bca:	48a0      	ldr	r0, [pc, #640]	; (4e4c <menu()+0x884>)
    4bcc:	f006 f99e 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4bd0:	489a      	ldr	r0, [pc, #616]	; (4e3c <menu()+0x874>)
    4bd2:	f003 fcf1 	bl	85b8 <Print::println()>
        if (settings.chargertype > 0) {
    4bd6:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
    4bda:	2b00      	cmp	r3, #0
    4bdc:	dd32      	ble.n	4c44 <menu()+0x67c>
    4bde:	211d      	movs	r1, #29
    4be0:	489c      	ldr	r0, [pc, #624]	; (4e54 <menu()+0x88c>)
    4be2:	f006 f993 	bl	af0c <usb_serial_write>
          SERIALCONSOLE.print(settings.chargecurrentmax * 0.1);
    4be6:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    4be8:	f007 f81c 	bl	bc24 <__aeabi_i2f>
    4bec:	499a      	ldr	r1, [pc, #616]	; (4e58 <menu()+0x890>)
    4bee:	f007 f86d 	bl	bccc <__aeabi_fmul>
    4bf2:	f006 fe47 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4bf6:	2602      	movs	r6, #2
    4bf8:	4602      	mov	r2, r0
    4bfa:	460b      	mov	r3, r1
    4bfc:	488f      	ldr	r0, [pc, #572]	; (4e3c <menu()+0x874>)
    4bfe:	9600      	str	r6, [sp, #0]
    4c00:	f003 fcfe 	bl	8600 <Print::printFloat(double, unsigned char)>
    4c04:	2101      	movs	r1, #1
    4c06:	4895      	ldr	r0, [pc, #596]	; (4e5c <menu()+0x894>)
    4c08:	f006 f980 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4c0c:	488b      	ldr	r0, [pc, #556]	; (4e3c <menu()+0x874>)
    4c0e:	f003 fcd3 	bl	85b8 <Print::println()>
    4c12:	211f      	movs	r1, #31
    4c14:	4892      	ldr	r0, [pc, #584]	; (4e60 <menu()+0x898>)
    4c16:	f006 f979 	bl	af0c <usb_serial_write>
          SERIALCONSOLE.print(settings.chargecurrentend * 0.1);
    4c1a:	6e28      	ldr	r0, [r5, #96]	; 0x60
    4c1c:	f007 f802 	bl	bc24 <__aeabi_i2f>
    4c20:	498d      	ldr	r1, [pc, #564]	; (4e58 <menu()+0x890>)
    4c22:	f007 f853 	bl	bccc <__aeabi_fmul>
    4c26:	f006 fe2d 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4c2a:	9600      	str	r6, [sp, #0]
    4c2c:	4602      	mov	r2, r0
    4c2e:	460b      	mov	r3, r1
    4c30:	4882      	ldr	r0, [pc, #520]	; (4e3c <menu()+0x874>)
    4c32:	f003 fce5 	bl	8600 <Print::printFloat(double, unsigned char)>
    4c36:	4889      	ldr	r0, [pc, #548]	; (4e5c <menu()+0x894>)
    4c38:	2101      	movs	r1, #1
    4c3a:	f006 f967 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4c3e:	487f      	ldr	r0, [pc, #508]	; (4e3c <menu()+0x874>)
    4c40:	f003 fcba 	bl	85b8 <Print::println()>
    4c44:	4887      	ldr	r0, [pc, #540]	; (4e64 <menu()+0x89c>)
    4c46:	2111      	movs	r1, #17
    4c48:	f006 f960 	bl	af0c <usb_serial_write>
        switch (settings.chargertype) {
    4c4c:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
    4c50:	2b06      	cmp	r3, #6
    4c52:	f200 83e7 	bhi.w	5424 <menu()+0xe5c>
    4c56:	e8df f013 	tbh	[pc, r3, lsl #1]
    4c5a:	042e      	.short	0x042e
    4c5c:	04290433 	.word	0x04290433
    4c60:	041f0424 	.word	0x041f0424
    4c64:	03e1041a 	.word	0x03e1041a
        virtual int available() { return usb_serial_available(); }
    4c68:	f006 f91e 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    4c6c:	2800      	cmp	r0, #0
    4c6e:	f77f af30 	ble.w	4ad2 <menu()+0x50a>
          settings.chargecurrentend = Serial.parseInt() * 10;
    4c72:	4872      	ldr	r0, [pc, #456]	; (4e3c <menu()+0x874>)
    4c74:	4d7c      	ldr	r5, [pc, #496]	; (4e68 <menu()+0x8a0>)
    4c76:	f003 fdff 	bl	8878 <Stream::parseInt()>
    4c7a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4c7e:	0040      	lsls	r0, r0, #1
          menuload = 1;
    4c80:	2201      	movs	r2, #1
          incomingByte = 'e';
    4c82:	2365      	movs	r3, #101	; 0x65
          settings.chargecurrentend = Serial.parseInt() * 10;
    4c84:	6628      	str	r0, [r5, #96]	; 0x60
          menuload = 1;
    4c86:	6022      	str	r2, [r4, #0]
          incomingByte = 'e';
    4c88:	6033      	str	r3, [r6, #0]
    switch (incomingByte) {
    4c8a:	e75b      	b.n	4b44 <menu()+0x57c>
        if (settings.ChargerDirect == 1) {
    4c8c:	4d76      	ldr	r5, [pc, #472]	; (4e68 <menu()+0x8a0>)
    4c8e:	f895 30c0 	ldrb.w	r3, [r5, #192]	; 0xc0
          menuload = 1;
    4c92:	2201      	movs	r2, #1
        if (settings.ChargerDirect == 1) {
    4c94:	4053      	eors	r3, r2
          menuload = 1;
    4c96:	6022      	str	r2, [r4, #0]
          incomingByte = 'e';
    4c98:	2265      	movs	r2, #101	; 0x65
    4c9a:	f885 30c0 	strb.w	r3, [r5, #192]	; 0xc0
    4c9e:	6032      	str	r2, [r6, #0]
    switch (incomingByte) {
    4ca0:	e750      	b.n	4b44 <menu()+0x57c>
    4ca2:	f006 f901 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    4ca6:	2800      	cmp	r0, #0
    4ca8:	f77f af13 	ble.w	4ad2 <menu()+0x50a>
          settings.ChargeHys = Serial.parseInt();
    4cac:	4863      	ldr	r0, [pc, #396]	; (4e3c <menu()+0x874>)
          settings.ChargeHys = settings.ChargeHys / 1000;
    4cae:	4d6e      	ldr	r5, [pc, #440]	; (4e68 <menu()+0x8a0>)
          settings.ChargeHys = Serial.parseInt();
    4cb0:	f003 fde2 	bl	8878 <Stream::parseInt()>
    4cb4:	f006 ffb6 	bl	bc24 <__aeabi_i2f>
          settings.ChargeHys = settings.ChargeHys / 1000;
    4cb8:	4963      	ldr	r1, [pc, #396]	; (4e48 <menu()+0x880>)
    4cba:	f007 f8bb 	bl	be34 <__aeabi_fdiv>
          menuload = 1;
    4cbe:	2301      	movs	r3, #1
    4cc0:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    4cc2:	2365      	movs	r3, #101	; 0x65
          settings.ChargeHys = settings.ChargeHys / 1000;
    4cc4:	61e8      	str	r0, [r5, #28]
          incomingByte = 'e';
    4cc6:	6033      	str	r3, [r6, #0]
    switch (incomingByte) {
    4cc8:	e73c      	b.n	4b44 <menu()+0x57c>
    4cca:	f006 f8ed 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    4cce:	2800      	cmp	r0, #0
    4cd0:	f77f aeff 	ble.w	4ad2 <menu()+0x50a>
          settings.chargecurrentmax = Serial.parseInt() * 10;
    4cd4:	4859      	ldr	r0, [pc, #356]	; (4e3c <menu()+0x874>)
    4cd6:	4d64      	ldr	r5, [pc, #400]	; (4e68 <menu()+0x8a0>)
    4cd8:	f003 fdce 	bl	8878 <Stream::parseInt()>
    4cdc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4ce0:	0040      	lsls	r0, r0, #1
          menuload = 1;
    4ce2:	2201      	movs	r2, #1
          incomingByte = 'e';
    4ce4:	2365      	movs	r3, #101	; 0x65
          settings.chargecurrentmax = Serial.parseInt() * 10;
    4ce6:	65e8      	str	r0, [r5, #92]	; 0x5c
          menuload = 1;
    4ce8:	6022      	str	r2, [r4, #0]
          incomingByte = 'e';
    4cea:	6033      	str	r3, [r6, #0]
    switch (incomingByte) {
    4cec:	e72a      	b.n	4b44 <menu()+0x57c>
          settings.IgnoreVolt = Serial.parseInt();
    4cee:	4853      	ldr	r0, [pc, #332]	; (4e3c <menu()+0x874>)
          settings.IgnoreVolt = settings.IgnoreVolt * 0.001;
    4cf0:	4d5d      	ldr	r5, [pc, #372]	; (4e68 <menu()+0x8a0>)
          settings.IgnoreVolt = Serial.parseInt();
    4cf2:	f003 fdc1 	bl	8878 <Stream::parseInt()>
    4cf6:	f006 ff95 	bl	bc24 <__aeabi_i2f>
          settings.IgnoreVolt = settings.IgnoreVolt * 0.001;
    4cfa:	495c      	ldr	r1, [pc, #368]	; (4e6c <menu()+0x8a4>)
    4cfc:	f006 ffe6 	bl	bccc <__aeabi_fmul>
          bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt);
    4d00:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
          settings.IgnoreVolt = settings.IgnoreVolt * 0.001;
    4d04:	6468      	str	r0, [r5, #68]	; 0x44
    4d06:	4602      	mov	r2, r0
    4d08:	e64d      	b.n	49a6 <menu()+0x3de>
          settings.IgnoreTemp = Serial.parseInt();
    4d0a:	484c      	ldr	r0, [pc, #304]	; (4e3c <menu()+0x874>)
    4d0c:	4d56      	ldr	r5, [pc, #344]	; (4e68 <menu()+0x8a0>)
    4d0e:	f003 fdb3 	bl	8878 <Stream::parseInt()>
    4d12:	b2c1      	uxtb	r1, r0
    4d14:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    4d18:	e63f      	b.n	499a <menu()+0x3d2>
          settings.WarnToff = Serial.parseInt();
    4d1a:	4848      	ldr	r0, [pc, #288]	; (4e3c <menu()+0x874>)
    4d1c:	4d52      	ldr	r5, [pc, #328]	; (4e68 <menu()+0x8a0>)
    4d1e:	f003 fdab 	bl	8878 <Stream::parseInt()>
    4d22:	f006 ff7f 	bl	bc24 <__aeabi_i2f>
          menuload = 1;
    4d26:	2301      	movs	r3, #1
    4d28:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    4d2a:	2361      	movs	r3, #97	; 0x61
          settings.WarnToff = Serial.parseInt();
    4d2c:	63a8      	str	r0, [r5, #56]	; 0x38
          incomingByte = 'a';
    4d2e:	6033      	str	r3, [r6, #0]
    switch (incomingByte) {
    4d30:	e001      	b.n	4d36 <menu()+0x76e>
        virtual int read() { return usb_serial_getchar(); }
    4d32:	f006 f87d 	bl	ae30 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    4d36:	f006 f8b7 	bl	aea8 <usb_serial_available>
        while (Serial.available()) {
    4d3a:	4606      	mov	r6, r0
    4d3c:	2800      	cmp	r0, #0
    4d3e:	d1f8      	bne.n	4d32 <menu()+0x76a>
        SERIALCONSOLE.println();
    4d40:	483e      	ldr	r0, [pc, #248]	; (4e3c <menu()+0x874>)
    4d42:	f003 fc39 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    4d46:	483d      	ldr	r0, [pc, #244]	; (4e3c <menu()+0x874>)
    4d48:	f003 fc36 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    4d4c:	483b      	ldr	r0, [pc, #236]	; (4e3c <menu()+0x874>)
    4d4e:	f003 fc33 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    4d52:	483a      	ldr	r0, [pc, #232]	; (4e3c <menu()+0x874>)
    4d54:	f003 fc30 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    4d58:	4838      	ldr	r0, [pc, #224]	; (4e3c <menu()+0x874>)
    4d5a:	f003 fc2d 	bl	85b8 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4d5e:	211f      	movs	r1, #31
    4d60:	4843      	ldr	r0, [pc, #268]	; (4e70 <menu()+0x8a8>)
    4d62:	f006 f8d3 	bl	af0c <usb_serial_write>
    4d66:	4835      	ldr	r0, [pc, #212]	; (4e3c <menu()+0x874>)
    4d68:	f003 fc26 	bl	85b8 <Print::println()>
    4d6c:	211c      	movs	r1, #28
    4d6e:	4841      	ldr	r0, [pc, #260]	; (4e74 <menu()+0x8ac>)
    4d70:	f006 f8cc 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.print(settings.WarnOff * 1000, 0);
    4d74:	6a68      	ldr	r0, [r5, #36]	; 0x24
    4d76:	4934      	ldr	r1, [pc, #208]	; (4e48 <menu()+0x880>)
    4d78:	f006 ffa8 	bl	bccc <__aeabi_fmul>
    4d7c:	f006 fd82 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4d80:	9600      	str	r6, [sp, #0]
    4d82:	4602      	mov	r2, r0
    4d84:	460b      	mov	r3, r1
    4d86:	482d      	ldr	r0, [pc, #180]	; (4e3c <menu()+0x874>)
    4d88:	f003 fc3a 	bl	8600 <Print::printFloat(double, unsigned char)>
    4d8c:	2102      	movs	r1, #2
    4d8e:	482f      	ldr	r0, [pc, #188]	; (4e4c <menu()+0x884>)
    4d90:	f006 f8bc 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4d94:	4829      	ldr	r0, [pc, #164]	; (4e3c <menu()+0x874>)
    4d96:	f003 fc0f 	bl	85b8 <Print::println()>
    4d9a:	2123      	movs	r1, #35	; 0x23
    4d9c:	4836      	ldr	r0, [pc, #216]	; (4e78 <menu()+0x8b0>)
    4d9e:	f006 f8b5 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.print(settings.CellGap * 1000, 0);
    4da2:	6be8      	ldr	r0, [r5, #60]	; 0x3c
    4da4:	4928      	ldr	r1, [pc, #160]	; (4e48 <menu()+0x880>)
    4da6:	f006 ff91 	bl	bccc <__aeabi_fmul>
    4daa:	f006 fd6b 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4dae:	9600      	str	r6, [sp, #0]
    4db0:	4602      	mov	r2, r0
    4db2:	460b      	mov	r3, r1
    4db4:	4821      	ldr	r0, [pc, #132]	; (4e3c <menu()+0x874>)
    4db6:	f003 fc23 	bl	8600 <Print::printFloat(double, unsigned char)>
    4dba:	2102      	movs	r1, #2
    4dbc:	4823      	ldr	r0, [pc, #140]	; (4e4c <menu()+0x884>)
    4dbe:	f006 f8a5 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4dc2:	481e      	ldr	r0, [pc, #120]	; (4e3c <menu()+0x874>)
    4dc4:	f003 fbf8 	bl	85b8 <Print::println()>
    4dc8:	2119      	movs	r1, #25
    4dca:	482c      	ldr	r0, [pc, #176]	; (4e7c <menu()+0x8b4>)
    4dcc:	f006 f89e 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.print(settings.WarnToff);
    4dd0:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    4dd2:	f006 fd57 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4dd6:	2602      	movs	r6, #2
    4dd8:	460b      	mov	r3, r1
    4dda:	4602      	mov	r2, r0
    4ddc:	9600      	str	r6, [sp, #0]
    4dde:	4817      	ldr	r0, [pc, #92]	; (4e3c <menu()+0x874>)
    4de0:	f003 fc0e 	bl	8600 <Print::printFloat(double, unsigned char)>
    4de4:	4631      	mov	r1, r6
    4de6:	4826      	ldr	r0, [pc, #152]	; (4e80 <menu()+0x8b8>)
    4de8:	f006 f890 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4dec:	4813      	ldr	r0, [pc, #76]	; (4e3c <menu()+0x874>)
    4dee:	f003 fbe3 	bl	85b8 <Print::println()>
    4df2:	2122      	movs	r1, #34	; 0x22
    4df4:	4823      	ldr	r0, [pc, #140]	; (4e84 <menu()+0x8bc>)
    4df6:	f006 f889 	bl	af0c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4dfa:	f8b5 10ce 	ldrh.w	r1, [r5, #206]	; 0xce
    4dfe:	480f      	ldr	r0, [pc, #60]	; (4e3c <menu()+0x874>)
    4e00:	f003 fbd2 	bl	85a8 <Print::print(long)>
    4e04:	2103      	movs	r1, #3
    4e06:	4820      	ldr	r0, [pc, #128]	; (4e88 <menu()+0x8c0>)
    4e08:	f006 f880 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4e0c:	480b      	ldr	r0, [pc, #44]	; (4e3c <menu()+0x874>)
    4e0e:	f003 fbd3 	bl	85b8 <Print::println()>
        menuload = 7;
    4e12:	2307      	movs	r3, #7
    4e14:	6023      	str	r3, [r4, #0]
        break;
    4e16:	e43c      	b.n	4692 <menu()+0xca>
          SetSerialCan(Serial.parseInt());
    4e18:	4808      	ldr	r0, [pc, #32]	; (4e3c <menu()+0x874>)
    4e1a:	f003 fd2d 	bl	8878 <Stream::parseInt()>
    4e1e:	f7ff f917 	bl	4050 <SetSerialCan(int)>
    4e22:	e57e      	b.n	4922 <menu()+0x35a>
          settings.DCDCreq = Serial.parseInt();
    4e24:	4805      	ldr	r0, [pc, #20]	; (4e3c <menu()+0x874>)
    4e26:	4d10      	ldr	r5, [pc, #64]	; (4e68 <menu()+0x8a0>)
    4e28:	f003 fd26 	bl	8878 <Stream::parseInt()>
          menuload = 1;
    4e2c:	2301      	movs	r3, #1
    4e2e:	6023      	str	r3, [r4, #0]
          incomingByte = 'x';
    4e30:	2378      	movs	r3, #120	; 0x78
          settings.DCDCreq = Serial.parseInt();
    4e32:	f885 00cc 	strb.w	r0, [r5, #204]	; 0xcc
          incomingByte = 'x';
    4e36:	6033      	str	r3, [r6, #0]
  if (menuload == 1) {
    4e38:	e02a      	b.n	4e90 <menu()+0x8c8>
    4e3a:	bf00      	nop
    4e3c:	1fff880c 	.word	0x1fff880c
    4e40:	00013d38 	.word	0x00013d38
    4e44:	000134b4 	.word	0x000134b4
    4e48:	447a0000 	.word	0x447a0000
    4e4c:	000134b0 	.word	0x000134b0
    4e50:	000134e0 	.word	0x000134e0
    4e54:	000134f8 	.word	0x000134f8
    4e58:	3dcccccd 	.word	0x3dcccccd
    4e5c:	000139fc 	.word	0x000139fc
    4e60:	00013518 	.word	0x00013518
    4e64:	00013538 	.word	0x00013538
    4e68:	1fffb204 	.word	0x1fffb204
    4e6c:	3a83126f 	.word	0x3a83126f
    4e70:	00013618 	.word	0x00013618
    4e74:	00013638 	.word	0x00013638
    4e78:	00013658 	.word	0x00013658
    4e7c:	0001367c 	.word	0x0001367c
    4e80:	00013698 	.word	0x00013698
    4e84:	0001369c 	.word	0x0001369c
    4e88:	000136c0 	.word	0x000136c0
        virtual int read() { return usb_serial_getchar(); }
    4e8c:	f005 ffd0 	bl	ae30 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    4e90:	f006 f80a 	bl	aea8 <usb_serial_available>
        while (Serial.available()) {
    4e94:	4606      	mov	r6, r0
    4e96:	2800      	cmp	r0, #0
    4e98:	d1f8      	bne.n	4e8c <menu()+0x8c4>
        SERIALCONSOLE.println();
    4e9a:	487b      	ldr	r0, [pc, #492]	; (5088 <menu()+0xac0>)
    4e9c:	f003 fb8c 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    4ea0:	4879      	ldr	r0, [pc, #484]	; (5088 <menu()+0xac0>)
    4ea2:	f003 fb89 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    4ea6:	4878      	ldr	r0, [pc, #480]	; (5088 <menu()+0xac0>)
    4ea8:	f003 fb86 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    4eac:	4876      	ldr	r0, [pc, #472]	; (5088 <menu()+0xac0>)
    4eae:	f003 fb83 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    4eb2:	4875      	ldr	r0, [pc, #468]	; (5088 <menu()+0xac0>)
    4eb4:	f003 fb80 	bl	85b8 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4eb8:	2112      	movs	r1, #18
    4eba:	4874      	ldr	r0, [pc, #464]	; (508c <menu()+0xac4>)
    4ebc:	f006 f826 	bl	af0c <usb_serial_write>
    4ec0:	4871      	ldr	r0, [pc, #452]	; (5088 <menu()+0xac0>)
    4ec2:	f003 fb79 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    4ec6:	4870      	ldr	r0, [pc, #448]	; (5088 <menu()+0xac0>)
    4ec8:	f003 fb76 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    4ecc:	486e      	ldr	r0, [pc, #440]	; (5088 <menu()+0xac0>)
    4ece:	f003 fb73 	bl	85b8 <Print::println()>
    4ed2:	486f      	ldr	r0, [pc, #444]	; (5090 <menu()+0xac8>)
    4ed4:	2119      	movs	r1, #25
    4ed6:	f006 f819 	bl	af0c <usb_serial_write>
        if (settings.SerialCan == 0) {
    4eda:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
    4ede:	2b00      	cmp	r3, #0
    4ee0:	f040 87b2 	bne.w	5e48 <menu()+0x1880>
    4ee4:	486b      	ldr	r0, [pc, #428]	; (5094 <menu()+0xacc>)
    4ee6:	2104      	movs	r1, #4
    4ee8:	f006 f810 	bl	af0c <usb_serial_write>
    4eec:	4866      	ldr	r0, [pc, #408]	; (5088 <menu()+0xac0>)
    4eee:	f003 fb63 	bl	85b8 <Print::println()>
    4ef2:	2113      	movs	r1, #19
    4ef4:	4868      	ldr	r0, [pc, #416]	; (5098 <menu()+0xad0>)
    4ef6:	f006 f809 	bl	af0c <usb_serial_write>
    4efa:	4863      	ldr	r0, [pc, #396]	; (5088 <menu()+0xac0>)
    4efc:	f003 fb5c 	bl	85b8 <Print::println()>
        menuload = 9;
    4f00:	2309      	movs	r3, #9
    4f02:	6023      	str	r3, [r4, #0]
        break;
    4f04:	f7ff bbc5 	b.w	4692 <menu()+0xca>
        menuload = 1;
    4f08:	2301      	movs	r3, #1
    4f0a:	6023      	str	r3, [r4, #0]
        virtual int available() { return usb_serial_available(); }
    4f0c:	f005 ffcc 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    4f10:	2800      	cmp	r0, #0
    4f12:	f301 8052 	bgt.w	5fba <menu()+0x19f2>
        if (debugdigits > 4) {
    4f16:	4b61      	ldr	r3, [pc, #388]	; (509c <menu()+0xad4>)
    4f18:	6818      	ldr	r0, [r3, #0]
    4f1a:	2804      	cmp	r0, #4
          debugdigits = 2;
    4f1c:	bfc4      	itt	gt
    4f1e:	2202      	movgt	r2, #2
    4f20:	601a      	strgt	r2, [r3, #0]
        incomingByte = 'd';
    4f22:	2264      	movs	r2, #100	; 0x64
  if (menuload == 2) {
    4f24:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'd';
    4f26:	6032      	str	r2, [r6, #0]
  if (menuload == 9) {
    4f28:	2b09      	cmp	r3, #9
    4f2a:	d005      	beq.n	4f38 <menu()+0x970>
  if (menuload == 8) {
    4f2c:	2b08      	cmp	r3, #8
    4f2e:	f001 804b 	beq.w	5fc8 <menu()+0x1a00>
  if (menuload == 7) {
    4f32:	2b07      	cmp	r3, #7
    4f34:	f041 807e 	bne.w	6034 <menu()+0x1a6c>
  if (menuload == 9) {
    4f38:	2064      	movs	r0, #100	; 0x64
  if (menuload == 5) {
    4f3a:	f7ff bba1 	b.w	4680 <menu()+0xb8>
        settings.disp = !settings.disp;
    4f3e:	4d58      	ldr	r5, [pc, #352]	; (50a0 <menu()+0xad8>)
    4f40:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
        menuload = 1;
    4f44:	2201      	movs	r2, #1
        incomingByte = 'd';
    4f46:	2064      	movs	r0, #100	; 0x64
        settings.disp = !settings.disp;
    4f48:	4053      	eors	r3, r2
        menuload = 1;
    4f4a:	6022      	str	r2, [r4, #0]
        settings.disp = !settings.disp;
    4f4c:	f885 30c1 	strb.w	r3, [r5, #193]	; 0xc1
        incomingByte = 'd';
    4f50:	6030      	str	r0, [r6, #0]
    switch (incomingByte) {
    4f52:	f1a0 0352 	sub.w	r3, r0, #82	; 0x52
    4f56:	2b26      	cmp	r3, #38	; 0x26
    4f58:	f200 8169 	bhi.w	522e <menu()+0xc66>
    4f5c:	e8df f013 	tbh	[pc, r3, lsl #1]
    4f60:	016702b5 	.word	0x016702b5
    4f64:	01670167 	.word	0x01670167
    4f68:	01670167 	.word	0x01670167
    4f6c:	01670167 	.word	0x01670167
    4f70:	01670167 	.word	0x01670167
    4f74:	01670167 	.word	0x01670167
    4f78:	01670167 	.word	0x01670167
    4f7c:	02cc0167 	.word	0x02cc0167
    4f80:	002902ce 	.word	0x002902ce
    4f84:	087e00b2 	.word	0x087e00b2
    4f88:	01670167 	.word	0x01670167
    4f8c:	08830167 	.word	0x08830167
    4f90:	08810167 	.word	0x08810167
    4f94:	01670167 	.word	0x01670167
    4f98:	01670167 	.word	0x01670167
    4f9c:	02bc0167 	.word	0x02bc0167
    4fa0:	01670167 	.word	0x01670167
    4fa4:	01670167 	.word	0x01670167
    4fa8:	01670167 	.word	0x01670167
    4fac:	0877      	.short	0x0877
        virtual int read() { return usb_serial_getchar(); }
    4fae:	f005 ff3f 	bl	ae30 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    4fb2:	f005 ff79 	bl	aea8 <usb_serial_available>
        while (Serial.available()) {
    4fb6:	2800      	cmp	r0, #0
    4fb8:	d1f9      	bne.n	4fae <menu()+0x9e6>
        SERIALCONSOLE.println();
    4fba:	4833      	ldr	r0, [pc, #204]	; (5088 <menu()+0xac0>)
        switch (settings.cursens) {
    4fbc:	4d38      	ldr	r5, [pc, #224]	; (50a0 <menu()+0xad8>)
        SERIALCONSOLE.println();
    4fbe:	f003 fafb 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    4fc2:	4831      	ldr	r0, [pc, #196]	; (5088 <menu()+0xac0>)
    4fc4:	f003 faf8 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    4fc8:	482f      	ldr	r0, [pc, #188]	; (5088 <menu()+0xac0>)
    4fca:	f003 faf5 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    4fce:	482e      	ldr	r0, [pc, #184]	; (5088 <menu()+0xac0>)
    4fd0:	f003 faf2 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    4fd4:	482c      	ldr	r0, [pc, #176]	; (5088 <menu()+0xac0>)
    4fd6:	f003 faef 	bl	85b8 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4fda:	211f      	movs	r1, #31
    4fdc:	4831      	ldr	r0, [pc, #196]	; (50a4 <menu()+0xadc>)
    4fde:	f005 ff95 	bl	af0c <usb_serial_write>
    4fe2:	4829      	ldr	r0, [pc, #164]	; (5088 <menu()+0xac0>)
    4fe4:	f003 fae8 	bl	85b8 <Print::println()>
    4fe8:	211e      	movs	r1, #30
    4fea:	482f      	ldr	r0, [pc, #188]	; (50a8 <menu()+0xae0>)
    4fec:	f005 ff8e 	bl	af0c <usb_serial_write>
    4ff0:	4825      	ldr	r0, [pc, #148]	; (5088 <menu()+0xac0>)
    4ff2:	f003 fae1 	bl	85b8 <Print::println()>
    4ff6:	482d      	ldr	r0, [pc, #180]	; (50ac <menu()+0xae4>)
    4ff8:	211a      	movs	r1, #26
    4ffa:	f005 ff87 	bl	af0c <usb_serial_write>
        switch (settings.cursens) {
    4ffe:	6feb      	ldr	r3, [r5, #124]	; 0x7c
    5000:	2b02      	cmp	r3, #2
    5002:	f001 800e 	beq.w	6022 <menu()+0x1a5a>
    5006:	2b03      	cmp	r3, #3
    5008:	f001 8002 	beq.w	6010 <menu()+0x1a48>
    500c:	2b01      	cmp	r3, #1
    500e:	f000 87f6 	beq.w	5ffe <menu()+0x1a36>
    5012:	4827      	ldr	r0, [pc, #156]	; (50b0 <menu()+0xae8>)
    5014:	2109      	movs	r1, #9
    5016:	f005 ff79 	bl	af0c <usb_serial_write>
    501a:	481b      	ldr	r0, [pc, #108]	; (5088 <menu()+0xac0>)
    501c:	f003 facc 	bl	85b8 <Print::println()>
    5020:	2114      	movs	r1, #20
    5022:	4824      	ldr	r0, [pc, #144]	; (50b4 <menu()+0xaec>)
    5024:	f005 ff72 	bl	af0c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5028:	6fa9      	ldr	r1, [r5, #120]	; 0x78
    502a:	4817      	ldr	r0, [pc, #92]	; (5088 <menu()+0xac0>)
    502c:	f003 fabc 	bl	85a8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    5030:	4815      	ldr	r0, [pc, #84]	; (5088 <menu()+0xac0>)
    5032:	f003 fac1 	bl	85b8 <Print::println()>
    5036:	211c      	movs	r1, #28
    5038:	481f      	ldr	r0, [pc, #124]	; (50b8 <menu()+0xaf0>)
    503a:	f005 ff67 	bl	af0c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    503e:	f8d5 1080 	ldr.w	r1, [r5, #128]	; 0x80
    5042:	4811      	ldr	r0, [pc, #68]	; (5088 <menu()+0xac0>)
    5044:	f003 fab0 	bl	85a8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    5048:	480f      	ldr	r0, [pc, #60]	; (5088 <menu()+0xac0>)
    504a:	f003 fab5 	bl	85b8 <Print::println()>
    504e:	211c      	movs	r1, #28
    5050:	481a      	ldr	r0, [pc, #104]	; (50bc <menu()+0xaf4>)
    5052:	f005 ff5b 	bl	af0c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5056:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
    505a:	480b      	ldr	r0, [pc, #44]	; (5088 <menu()+0xac0>)
    505c:	f003 faa4 	bl	85a8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    5060:	4809      	ldr	r0, [pc, #36]	; (5088 <menu()+0xac0>)
    5062:	f003 faa9 	bl	85b8 <Print::println()>
        if (settings.cursens == Analoguesing || settings.cursens == Analoguedual) {
    5066:	6fee      	ldr	r6, [r5, #124]	; 0x7c
    5068:	f026 0602 	bic.w	r6, r6, #2
    506c:	2e01      	cmp	r6, #1
    506e:	f000 873a 	beq.w	5ee6 <menu()+0x191e>
    5072:	2113      	movs	r1, #19
    5074:	4808      	ldr	r0, [pc, #32]	; (5098 <menu()+0xad0>)
    5076:	f005 ff49 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    507a:	4803      	ldr	r0, [pc, #12]	; (5088 <menu()+0xac0>)
    507c:	f003 fa9c 	bl	85b8 <Print::println()>
        menuload = 2;
    5080:	2302      	movs	r3, #2
    5082:	6023      	str	r3, [r4, #0]
        break;
    5084:	f7ff bb05 	b.w	4692 <menu()+0xca>
    5088:	1fff880c 	.word	0x1fff880c
    508c:	00013db0 	.word	0x00013db0
    5090:	000133c8 	.word	0x000133c8
    5094:	000133e4 	.word	0x000133e4
    5098:	00013454 	.word	0x00013454
    509c:	1fff8748 	.word	0x1fff8748
    50a0:	1fffb204 	.word	0x1fffb204
    50a4:	000138bc 	.word	0x000138bc
    50a8:	000138dc 	.word	0x000138dc
    50ac:	000138fc 	.word	0x000138fc
    50b0:	00013974 	.word	0x00013974
    50b4:	00013980 	.word	0x00013980
    50b8:	00013998 	.word	0x00013998
    50bc:	000139b8 	.word	0x000139b8
        virtual int read() { return usb_serial_getchar(); }
    50c0:	f005 feb6 	bl	ae30 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    50c4:	f005 fef0 	bl	aea8 <usb_serial_available>
        while (Serial.available()) {
    50c8:	2800      	cmp	r0, #0
    50ca:	d1f9      	bne.n	50c0 <menu()+0xaf8>
        SERIALCONSOLE.println();
    50cc:	48b1      	ldr	r0, [pc, #708]	; (5394 <menu()+0xdcc>)
        SERIALCONSOLE.println(settings.ESSmode);
    50ce:	4db2      	ldr	r5, [pc, #712]	; (5398 <menu()+0xdd0>)
        SERIALCONSOLE.println();
    50d0:	f003 fa72 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    50d4:	48af      	ldr	r0, [pc, #700]	; (5394 <menu()+0xdcc>)
    50d6:	f003 fa6f 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    50da:	48ae      	ldr	r0, [pc, #696]	; (5394 <menu()+0xdcc>)
    50dc:	f003 fa6c 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    50e0:	48ac      	ldr	r0, [pc, #688]	; (5394 <menu()+0xdcc>)
    50e2:	f003 fa69 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    50e6:	48ab      	ldr	r0, [pc, #684]	; (5394 <menu()+0xdcc>)
    50e8:	f003 fa66 	bl	85b8 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    50ec:	2113      	movs	r1, #19
    50ee:	48ab      	ldr	r0, [pc, #684]	; (539c <menu()+0xdd4>)
    50f0:	f005 ff0c 	bl	af0c <usb_serial_write>
    50f4:	48a7      	ldr	r0, [pc, #668]	; (5394 <menu()+0xdcc>)
    50f6:	f003 fa5f 	bl	85b8 <Print::println()>
    50fa:	210d      	movs	r1, #13
    50fc:	48a8      	ldr	r0, [pc, #672]	; (53a0 <menu()+0xdd8>)
    50fe:	f005 ff05 	bl	af0c <usb_serial_write>
    5102:	48a4      	ldr	r0, [pc, #656]	; (5394 <menu()+0xdcc>)
    5104:	f003 fa58 	bl	85b8 <Print::println()>
    5108:	210f      	movs	r1, #15
    510a:	48a6      	ldr	r0, [pc, #664]	; (53a4 <menu()+0xddc>)
    510c:	f005 fefe 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.println(candebug);
    5110:	4ba5      	ldr	r3, [pc, #660]	; (53a8 <menu()+0xde0>)
	size_t print(int n)				{ return print((long)n); }
    5112:	48a0      	ldr	r0, [pc, #640]	; (5394 <menu()+0xdcc>)
    5114:	6819      	ldr	r1, [r3, #0]
    5116:	f003 fa47 	bl	85a8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    511a:	489e      	ldr	r0, [pc, #632]	; (5394 <menu()+0xdcc>)
    511c:	f003 fa4c 	bl	85b8 <Print::println()>
    5120:	2113      	movs	r1, #19
    5122:	48a2      	ldr	r0, [pc, #648]	; (53ac <menu()+0xde4>)
    5124:	f005 fef2 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.println(debugCur);
    5128:	4ba1      	ldr	r3, [pc, #644]	; (53b0 <menu()+0xde8>)
	size_t print(int n)				{ return print((long)n); }
    512a:	489a      	ldr	r0, [pc, #616]	; (5394 <menu()+0xdcc>)
    512c:	6819      	ldr	r1, [r3, #0]
    512e:	f003 fa3b 	bl	85a8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    5132:	4898      	ldr	r0, [pc, #608]	; (5394 <menu()+0xdcc>)
    5134:	f003 fa40 	bl	85b8 <Print::println()>
    5138:	2112      	movs	r1, #18
    513a:	489e      	ldr	r0, [pc, #632]	; (53b4 <menu()+0xdec>)
    513c:	f005 fee6 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.println(outputcheck);
    5140:	4b9d      	ldr	r3, [pc, #628]	; (53b8 <menu()+0xdf0>)
	size_t print(int n)				{ return print((long)n); }
    5142:	4894      	ldr	r0, [pc, #592]	; (5394 <menu()+0xdcc>)
    5144:	6819      	ldr	r1, [r3, #0]
    5146:	f003 fa2f 	bl	85a8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    514a:	4892      	ldr	r0, [pc, #584]	; (5394 <menu()+0xdcc>)
    514c:	f003 fa34 	bl	85b8 <Print::println()>
    5150:	2111      	movs	r1, #17
    5152:	489a      	ldr	r0, [pc, #616]	; (53bc <menu()+0xdf4>)
    5154:	f005 feda 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.println(inputcheck);
    5158:	4b99      	ldr	r3, [pc, #612]	; (53c0 <menu()+0xdf8>)
	size_t print(int n)				{ return print((long)n); }
    515a:	488e      	ldr	r0, [pc, #568]	; (5394 <menu()+0xdcc>)
    515c:	6819      	ldr	r1, [r3, #0]
    515e:	f003 fa23 	bl	85a8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    5162:	488c      	ldr	r0, [pc, #560]	; (5394 <menu()+0xdcc>)
    5164:	f003 fa28 	bl	85b8 <Print::println()>
    5168:	210e      	movs	r1, #14
    516a:	4896      	ldr	r0, [pc, #600]	; (53c4 <menu()+0xdfc>)
    516c:	f005 fece 	bl	af0c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5170:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
    5174:	4887      	ldr	r0, [pc, #540]	; (5394 <menu()+0xdcc>)
    5176:	f003 fa17 	bl	85a8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    517a:	4886      	ldr	r0, [pc, #536]	; (5394 <menu()+0xdcc>)
    517c:	f003 fa1c 	bl	85b8 <Print::println()>
    5180:	2119      	movs	r1, #25
    5182:	4891      	ldr	r0, [pc, #580]	; (53c8 <menu()+0xe00>)
    5184:	f005 fec2 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.println(cellspresent);
    5188:	4b90      	ldr	r3, [pc, #576]	; (53cc <menu()+0xe04>)
	size_t print(int n)				{ return print((long)n); }
    518a:	4882      	ldr	r0, [pc, #520]	; (5394 <menu()+0xdcc>)
    518c:	6819      	ldr	r1, [r3, #0]
    518e:	f003 fa0b 	bl	85a8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    5192:	4880      	ldr	r0, [pc, #512]	; (5394 <menu()+0xdcc>)
    5194:	f003 fa10 	bl	85b8 <Print::println()>
    5198:	2111      	movs	r1, #17
    519a:	488d      	ldr	r0, [pc, #564]	; (53d0 <menu()+0xe08>)
    519c:	f005 feb6 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.println(gaugedebug);
    51a0:	4b8c      	ldr	r3, [pc, #560]	; (53d4 <menu()+0xe0c>)
	size_t print(int n)				{ return print((long)n); }
    51a2:	487c      	ldr	r0, [pc, #496]	; (5394 <menu()+0xdcc>)
    51a4:	6819      	ldr	r1, [r3, #0]
    51a6:	f003 f9ff 	bl	85a8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    51aa:	487a      	ldr	r0, [pc, #488]	; (5394 <menu()+0xdcc>)
    51ac:	f003 fa04 	bl	85b8 <Print::println()>
    51b0:	2110      	movs	r1, #16
    51b2:	4889      	ldr	r0, [pc, #548]	; (53d8 <menu()+0xe10>)
    51b4:	f005 feaa 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.println(CSVdebug);
    51b8:	4b88      	ldr	r3, [pc, #544]	; (53dc <menu()+0xe14>)
	size_t print(int n)				{ return print((long)n); }
    51ba:	4876      	ldr	r0, [pc, #472]	; (5394 <menu()+0xdcc>)
    51bc:	6819      	ldr	r1, [r3, #0]
    51be:	f003 f9f3 	bl	85a8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    51c2:	4874      	ldr	r0, [pc, #464]	; (5394 <menu()+0xdcc>)
    51c4:	f003 f9f8 	bl	85b8 <Print::println()>
    51c8:	211c      	movs	r1, #28
    51ca:	4885      	ldr	r0, [pc, #532]	; (53e0 <menu()+0xe18>)
    51cc:	f005 fe9e 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.println(debugdigits);
    51d0:	4b84      	ldr	r3, [pc, #528]	; (53e4 <menu()+0xe1c>)
	size_t print(int n)				{ return print((long)n); }
    51d2:	4870      	ldr	r0, [pc, #448]	; (5394 <menu()+0xdcc>)
    51d4:	6819      	ldr	r1, [r3, #0]
    51d6:	f003 f9e7 	bl	85a8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    51da:	486e      	ldr	r0, [pc, #440]	; (5394 <menu()+0xdcc>)
    51dc:	f003 f9ec 	bl	85b8 <Print::println()>
    51e0:	4881      	ldr	r0, [pc, #516]	; (53e8 <menu()+0xe20>)
    51e2:	211e      	movs	r1, #30
    51e4:	f005 fe92 	bl	af0c <usb_serial_write>
        if (settings.disp == 1) {
    51e8:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
    51ec:	2b00      	cmp	r3, #0
    51ee:	f000 8671 	beq.w	5ed4 <menu()+0x190c>
    51f2:	487e      	ldr	r0, [pc, #504]	; (53ec <menu()+0xe24>)
    51f4:	210d      	movs	r1, #13
    51f6:	f005 fe89 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    51fa:	4866      	ldr	r0, [pc, #408]	; (5394 <menu()+0xdcc>)
    51fc:	f003 f9dc 	bl	85b8 <Print::println()>
    5200:	2115      	movs	r1, #21
    5202:	487b      	ldr	r0, [pc, #492]	; (53f0 <menu()+0xe28>)
    5204:	f005 fe82 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.println(CanDebugSerial);
    5208:	4b7a      	ldr	r3, [pc, #488]	; (53f4 <menu()+0xe2c>)
	size_t print(int n)				{ return print((long)n); }
    520a:	4862      	ldr	r0, [pc, #392]	; (5394 <menu()+0xdcc>)
    520c:	6819      	ldr	r1, [r3, #0]
    520e:	f003 f9cb 	bl	85a8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    5212:	4860      	ldr	r0, [pc, #384]	; (5394 <menu()+0xdcc>)
    5214:	f003 f9d0 	bl	85b8 <Print::println()>
    5218:	2113      	movs	r1, #19
    521a:	4877      	ldr	r0, [pc, #476]	; (53f8 <menu()+0xe30>)
    521c:	f005 fe76 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5220:	485c      	ldr	r0, [pc, #368]	; (5394 <menu()+0xdcc>)
    5222:	f003 f9c9 	bl	85b8 <Print::println()>
        menuload = 4;
    5226:	2304      	movs	r3, #4
    5228:	6023      	str	r3, [r4, #0]
        break;
    522a:	f7ff ba32 	b.w	4692 <menu()+0xca>
  if (incomingByte == 115 & menuload == 0) {
    522e:	6823      	ldr	r3, [r4, #0]
    5230:	2b00      	cmp	r3, #0
    5232:	bf08      	it	eq
    5234:	2873      	cmpeq	r0, #115	; 0x73
    5236:	bf0c      	ite	eq
    5238:	2301      	moveq	r3, #1
    523a:	2300      	movne	r3, #0
    523c:	f7ff ba26 	b.w	468c <menu()+0xc4>
        candebug = !candebug;
    5240:	4a59      	ldr	r2, [pc, #356]	; (53a8 <menu()+0xde0>)
        CanDebugSerial = !CanDebugSerial;
    5242:	6813      	ldr	r3, [r2, #0]
    5244:	fab3 f383 	clz	r3, r3
        incomingByte = 'd';
    5248:	2064      	movs	r0, #100	; 0x64
        menuload = 1;
    524a:	2101      	movs	r1, #1
        CanDebugSerial = !CanDebugSerial;
    524c:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    524e:	6021      	str	r1, [r4, #0]
        CanDebugSerial = !CanDebugSerial;
    5250:	6013      	str	r3, [r2, #0]
        incomingByte = 'd';
    5252:	6030      	str	r0, [r6, #0]
  if (menuload == 6)  //Charging settings
    5254:	e67d      	b.n	4f52 <menu()+0x98a>
        debugCur = !debugCur;
    5256:	4a56      	ldr	r2, [pc, #344]	; (53b0 <menu()+0xde8>)
    5258:	e7f3      	b.n	5242 <menu()+0xc7a>
        outputcheck = !outputcheck;
    525a:	4b57      	ldr	r3, [pc, #348]	; (53b8 <menu()+0xdf0>)
    525c:	681a      	ldr	r2, [r3, #0]
        menuload = 1;
    525e:	2101      	movs	r1, #1
        outputcheck = !outputcheck;
    5260:	2a00      	cmp	r2, #0
    5262:	bf0c      	ite	eq
    5264:	460a      	moveq	r2, r1
    5266:	2200      	movne	r2, #0
        menuload = 1;
    5268:	6021      	str	r1, [r4, #0]
        outputcheck = !outputcheck;
    526a:	601a      	str	r2, [r3, #0]
        if (outputcheck == 0) {
    526c:	f040 86af 	bne.w	5fce <menu()+0x1a06>
        incomingByte = 'd';
    5270:	2064      	movs	r0, #100	; 0x64
    5272:	6030      	str	r0, [r6, #0]
  if (menuload == 5) {
    5274:	e66d      	b.n	4f52 <menu()+0x98a>
        inputcheck = !inputcheck;
    5276:	4a52      	ldr	r2, [pc, #328]	; (53c0 <menu()+0xdf8>)
    5278:	e7e3      	b.n	5242 <menu()+0xc7a>
        settings.ESSmode = !settings.ESSmode;
    527a:	4d47      	ldr	r5, [pc, #284]	; (5398 <menu()+0xdd0>)
    527c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    5280:	fab3 f383 	clz	r3, r3
        incomingByte = 'd';
    5284:	2064      	movs	r0, #100	; 0x64
        menuload = 1;
    5286:	2201      	movs	r2, #1
        settings.ESSmode = !settings.ESSmode;
    5288:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    528a:	6022      	str	r2, [r4, #0]
        settings.ESSmode = !settings.ESSmode;
    528c:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
        incomingByte = 'd';
    5290:	6030      	str	r0, [r6, #0]
  if (menuload == 6)  //Charging settings
    5292:	e65e      	b.n	4f52 <menu()+0x98a>
        menuload = 1;
    5294:	2301      	movs	r3, #1
        cellspresent = bms.seriescells();
    5296:	4859      	ldr	r0, [pc, #356]	; (53fc <menu()+0xe34>)
        menuload = 1;
    5298:	6023      	str	r3, [r4, #0]
        cellspresent = bms.seriescells();
    529a:	f7fb fa9f 	bl	7dc <BMSModuleManager::seriescells()>
    529e:	4b4b      	ldr	r3, [pc, #300]	; (53cc <menu()+0xe04>)
        incomingByte = 'd';
    52a0:	2264      	movs	r2, #100	; 0x64
        cellspresent = bms.seriescells();
    52a2:	6018      	str	r0, [r3, #0]
        incomingByte = 'd';
    52a4:	6032      	str	r2, [r6, #0]
  if (menuload == 2) {
    52a6:	6823      	ldr	r3, [r4, #0]
        break;
    52a8:	e63e      	b.n	4f28 <menu()+0x960>
        gaugedebug = !gaugedebug;
    52aa:	4a4a      	ldr	r2, [pc, #296]	; (53d4 <menu()+0xe0c>)
    52ac:	e7c9      	b.n	5242 <menu()+0xc7a>
        CSVdebug = !CSVdebug;
    52ae:	4a4b      	ldr	r2, [pc, #300]	; (53dc <menu()+0xe14>)
    52b0:	e7c7      	b.n	5242 <menu()+0xc7a>
        CanDebugSerial = !CanDebugSerial;
    52b2:	4a50      	ldr	r2, [pc, #320]	; (53f4 <menu()+0xe2c>)
    52b4:	e7c5      	b.n	5242 <menu()+0xc7a>
        settings.invertcur = !settings.invertcur;
    52b6:	4d38      	ldr	r5, [pc, #224]	; (5398 <menu()+0xdd0>)
    52b8:	6fab      	ldr	r3, [r5, #120]	; 0x78
    52ba:	fab3 f383 	clz	r3, r3
    52be:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    52c0:	2201      	movs	r2, #1
        settings.invertcur = !settings.invertcur;
    52c2:	67ab      	str	r3, [r5, #120]	; 0x78
        incomingByte = 'c';
    52c4:	2363      	movs	r3, #99	; 0x63
        menuload = 1;
    52c6:	6022      	str	r2, [r4, #0]
        incomingByte = 'c';
    52c8:	6033      	str	r3, [r6, #0]
  if (menuload == 3) {
    52ca:	2063      	movs	r0, #99	; 0x63
    52cc:	e641      	b.n	4f52 <menu()+0x98a>
        settings.voltsoc = !settings.voltsoc;
    52ce:	4d32      	ldr	r5, [pc, #200]	; (5398 <menu()+0xdd0>)
    52d0:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
    52d4:	fab3 f383 	clz	r3, r3
    52d8:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    52da:	2201      	movs	r2, #1
        settings.voltsoc = !settings.voltsoc;
    52dc:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
        incomingByte = 'c';
    52e0:	2363      	movs	r3, #99	; 0x63
        menuload = 1;
    52e2:	6022      	str	r2, [r4, #0]
        incomingByte = 'c';
    52e4:	6033      	str	r3, [r6, #0]
  if (menuload == 3) {
    52e6:	e7f0      	b.n	52ca <menu()+0xd02>
        menuload = 1;
    52e8:	2301      	movs	r3, #1
    52ea:	6023      	str	r3, [r4, #0]
        virtual int available() { return usb_serial_available(); }
    52ec:	f005 fddc 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    52f0:	2800      	cmp	r0, #0
    52f2:	dd05      	ble.n	5300 <menu()+0xd38>
          settings.ncur = Serial.parseInt();
    52f4:	4827      	ldr	r0, [pc, #156]	; (5394 <menu()+0xdcc>)
    52f6:	4d28      	ldr	r5, [pc, #160]	; (5398 <menu()+0xdd0>)
    52f8:	f003 fabe 	bl	8878 <Stream::parseInt()>
    52fc:	f8c5 00ac 	str.w	r0, [r5, #172]	; 0xac
        menuload = 1;
    5300:	2201      	movs	r2, #1
        incomingByte = 'c';
    5302:	2363      	movs	r3, #99	; 0x63
        menuload = 1;
    5304:	6022      	str	r2, [r4, #0]
        incomingByte = 'c';
    5306:	6033      	str	r3, [r6, #0]
  if (menuload == 3) {
    5308:	e7df      	b.n	52ca <menu()+0xd02>
        settings.cursens++;
    530a:	4d23      	ldr	r5, [pc, #140]	; (5398 <menu()+0xdd0>)
    530c:	6feb      	ldr	r3, [r5, #124]	; 0x7c
        menuload = 1;
    530e:	2201      	movs	r2, #1
        settings.cursens++;
    5310:	4413      	add	r3, r2
          settings.cursens = 0;
    5312:	2b04      	cmp	r3, #4
        menuload = 1;
    5314:	6022      	str	r2, [r4, #0]
          settings.cursens = 0;
    5316:	bfa8      	it	ge
    5318:	2300      	movge	r3, #0
        incomingByte = 'c';
    531a:	2263      	movs	r2, #99	; 0x63
    531c:	67eb      	str	r3, [r5, #124]	; 0x7c
    531e:	6032      	str	r2, [r6, #0]
  if (menuload == 3) {
    5320:	e7d3      	b.n	52ca <menu()+0xd02>
        menuload = 1;
    5322:	2301      	movs	r3, #1
    5324:	6023      	str	r3, [r4, #0]
    5326:	f005 fdbf 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    532a:	2800      	cmp	r0, #0
    532c:	dd07      	ble.n	533e <menu()+0xd76>
          settings.convlow = Serial.parseInt();
    532e:	4819      	ldr	r0, [pc, #100]	; (5394 <menu()+0xdcc>)
    5330:	4d19      	ldr	r5, [pc, #100]	; (5398 <menu()+0xdd0>)
    5332:	f003 faa1 	bl	8878 <Stream::parseInt()>
    5336:	f006 fc75 	bl	bc24 <__aeabi_i2f>
    533a:	f8c5 008c 	str.w	r0, [r5, #140]	; 0x8c
  if (menuload == 9) {
    533e:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'c';
    5340:	2063      	movs	r0, #99	; 0x63
  if (menuload == 8) {
    5342:	2b08      	cmp	r3, #8
        incomingByte = 'c';
    5344:	6030      	str	r0, [r6, #0]
  if (menuload == 8) {
    5346:	f43f a99b 	beq.w	4680 <menu()+0xb8>
  if (menuload == 7) {
    534a:	2b07      	cmp	r3, #7
    534c:	f43f a998 	beq.w	4680 <menu()+0xb8>
  if (menuload == 6)  //Charging settings
    5350:	2b06      	cmp	r3, #6
    5352:	f040 867f 	bne.w	6054 <menu()+0x1a8c>
        incomingByte = 'd';
    5356:	2306      	movs	r3, #6
    5358:	f7ff b992 	b.w	4680 <menu()+0xb8>
        menuload = 1;
    535c:	2301      	movs	r3, #1
    535e:	6023      	str	r3, [r4, #0]
    5360:	f005 fda2 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    5364:	2800      	cmp	r0, #0
    5366:	ddea      	ble.n	533e <menu()+0xd76>
          settings.convhigh = Serial.parseInt();
    5368:	480a      	ldr	r0, [pc, #40]	; (5394 <menu()+0xdcc>)
    536a:	4d0b      	ldr	r5, [pc, #44]	; (5398 <menu()+0xdd0>)
    536c:	f003 fa84 	bl	8878 <Stream::parseInt()>
    5370:	f006 fc58 	bl	bc24 <__aeabi_i2f>
    5374:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
    5378:	e7e1      	b.n	533e <menu()+0xd76>
        menuload = 1;
    537a:	2301      	movs	r3, #1
    537c:	6023      	str	r3, [r4, #0]
    537e:	f005 fd93 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    5382:	2800      	cmp	r0, #0
    5384:	dddb      	ble.n	533e <menu()+0xd76>
          settings.CurDead = Serial.parseInt();
    5386:	4803      	ldr	r0, [pc, #12]	; (5394 <menu()+0xdcc>)
    5388:	4d03      	ldr	r5, [pc, #12]	; (5398 <menu()+0xdd0>)
    538a:	f003 fa75 	bl	8878 <Stream::parseInt()>
    538e:	f8a5 00b8 	strh.w	r0, [r5, #184]	; 0xb8
    5392:	e7d4      	b.n	533e <menu()+0xd76>
    5394:	1fff880c 	.word	0x1fff880c
    5398:	1fffb204 	.word	0x1fffb204
    539c:	00013780 	.word	0x00013780
    53a0:	00013794 	.word	0x00013794
    53a4:	000137a4 	.word	0x000137a4
    53a8:	1fffb070 	.word	0x1fffb070
    53ac:	000137b4 	.word	0x000137b4
    53b0:	1fffb0fc 	.word	0x1fffb0fc
    53b4:	000137c8 	.word	0x000137c8
    53b8:	1fffb1fc 	.word	0x1fffb1fc
    53bc:	000137dc 	.word	0x000137dc
    53c0:	1fffb134 	.word	0x1fffb134
    53c4:	000137f0 	.word	0x000137f0
    53c8:	00013800 	.word	0x00013800
    53cc:	1fffb074 	.word	0x1fffb074
    53d0:	0001381c 	.word	0x0001381c
    53d4:	1fffb114 	.word	0x1fffb114
    53d8:	00013830 	.word	0x00013830
    53dc:	1fff8fa0 	.word	0x1fff8fa0
    53e0:	00013844 	.word	0x00013844
    53e4:	1fff8748 	.word	0x1fff8748
    53e8:	00013864 	.word	0x00013864
    53ec:	00013884 	.word	0x00013884
    53f0:	000138a4 	.word	0x000138a4
    53f4:	1fff8fa4 	.word	0x1fff8fa4
    53f8:	00013454 	.word	0x00013454
    53fc:	1fff8fe0 	.word	0x1fff8fe0
        menuload = 1;
    5400:	2301      	movs	r3, #1
    5402:	6023      	str	r3, [r4, #0]
    5404:	f005 fd50 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    5408:	2800      	cmp	r0, #0
    540a:	f77f af79 	ble.w	5300 <menu()+0xd38>
          settings.changecur = Serial.parseInt();
    540e:	483c      	ldr	r0, [pc, #240]	; (5500 <menu()+0xf38>)
    5410:	4d3c      	ldr	r5, [pc, #240]	; (5504 <menu()+0xf3c>)
    5412:	f003 fa31 	bl	8878 <Stream::parseInt()>
    5416:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
    541a:	e771      	b.n	5300 <menu()+0xd38>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    541c:	483a      	ldr	r0, [pc, #232]	; (5508 <menu()+0xf40>)
    541e:	2104      	movs	r1, #4
    5420:	f005 fd74 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.println();
    5424:	4836      	ldr	r0, [pc, #216]	; (5500 <menu()+0xf38>)
    5426:	f003 f8c7 	bl	85b8 <Print::println()>
        if (settings.chargertype > 0) {
    542a:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
    542e:	2b00      	cmp	r3, #0
    5430:	dd12      	ble.n	5458 <menu()+0xe90>
    5432:	2118      	movs	r1, #24
    5434:	4835      	ldr	r0, [pc, #212]	; (550c <menu()+0xf44>)
    5436:	f005 fd69 	bl	af0c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    543a:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
    543e:	4830      	ldr	r0, [pc, #192]	; (5500 <menu()+0xf38>)
    5440:	f003 f8b2 	bl	85a8 <Print::print(long)>
    5444:	2102      	movs	r1, #2
    5446:	4832      	ldr	r0, [pc, #200]	; (5510 <menu()+0xf48>)
    5448:	f005 fd60 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    544c:	482c      	ldr	r0, [pc, #176]	; (5500 <menu()+0xf38>)
    544e:	f003 f8b3 	bl	85b8 <Print::println()>
          SERIALCONSOLE.println();
    5452:	482b      	ldr	r0, [pc, #172]	; (5500 <menu()+0xf38>)
    5454:	f003 f8b0 	bl	85b8 <Print::println()>
    5458:	482e      	ldr	r0, [pc, #184]	; (5514 <menu()+0xf4c>)
    545a:	211b      	movs	r1, #27
    545c:	f005 fd56 	bl	af0c <usb_serial_write>
        switch (settings.ChargerDirect) {
    5460:	f895 30c0 	ldrb.w	r3, [r5, #192]	; 0xc0
    5464:	2b00      	cmp	r3, #0
    5466:	f040 84d2 	bne.w	5e0e <menu()+0x1846>
    546a:	482b      	ldr	r0, [pc, #172]	; (5518 <menu()+0xf50>)
    546c:	2112      	movs	r1, #18
    546e:	f005 fd4d 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.println();
    5472:	4823      	ldr	r0, [pc, #140]	; (5500 <menu()+0xf38>)
    5474:	f003 f8a0 	bl	85b8 <Print::println()>
    5478:	2113      	movs	r1, #19
    547a:	4828      	ldr	r0, [pc, #160]	; (551c <menu()+0xf54>)
    547c:	f005 fd46 	bl	af0c <usb_serial_write>
    5480:	481f      	ldr	r0, [pc, #124]	; (5500 <menu()+0xf38>)
    5482:	f003 f899 	bl	85b8 <Print::println()>
        menuload = 6;
    5486:	2306      	movs	r3, #6
    5488:	6023      	str	r3, [r4, #0]
        break;
    548a:	f7ff b902 	b.w	4692 <menu()+0xca>
    548e:	210b      	movs	r1, #11
    5490:	4823      	ldr	r0, [pc, #140]	; (5520 <menu()+0xf58>)
    5492:	f005 fd3b 	bl	af0c <usb_serial_write>
    5496:	e7c5      	b.n	5424 <menu()+0xe5c>
    5498:	210d      	movs	r1, #13
    549a:	4822      	ldr	r0, [pc, #136]	; (5524 <menu()+0xf5c>)
    549c:	f005 fd36 	bl	af0c <usb_serial_write>
    54a0:	e7c0      	b.n	5424 <menu()+0xe5c>
    54a2:	210d      	movs	r1, #13
    54a4:	4820      	ldr	r0, [pc, #128]	; (5528 <menu()+0xf60>)
    54a6:	f005 fd31 	bl	af0c <usb_serial_write>
    54aa:	e7bb      	b.n	5424 <menu()+0xe5c>
    54ac:	210c      	movs	r1, #12
    54ae:	481f      	ldr	r0, [pc, #124]	; (552c <menu()+0xf64>)
    54b0:	f005 fd2c 	bl	af0c <usb_serial_write>
    54b4:	e7b6      	b.n	5424 <menu()+0xe5c>
    54b6:	210d      	movs	r1, #13
    54b8:	481d      	ldr	r0, [pc, #116]	; (5530 <menu()+0xf68>)
    54ba:	f005 fd27 	bl	af0c <usb_serial_write>
    54be:	e7b1      	b.n	5424 <menu()+0xe5c>
    54c0:	210c      	movs	r1, #12
    54c2:	481c      	ldr	r0, [pc, #112]	; (5534 <menu()+0xf6c>)
    54c4:	f005 fd22 	bl	af0c <usb_serial_write>
    54c8:	e7ac      	b.n	5424 <menu()+0xe5c>
        CPU_REBOOT;
    54ca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    54ce:	4a1a      	ldr	r2, [pc, #104]	; (5538 <menu()+0xf70>)
    54d0:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
        break;
    54d4:	f7ff b8dd 	b.w	4692 <menu()+0xca>
        #if defined(__has_include) && __has_include(<type_traits>)
        static_assert(std::is_trivially_copyable<T>::value, "You can not use this type with EEPROM.put"); // the code below only makes sense if you can "memcpy" T
        #endif
        const uint8_t *ptr = (const uint8_t*) &t;
#ifdef __arm__
        eeprom_write_block(ptr, (void *)idx, sizeof(T));
    54d8:	22d0      	movs	r2, #208	; 0xd0
    54da:	2100      	movs	r1, #0
    54dc:	4809      	ldr	r0, [pc, #36]	; (5504 <menu()+0xf3c>)
        debug = 1;
    54de:	4d17      	ldr	r5, [pc, #92]	; (553c <menu()+0xf74>)
    54e0:	f003 faa0 	bl	8a24 <eeprom_write_block>
  if (incomingByte == 115 & menuload == 0) {
    54e4:	6833      	ldr	r3, [r6, #0]
        menuload = 0;
    54e6:	2100      	movs	r1, #0
        debug = 1;
    54e8:	2201      	movs	r2, #1
  if (incomingByte == 115 & menuload == 0) {
    54ea:	2b73      	cmp	r3, #115	; 0x73
        menuload = 0;
    54ec:	6021      	str	r1, [r4, #0]
        debug = 1;
    54ee:	602a      	str	r2, [r5, #0]
  if (incomingByte == 115 & menuload == 0) {
    54f0:	f47f a8cf 	bne.w	4692 <menu()+0xca>
    54f4:	f7ff b95b 	b.w	47ae <menu()+0x1e6>
    54f8:	4d02      	ldr	r5, [pc, #8]	; (5504 <menu()+0xf3c>)
    54fa:	e41c      	b.n	4d36 <menu()+0x76e>
    54fc:	4d01      	ldr	r5, [pc, #4]	; (5504 <menu()+0xf3c>)
    54fe:	e021      	b.n	5544 <menu()+0xf7c>
    5500:	1fff880c 	.word	0x1fff880c
    5504:	1fffb204 	.word	0x1fffb204
    5508:	000135a8 	.word	0x000135a8
    550c:	000135b0 	.word	0x000135b0
    5510:	000135cc 	.word	0x000135cc
    5514:	000135d0 	.word	0x000135d0
    5518:	000135ec 	.word	0x000135ec
    551c:	00013454 	.word	0x00013454
    5520:	0001359c 	.word	0x0001359c
    5524:	0001358c 	.word	0x0001358c
    5528:	0001357c 	.word	0x0001357c
    552c:	0001356c 	.word	0x0001356c
    5530:	0001354c 	.word	0x0001354c
    5534:	0001355c 	.word	0x0001355c
    5538:	05fa0004 	.word	0x05fa0004
    553c:	1fff8744 	.word	0x1fff8744
        virtual int read() { return usb_serial_getchar(); }
    5540:	f005 fc76 	bl	ae30 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    5544:	f005 fcb0 	bl	aea8 <usb_serial_available>
        while (Serial.available()) {
    5548:	4606      	mov	r6, r0
    554a:	2800      	cmp	r0, #0
    554c:	d1f8      	bne.n	5540 <menu()+0xf78>
        SERIALCONSOLE.println();
    554e:	48c2      	ldr	r0, [pc, #776]	; (5858 <menu()+0x1290>)
    5550:	f003 f832 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    5554:	48c0      	ldr	r0, [pc, #768]	; (5858 <menu()+0x1290>)
    5556:	f003 f82f 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    555a:	48bf      	ldr	r0, [pc, #764]	; (5858 <menu()+0x1290>)
    555c:	f003 f82c 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    5560:	48bd      	ldr	r0, [pc, #756]	; (5858 <menu()+0x1290>)
    5562:	f003 f829 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    5566:	48bc      	ldr	r0, [pc, #752]	; (5858 <menu()+0x1290>)
    5568:	f003 f826 	bl	85b8 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    556c:	2115      	movs	r1, #21
    556e:	48bb      	ldr	r0, [pc, #748]	; (585c <menu()+0x1294>)
    5570:	f005 fccc 	bl	af0c <usb_serial_write>
    5574:	48b8      	ldr	r0, [pc, #736]	; (5858 <menu()+0x1290>)
    5576:	f003 f81f 	bl	85b8 <Print::println()>
    557a:	2114      	movs	r1, #20
    557c:	48b8      	ldr	r0, [pc, #736]	; (5860 <menu()+0x1298>)
    557e:	f005 fcc5 	bl	af0c <usb_serial_write>
    5582:	48b5      	ldr	r0, [pc, #724]	; (5858 <menu()+0x1290>)
    5584:	f003 f818 	bl	85b8 <Print::println()>
    5588:	211b      	movs	r1, #27
    558a:	48b6      	ldr	r0, [pc, #728]	; (5864 <menu()+0x129c>)
    558c:	f005 fcbe 	bl	af0c <usb_serial_write>
    5590:	48b1      	ldr	r0, [pc, #708]	; (5858 <menu()+0x1290>)
    5592:	f003 f811 	bl	85b8 <Print::println()>
    5596:	2113      	movs	r1, #19
    5598:	48b3      	ldr	r0, [pc, #716]	; (5868 <menu()+0x12a0>)
    559a:	f005 fcb7 	bl	af0c <usb_serial_write>
    559e:	48ae      	ldr	r0, [pc, #696]	; (5858 <menu()+0x1290>)
    55a0:	f003 f80a 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    55a4:	48ac      	ldr	r0, [pc, #688]	; (5858 <menu()+0x1290>)
    55a6:	f003 f807 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    55aa:	48ab      	ldr	r0, [pc, #684]	; (5858 <menu()+0x1290>)
    55ac:	f003 f804 	bl	85b8 <Print::println()>
    55b0:	2120      	movs	r1, #32
    55b2:	48ae      	ldr	r0, [pc, #696]	; (586c <menu()+0x12a4>)
    55b4:	f005 fcaa 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.print(settings.OverVSetpoint * 1000, 0);
    55b8:	68e8      	ldr	r0, [r5, #12]
    55ba:	49ad      	ldr	r1, [pc, #692]	; (5870 <menu()+0x12a8>)
    55bc:	f006 fb86 	bl	bccc <__aeabi_fmul>
    55c0:	f006 f960 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    55c4:	9600      	str	r6, [sp, #0]
    55c6:	4602      	mov	r2, r0
    55c8:	460b      	mov	r3, r1
    55ca:	48a3      	ldr	r0, [pc, #652]	; (5858 <menu()+0x1290>)
    55cc:	f003 f818 	bl	8600 <Print::printFloat(double, unsigned char)>
    55d0:	2102      	movs	r1, #2
    55d2:	48a8      	ldr	r0, [pc, #672]	; (5874 <menu()+0x12ac>)
    55d4:	f005 fc9a 	bl	af0c <usb_serial_write>
    55d8:	2102      	movs	r1, #2
    55da:	48a7      	ldr	r0, [pc, #668]	; (5878 <menu()+0x12b0>)
    55dc:	f005 fc96 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    55e0:	489d      	ldr	r0, [pc, #628]	; (5858 <menu()+0x1290>)
    55e2:	f002 ffe9 	bl	85b8 <Print::println()>
    55e6:	2121      	movs	r1, #33	; 0x21
    55e8:	48a4      	ldr	r0, [pc, #656]	; (587c <menu()+0x12b4>)
    55ea:	f005 fc8f 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.print(settings.UnderVSetpoint * 1000, 0);
    55ee:	6928      	ldr	r0, [r5, #16]
    55f0:	499f      	ldr	r1, [pc, #636]	; (5870 <menu()+0x12a8>)
    55f2:	f006 fb6b 	bl	bccc <__aeabi_fmul>
    55f6:	f006 f945 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    55fa:	9600      	str	r6, [sp, #0]
    55fc:	4602      	mov	r2, r0
    55fe:	460b      	mov	r3, r1
    5600:	4895      	ldr	r0, [pc, #596]	; (5858 <menu()+0x1290>)
    5602:	f002 fffd 	bl	8600 <Print::printFloat(double, unsigned char)>
    5606:	2102      	movs	r1, #2
    5608:	489a      	ldr	r0, [pc, #616]	; (5874 <menu()+0x12ac>)
    560a:	f005 fc7f 	bl	af0c <usb_serial_write>
    560e:	2102      	movs	r1, #2
    5610:	4899      	ldr	r0, [pc, #612]	; (5878 <menu()+0x12b0>)
    5612:	f005 fc7b 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5616:	4890      	ldr	r0, [pc, #576]	; (5858 <menu()+0x1290>)
    5618:	f002 ffce 	bl	85b8 <Print::println()>
    561c:	211f      	movs	r1, #31
    561e:	4898      	ldr	r0, [pc, #608]	; (5880 <menu()+0x12b8>)
    5620:	f005 fc74 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.print(settings.OverTSetpoint);
    5624:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5626:	f006 f92d 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    562a:	2702      	movs	r7, #2
    562c:	4602      	mov	r2, r0
    562e:	460b      	mov	r3, r1
    5630:	4889      	ldr	r0, [pc, #548]	; (5858 <menu()+0x1290>)
    5632:	9700      	str	r7, [sp, #0]
    5634:	f002 ffe4 	bl	8600 <Print::printFloat(double, unsigned char)>
    5638:	2101      	movs	r1, #1
    563a:	4892      	ldr	r0, [pc, #584]	; (5884 <menu()+0x12bc>)
    563c:	f005 fc66 	bl	af0c <usb_serial_write>
    5640:	4639      	mov	r1, r7
    5642:	488d      	ldr	r0, [pc, #564]	; (5878 <menu()+0x12b0>)
    5644:	f005 fc62 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5648:	4883      	ldr	r0, [pc, #524]	; (5858 <menu()+0x1290>)
    564a:	f002 ffb5 	bl	85b8 <Print::println()>
    564e:	2120      	movs	r1, #32
    5650:	488d      	ldr	r0, [pc, #564]	; (5888 <menu()+0x12c0>)
    5652:	f005 fc5b 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.print(settings.UnderTSetpoint);
    5656:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    5658:	f006 f914 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    565c:	9700      	str	r7, [sp, #0]
    565e:	4602      	mov	r2, r0
    5660:	460b      	mov	r3, r1
    5662:	487d      	ldr	r0, [pc, #500]	; (5858 <menu()+0x1290>)
    5664:	f002 ffcc 	bl	8600 <Print::printFloat(double, unsigned char)>
    5668:	2101      	movs	r1, #1
    566a:	4886      	ldr	r0, [pc, #536]	; (5884 <menu()+0x12bc>)
    566c:	f005 fc4e 	bl	af0c <usb_serial_write>
    5670:	4639      	mov	r1, r7
    5672:	4881      	ldr	r0, [pc, #516]	; (5878 <menu()+0x12b0>)
    5674:	f005 fc4a 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5678:	4877      	ldr	r0, [pc, #476]	; (5858 <menu()+0x1290>)
    567a:	f002 ff9d 	bl	85b8 <Print::println()>
    567e:	2123      	movs	r1, #35	; 0x23
    5680:	4882      	ldr	r0, [pc, #520]	; (588c <menu()+0x12c4>)
    5682:	f005 fc43 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.print(settings.balanceVoltage * 1000, 0);
    5686:	6ca8      	ldr	r0, [r5, #72]	; 0x48
    5688:	4979      	ldr	r1, [pc, #484]	; (5870 <menu()+0x12a8>)
    568a:	f006 fb1f 	bl	bccc <__aeabi_fmul>
    568e:	f006 f8f9 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5692:	9600      	str	r6, [sp, #0]
    5694:	4602      	mov	r2, r0
    5696:	460b      	mov	r3, r1
    5698:	486f      	ldr	r0, [pc, #444]	; (5858 <menu()+0x1290>)
    569a:	f002 ffb1 	bl	8600 <Print::printFloat(double, unsigned char)>
    569e:	4639      	mov	r1, r7
    56a0:	4874      	ldr	r0, [pc, #464]	; (5874 <menu()+0x12ac>)
    56a2:	f005 fc33 	bl	af0c <usb_serial_write>
    56a6:	4639      	mov	r1, r7
    56a8:	4873      	ldr	r0, [pc, #460]	; (5878 <menu()+0x12b0>)
    56aa:	f005 fc2f 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    56ae:	486a      	ldr	r0, [pc, #424]	; (5858 <menu()+0x1290>)
    56b0:	f002 ff82 	bl	85b8 <Print::println()>
    56b4:	211f      	movs	r1, #31
    56b6:	4876      	ldr	r0, [pc, #472]	; (5890 <menu()+0x12c8>)
    56b8:	f005 fc28 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.print(settings.balanceHyst * 1000, 0);
    56bc:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    56be:	496c      	ldr	r1, [pc, #432]	; (5870 <menu()+0x12a8>)
    56c0:	f006 fb04 	bl	bccc <__aeabi_fmul>
    56c4:	f006 f8de 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    56c8:	9600      	str	r6, [sp, #0]
    56ca:	4602      	mov	r2, r0
    56cc:	460b      	mov	r3, r1
    56ce:	4862      	ldr	r0, [pc, #392]	; (5858 <menu()+0x1290>)
    56d0:	f002 ff96 	bl	8600 <Print::printFloat(double, unsigned char)>
    56d4:	4639      	mov	r1, r7
    56d6:	4867      	ldr	r0, [pc, #412]	; (5874 <menu()+0x12ac>)
    56d8:	f005 fc18 	bl	af0c <usb_serial_write>
    56dc:	4639      	mov	r1, r7
    56de:	4866      	ldr	r0, [pc, #408]	; (5878 <menu()+0x12b0>)
    56e0:	f005 fc14 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    56e4:	485c      	ldr	r0, [pc, #368]	; (5858 <menu()+0x1290>)
    56e6:	f002 ff67 	bl	85b8 <Print::println()>
    56ea:	2119      	movs	r1, #25
    56ec:	4869      	ldr	r0, [pc, #420]	; (5894 <menu()+0x12cc>)
    56ee:	f005 fc0d 	bl	af0c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    56f2:	6da9      	ldr	r1, [r5, #88]	; 0x58
    56f4:	4858      	ldr	r0, [pc, #352]	; (5858 <menu()+0x1290>)
    56f6:	f002 ff57 	bl	85a8 <Print::print(long)>
    56fa:	4639      	mov	r1, r7
    56fc:	4866      	ldr	r0, [pc, #408]	; (5898 <menu()+0x12d0>)
    56fe:	f005 fc05 	bl	af0c <usb_serial_write>
    5702:	4639      	mov	r1, r7
    5704:	485c      	ldr	r0, [pc, #368]	; (5878 <menu()+0x12b0>)
    5706:	f005 fc01 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    570a:	4853      	ldr	r0, [pc, #332]	; (5858 <menu()+0x1290>)
    570c:	f002 ff54 	bl	85b8 <Print::println()>
    5710:	2118      	movs	r1, #24
    5712:	4862      	ldr	r0, [pc, #392]	; (589c <menu()+0x12d4>)
    5714:	f005 fbfa 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.print(settings.discurrentmax * 0.1);
    5718:	6e68      	ldr	r0, [r5, #100]	; 0x64
    571a:	f006 fa83 	bl	bc24 <__aeabi_i2f>
    571e:	4960      	ldr	r1, [pc, #384]	; (58a0 <menu()+0x12d8>)
    5720:	f006 fad4 	bl	bccc <__aeabi_fmul>
    5724:	f006 f8ae 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5728:	9700      	str	r7, [sp, #0]
    572a:	4602      	mov	r2, r0
    572c:	460b      	mov	r3, r1
    572e:	484a      	ldr	r0, [pc, #296]	; (5858 <menu()+0x1290>)
    5730:	f002 ff66 	bl	8600 <Print::printFloat(double, unsigned char)>
    5734:	2101      	movs	r1, #1
    5736:	485b      	ldr	r0, [pc, #364]	; (58a4 <menu()+0x12dc>)
    5738:	f005 fbe8 	bl	af0c <usb_serial_write>
    573c:	4639      	mov	r1, r7
    573e:	484e      	ldr	r0, [pc, #312]	; (5878 <menu()+0x12b0>)
    5740:	f005 fbe4 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5744:	4844      	ldr	r0, [pc, #272]	; (5858 <menu()+0x1290>)
    5746:	f002 ff37 	bl	85b8 <Print::println()>
    574a:	212b      	movs	r1, #43	; 0x2b
    574c:	4856      	ldr	r0, [pc, #344]	; (58a8 <menu()+0x12e0>)
    574e:	f005 fbdd 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.print(settings.DischVsetpoint * 1000, 0);
    5752:	69a8      	ldr	r0, [r5, #24]
    5754:	4946      	ldr	r1, [pc, #280]	; (5870 <menu()+0x12a8>)
    5756:	f006 fab9 	bl	bccc <__aeabi_fmul>
    575a:	f006 f893 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    575e:	9600      	str	r6, [sp, #0]
    5760:	4602      	mov	r2, r0
    5762:	460b      	mov	r3, r1
    5764:	483c      	ldr	r0, [pc, #240]	; (5858 <menu()+0x1290>)
    5766:	f002 ff4b 	bl	8600 <Print::printFloat(double, unsigned char)>
    576a:	4639      	mov	r1, r7
    576c:	4841      	ldr	r0, [pc, #260]	; (5874 <menu()+0x12ac>)
    576e:	f005 fbcd 	bl	af0c <usb_serial_write>
    5772:	4639      	mov	r1, r7
    5774:	4840      	ldr	r0, [pc, #256]	; (5878 <menu()+0x12b0>)
    5776:	f005 fbc9 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    577a:	4837      	ldr	r0, [pc, #220]	; (5858 <menu()+0x1290>)
    577c:	f002 ff1c 	bl	85b8 <Print::println()>
    5780:	211f      	movs	r1, #31
    5782:	484a      	ldr	r0, [pc, #296]	; (58ac <menu()+0x12e4>)
    5784:	f005 fbc2 	bl	af0c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5788:	6d69      	ldr	r1, [r5, #84]	; 0x54
    578a:	4833      	ldr	r0, [pc, #204]	; (5858 <menu()+0x1290>)
    578c:	f002 ff0c 	bl	85a8 <Print::print(long)>
    5790:	4639      	mov	r1, r7
    5792:	4839      	ldr	r0, [pc, #228]	; (5878 <menu()+0x12b0>)
    5794:	f005 fbba 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5798:	482f      	ldr	r0, [pc, #188]	; (5858 <menu()+0x1290>)
    579a:	f002 ff0d 	bl	85b8 <Print::println()>
    579e:	2120      	movs	r1, #32
    57a0:	4843      	ldr	r0, [pc, #268]	; (58b0 <menu()+0x12e8>)
    57a2:	f005 fbb3 	bl	af0c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    57a6:	6d29      	ldr	r1, [r5, #80]	; 0x50
    57a8:	482b      	ldr	r0, [pc, #172]	; (5858 <menu()+0x1290>)
    57aa:	f002 fefd 	bl	85a8 <Print::print(long)>
    57ae:	4639      	mov	r1, r7
    57b0:	4831      	ldr	r0, [pc, #196]	; (5878 <menu()+0x12b0>)
    57b2:	f005 fbab 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    57b6:	4828      	ldr	r0, [pc, #160]	; (5858 <menu()+0x1290>)
    57b8:	f002 fefe 	bl	85b8 <Print::println()>
    57bc:	2110      	movs	r1, #16
    57be:	483d      	ldr	r0, [pc, #244]	; (58b4 <menu()+0x12ec>)
    57c0:	f005 fba4 	bl	af0c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    57c4:	6ea9      	ldr	r1, [r5, #104]	; 0x68
    57c6:	4824      	ldr	r0, [pc, #144]	; (5858 <menu()+0x1290>)
    57c8:	f002 feee 	bl	85a8 <Print::print(long)>
    57cc:	4639      	mov	r1, r7
    57ce:	4829      	ldr	r0, [pc, #164]	; (5874 <menu()+0x12ac>)
    57d0:	f005 fb9c 	bl	af0c <usb_serial_write>
    57d4:	4639      	mov	r1, r7
    57d6:	4828      	ldr	r0, [pc, #160]	; (5878 <menu()+0x12b0>)
    57d8:	f005 fb98 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    57dc:	481e      	ldr	r0, [pc, #120]	; (5858 <menu()+0x1290>)
    57de:	f002 feeb 	bl	85b8 <Print::println()>
    57e2:	2113      	movs	r1, #19
    57e4:	4834      	ldr	r0, [pc, #208]	; (58b8 <menu()+0x12f0>)
    57e6:	f005 fb91 	bl	af0c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    57ea:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
    57ec:	481a      	ldr	r0, [pc, #104]	; (5858 <menu()+0x1290>)
    57ee:	f002 fedb 	bl	85a8 <Print::print(long)>
    57f2:	2101      	movs	r1, #1
    57f4:	4831      	ldr	r0, [pc, #196]	; (58bc <menu()+0x12f4>)
    57f6:	f005 fb89 	bl	af0c <usb_serial_write>
    57fa:	4639      	mov	r1, r7
    57fc:	481e      	ldr	r0, [pc, #120]	; (5878 <menu()+0x12b0>)
    57fe:	f005 fb85 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5802:	4815      	ldr	r0, [pc, #84]	; (5858 <menu()+0x1290>)
    5804:	f002 fed8 	bl	85b8 <Print::println()>
    5808:	2110      	movs	r1, #16
    580a:	482d      	ldr	r0, [pc, #180]	; (58c0 <menu()+0x12f8>)
    580c:	f005 fb7e 	bl	af0c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5810:	6f29      	ldr	r1, [r5, #112]	; 0x70
    5812:	4811      	ldr	r0, [pc, #68]	; (5858 <menu()+0x1290>)
    5814:	f002 fec8 	bl	85a8 <Print::print(long)>
    5818:	4639      	mov	r1, r7
    581a:	4816      	ldr	r0, [pc, #88]	; (5874 <menu()+0x12ac>)
    581c:	f005 fb76 	bl	af0c <usb_serial_write>
    5820:	4639      	mov	r1, r7
    5822:	4815      	ldr	r0, [pc, #84]	; (5878 <menu()+0x12b0>)
    5824:	f005 fb72 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5828:	480b      	ldr	r0, [pc, #44]	; (5858 <menu()+0x1290>)
    582a:	f002 fec5 	bl	85b8 <Print::println()>
    582e:	2114      	movs	r1, #20
    5830:	4824      	ldr	r0, [pc, #144]	; (58c4 <menu()+0x12fc>)
    5832:	f005 fb6b 	bl	af0c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5836:	6f69      	ldr	r1, [r5, #116]	; 0x74
    5838:	4807      	ldr	r0, [pc, #28]	; (5858 <menu()+0x1290>)
    583a:	f002 feb5 	bl	85a8 <Print::print(long)>
    583e:	2101      	movs	r1, #1
    5840:	481e      	ldr	r0, [pc, #120]	; (58bc <menu()+0x12f4>)
    5842:	f005 fb63 	bl	af0c <usb_serial_write>
    5846:	4639      	mov	r1, r7
    5848:	480b      	ldr	r0, [pc, #44]	; (5878 <menu()+0x12b0>)
    584a:	f005 fb5f 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    584e:	4802      	ldr	r0, [pc, #8]	; (5858 <menu()+0x1290>)
    5850:	f002 feb2 	bl	85b8 <Print::println()>
    5854:	2116      	movs	r1, #22
    5856:	e037      	b.n	58c8 <menu()+0x1300>
    5858:	1fff880c 	.word	0x1fff880c
    585c:	00013a68 	.word	0x00013a68
    5860:	00013a80 	.word	0x00013a80
    5864:	00013a98 	.word	0x00013a98
    5868:	00013454 	.word	0x00013454
    586c:	00013ab4 	.word	0x00013ab4
    5870:	447a0000 	.word	0x447a0000
    5874:	000134b0 	.word	0x000134b0
    5878:	00012a24 	.word	0x00012a24
    587c:	00013ad8 	.word	0x00013ad8
    5880:	00013afc 	.word	0x00013afc
    5884:	00013b1c 	.word	0x00013b1c
    5888:	00013b20 	.word	0x00013b20
    588c:	00013b44 	.word	0x00013b44
    5890:	00013b68 	.word	0x00013b68
    5894:	00013b88 	.word	0x00013b88
    5898:	00013ba4 	.word	0x00013ba4
    589c:	00013ba8 	.word	0x00013ba8
    58a0:	3dcccccd 	.word	0x3dcccccd
    58a4:	000139fc 	.word	0x000139fc
    58a8:	00013bc4 	.word	0x00013bc4
    58ac:	00013bf0 	.word	0x00013bf0
    58b0:	00013c10 	.word	0x00013c10
    58b4:	00013c34 	.word	0x00013c34
    58b8:	00013c48 	.word	0x00013c48
    58bc:	00013c5c 	.word	0x00013c5c
    58c0:	00013c60 	.word	0x00013c60
    58c4:	00013c74 	.word	0x00013c74
    58c8:	489a      	ldr	r0, [pc, #616]	; (5b34 <menu()+0x156c>)
    58ca:	f005 fb1f 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.print(settings.StoreVsetpoint * 1000, 0);
    58ce:	6a28      	ldr	r0, [r5, #32]
    58d0:	4999      	ldr	r1, [pc, #612]	; (5b38 <menu()+0x1570>)
    58d2:	f006 f9fb 	bl	bccc <__aeabi_fmul>
    58d6:	f005 ffd5 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    58da:	9600      	str	r6, [sp, #0]
    58dc:	4602      	mov	r2, r0
    58de:	460b      	mov	r3, r1
    58e0:	4896      	ldr	r0, [pc, #600]	; (5b3c <menu()+0x1574>)
    58e2:	f002 fe8d 	bl	8600 <Print::printFloat(double, unsigned char)>
    58e6:	4639      	mov	r1, r7
    58e8:	4895      	ldr	r0, [pc, #596]	; (5b40 <menu()+0x1578>)
    58ea:	f005 fb0f 	bl	af0c <usb_serial_write>
    58ee:	4639      	mov	r1, r7
    58f0:	4894      	ldr	r0, [pc, #592]	; (5b44 <menu()+0x157c>)
    58f2:	f005 fb0b 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    58f6:	4891      	ldr	r0, [pc, #580]	; (5b3c <menu()+0x1574>)
    58f8:	f002 fe5e 	bl	85b8 <Print::println()>
    58fc:	2124      	movs	r1, #36	; 0x24
    58fe:	4892      	ldr	r0, [pc, #584]	; (5b48 <menu()+0x1580>)
    5900:	f005 fb04 	bl	af0c <usb_serial_write>
        SERIALCONSOLE.print(settings.DisTaper * 1000, 0);
    5904:	f8d5 00bc 	ldr.w	r0, [r5, #188]	; 0xbc
    5908:	498b      	ldr	r1, [pc, #556]	; (5b38 <menu()+0x1570>)
    590a:	f006 f9df 	bl	bccc <__aeabi_fmul>
    590e:	f005 ffb9 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5912:	9600      	str	r6, [sp, #0]
    5914:	460b      	mov	r3, r1
    5916:	4602      	mov	r2, r0
    5918:	4888      	ldr	r0, [pc, #544]	; (5b3c <menu()+0x1574>)
    591a:	f002 fe71 	bl	8600 <Print::printFloat(double, unsigned char)>
    591e:	4639      	mov	r1, r7
    5920:	4887      	ldr	r0, [pc, #540]	; (5b40 <menu()+0x1578>)
    5922:	f005 faf3 	bl	af0c <usb_serial_write>
    5926:	4639      	mov	r1, r7
    5928:	4886      	ldr	r0, [pc, #536]	; (5b44 <menu()+0x157c>)
    592a:	f005 faef 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    592e:	4883      	ldr	r0, [pc, #524]	; (5b3c <menu()+0x1574>)
    5930:	f002 fe42 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    5934:	4881      	ldr	r0, [pc, #516]	; (5b3c <menu()+0x1574>)
    5936:	f002 fe3f 	bl	85b8 <Print::println()>
        menuload = 3;
    593a:	2303      	movs	r3, #3
    593c:	6023      	str	r3, [r4, #0]
        break;
    593e:	f7fe bea8 	b.w	4692 <menu()+0xca>
    switch (incomingByte) {
    5942:	2830      	cmp	r0, #48	; 0x30
    5944:	f77e ae9c 	ble.w	4680 <menu()+0xb8>
    5948:	3832      	subs	r0, #50	; 0x32
    594a:	2803      	cmp	r0, #3
    594c:	f200 83c6 	bhi.w	60dc <menu()+0x1b14>
    5950:	e8df f010 	tbh	[pc, r0, lsl #1]
    5954:	005800cb 	.word	0x005800cb
    5958:	00db0004 	.word	0x00db0004
        virtual int available() { return usb_serial_available(); }
    595c:	f005 faa4 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    5960:	2800      	cmp	r0, #0
    5962:	f300 823f 	bgt.w	5de4 <menu()+0x181c>
  if (menuload == 3) {
    5966:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    5968:	6830      	ldr	r0, [r6, #0]
  if (menuload == 3) {
    596a:	2b03      	cmp	r3, #3
    596c:	f040 812e 	bne.w	5bcc <menu()+0x1604>
    switch (incomingByte) {
    5970:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    5974:	2b42      	cmp	r3, #66	; 0x42
    5976:	f200 822c 	bhi.w	5dd2 <menu()+0x180a>
    597a:	e8df f013 	tbh	[pc, r3, lsl #1]
    597e:	0175      	.short	0x0175
    5980:	01570166 	.word	0x01570166
    5984:	013f014b 	.word	0x013f014b
    5988:	021a012c 	.word	0x021a012c
    598c:	0201020f 	.word	0x0201020f
    5990:	022a01f1 	.word	0x022a01f1
    5994:	022a022a 	.word	0x022a022a
    5998:	022a022a 	.word	0x022a022a
    599c:	022a022a 	.word	0x022a022a
    59a0:	022a022a 	.word	0x022a022a
    59a4:	022a022a 	.word	0x022a022a
    59a8:	022a022a 	.word	0x022a022a
    59ac:	022a022a 	.word	0x022a022a
    59b0:	022a022a 	.word	0x022a022a
    59b4:	022a022a 	.word	0x022a022a
    59b8:	022a022a 	.word	0x022a022a
    59bc:	022a022a 	.word	0x022a022a
    59c0:	022a022a 	.word	0x022a022a
    59c4:	022a022a 	.word	0x022a022a
    59c8:	022a022a 	.word	0x022a022a
    59cc:	022a022a 	.word	0x022a022a
    59d0:	022a022a 	.word	0x022a022a
    59d4:	022a022a 	.word	0x022a022a
    59d8:	022a022a 	.word	0x022a022a
    59dc:	022a022a 	.word	0x022a022a
    59e0:	01200189 	.word	0x01200189
    59e4:	01db01e6 	.word	0x01db01e6
    59e8:	019301ba 	.word	0x019301ba
    59ec:	010d00fb 	.word	0x010d00fb
    59f0:	022a022a 	.word	0x022a022a
    59f4:	022a022a 	.word	0x022a022a
    59f8:	022a022a 	.word	0x022a022a
    59fc:	022a022a 	.word	0x022a022a
    5a00:	01c501d4 	.word	0x01c501d4
    5a04:	f005 fa50 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    5a08:	2800      	cmp	r0, #0
    5a0a:	ddac      	ble.n	5966 <menu()+0x139e>
          settings.conthold = Serial.parseInt();
    5a0c:	484b      	ldr	r0, [pc, #300]	; (5b3c <menu()+0x1574>)
    5a0e:	4d4f      	ldr	r5, [pc, #316]	; (5b4c <menu()+0x1584>)
    5a10:	f002 ff32 	bl	8878 <Stream::parseInt()>
          menuload = 1;
    5a14:	2301      	movs	r3, #1
    5a16:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    5a18:	236b      	movs	r3, #107	; 0x6b
          settings.conthold = Serial.parseInt();
    5a1a:	f8c5 0098 	str.w	r0, [r5, #152]	; 0x98
          incomingByte = 'k';
    5a1e:	6033      	str	r3, [r6, #0]
    switch (incomingByte) {
    5a20:	e001      	b.n	5a26 <menu()+0x145e>
        virtual int read() { return usb_serial_getchar(); }
    5a22:	f005 fa05 	bl	ae30 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    5a26:	f005 fa3f 	bl	aea8 <usb_serial_available>
        while (Serial.available()) {
    5a2a:	2800      	cmp	r0, #0
    5a2c:	d1f9      	bne.n	5a22 <menu()+0x145a>
        SERIALCONSOLE.println();
    5a2e:	4843      	ldr	r0, [pc, #268]	; (5b3c <menu()+0x1574>)
    5a30:	f002 fdc2 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    5a34:	4841      	ldr	r0, [pc, #260]	; (5b3c <menu()+0x1574>)
    5a36:	f002 fdbf 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    5a3a:	4840      	ldr	r0, [pc, #256]	; (5b3c <menu()+0x1574>)
    5a3c:	f002 fdbc 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    5a40:	483e      	ldr	r0, [pc, #248]	; (5b3c <menu()+0x1574>)
    5a42:	f002 fdb9 	bl	85b8 <Print::println()>
        SERIALCONSOLE.println();
    5a46:	483d      	ldr	r0, [pc, #244]	; (5b3c <menu()+0x1574>)
    5a48:	f002 fdb6 	bl	85b8 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5a4c:	2121      	movs	r1, #33	; 0x21
    5a4e:	4840      	ldr	r0, [pc, #256]	; (5b50 <menu()+0x1588>)
    5a50:	f005 fa5c 	bl	af0c <usb_serial_write>
    5a54:	4839      	ldr	r0, [pc, #228]	; (5b3c <menu()+0x1574>)
    5a56:	f002 fdaf 	bl	85b8 <Print::println()>
    5a5a:	2115      	movs	r1, #21
    5a5c:	483d      	ldr	r0, [pc, #244]	; (5b54 <menu()+0x158c>)
    5a5e:	f005 fa55 	bl	af0c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5a62:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
    5a66:	4835      	ldr	r0, [pc, #212]	; (5b3c <menu()+0x1574>)
    5a68:	f002 fd9e 	bl	85a8 <Print::print(long)>
    5a6c:	2102      	movs	r1, #2
    5a6e:	483a      	ldr	r0, [pc, #232]	; (5b58 <menu()+0x1590>)
    5a70:	f005 fa4c 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5a74:	4831      	ldr	r0, [pc, #196]	; (5b3c <menu()+0x1574>)
    5a76:	f002 fd9f 	bl	85b8 <Print::println()>
    5a7a:	211e      	movs	r1, #30
    5a7c:	4837      	ldr	r0, [pc, #220]	; (5b5c <menu()+0x1594>)
    5a7e:	f005 fa45 	bl	af0c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5a82:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
    5a86:	482d      	ldr	r0, [pc, #180]	; (5b3c <menu()+0x1574>)
    5a88:	f002 fd8e 	bl	85a8 <Print::print(long)>
    5a8c:	2103      	movs	r1, #3
    5a8e:	4834      	ldr	r0, [pc, #208]	; (5b60 <menu()+0x1598>)
    5a90:	f005 fa3c 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5a94:	4829      	ldr	r0, [pc, #164]	; (5b3c <menu()+0x1574>)
    5a96:	f002 fd8f 	bl	85b8 <Print::println()>
    5a9a:	211e      	movs	r1, #30
    5a9c:	4831      	ldr	r0, [pc, #196]	; (5b64 <menu()+0x159c>)
    5a9e:	f005 fa35 	bl	af0c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5aa2:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
    5aa6:	4825      	ldr	r0, [pc, #148]	; (5b3c <menu()+0x1574>)
    5aa8:	f002 fd7e 	bl	85a8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    5aac:	4823      	ldr	r0, [pc, #140]	; (5b3c <menu()+0x1574>)
    5aae:	f002 fd83 	bl	85b8 <Print::println()>
    5ab2:	211d      	movs	r1, #29
    5ab4:	482c      	ldr	r0, [pc, #176]	; (5b68 <menu()+0x15a0>)
    5ab6:	f005 fa29 	bl	af0c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5aba:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
    5abe:	481f      	ldr	r0, [pc, #124]	; (5b3c <menu()+0x1574>)
    5ac0:	f002 fd72 	bl	85a8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    5ac4:	481d      	ldr	r0, [pc, #116]	; (5b3c <menu()+0x1574>)
    5ac6:	f002 fd77 	bl	85b8 <Print::println()>
    5aca:	211e      	movs	r1, #30
    5acc:	4827      	ldr	r0, [pc, #156]	; (5b6c <menu()+0x15a4>)
    5ace:	f005 fa1d 	bl	af0c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5ad2:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    5ad6:	4819      	ldr	r0, [pc, #100]	; (5b3c <menu()+0x1574>)
    5ad8:	f002 fd66 	bl	85a8 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    5adc:	4817      	ldr	r0, [pc, #92]	; (5b3c <menu()+0x1574>)
    5ade:	f002 fd6b 	bl	85b8 <Print::println()>
        menuload = 5;
    5ae2:	2305      	movs	r3, #5
    5ae4:	6023      	str	r3, [r4, #0]
        break;
    5ae6:	f7fe bdd4 	b.w	4692 <menu()+0xca>
        virtual int available() { return usb_serial_available(); }
    5aea:	f005 f9dd 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    5aee:	2800      	cmp	r0, #0
    5af0:	f77f af39 	ble.w	5966 <menu()+0x139e>
          settings.Precurrent = Serial.parseInt();
    5af4:	4811      	ldr	r0, [pc, #68]	; (5b3c <menu()+0x1574>)
    5af6:	4d15      	ldr	r5, [pc, #84]	; (5b4c <menu()+0x1584>)
    5af8:	f002 febe 	bl	8878 <Stream::parseInt()>
          menuload = 1;
    5afc:	2301      	movs	r3, #1
    5afe:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    5b00:	236b      	movs	r3, #107	; 0x6b
          settings.Precurrent = Serial.parseInt();
    5b02:	f8c5 009c 	str.w	r0, [r5, #156]	; 0x9c
          incomingByte = 'k';
    5b06:	6033      	str	r3, [r6, #0]
    switch (incomingByte) {
    5b08:	e78d      	b.n	5a26 <menu()+0x145e>
    5b0a:	f005 f9cd 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    5b0e:	2800      	cmp	r0, #0
    5b10:	f77f af29 	ble.w	5966 <menu()+0x139e>
          settings.gaugehigh = Serial.parseInt();
    5b14:	4809      	ldr	r0, [pc, #36]	; (5b3c <menu()+0x1574>)
    5b16:	4d0d      	ldr	r5, [pc, #52]	; (5b4c <menu()+0x1584>)
    5b18:	f002 feae 	bl	8878 <Stream::parseInt()>
          gaugedebug = 3;
    5b1c:	4b14      	ldr	r3, [pc, #80]	; (5b70 <menu()+0x15a8>)
          settings.gaugehigh = Serial.parseInt();
    5b1e:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
          gaugedebug = 3;
    5b22:	2203      	movs	r2, #3
    5b24:	601a      	str	r2, [r3, #0]
          gaugeupdate();
    5b26:	f7fc fa25 	bl	1f74 <gaugeupdate()>
          menuload = 1;
    5b2a:	2201      	movs	r2, #1
          incomingByte = 'k';
    5b2c:	236b      	movs	r3, #107	; 0x6b
          menuload = 1;
    5b2e:	6022      	str	r2, [r4, #0]
          incomingByte = 'k';
    5b30:	6033      	str	r3, [r6, #0]
    switch (incomingByte) {
    5b32:	e778      	b.n	5a26 <menu()+0x145e>
    5b34:	00013c8c 	.word	0x00013c8c
    5b38:	447a0000 	.word	0x447a0000
    5b3c:	1fff880c 	.word	0x1fff880c
    5b40:	000134b0 	.word	0x000134b0
    5b44:	00012a24 	.word	0x00012a24
    5b48:	00013ca4 	.word	0x00013ca4
    5b4c:	1fffb204 	.word	0x1fffb204
    5b50:	000136c4 	.word	0x000136c4
    5b54:	000136e8 	.word	0x000136e8
    5b58:	000135cc 	.word	0x000135cc
    5b5c:	00013700 	.word	0x00013700
    5b60:	00012f4c 	.word	0x00012f4c
    5b64:	00013720 	.word	0x00013720
    5b68:	00013740 	.word	0x00013740
    5b6c:	00013760 	.word	0x00013760
    5b70:	1fffb114 	.word	0x1fffb114
    5b74:	f005 f998 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    5b78:	2800      	cmp	r0, #0
    5b7a:	dd0d      	ble.n	5b98 <menu()+0x15d0>
          settings.StoreVsetpoint = Serial.parseInt();
    5b7c:	48a7      	ldr	r0, [pc, #668]	; (5e1c <menu()+0x1854>)
          settings.StoreVsetpoint = settings.StoreVsetpoint / 1000;
    5b7e:	4da8      	ldr	r5, [pc, #672]	; (5e20 <menu()+0x1858>)
          settings.StoreVsetpoint = Serial.parseInt();
    5b80:	f002 fe7a 	bl	8878 <Stream::parseInt()>
    5b84:	f006 f84e 	bl	bc24 <__aeabi_i2f>
          settings.StoreVsetpoint = settings.StoreVsetpoint / 1000;
    5b88:	49a6      	ldr	r1, [pc, #664]	; (5e24 <menu()+0x185c>)
    5b8a:	f006 f953 	bl	be34 <__aeabi_fdiv>
          menuload = 1;
    5b8e:	2201      	movs	r2, #1
          incomingByte = 'b';
    5b90:	2362      	movs	r3, #98	; 0x62
          settings.StoreVsetpoint = settings.StoreVsetpoint / 1000;
    5b92:	6228      	str	r0, [r5, #32]
          menuload = 1;
    5b94:	6022      	str	r2, [r4, #0]
          incomingByte = 'b';
    5b96:	6033      	str	r3, [r6, #0]
    5b98:	f005 f986 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    5b9c:	2800      	cmp	r0, #0
    5b9e:	dd0e      	ble.n	5bbe <menu()+0x15f6>
          settings.DisTaper = Serial.parseInt();
    5ba0:	489e      	ldr	r0, [pc, #632]	; (5e1c <menu()+0x1854>)
          settings.DisTaper = settings.DisTaper / 1000;
    5ba2:	4d9f      	ldr	r5, [pc, #636]	; (5e20 <menu()+0x1858>)
          settings.DisTaper = Serial.parseInt();
    5ba4:	f002 fe68 	bl	8878 <Stream::parseInt()>
    5ba8:	f006 f83c 	bl	bc24 <__aeabi_i2f>
          settings.DisTaper = settings.DisTaper / 1000;
    5bac:	499d      	ldr	r1, [pc, #628]	; (5e24 <menu()+0x185c>)
    5bae:	f006 f941 	bl	be34 <__aeabi_fdiv>
          menuload = 1;
    5bb2:	2201      	movs	r2, #1
          incomingByte = 'b';
    5bb4:	2362      	movs	r3, #98	; 0x62
          settings.DisTaper = settings.DisTaper / 1000;
    5bb6:	f8c5 00bc 	str.w	r0, [r5, #188]	; 0xbc
          menuload = 1;
    5bba:	6022      	str	r2, [r4, #0]
          incomingByte = 'b';
    5bbc:	6033      	str	r3, [r6, #0]
    5bbe:	f005 f973 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    5bc2:	2800      	cmp	r0, #0
    5bc4:	f300 8108 	bgt.w	5dd8 <menu()+0x1810>
  if (menuload == 1) {
    5bc8:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    5bca:	6830      	ldr	r0, [r6, #0]
  if (menuload == 1) {
    5bcc:	2b01      	cmp	r3, #1
    5bce:	f47e ad57 	bne.w	4680 <menu()+0xb8>
    5bd2:	f7ff b9be 	b.w	4f52 <menu()+0x98a>
    5bd6:	f005 f967 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    5bda:	2800      	cmp	r0, #0
    5bdc:	ddf4      	ble.n	5bc8 <menu()+0x1600>
          settings.balanceVoltage = Serial.parseInt();
    5bde:	488f      	ldr	r0, [pc, #572]	; (5e1c <menu()+0x1854>)
          settings.balanceVoltage = settings.balanceVoltage / 1000;
    5be0:	4d8f      	ldr	r5, [pc, #572]	; (5e20 <menu()+0x1858>)
          settings.balanceVoltage = Serial.parseInt();
    5be2:	f002 fe49 	bl	8878 <Stream::parseInt()>
    5be6:	f006 f81d 	bl	bc24 <__aeabi_i2f>
          settings.balanceVoltage = settings.balanceVoltage / 1000;
    5bea:	498e      	ldr	r1, [pc, #568]	; (5e24 <menu()+0x185c>)
    5bec:	f006 f922 	bl	be34 <__aeabi_fdiv>
    5bf0:	64a8      	str	r0, [r5, #72]	; 0x48
        menuload = 1;
    5bf2:	2201      	movs	r2, #1
        incomingByte = 'b';
    5bf4:	2362      	movs	r3, #98	; 0x62
        menuload = 1;
    5bf6:	6022      	str	r2, [r4, #0]
        incomingByte = 'b';
    5bf8:	6033      	str	r3, [r6, #0]
    switch (incomingByte) {
    5bfa:	e4a3      	b.n	5544 <menu()+0xf7c>
    5bfc:	f005 f954 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    5c00:	2800      	cmp	r0, #0
    5c02:	dde1      	ble.n	5bc8 <menu()+0x1600>
          settings.UnderTSetpoint = Serial.parseInt();
    5c04:	4885      	ldr	r0, [pc, #532]	; (5e1c <menu()+0x1854>)
    5c06:	4d86      	ldr	r5, [pc, #536]	; (5e20 <menu()+0x1858>)
    5c08:	f002 fe36 	bl	8878 <Stream::parseInt()>
    5c0c:	f006 f80a 	bl	bc24 <__aeabi_i2f>
    5c10:	62e8      	str	r0, [r5, #44]	; 0x2c
          incomingByte = 'b';
    5c12:	e7ee      	b.n	5bf2 <menu()+0x162a>
    5c14:	f005 f948 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    5c18:	2800      	cmp	r0, #0
    5c1a:	ddd5      	ble.n	5bc8 <menu()+0x1600>
          settings.OverTSetpoint = Serial.parseInt();
    5c1c:	487f      	ldr	r0, [pc, #508]	; (5e1c <menu()+0x1854>)
    5c1e:	4d80      	ldr	r5, [pc, #512]	; (5e20 <menu()+0x1858>)
    5c20:	f002 fe2a 	bl	8878 <Stream::parseInt()>
    5c24:	f005 fffe 	bl	bc24 <__aeabi_i2f>
    5c28:	62a8      	str	r0, [r5, #40]	; 0x28
          incomingByte = 'b';
    5c2a:	e7e2      	b.n	5bf2 <menu()+0x162a>
    5c2c:	f005 f93c 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    5c30:	2800      	cmp	r0, #0
    5c32:	ddc9      	ble.n	5bc8 <menu()+0x1600>
          settings.UnderVSetpoint = Serial.parseInt();
    5c34:	4879      	ldr	r0, [pc, #484]	; (5e1c <menu()+0x1854>)
          settings.UnderVSetpoint = settings.UnderVSetpoint / 1000;
    5c36:	4d7a      	ldr	r5, [pc, #488]	; (5e20 <menu()+0x1858>)
          settings.UnderVSetpoint = Serial.parseInt();
    5c38:	f002 fe1e 	bl	8878 <Stream::parseInt()>
    5c3c:	f005 fff2 	bl	bc24 <__aeabi_i2f>
          settings.UnderVSetpoint = settings.UnderVSetpoint / 1000;
    5c40:	4978      	ldr	r1, [pc, #480]	; (5e24 <menu()+0x185c>)
    5c42:	f006 f8f7 	bl	be34 <__aeabi_fdiv>
    5c46:	6128      	str	r0, [r5, #16]
          incomingByte = 'b';
    5c48:	e7d3      	b.n	5bf2 <menu()+0x162a>
    5c4a:	f005 f92d 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    5c4e:	2800      	cmp	r0, #0
    5c50:	ddba      	ble.n	5bc8 <menu()+0x1600>
          settings.OverVSetpoint = Serial.parseInt();
    5c52:	4872      	ldr	r0, [pc, #456]	; (5e1c <menu()+0x1854>)
          settings.OverVSetpoint = settings.OverVSetpoint / 1000;
    5c54:	4d72      	ldr	r5, [pc, #456]	; (5e20 <menu()+0x1858>)
          settings.OverVSetpoint = Serial.parseInt();
    5c56:	f002 fe0f 	bl	8878 <Stream::parseInt()>
    5c5a:	f005 ffe3 	bl	bc24 <__aeabi_i2f>
          settings.OverVSetpoint = settings.OverVSetpoint / 1000;
    5c5e:	4971      	ldr	r1, [pc, #452]	; (5e24 <menu()+0x185c>)
    5c60:	f006 f8e8 	bl	be34 <__aeabi_fdiv>
    5c64:	60e8      	str	r0, [r5, #12]
          incomingByte = 'b';
    5c66:	e7c4      	b.n	5bf2 <menu()+0x162a>
    5c68:	f005 f91e 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    5c6c:	2800      	cmp	r0, #0
    5c6e:	ddab      	ble.n	5bc8 <menu()+0x1600>
          settings.Pstrings = Serial.parseInt();
    5c70:	486a      	ldr	r0, [pc, #424]	; (5e1c <menu()+0x1854>)
    5c72:	4d6b      	ldr	r5, [pc, #428]	; (5e20 <menu()+0x1858>)
    5c74:	f002 fe00 	bl	8878 <Stream::parseInt()>
          menuload = 1;
    5c78:	2301      	movs	r3, #1
          settings.Pstrings = Serial.parseInt();
    5c7a:	4601      	mov	r1, r0
          menuload = 1;
    5c7c:	6023      	str	r3, [r4, #0]
          bms.setPstrings(settings.Pstrings);
    5c7e:	486a      	ldr	r0, [pc, #424]	; (5e28 <menu()+0x1860>)
          settings.Pstrings = Serial.parseInt();
    5c80:	6569      	str	r1, [r5, #84]	; 0x54
          incomingByte = 'b';
    5c82:	2362      	movs	r3, #98	; 0x62
    5c84:	6033      	str	r3, [r6, #0]
          bms.setPstrings(settings.Pstrings);
    5c86:	f7fa fff1 	bl	c6c <BMSModuleManager::setPstrings(int)>
  if (menuload == 1) {
    5c8a:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    5c8c:	6830      	ldr	r0, [r6, #0]
    5c8e:	e79d      	b.n	5bcc <menu()+0x1604>
    5c90:	f005 f90a 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    5c94:	2800      	cmp	r0, #0
    5c96:	dd97      	ble.n	5bc8 <menu()+0x1600>
          settings.Scells = Serial.parseInt();
    5c98:	4860      	ldr	r0, [pc, #384]	; (5e1c <menu()+0x1854>)
    5c9a:	4d61      	ldr	r5, [pc, #388]	; (5e20 <menu()+0x1858>)
    5c9c:	f002 fdec 	bl	8878 <Stream::parseInt()>
    5ca0:	6528      	str	r0, [r5, #80]	; 0x50
          incomingByte = 'b';
    5ca2:	e7a6      	b.n	5bf2 <menu()+0x162a>
        loadSettings();
    5ca4:	f7fc f812 	bl	1ccc <loadSettings()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5ca8:	2102      	movs	r1, #2
    5caa:	4860      	ldr	r0, [pc, #384]	; (5e2c <menu()+0x1864>)
    5cac:	f005 f92e 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5cb0:	485a      	ldr	r0, [pc, #360]	; (5e1c <menu()+0x1854>)
    5cb2:	f002 fc81 	bl	85b8 <Print::println()>
    5cb6:	2102      	movs	r1, #2
    5cb8:	485c      	ldr	r0, [pc, #368]	; (5e2c <menu()+0x1864>)
    5cba:	f005 f927 	bl	af0c <usb_serial_write>
    5cbe:	4857      	ldr	r0, [pc, #348]	; (5e1c <menu()+0x1854>)
    5cc0:	f002 fc7a 	bl	85b8 <Print::println()>
    5cc4:	2102      	movs	r1, #2
    5cc6:	4859      	ldr	r0, [pc, #356]	; (5e2c <menu()+0x1864>)
    5cc8:	f005 f920 	bl	af0c <usb_serial_write>
    5ccc:	4853      	ldr	r0, [pc, #332]	; (5e1c <menu()+0x1854>)
    5cce:	f002 fc73 	bl	85b8 <Print::println()>
    5cd2:	4857      	ldr	r0, [pc, #348]	; (5e30 <menu()+0x1868>)
    5cd4:	2117      	movs	r1, #23
    5cd6:	f005 f919 	bl	af0c <usb_serial_write>
    5cda:	4850      	ldr	r0, [pc, #320]	; (5e1c <menu()+0x1854>)
    5cdc:	f002 fc6c 	bl	85b8 <Print::println()>
    5ce0:	2102      	movs	r1, #2
    5ce2:	4852      	ldr	r0, [pc, #328]	; (5e2c <menu()+0x1864>)
    5ce4:	4d4e      	ldr	r5, [pc, #312]	; (5e20 <menu()+0x1858>)
    5ce6:	f005 f911 	bl	af0c <usb_serial_write>
    5cea:	484c      	ldr	r0, [pc, #304]	; (5e1c <menu()+0x1854>)
    5cec:	f002 fc64 	bl	85b8 <Print::println()>
        break;
    5cf0:	e77f      	b.n	5bf2 <menu()+0x162a>
        virtual int available() { return usb_serial_available(); }
    5cf2:	f005 f8d9 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    5cf6:	2800      	cmp	r0, #0
    5cf8:	f77f af66 	ble.w	5bc8 <menu()+0x1600>
          settings.socvolt[3] = Serial.parseInt();
    5cfc:	4847      	ldr	r0, [pc, #284]	; (5e1c <menu()+0x1854>)
    5cfe:	4d48      	ldr	r5, [pc, #288]	; (5e20 <menu()+0x1858>)
    5d00:	f002 fdba 	bl	8878 <Stream::parseInt()>
    5d04:	6768      	str	r0, [r5, #116]	; 0x74
          incomingByte = 'b';
    5d06:	e774      	b.n	5bf2 <menu()+0x162a>
        SOCset = 0;
    5d08:	4b4a      	ldr	r3, [pc, #296]	; (5e34 <menu()+0x186c>)
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5d0a:	4848      	ldr	r0, [pc, #288]	; (5e2c <menu()+0x1864>)
    5d0c:	2200      	movs	r2, #0
    5d0e:	2102      	movs	r1, #2
    5d10:	601a      	str	r2, [r3, #0]
    5d12:	f005 f8fb 	bl	af0c <usb_serial_write>
    5d16:	4841      	ldr	r0, [pc, #260]	; (5e1c <menu()+0x1854>)
    5d18:	f002 fc4e 	bl	85b8 <Print::println()>
    5d1c:	210b      	movs	r1, #11
    5d1e:	4846      	ldr	r0, [pc, #280]	; (5e38 <menu()+0x1870>)
    5d20:	f005 f8f4 	bl	af0c <usb_serial_write>
    5d24:	e7dc      	b.n	5ce0 <menu()+0x1718>
        menuload = 0;
    5d26:	2200      	movs	r2, #0
        incomingByte = 115;
    5d28:	2373      	movs	r3, #115	; 0x73
    5d2a:	4d44      	ldr	r5, [pc, #272]	; (5e3c <menu()+0x1874>)
        menuload = 0;
    5d2c:	6022      	str	r2, [r4, #0]
        incomingByte = 115;
    5d2e:	6033      	str	r3, [r6, #0]
  if (incomingByte == 115 & menuload == 0) {
    5d30:	f7fe bd3d 	b.w	47ae <menu()+0x1e6>
        virtual int available() { return usb_serial_available(); }
    5d34:	f005 f8b8 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    5d38:	2800      	cmp	r0, #0
    5d3a:	f77f af45 	ble.w	5bc8 <menu()+0x1600>
          settings.socvolt[2] = Serial.parseInt();
    5d3e:	4837      	ldr	r0, [pc, #220]	; (5e1c <menu()+0x1854>)
    5d40:	4d37      	ldr	r5, [pc, #220]	; (5e20 <menu()+0x1858>)
    5d42:	f002 fd99 	bl	8878 <Stream::parseInt()>
    5d46:	6728      	str	r0, [r5, #112]	; 0x70
          incomingByte = 'b';
    5d48:	e753      	b.n	5bf2 <menu()+0x162a>
    5d4a:	f005 f8ad 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    5d4e:	2800      	cmp	r0, #0
    5d50:	f77f af3a 	ble.w	5bc8 <menu()+0x1600>
          settings.socvolt[1] = Serial.parseInt();
    5d54:	4831      	ldr	r0, [pc, #196]	; (5e1c <menu()+0x1854>)
    5d56:	4d32      	ldr	r5, [pc, #200]	; (5e20 <menu()+0x1858>)
    5d58:	f002 fd8e 	bl	8878 <Stream::parseInt()>
    5d5c:	66e8      	str	r0, [r5, #108]	; 0x6c
          incomingByte = 'b';
    5d5e:	e748      	b.n	5bf2 <menu()+0x162a>
    5d60:	f005 f8a2 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    5d64:	2800      	cmp	r0, #0
    5d66:	f77f af2f 	ble.w	5bc8 <menu()+0x1600>
          settings.DischVsetpoint = Serial.parseInt();
    5d6a:	482c      	ldr	r0, [pc, #176]	; (5e1c <menu()+0x1854>)
          settings.DischVsetpoint = settings.DischVsetpoint / 1000;
    5d6c:	4d2c      	ldr	r5, [pc, #176]	; (5e20 <menu()+0x1858>)
          settings.DischVsetpoint = Serial.parseInt();
    5d6e:	f002 fd83 	bl	8878 <Stream::parseInt()>
    5d72:	f005 ff57 	bl	bc24 <__aeabi_i2f>
          settings.DischVsetpoint = settings.DischVsetpoint / 1000;
    5d76:	492b      	ldr	r1, [pc, #172]	; (5e24 <menu()+0x185c>)
    5d78:	f006 f85c 	bl	be34 <__aeabi_fdiv>
    5d7c:	61a8      	str	r0, [r5, #24]
          incomingByte = 'b';
    5d7e:	e738      	b.n	5bf2 <menu()+0x162a>
    5d80:	f005 f892 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    5d84:	2800      	cmp	r0, #0
    5d86:	f77f af1f 	ble.w	5bc8 <menu()+0x1600>
          settings.discurrentmax = Serial.parseInt() * 10;
    5d8a:	4824      	ldr	r0, [pc, #144]	; (5e1c <menu()+0x1854>)
    5d8c:	4d24      	ldr	r5, [pc, #144]	; (5e20 <menu()+0x1858>)
    5d8e:	f002 fd73 	bl	8878 <Stream::parseInt()>
    5d92:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5d96:	0040      	lsls	r0, r0, #1
    5d98:	6668      	str	r0, [r5, #100]	; 0x64
          incomingByte = 'b';
    5d9a:	e72a      	b.n	5bf2 <menu()+0x162a>
    5d9c:	f005 f884 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    5da0:	2800      	cmp	r0, #0
    5da2:	f77f af11 	ble.w	5bc8 <menu()+0x1600>
          settings.CAP = Serial.parseInt();
    5da6:	481d      	ldr	r0, [pc, #116]	; (5e1c <menu()+0x1854>)
    5da8:	4d1d      	ldr	r5, [pc, #116]	; (5e20 <menu()+0x1858>)
    5daa:	f002 fd65 	bl	8878 <Stream::parseInt()>
    5dae:	65a8      	str	r0, [r5, #88]	; 0x58
          incomingByte = 'b';
    5db0:	e71f      	b.n	5bf2 <menu()+0x162a>
    5db2:	f005 f879 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    5db6:	2800      	cmp	r0, #0
    5db8:	f77f af06 	ble.w	5bc8 <menu()+0x1600>
          settings.balanceHyst = Serial.parseInt();
    5dbc:	4817      	ldr	r0, [pc, #92]	; (5e1c <menu()+0x1854>)
          settings.balanceHyst = settings.balanceHyst / 1000;
    5dbe:	4d18      	ldr	r5, [pc, #96]	; (5e20 <menu()+0x1858>)
          settings.balanceHyst = Serial.parseInt();
    5dc0:	f002 fd5a 	bl	8878 <Stream::parseInt()>
    5dc4:	f005 ff2e 	bl	bc24 <__aeabi_i2f>
          settings.balanceHyst = settings.balanceHyst / 1000;
    5dc8:	4916      	ldr	r1, [pc, #88]	; (5e24 <menu()+0x185c>)
    5dca:	f006 f833 	bl	be34 <__aeabi_fdiv>
    5dce:	64e8      	str	r0, [r5, #76]	; 0x4c
          incomingByte = 'b';
    5dd0:	e70f      	b.n	5bf2 <menu()+0x162a>
          incomingByte = 'e';
    5dd2:	2303      	movs	r3, #3
    5dd4:	f7fe bc54 	b.w	4680 <menu()+0xb8>
          settings.socvolt[0] = Serial.parseInt();
    5dd8:	4810      	ldr	r0, [pc, #64]	; (5e1c <menu()+0x1854>)
    5dda:	4d11      	ldr	r5, [pc, #68]	; (5e20 <menu()+0x1858>)
    5ddc:	f002 fd4c 	bl	8878 <Stream::parseInt()>
    5de0:	66a8      	str	r0, [r5, #104]	; 0x68
          incomingByte = 'b';
    5de2:	e706      	b.n	5bf2 <menu()+0x162a>
          settings.gaugelow = Serial.parseInt();
    5de4:	480d      	ldr	r0, [pc, #52]	; (5e1c <menu()+0x1854>)
    5de6:	4d0e      	ldr	r5, [pc, #56]	; (5e20 <menu()+0x1858>)
    5de8:	f002 fd46 	bl	8878 <Stream::parseInt()>
          gaugedebug = 2;
    5dec:	4b14      	ldr	r3, [pc, #80]	; (5e40 <menu()+0x1878>)
          settings.gaugelow = Serial.parseInt();
    5dee:	f8c5 00a4 	str.w	r0, [r5, #164]	; 0xa4
          gaugedebug = 2;
    5df2:	2202      	movs	r2, #2
    5df4:	e696      	b.n	5b24 <menu()+0x155c>
          settings.chargerspd = Serial.parseInt();
    5df6:	4809      	ldr	r0, [pc, #36]	; (5e1c <menu()+0x1854>)
    5df8:	4d09      	ldr	r5, [pc, #36]	; (5e20 <menu()+0x1858>)
    5dfa:	f002 fd3d 	bl	8878 <Stream::parseInt()>
          menuload = 1;
    5dfe:	2301      	movs	r3, #1
    5e00:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    5e02:	2365      	movs	r3, #101	; 0x65
          settings.chargerspd = Serial.parseInt();
    5e04:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
          incomingByte = 'e';
    5e08:	6033      	str	r3, [r6, #0]
    switch (incomingByte) {
    5e0a:	f7fe be9b 	b.w	4b44 <menu()+0x57c>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5e0e:	2114      	movs	r1, #20
    5e10:	480c      	ldr	r0, [pc, #48]	; (5e44 <menu()+0x187c>)
    5e12:	f005 f87b 	bl	af0c <usb_serial_write>
    5e16:	f7ff bb2c 	b.w	5472 <menu()+0xeaa>
    5e1a:	bf00      	nop
    5e1c:	1fff880c 	.word	0x1fff880c
    5e20:	1fffb204 	.word	0x1fffb204
    5e24:	447a0000 	.word	0x447a0000
    5e28:	1fff8fe0 	.word	0x1fff8fe0
    5e2c:	00012a24 	.word	0x00012a24
    5e30:	000133a4 	.word	0x000133a4
    5e34:	1fff8fc4 	.word	0x1fff8fc4
    5e38:	000133bc 	.word	0x000133bc
    5e3c:	1fff8744 	.word	0x1fff8744
    5e40:	1fffb114 	.word	0x1fffb114
    5e44:	00013600 	.word	0x00013600
    5e48:	2111      	movs	r1, #17
    5e4a:	48ac      	ldr	r0, [pc, #688]	; (60fc <menu()+0x1b34>)
    5e4c:	f005 f85e 	bl	af0c <usb_serial_write>
    5e50:	48ab      	ldr	r0, [pc, #684]	; (6100 <menu()+0x1b38>)
    5e52:	f002 fbb1 	bl	85b8 <Print::println()>
    5e56:	2115      	movs	r1, #21
    5e58:	48aa      	ldr	r0, [pc, #680]	; (6104 <menu()+0x1b3c>)
    5e5a:	f005 f857 	bl	af0c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5e5e:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
    5e62:	48a7      	ldr	r0, [pc, #668]	; (6100 <menu()+0x1b38>)
    5e64:	f002 fba0 	bl	85a8 <Print::print(long)>
    5e68:	2105      	movs	r1, #5
    5e6a:	48a7      	ldr	r0, [pc, #668]	; (6108 <menu()+0x1b40>)
    5e6c:	f005 f84e 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5e70:	48a3      	ldr	r0, [pc, #652]	; (6100 <menu()+0x1b38>)
    5e72:	f002 fba1 	bl	85b8 <Print::println()>
    5e76:	2116      	movs	r1, #22
    5e78:	48a4      	ldr	r0, [pc, #656]	; (610c <menu()+0x1b44>)
    5e7a:	f005 f847 	bl	af0c <usb_serial_write>
          SERIALCONSOLE.print(settings.DCDCreq * 0.1, 1);
    5e7e:	f895 00cc 	ldrb.w	r0, [r5, #204]	; 0xcc
    5e82:	f005 fecf 	bl	bc24 <__aeabi_i2f>
    5e86:	49a2      	ldr	r1, [pc, #648]	; (6110 <menu()+0x1b48>)
    5e88:	f005 ff20 	bl	bccc <__aeabi_fmul>
    5e8c:	f005 fcfa 	bl	b884 <__aeabi_f2d>
    5e90:	460b      	mov	r3, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5e92:	2101      	movs	r1, #1
    5e94:	4602      	mov	r2, r0
    5e96:	9100      	str	r1, [sp, #0]
    5e98:	4899      	ldr	r0, [pc, #612]	; (6100 <menu()+0x1b38>)
    5e9a:	f002 fbb1 	bl	8600 <Print::printFloat(double, unsigned char)>
    5e9e:	2102      	movs	r1, #2
    5ea0:	489c      	ldr	r0, [pc, #624]	; (6114 <menu()+0x1b4c>)
    5ea2:	f005 f833 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5ea6:	4896      	ldr	r0, [pc, #600]	; (6100 <menu()+0x1b38>)
    5ea8:	f002 fb86 	bl	85b8 <Print::println()>
    5eac:	2115      	movs	r1, #21
    5eae:	489a      	ldr	r0, [pc, #616]	; (6118 <menu()+0x1b50>)
    5eb0:	f005 f82c 	bl	af0c <usb_serial_write>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    5eb4:	f8d5 10c8 	ldr.w	r1, [r5, #200]	; 0xc8
    5eb8:	4891      	ldr	r0, [pc, #580]	; (6100 <menu()+0x1b38>)
    5eba:	4633      	mov	r3, r6
    5ebc:	220a      	movs	r2, #10
    5ebe:	f002 fb93 	bl	85e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    5ec2:	2105      	movs	r1, #5
    5ec4:	4890      	ldr	r0, [pc, #576]	; (6108 <menu()+0x1b40>)
    5ec6:	f005 f821 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5eca:	488d      	ldr	r0, [pc, #564]	; (6100 <menu()+0x1b38>)
    5ecc:	f002 fb74 	bl	85b8 <Print::println()>
    5ed0:	f7ff b80f 	b.w	4ef2 <menu()+0x92a>
    5ed4:	210e      	movs	r1, #14
    5ed6:	4891      	ldr	r0, [pc, #580]	; (611c <menu()+0x1b54>)
    5ed8:	f005 f818 	bl	af0c <usb_serial_write>
    5edc:	4888      	ldr	r0, [pc, #544]	; (6100 <menu()+0x1b38>)
    5ede:	f002 fb6b 	bl	85b8 <Print::println()>
    5ee2:	f7ff b98d 	b.w	5200 <menu()+0xc38>
    5ee6:	211c      	movs	r1, #28
    5ee8:	488d      	ldr	r0, [pc, #564]	; (6120 <menu()+0x1b58>)
    5eea:	f005 f80f 	bl	af0c <usb_serial_write>
          SERIALCONSOLE.print(settings.convlow * 0.1, 1);
    5eee:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
    5ef2:	4987      	ldr	r1, [pc, #540]	; (6110 <menu()+0x1b48>)
    5ef4:	f005 feea 	bl	bccc <__aeabi_fmul>
    5ef8:	f005 fcc4 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5efc:	9600      	str	r6, [sp, #0]
    5efe:	4602      	mov	r2, r0
    5f00:	460b      	mov	r3, r1
    5f02:	487f      	ldr	r0, [pc, #508]	; (6100 <menu()+0x1b38>)
    5f04:	f002 fb7c 	bl	8600 <Print::printFloat(double, unsigned char)>
    5f08:	2105      	movs	r1, #5
    5f0a:	4886      	ldr	r0, [pc, #536]	; (6124 <menu()+0x1b5c>)
    5f0c:	f004 fffe 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5f10:	487b      	ldr	r0, [pc, #492]	; (6100 <menu()+0x1b38>)
    5f12:	f002 fb51 	bl	85b8 <Print::println()>
        if (settings.cursens == Analoguedual) {
    5f16:	6fee      	ldr	r6, [r5, #124]	; 0x7c
    5f18:	2e01      	cmp	r6, #1
    5f1a:	d118      	bne.n	5f4e <menu()+0x1986>
    5f1c:	211d      	movs	r1, #29
    5f1e:	4882      	ldr	r0, [pc, #520]	; (6128 <menu()+0x1b60>)
    5f20:	f004 fff4 	bl	af0c <usb_serial_write>
          SERIALCONSOLE.print(settings.convhigh * 0.1, 1);
    5f24:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
    5f28:	4979      	ldr	r1, [pc, #484]	; (6110 <menu()+0x1b48>)
    5f2a:	f005 fecf 	bl	bccc <__aeabi_fmul>
    5f2e:	f005 fca9 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5f32:	9600      	str	r6, [sp, #0]
    5f34:	4602      	mov	r2, r0
    5f36:	460b      	mov	r3, r1
    5f38:	4871      	ldr	r0, [pc, #452]	; (6100 <menu()+0x1b38>)
    5f3a:	f002 fb61 	bl	8600 <Print::printFloat(double, unsigned char)>
    5f3e:	2105      	movs	r1, #5
    5f40:	4878      	ldr	r0, [pc, #480]	; (6124 <menu()+0x1b5c>)
    5f42:	f004 ffe3 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5f46:	486e      	ldr	r0, [pc, #440]	; (6100 <menu()+0x1b38>)
    5f48:	f002 fb36 	bl	85b8 <Print::println()>
        if (settings.cursens == Analoguesing || settings.cursens == Analoguedual) {
    5f4c:	6fee      	ldr	r6, [r5, #124]	; 0x7c
    5f4e:	f026 0602 	bic.w	r6, r6, #2
    5f52:	2e01      	cmp	r6, #1
    5f54:	f47f a88d 	bne.w	5072 <menu()+0xaaa>
    5f58:	211c      	movs	r1, #28
    5f5a:	4874      	ldr	r0, [pc, #464]	; (612c <menu()+0x1b64>)
    5f5c:	f004 ffd6 	bl	af0c <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5f60:	f8b5 10b8 	ldrh.w	r1, [r5, #184]	; 0xb8
    5f64:	4866      	ldr	r0, [pc, #408]	; (6100 <menu()+0x1b38>)
    5f66:	f002 fb1f 	bl	85a8 <Print::print(long)>
    5f6a:	2103      	movs	r1, #3
    5f6c:	4870      	ldr	r0, [pc, #448]	; (6130 <menu()+0x1b68>)
    5f6e:	f004 ffcd 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5f72:	4863      	ldr	r0, [pc, #396]	; (6100 <menu()+0x1b38>)
    5f74:	f002 fb20 	bl	85b8 <Print::println()>
        if (settings.cursens == Analoguedual) {
    5f78:	6feb      	ldr	r3, [r5, #124]	; 0x7c
    5f7a:	2b01      	cmp	r3, #1
    5f7c:	f47f a879 	bne.w	5072 <menu()+0xaaa>
    5f80:	211f      	movs	r1, #31
    5f82:	486c      	ldr	r0, [pc, #432]	; (6134 <menu()+0x1b6c>)
    5f84:	f004 ffc2 	bl	af0c <usb_serial_write>
          SERIALCONSOLE.print(settings.changecur * 0.001);
    5f88:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    5f8c:	f005 fe4a 	bl	bc24 <__aeabi_i2f>
    5f90:	4969      	ldr	r1, [pc, #420]	; (6138 <menu()+0x1b70>)
    5f92:	f005 fe9b 	bl	bccc <__aeabi_fmul>
    5f96:	f005 fc75 	bl	b884 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5f9a:	2502      	movs	r5, #2
    5f9c:	4602      	mov	r2, r0
    5f9e:	460b      	mov	r3, r1
    5fa0:	9500      	str	r5, [sp, #0]
    5fa2:	4857      	ldr	r0, [pc, #348]	; (6100 <menu()+0x1b38>)
    5fa4:	f002 fb2c 	bl	8600 <Print::printFloat(double, unsigned char)>
    5fa8:	4629      	mov	r1, r5
    5faa:	4864      	ldr	r0, [pc, #400]	; (613c <menu()+0x1b74>)
    5fac:	f004 ffae 	bl	af0c <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5fb0:	4853      	ldr	r0, [pc, #332]	; (6100 <menu()+0x1b38>)
    5fb2:	f002 fb01 	bl	85b8 <Print::println()>
    5fb6:	f7ff b85c 	b.w	5072 <menu()+0xaaa>
          debugdigits = Serial.parseInt();
    5fba:	4851      	ldr	r0, [pc, #324]	; (6100 <menu()+0x1b38>)
    5fbc:	f002 fc5c 	bl	8878 <Stream::parseInt()>
    5fc0:	4b5f      	ldr	r3, [pc, #380]	; (6140 <menu()+0x1b78>)
    5fc2:	6018      	str	r0, [r3, #0]
    5fc4:	f7fe bfa9 	b.w	4f1a <menu()+0x952>
  if (menuload == 8) {
    5fc8:	2064      	movs	r0, #100	; 0x64
    5fca:	f7fe bca1 	b.w	4910 <menu()+0x348>
          contctrl = 0;
    5fce:	4b5d      	ldr	r3, [pc, #372]	; (6144 <menu()+0x1b7c>)
    5fd0:	2500      	movs	r5, #0
          digitalWrite(OUT1, LOW);
    5fd2:	200b      	movs	r0, #11
    5fd4:	4629      	mov	r1, r5
          contctrl = 0;
    5fd6:	601d      	str	r5, [r3, #0]
          digitalWrite(OUT1, LOW);
    5fd8:	f003 f926 	bl	9228 <digitalWrite>
          digitalWrite(OUT2, LOW);
    5fdc:	4629      	mov	r1, r5
    5fde:	200c      	movs	r0, #12
    5fe0:	f003 f922 	bl	9228 <digitalWrite>
          digitalWrite(OUT3, LOW);
    5fe4:	4629      	mov	r1, r5
    5fe6:	2014      	movs	r0, #20
    5fe8:	f003 f91e 	bl	9228 <digitalWrite>
          digitalWrite(OUT4, LOW);
    5fec:	4629      	mov	r1, r5
    5fee:	2015      	movs	r0, #21
    5ff0:	f003 f91a 	bl	9228 <digitalWrite>
        incomingByte = 'd';
    5ff4:	2264      	movs	r2, #100	; 0x64
  if (menuload == 2) {
    5ff6:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'd';
    5ff8:	6032      	str	r2, [r6, #0]
        break;
    5ffa:	f7fe bf95 	b.w	4f28 <menu()+0x960>
    5ffe:	211e      	movs	r1, #30
    6000:	4851      	ldr	r0, [pc, #324]	; (6148 <menu()+0x1b80>)
    6002:	f004 ff83 	bl	af0c <usb_serial_write>
    6006:	483e      	ldr	r0, [pc, #248]	; (6100 <menu()+0x1b38>)
    6008:	f002 fad6 	bl	85b8 <Print::println()>
    600c:	f7ff b808 	b.w	5020 <menu()+0xa58>
    6010:	2120      	movs	r1, #32
    6012:	484e      	ldr	r0, [pc, #312]	; (614c <menu()+0x1b84>)
    6014:	f004 ff7a 	bl	af0c <usb_serial_write>
    6018:	4839      	ldr	r0, [pc, #228]	; (6100 <menu()+0x1b38>)
    601a:	f002 facd 	bl	85b8 <Print::println()>
    601e:	f7fe bfff 	b.w	5020 <menu()+0xa58>
    6022:	2117      	movs	r1, #23
    6024:	484a      	ldr	r0, [pc, #296]	; (6150 <menu()+0x1b88>)
    6026:	f004 ff71 	bl	af0c <usb_serial_write>
    602a:	4835      	ldr	r0, [pc, #212]	; (6100 <menu()+0x1b38>)
    602c:	f002 fac4 	bl	85b8 <Print::println()>
    6030:	f7fe bff6 	b.w	5020 <menu()+0xa58>
  if (menuload == 6)  //Charging settings
    6034:	2b06      	cmp	r3, #6
    6036:	f04f 0064 	mov.w	r0, #100	; 0x64
    603a:	f43f a98c 	beq.w	5356 <menu()+0xd8e>
    603e:	f7fe bd4a 	b.w	4ad6 <menu()+0x50e>
  if (menuload == 3) {
    6042:	2b03      	cmp	r3, #3
    6044:	f43f aec5 	beq.w	5dd2 <menu()+0x180a>
  if (menuload == 1) {
    6048:	2b01      	cmp	r3, #1
    604a:	f47e ab19 	bne.w	4680 <menu()+0xb8>
    604e:	4d41      	ldr	r5, [pc, #260]	; (6154 <menu()+0x1b8c>)
    6050:	f7fe bf1e 	b.w	4e90 <menu()+0x8c8>
  if (menuload == 5) {
    6054:	2b05      	cmp	r3, #5
    6056:	f43e ac70 	beq.w	493a <menu()+0x372>
    605a:	e486      	b.n	596a <menu()+0x13a2>
    605c:	4d3d      	ldr	r5, [pc, #244]	; (6154 <menu()+0x1b8c>)
    605e:	f7fe bd71 	b.w	4b44 <menu()+0x57c>
    6062:	4d3c      	ldr	r5, [pc, #240]	; (6154 <menu()+0x1b8c>)
    6064:	e4df      	b.n	5a26 <menu()+0x145e>
    6066:	4d3b      	ldr	r5, [pc, #236]	; (6154 <menu()+0x1b8c>)
    6068:	f7fe bca7 	b.w	49ba <menu()+0x3f2>
        virtual int available() { return usb_serial_available(); }
    606c:	f004 ff1c 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    6070:	2800      	cmp	r0, #0
    6072:	f77e ad2e 	ble.w	4ad2 <menu()+0x50a>
          settings.ChargeVsetpoint = Serial.parseInt();
    6076:	4822      	ldr	r0, [pc, #136]	; (6100 <menu()+0x1b38>)
          settings.ChargeVsetpoint = settings.ChargeVsetpoint / 1000;
    6078:	4d36      	ldr	r5, [pc, #216]	; (6154 <menu()+0x1b8c>)
          settings.ChargeVsetpoint = Serial.parseInt();
    607a:	f002 fbfd 	bl	8878 <Stream::parseInt()>
    607e:	f005 fdd1 	bl	bc24 <__aeabi_i2f>
          settings.ChargeVsetpoint = settings.ChargeVsetpoint / 1000;
    6082:	4935      	ldr	r1, [pc, #212]	; (6158 <menu()+0x1b90>)
    6084:	f005 fed6 	bl	be34 <__aeabi_fdiv>
          menuload = 1;
    6088:	2301      	movs	r3, #1
    608a:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    608c:	2365      	movs	r3, #101	; 0x65
          settings.ChargeVsetpoint = settings.ChargeVsetpoint / 1000;
    608e:	6168      	str	r0, [r5, #20]
          incomingByte = 'e';
    6090:	6033      	str	r3, [r6, #0]
    switch (incomingByte) {
    6092:	f7fe bd57 	b.w	4b44 <menu()+0x57c>
    6096:	f004 ff07 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    609a:	2800      	cmp	r0, #0
    609c:	f77e acdc 	ble.w	4a58 <menu()+0x490>
          settings.WarnOff = Serial.parseInt();
    60a0:	4817      	ldr	r0, [pc, #92]	; (6100 <menu()+0x1b38>)
          settings.WarnOff = settings.WarnOff * 0.001;
    60a2:	4d2c      	ldr	r5, [pc, #176]	; (6154 <menu()+0x1b8c>)
          settings.WarnOff = Serial.parseInt();
    60a4:	f002 fbe8 	bl	8878 <Stream::parseInt()>
    60a8:	f005 fdbc 	bl	bc24 <__aeabi_i2f>
          settings.WarnOff = settings.WarnOff * 0.001;
    60ac:	4922      	ldr	r1, [pc, #136]	; (6138 <menu()+0x1b70>)
    60ae:	f005 fe0d 	bl	bccc <__aeabi_fmul>
          menuload = 1;
    60b2:	2301      	movs	r3, #1
    60b4:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    60b6:	2361      	movs	r3, #97	; 0x61
          settings.WarnOff = settings.WarnOff * 0.001;
    60b8:	6268      	str	r0, [r5, #36]	; 0x24
          incomingByte = 'a';
    60ba:	6033      	str	r3, [r6, #0]
    switch (incomingByte) {
    60bc:	f7fe be3b 	b.w	4d36 <menu()+0x76e>
        settings.SerialCan = !settings.SerialCan;
    60c0:	4d24      	ldr	r5, [pc, #144]	; (6154 <menu()+0x1b8c>)
    60c2:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
    60c6:	fab3 f383 	clz	r3, r3
    60ca:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    60cc:	2201      	movs	r2, #1
        settings.SerialCan = !settings.SerialCan;
    60ce:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
          incomingByte = 'x';
    60d2:	2378      	movs	r3, #120	; 0x78
        menuload = 1;
    60d4:	6022      	str	r2, [r4, #0]
          incomingByte = 'x';
    60d6:	6033      	str	r3, [r6, #0]
  if (menuload == 1) {
    60d8:	f7fe beda 	b.w	4e90 <menu()+0x8c8>
    60dc:	f004 fee4 	bl	aea8 <usb_serial_available>
        if (Serial.available() > 0) {
    60e0:	2800      	cmp	r0, #0
    60e2:	f77f ac40 	ble.w	5966 <menu()+0x139e>
          settings.Pretime = Serial.parseInt();
    60e6:	4806      	ldr	r0, [pc, #24]	; (6100 <menu()+0x1b38>)
    60e8:	4d1a      	ldr	r5, [pc, #104]	; (6154 <menu()+0x1b8c>)
    60ea:	f002 fbc5 	bl	8878 <Stream::parseInt()>
          menuload = 1;
    60ee:	2301      	movs	r3, #1
    60f0:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    60f2:	236b      	movs	r3, #107	; 0x6b
          settings.Pretime = Serial.parseInt();
    60f4:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
          incomingByte = 'k';
    60f8:	6033      	str	r3, [r6, #0]
    switch (incomingByte) {
    60fa:	e494      	b.n	5a26 <menu()+0x145e>
    60fc:	000133ec 	.word	0x000133ec
    6100:	1fff880c 	.word	0x1fff880c
    6104:	00013400 	.word	0x00013400
    6108:	00013418 	.word	0x00013418
    610c:	00013420 	.word	0x00013420
    6110:	3dcccccd 	.word	0x3dcccccd
    6114:	00013438 	.word	0x00013438
    6118:	0001343c 	.word	0x0001343c
    611c:	00013894 	.word	0x00013894
    6120:	000139d8 	.word	0x000139d8
    6124:	000139f8 	.word	0x000139f8
    6128:	00013a00 	.word	0x00013a00
    612c:	00013a20 	.word	0x00013a20
    6130:	00013a40 	.word	0x00013a40
    6134:	00013a44 	.word	0x00013a44
    6138:	3a83126f 	.word	0x3a83126f
    613c:	00013a64 	.word	0x00013a64
    6140:	1fff8748 	.word	0x1fff8748
    6144:	1fffb0e4 	.word	0x1fffb0e4
    6148:	00013918 	.word	0x00013918
    614c:	00013938 	.word	0x00013938
    6150:	0001395c 	.word	0x0001395c
    6154:	1fffb204 	.word	0x1fffb204
    6158:	447a0000 	.word	0x447a0000

0000615c <loop>:
void loop() {
    615c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (Can0.available()) {
    6160:	4c89      	ldr	r4, [pc, #548]	; (6388 <loop+0x22c>)
void loop() {
    6162:	b098      	sub	sp, #96	; 0x60
  while (Can0.available()) {
    6164:	e001      	b.n	616a <loop+0xe>
    canread();
    6166:	f7fd f971 	bl	344c <canread()>
  while (Can0.available()) {
    616a:	4620      	mov	r0, r4
    616c:	f000 ff58 	bl	7020 <FlexCAN::available()>
    6170:	2800      	cmp	r0, #0
    6172:	d1f8      	bne.n	6166 <loop+0xa>
    6174:	f004 fe98 	bl	aea8 <usb_serial_available>
  if (SERIALCONSOLE.available() > 0) {
    6178:	2800      	cmp	r0, #0
    617a:	dd01      	ble.n	6180 <loop+0x24>
    menu();
    617c:	f7fe fa24 	bl	45c8 <menu()>
  if (settings.SerialCan == 1) {
    6180:	4c82      	ldr	r4, [pc, #520]	; (638c <loop+0x230>)
    6182:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    6186:	2b01      	cmp	r3, #1
    6188:	f000 80ba 	beq.w	6300 <loop+0x1a4>
  if (outputcheck != 1) {
    618c:	4e80      	ldr	r6, [pc, #512]	; (6390 <loop+0x234>)
    618e:	6833      	ldr	r3, [r6, #0]
    6190:	2b01      	cmp	r3, #1
    6192:	d127      	bne.n	61e4 <loop+0x88>
    6194:	4d7f      	ldr	r5, [pc, #508]	; (6394 <loop+0x238>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6196:	682b      	ldr	r3, [r5, #0]
  if (millis() - looptime > 1000) {
    6198:	4a7f      	ldr	r2, [pc, #508]	; (6398 <loop+0x23c>)
    619a:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    619c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    619e:	6811      	ldr	r1, [r2, #0]
    61a0:	1a5b      	subs	r3, r3, r1
    61a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    61a6:	d831      	bhi.n	620c <loop+0xb0>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    61a8:	682b      	ldr	r3, [r5, #0]
  if (millis() - looptime1 > settings.chargerspd) {
    61aa:	4a7c      	ldr	r2, [pc, #496]	; (639c <loop+0x240>)
    61ac:	9316      	str	r3, [sp, #88]	; 0x58
    61ae:	6811      	ldr	r1, [r2, #0]
	return ret;
    61b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
    61b2:	1a5b      	subs	r3, r3, r1
    61b4:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
    61b8:	428b      	cmp	r3, r1
    61ba:	d90b      	bls.n	61d4 <loop+0x78>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    61bc:	682b      	ldr	r3, [r5, #0]
    61be:	9317      	str	r3, [sp, #92]	; 0x5c
    if (settings.ESSmode == 1) {
    61c0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
	return ret;
    61c4:	9917      	ldr	r1, [sp, #92]	; 0x5c
    looptime1 = millis();
    61c6:	6011      	str	r1, [r2, #0]
    if (settings.ESSmode == 1) {
    61c8:	2b01      	cmp	r3, #1
    61ca:	d006      	beq.n	61da <loop+0x7e>
      if (settings.SerialCan == 1) {
    61cc:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
    61d0:	2b01      	cmp	r3, #1
    61d2:	d102      	bne.n	61da <loop+0x7e>
}
    61d4:	b018      	add	sp, #96	; 0x60
    61d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    61da:	b018      	add	sp, #96	; 0x60
    61dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      chargercomms();
    61e0:	f7fd bdc4 	b.w	3d6c <chargercomms()>
    contcon();
    61e4:	f7fc fe52 	bl	2e8c <contcon()>
    if (settings.ESSmode == 1) {
    61e8:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
    61ec:	2d01      	cmp	r5, #1
    61ee:	f000 80f7 	beq.w	63e0 <loop+0x284>
      switch (bmsstatus) {
    61f2:	4f6b      	ldr	r7, [pc, #428]	; (63a0 <loop+0x244>)
    61f4:	783b      	ldrb	r3, [r7, #0]
    61f6:	2b05      	cmp	r3, #5
    61f8:	f200 80bc 	bhi.w	6374 <loop+0x218>
    61fc:	e8df f013 	tbh	[pc, r3, lsl #1]
    6200:	01f201d9 	.word	0x01f201d9
    6204:	02800250 	.word	0x02800250
    6208:	02dd02d6 	.word	0x02dd02d6
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    620c:	682b      	ldr	r3, [r5, #0]
    620e:	930c      	str	r3, [sp, #48]	; 0x30
	return ret;
    6210:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bms.getAllVoltTemp();
    6212:	4864      	ldr	r0, [pc, #400]	; (63a4 <loop+0x248>)
    looptime = millis();
    6214:	6013      	str	r3, [r2, #0]
    bms.getAllVoltTemp();
    6216:	f7fa fb1d 	bl	854 <BMSModuleManager::getAllVoltTemp()>
    if (settings.ESSmode == 1) {
    621a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    621e:	2b01      	cmp	r3, #1
    6220:	d171      	bne.n	6306 <loop+0x1aa>
      if (SOCset != 0) {
    6222:	4b61      	ldr	r3, [pc, #388]	; (63a8 <loop+0x24c>)
    6224:	681b      	ldr	r3, [r3, #0]
    6226:	2b00      	cmp	r3, #0
    6228:	f040 8194 	bne.w	6554 <loop+0x3f8>
    if (balancecells == 1) {
    622c:	4b5f      	ldr	r3, [pc, #380]	; (63ac <loop+0x250>)
    622e:	681b      	ldr	r3, [r3, #0]
    6230:	2b01      	cmp	r3, #1
    6232:	f000 818b 	beq.w	654c <loop+0x3f0>
    if (debug != 0) {
    6236:	4b5e      	ldr	r3, [pc, #376]	; (63b0 <loop+0x254>)
    6238:	681b      	ldr	r3, [r3, #0]
    623a:	2b00      	cmp	r3, #0
    623c:	f040 816d 	bne.w	651a <loop+0x3be>
    if (CSVdebug != 0) {
    6240:	4f5c      	ldr	r7, [pc, #368]	; (63b4 <loop+0x258>)
    6242:	683b      	ldr	r3, [r7, #0]
    6244:	2b00      	cmp	r3, #0
    6246:	f040 815d 	bne.w	6504 <loop+0x3a8>
    if (inputcheck != 0) {
    624a:	4b5b      	ldr	r3, [pc, #364]	; (63b8 <loop+0x25c>)
    624c:	681b      	ldr	r3, [r3, #0]
    624e:	2b00      	cmp	r3, #0
    6250:	f040 8155 	bne.w	64fe <loop+0x3a2>
    if (outputcheck != 0) {
    6254:	6833      	ldr	r3, [r6, #0]
    6256:	2b00      	cmp	r3, #0
    6258:	f000 814e 	beq.w	64f8 <loop+0x39c>
      outputdebug();
    625c:	f7fd fb7c 	bl	3958 <outputdebug()>
    updateSOC();
    6260:	f7fc fc5a 	bl	2b18 <updateSOC()>
    currentlimit();
    6264:	f7fd f986 	bl	3574 <currentlimit()>
    VEcan();
    6268:	f7fc ffd4 	bl	3214 <VEcan()>
  msg.id = 0x200;
    626c:	4953      	ldr	r1, [pc, #332]	; (63bc <loop+0x260>)
    if (cellspresent == 0 && SOCset == 1) {
    626e:	4e54      	ldr	r6, [pc, #336]	; (63c0 <loop+0x264>)
  Can0.write(msg);
    6270:	4845      	ldr	r0, [pc, #276]	; (6388 <loop+0x22c>)
  msg.id = 0x200;
    6272:	f44f 7300 	mov.w	r3, #512	; 0x200
    6276:	600b      	str	r3, [r1, #0]
  msg.len = 3;
    6278:	2303      	movs	r3, #3
    627a:	71cb      	strb	r3, [r1, #7]
  msg.buf[0] = 0x02;
    627c:	2302      	movs	r3, #2
    627e:	810b      	strh	r3, [r1, #8]
  msg.buf[2] = 0x00;
    6280:	2300      	movs	r3, #0
    6282:	728b      	strb	r3, [r1, #10]
  Can0.write(msg);
    6284:	f000 ffba 	bl	71fc <FlexCAN::write(CAN_message_t const&)>
    if (cellspresent == 0 && SOCset == 1) {
    6288:	6833      	ldr	r3, [r6, #0]
      cellspresent = bms.seriescells();
    628a:	4846      	ldr	r0, [pc, #280]	; (63a4 <loop+0x248>)
    if (cellspresent == 0 && SOCset == 1) {
    628c:	b923      	cbnz	r3, 6298 <loop+0x13c>
    628e:	4b46      	ldr	r3, [pc, #280]	; (63a8 <loop+0x24c>)
    6290:	681b      	ldr	r3, [r3, #0]
    6292:	2b01      	cmp	r3, #1
    6294:	f000 82ec 	beq.w	6870 <loop+0x714>
      if (cellspresent != bms.seriescells() || cellspresent != (settings.Scells * settings.Pstrings))  //detect a fault in cells detected
    6298:	f7fa faa0 	bl	7dc <BMSModuleManager::seriescells()>
    629c:	6833      	ldr	r3, [r6, #0]
    629e:	4298      	cmp	r0, r3
    62a0:	d105      	bne.n	62ae <loop+0x152>
    62a2:	6d23      	ldr	r3, [r4, #80]	; 0x50
    62a4:	6d62      	ldr	r2, [r4, #84]	; 0x54
    62a6:	fb02 f303 	mul.w	r3, r2, r3
    62aa:	4298      	cmp	r0, r3
    62ac:	d017      	beq.n	62de <loop+0x182>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    62ae:	2102      	movs	r1, #2
    62b0:	4844      	ldr	r0, [pc, #272]	; (63c4 <loop+0x268>)
    62b2:	f004 fe2b 	bl	af0c <usb_serial_write>
    62b6:	4844      	ldr	r0, [pc, #272]	; (63c8 <loop+0x26c>)
    62b8:	f002 f97e 	bl	85b8 <Print::println()>
    62bc:	211d      	movs	r1, #29
    62be:	4843      	ldr	r0, [pc, #268]	; (63cc <loop+0x270>)
    62c0:	f004 fe24 	bl	af0c <usb_serial_write>
    62c4:	2102      	movs	r1, #2
    62c6:	483f      	ldr	r0, [pc, #252]	; (63c4 <loop+0x268>)
    62c8:	f004 fe20 	bl	af0c <usb_serial_write>
    62cc:	483e      	ldr	r0, [pc, #248]	; (63c8 <loop+0x26c>)
    62ce:	f002 f973 	bl	85b8 <Print::println()>
        bmsstatus = Error;
    62d2:	4b33      	ldr	r3, [pc, #204]	; (63a0 <loop+0x244>)
    62d4:	2205      	movs	r2, #5
    62d6:	701a      	strb	r2, [r3, #0]
        ErrorReason = 3;
    62d8:	4b3d      	ldr	r3, [pc, #244]	; (63d0 <loop+0x274>)
    62da:	2203      	movs	r2, #3
    62dc:	601a      	str	r2, [r3, #0]
    alarmupdate();
    62de:	f7fb fdb5 	bl	1e4c <alarmupdate()>
    if (CSVdebug != 1) {
    62e2:	683b      	ldr	r3, [r7, #0]
    62e4:	2b01      	cmp	r3, #1
    62e6:	d001      	beq.n	62ec <loop+0x190>
      dashupdate();
    62e8:	f7fd fb8c 	bl	3a04 <dashupdate()>
  noInterrupts();  //   No - reset WDT
    62ec:	b672      	cpsid	i
  WDOG_REFRESH = 0xA602;
    62ee:	4b39      	ldr	r3, [pc, #228]	; (63d4 <loop+0x278>)
    62f0:	f24a 6102 	movw	r1, #42498	; 0xa602
  WDOG_REFRESH = 0xB480;
    62f4:	f24b 4280 	movw	r2, #46208	; 0xb480
  WDOG_REFRESH = 0xA602;
    62f8:	8199      	strh	r1, [r3, #12]
  WDOG_REFRESH = 0xB480;
    62fa:	819a      	strh	r2, [r3, #12]
  interrupts();
    62fc:	b662      	cpsie	i
}
    62fe:	e753      	b.n	61a8 <loop+0x4c>
    SerialCanRecieve();
    6300:	f7fd fe68 	bl	3fd4 <SerialCanRecieve()>
    6304:	e742      	b.n	618c <loop+0x30>
      if (bms.getLowCellVolt() < settings.UnderVSetpoint) {
    6306:	4827      	ldr	r0, [pc, #156]	; (63a4 <loop+0x248>)
    6308:	f7fa fc60 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    630c:	6921      	ldr	r1, [r4, #16]
    630e:	f005 fe7b 	bl	c008 <__aeabi_fcmplt>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6312:	682b      	ldr	r3, [r5, #0]
    6314:	2800      	cmp	r0, #0
    6316:	f000 8109 	beq.w	652c <loop+0x3d0>
        if (UnderTime < millis())  //check is last time not undervoltage is longer thatn UnderDur ago
    631a:	4a2f      	ldr	r2, [pc, #188]	; (63d8 <loop+0x27c>)
    631c:	9311      	str	r3, [sp, #68]	; 0x44
	return ret;
    631e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    6320:	6812      	ldr	r2, [r2, #0]
    6322:	429a      	cmp	r2, r3
    6324:	f0c0 827c 	bcc.w	6820 <loop+0x6c4>
      if (bms.getHighCellVolt() < settings.UnderVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    6328:	481e      	ldr	r0, [pc, #120]	; (63a4 <loop+0x248>)
    632a:	f7fa fc77 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    632e:	6921      	ldr	r1, [r4, #16]
    6330:	f005 fe6a 	bl	c008 <__aeabi_fcmplt>
    6334:	2800      	cmp	r0, #0
    6336:	f000 8132 	beq.w	659e <loop+0x442>
        bmsstatus = Error;
    633a:	4b19      	ldr	r3, [pc, #100]	; (63a0 <loop+0x244>)
    633c:	2205      	movs	r2, #5
    633e:	701a      	strb	r2, [r3, #0]
      if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    6340:	4818      	ldr	r0, [pc, #96]	; (63a4 <loop+0x248>)
    6342:	f7fa fc6b 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6346:	68e1      	ldr	r1, [r4, #12]
    6348:	f005 fe7c 	bl	c044 <__aeabi_fcmpgt>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    634c:	682b      	ldr	r3, [r5, #0]
    634e:	2800      	cmp	r0, #0
    6350:	f000 80f4 	beq.w	653c <loop+0x3e0>
        if (OverTime < millis())  //check is last time not undervoltage is longer thatn UnderDur ago
    6354:	4a21      	ldr	r2, [pc, #132]	; (63dc <loop+0x280>)
    6356:	9313      	str	r3, [sp, #76]	; 0x4c
	return ret;
    6358:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    635a:	6812      	ldr	r2, [r2, #0]
    635c:	429a      	cmp	r2, r3
    635e:	f4bf af65 	bcs.w	622c <loop+0xd0>
              bmsstatus = Error;
    6362:	4b0f      	ldr	r3, [pc, #60]	; (63a0 <loop+0x244>)
    6364:	2205      	movs	r2, #5
    6366:	701a      	strb	r2, [r3, #0]
    6368:	e760      	b.n	622c <loop+0xd0>
        if (SOCset == 1) {
    636a:	4b0f      	ldr	r3, [pc, #60]	; (63a8 <loop+0x24c>)
    636c:	681b      	ldr	r3, [r3, #0]
    636e:	2b01      	cmp	r3, #1
    6370:	f000 826c 	beq.w	684c <loop+0x6f0>
    6374:	4d07      	ldr	r5, [pc, #28]	; (6394 <loop+0x238>)
    if (settings.cursens == Analoguedual || settings.cursens == Analoguesing) {
    6376:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    6378:	f023 0302 	bic.w	r3, r3, #2
    637c:	2b01      	cmp	r3, #1
    637e:	f47f af0a 	bne.w	6196 <loop+0x3a>
      getcurrent();
    6382:	f7fc f8cd 	bl	2520 <getcurrent()>
    6386:	e706      	b.n	6196 <loop+0x3a>
    6388:	1fffb2e4 	.word	0x1fffb2e4
    638c:	1fffb204 	.word	0x1fffb204
    6390:	1fffb1fc 	.word	0x1fffb1fc
    6394:	1fffb4d8 	.word	0x1fffb4d8
    6398:	1fffb140 	.word	0x1fffb140
    639c:	1fffb144 	.word	0x1fffb144
    63a0:	1fffb008 	.word	0x1fffb008
    63a4:	1fff8fe0 	.word	0x1fff8fe0
    63a8:	1fff8fc4 	.word	0x1fff8fc4
    63ac:	1fff8fdc 	.word	0x1fff8fdc
    63b0:	1fff8744 	.word	0x1fff8744
    63b4:	1fff8fa0 	.word	0x1fff8fa0
    63b8:	1fffb134 	.word	0x1fffb134
    63bc:	1fffb16c 	.word	0x1fffb16c
    63c0:	1fffb074 	.word	0x1fffb074
    63c4:	00012a24 	.word	0x00012a24
    63c8:	1fff880c 	.word	0x1fff880c
    63cc:	00013df8 	.word	0x00013df8
    63d0:	1fff8fb0 	.word	0x1fff8fb0
    63d4:	40052000 	.word	0x40052000
    63d8:	1fff8fcc 	.word	0x1fff8fcc
    63dc:	1fff8fb4 	.word	0x1fff8fb4
      if (bmsstatus != Error) {
    63e0:	4b9f      	ldr	r3, [pc, #636]	; (6660 <loop+0x504>)
    63e2:	781b      	ldrb	r3, [r3, #0]
    63e4:	2b05      	cmp	r3, #5
    63e6:	d0c0      	beq.n	636a <loop+0x20e>
        contctrl = contctrl | 4;  //turn on negative contactor
    63e8:	4f9e      	ldr	r7, [pc, #632]	; (6664 <loop+0x508>)
          if (storagemode == 1) {
    63ea:	f8df 827c 	ldr.w	r8, [pc, #636]	; 6668 <loop+0x50c>
        contctrl = contctrl | 4;  //turn on negative contactor
    63ee:	683b      	ldr	r3, [r7, #0]
        if (digitalRead(IN1) == LOW)  //Key OFF
    63f0:	2011      	movs	r0, #17
        contctrl = contctrl | 4;  //turn on negative contactor
    63f2:	f043 0304 	orr.w	r3, r3, #4
    63f6:	603b      	str	r3, [r7, #0]
        if (digitalRead(IN1) == LOW)  //Key OFF
    63f8:	f002 ff3c 	bl	9274 <digitalRead>
          if (storagemode == 1) {
    63fc:	f8d8 3000 	ldr.w	r3, [r8]
        if (digitalRead(IN1) == LOW)  //Key OFF
    6400:	2800      	cmp	r0, #0
    6402:	f000 8207 	beq.w	6814 <loop+0x6b8>
          if (storagemode == 0) {
    6406:	b90b      	cbnz	r3, 640c <loop+0x2b0>
            storagemode = 1;
    6408:	f8c8 5000 	str.w	r5, [r8]
        if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    640c:	4897      	ldr	r0, [pc, #604]	; (666c <loop+0x510>)
    640e:	f7fa fc05 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6412:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    6414:	f005 fe16 	bl	c044 <__aeabi_fcmpgt>
    6418:	2800      	cmp	r0, #0
    641a:	f040 8280 	bne.w	691e <loop+0x7c2>
        if (storagemode == 1) {
    641e:	f8d8 8000 	ldr.w	r8, [r8]
    6422:	4b93      	ldr	r3, [pc, #588]	; (6670 <loop+0x514>)
    6424:	f1b8 0f01 	cmp.w	r8, #1
    6428:	6018      	str	r0, [r3, #0]
          if (bms.getHighCellVolt() > settings.StoreVsetpoint) {
    642a:	4890      	ldr	r0, [pc, #576]	; (666c <loop+0x510>)
        if (storagemode == 1) {
    642c:	f000 8250 	beq.w	68d0 <loop+0x774>
          if (bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighCellVolt() > settings.ChargeVsetpoint) {
    6430:	f7fa fbf4 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6434:	68e1      	ldr	r1, [r4, #12]
    6436:	f005 fe05 	bl	c044 <__aeabi_fcmpgt>
    643a:	2800      	cmp	r0, #0
    643c:	f040 8222 	bne.w	6884 <loop+0x728>
    6440:	488a      	ldr	r0, [pc, #552]	; (666c <loop+0x510>)
    6442:	f7fa fbeb 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6446:	6961      	ldr	r1, [r4, #20]
    6448:	f005 fdfc 	bl	c044 <__aeabi_fcmpgt>
    644c:	4605      	mov	r5, r0
    644e:	2800      	cmp	r0, #0
    6450:	f040 8218 	bne.w	6884 <loop+0x728>
            if (Charged == 1) {
    6454:	f8df a21c 	ldr.w	sl, [pc, #540]	; 6674 <loop+0x518>
    6458:	f8da 9000 	ldr.w	r9, [sl]
    645c:	f1b9 0f01 	cmp.w	r9, #1
    6460:	f000 832a 	beq.w	6ab8 <loop+0x95c>
              digitalWrite(OUT3, HIGH);  //turn on charger
    6464:	2101      	movs	r1, #1
    6466:	2014      	movs	r0, #20
    6468:	f002 fede 	bl	9228 <digitalWrite>
              if (Pretimer + settings.Pretime < millis()) {
    646c:	4a82      	ldr	r2, [pc, #520]	; (6678 <loop+0x51c>)
    646e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    6472:	6812      	ldr	r2, [r2, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6474:	4d81      	ldr	r5, [pc, #516]	; (667c <loop+0x520>)
    6476:	4413      	add	r3, r2
    6478:	682a      	ldr	r2, [r5, #0]
    647a:	9206      	str	r2, [sp, #24]
	return ret;
    647c:	9a06      	ldr	r2, [sp, #24]
    647e:	4293      	cmp	r3, r2
    6480:	d203      	bcs.n	648a <loop+0x32e>
                contctrl = contctrl | 2;
    6482:	683b      	ldr	r3, [r7, #0]
    6484:	f043 0302 	orr.w	r3, r3, #2
    6488:	603b      	str	r3, [r7, #0]
        if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getLowCellVolt() < settings.DischVsetpoint) {
    648a:	4878      	ldr	r0, [pc, #480]	; (666c <loop+0x510>)
    648c:	f7fa fb9e 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    6490:	6921      	ldr	r1, [r4, #16]
    6492:	f005 fdb9 	bl	c008 <__aeabi_fcmplt>
    6496:	b940      	cbnz	r0, 64aa <loop+0x34e>
    6498:	4874      	ldr	r0, [pc, #464]	; (666c <loop+0x510>)
    649a:	f7fa fb97 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    649e:	69a1      	ldr	r1, [r4, #24]
    64a0:	f005 fdb2 	bl	c008 <__aeabi_fcmplt>
    64a4:	2800      	cmp	r0, #0
    64a6:	f000 82a3 	beq.w	69f0 <loop+0x894>
          digitalWrite(OUT1, LOW);  //turn off discharge
    64aa:	2100      	movs	r1, #0
    64ac:	200b      	movs	r0, #11
    64ae:	f002 febb 	bl	9228 <digitalWrite>
          contctrl = contctrl & 254;
    64b2:	683b      	ldr	r3, [r7, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    64b4:	682a      	ldr	r2, [r5, #0]
    64b6:	9207      	str	r2, [sp, #28]
    64b8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    64bc:	603b      	str	r3, [r7, #0]
          Pretimer1 = millis();
    64be:	4b70      	ldr	r3, [pc, #448]	; (6680 <loop+0x524>)
	return ret;
    64c0:	9a07      	ldr	r2, [sp, #28]
    64c2:	601a      	str	r2, [r3, #0]
        if (SOCset == 1) {
    64c4:	4b6f      	ldr	r3, [pc, #444]	; (6684 <loop+0x528>)
    64c6:	681b      	ldr	r3, [r3, #0]
    64c8:	2b01      	cmp	r3, #1
    64ca:	f47f af54 	bne.w	6376 <loop+0x21a>
          if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    64ce:	4867      	ldr	r0, [pc, #412]	; (666c <loop+0x510>)
    64d0:	f7fa fb7c 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    64d4:	6921      	ldr	r1, [r4, #16]
    64d6:	f005 fd97 	bl	c008 <__aeabi_fcmplt>
    64da:	b940      	cbnz	r0, 64ee <loop+0x392>
    64dc:	4863      	ldr	r0, [pc, #396]	; (666c <loop+0x510>)
    64de:	f7fa fb9d 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    64e2:	68e1      	ldr	r1, [r4, #12]
    64e4:	f005 fdae 	bl	c044 <__aeabi_fcmpgt>
    64e8:	2800      	cmp	r0, #0
    64ea:	f000 8306 	beq.w	6afa <loop+0x99e>
            digitalWrite(OUT2, HIGH);  //trip breaker
    64ee:	2101      	movs	r1, #1
    64f0:	200c      	movs	r0, #12
    64f2:	f002 fe99 	bl	9228 <digitalWrite>
    64f6:	e73e      	b.n	6376 <loop+0x21a>
      gaugeupdate();
    64f8:	f7fb fd3c 	bl	1f74 <gaugeupdate()>
    64fc:	e6b0      	b.n	6260 <loop+0x104>
      inputdebug();
    64fe:	f7fd f9c5 	bl	388c <inputdebug()>
    6502:	e6a7      	b.n	6254 <loop+0xf8>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6504:	682b      	ldr	r3, [r5, #0]
    6506:	9315      	str	r3, [sp, #84]	; 0x54
      bms.printAllCSV(millis(), currentact, SOC);
    6508:	4a5f      	ldr	r2, [pc, #380]	; (6688 <loop+0x52c>)
    650a:	4b60      	ldr	r3, [pc, #384]	; (668c <loop+0x530>)
	return ret;
    650c:	9915      	ldr	r1, [sp, #84]	; 0x54
    650e:	681b      	ldr	r3, [r3, #0]
    6510:	6812      	ldr	r2, [r2, #0]
    6512:	4856      	ldr	r0, [pc, #344]	; (666c <loop+0x510>)
    6514:	f7fb f89e 	bl	1654 <BMSModuleManager::printAllCSV(unsigned long, float, int)>
    6518:	e697      	b.n	624a <loop+0xee>
      printbmsstat();
    651a:	f7fb fe43 	bl	21a4 <printbmsstat()>
      bms.printPackDetails(debugdigits, 0);
    651e:	4b5c      	ldr	r3, [pc, #368]	; (6690 <loop+0x534>)
    6520:	4852      	ldr	r0, [pc, #328]	; (666c <loop+0x510>)
    6522:	6819      	ldr	r1, [r3, #0]
    6524:	2200      	movs	r2, #0
    6526:	f7fa fc59 	bl	ddc <BMSModuleManager::printPackDetails(int, bool)>
    652a:	e689      	b.n	6240 <loop+0xe4>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    652c:	9312      	str	r3, [sp, #72]	; 0x48
	return ret;
    652e:	9912      	ldr	r1, [sp, #72]	; 0x48
        UnderTime = millis() + settings.triptime;
    6530:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    6534:	4a57      	ldr	r2, [pc, #348]	; (6694 <loop+0x538>)
    6536:	440b      	add	r3, r1
    6538:	6013      	str	r3, [r2, #0]
    653a:	e6f5      	b.n	6328 <loop+0x1cc>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    653c:	9314      	str	r3, [sp, #80]	; 0x50
	return ret;
    653e:	9914      	ldr	r1, [sp, #80]	; 0x50
        OverTime = millis() + settings.triptime;
    6540:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    6544:	4a54      	ldr	r2, [pc, #336]	; (6698 <loop+0x53c>)
    6546:	440b      	add	r3, r1
    6548:	6013      	str	r3, [r2, #0]
    654a:	e66f      	b.n	622c <loop+0xd0>
      bms.balanceCells();
    654c:	4847      	ldr	r0, [pc, #284]	; (666c <loop+0x510>)
    654e:	f7fa f9cd 	bl	8ec <BMSModuleManager::balanceCells()>
    6552:	e670      	b.n	6236 <loop+0xda>
          if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() < settings.UnderVSetpoint) {
    6554:	4845      	ldr	r0, [pc, #276]	; (666c <loop+0x510>)
    6556:	f7fa fb39 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    655a:	6921      	ldr	r1, [r4, #16]
    655c:	f005 fd54 	bl	c008 <__aeabi_fcmplt>
    6560:	2800      	cmp	r0, #0
    6562:	f000 8161 	beq.w	6828 <loop+0x6cc>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6566:	682b      	ldr	r3, [r5, #0]
            if (UnderTime < millis())  //check is last time not undervoltage is longer thatn UnderDur ago
    6568:	4a4a      	ldr	r2, [pc, #296]	; (6694 <loop+0x538>)
    656a:	930d      	str	r3, [sp, #52]	; 0x34
	return ret;
    656c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    656e:	6812      	ldr	r2, [r2, #0]
    6570:	429a      	cmp	r2, r3
    6572:	d202      	bcs.n	657a <loop+0x41e>
              bmsstatus = Error;
    6574:	4b3a      	ldr	r3, [pc, #232]	; (6660 <loop+0x504>)
    6576:	2205      	movs	r2, #5
    6578:	701a      	strb	r2, [r3, #0]
          if (bms.getLowCellVolt() > settings.OverVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint) {
    657a:	483c      	ldr	r0, [pc, #240]	; (666c <loop+0x510>)
    657c:	f7fa fb26 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    6580:	68e1      	ldr	r1, [r4, #12]
    6582:	f005 fd5f 	bl	c044 <__aeabi_fcmpgt>
    6586:	2800      	cmp	r0, #0
    6588:	f000 81db 	beq.w	6942 <loop+0x7e6>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    658c:	682b      	ldr	r3, [r5, #0]
            if (OverTime < millis())  //check is last time not undervoltage is longer thatn UnderDur ago
    658e:	4a42      	ldr	r2, [pc, #264]	; (6698 <loop+0x53c>)
    6590:	930f      	str	r3, [sp, #60]	; 0x3c
	return ret;
    6592:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6594:	6812      	ldr	r2, [r2, #0]
    6596:	429a      	cmp	r2, r3
    6598:	f4bf ae48 	bcs.w	622c <loop+0xd0>
    659c:	e6e1      	b.n	6362 <loop+0x206>
      if (bms.getHighCellVolt() < settings.UnderVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    659e:	4833      	ldr	r0, [pc, #204]	; (666c <loop+0x510>)
    65a0:	f7fa fbf0 	bl	d84 <BMSModuleManager::getHighTemperature()>
    65a4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    65a6:	f005 fd4d 	bl	c044 <__aeabi_fcmpgt>
    65aa:	2800      	cmp	r0, #0
    65ac:	f47f aec5 	bne.w	633a <loop+0x1de>
    65b0:	e6c6      	b.n	6340 <loop+0x1e4>
          Discharge = 0;
    65b2:	2500      	movs	r5, #0
    65b4:	4b39      	ldr	r3, [pc, #228]	; (669c <loop+0x540>)
          digitalWrite(OUT4, LOW);
    65b6:	4629      	mov	r1, r5
    65b8:	2015      	movs	r0, #21
          Discharge = 0;
    65ba:	601d      	str	r5, [r3, #0]
          digitalWrite(OUT4, LOW);
    65bc:	f002 fe34 	bl	9228 <digitalWrite>
          digitalWrite(OUT3, LOW);  //turn off charger
    65c0:	4629      	mov	r1, r5
    65c2:	2014      	movs	r0, #20
    65c4:	f002 fe30 	bl	9228 <digitalWrite>
          digitalWrite(OUT2, LOW);
    65c8:	4629      	mov	r1, r5
    65ca:	200c      	movs	r0, #12
    65cc:	f002 fe2c 	bl	9228 <digitalWrite>
          digitalWrite(OUT1, LOW);  //turn off discharge
    65d0:	4629      	mov	r1, r5
    65d2:	200b      	movs	r0, #11
    65d4:	f002 fe28 	bl	9228 <digitalWrite>
          contctrl = 0;
    65d8:	4b22      	ldr	r3, [pc, #136]	; (6664 <loop+0x508>)
    65da:	601d      	str	r5, [r3, #0]
          bmsstatus = Ready;
    65dc:	2301      	movs	r3, #1
    65de:	4d27      	ldr	r5, [pc, #156]	; (667c <loop+0x520>)
    65e0:	703b      	strb	r3, [r7, #0]
          break;
    65e2:	e6c8      	b.n	6376 <loop+0x21a>
          Discharge = 0;
    65e4:	4b2d      	ldr	r3, [pc, #180]	; (669c <loop+0x540>)
    65e6:	2500      	movs	r5, #0
          digitalWrite(OUT4, LOW);
    65e8:	4629      	mov	r1, r5
    65ea:	2015      	movs	r0, #21
          Discharge = 0;
    65ec:	601d      	str	r5, [r3, #0]
          digitalWrite(OUT4, LOW);
    65ee:	f002 fe1b 	bl	9228 <digitalWrite>
          digitalWrite(OUT3, LOW);  //turn off charger
    65f2:	4629      	mov	r1, r5
    65f4:	2014      	movs	r0, #20
    65f6:	f002 fe17 	bl	9228 <digitalWrite>
          digitalWrite(OUT2, LOW);
    65fa:	4629      	mov	r1, r5
    65fc:	200c      	movs	r0, #12
    65fe:	f002 fe13 	bl	9228 <digitalWrite>
          digitalWrite(OUT1, LOW);  //turn off discharge
    6602:	4629      	mov	r1, r5
    6604:	200b      	movs	r0, #11
    6606:	f002 fe0f 	bl	9228 <digitalWrite>
          contctrl = 0;             //turn off out 5 and 6
    660a:	4b16      	ldr	r3, [pc, #88]	; (6664 <loop+0x508>)
          if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    660c:	4817      	ldr	r0, [pc, #92]	; (666c <loop+0x510>)
          contctrl = 0;             //turn off out 5 and 6
    660e:	601d      	str	r5, [r3, #0]
          if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    6610:	f7fa fb04 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6614:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    6616:	f005 fd15 	bl	c044 <__aeabi_fcmpgt>
    661a:	2800      	cmp	r0, #0
    661c:	f040 81d6 	bne.w	69cc <loop+0x870>
    6620:	4b13      	ldr	r3, [pc, #76]	; (6670 <loop+0x514>)
    6622:	6018      	str	r0, [r3, #0]
          if (digitalRead(IN3) == HIGH && (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)) && bms.getHighTemperature() < (settings.OverTSetpoint - settings.WarnToff))  //detect AC present for charging and check not balancing
    6624:	2012      	movs	r0, #18
    6626:	f002 fe25 	bl	9274 <digitalRead>
    662a:	2801      	cmp	r0, #1
    662c:	f000 81f4 	beq.w	6a18 <loop+0x8bc>
    6630:	4d12      	ldr	r5, [pc, #72]	; (667c <loop+0x520>)
          if (digitalRead(IN1) == HIGH && bms.getLowCellVolt() > settings.DischVsetpoint)  //detect Key ON
    6632:	2011      	movs	r0, #17
    6634:	f002 fe1e 	bl	9274 <digitalRead>
    6638:	2801      	cmp	r0, #1
    663a:	f47f ae9c 	bne.w	6376 <loop+0x21a>
    663e:	480b      	ldr	r0, [pc, #44]	; (666c <loop+0x510>)
    6640:	f7fa fac4 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    6644:	69a1      	ldr	r1, [r4, #24]
    6646:	f005 fcfd 	bl	c044 <__aeabi_fcmpgt>
    664a:	2800      	cmp	r0, #0
    664c:	f43f ae93 	beq.w	6376 <loop+0x21a>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6650:	682a      	ldr	r2, [r5, #0]
    6652:	920a      	str	r2, [sp, #40]	; 0x28
            bmsstatus = Precharge;
    6654:	2304      	movs	r3, #4
    6656:	703b      	strb	r3, [r7, #0]
            Pretimer = millis();
    6658:	4b07      	ldr	r3, [pc, #28]	; (6678 <loop+0x51c>)
	return ret;
    665a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    665c:	601a      	str	r2, [r3, #0]
    665e:	e68a      	b.n	6376 <loop+0x21a>
    6660:	1fffb008 	.word	0x1fffb008
    6664:	1fffb0e4 	.word	0x1fffb0e4
    6668:	1fffb2d4 	.word	0x1fffb2d4
    666c:	1fff8fe0 	.word	0x1fff8fe0
    6670:	1fff8fdc 	.word	0x1fff8fdc
    6674:	1fff8fa8 	.word	0x1fff8fa8
    6678:	1fff8fb8 	.word	0x1fff8fb8
    667c:	1fffb4d8 	.word	0x1fffb4d8
    6680:	1fff8fbc 	.word	0x1fff8fbc
    6684:	1fff8fc4 	.word	0x1fff8fc4
    6688:	1fffb0f8 	.word	0x1fffb0f8
    668c:	1fff8724 	.word	0x1fff8724
    6690:	1fff8748 	.word	0x1fff8748
    6694:	1fff8fcc 	.word	0x1fff8fcc
    6698:	1fff8fb4 	.word	0x1fff8fb4
    669c:	1fff8fac 	.word	0x1fff8fac
          Discharge = 1;
    66a0:	4bb1      	ldr	r3, [pc, #708]	; (6968 <loop+0x80c>)
    66a2:	2501      	movs	r5, #1
          if (digitalRead(IN1) == LOW)  //Key OFF
    66a4:	2011      	movs	r0, #17
          Discharge = 1;
    66a6:	601d      	str	r5, [r3, #0]
          if (digitalRead(IN1) == LOW)  //Key OFF
    66a8:	f002 fde4 	bl	9274 <digitalRead>
    66ac:	b900      	cbnz	r0, 66b0 <loop+0x554>
            bmsstatus = Ready;
    66ae:	703d      	strb	r5, [r7, #0]
          if (digitalRead(IN3) == HIGH && (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)) && bms.getHighTemperature() < (settings.OverTSetpoint - settings.WarnToff))  //detect AC present for charging and check not balancing
    66b0:	2012      	movs	r0, #18
    66b2:	f002 fddf 	bl	9274 <digitalRead>
    66b6:	2801      	cmp	r0, #1
    66b8:	f47f ae5c 	bne.w	6374 <loop+0x218>
    66bc:	48ab      	ldr	r0, [pc, #684]	; (696c <loop+0x810>)
    66be:	f7fa faad 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    66c2:	69e1      	ldr	r1, [r4, #28]
    66c4:	4605      	mov	r5, r0
    66c6:	6960      	ldr	r0, [r4, #20]
    66c8:	f005 f9f6 	bl	bab8 <__aeabi_fsub>
    66cc:	4601      	mov	r1, r0
    66ce:	4628      	mov	r0, r5
    66d0:	f005 fc9a 	bl	c008 <__aeabi_fcmplt>
    66d4:	2800      	cmp	r0, #0
    66d6:	f43f ae4d 	beq.w	6374 <loop+0x218>
    66da:	48a4      	ldr	r0, [pc, #656]	; (696c <loop+0x810>)
    66dc:	f7fa fb52 	bl	d84 <BMSModuleManager::getHighTemperature()>
    66e0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    66e2:	4605      	mov	r5, r0
    66e4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    66e6:	f005 f9e7 	bl	bab8 <__aeabi_fsub>
    66ea:	4601      	mov	r1, r0
    66ec:	4628      	mov	r0, r5
    66ee:	f005 fc8b 	bl	c008 <__aeabi_fcmplt>
    66f2:	2800      	cmp	r0, #0
    66f4:	f43f ae3e 	beq.w	6374 <loop+0x218>
            bmsstatus = Charge;
    66f8:	2303      	movs	r3, #3
    66fa:	4d9d      	ldr	r5, [pc, #628]	; (6970 <loop+0x814>)
    66fc:	703b      	strb	r3, [r7, #0]
    66fe:	e63a      	b.n	6376 <loop+0x21a>
          if (settings.ChargerDirect > 0) {
    6700:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    6704:	2b00      	cmp	r3, #0
    6706:	f040 814c 	bne.w	69a2 <loop+0x846>
    670a:	4d97      	ldr	r5, [pc, #604]	; (6968 <loop+0x80c>)
          Discharge = 0;
    670c:	2300      	movs	r3, #0
          digitalWrite(OUT3, HIGH);  //enable charger
    670e:	2101      	movs	r1, #1
    6710:	2014      	movs	r0, #20
          Discharge = 0;
    6712:	602b      	str	r3, [r5, #0]
          digitalWrite(OUT3, HIGH);  //enable charger
    6714:	f002 fd88 	bl	9228 <digitalWrite>
          if (bms.getHighCellVolt() > settings.balanceVoltage) {
    6718:	4894      	ldr	r0, [pc, #592]	; (696c <loop+0x810>)
    671a:	4d96      	ldr	r5, [pc, #600]	; (6974 <loop+0x818>)
    671c:	f7fa fa7e 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6720:	6ca1      	ldr	r1, [r4, #72]	; 0x48
    6722:	f005 fc8f 	bl	c044 <__aeabi_fcmpgt>
    6726:	3800      	subs	r0, #0
    6728:	bf18      	it	ne
    672a:	2001      	movne	r0, #1
    672c:	6028      	str	r0, [r5, #0]
          if (bms.getHighCellVolt() > settings.ChargeVsetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    672e:	488f      	ldr	r0, [pc, #572]	; (696c <loop+0x810>)
    6730:	f7fa fa74 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6734:	6961      	ldr	r1, [r4, #20]
    6736:	f005 fc85 	bl	c044 <__aeabi_fcmpgt>
    673a:	b930      	cbnz	r0, 674a <loop+0x5ee>
    673c:	488b      	ldr	r0, [pc, #556]	; (696c <loop+0x810>)
    673e:	f7fa fb21 	bl	d84 <BMSModuleManager::getHighTemperature()>
    6742:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    6744:	f005 fc7e 	bl	c044 <__aeabi_fcmpgt>
    6748:	b330      	cbz	r0, 6798 <loop+0x63c>
            if (bms.getAvgCellVolt() > (settings.ChargeVsetpoint - settings.ChargeHys)) {
    674a:	4888      	ldr	r0, [pc, #544]	; (696c <loop+0x810>)
    674c:	f7fa fb1e 	bl	d8c <BMSModuleManager::getAvgCellVolt()>
    6750:	69e1      	ldr	r1, [r4, #28]
    6752:	4605      	mov	r5, r0
    6754:	6960      	ldr	r0, [r4, #20]
    6756:	f005 f9af 	bl	bab8 <__aeabi_fsub>
    675a:	4601      	mov	r1, r0
    675c:	4628      	mov	r0, r5
    675e:	f005 fc71 	bl	c044 <__aeabi_fcmpgt>
    6762:	2800      	cmp	r0, #0
    6764:	f000 811a 	beq.w	699c <loop+0x840>
    SOC = 100;
    6768:	4b83      	ldr	r3, [pc, #524]	; (6978 <loop+0x81c>)
    676a:	2264      	movs	r2, #100	; 0x64
    SOC = 95;
    676c:	601a      	str	r2, [r3, #0]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    676e:	6d62      	ldr	r2, [r4, #84]	; 0x54
    6770:	6da3      	ldr	r3, [r4, #88]	; 0x58
    6772:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    6776:	fb02 f303 	mul.w	r3, r2, r3
    677a:	fb03 f000 	mul.w	r0, r3, r0
    677e:	f005 fa51 	bl	bc24 <__aeabi_i2f>
    6782:	497e      	ldr	r1, [pc, #504]	; (697c <loop+0x820>)
    6784:	f005 fb56 	bl	be34 <__aeabi_fdiv>
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6788:	4a7d      	ldr	r2, [pc, #500]	; (6980 <loop+0x824>)
            digitalWrite(OUT3, LOW);  //turn off charger
    678a:	2100      	movs	r1, #0
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    678c:	6010      	str	r0, [r2, #0]
            digitalWrite(OUT3, LOW);  //turn off charger
    678e:	2014      	movs	r0, #20
    6790:	f002 fd4a 	bl	9228 <digitalWrite>
            bmsstatus = Ready;
    6794:	2301      	movs	r3, #1
    6796:	703b      	strb	r3, [r7, #0]
          if (digitalRead(IN3) == LOW)  //detect AC not present for charging
    6798:	2012      	movs	r0, #18
    679a:	f002 fd6b 	bl	9274 <digitalRead>
    679e:	2800      	cmp	r0, #0
    67a0:	f47f ade8 	bne.w	6374 <loop+0x218>
            bmsstatus = Ready;
    67a4:	2301      	movs	r3, #1
    67a6:	4d72      	ldr	r5, [pc, #456]	; (6970 <loop+0x814>)
    67a8:	703b      	strb	r3, [r7, #0]
    67aa:	e5e4      	b.n	6376 <loop+0x21a>
          Discharge = 0;
    67ac:	4b6e      	ldr	r3, [pc, #440]	; (6968 <loop+0x80c>)
    67ae:	4d70      	ldr	r5, [pc, #448]	; (6970 <loop+0x814>)
    67b0:	2200      	movs	r2, #0
    67b2:	601a      	str	r2, [r3, #0]
          Prechargecon();
    67b4:	f7fc faf8 	bl	2da8 <Prechargecon()>
          break;
    67b8:	e5dd      	b.n	6376 <loop+0x21a>
          Discharge = 0;
    67ba:	4b6b      	ldr	r3, [pc, #428]	; (6968 <loop+0x80c>)
    67bc:	2500      	movs	r5, #0
          digitalWrite(OUT4, LOW);
    67be:	4629      	mov	r1, r5
    67c0:	2015      	movs	r0, #21
          Discharge = 0;
    67c2:	601d      	str	r5, [r3, #0]
          digitalWrite(OUT4, LOW);
    67c4:	f002 fd30 	bl	9228 <digitalWrite>
          digitalWrite(OUT3, LOW);  //turn off charger
    67c8:	4629      	mov	r1, r5
    67ca:	2014      	movs	r0, #20
    67cc:	f002 fd2c 	bl	9228 <digitalWrite>
          digitalWrite(OUT2, LOW);
    67d0:	4629      	mov	r1, r5
    67d2:	200c      	movs	r0, #12
    67d4:	f002 fd28 	bl	9228 <digitalWrite>
          digitalWrite(OUT1, LOW);  //turn off discharge
    67d8:	4629      	mov	r1, r5
    67da:	200b      	movs	r0, #11
    67dc:	f002 fd24 	bl	9228 <digitalWrite>
          contctrl = 0;             //turn off out 5 and 6
    67e0:	4b68      	ldr	r3, [pc, #416]	; (6984 <loop+0x828>)
          if (bms.getLowCellVolt() >= settings.UnderVSetpoint && bms.getHighCellVolt() <= settings.OverVSetpoint && digitalRead(IN1) == LOW) {
    67e2:	4862      	ldr	r0, [pc, #392]	; (696c <loop+0x810>)
          contctrl = 0;             //turn off out 5 and 6
    67e4:	601d      	str	r5, [r3, #0]
          if (bms.getLowCellVolt() >= settings.UnderVSetpoint && bms.getHighCellVolt() <= settings.OverVSetpoint && digitalRead(IN1) == LOW) {
    67e6:	f7fa f9f1 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    67ea:	6921      	ldr	r1, [r4, #16]
    67ec:	f005 fc20 	bl	c030 <__aeabi_fcmpge>
    67f0:	2800      	cmp	r0, #0
    67f2:	f43f adbf 	beq.w	6374 <loop+0x218>
    67f6:	485d      	ldr	r0, [pc, #372]	; (696c <loop+0x810>)
    67f8:	f7fa fa10 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    67fc:	68e1      	ldr	r1, [r4, #12]
    67fe:	f005 fc0d 	bl	c01c <__aeabi_fcmple>
    6802:	2800      	cmp	r0, #0
    6804:	f43f adb6 	beq.w	6374 <loop+0x218>
    6808:	2011      	movs	r0, #17
    680a:	f002 fd33 	bl	9274 <digitalRead>
    680e:	2800      	cmp	r0, #0
    6810:	d0c8      	beq.n	67a4 <loop+0x648>
    6812:	e5af      	b.n	6374 <loop+0x218>
          if (storagemode == 1) {
    6814:	2b01      	cmp	r3, #1
    6816:	f47f adf9 	bne.w	640c <loop+0x2b0>
            storagemode = 0;
    681a:	f8c8 0000 	str.w	r0, [r8]
    681e:	e5f5      	b.n	640c <loop+0x2b0>
          bmsstatus = Error;
    6820:	4b59      	ldr	r3, [pc, #356]	; (6988 <loop+0x82c>)
    6822:	2205      	movs	r2, #5
    6824:	701a      	strb	r2, [r3, #0]
    6826:	e57f      	b.n	6328 <loop+0x1cc>
          if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() < settings.UnderVSetpoint) {
    6828:	4850      	ldr	r0, [pc, #320]	; (696c <loop+0x810>)
    682a:	f7fa f9f7 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    682e:	6921      	ldr	r1, [r4, #16]
    6830:	f005 fbea 	bl	c008 <__aeabi_fcmplt>
    6834:	2800      	cmp	r0, #0
    6836:	f47f ae96 	bne.w	6566 <loop+0x40a>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    683a:	682b      	ldr	r3, [r5, #0]
    683c:	930e      	str	r3, [sp, #56]	; 0x38
	return ret;
    683e:	990e      	ldr	r1, [sp, #56]	; 0x38
            UnderTime = millis() + settings.triptime;
    6840:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    6844:	4a51      	ldr	r2, [pc, #324]	; (698c <loop+0x830>)
    6846:	440b      	add	r3, r1
    6848:	6013      	str	r3, [r2, #0]
    684a:	e696      	b.n	657a <loop+0x41e>
          if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    684c:	4847      	ldr	r0, [pc, #284]	; (696c <loop+0x810>)
    684e:	f7fa f9bd 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    6852:	6921      	ldr	r1, [r4, #16]
    6854:	f005 fbd8 	bl	c008 <__aeabi_fcmplt>
    6858:	b940      	cbnz	r0, 686c <loop+0x710>
    685a:	4844      	ldr	r0, [pc, #272]	; (696c <loop+0x810>)
    685c:	f7fa f9de 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6860:	68e1      	ldr	r1, [r4, #12]
    6862:	f005 fbef 	bl	c044 <__aeabi_fcmpgt>
    6866:	2800      	cmp	r0, #0
    6868:	f000 8155 	beq.w	6b16 <loop+0x9ba>
    686c:	4d40      	ldr	r5, [pc, #256]	; (6970 <loop+0x814>)
    686e:	e63e      	b.n	64ee <loop+0x392>
      cellspresent = bms.seriescells();
    6870:	f7f9 ffb4 	bl	7dc <BMSModuleManager::seriescells()>
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt);
    6874:	6c62      	ldr	r2, [r4, #68]	; 0x44
      cellspresent = bms.seriescells();
    6876:	6030      	str	r0, [r6, #0]
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt);
    6878:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    687c:	483b      	ldr	r0, [pc, #236]	; (696c <loop+0x810>)
    687e:	f7fa f9f7 	bl	c70 <BMSModuleManager::setSensors(int, float)>
    6882:	e52c      	b.n	62de <loop+0x182>
            digitalWrite(OUT3, LOW);  //turn off charger
    6884:	2100      	movs	r1, #0
    6886:	2014      	movs	r0, #20
    6888:	f002 fcce 	bl	9228 <digitalWrite>
            contctrl = contctrl & 253;
    688c:	683b      	ldr	r3, [r7, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    688e:	4d38      	ldr	r5, [pc, #224]	; (6970 <loop+0x814>)
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6890:	6d62      	ldr	r2, [r4, #84]	; 0x54
            contctrl = contctrl & 253;
    6892:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    6896:	603b      	str	r3, [r7, #0]
    6898:	682b      	ldr	r3, [r5, #0]
    689a:	9304      	str	r3, [sp, #16]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    689c:	6da3      	ldr	r3, [r4, #88]	; 0x58
	return ret;
    689e:	9904      	ldr	r1, [sp, #16]
    68a0:	fb02 f303 	mul.w	r3, r2, r3
            Pretimer = millis();
    68a4:	4a3a      	ldr	r2, [pc, #232]	; (6990 <loop+0x834>)
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    68a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
            Pretimer = millis();
    68aa:	6011      	str	r1, [r2, #0]
            Charged = 1;
    68ac:	4939      	ldr	r1, [pc, #228]	; (6994 <loop+0x838>)
    SOC = 100;
    68ae:	4a32      	ldr	r2, [pc, #200]	; (6978 <loop+0x81c>)
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    68b0:	fb03 f000 	mul.w	r0, r3, r0
            Charged = 1;
    68b4:	2301      	movs	r3, #1
    68b6:	600b      	str	r3, [r1, #0]
    SOC = 100;
    68b8:	2364      	movs	r3, #100	; 0x64
    68ba:	6013      	str	r3, [r2, #0]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    68bc:	f005 f9b2 	bl	bc24 <__aeabi_i2f>
    68c0:	492e      	ldr	r1, [pc, #184]	; (697c <loop+0x820>)
    68c2:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 6980 <loop+0x824>
    68c6:	f005 fab5 	bl	be34 <__aeabi_fdiv>
    68ca:	f8c8 0000 	str.w	r0, [r8]
    68ce:	e5dc      	b.n	648a <loop+0x32e>
          if (bms.getHighCellVolt() > settings.StoreVsetpoint) {
    68d0:	f7fa f9a4 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    68d4:	6a21      	ldr	r1, [r4, #32]
    68d6:	f005 fbb5 	bl	c044 <__aeabi_fcmpgt>
    68da:	4681      	mov	r9, r0
    68dc:	2800      	cmp	r0, #0
    68de:	f040 80c1 	bne.w	6a64 <loop+0x908>
            if (Charged == 1) {
    68e2:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 6994 <loop+0x838>
    68e6:	f8da 5000 	ldr.w	r5, [sl]
    68ea:	2d01      	cmp	r5, #1
    68ec:	f000 80d4 	beq.w	6a98 <loop+0x93c>
              digitalWrite(OUT3, HIGH);  //turn on charger
    68f0:	4641      	mov	r1, r8
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    68f2:	4d1f      	ldr	r5, [pc, #124]	; (6970 <loop+0x814>)
    68f4:	2014      	movs	r0, #20
    68f6:	f002 fc97 	bl	9228 <digitalWrite>
              if (Pretimer + settings.Pretime < millis()) {
    68fa:	4a25      	ldr	r2, [pc, #148]	; (6990 <loop+0x834>)
    68fc:	682b      	ldr	r3, [r5, #0]
    68fe:	6811      	ldr	r1, [r2, #0]
    6900:	9303      	str	r3, [sp, #12]
    6902:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    6906:	440b      	add	r3, r1
	return ret;
    6908:	9903      	ldr	r1, [sp, #12]
    690a:	428b      	cmp	r3, r1
    690c:	f4bf adbd 	bcs.w	648a <loop+0x32e>
                contctrl = contctrl | 2;
    6910:	683b      	ldr	r3, [r7, #0]
                Pretimer = 0;
    6912:	f8c2 9000 	str.w	r9, [r2]
                contctrl = contctrl | 2;
    6916:	f043 0302 	orr.w	r3, r3, #2
    691a:	603b      	str	r3, [r7, #0]
                Pretimer = 0;
    691c:	e5b5      	b.n	648a <loop+0x32e>
        if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    691e:	4813      	ldr	r0, [pc, #76]	; (696c <loop+0x810>)
    6920:	f7fa f97c 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6924:	4605      	mov	r5, r0
    6926:	4811      	ldr	r0, [pc, #68]	; (696c <loop+0x810>)
    6928:	f7fa f950 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    692c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    692e:	f005 f8c5 	bl	babc <__addsf3>
    6932:	4601      	mov	r1, r0
    6934:	4628      	mov	r0, r5
    6936:	f005 fb85 	bl	c044 <__aeabi_fcmpgt>
    693a:	3800      	subs	r0, #0
    693c:	bf18      	it	ne
    693e:	2001      	movne	r0, #1
    6940:	e56d      	b.n	641e <loop+0x2c2>
          if (bms.getLowCellVolt() > settings.OverVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint) {
    6942:	480a      	ldr	r0, [pc, #40]	; (696c <loop+0x810>)
    6944:	f7fa f96a 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6948:	68e1      	ldr	r1, [r4, #12]
    694a:	f005 fb7b 	bl	c044 <__aeabi_fcmpgt>
    694e:	2800      	cmp	r0, #0
    6950:	f47f ae1c 	bne.w	658c <loop+0x430>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6954:	682b      	ldr	r3, [r5, #0]
    6956:	9310      	str	r3, [sp, #64]	; 0x40
	return ret;
    6958:	9910      	ldr	r1, [sp, #64]	; 0x40
            OverTime = millis() + settings.triptime;
    695a:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
    695e:	4a0e      	ldr	r2, [pc, #56]	; (6998 <loop+0x83c>)
    6960:	440b      	add	r3, r1
    6962:	6013      	str	r3, [r2, #0]
    6964:	e462      	b.n	622c <loop+0xd0>
    6966:	bf00      	nop
    6968:	1fff8fac 	.word	0x1fff8fac
    696c:	1fff8fe0 	.word	0x1fff8fe0
    6970:	1fffb4d8 	.word	0x1fffb4d8
    6974:	1fff8fdc 	.word	0x1fff8fdc
    6978:	1fff8724 	.word	0x1fff8724
    697c:	3e8e38e4 	.word	0x3e8e38e4
    6980:	1fff8fd8 	.word	0x1fff8fd8
    6984:	1fffb0e4 	.word	0x1fffb0e4
    6988:	1fffb008 	.word	0x1fffb008
    698c:	1fff8fcc 	.word	0x1fff8fcc
    6990:	1fff8fb8 	.word	0x1fff8fb8
    6994:	1fff8fa8 	.word	0x1fff8fa8
    6998:	1fff8fb4 	.word	0x1fff8fb4
    SOC = 95;
    699c:	4b71      	ldr	r3, [pc, #452]	; (6b64 <loop+0xa08>)
    699e:	225f      	movs	r2, #95	; 0x5f
    69a0:	e6e4      	b.n	676c <loop+0x610>
            Discharge = 0;
    69a2:	f04f 0800 	mov.w	r8, #0
    69a6:	4d70      	ldr	r5, [pc, #448]	; (6b68 <loop+0xa0c>)
            digitalWrite(OUT4, LOW);
    69a8:	2015      	movs	r0, #21
    69aa:	4641      	mov	r1, r8
            Discharge = 0;
    69ac:	f8c5 8000 	str.w	r8, [r5]
            digitalWrite(OUT4, LOW);
    69b0:	f002 fc3a 	bl	9228 <digitalWrite>
            digitalWrite(OUT2, LOW);
    69b4:	4641      	mov	r1, r8
    69b6:	200c      	movs	r0, #12
    69b8:	f002 fc36 	bl	9228 <digitalWrite>
            digitalWrite(OUT1, LOW);  //turn off discharge
    69bc:	4641      	mov	r1, r8
    69be:	200b      	movs	r0, #11
    69c0:	f002 fc32 	bl	9228 <digitalWrite>
            contctrl = 0;             //turn off out 5 and 6
    69c4:	4b69      	ldr	r3, [pc, #420]	; (6b6c <loop+0xa10>)
    69c6:	f8c3 8000 	str.w	r8, [r3]
    69ca:	e69f      	b.n	670c <loop+0x5b0>
          if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    69cc:	4868      	ldr	r0, [pc, #416]	; (6b70 <loop+0xa14>)
    69ce:	f7fa f925 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    69d2:	4605      	mov	r5, r0
    69d4:	4866      	ldr	r0, [pc, #408]	; (6b70 <loop+0xa14>)
    69d6:	f7fa f8f9 	bl	bcc <BMSModuleManager::getLowCellVolt()>
    69da:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
    69dc:	f005 f86e 	bl	babc <__addsf3>
    69e0:	4601      	mov	r1, r0
    69e2:	4628      	mov	r0, r5
    69e4:	f005 fb2e 	bl	c044 <__aeabi_fcmpgt>
    69e8:	3800      	subs	r0, #0
    69ea:	bf18      	it	ne
    69ec:	2001      	movne	r0, #1
    69ee:	e617      	b.n	6620 <loop+0x4c4>
          digitalWrite(OUT1, HIGH);  //turn on discharge
    69f0:	2101      	movs	r1, #1
    69f2:	200b      	movs	r0, #11
    69f4:	f002 fc18 	bl	9228 <digitalWrite>
          if (Pretimer1 + settings.Pretime < millis()) {
    69f8:	4b5e      	ldr	r3, [pc, #376]	; (6b74 <loop+0xa18>)
    69fa:	681a      	ldr	r2, [r3, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    69fc:	682b      	ldr	r3, [r5, #0]
    69fe:	9308      	str	r3, [sp, #32]
    6a00:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    6a04:	4413      	add	r3, r2
	return ret;
    6a06:	9a08      	ldr	r2, [sp, #32]
    6a08:	4293      	cmp	r3, r2
    6a0a:	f4bf ad5b 	bcs.w	64c4 <loop+0x368>
            contctrl = contctrl | 1;
    6a0e:	683b      	ldr	r3, [r7, #0]
    6a10:	f043 0301 	orr.w	r3, r3, #1
    6a14:	603b      	str	r3, [r7, #0]
    6a16:	e555      	b.n	64c4 <loop+0x368>
          if (digitalRead(IN3) == HIGH && (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)) && bms.getHighTemperature() < (settings.OverTSetpoint - settings.WarnToff))  //detect AC present for charging and check not balancing
    6a18:	4855      	ldr	r0, [pc, #340]	; (6b70 <loop+0xa14>)
    6a1a:	f7fa f8ff 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6a1e:	69e1      	ldr	r1, [r4, #28]
    6a20:	4605      	mov	r5, r0
    6a22:	6960      	ldr	r0, [r4, #20]
    6a24:	f005 f848 	bl	bab8 <__aeabi_fsub>
    6a28:	4601      	mov	r1, r0
    6a2a:	4628      	mov	r0, r5
    6a2c:	f005 faec 	bl	c008 <__aeabi_fcmplt>
    6a30:	2800      	cmp	r0, #0
    6a32:	f43f adfd 	beq.w	6630 <loop+0x4d4>
    6a36:	484e      	ldr	r0, [pc, #312]	; (6b70 <loop+0xa14>)
    6a38:	f7fa f9a4 	bl	d84 <BMSModuleManager::getHighTemperature()>
    6a3c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    6a3e:	4605      	mov	r5, r0
    6a40:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6a42:	f005 f839 	bl	bab8 <__aeabi_fsub>
    6a46:	4601      	mov	r1, r0
    6a48:	4628      	mov	r0, r5
    6a4a:	f005 fadd 	bl	c008 <__aeabi_fcmplt>
    6a4e:	2800      	cmp	r0, #0
    6a50:	f43f adee 	beq.w	6630 <loop+0x4d4>
            if (settings.ChargerDirect == 1) {
    6a54:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    6a58:	2b00      	cmp	r3, #0
    6a5a:	d07a      	beq.n	6b52 <loop+0x9f6>
              bmsstatus = Charge;
    6a5c:	2303      	movs	r3, #3
    6a5e:	4d46      	ldr	r5, [pc, #280]	; (6b78 <loop+0xa1c>)
    6a60:	703b      	strb	r3, [r7, #0]
    6a62:	e5e6      	b.n	6632 <loop+0x4d6>
            digitalWrite(OUT3, LOW);  //turn off charger
    6a64:	2100      	movs	r1, #0
    6a66:	2014      	movs	r0, #20
    6a68:	f002 fbde 	bl	9228 <digitalWrite>
            contctrl = contctrl & 253;
    6a6c:	683b      	ldr	r3, [r7, #0]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6a6e:	6d62      	ldr	r2, [r4, #84]	; 0x54
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6a70:	4d41      	ldr	r5, [pc, #260]	; (6b78 <loop+0xa1c>)
            Pretimer = millis();
    6a72:	4942      	ldr	r1, [pc, #264]	; (6b7c <loop+0xa20>)
            contctrl = contctrl & 253;
    6a74:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    6a78:	603b      	str	r3, [r7, #0]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6a7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
    6a7c:	fb02 f303 	mul.w	r3, r2, r3
    6a80:	682a      	ldr	r2, [r5, #0]
    6a82:	9201      	str	r2, [sp, #4]
            Charged = 1;
    6a84:	4a3e      	ldr	r2, [pc, #248]	; (6b80 <loop+0xa24>)
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6a86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
            Charged = 1;
    6a8a:	f8c2 8000 	str.w	r8, [r2]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6a8e:	fb03 f000 	mul.w	r0, r3, r0
    SOC = 100;
    6a92:	4a34      	ldr	r2, [pc, #208]	; (6b64 <loop+0xa08>)
	return ret;
    6a94:	9b01      	ldr	r3, [sp, #4]
    6a96:	e70e      	b.n	68b6 <loop+0x75a>
              if (bms.getHighCellVolt() < (settings.StoreVsetpoint - settings.ChargeHys)) {
    6a98:	4835      	ldr	r0, [pc, #212]	; (6b70 <loop+0xa14>)
    6a9a:	f7fa f8bf 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6a9e:	69e1      	ldr	r1, [r4, #28]
    6aa0:	4680      	mov	r8, r0
    6aa2:	6a20      	ldr	r0, [r4, #32]
    6aa4:	f005 f808 	bl	bab8 <__aeabi_fsub>
    6aa8:	4601      	mov	r1, r0
    6aaa:	4640      	mov	r0, r8
    6aac:	f005 faac 	bl	c008 <__aeabi_fcmplt>
    6ab0:	2800      	cmp	r0, #0
    6ab2:	d13b      	bne.n	6b2c <loop+0x9d0>
    6ab4:	4d30      	ldr	r5, [pc, #192]	; (6b78 <loop+0xa1c>)
    6ab6:	e4e8      	b.n	648a <loop+0x32e>
              if (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)) {
    6ab8:	482d      	ldr	r0, [pc, #180]	; (6b70 <loop+0xa14>)
    6aba:	f7fa f8af 	bl	c1c <BMSModuleManager::getHighCellVolt()>
    6abe:	69e1      	ldr	r1, [r4, #28]
    6ac0:	4680      	mov	r8, r0
    6ac2:	6960      	ldr	r0, [r4, #20]
    6ac4:	f004 fff8 	bl	bab8 <__aeabi_fsub>
    6ac8:	4601      	mov	r1, r0
    6aca:	4640      	mov	r0, r8
    6acc:	f005 fa9c 	bl	c008 <__aeabi_fcmplt>
    6ad0:	2800      	cmp	r0, #0
    6ad2:	d0ef      	beq.n	6ab4 <loop+0x958>
                digitalWrite(OUT3, HIGH);  //turn on charger
    6ad4:	4649      	mov	r1, r9
    6ad6:	2014      	movs	r0, #20
                Charged = 0;
    6ad8:	f8ca 5000 	str.w	r5, [sl]
                digitalWrite(OUT3, HIGH);  //turn on charger
    6adc:	f002 fba4 	bl	9228 <digitalWrite>
                if (Pretimer + settings.Pretime < millis()) {
    6ae0:	4a26      	ldr	r2, [pc, #152]	; (6b7c <loop+0xa20>)
    6ae2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    6ae6:	6812      	ldr	r2, [r2, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6ae8:	4d23      	ldr	r5, [pc, #140]	; (6b78 <loop+0xa1c>)
    6aea:	4413      	add	r3, r2
    6aec:	682a      	ldr	r2, [r5, #0]
    6aee:	9205      	str	r2, [sp, #20]
	return ret;
    6af0:	9a05      	ldr	r2, [sp, #20]
    6af2:	4293      	cmp	r3, r2
    6af4:	f4bf acc9 	bcs.w	648a <loop+0x32e>
    6af8:	e4c3      	b.n	6482 <loop+0x326>
          if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    6afa:	481d      	ldr	r0, [pc, #116]	; (6b70 <loop+0xa14>)
    6afc:	f7fa f942 	bl	d84 <BMSModuleManager::getHighTemperature()>
    6b00:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    6b02:	f005 fa9f 	bl	c044 <__aeabi_fcmpgt>
    6b06:	2800      	cmp	r0, #0
    6b08:	f47f acf1 	bne.w	64ee <loop+0x392>
            digitalWrite(OUT2, LOW);  //trip breaker
    6b0c:	2100      	movs	r1, #0
    6b0e:	200c      	movs	r0, #12
    6b10:	f002 fb8a 	bl	9228 <digitalWrite>
    6b14:	e42f      	b.n	6376 <loop+0x21a>
          if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    6b16:	4816      	ldr	r0, [pc, #88]	; (6b70 <loop+0xa14>)
    6b18:	f7fa f934 	bl	d84 <BMSModuleManager::getHighTemperature()>
    6b1c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    6b1e:	f005 fa91 	bl	c044 <__aeabi_fcmpgt>
    6b22:	2800      	cmp	r0, #0
    6b24:	f47f aea2 	bne.w	686c <loop+0x710>
    6b28:	4d13      	ldr	r5, [pc, #76]	; (6b78 <loop+0xa1c>)
    6b2a:	e7ef      	b.n	6b0c <loop+0x9b0>
                digitalWrite(OUT3, HIGH);  //turn on charger
    6b2c:	4629      	mov	r1, r5
    6b2e:	2014      	movs	r0, #20
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6b30:	4d11      	ldr	r5, [pc, #68]	; (6b78 <loop+0xa1c>)
                Charged = 0;
    6b32:	f8ca 9000 	str.w	r9, [sl]
                digitalWrite(OUT3, HIGH);  //turn on charger
    6b36:	f002 fb77 	bl	9228 <digitalWrite>
                if (Pretimer + settings.Pretime < millis()) {
    6b3a:	4a10      	ldr	r2, [pc, #64]	; (6b7c <loop+0xa20>)
    6b3c:	682b      	ldr	r3, [r5, #0]
    6b3e:	6811      	ldr	r1, [r2, #0]
    6b40:	9302      	str	r3, [sp, #8]
    6b42:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    6b46:	440b      	add	r3, r1
	return ret;
    6b48:	9902      	ldr	r1, [sp, #8]
    6b4a:	428b      	cmp	r3, r1
    6b4c:	f4bf ac9d 	bcs.w	648a <loop+0x32e>
    6b50:	e6de      	b.n	6910 <loop+0x7b4>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6b52:	4d09      	ldr	r5, [pc, #36]	; (6b78 <loop+0xa1c>)
              bmsstatus = Precharge;
    6b54:	2304      	movs	r3, #4
    6b56:	703b      	strb	r3, [r7, #0]
    6b58:	682b      	ldr	r3, [r5, #0]
    6b5a:	9309      	str	r3, [sp, #36]	; 0x24
              Pretimer = millis();
    6b5c:	4b07      	ldr	r3, [pc, #28]	; (6b7c <loop+0xa20>)
	return ret;
    6b5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    6b60:	601a      	str	r2, [r3, #0]
    6b62:	e566      	b.n	6632 <loop+0x4d6>
    6b64:	1fff8724 	.word	0x1fff8724
    6b68:	1fff8fac 	.word	0x1fff8fac
    6b6c:	1fffb0e4 	.word	0x1fffb0e4
    6b70:	1fff8fe0 	.word	0x1fff8fe0
    6b74:	1fff8fbc 	.word	0x1fff8fbc
    6b78:	1fffb4d8 	.word	0x1fffb4d8
    6b7c:	1fff8fb8 	.word	0x1fff8fb8
    6b80:	1fff8fa8 	.word	0x1fff8fa8

00006b84 <CANListener::frameHandler(CAN_message_t&, int, unsigned char)>:
{

    /* default implementation that doesn't handle frames */

    return (false);
}
    6b84:	2000      	movs	r0, #0
    6b86:	4770      	bx	lr

00006b88 <CANListener::txHandler(int, unsigned char)>:
 */

void CANListener::txHandler (int /*mailbox*/, uint8_t /*controller*/)
{

}
    6b88:	4770      	bx	lr
    6b8a:	bf00      	nop

00006b8c <FlexCAN::FlexCAN(unsigned char)>:
FlexCAN::FlexCAN (uint8_t id)
    6b8c:	b538      	push	{r3, r4, r5, lr}
    defaultMask.id = 0;
    6b8e:	4b1b      	ldr	r3, [pc, #108]	; (6bfc <FlexCAN::FlexCAN(unsigned char)+0x70>)
    flexcanBase = FLEXCAN0_BASE;
    6b90:	491b      	ldr	r1, [pc, #108]	; (6c00 <FlexCAN::FlexCAN(unsigned char)+0x74>)
    defaultMask.flags.extended = 0;
    6b92:	791a      	ldrb	r2, [r3, #4]
FlexCAN::FlexCAN (uint8_t id)
    6b94:	4604      	mov	r4, r0
    defaultMask.id = 0;
    6b96:	2500      	movs	r5, #0
    flexcanBase = FLEXCAN0_BASE;
    6b98:	6021      	str	r1, [r4, #0]
    defaultMask.flags.extended = 0;
    6b9a:	f022 0203 	bic.w	r2, r2, #3
    IrqMessage=IRQ_CAN_MESSAGE;
    6b9e:	211d      	movs	r1, #29
    6ba0:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
    defaultMask.id = 0;
    6ba4:	601d      	str	r5, [r3, #0]
    defaultMask.flags.extended = 0;
    6ba6:	711a      	strb	r2, [r3, #4]
    numTxMailboxes=2;
    6ba8:	2002      	movs	r0, #2
    sizeTxBuffer=SIZE_TX_BUFFER;
    6baa:	2310      	movs	r3, #16
    sizeRxBuffer=SIZE_RX_BUFFER;
    6bac:	2120      	movs	r1, #32
    sizeTxBuffer=SIZE_TX_BUFFER;
    6bae:	f8a4 3198 	strh.w	r3, [r4, #408]	; 0x198
    numTxMailboxes=2;
    6bb2:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
    sizeRxBuffer=SIZE_RX_BUFFER;
    6bb6:	f8a4 1196 	strh.w	r1, [r4, #406]	; 0x196
    tx_buffer=0;
    6bba:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
      txRings[i]=0;
    6bbe:	4629      	mov	r1, r5
    rx_buffer=0;
    6bc0:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
      txRings[i]=0;
    6bc4:	2240      	movs	r2, #64	; 0x40
    6bc6:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    6bca:	f006 f901 	bl	cdd0 <memset>
        listener[i] = NULL;
    6bce:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    6bd2:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    6bd6:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
    6bda:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
    memset (&stats, 0, sizeof(stats));
    6bde:	2298      	movs	r2, #152	; 0x98
    6be0:	4629      	mov	r1, r5
    6be2:	f104 00fc 	add.w	r0, r4, #252	; 0xfc
    6be6:	f006 f8f3 	bl	cdd0 <memset>
    stats.ringRxMax = SIZE_RX_BUFFER - 1;
    6bea:	221f      	movs	r2, #31
    stats.ringTxMax = SIZE_TX_BUFFER - 1;
    6bec:	230f      	movs	r3, #15
    stats.ringRxMax = SIZE_RX_BUFFER - 1;
    6bee:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    stats.ringTxMax = SIZE_TX_BUFFER - 1;
    6bf2:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
}
    6bf6:	4620      	mov	r0, r4
    6bf8:	bd38      	pop	{r3, r4, r5, pc}
    6bfa:	bf00      	nop
    6bfc:	1fffb480 	.word	0x1fffb480
    6c00:	40024000 	.word	0x40024000

00006c04 <FlexCAN::setBaudRate(unsigned long)>:
void FlexCAN::setBaudRate(uint32_t baud) {
    6c04:	b570      	push	{r4, r5, r6, lr}
    uint32_t result = 16000000 / baud / (divisor + 1);
    6c06:	4e2d      	ldr	r6, [pc, #180]	; (6cbc <FlexCAN::setBaudRate(unsigned long)+0xb8>)
    6c08:	fbb6 fcf1 	udiv	ip, r6, r1
    while (result > 5) {
    6c0c:	f1bc 0f05 	cmp.w	ip, #5
    int error = baud - (16000000 / (result * (divisor + 1)));
    6c10:	fbb6 f4fc 	udiv	r4, r6, ip
    uint32_t bestDivisor = 0;
    6c14:	f04f 0500 	mov.w	r5, #0
    int error = baud - (16000000 / (result * (divisor + 1)));
    6c18:	eba1 0404 	sub.w	r4, r1, r4
    while (result > 5) {
    6c1c:	d921      	bls.n	6c62 <FlexCAN::setBaudRate(unsigned long)+0x5e>
    uint32_t divisor = 0;
    6c1e:	462b      	mov	r3, r5
        divisor++;
    6c20:	f103 0e01 	add.w	lr, r3, #1
        result = 16000000 / baud / (divisor + 1);
    6c24:	3302      	adds	r3, #2
    6c26:	fbbc f2f3 	udiv	r2, ip, r3
        if (result <= 25) {
    6c2a:	2a19      	cmp	r2, #25
            error = baud - (16000000 / (result * (divisor + 1)));
    6c2c:	fb02 f303 	mul.w	r3, r2, r3
        if (result <= 25) {
    6c30:	d80f      	bhi.n	6c52 <FlexCAN::setBaudRate(unsigned long)+0x4e>
            error = baud - (16000000 / (result * (divisor + 1)));
    6c32:	fbb6 f3f3 	udiv	r3, r6, r3
    6c36:	1acb      	subs	r3, r1, r3
            if (error < 0)
    6c38:	2b00      	cmp	r3, #0
    6c3a:	bfb8      	it	lt
    6c3c:	425b      	neglt	r3, r3
            if (error < bestError) {
    6c3e:	42a3      	cmp	r3, r4
    6c40:	da09      	bge.n	6c56 <FlexCAN::setBaudRate(unsigned long)+0x52>
    6c42:	461c      	mov	r4, r3
                bestDivisor = divisor;
    6c44:	4675      	mov	r5, lr
            if ((error == bestError) && (result > 11) && (result < 19)) {
    6c46:	2a0b      	cmp	r2, #11
    6c48:	d906      	bls.n	6c58 <FlexCAN::setBaudRate(unsigned long)+0x54>
    6c4a:	2a12      	cmp	r2, #18
    6c4c:	bf9c      	itt	ls
    6c4e:	461c      	movls	r4, r3
    6c50:	4675      	movls	r5, lr
void FlexCAN::setBaudRate(uint32_t baud) {
    6c52:	4673      	mov	r3, lr
    6c54:	e7e4      	b.n	6c20 <FlexCAN::setBaudRate(unsigned long)+0x1c>
            if ((error == bestError) && (result > 11) && (result < 19)) {
    6c56:	d0f6      	beq.n	6c46 <FlexCAN::setBaudRate(unsigned long)+0x42>
    while (result > 5) {
    6c58:	2a05      	cmp	r2, #5
    6c5a:	d8fa      	bhi.n	6c52 <FlexCAN::setBaudRate(unsigned long)+0x4e>
    result = 16000000 / baud / (divisor + 1);
    6c5c:	1c6b      	adds	r3, r5, #1
    6c5e:	fbbc fcf3 	udiv	ip, ip, r3
    if ((result < 5) || (result > 25) || (bestError > 300)) {
    6c62:	f1ac 0c05 	sub.w	ip, ip, #5
    6c66:	f1bc 0f14 	cmp.w	ip, #20
    6c6a:	d81e      	bhi.n	6caa <FlexCAN::setBaudRate(unsigned long)+0xa6>
    6c6c:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
    6c70:	dc1b      	bgt.n	6caa <FlexCAN::setBaudRate(unsigned long)+0xa6>
    uint8_t pSeg1   = bitTimingTable[result][1];
    6c72:	4b13      	ldr	r3, [pc, #76]	; (6cc0 <FlexCAN::setBaudRate(unsigned long)+0xbc>)
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    6c74:	6800      	ldr	r0, [r0, #0]
    uint8_t pSeg1   = bitTimingTable[result][1];
    6c76:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    6c7a:	eb03 020c 	add.w	r2, r3, ip
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    6c7e:	f813 100c 	ldrb.w	r1, [r3, ip]
                                    FLEXCAN_CTRL_PSEG1(pSeg1) | FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_PRESDIV(divisor));
    6c82:	7853      	ldrb	r3, [r2, #1]
    6c84:	7892      	ldrb	r2, [r2, #2]
    6c86:	04db      	lsls	r3, r3, #19
    6c88:	0412      	lsls	r2, r2, #16
    6c8a:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
    6c8e:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    6c92:	f001 0107 	and.w	r1, r1, #7
                                    FLEXCAN_CTRL_PSEG1(pSeg1) | FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_PRESDIV(divisor));
    6c96:	4313      	orrs	r3, r2
    6c98:	430b      	orrs	r3, r1
    6c9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    6c9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    6ca2:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    6ca6:	6043      	str	r3, [r0, #4]
}
    6ca8:	bd70      	pop	{r4, r5, r6, pc}
    6caa:	4806      	ldr	r0, [pc, #24]	; (6cc4 <FlexCAN::setBaudRate(unsigned long)+0xc0>)
    6cac:	2139      	movs	r1, #57	; 0x39
    6cae:	f004 f92d 	bl	af0c <usb_serial_write>
    6cb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6cb6:	4804      	ldr	r0, [pc, #16]	; (6cc8 <FlexCAN::setBaudRate(unsigned long)+0xc4>)
    6cb8:	f001 bc7e 	b.w	85b8 <Print::println()>
    6cbc:	00f42400 	.word	0x00f42400
    6cc0:	1fff876c 	.word	0x1fff876c
    6cc4:	00013e18 	.word	0x00013e18
    6cc8:	1fff880c 	.word	0x1fff880c

00006ccc <FlexCAN::setNumTxBoxes(unsigned char)>:
{
    6ccc:	b530      	push	{r4, r5, lr}
    6cce:	2901      	cmp	r1, #1
    6cd0:	4604      	mov	r4, r0
    6cd2:	bf38      	it	cc
    6cd4:	2101      	movcc	r1, #1
    6cd6:	290f      	cmp	r1, #15
    if ( !isInitialized() ) return numTxMailboxes;  // Just set the numTxMailboxes. Begin() will do final initialization.
    6cd8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    6cdc:	4608      	mov	r0, r1
    6cde:	bf28      	it	cs
    6ce0:	200f      	movcs	r0, #15
    numTxMailboxes = txboxes;
    6ce2:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
    if ( !isInitialized() ) return numTxMailboxes;  // Just set the numTxMailboxes. Begin() will do final initialization.
    6ce6:	b31b      	cbz	r3, 6d30 <FlexCAN::setNumTxBoxes(unsigned char)+0x64>
    void setMailBoxTxBufferSize(uint8_t mbox, uint16_t size);

    inline uint8_t getFirstTxBox() { return getNumMailBoxes()-numTxMailboxes; }
    inline uint8_t getLastTxBox() { return getNumMailBoxes()-1; }
    inline uint8_t getNumMailBoxes() { return NUM_MAILBOXES; }
    inline uint8_t getNumRxBoxes() { return getNumMailBoxes()-numTxMailboxes; }
    6ce8:	f1c0 0e10 	rsb	lr, r0, #16
    6cec:	fa5f f58e 	uxtb.w	r5, lr
    6cf0:	46ae      	mov	lr, r5
    6cf2:	2200      	movs	r2, #0
    6cf4:	012d      	lsls	r5, r5, #4
        oldIde = FLEXCANb_MBn_CS(flexcanBase, c) & FLEXCAN_MB_CS_IDE;
    6cf6:	6823      	ldr	r3, [r4, #0]
    6cf8:	f103 0c80 	add.w	ip, r3, #128	; 0x80
    6cfc:	f85c 3002 	ldr.w	r3, [ip, r2]
    6d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | oldIde;
    6d04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    6d08:	f84c 3002 	str.w	r3, [ip, r2]
    for (c = 0; c < getNumRxBoxes(); c++) {
    6d0c:	3210      	adds	r2, #16
    6d0e:	4295      	cmp	r5, r2
    6d10:	d1f1      	bne.n	6cf6 <FlexCAN::setNumTxBoxes(unsigned char)+0x2a>
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    6d12:	2510      	movs	r5, #16
    6d14:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    6d18:	6823      	ldr	r3, [r4, #0]
    for (c = getFirstTxBox(); c < getNumMailBoxes(); c++) {
    6d1a:	f10e 0201 	add.w	r2, lr, #1
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    6d1e:	3380      	adds	r3, #128	; 0x80
    6d20:	fb15 330e 	smlabb	r3, r5, lr, r3
    for (c = getFirstTxBox(); c < getNumMailBoxes(); c++) {
    6d24:	fa5f fe82 	uxtb.w	lr, r2
    6d28:	f1be 0f10 	cmp.w	lr, #16
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    6d2c:	6019      	str	r1, [r3, #0]
    for (c = getFirstTxBox(); c < getNumMailBoxes(); c++) {
    6d2e:	d1f3      	bne.n	6d18 <FlexCAN::setNumTxBoxes(unsigned char)+0x4c>
}
    6d30:	bd30      	pop	{r4, r5, pc}
    6d32:	bf00      	nop

00006d34 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>:
    6d34:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    6d38:	f1c3 0310 	rsb	r3, r3, #16
    if ( mbox < getNumRxBoxes() ) {
    6d3c:	b2db      	uxtb	r3, r3
    6d3e:	429a      	cmp	r2, r3
    6d40:	d222      	bcs.n	6d88 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)+0x54>
{
    6d42:	b510      	push	{r4, lr}
    6d44:	468c      	mov	ip, r1
    6d46:	4686      	mov	lr, r0
        MBFilters[mbox] = filter;
    6d48:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
    6d4c:	e9d1 0100 	ldrd	r0, r1, [r1]
    6d50:	3304      	adds	r3, #4
    6d52:	e883 0003 	stmia.w	r3, {r0, r1}
        if (filter.flags.extended) {
    6d56:	f89c 3004 	ldrb.w	r3, [ip, #4]
            FLEXCANb_MBn_ID(flexcanBase, mbox) = (filter.id & FLEXCAN_MB_ID_EXT_MASK);
    6d5a:	f8de 1000 	ldr.w	r1, [lr]
        if (filter.flags.extended) {
    6d5e:	07db      	lsls	r3, r3, #31
    6d60:	d513      	bpl.n	6d8a <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)+0x56>
            FLEXCANb_MBn_ID(flexcanBase, mbox) = (filter.id & FLEXCAN_MB_ID_EXT_MASK);
    6d62:	f8dc 0000 	ldr.w	r0, [ip]
    6d66:	2310      	movs	r3, #16
    6d68:	3184      	adds	r1, #132	; 0x84
    6d6a:	fb13 1102 	smlabb	r1, r3, r2, r1
    6d6e:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
    6d72:	6008      	str	r0, [r1, #0]
            FLEXCANb_MBn_CS(flexcanBase, mbox) |= FLEXCAN_MB_CS_IDE;
    6d74:	f8de 1000 	ldr.w	r1, [lr]
    6d78:	3180      	adds	r1, #128	; 0x80
    6d7a:	fb13 1302 	smlabb	r3, r3, r2, r1
    6d7e:	681a      	ldr	r2, [r3, #0]
    6d80:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
    6d84:	601a      	str	r2, [r3, #0]
}
    6d86:	bd10      	pop	{r4, pc}
    6d88:	4770      	bx	lr
            FLEXCANb_MBn_ID(flexcanBase, mbox) = FLEXCAN_MB_ID_IDSTD(filter.id);
    6d8a:	f8dc 4000 	ldr.w	r4, [ip]
    6d8e:	4809      	ldr	r0, [pc, #36]	; (6db4 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)+0x80>)
    6d90:	2310      	movs	r3, #16
    6d92:	3184      	adds	r1, #132	; 0x84
    6d94:	fb13 1102 	smlabb	r1, r3, r2, r1
    6d98:	ea00 4084 	and.w	r0, r0, r4, lsl #18
    6d9c:	6008      	str	r0, [r1, #0]
            FLEXCANb_MBn_CS(flexcanBase, mbox) &= ~FLEXCAN_MB_CS_IDE;
    6d9e:	f8de 1000 	ldr.w	r1, [lr]
    6da2:	3180      	adds	r1, #128	; 0x80
    6da4:	fb13 1302 	smlabb	r3, r3, r2, r1
    6da8:	681a      	ldr	r2, [r3, #0]
    6daa:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    6dae:	601a      	str	r2, [r3, #0]
}
    6db0:	bd10      	pop	{r4, pc}
    6db2:	bf00      	nop
    6db4:	1ffc0000 	.word	0x1ffc0000

00006db8 <FlexCAN::getFilter(CAN_filter_t&, unsigned char)>:
    6db8:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    6dbc:	f1c3 0310 	rsb	r3, r3, #16
    if ( mbox < getNumRxBoxes() ) {
    6dc0:	b2db      	uxtb	r3, r3
    6dc2:	429a      	cmp	r2, r3
    6dc4:	d301      	bcc.n	6dca <FlexCAN::getFilter(CAN_filter_t&, unsigned char)+0x12>
    return (false);
    6dc6:	2000      	movs	r0, #0
}
    6dc8:	4770      	bx	lr
        filter.id = MBFilters[mbox].id;
    6dca:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
        filter.flags.extended = MBFilters[mbox].flags.extended;
    6dce:	790b      	ldrb	r3, [r1, #4]
        filter.id = MBFilters[mbox].id;
    6dd0:	6850      	ldr	r0, [r2, #4]
    6dd2:	6008      	str	r0, [r1, #0]
        filter.flags.extended = MBFilters[mbox].flags.extended;
    6dd4:	f892 c008 	ldrb.w	ip, [r2, #8]
    6dd8:	f36c 0300 	bfi	r3, ip, #0, #1
    6ddc:	710b      	strb	r3, [r1, #4]
        filter.flags.remote = MBFilters[mbox].flags.remote;
    6dde:	7a13      	ldrb	r3, [r2, #8]
    6de0:	f891 c004 	ldrb.w	ip, [r1, #4]
    6de4:	f3c3 0340 	ubfx	r3, r3, #1, #1
    6de8:	f363 0c41 	bfi	ip, r3, #1, #1
    6dec:	f881 c004 	strb.w	ip, [r1, #4]
        filter.flags.reserved = MBFilters[mbox].flags.reserved;
    6df0:	7a13      	ldrb	r3, [r2, #8]
    6df2:	fa5f f28c 	uxtb.w	r2, ip
    6df6:	089b      	lsrs	r3, r3, #2
    6df8:	f363 0287 	bfi	r2, r3, #2, #6
        return (true);
    6dfc:	2001      	movs	r0, #1
        filter.flags.reserved = MBFilters[mbox].flags.reserved;
    6dfe:	710a      	strb	r2, [r1, #4]
        return (true);
    6e00:	4770      	bx	lr
    6e02:	bf00      	nop

00006e04 <FlexCAN::setMask(unsigned long, unsigned char)>:
    6e04:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    6e08:	f1c3 0310 	rsb	r3, r3, #16
    if ( mbox < getNumRxBoxes() ) {
    6e0c:	b2db      	uxtb	r3, r3
    6e0e:	429a      	cmp	r2, r3
    6e10:	d221      	bcs.n	6e56 <FlexCAN::setMask(unsigned long, unsigned char)+0x52>
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    6e12:	6803      	ldr	r3, [r0, #0]
{
    6e14:	b410      	push	{r4}
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    6e16:	681c      	ldr	r4, [r3, #0]
      if (!wasFrozen) {
    6e18:	01e4      	lsls	r4, r4, #7
    6e1a:	d41d      	bmi.n	6e58 <FlexCAN::setMask(unsigned long, unsigned char)+0x54>
  FLEXCANb_MCR(flexcanBase) |= FLEXCAN_MCR_FRZ;
    6e1c:	681c      	ldr	r4, [r3, #0]
    6e1e:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    6e22:	601c      	str	r4, [r3, #0]
    FLEXCANb_MCR(flexcanBase) |= (FLEXCAN_MCR_HALT);
    6e24:	6804      	ldr	r4, [r0, #0]
    6e26:	6823      	ldr	r3, [r4, #0]
    6e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    6e2c:	6023      	str	r3, [r4, #0]
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    6e2e:	6804      	ldr	r4, [r0, #0]
    6e30:	6823      	ldr	r3, [r4, #0]
  while (!isFrozen());
    6e32:	01db      	lsls	r3, r3, #7
    6e34:	d5fc      	bpl.n	6e30 <FlexCAN::setMask(unsigned long, unsigned char)+0x2c>
      FLEXCANb_MB_MASK(flexcanBase, mbox) = mask;
    6e36:	f504 6408 	add.w	r4, r4, #2176	; 0x880
    6e3a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    6e3e:	6021      	str	r1, [r4, #0]
    FLEXCANb_MCR(flexcanBase) &= ~(FLEXCAN_MCR_HALT);
    6e40:	6802      	ldr	r2, [r0, #0]
    6e42:	6813      	ldr	r3, [r2, #0]
    6e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    6e48:	6013      	str	r3, [r2, #0]
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    6e4a:	6802      	ldr	r2, [r0, #0]
    6e4c:	6813      	ldr	r3, [r2, #0]
  while (isFrozen());
    6e4e:	01db      	lsls	r3, r3, #7
    6e50:	d4fc      	bmi.n	6e4c <FlexCAN::setMask(unsigned long, unsigned char)+0x48>
}
    6e52:	bc10      	pop	{r4}
    6e54:	4770      	bx	lr
    6e56:	4770      	bx	lr
      FLEXCANb_MB_MASK(flexcanBase, mbox) = mask;
    6e58:	f503 6308 	add.w	r3, r3, #2176	; 0x880
    6e5c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
}
    6e60:	bc10      	pop	{r4}
      FLEXCANb_MB_MASK(flexcanBase, mbox) = mask;
    6e62:	6019      	str	r1, [r3, #0]
}
    6e64:	4770      	bx	lr
    6e66:	bf00      	nop

00006e68 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)>:
{
    6e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e6c:	4617      	mov	r7, r2
    if ( isInitialized() ) return;
    6e6e:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
{
    6e72:	f89d 8018 	ldrb.w	r8, [sp, #24]
    6e76:	4606      	mov	r6, r0
    6e78:	460d      	mov	r5, r1
    6e7a:	461c      	mov	r4, r3
    if ( isInitialized() ) return;
    6e7c:	2a00      	cmp	r2, #0
    6e7e:	f000 808f 	beq.w	6fa0 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x138>
    if (flexcanBase == FLEXCAN0_BASE) {
    6e82:	4a63      	ldr	r2, [pc, #396]	; (7010 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1a8>)
    6e84:	6831      	ldr	r1, [r6, #0]
    6e86:	4291      	cmp	r1, r2
    6e88:	d07c      	beq.n	6f84 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x11c>
    OSC0_CR |= OSC_ERCLKEN;
    6e8a:	4a62      	ldr	r2, [pc, #392]	; (7014 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1ac>)
    6e8c:	7813      	ldrb	r3, [r2, #0]
    6e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    6e92:	7013      	strb	r3, [r2, #0]
    if (flexcanBase == FLEXCAN0_BASE) {
    6e94:	6833      	ldr	r3, [r6, #0]
    6e96:	f5a2 2282 	sub.w	r2, r2, #266240	; 0x41000
    6e9a:	4293      	cmp	r3, r2
    6e9c:	d106      	bne.n	6eac <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x44>
        SIM_SCGC6 |=  SIM_SCGC6_FLEXCAN0;
    6e9e:	f502 3210 	add.w	r2, r2, #147456	; 0x24000
    6ea2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    6ea4:	f043 0310 	orr.w	r3, r3, #16
    6ea8:	63d3      	str	r3, [r2, #60]	; 0x3c
    FLEXCANb_CTRL1(flexcanBase) &= ~FLEXCAN_CTRL_CLK_SRC;
    6eaa:	6833      	ldr	r3, [r6, #0]
    6eac:	685a      	ldr	r2, [r3, #4]
    6eae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    6eb2:	605a      	str	r2, [r3, #4]
    FLEXCANb_MCR (flexcanBase) |=  FLEXCAN_MCR_FRZ;
    6eb4:	6832      	ldr	r2, [r6, #0]
    6eb6:	6813      	ldr	r3, [r2, #0]
    6eb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    6ebc:	6013      	str	r3, [r2, #0]
    FLEXCANb_MCR (flexcanBase) &= ~FLEXCAN_MCR_MDIS;
    6ebe:	6832      	ldr	r2, [r6, #0]
    6ec0:	6813      	ldr	r3, [r2, #0]
    6ec2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    6ec6:	6013      	str	r3, [r2, #0]
    while (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_LPM_ACK)
    6ec8:	6832      	ldr	r2, [r6, #0]
    6eca:	6813      	ldr	r3, [r2, #0]
    6ecc:	02d9      	lsls	r1, r3, #11
    6ece:	d4fc      	bmi.n	6eca <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x62>
  FLEXCANb_MCR (flexcanBase) ^=  FLEXCAN_MCR_SOFT_RST;
    6ed0:	6813      	ldr	r3, [r2, #0]
    6ed2:	f083 7300 	eor.w	r3, r3, #33554432	; 0x2000000
    6ed6:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR (flexcanBase) & FLEXCAN_MCR_SOFT_RST)
    6ed8:	6833      	ldr	r3, [r6, #0]
    6eda:	681c      	ldr	r4, [r3, #0]
    6edc:	f014 7400 	ands.w	r4, r4, #33554432	; 0x2000000
    6ee0:	d1fb      	bne.n	6eda <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x72>
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    6ee2:	681a      	ldr	r2, [r3, #0]
  while (!isFrozen());
    6ee4:	01d2      	lsls	r2, r2, #7
    6ee6:	d5fc      	bpl.n	6ee2 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x7a>
    FLEXCANb_MCR (flexcanBase) |= FLEXCAN_MCR_SRX_DIS;
    6ee8:	681a      	ldr	r2, [r3, #0]
    6eea:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    6eee:	601a      	str	r2, [r3, #0]
    setBaudRate(baud);
    6ef0:	4629      	mov	r1, r5
    6ef2:	4630      	mov	r0, r6
    6ef4:	f7ff fe86 	bl	6c04 <FlexCAN::setBaudRate(unsigned long)>
    FLEXCANb_MCR(flexcanBase) |= FLEXCAN_MCR_IRMQ;
    6ef8:	6832      	ldr	r2, [r6, #0]
    6efa:	6813      	ldr	r3, [r2, #0]
    6efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    6f00:	6013      	str	r3, [r2, #0]
    6f02:	f896 1194 	ldrb.w	r1, [r6, #404]	; 0x194
    for (uint8_t c = 0; c < getNumRxBoxes(); c++) {
    6f06:	2910      	cmp	r1, #16
    6f08:	d012      	beq.n	6f30 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xc8>
    6f0a:	2500      	movs	r5, #0
        setMask (0, c);
    6f0c:	462a      	mov	r2, r5
    6f0e:	4630      	mov	r0, r6
    6f10:	2100      	movs	r1, #0
    6f12:	f7ff ff77 	bl	6e04 <FlexCAN::setMask(unsigned long, unsigned char)>
        setFilter (mask, c);
    6f16:	462a      	mov	r2, r5
    6f18:	4639      	mov	r1, r7
    6f1a:	f7ff ff0b 	bl	6d34 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>
    6f1e:	f896 1194 	ldrb.w	r1, [r6, #404]	; 0x194
    for (uint8_t c = 0; c < getNumRxBoxes(); c++) {
    6f22:	3401      	adds	r4, #1
    6f24:	f1c1 0310 	rsb	r3, r1, #16
    6f28:	b2e5      	uxtb	r5, r4
    6f2a:	b2db      	uxtb	r3, r3
    6f2c:	429d      	cmp	r5, r3
    6f2e:	d3ed      	bcc.n	6f0c <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xa4>
    FLEXCANb_MCR(flexcanBase) &= ~(FLEXCAN_MCR_HALT);
    6f30:	6832      	ldr	r2, [r6, #0]
    6f32:	6813      	ldr	r3, [r2, #0]
    6f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    6f38:	6013      	str	r3, [r2, #0]
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    6f3a:	6833      	ldr	r3, [r6, #0]
    6f3c:	681a      	ldr	r2, [r3, #0]
  while (isFrozen());
    6f3e:	01d0      	lsls	r0, r2, #7
    6f40:	d4fc      	bmi.n	6f3c <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xd4>
  while (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_NOT_RDY);
    6f42:	681a      	ldr	r2, [r3, #0]
    6f44:	0112      	lsls	r2, r2, #4
    6f46:	d4fc      	bmi.n	6f42 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xda>
    setNumTxBoxes (numTxMailboxes);
    6f48:	4630      	mov	r0, r6
    6f4a:	f7ff febf 	bl	6ccc <FlexCAN::setNumTxBoxes(unsigned char)>
    NVIC_SET_PRIORITY (IrqMessage, IRQ_PRIORITY);
    6f4e:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
    6f52:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    6f56:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
    6f5a:	2240      	movs	r2, #64	; 0x40
    6f5c:	701a      	strb	r2, [r3, #0]
    NVIC_ENABLE_IRQ (IrqMessage);
    6f5e:	f8d6 20f8 	ldr.w	r2, [r6, #248]	; 0xf8
    6f62:	0953      	lsrs	r3, r2, #5
    6f64:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    6f68:	3340      	adds	r3, #64	; 0x40
    6f6a:	009b      	lsls	r3, r3, #2
    6f6c:	2101      	movs	r1, #1
    6f6e:	f002 021f 	and.w	r2, r2, #31
    6f72:	fa01 f202 	lsl.w	r2, r1, r2
    6f76:	601a      	str	r2, [r3, #0]
    FLEXCANb_IMASK1 (flexcanBase) = 0xFFFF;
    6f78:	6833      	ldr	r3, [r6, #0]
    6f7a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    6f7e:	6298      	str	r0, [r3, #40]	; 0x28
}
    6f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (txAlt == 1)
    6f84:	2c01      	cmp	r4, #1
    6f86:	d02b      	beq.n	6fe0 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x178>
            CORE_PIN3_CONFIG = PORT_PCR_MUX(2);
    6f88:	4b23      	ldr	r3, [pc, #140]	; (7018 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b0>)
    6f8a:	f44f 7200 	mov.w	r2, #512	; 0x200
        if (rxAlt == 1)
    6f8e:	f1b8 0f01 	cmp.w	r8, #1
            CORE_PIN3_CONFIG = PORT_PCR_MUX(2);
    6f92:	631a      	str	r2, [r3, #48]	; 0x30
        if (rxAlt == 1)
    6f94:	d02b      	beq.n	6fee <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x186>
            CORE_PIN4_CONFIG = PORT_PCR_MUX(2);
    6f96:	4b20      	ldr	r3, [pc, #128]	; (7018 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b0>)
    6f98:	f44f 7200 	mov.w	r2, #512	; 0x200
    6f9c:	635a      	str	r2, [r3, #52]	; 0x34
    6f9e:	e774      	b.n	6e8a <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x22>
    if (tx_buffer==0) tx_buffer=new CAN_message_t[sizeTxBuffer];
    6fa0:	f8b0 0198 	ldrh.w	r0, [r0, #408]	; 0x198
    6fa4:	0100      	lsls	r0, r0, #4
    6fa6:	f001 ff13 	bl	8dd0 <operator new[](unsigned int)>
    if (rx_buffer==0) rx_buffer=new CAN_message_t[sizeRxBuffer];
    6faa:	f8d6 30b0 	ldr.w	r3, [r6, #176]	; 0xb0
    if (tx_buffer==0) tx_buffer=new CAN_message_t[sizeTxBuffer];
    6fae:	f8c6 00a0 	str.w	r0, [r6, #160]	; 0xa0
    if (rx_buffer==0) rx_buffer=new CAN_message_t[sizeRxBuffer];
    6fb2:	b30b      	cbz	r3, 6ff8 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x190>
    ring.buffer = buffer;
    6fb4:	f8c6 30ac 	str.w	r3, [r6, #172]	; 0xac
    ring.head = 0;
    6fb8:	2300      	movs	r3, #0
    6fba:	f8a6 3094 	strh.w	r3, [r6, #148]	; 0x94
    ring.tail = 0;
    6fbe:	f8a6 3096 	strh.w	r3, [r6, #150]	; 0x96
    ring.head = 0;
    6fc2:	f8a6 30a4 	strh.w	r3, [r6, #164]	; 0xa4
    ring.tail = 0;
    6fc6:	f8a6 30a6 	strh.w	r3, [r6, #166]	; 0xa6
    initRingBuffer (txRing, tx_buffer, sizeTxBuffer);
    6fca:	f8b6 3198 	ldrh.w	r3, [r6, #408]	; 0x198
    ring.size = size;
    6fce:	f8a6 3098 	strh.w	r3, [r6, #152]	; 0x98
    initRingBuffer (rxRing, rx_buffer, sizeRxBuffer);
    6fd2:	f8b6 3196 	ldrh.w	r3, [r6, #406]	; 0x196
    ring.buffer = buffer;
    6fd6:	f8c6 009c 	str.w	r0, [r6, #156]	; 0x9c
    ring.size = size;
    6fda:	f8a6 30a8 	strh.w	r3, [r6, #168]	; 0xa8
    ring.tail = 0;
    6fde:	e750      	b.n	6e82 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1a>
            CORE_PIN32_CONFIG = PORT_PCR_MUX(2);
    6fe0:	4b0e      	ldr	r3, [pc, #56]	; (701c <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b4>)
    6fe2:	f44f 7200 	mov.w	r2, #512	; 0x200
        if (rxAlt == 1)
    6fe6:	f1b8 0f01 	cmp.w	r8, #1
            CORE_PIN32_CONFIG = PORT_PCR_MUX(2);
    6fea:	649a      	str	r2, [r3, #72]	; 0x48
        if (rxAlt == 1)
    6fec:	d1d3      	bne.n	6f96 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x12e>
            CORE_PIN25_CONFIG = PORT_PCR_MUX(2);
    6fee:	4b0b      	ldr	r3, [pc, #44]	; (701c <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b4>)
    6ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
    6ff4:	64da      	str	r2, [r3, #76]	; 0x4c
    6ff6:	e748      	b.n	6e8a <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x22>
    if (rx_buffer==0) rx_buffer=new CAN_message_t[sizeRxBuffer];
    6ff8:	f8b6 0196 	ldrh.w	r0, [r6, #406]	; 0x196
    6ffc:	0100      	lsls	r0, r0, #4
    6ffe:	f001 fee7 	bl	8dd0 <operator new[](unsigned int)>
    7002:	4603      	mov	r3, r0
    7004:	f8c6 00b0 	str.w	r0, [r6, #176]	; 0xb0
    initRingBuffer (txRing, tx_buffer, sizeTxBuffer);
    7008:	f8d6 00a0 	ldr.w	r0, [r6, #160]	; 0xa0
    700c:	e7d2      	b.n	6fb4 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x14c>
    700e:	bf00      	nop
    7010:	40024000 	.word	0x40024000
    7014:	40065000 	.word	0x40065000
    7018:	40049000 	.word	0x40049000
    701c:	4004a000 	.word	0x4004a000

00007020 <FlexCAN::available()>:
{
    7020:	b410      	push	{r4}
    void irqLock() { IrqEnabled=NVIC_IS_ENABLED(IrqMessage); NVIC_DISABLE_IRQ(IrqMessage); }
    7022:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
    7026:	0963      	lsrs	r3, r4, #5
    7028:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    702c:	3340      	adds	r3, #64	; 0x40
    702e:	009b      	lsls	r3, r3, #2
    7030:	4602      	mov	r2, r0
    7032:	f004 041f 	and.w	r4, r4, #31
    7036:	6818      	ldr	r0, [r3, #0]
    7038:	2101      	movs	r1, #1
    703a:	40a1      	lsls	r1, r4
    703c:	ea10 0401 	ands.w	r4, r0, r1
    7040:	bf14      	ite	ne
    7042:	2001      	movne	r0, #1
    7044:	2000      	moveq	r0, #0
    7046:	f882 00f4 	strb.w	r0, [r2, #244]	; 0xf4
    704a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    entries = ring.head - ring.tail;
    704e:	f8b2 00a4 	ldrh.w	r0, [r2, #164]	; 0xa4
    7052:	f8b2 30a6 	ldrh.w	r3, [r2, #166]	; 0xa6
    7056:	b280      	uxth	r0, r0
    7058:	b29b      	uxth	r3, r3
    if (entries < 0) {
    705a:	1ac0      	subs	r0, r0, r3
        entries += ring.size;
    705c:	bf44      	itt	mi
    705e:	f8b2 30a8 	ldrhmi.w	r3, [r2, #168]	; 0xa8
    7062:	18c0      	addmi	r0, r0, r3
    void irqRelease() { if (IrqEnabled) NVIC_ENABLE_IRQ(IrqMessage); }
    7064:	b164      	cbz	r4, 7080 <FlexCAN::available()+0x60>
    7066:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
    706a:	0953      	lsrs	r3, r2, #5
    706c:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    7070:	3340      	adds	r3, #64	; 0x40
    7072:	2101      	movs	r1, #1
    7074:	009b      	lsls	r3, r3, #2
    7076:	f002 021f 	and.w	r2, r2, #31
    707a:	fa01 f202 	lsl.w	r2, r1, r2
    707e:	601a      	str	r2, [r3, #0]
}
    7080:	bc10      	pop	{r4}
    7082:	4770      	bx	lr

00007084 <FlexCAN::read(CAN_message_t&)>:
    void irqLock() { IrqEnabled=NVIC_IS_ENABLED(IrqMessage); NVIC_DISABLE_IRQ(IrqMessage); }
    7084:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
{
    7088:	b538      	push	{r3, r4, r5, lr}
    708a:	0953      	lsrs	r3, r2, #5
    708c:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    7090:	3340      	adds	r3, #64	; 0x40
    7092:	009b      	lsls	r3, r3, #2
    7094:	4604      	mov	r4, r0
    7096:	2501      	movs	r5, #1
    7098:	4608      	mov	r0, r1
    709a:	f002 021f 	and.w	r2, r2, #31
    709e:	6819      	ldr	r1, [r3, #0]
    70a0:	fa05 f202 	lsl.w	r2, r5, r2
    70a4:	4211      	tst	r1, r2
    70a6:	bf14      	ite	ne
    70a8:	4629      	movne	r1, r5
    70aa:	2100      	moveq	r1, #0
    70ac:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
    70b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (ring.head == ring.tail) {
    70b4:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    70b8:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    70bc:	b292      	uxth	r2, r2
    70be:	b29b      	uxth	r3, r3
    70c0:	429a      	cmp	r2, r3
    70c2:	d028      	beq.n	7116 <FlexCAN::read(CAN_message_t&)+0x92>
    memcpy ((void *)&msg, (void *)&ring.buffer[ring.tail], sizeof (CAN_message_t));
    70c4:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    70c8:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
    70cc:	b29b      	uxth	r3, r3
    70ce:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    70d2:	2210      	movs	r2, #16
    70d4:	f001 fd2c 	bl	8b30 <memcpy>
    ring.tail = (ring.tail + 1) % ring.size;
    70d8:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    70dc:	f8b4 20a8 	ldrh.w	r2, [r4, #168]	; 0xa8
    70e0:	b29b      	uxth	r3, r3
    70e2:	442b      	add	r3, r5
    70e4:	fbb3 f1f2 	udiv	r1, r3, r2
    70e8:	fb02 3311 	mls	r3, r2, r1, r3
    70ec:	b29b      	uxth	r3, r3
    void irqRelease() { if (IrqEnabled) NVIC_ENABLE_IRQ(IrqMessage); }
    70ee:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
    70f2:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
        result=1;
    70f6:	4628      	mov	r0, r5
    70f8:	b161      	cbz	r1, 7114 <FlexCAN::read(CAN_message_t&)+0x90>
    70fa:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
    70fe:	0953      	lsrs	r3, r2, #5
    7100:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    7104:	3340      	adds	r3, #64	; 0x40
    7106:	2101      	movs	r1, #1
    7108:	009b      	lsls	r3, r3, #2
    710a:	f002 021f 	and.w	r2, r2, #31
    710e:	fa01 f202 	lsl.w	r2, r1, r2
    7112:	601a      	str	r2, [r3, #0]
}
    7114:	bd38      	pop	{r3, r4, r5, pc}
    int result=0;
    7116:	2000      	movs	r0, #0
    7118:	e7ee      	b.n	70f8 <FlexCAN::read(CAN_message_t&)+0x74>
    711a:	bf00      	nop

0000711c <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)>:
{
    711c:	b530      	push	{r4, r5, lr}
    if (msg.flags.extended) {
    711e:	798b      	ldrb	r3, [r1, #6]
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    7120:	6804      	ldr	r4, [r0, #0]
    7122:	f04f 0e10 	mov.w	lr, #16
    7126:	f104 0c84 	add.w	ip, r4, #132	; 0x84
    if (msg.flags.extended) {
    712a:	07dc      	lsls	r4, r3, #31
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    712c:	fb1e cc02 	smlabb	ip, lr, r2, ip
    if (msg.flags.extended) {
    7130:	d525      	bpl.n	717e <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0x62>
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    7132:	680c      	ldr	r4, [r1, #0]
    7134:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
    7138:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD0(flexcanBase, buffer) = (msg.buf[0]<<24)|(msg.buf[1]<<16)|(msg.buf[2]<<8)|msg.buf[3];
    713c:	6804      	ldr	r4, [r0, #0]
    713e:	f104 0c88 	add.w	ip, r4, #136	; 0x88
    7142:	688c      	ldr	r4, [r1, #8]
    7144:	fb1e cc02 	smlabb	ip, lr, r2, ip
    7148:	ba24      	rev	r4, r4
    714a:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    714e:	6804      	ldr	r4, [r0, #0]
    7150:	f104 0c8c 	add.w	ip, r4, #140	; 0x8c
    7154:	fb1e cc02 	smlabb	ip, lr, r2, ip
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    7158:	fb12 fe0e 	smulbb	lr, r2, lr
    715c:	68ca      	ldr	r2, [r1, #12]
    715e:	ba12      	rev	r2, r2
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    7160:	f8cc 2000 	str.w	r2, [ip]
        if (msg.flags.remote) {
    7164:	079a      	lsls	r2, r3, #30
    7166:	d53c      	bpl.n	71e2 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0xc6>
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    7168:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    716a:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    716c:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    716e:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    7170:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                                                   FLEXCAN_MB_CS_IDE | FLEXCAN_MB_CS_RTR;
    7174:	f043 6347 	orr.w	r3, r3, #208666624	; 0xc700000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    7178:	f842 300e 	str.w	r3, [r2, lr]
}
    717c:	bd30      	pop	{r4, r5, pc}
        FLEXCANb_MBn_ID(flexcanBase, buffer) = FLEXCAN_MB_ID_IDSTD(msg.id);
    717e:	680d      	ldr	r5, [r1, #0]
    7180:	4c1d      	ldr	r4, [pc, #116]	; (71f8 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0xdc>)
    7182:	ea04 4485 	and.w	r4, r4, r5, lsl #18
    7186:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD0(flexcanBase, buffer) = (msg.buf[0]<<24)|(msg.buf[1]<<16)|(msg.buf[2]<<8)|msg.buf[3];
    718a:	6804      	ldr	r4, [r0, #0]
    718c:	f104 0c88 	add.w	ip, r4, #136	; 0x88
    7190:	688c      	ldr	r4, [r1, #8]
    7192:	fb1e cc02 	smlabb	ip, lr, r2, ip
    7196:	ba24      	rev	r4, r4
    7198:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    719c:	6804      	ldr	r4, [r0, #0]
    719e:	f104 0c8c 	add.w	ip, r4, #140	; 0x8c
    71a2:	fb1e cc02 	smlabb	ip, lr, r2, ip
        FLEXCANb_MBn_ID(flexcanBase, buffer) = FLEXCAN_MB_ID_IDSTD(msg.id);
    71a6:	fb12 fe0e 	smulbb	lr, r2, lr
    71aa:	68ca      	ldr	r2, [r1, #12]
        if (msg.flags.remote) {
    71ac:	079b      	lsls	r3, r3, #30
    71ae:	ba12      	rev	r2, r2
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    71b0:	f8cc 2000 	str.w	r2, [ip]
        if (msg.flags.remote) {
    71b4:	d50a      	bpl.n	71cc <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0xb0>
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_RTR;
    71b6:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    71b8:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_RTR;
    71ba:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    71bc:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_RTR;
    71be:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    71c2:	f043 6341 	orr.w	r3, r3, #202375168	; 0xc100000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    71c6:	f842 300e 	str.w	r3, [r2, lr]
}
    71ca:	bd30      	pop	{r4, r5, pc}
                                                   FLEXCAN_MB_CS_LENGTH(msg.len);
    71cc:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    71ce:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len);
    71d0:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    71d2:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len);
    71d4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    71d8:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
    71dc:	f842 300e 	str.w	r3, [r2, lr]
}
    71e0:	bd30      	pop	{r4, r5, pc}
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    71e2:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    71e4:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    71e6:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    71e8:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    71ea:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    71ee:	f043 6346 	orr.w	r3, r3, #207618048	; 0xc600000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    71f2:	f842 300e 	str.w	r3, [r2, lr]
}
    71f6:	bd30      	pop	{r4, r5, pc}
    71f8:	1ffc0000 	.word	0x1ffc0000

000071fc <FlexCAN::write(CAN_message_t const&)>:
{
    71fc:	b570      	push	{r4, r5, r6, lr}
    71fe:	4604      	mov	r4, r0
    void irqLock() { IrqEnabled=NVIC_IS_ENABLED(IrqMessage); NVIC_DISABLE_IRQ(IrqMessage); }
    7200:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
    7204:	0943      	lsrs	r3, r0, #5
    7206:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    720a:	3340      	adds	r3, #64	; 0x40
    720c:	009b      	lsls	r3, r3, #2
    720e:	f000 001f 	and.w	r0, r0, #31
    7212:	681d      	ldr	r5, [r3, #0]
    7214:	2201      	movs	r2, #1
    7216:	4082      	lsls	r2, r0
    7218:	4215      	tst	r5, r2
    721a:	bf14      	ite	ne
    721c:	2501      	movne	r5, #1
    721e:	2500      	moveq	r5, #0
    7220:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
    7224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (ring.head == ring.tail) {
    7228:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    722c:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
    7230:	b29b      	uxth	r3, r3
    7232:	b292      	uxth	r2, r2
    7234:	429a      	cmp	r2, r3
    7236:	d02d      	beq.n	7294 <FlexCAN::write(CAN_message_t const&)+0x98>
    nextEntry = (ring.head + 1) % ring.size;
    7238:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    723c:	f8b4 0098 	ldrh.w	r0, [r4, #152]	; 0x98
    if (nextEntry == ring.tail) {
    7240:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
    nextEntry = (ring.head + 1) % ring.size;
    7244:	b29b      	uxth	r3, r3
    7246:	3301      	adds	r3, #1
    7248:	fbb3 f6f0 	udiv	r6, r3, r0
    724c:	fb00 3316 	mls	r3, r0, r6, r3
    if (nextEntry == ring.tail) {
    7250:	b292      	uxth	r2, r2
    nextEntry = (ring.head + 1) % ring.size;
    7252:	b29e      	uxth	r6, r3
    if (nextEntry == ring.tail) {
    7254:	4296      	cmp	r6, r2
    7256:	d042      	beq.n	72de <FlexCAN::write(CAN_message_t const&)+0xe2>
    memcpy ((void *)&ring.buffer[ring.head], (void *)&msg, sizeof (CAN_message_t));
    7258:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    725c:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    7260:	b29b      	uxth	r3, r3
    7262:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    7266:	2210      	movs	r2, #16
    7268:	f001 fc62 	bl	8b30 <memcpy>
    void irqRelease() { if (IrqEnabled) NVIC_ENABLE_IRQ(IrqMessage); }
    726c:	f894 50f4 	ldrb.w	r5, [r4, #244]	; 0xf4
    ring.head = nextEntry;
    7270:	f8a4 6094 	strh.w	r6, [r4, #148]	; 0x94
            result=1;
    7274:	2001      	movs	r0, #1
    7276:	b165      	cbz	r5, 7292 <FlexCAN::write(CAN_message_t const&)+0x96>
    7278:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
    727c:	0953      	lsrs	r3, r2, #5
    727e:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    7282:	3340      	adds	r3, #64	; 0x40
    7284:	2101      	movs	r1, #1
    7286:	009b      	lsls	r3, r3, #2
    7288:	f002 021f 	and.w	r2, r2, #31
    728c:	fa01 f202 	lsl.w	r2, r1, r2
    7290:	601a      	str	r2, [r3, #0]
}
    7292:	bd70      	pop	{r4, r5, r6, pc}
    inline uint8_t getFirstTxBox() { return getNumMailBoxes()-numTxMailboxes; }
    7294:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
    7298:	f1c2 0210 	rsb	r2, r2, #16
      for (index = getFirstTxBox(); index < getNumMailBoxes(); index++) {
    729c:	b2d2      	uxtb	r2, r2
    729e:	2a0f      	cmp	r2, #15
    72a0:	d8ca      	bhi.n	7238 <FlexCAN::write(CAN_message_t const&)+0x3c>
    72a2:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    72a6:	332c      	adds	r3, #44	; 0x2c
    72a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    72ac:	f104 0cf0 	add.w	ip, r4, #240	; 0xf0
    72b0:	e003      	b.n	72ba <FlexCAN::write(CAN_message_t const&)+0xbe>
    72b2:	4563      	cmp	r3, ip
    72b4:	f102 0201 	add.w	r2, r2, #1
    72b8:	d0be      	beq.n	7238 <FlexCAN::write(CAN_message_t const&)+0x3c>
    bool usesGlobalTxRing(uint8_t mbox) { return (mbox<getNumMailBoxes()?txRings[mbox]==0:true); }
    72ba:	f853 0f04 	ldr.w	r0, [r3, #4]!
    72be:	2800      	cmp	r0, #0
    72c0:	d1f7      	bne.n	72b2 <FlexCAN::write(CAN_message_t const&)+0xb6>
          if ( usesGlobalTxRing(index) && FLEXCAN_get_code(FLEXCANb_MBn_CS(flexcanBase, index)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    72c2:	6826      	ldr	r6, [r4, #0]
    72c4:	0110      	lsls	r0, r2, #4
    72c6:	3680      	adds	r6, #128	; 0x80
    72c8:	5830      	ldr	r0, [r6, r0]
    72ca:	f3c0 6003 	ubfx	r0, r0, #24, #4
    72ce:	2808      	cmp	r0, #8
    72d0:	d1ef      	bne.n	72b2 <FlexCAN::write(CAN_message_t const&)+0xb6>
        writeTxRegisters (msg, index);
    72d2:	4620      	mov	r0, r4
    72d4:	b2d2      	uxtb	r2, r2
    72d6:	f7ff ff21 	bl	711c <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)>
        result=1;
    72da:	2001      	movs	r0, #1
    72dc:	e7cb      	b.n	7276 <FlexCAN::write(CAN_message_t const&)+0x7a>
    int result=0;
    72de:	2000      	movs	r0, #0
    72e0:	e7c9      	b.n	7276 <FlexCAN::write(CAN_message_t const&)+0x7a>
    72e2:	bf00      	nop

000072e4 <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)>:
{
    72e4:	460b      	mov	r3, r1
    uint32_t mb_CS = FLEXCANb_MBn_CS(flexcanBase, buffer);
    72e6:	6801      	ldr	r1, [r0, #0]
    72e8:	f04f 0c10 	mov.w	ip, #16
    72ec:	3180      	adds	r1, #128	; 0x80
    72ee:	fb1c 1102 	smlabb	r1, ip, r2, r1
{
    72f2:	b570      	push	{r4, r5, r6, lr}
    uint32_t mb_CS = FLEXCANb_MBn_CS(flexcanBase, buffer);
    72f4:	6809      	ldr	r1, [r1, #0]
    msg.timestamp = FLEXCAN_get_timestamp (mb_CS);
    72f6:	8099      	strh	r1, [r3, #4]
    msg.len = FLEXCAN_get_length (mb_CS);
    72f8:	f3c1 4603 	ubfx	r6, r1, #16, #4
    72fc:	71de      	strb	r6, [r3, #7]
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    72fe:	6804      	ldr	r4, [r0, #0]
    7300:	3484      	adds	r4, #132	; 0x84
    uint32_t mb_CS = FLEXCANb_MBn_CS(flexcanBase, buffer);
    7302:	fb12 fe0c 	smulbb	lr, r2, ip
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    7306:	fb1c 4c02 	smlabb	ip, ip, r2, r4
    msg.flags.extended = (mb_CS & FLEXCAN_MB_CS_IDE) ? 1:0;
    730a:	f3c1 5500 	ubfx	r5, r1, #20, #1
    730e:	f3c1 5240 	ubfx	r2, r1, #21, #1
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    7312:	f8dc 4000 	ldr.w	r4, [ip]
    msg.flags.extended = (mb_CS & FLEXCAN_MB_CS_IDE) ? 1:0;
    7316:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    731a:	f3c1 6c03 	ubfx	ip, r1, #24, #4
    msg.flags.extended = (mb_CS & FLEXCAN_MB_CS_IDE) ? 1:0;
    731e:	719a      	strb	r2, [r3, #6]
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    7320:	f1ac 0c06 	sub.w	ip, ip, #6
    if (!msg.flags.extended) {
    7324:	b2d2      	uxtb	r2, r2
    7326:	07d2      	lsls	r2, r2, #31
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    7328:	fabc fc8c 	clz	ip, ip
    732c:	799a      	ldrb	r2, [r3, #6]
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    732e:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    7332:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    7336:	601c      	str	r4, [r3, #0]
    7338:	f36c 0282 	bfi	r2, ip, #2, #1
        msg.id >>= FLEXCAN_MB_ID_STD_BIT_NO;
    733c:	bf5c      	itt	pl
    733e:	0ca4      	lsrpl	r4, r4, #18
    7340:	601c      	strpl	r4, [r3, #0]
    7342:	719a      	strb	r2, [r3, #6]
    uint32_t dataIn = FLEXCANb_MBn_WORD0(flexcanBase, buffer);
    7344:	6802      	ldr	r2, [r0, #0]
    7346:	3288      	adds	r2, #136	; 0x88
    if (msg.len > 4) {
    7348:	2e04      	cmp	r6, #4
    uint32_t dataIn = FLEXCANb_MBn_WORD0(flexcanBase, buffer);
    734a:	f852 200e 	ldr.w	r2, [r2, lr]
    msg.buf[0] = dataIn;
    734e:	ba12      	rev	r2, r2
    msg.len = FLEXCAN_get_length (mb_CS);
    7350:	f3c1 4507 	ubfx	r5, r1, #16, #8
    msg.buf[0] = dataIn;
    7354:	609a      	str	r2, [r3, #8]
    if (msg.len > 4) {
    7356:	d905      	bls.n	7364 <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)+0x80>
        dataIn = FLEXCANb_MBn_WORD1(flexcanBase, buffer);
    7358:	6802      	ldr	r2, [r0, #0]
    735a:	328c      	adds	r2, #140	; 0x8c
    735c:	f852 200e 	ldr.w	r2, [r2, lr]
        msg.buf[4] = dataIn;
    7360:	ba12      	rev	r2, r2
    7362:	60da      	str	r2, [r3, #12]
    for (uint32_t loop=msg.len; loop < 8; loop++ ) {
    7364:	f015 0108 	ands.w	r1, r5, #8
    7368:	d108      	bne.n	737c <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)+0x98>
        msg.buf[loop] = 0;
    736a:	f106 0008 	add.w	r0, r6, #8
    736e:	f1c6 0208 	rsb	r2, r6, #8
    7372:	4418      	add	r0, r3
}
    7374:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        msg.buf[loop] = 0;
    7378:	f005 bd2a 	b.w	cdd0 <memset>
}
    737c:	bd70      	pop	{r4, r5, r6, pc}
    737e:	bf00      	nop

00007380 <FlexCAN::message_isr()>:
{
    7380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = FLEXCANb_IFLAG1(flexcanBase);
    7384:	4683      	mov	fp, r0
{
    7386:	b089      	sub	sp, #36	; 0x24
    uint32_t status = FLEXCANb_IFLAG1(flexcanBase);
    7388:	f85b 2bb4 	ldr.w	r2, [fp], #180
    738c:	f8d2 9030 	ldr.w	r9, [r2, #48]	; 0x30
    7390:	f8cd 900c 	str.w	r9, [sp, #12]
{
    7394:	4605      	mov	r5, r0
    uint32_t status = FLEXCANb_IFLAG1(flexcanBase);
    7396:	4682      	mov	sl, r0
    for (i = 0; i < getNumMailBoxes(); i++) {
    7398:	2400      	movs	r4, #0
    739a:	e008      	b.n	73ae <FlexCAN::message_isr()+0x2e>
        switch (code) {
    739c:	2b02      	cmp	r3, #2
    739e:	d04c      	beq.n	743a <FlexCAN::message_isr()+0xba>
    for (i = 0; i < getNumMailBoxes(); i++) {
    73a0:	3401      	adds	r4, #1
    73a2:	2c10      	cmp	r4, #16
    73a4:	f10a 0a08 	add.w	sl, sl, #8
    73a8:	f10b 0b04 	add.w	fp, fp, #4
    73ac:	d040      	beq.n	7430 <FlexCAN::message_isr()+0xb0>
        if ((status & (1UL << i)) == 0) {
    73ae:	fa29 f304 	lsr.w	r3, r9, r4
    73b2:	07d9      	lsls	r1, r3, #31
    73b4:	d5f4      	bpl.n	73a0 <FlexCAN::message_isr()+0x20>
        uint32_t code = FLEXCAN_get_code (FLEXCANb_MBn_CS(flexcanBase, i));
    73b6:	0127      	lsls	r7, r4, #4
    73b8:	f102 0380 	add.w	r3, r2, #128	; 0x80
    73bc:	59db      	ldr	r3, [r3, r7]
    73be:	f3c3 6303 	ubfx	r3, r3, #24, #4
        switch (code) {
    73c2:	2b06      	cmp	r3, #6
    73c4:	d039      	beq.n	743a <FlexCAN::message_isr()+0xba>
    73c6:	2b08      	cmp	r3, #8
    73c8:	d1e8      	bne.n	739c <FlexCAN::message_isr()+0x1c>
    73ca:	f8db 6000 	ldr.w	r6, [fp]
    73ce:	2e00      	cmp	r6, #0
    73d0:	f000 80b9 	beq.w	7546 <FlexCAN::message_isr()+0x1c6>
    if (ring.head == ring.tail) {
    73d4:	8831      	ldrh	r1, [r6, #0]
    73d6:	8873      	ldrh	r3, [r6, #2]
    73d8:	b289      	uxth	r1, r1
    73da:	b29b      	uxth	r3, r3
    73dc:	4299      	cmp	r1, r3
    73de:	f000 80be 	beq.w	755e <FlexCAN::message_isr()+0x1de>
    73e2:	8831      	ldrh	r1, [r6, #0]
    73e4:	8873      	ldrh	r3, [r6, #2]
    73e6:	b289      	uxth	r1, r1
    73e8:	b29b      	uxth	r3, r3
    73ea:	4299      	cmp	r1, r3
    73ec:	d0d8      	beq.n	73a0 <FlexCAN::message_isr()+0x20>
    memcpy ((void *)&msg, (void *)&ring.buffer[ring.tail], sizeof (CAN_message_t));
    73ee:	8873      	ldrh	r3, [r6, #2]
    73f0:	68b1      	ldr	r1, [r6, #8]
    73f2:	b29b      	uxth	r3, r3
    73f4:	2210      	movs	r2, #16
    73f6:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    73fa:	eb0d 0002 	add.w	r0, sp, r2
    73fe:	f001 fb97 	bl	8b30 <memcpy>
    ring.tail = (ring.tail + 1) % ring.size;
    7402:	8873      	ldrh	r3, [r6, #2]
    7404:	88b2      	ldrh	r2, [r6, #4]
    7406:	b29b      	uxth	r3, r3
    7408:	3301      	adds	r3, #1
    740a:	fbb3 f1f2 	udiv	r1, r3, r2
    740e:	fb02 3311 	mls	r3, r2, r1, r3
    7412:	b29b      	uxth	r3, r3
                    writeTxRegisters (msg, i);
    7414:	b2e2      	uxtb	r2, r4
    ring.tail = (ring.tail + 1) % ring.size;
    7416:	8073      	strh	r3, [r6, #2]
                    writeTxRegisters (msg, i);
    7418:	a904      	add	r1, sp, #16
    741a:	4628      	mov	r0, r5
    for (i = 0; i < getNumMailBoxes(); i++) {
    741c:	3401      	adds	r4, #1
                    writeTxRegisters (msg, i);
    741e:	f7ff fe7d 	bl	711c <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)>
    for (i = 0; i < getNumMailBoxes(); i++) {
    7422:	2c10      	cmp	r4, #16
    FLEXCANb_IFLAG1(flexcanBase) = status;
    7424:	682a      	ldr	r2, [r5, #0]
    for (i = 0; i < getNumMailBoxes(); i++) {
    7426:	f10a 0a08 	add.w	sl, sl, #8
    742a:	f10b 0b04 	add.w	fp, fp, #4
    742e:	d1be      	bne.n	73ae <FlexCAN::message_isr()+0x2e>
    FLEXCANb_IFLAG1(flexcanBase) = status;
    7430:	9b03      	ldr	r3, [sp, #12]
    7432:	6313      	str	r3, [r2, #48]	; 0x30
}
    7434:	b009      	add	sp, #36	; 0x24
    7436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            readRxRegisters (msg, i);
    743a:	b2e2      	uxtb	r2, r4
    743c:	a904      	add	r1, sp, #16
    743e:	4628      	mov	r0, r5
    7440:	f7ff ff50 	bl	72e4 <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)>
            if (stats.enabled == true) {
    7444:	f895 30fc 	ldrb.w	r3, [r5, #252]	; 0xfc
    7448:	b16b      	cbz	r3, 7466 <FlexCAN::message_isr()+0xe6>
                stats.mb[i].refCount++;
    744a:	f8da 3114 	ldr.w	r3, [sl, #276]	; 0x114
    744e:	3301      	adds	r3, #1
    7450:	f8ca 3114 	str.w	r3, [sl, #276]	; 0x114
                if (msg.flags.overrun) {
    7454:	f89d 3016 	ldrb.w	r3, [sp, #22]
    7458:	075b      	lsls	r3, r3, #29
    745a:	d504      	bpl.n	7466 <FlexCAN::message_isr()+0xe6>
                    stats.mb[i].overrunCount++;
    745c:	f8da 3118 	ldr.w	r3, [sl, #280]	; 0x118
    7460:	3301      	adds	r3, #1
    7462:	f8ca 3118 	str.w	r3, [sl, #280]	; 0x118
    7466:	2301      	movs	r3, #1
    7468:	40a3      	lsls	r3, r4
    746a:	9300      	str	r3, [sp, #0]
    for (i = 0; i < getNumMailBoxes(); i++) {
    746c:	2300      	movs	r3, #0
    746e:	f105 0680 	add.w	r6, r5, #128	; 0x80
    7472:	f105 0890 	add.w	r8, r5, #144	; 0x90
    7476:	9301      	str	r3, [sp, #4]
    7478:	f8cd b008 	str.w	fp, [sp, #8]
                thisListener = listener[listenerPos];
    747c:	f856 0f04 	ldr.w	r0, [r6, #4]!
                if (thisListener != NULL) {
    7480:	b148      	cbz	r0, 7496 <FlexCAN::message_isr()+0x116>
                    if (thisListener->callbacksActive & (1UL << i)) {
    7482:	6842      	ldr	r2, [r0, #4]
    7484:	9b00      	ldr	r3, [sp, #0]
    7486:	4013      	ands	r3, r2
    7488:	d033      	beq.n	74f2 <FlexCAN::message_isr()+0x172>
                        handledFrame |= thisListener->frameHandler (msg, i, controller);
    748a:	6803      	ldr	r3, [r0, #0]
    748c:	f8d3 b000 	ldr.w	fp, [r3]
    7490:	4b45      	ldr	r3, [pc, #276]	; (75a8 <FlexCAN::message_isr()+0x228>)
    7492:	459b      	cmp	fp, r3
    7494:	d15a      	bne.n	754c <FlexCAN::message_isr()+0x1cc>
            for (uint32_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    7496:	45b0      	cmp	r8, r6
    7498:	d1f0      	bne.n	747c <FlexCAN::message_isr()+0xfc>
            if (handledFrame == false) {
    749a:	9b01      	ldr	r3, [sp, #4]
    749c:	f8dd b008 	ldr.w	fp, [sp, #8]
    74a0:	b393      	cbz	r3, 7508 <FlexCAN::message_isr()+0x188>
            if (stats.enabled == true) {
    74a2:	f895 30fc 	ldrb.w	r3, [r5, #252]	; 0xfc
    74a6:	b183      	cbz	r3, 74ca <FlexCAN::message_isr()+0x14a>
    entries = ring.head - ring.tail;
    74a8:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    74ac:	f8b5 20a6 	ldrh.w	r2, [r5, #166]	; 0xa6
    74b0:	b29b      	uxth	r3, r3
    74b2:	b292      	uxth	r2, r2
    if (entries < 0) {
    74b4:	1a9b      	subs	r3, r3, r2
        entries += ring.size;
    74b6:	bf44      	itt	mi
    74b8:	f8b5 20a8 	ldrhmi.w	r2, [r5, #168]	; 0xa8
    74bc:	189b      	addmi	r3, r3, r2
                if (stats.ringRxHighWater < rxEntries) {
    74be:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    74c2:	429a      	cmp	r2, r3
                    stats.ringRxHighWater = rxEntries;
    74c4:	bf38      	it	cc
    74c6:	f8c5 3104 	strcc.w	r3, [r5, #260]	; 0x104
            if (MBFilters[i].flags.extended) {
    74ca:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
                FLEXCANb_MBn_ID(flexcanBase, i) = (MBFilters[i].id & FLEXCAN_MB_ID_EXT_MASK);
    74ce:	f8da 2004 	ldr.w	r2, [sl, #4]
            if (MBFilters[i].flags.extended) {
    74d2:	7a1b      	ldrb	r3, [r3, #8]
    74d4:	f013 0f01 	tst.w	r3, #1
                FLEXCANb_MBn_ID(flexcanBase, i) = (MBFilters[i].id & FLEXCAN_MB_ID_EXT_MASK);
    74d8:	682b      	ldr	r3, [r5, #0]
                FLEXCANb_MBn_ID(flexcanBase, i) = FLEXCAN_MB_ID_IDSTD(MBFilters[i].id);
    74da:	bf08      	it	eq
    74dc:	4933      	ldreq	r1, [pc, #204]	; (75ac <FlexCAN::message_isr()+0x22c>)
                FLEXCANb_MBn_ID(flexcanBase, i) = (MBFilters[i].id & FLEXCAN_MB_ID_EXT_MASK);
    74de:	f103 0384 	add.w	r3, r3, #132	; 0x84
    74e2:	bf14      	ite	ne
    74e4:	f022 4260 	bicne.w	r2, r2, #3758096384	; 0xe0000000
                FLEXCANb_MBn_ID(flexcanBase, i) = FLEXCAN_MB_ID_IDSTD(MBFilters[i].id);
    74e8:	ea01 4282 	andeq.w	r2, r1, r2, lsl #18
    74ec:	51da      	str	r2, [r3, r7]
    FLEXCANb_IFLAG1(flexcanBase) = status;
    74ee:	682a      	ldr	r2, [r5, #0]
    74f0:	e756      	b.n	73a0 <FlexCAN::message_isr()+0x20>
                    } else if (thisListener->callbacksActive & (1UL << 31)) {
    74f2:	2a00      	cmp	r2, #0
    74f4:	dacf      	bge.n	7496 <FlexCAN::message_isr()+0x116>
                        handledFrame |= thisListener->frameHandler (msg, -1, controller);
    74f6:	6802      	ldr	r2, [r0, #0]
    74f8:	f8d2 b000 	ldr.w	fp, [r2]
    74fc:	4a2a      	ldr	r2, [pc, #168]	; (75a8 <FlexCAN::message_isr()+0x228>)
    74fe:	4593      	cmp	fp, r2
    7500:	d0c9      	beq.n	7496 <FlexCAN::message_isr()+0x116>
    7502:	f04f 32ff 	mov.w	r2, #4294967295
    7506:	e023      	b.n	7550 <FlexCAN::message_isr()+0x1d0>
    nextEntry = (ring.head + 1) % ring.size;
    7508:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    750c:	f8b5 10a8 	ldrh.w	r1, [r5, #168]	; 0xa8
    if (nextEntry == ring.tail) {
    7510:	f8b5 20a6 	ldrh.w	r2, [r5, #166]	; 0xa6
    nextEntry = (ring.head + 1) % ring.size;
    7514:	b29b      	uxth	r3, r3
    7516:	3301      	adds	r3, #1
    7518:	fbb3 f0f1 	udiv	r0, r3, r1
    751c:	fb01 3310 	mls	r3, r1, r0, r3
    if (nextEntry == ring.tail) {
    7520:	b292      	uxth	r2, r2
    nextEntry = (ring.head + 1) % ring.size;
    7522:	b29e      	uxth	r6, r3
    if (nextEntry == ring.tail) {
    7524:	4296      	cmp	r6, r2
    7526:	d031      	beq.n	758c <FlexCAN::message_isr()+0x20c>
    memcpy ((void *)&ring.buffer[ring.head], (void *)&msg, sizeof (CAN_message_t));
    7528:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    752c:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
    7530:	b29b      	uxth	r3, r3
    7532:	2210      	movs	r2, #16
    7534:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    7538:	eb0d 0102 	add.w	r1, sp, r2
    753c:	f001 faf8 	bl	8b30 <memcpy>
    ring.head = nextEntry;
    7540:	f8a5 60a4 	strh.w	r6, [r5, #164]	; 0xa4
    return (true);
    7544:	e7ad      	b.n	74a2 <FlexCAN::message_isr()+0x122>
            pRing=( usesGlobalTxRing(i) ? &txRing : txRings[i] );
    7546:	f105 0694 	add.w	r6, r5, #148	; 0x94
    754a:	e743      	b.n	73d4 <FlexCAN::message_isr()+0x54>
                        handledFrame |= thisListener->frameHandler (msg, i, controller);
    754c:	2300      	movs	r3, #0
    754e:	4622      	mov	r2, r4
                        handledFrame |= thisListener->frameHandler (msg, -1, controller);
    7550:	a904      	add	r1, sp, #16
    7552:	47d8      	blx	fp
    7554:	9b01      	ldr	r3, [sp, #4]
    7556:	4318      	orrs	r0, r3
    7558:	b2c3      	uxtb	r3, r0
    755a:	9301      	str	r3, [sp, #4]
    755c:	e79b      	b.n	7496 <FlexCAN::message_isr()+0x116>
                        if (thisListener->callbacksActive & (1UL << i | 1UL << 31)) {
    755e:	2701      	movs	r7, #1
    7560:	40a7      	lsls	r7, r4
    7562:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
    7566:	f105 0680 	add.w	r6, r5, #128	; 0x80
    756a:	f105 0890 	add.w	r8, r5, #144	; 0x90
                    thisListener = listener[listenerPos];
    756e:	f856 0f04 	ldr.w	r0, [r6, #4]!
                    if (thisListener != NULL) {
    7572:	b138      	cbz	r0, 7584 <FlexCAN::message_isr()+0x204>
                        if (thisListener->callbacksActive & (1UL << i | 1UL << 31)) {
    7574:	6843      	ldr	r3, [r0, #4]
    7576:	421f      	tst	r7, r3
    7578:	d004      	beq.n	7584 <FlexCAN::message_isr()+0x204>
                            thisListener->txHandler (i, controller);
    757a:	6803      	ldr	r3, [r0, #0]
    757c:	4a0c      	ldr	r2, [pc, #48]	; (75b0 <FlexCAN::message_isr()+0x230>)
    757e:	685b      	ldr	r3, [r3, #4]
    7580:	4293      	cmp	r3, r2
    7582:	d10d      	bne.n	75a0 <FlexCAN::message_isr()+0x220>
                for (uint32_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    7584:	45b0      	cmp	r8, r6
    7586:	d1f2      	bne.n	756e <FlexCAN::message_isr()+0x1ee>
    FLEXCANb_IFLAG1(flexcanBase) = status;
    7588:	682a      	ldr	r2, [r5, #0]
    758a:	e709      	b.n	73a0 <FlexCAN::message_isr()+0x20>
                    if (stats.enabled == true) {
    758c:	f895 30fc 	ldrb.w	r3, [r5, #252]	; 0xfc
    7590:	2b00      	cmp	r3, #0
    7592:	d09a      	beq.n	74ca <FlexCAN::message_isr()+0x14a>
                        stats.ringRxFramesLost++;
    7594:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    7598:	3301      	adds	r3, #1
    759a:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            if (stats.enabled == true) {
    759e:	e783      	b.n	74a8 <FlexCAN::message_isr()+0x128>
                            thisListener->txHandler (i, controller);
    75a0:	2200      	movs	r2, #0
    75a2:	4621      	mov	r1, r4
    75a4:	4798      	blx	r3
    75a6:	e7ed      	b.n	7584 <FlexCAN::message_isr()+0x204>
    75a8:	00006b85 	.word	0x00006b85
    75ac:	1ffc0000 	.word	0x1ffc0000
    75b0:	00006b89 	.word	0x00006b89

000075b4 <can0_message_isr>:
    Can0.message_isr ();
    75b4:	4801      	ldr	r0, [pc, #4]	; (75bc <can0_message_isr+0x8>)
    75b6:	f7ff bee3 	b.w	7380 <FlexCAN::message_isr()>
    75ba:	bf00      	nop
    75bc:	1fffb2e4 	.word	0x1fffb2e4

000075c0 <can0_bus_off_isr>:
}
    75c0:	4770      	bx	lr
    75c2:	bf00      	nop

000075c4 <can0_error_isr>:
    uint32_t status = FLEXCANb_ESR1 (flexcanBase);
    75c4:	4b01      	ldr	r3, [pc, #4]	; (75cc <can0_error_isr+0x8>)
    75c6:	681b      	ldr	r3, [r3, #0]
    75c8:	6a1b      	ldr	r3, [r3, #32]
}
    75ca:	4770      	bx	lr
    75cc:	1fffb2e4 	.word	0x1fffb2e4

000075d0 <can0_tx_warn_isr>:
    75d0:	4770      	bx	lr
    75d2:	bf00      	nop

000075d4 <can0_rx_warn_isr>:
    75d4:	4770      	bx	lr
    75d6:	bf00      	nop

000075d8 <can0_wakeup_isr>:
    75d8:	4770      	bx	lr
    75da:	bf00      	nop

000075dc <_GLOBAL__sub_I_Can0>:
FlexCAN Can0 (0);
    75dc:	4801      	ldr	r0, [pc, #4]	; (75e4 <_GLOBAL__sub_I_Can0+0x8>)
    75de:	2100      	movs	r1, #0
    75e0:	f7ff bad4 	b.w	6b8c <FlexCAN::FlexCAN(unsigned char)>
    75e4:	1fffb2e4 	.word	0x1fffb2e4

000075e8 <ADC::ADC()>:
    0, 0, 0, 0, 0, 0                                    //22-27
};
#endif

// Constructor
ADC::ADC() : // awkward initialization  so there are no -Wreorder warnings
    75e8:	b530      	push	{r4, r5, lr}
    75ea:	b083      	sub	sp, #12
#if ADC_DIFF_PAIRS > 0
             adc0_obj(0, channel2sc1aADC0, diff_table_ADC0, ADC0_START)
    75ec:	490f      	ldr	r1, [pc, #60]	; (762c <ADC::ADC()+0x44>)
    75ee:	9100      	str	r1, [sp, #0]
ADC::ADC() : // awkward initialization  so there are no -Wreorder warnings
    75f0:	4604      	mov	r4, r0
             adc0_obj(0, channel2sc1aADC0, diff_table_ADC0, ADC0_START)
    75f2:	4b0f      	ldr	r3, [pc, #60]	; (7630 <ADC::ADC()+0x48>)
    75f4:	4a0f      	ldr	r2, [pc, #60]	; (7634 <ADC::ADC()+0x4c>)
    75f6:	2100      	movs	r1, #0
    75f8:	f000 fa60 	bl	7abc <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)>
#ifdef ADC_DUAL_ADCS
             ,
             adc1_obj(1, channel2sc1aADC1, diff_table_ADC1, ADC1_START)
    75fc:	f104 0540 	add.w	r5, r4, #64	; 0x40
    7600:	490d      	ldr	r1, [pc, #52]	; (7638 <ADC::ADC()+0x50>)
    7602:	9100      	str	r1, [sp, #0]
    7604:	4b0d      	ldr	r3, [pc, #52]	; (763c <ADC::ADC()+0x54>)
    7606:	4a0e      	ldr	r2, [pc, #56]	; (7640 <ADC::ADC()+0x58>)
    7608:	2101      	movs	r1, #1
    760a:	4628      	mov	r0, r5
    760c:	f000 fa56 	bl	7abc <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)>
    7610:	2302      	movs	r3, #2
#endif
{
    //ctor

    //digitalWriteFast(LED_BUILTIN, HIGH);
}
    7612:	4620      	mov	r0, r4
             adc1_obj(1, channel2sc1aADC1, diff_table_ADC1, ADC1_START)
    7614:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    7618:	f8c4 4084 	str.w	r4, [r4, #132]	; 0x84
    761c:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    7620:	f8c4 408c 	str.w	r4, [r4, #140]	; 0x8c
    7624:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
    7628:	b003      	add	sp, #12
    762a:	bd30      	pop	{r4, r5, pc}
    762c:	4003b000 	.word	0x4003b000
    7630:	00013e54 	.word	0x00013e54
    7634:	00013e5c 	.word	0x00013e5c
    7638:	400bb000 	.word	0x400bb000
    763c:	00013e58 	.word	0x00013e58
    7640:	00013e88 	.word	0x00013e88

00007644 <ADC::startContinuous(unsigned char, signed char)>:
#ifdef ADC_SINGLE_ADC
    return adc0->startContinuous(pin); // use ADC0
#else
    /* Teensy 3.1
    */
    if (adc_num == -1)
    7644:	1c53      	adds	r3, r2, #1
{
    7646:	b570      	push	{r4, r5, r6, lr}
    7648:	4604      	mov	r4, r0
    if (adc_num == -1)
    764a:	d011      	beq.n	7670 <ADC::startContinuous(unsigned char, signed char)+0x2c>
            adc0->fail_flag |= ADC_ERROR::WRONG_PIN;
            adc1->fail_flag |= ADC_ERROR::WRONG_PIN;
            return false; // all others are invalid
        }
    }
    else if (adc_num == 0)
    764c:	b152      	cbz	r2, 7664 <ADC::startContinuous(unsigned char, signed char)+0x20>
    { // user wants ADC0
        return adc0->startContinuous(pin);
    }
    else if (adc_num == 1)
    764e:	2a01      	cmp	r2, #1
    7650:	d029      	beq.n	76a6 <ADC::startContinuous(unsigned char, signed char)+0x62>
    { // user wants ADC 1
        return adc1->startContinuous(pin);
    }
    adc0->fail_flag |= ADC_ERROR::OTHER;
    7652:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
        return static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) & static_cast<uint16_t>(rhs));
    }
    //! |= operator for ADC_ERRORs, it changes the left hand side ADC_ERROR. @internal
    inline ADC_ERROR operator|=(volatile ADC_ERROR &lhs, ADC_ERROR rhs)
    {
        return lhs = static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) | static_cast<uint16_t>(rhs));
    7656:	8ad3      	ldrh	r3, [r2, #22]
    7658:	b29b      	uxth	r3, r3
    765a:	f043 0301 	orr.w	r3, r3, #1
    765e:	82d3      	strh	r3, [r2, #22]
    return false;
#endif
}
    7660:	2000      	movs	r0, #0
    7662:	bd70      	pop	{r4, r5, r6, pc}
    7664:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return adc0->startContinuous(pin);
    7668:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    766c:	f000 baf8 	b.w	7c60 <ADC_Module::startContinuous(unsigned char)>
        bool adc0Pin = adc0->checkPin(pin);
    7670:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    7674:	460d      	mov	r5, r1
    7676:	f000 fac9 	bl	7c0c <ADC_Module::checkPin(unsigned char)>
        bool adc1Pin = adc1->checkPin(pin);
    767a:	4629      	mov	r1, r5
        bool adc0Pin = adc0->checkPin(pin);
    767c:	4606      	mov	r6, r0
        bool adc1Pin = adc1->checkPin(pin);
    767e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    7682:	f000 fac3 	bl	7c0c <ADC_Module::checkPin(unsigned char)>
        if (adc0Pin && adc1Pin)
    7686:	b1a6      	cbz	r6, 76b2 <ADC::startContinuous(unsigned char, signed char)+0x6e>
    7688:	b318      	cbz	r0, 76d2 <ADC::startContinuous(unsigned char, signed char)+0x8e>
            if ((adc0->num_measurements) > (adc1->num_measurements))
    768a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    768e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    7692:	7d59      	ldrb	r1, [r3, #21]
    7694:	7d42      	ldrb	r2, [r0, #21]
    7696:	4291      	cmp	r1, r2
                return adc1->startContinuous(pin);
    7698:	4629      	mov	r1, r5
            if ((adc0->num_measurements) > (adc1->num_measurements))
    769a:	d806      	bhi.n	76aa <ADC::startContinuous(unsigned char, signed char)+0x66>
}
    769c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                return adc0->startContinuous(pin);
    76a0:	4618      	mov	r0, r3
    76a2:	f000 badd 	b.w	7c60 <ADC_Module::startContinuous(unsigned char)>
        return adc1->startContinuous(pin);
    76a6:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
}
    76aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return adc1->startContinuous(pin);
    76ae:	f000 bad7 	b.w	7c60 <ADC_Module::startContinuous(unsigned char)>
        else if (adc1Pin)
    76b2:	b9a8      	cbnz	r0, 76e0 <ADC::startContinuous(unsigned char, signed char)+0x9c>
            adc0->fail_flag |= ADC_ERROR::WRONG_PIN;
    76b4:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
            adc1->fail_flag |= ADC_ERROR::WRONG_PIN;
    76b8:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    76bc:	8acb      	ldrh	r3, [r1, #22]
    76be:	b29b      	uxth	r3, r3
    76c0:	f043 0304 	orr.w	r3, r3, #4
    76c4:	82cb      	strh	r3, [r1, #22]
    76c6:	8ad3      	ldrh	r3, [r2, #22]
    76c8:	b29b      	uxth	r3, r3
    76ca:	f043 0304 	orr.w	r3, r3, #4
    76ce:	82d3      	strh	r3, [r2, #22]
            return false; // all others are invalid
    76d0:	e7c6      	b.n	7660 <ADC::startContinuous(unsigned char, signed char)+0x1c>
            return adc0->startContinuous(pin);
    76d2:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    76d6:	4629      	mov	r1, r5
}
    76d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return adc0->startContinuous(pin);
    76dc:	f000 bac0 	b.w	7c60 <ADC_Module::startContinuous(unsigned char)>
            return adc1->startContinuous(pin);
    76e0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    76e4:	4629      	mov	r1, r5
}
    76e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return adc1->startContinuous(pin);
    76ea:	f000 bab9 	b.w	7c60 <ADC_Module::startContinuous(unsigned char)>
    76ee:	bf00      	nop

000076f0 <ADC_Module::getMaxValue()>:
*
*/
uint32_t ADC_Module::getMaxValue()
{
    return analog_max_val;
}
    76f0:	69c0      	ldr	r0, [r0, #28]
    76f2:	4770      	bx	lr

000076f4 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>:
* VERY_HIGH_SPEED is the highest possible sampling speed (0 ADCK added).
*/
void ADC_Module::setConversionSpeed(ADC_CONVERSION_SPEED speed)
{

    if (speed == conversion_speed)
    76f4:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    76f8:	428b      	cmp	r3, r1
    76fa:	d00a      	beq.n	7712 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1e>
{
    76fc:	b470      	push	{r4, r5, r6}
    //if (calibrating) wait_for_cal();

    bool is_adack = false;
    uint32_t ADC_CFG1_speed = 0; // store the clock and divisor (set to 0 to avoid warnings)

    switch (speed)
    76fe:	2909      	cmp	r1, #9
    7700:	f200 8093 	bhi.w	782a <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x136>
    7704:	e8df f001 	tbb	[pc, r1]
    7708:	06612f2f 	.word	0x06612f2f
    770c:	8e817106 	.word	0x8e817106
    7710:	5440      	.short	0x5440
    7712:	4770      	bx	lr
    case ADC_CONVERSION_SPEED::HIGH_SPEED:
#ifdef ADC_TEENSY_4
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLPC);
#else
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    7714:	6b43      	ldr	r3, [r0, #52]	; 0x34
    *   \return A pointer to the aliased address of the bit of reg
    */
    template <typename T>
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    {
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7716:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    771a:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    771e:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    7722:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, bit) = 0;
    }
    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7726:	2400      	movs	r4, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7728:	2201      	movs	r2, #1
    772a:	f8cc 2008 	str.w	r2, [ip, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    772e:	4626      	mov	r6, r4
    7730:	61dc      	str	r4, [r3, #28]
    7732:	2500      	movs	r5, #0
    7734:	f8cc 500c 	str.w	r5, [ip, #12]
        bitband_address(reg, bit) = state;
    }
    template <typename T>
    __attribute__((always_inline)) inline void changeBitFlag(volatile T &reg, T flag, T state)
    {
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    7738:	601e      	str	r6, [r3, #0]
        if (__builtin_popcount(flag) > 1)
        {
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    773a:	605d      	str	r5, [r3, #4]
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    773c:	615c      	str	r4, [r3, #20]
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    773e:	619a      	str	r2, [r3, #24]
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_ADICLK(3), ADC_CFG1_speed & ADC_CFG1_ADICLK(3));
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_ADIV(3), ADC_CFG1_speed & ADC_CFG1_ADIV(3));
#endif
    }

    conversion_speed = speed;
    7740:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    __disable_irq();
    7744:	b672      	cpsid	i
    atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_CAL);
    7746:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7748:	015b      	lsls	r3, r3, #5
    774a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    calibrating = 1;
    774e:	2201      	movs	r2, #1
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7750:	2100      	movs	r1, #0
    7752:	7642      	strb	r2, [r0, #25]
    7754:	f8c3 149c 	str.w	r1, [r3, #1180]	; 0x49c
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7758:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
    775c:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
    __enable_irq();
    7760:	b662      	cpsie	i
    calibrate();
}
    7762:	bc70      	pop	{r4, r5, r6}
    7764:	4770      	bx	lr
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    7766:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7768:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    776c:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    7770:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    7774:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7778:	2200      	movs	r2, #0
    777a:	f8cc 2008 	str.w	r2, [ip, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    777e:	2201      	movs	r2, #1
    7780:	61da      	str	r2, [r3, #28]
    7782:	4614      	mov	r4, r2
    7784:	4616      	mov	r6, r2
    7786:	e7d4      	b.n	7732 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x3e>
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    7788:	6b43      	ldr	r3, [r0, #52]	; 0x34
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    778a:	2400      	movs	r4, #0
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    778c:	015a      	lsls	r2, r3, #5
    778e:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    7792:	f502 7380 	add.w	r3, r2, #256	; 0x100
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7796:	f8c2 4188 	str.w	r4, [r2, #392]	; 0x188
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    779a:	f502 72c0 	add.w	r2, r2, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    779e:	61dc      	str	r4, [r3, #28]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    77a0:	2401      	movs	r4, #1
    77a2:	60d4      	str	r4, [r2, #12]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    77a4:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    77a6:	605c      	str	r4, [r3, #4]
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    77a8:	601c      	str	r4, [r3, #0]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    77aa:	619a      	str	r2, [r3, #24]
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    77ac:	615a      	str	r2, [r3, #20]
    }
    77ae:	e7c7      	b.n	7740 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x4c>
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    77b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    77b2:	015a      	lsls	r2, r3, #5
    77b4:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    77b8:	f502 7380 	add.w	r3, r2, #256	; 0x100
    77bc:	f502 72c0 	add.w	r2, r2, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    77c0:	2401      	movs	r4, #1
    77c2:	6094      	str	r4, [r2, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    77c4:	2400      	movs	r4, #0
    77c6:	61dc      	str	r4, [r3, #28]
    if (is_adack)
    77c8:	e7ea      	b.n	77a0 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xac>
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    77ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    77cc:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    77d0:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    77d4:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    77d8:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    77dc:	2600      	movs	r6, #0
    77de:	2201      	movs	r2, #1
    77e0:	f8cc 6008 	str.w	r6, [ip, #8]
    77e4:	4614      	mov	r4, r2
    77e6:	61de      	str	r6, [r3, #28]
    if (is_adack)
    77e8:	e7a3      	b.n	7732 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x3e>
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    77ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    77ec:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    77f0:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    77f4:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    77f8:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    77fc:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    77fe:	2401      	movs	r4, #1
    7800:	f8cc 4008 	str.w	r4, [ip, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7804:	4616      	mov	r6, r2
    7806:	61da      	str	r2, [r3, #28]
    if (is_adack)
    7808:	e793      	b.n	7732 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x3e>
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    780a:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    780c:	015a      	lsls	r2, r3, #5
    780e:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    7812:	f502 7380 	add.w	r3, r2, #256	; 0x100
    7816:	f502 72c0 	add.w	r2, r2, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    781a:	2400      	movs	r4, #0
    781c:	6094      	str	r4, [r2, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    781e:	2401      	movs	r4, #1
    7820:	61dc      	str	r4, [r3, #28]
    if (is_adack)
    7822:	e7bd      	b.n	77a0 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xac>
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    7824:	6b43      	ldr	r3, [r0, #52]	; 0x34
    7826:	2401      	movs	r4, #1
    7828:	e7b0      	b.n	778c <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x98>
    782a:	8ac3      	ldrh	r3, [r0, #22]
    782c:	b29b      	uxth	r3, r3
    782e:	f043 0301 	orr.w	r3, r3, #1
    7832:	82c3      	strh	r3, [r0, #22]
    7834:	e795      	b.n	7762 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x6e>
    7836:	bf00      	nop

00007838 <ADC_Module::wait_for_cal()>:
    while (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CAL))
    7838:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    783a:	015b      	lsls	r3, r3, #5
    783c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
{
    7840:	b510      	push	{r4, lr}
        return (volatile bool)bitband_address(reg, bit);
    }
    template <typename T>
    __attribute__((always_inline)) inline volatile bool getBitFlag(volatile T &reg, T flag)
    {
        return (volatile bool)bitband_address(reg, 31 - __builtin_clzl(flag));
    7842:	f8d3 249c 	ldr.w	r2, [r3, #1180]	; 0x49c
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7846:	f503 6390 	add.w	r3, r3, #1152	; 0x480
    784a:	4604      	mov	r4, r0
    while (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CAL))
    784c:	b152      	cbz	r2, 7864 <ADC_Module::wait_for_cal()+0x2c>
        yield();
    784e:	f003 fc63 	bl	b118 <yield>
    while (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CAL))
    7852:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7854:	015b      	lsls	r3, r3, #5
    7856:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    785a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
        return (volatile bool)bitband_address(reg, 31 - __builtin_clzl(flag));
    785e:	69da      	ldr	r2, [r3, #28]
    7860:	2a00      	cmp	r2, #0
    7862:	d1f4      	bne.n	784e <ADC_Module::wait_for_cal()+0x16>
    7864:	699b      	ldr	r3, [r3, #24]
    if (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CALF))
    7866:	b123      	cbz	r3, 7872 <ADC_Module::wait_for_cal()+0x3a>
    7868:	8ae3      	ldrh	r3, [r4, #22]
    786a:	b29b      	uxth	r3, r3
    786c:	f043 0302 	orr.w	r3, r3, #2
    7870:	82e3      	strh	r3, [r4, #22]
    __disable_irq();
    7872:	b672      	cpsid	i
    if (calibrating)
    7874:	7e63      	ldrb	r3, [r4, #25]
    7876:	b303      	cbz	r3, 78ba <ADC_Module::wait_for_cal()+0x82>
        sum = adc_regs.CLPS + adc_regs.CLP4 + adc_regs.CLP3 + adc_regs.CLP2 + adc_regs.CLP1 + adc_regs.CLP0;
    7878:	6b62      	ldr	r2, [r4, #52]	; 0x34
    787a:	6b93      	ldr	r3, [r2, #56]	; 0x38
    787c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    787e:	440b      	add	r3, r1
    7880:	6c11      	ldr	r1, [r2, #64]	; 0x40
    7882:	6c50      	ldr	r0, [r2, #68]	; 0x44
    7884:	440b      	add	r3, r1
    7886:	6c91      	ldr	r1, [r2, #72]	; 0x48
    7888:	4403      	add	r3, r0
    788a:	440b      	add	r3, r1
    788c:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    788e:	440b      	add	r3, r1
        sum = (sum / 2) | 0x8000;
    7890:	f3c3 034e 	ubfx	r3, r3, #1, #15
        adc_regs.PG = sum;
    7894:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    7898:	62d3      	str	r3, [r2, #44]	; 0x2c
        sum = adc_regs.CLMS + adc_regs.CLM4 + adc_regs.CLM3 + adc_regs.CLM2 + adc_regs.CLM1 + adc_regs.CLM0;
    789a:	6d93      	ldr	r3, [r2, #88]	; 0x58
    789c:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
    789e:	440b      	add	r3, r1
    78a0:	6e11      	ldr	r1, [r2, #96]	; 0x60
    78a2:	6e50      	ldr	r0, [r2, #100]	; 0x64
    78a4:	440b      	add	r3, r1
    78a6:	6e91      	ldr	r1, [r2, #104]	; 0x68
    78a8:	4403      	add	r3, r0
    78aa:	440b      	add	r3, r1
    78ac:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
    78ae:	440b      	add	r3, r1
        sum = (sum / 2) | 0x8000;
    78b0:	f3c3 034e 	ubfx	r3, r3, #1, #15
        adc_regs.MG = sum;
    78b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    78b8:	6313      	str	r3, [r2, #48]	; 0x30
    __enable_irq();
    78ba:	b662      	cpsie	i
    if (init_calib)
    78bc:	7ea3      	ldrb	r3, [r4, #26]
    calibrating = 0;
    78be:	2200      	movs	r2, #0
    78c0:	7662      	strb	r2, [r4, #25]
    if (init_calib)
    78c2:	b903      	cbnz	r3, 78c6 <ADC_Module::wait_for_cal()+0x8e>
}
    78c4:	bd10      	pop	{r4, pc}
        setConversionSpeed(ADC_CONVERSION_SPEED::MED_SPEED);
    78c6:	2102      	movs	r1, #2
    78c8:	4620      	mov	r0, r4
    78ca:	f7ff ff13 	bl	76f4 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
* HIGH_SPEED adds +6 ADCK.
* VERY_HIGH_SPEED is the highest possible sampling speed (0 ADCK added).
*/
void ADC_Module::setSamplingSpeed(ADC_SAMPLING_SPEED speed)
{
    if (calibrating)
    78ce:	7e63      	ldrb	r3, [r4, #25]
    78d0:	bb03      	cbnz	r3, 7914 <ADC_Module::wait_for_cal()+0xdc>
    case ADC_SAMPLING_SPEED::LOW_SPEED:
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
        atomic::changeBitFlag(adc_regs.CFG2, ADC_CFG2_ADLSTS(3), ADC_CFG2_ADLSTS(1)); // high sampling time (+16 ADCK)
        break;
    case ADC_SAMPLING_SPEED::MED_SPEED:
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    78d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    78d4:	0159      	lsls	r1, r3, #5
    78d6:	f101 4284 	add.w	r2, r1, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    78da:	2001      	movs	r0, #1
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    78dc:	2100      	movs	r1, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    78de:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    78e2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    78e6:	f8c2 0184 	str.w	r0, [r2, #388]	; 0x184
*
*/
void ADC_Module::setAveraging(uint8_t num)
{

    if (calibrating)
    78ea:	7e62      	ldrb	r2, [r4, #25]
    sampling_speed = speed;
    78ec:	2102      	movs	r1, #2
    78ee:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    if (calibrating)
    78f2:	b992      	cbnz	r2, 791a <ADC_Module::wait_for_cal()+0xe2>
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    78f4:	015b      	lsls	r3, r3, #5
    78f6:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    78fa:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    78fc:	2001      	movs	r0, #1
#else
            atomic::setBitFlag(adc_regs.SC3, ADC_SC3_AVGS(3));
#endif
        }
    }
    analog_num_average = num;
    78fe:	2104      	movs	r1, #4
    7900:	f8c3 0488 	str.w	r0, [r3, #1160]	; 0x488
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7904:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    7908:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
    790c:	f884 1020 	strb.w	r1, [r4, #32]
        init_calib = 0; // clear
    7910:	76a2      	strb	r2, [r4, #26]
}
    7912:	bd10      	pop	{r4, pc}
        wait_for_cal();
    7914:	f7ff ff90 	bl	7838 <ADC_Module::wait_for_cal()>
    7918:	e7db      	b.n	78d2 <ADC_Module::wait_for_cal()+0x9a>
        wait_for_cal();
    791a:	4620      	mov	r0, r4
    791c:	f7ff ff8c 	bl	7838 <ADC_Module::wait_for_cal()>
        atomic::setBitFlag(adc_regs.SC3, ADC_SC3_AVGE);
    7920:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7922:	e7e7      	b.n	78f4 <ADC_Module::wait_for_cal()+0xbc>

00007924 <ADC_Module::setResolution(unsigned char)>:
{
    7924:	b538      	push	{r3, r4, r5, lr}
    if (analog_res_bits == bits)
    7926:	7ec3      	ldrb	r3, [r0, #27]
    7928:	428b      	cmp	r3, r1
    792a:	d012      	beq.n	7952 <ADC_Module::setResolution(unsigned char)+0x2e>
    if (calibrating)
    792c:	7e43      	ldrb	r3, [r0, #25]
    792e:	4604      	mov	r4, r0
    7930:	460d      	mov	r5, r1
    7932:	bb0b      	cbnz	r3, 7978 <ADC_Module::setResolution(unsigned char)+0x54>
    if (bits <= 9)
    7934:	2d09      	cmp	r5, #9
    7936:	d80d      	bhi.n	7954 <ADC_Module::setResolution(unsigned char)+0x30>
        atomic::clearBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3));
    7938:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    793a:	015b      	lsls	r3, r3, #5
    793c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7940:	2000      	movs	r0, #0
    7942:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    7946:	21ff      	movs	r1, #255	; 0xff
        config = 8;
    7948:	2208      	movs	r2, #8
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    794a:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
        analog_max_val = 255; // diff mode 9 bits has 1 bit for sign, so max value is the same as single 8 bits
    794e:	61e1      	str	r1, [r4, #28]
    analog_res_bits = config;
    7950:	76e2      	strb	r2, [r4, #27]
}
    7952:	bd38      	pop	{r3, r4, r5, pc}
    else if (bits <= 11)
    7954:	2d0b      	cmp	r5, #11
    7956:	d912      	bls.n	797e <ADC_Module::setResolution(unsigned char)+0x5a>
    else if (bits <= 13)
    7958:	2d0d      	cmp	r5, #13
    795a:	d81e      	bhi.n	799a <ADC_Module::setResolution(unsigned char)+0x76>
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3), ADC_CFG1_MODE(1));
    795c:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    795e:	015b      	lsls	r3, r3, #5
    7960:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    7964:	2200      	movs	r2, #0
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    7966:	2001      	movs	r0, #1
    7968:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    796c:	f640 71ff 	movw	r1, #4095	; 0xfff
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    7970:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        config = 12;
    7974:	220c      	movs	r2, #12
    7976:	e7ea      	b.n	794e <ADC_Module::setResolution(unsigned char)+0x2a>
        wait_for_cal();
    7978:	f7ff ff5e 	bl	7838 <ADC_Module::wait_for_cal()>
    797c:	e7da      	b.n	7934 <ADC_Module::setResolution(unsigned char)+0x10>
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3), ADC_CFG1_MODE(2));
    797e:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7980:	015b      	lsls	r3, r3, #5
    7982:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    7986:	2201      	movs	r2, #1
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    7988:	2000      	movs	r0, #0
    798a:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    798e:	f240 31ff 	movw	r1, #1023	; 0x3ff
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    7992:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        config = 10;
    7996:	220a      	movs	r2, #10
    7998:	e7d9      	b.n	794e <ADC_Module::setResolution(unsigned char)+0x2a>
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3));
    799a:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    799c:	015b      	lsls	r3, r3, #5
    799e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    79a2:	2001      	movs	r0, #1
    79a4:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    79a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
        config = 16;
    79ac:	2210      	movs	r2, #16
    79ae:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
        analog_max_val = 65535;
    79b2:	e7cc      	b.n	794e <ADC_Module::setResolution(unsigned char)+0x2a>

000079b4 <ADC_Module::analog_init()>:
{
    79b4:	b538      	push	{r3, r4, r5, lr}
        else
        {
            CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
        }
#else
        if (ADC_num == 0)
    79b6:	7e03      	ldrb	r3, [r0, #24]
        {
            SIM_SCGC6 |= SIM_SCGC6_ADC0;
    79b8:	4a3d      	ldr	r2, [pc, #244]	; (7ab0 <ADC_Module::analog_init()+0xfc>)
    79ba:	4604      	mov	r4, r0
        if (ADC_num == 0)
    79bc:	2b00      	cmp	r3, #0
    79be:	d16a      	bne.n	7a96 <ADC_Module::analog_init()+0xe2>
            SIM_SCGC6 |= SIM_SCGC6_ADC0;
    79c0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    79c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    79c6:	63d3      	str	r3, [r2, #60]	; 0x3c
    atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_MUXSEL);
    79c8:	6b62      	ldr	r2, [r4, #52]	; 0x34
    //! Stops the internal reference
    /** This is called automatically by ADC_Module::setReference(ref) when ref is any other than REF_1V2
    */
    __attribute__((always_inline)) inline void stop()
    {
        VREF_SC = 0;
    79ca:	483a      	ldr	r0, [pc, #232]	; (7ab4 <ADC_Module::analog_init()+0x100>)
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    79cc:	493a      	ldr	r1, [pc, #232]	; (7ab8 <ADC_Module::analog_init()+0x104>)
    pga_value = 1;
    79ce:	f240 4501 	movw	r5, #1025	; 0x401
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    79d2:	0152      	lsls	r2, r2, #5
    79d4:	8465      	strh	r5, [r4, #34]	; 0x22
    79d6:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    sampling_speed = ADC_SAMPLING_SPEED::VERY_HIGH_SPEED;
    79da:	2504      	movs	r5, #4
    analog_res_bits = 0;
    79dc:	2300      	movs	r3, #0
    sampling_speed = ADC_SAMPLING_SPEED::VERY_HIGH_SPEED;
    79de:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    79e2:	2501      	movs	r5, #1
    analog_res_bits = 0;
    79e4:	76e3      	strb	r3, [r4, #27]
    analog_max_val = 0;
    79e6:	61e3      	str	r3, [r4, #28]
    analog_num_average = 0;
    79e8:	f884 3020 	strb.w	r3, [r4, #32]
    interrupts_enabled = false;
    79ec:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    calibrating = 0;
    79f0:	7663      	strb	r3, [r4, #25]
    fail_flag = ADC_ERROR::CLEAR; // clear all errors
    79f2:	82e3      	strh	r3, [r4, #22]
    num_measurements = 0;
    79f4:	7563      	strb	r3, [r4, #21]
    79f6:	f8c2 5190 	str.w	r5, [r2, #400]	; 0x190
    79fa:	7043      	strb	r3, [r0, #1]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    79fc:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
        atomic::clearBitFlag(adc_regs.SC2, ADC_SC2_REFSEL(1));
    7a00:	6b62      	ldr	r2, [r4, #52]	; 0x34
        analog_reference_internal = ADC_REF_SOURCE::REF_DEFAULT;
    7a02:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7a06:	0152      	lsls	r2, r2, #5
    7a08:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7a0c:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
    __disable_irq();
    7a10:	b672      	cpsid	i
    atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_CAL);
    7a12:	6b62      	ldr	r2, [r4, #52]	; 0x34
    calibrating = 1;
    7a14:	7665      	strb	r5, [r4, #25]
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7a16:	0152      	lsls	r2, r2, #5
    7a18:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7a1c:	f8c2 349c 	str.w	r3, [r2, #1180]	; 0x49c
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7a20:	f8c2 5498 	str.w	r5, [r2, #1176]	; 0x498
    7a24:	f8c2 549c 	str.w	r5, [r2, #1180]	; 0x49c
    __enable_irq();
    7a28:	b662      	cpsie	i
    setResolution(10);
    7a2a:	210a      	movs	r1, #10
    7a2c:	4620      	mov	r0, r4
    7a2e:	f7ff ff79 	bl	7924 <ADC_Module::setResolution(unsigned char)>
    if (calibrating)
    7a32:	7e63      	ldrb	r3, [r4, #25]
    init_calib = 1;
    7a34:	76a5      	strb	r5, [r4, #26]
    if (calibrating)
    7a36:	bb9b      	cbnz	r3, 7aa0 <ADC_Module::analog_init()+0xec>
        atomic::setBitFlag(adc_regs.SC3, ADC_SC3_AVGE);
    7a38:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7a3a:	015b      	lsls	r3, r3, #5
    7a3c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7a40:	2101      	movs	r1, #1
    analog_num_average = num;
    7a42:	2220      	movs	r2, #32
    7a44:	f8c3 1488 	str.w	r1, [r3, #1160]	; 0x488
    setConversionSpeed(ADC_CONVERSION_SPEED::LOW_SPEED);
    7a48:	4620      	mov	r0, r4
    7a4a:	f8c3 1484 	str.w	r1, [r3, #1156]	; 0x484
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    7a4e:	f8c3 1480 	str.w	r1, [r3, #1152]	; 0x480
    analog_num_average = num;
    7a52:	f884 2020 	strb.w	r2, [r4, #32]
    setConversionSpeed(ADC_CONVERSION_SPEED::LOW_SPEED);
    7a56:	f7ff fe4d 	bl	76f4 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
    if (calibrating)
    7a5a:	7e63      	ldrb	r3, [r4, #25]
    7a5c:	bb23      	cbnz	r3, 7aa8 <ADC_Module::analog_init()+0xf4>
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    7a5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7a60:	0159      	lsls	r1, r3, #5
    7a62:	f101 4384 	add.w	r3, r1, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7a66:	2201      	movs	r2, #1
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    7a68:	2000      	movs	r0, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7a6a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    7a6e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    7a72:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
    sampling_speed = speed;
    7a76:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __disable_irq();
    7a7a:	b672      	cpsid	i
    atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_CAL);
    7a7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    calibrating = 1;
    7a7e:	7662      	strb	r2, [r4, #25]
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7a80:	015b      	lsls	r3, r3, #5
    7a82:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7a86:	f8c3 049c 	str.w	r0, [r3, #1180]	; 0x49c
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7a8a:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
    7a8e:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
    __enable_irq();
    7a92:	b662      	cpsie	i
}
    7a94:	bd38      	pop	{r3, r4, r5, pc}
        }
        else
        {
            SIM_SCGC3 |= SIM_SCGC3_ADC1;
    7a96:	6b13      	ldr	r3, [r2, #48]	; 0x30
    7a98:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    7a9c:	6313      	str	r3, [r2, #48]	; 0x30
    7a9e:	e793      	b.n	79c8 <ADC_Module::analog_init()+0x14>
        wait_for_cal();
    7aa0:	4620      	mov	r0, r4
    7aa2:	f7ff fec9 	bl	7838 <ADC_Module::wait_for_cal()>
    7aa6:	e7c7      	b.n	7a38 <ADC_Module::analog_init()+0x84>
        wait_for_cal();
    7aa8:	f7ff fec6 	bl	7838 <ADC_Module::wait_for_cal()>
    7aac:	e7d7      	b.n	7a5e <ADC_Module::analog_init()+0xaa>
    7aae:	bf00      	nop
    7ab0:	40048000 	.word	0x40048000
    7ab4:	40074000 	.word	0x40074000
    7ab8:	42fa0000 	.word	0x42fa0000

00007abc <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)>:
ADC_Module::ADC_Module(uint8_t ADC_number,
    7abc:	b510      	push	{r4, lr}
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    7abe:	2900      	cmp	r1, #0
                       ADC_REGS_t &a_adc_regs) : ADC_num(ADC_number), channel2sc1a(a_channel2sc1a)
    7ac0:	6282      	str	r2, [r0, #40]	; 0x28
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    7ac2:	4a09      	ldr	r2, [pc, #36]	; (7ae8 <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)+0x2c>)
                                                 diff_table(a_diff_table)
    7ac4:	6303      	str	r3, [r0, #48]	; 0x30
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    7ac6:	bf0c      	ite	eq
    7ac8:	2339      	moveq	r3, #57	; 0x39
    7aca:	233a      	movne	r3, #58	; 0x3a
                       ADC_REGS_t &a_adc_regs) : ADC_num(ADC_number), channel2sc1a(a_channel2sc1a)
    7acc:	7601      	strb	r1, [r0, #24]
                                                 IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC1 : IRQ_NUMBER_t::IRQ_ADC0)
    7ace:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    7ad2:	4906      	ldr	r1, [pc, #24]	; (7aec <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)+0x30>)
ADC_Module::ADC_Module(uint8_t ADC_number,
    7ad4:	9b02      	ldr	r3, [sp, #8]
                                                 adc_regs(a_adc_regs)
    7ad6:	6343      	str	r3, [r0, #52]	; 0x34
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    7ad8:	bf18      	it	ne
    7ada:	4611      	movne	r1, r2
ADC_Module::ADC_Module(uint8_t ADC_number,
    7adc:	4604      	mov	r4, r0
    7ade:	6381      	str	r1, [r0, #56]	; 0x38
    analog_init();
    7ae0:	f7ff ff68 	bl	79b4 <ADC_Module::analog_init()>
}
    7ae4:	4620      	mov	r0, r4
    7ae6:	bd10      	pop	{r4, pc}
    7ae8:	40036038 	.word	0x40036038
    7aec:	40036010 	.word	0x40036010

00007af0 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>:
{
    7af0:	b538      	push	{r3, r4, r5, lr}
    if (calibrating)
    7af2:	7e43      	ldrb	r3, [r0, #25]
{
    7af4:	4605      	mov	r5, r0
    7af6:	460c      	mov	r4, r1
    if (calibrating)
    7af8:	b9a3      	cbnz	r3, 7b24 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x34>
    switch (speed)
    7afa:	2c04      	cmp	r4, #4
    7afc:	d80f      	bhi.n	7b1e <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x2e>
    7afe:	e8df f004 	tbb	[pc, r4]
    7b02:	2d1e      	.short	0x2d1e
    7b04:	033c      	.short	0x033c
    7b06:	14          	.byte	0x14
    7b07:	00          	.byte	0x00
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);    // long sampling time enable
    7b08:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7b0a:	015a      	lsls	r2, r3, #5
    7b0c:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7b10:	2101      	movs	r1, #1
    7b12:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
    7b16:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    7b1a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    sampling_speed = speed;
    7b1e:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    7b22:	bd38      	pop	{r3, r4, r5, pc}
        wait_for_cal();
    7b24:	f7ff fe88 	bl	7838 <ADC_Module::wait_for_cal()>
    7b28:	e7e7      	b.n	7afa <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0xa>
        atomic::clearBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP); // shortest sampling time
    7b2a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7b2c:	015b      	lsls	r3, r3, #5
    7b2e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7b32:	2200      	movs	r2, #0
    7b34:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    sampling_speed = speed;
    7b38:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    7b3c:	bd38      	pop	{r3, r4, r5, pc}
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);      // long sampling time enable
    7b3e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7b40:	015a      	lsls	r2, r3, #5
    7b42:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7b46:	2101      	movs	r1, #1
    7b48:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7b4c:	2100      	movs	r1, #0
    7b4e:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    7b52:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    sampling_speed = speed;
    7b56:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    7b5a:	bd38      	pop	{r3, r4, r5, pc}
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    7b5c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7b5e:	015a      	lsls	r2, r3, #5
    7b60:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7b64:	2101      	movs	r1, #1
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    7b66:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7b68:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    7b6c:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    7b70:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    sampling_speed = speed;
    7b74:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    7b78:	bd38      	pop	{r3, r4, r5, pc}
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    7b7a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7b7c:	015a      	lsls	r2, r3, #5
    7b7e:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7b82:	2101      	movs	r1, #1
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    7b84:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7b86:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    7b8a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    7b8e:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
    sampling_speed = speed;
    7b92:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    7b96:	bd38      	pop	{r3, r4, r5, pc}

00007b98 <ADC_Module::setAveraging(unsigned char)>:
{
    7b98:	b538      	push	{r3, r4, r5, lr}
    if (calibrating)
    7b9a:	7e43      	ldrb	r3, [r0, #25]
{
    7b9c:	4604      	mov	r4, r0
    7b9e:	460d      	mov	r5, r1
    if (calibrating)
    7ba0:	bb2b      	cbnz	r3, 7bee <ADC_Module::setAveraging(unsigned char)+0x56>
    if (num <= 1)
    7ba2:	2d01      	cmp	r5, #1
        atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_AVGE);
    7ba4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    if (num <= 1)
    7ba6:	d918      	bls.n	7bda <ADC_Module::setAveraging(unsigned char)+0x42>
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7ba8:	015b      	lsls	r3, r3, #5
    7baa:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    7bae:	f503 6390 	add.w	r3, r3, #1152	; 0x480
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7bb2:	2101      	movs	r1, #1
        if (num <= 4)
    7bb4:	2d04      	cmp	r5, #4
    7bb6:	6099      	str	r1, [r3, #8]
    7bb8:	d806      	bhi.n	7bc8 <ADC_Module::setAveraging(unsigned char)+0x30>
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7bba:	2100      	movs	r1, #0
    7bbc:	6059      	str	r1, [r3, #4]
            num = 4;
    7bbe:	2204      	movs	r2, #4
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    7bc0:	6019      	str	r1, [r3, #0]
    analog_num_average = num;
    7bc2:	f884 2020 	strb.w	r2, [r4, #32]
}
    7bc6:	bd38      	pop	{r3, r4, r5, pc}
        else if (num <= 8)
    7bc8:	2d08      	cmp	r5, #8
    7bca:	d913      	bls.n	7bf4 <ADC_Module::setAveraging(unsigned char)+0x5c>
        else if (num <= 16)
    7bcc:	2d10      	cmp	r5, #16
    7bce:	d818      	bhi.n	7c02 <ADC_Module::setAveraging(unsigned char)+0x6a>
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    7bd0:	2200      	movs	r2, #0
    7bd2:	601a      	str	r2, [r3, #0]
            num = 16;
    7bd4:	2210      	movs	r2, #16
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    7bd6:	6059      	str	r1, [r3, #4]
    }
    7bd8:	e7f3      	b.n	7bc2 <ADC_Module::setAveraging(unsigned char)+0x2a>
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7bda:	015b      	lsls	r3, r3, #5
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7bdc:	2100      	movs	r1, #0
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7bde:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        num = 0;
    7be2:	460a      	mov	r2, r1
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7be4:	f8c3 1488 	str.w	r1, [r3, #1160]	; 0x488
    analog_num_average = num;
    7be8:	f884 2020 	strb.w	r2, [r4, #32]
}
    7bec:	bd38      	pop	{r3, r4, r5, pc}
        wait_for_cal();
    7bee:	f7ff fe23 	bl	7838 <ADC_Module::wait_for_cal()>
    7bf2:	e7d6      	b.n	7ba2 <ADC_Module::setAveraging(unsigned char)+0xa>
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    7bf4:	2000      	movs	r0, #0
            num = 8;
    7bf6:	2208      	movs	r2, #8
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    7bf8:	6019      	str	r1, [r3, #0]
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    7bfa:	6058      	str	r0, [r3, #4]
    analog_num_average = num;
    7bfc:	f884 2020 	strb.w	r2, [r4, #32]
}
    7c00:	bd38      	pop	{r3, r4, r5, pc}
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7c02:	6059      	str	r1, [r3, #4]
            num = 32;
    7c04:	2220      	movs	r2, #32
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    7c06:	6019      	str	r1, [r3, #0]
    }
    7c08:	e7db      	b.n	7bc2 <ADC_Module::setAveraging(unsigned char)+0x2a>
    7c0a:	bf00      	nop

00007c0c <ADC_Module::checkPin(unsigned char)>:

// check whether the pin is a valid analog pin
bool ADC_Module::checkPin(uint8_t pin)
{

    if (pin > ADC_MAX_PIN)
    7c0c:	292b      	cmp	r1, #43	; 0x2b
    7c0e:	d807      	bhi.n	7c20 <ADC_Module::checkPin(unsigned char)+0x14>
    {
        return false; // all others are invalid
    }

    // translate pin number to SC1A number, that also contains MUX a or b info.
    const uint8_t sc1a_pin = channel2sc1a[pin];
    7c10:	6a83      	ldr	r3, [r0, #40]	; 0x28

    // check for valid pin
    if ((sc1a_pin & ADC_SC1A_CHANNELS) == ADC_SC1A_PIN_INVALID)
    7c12:	5c58      	ldrb	r0, [r3, r1]
    7c14:	f000 001f 	and.w	r0, r0, #31
    7c18:	381f      	subs	r0, #31
    7c1a:	bf18      	it	ne
    7c1c:	2001      	movne	r0, #1
    7c1e:	4770      	bx	lr
        return false; // all others are invalid
    7c20:	2000      	movs	r0, #0
    {
        return false; // all others are invalid
    }

    return true;
}
    7c22:	4770      	bx	lr

00007c24 <ADC_Module::startReadFast(unsigned char)>:
// It doesn't change the continuous conversion bit
void ADC_Module::startReadFast(uint8_t pin)
{

    // translate pin number to SC1A number, that also contains MUX a or b info.
    const uint8_t sc1a_pin = channel2sc1a[pin];
    7c24:	6a83      	ldr	r3, [r0, #40]	; 0x28

#ifdef ADC_TEENSY_4
// Teensy 4 has no a or b channels
#else
    if (sc1a_pin & ADC_SC1A_PIN_MUX)
    7c26:	565a      	ldrsb	r2, [r3, r1]
    const uint8_t sc1a_pin = channel2sc1a[pin];
    7c28:	5c5b      	ldrb	r3, [r3, r1]
    if (sc1a_pin & ADC_SC1A_PIN_MUX)
    7c2a:	2a00      	cmp	r2, #0
    { // mux a
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_MUXSEL);
    7c2c:	6b42      	ldr	r2, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7c2e:	ea4f 1242 	mov.w	r2, r2, lsl #5
    7c32:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    7c36:	bfb4      	ite	lt
    7c38:	2100      	movlt	r1, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7c3a:	2101      	movge	r1, #1
    7c3c:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_MUXSEL);
    }
#endif

    // select pin for single-ended mode and start conversion, enable interrupts if requested
    __disable_irq();
    7c40:	b672      	cpsid	i
#ifdef ADC_TEENSY_4
    adc_regs.HC0 = (sc1a_pin & ADC_SC1A_CHANNELS) + interrupts_enabled * ADC_HC_AIEN;
#else
    adc_regs.SC1A = (sc1a_pin & ADC_SC1A_CHANNELS) + atomic::getBitFlag(adc_regs.SC1A, ADC_SC1_AIEN) * ADC_SC1_AIEN;
    7c42:	6b41      	ldr	r1, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7c44:	014a      	lsls	r2, r1, #5
    7c46:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    7c4a:	f003 031f 	and.w	r3, r3, #31
        return (volatile bool)bitband_address(reg, 31 - __builtin_clzl(flag));
    7c4e:	6992      	ldr	r2, [r2, #24]
    7c50:	3a00      	subs	r2, #0
    7c52:	bf18      	it	ne
    7c54:	2201      	movne	r2, #1
    7c56:	eb03 1382 	add.w	r3, r3, r2, lsl #6
    7c5a:	600b      	str	r3, [r1, #0]
#endif
    __enable_irq();
    7c5c:	b662      	cpsie	i
}
    7c5e:	4770      	bx	lr

00007c60 <ADC_Module::startContinuous(unsigned char)>:
/* Starts continuous conversion on the pin
 * It returns as soon as the ADC is set, use analogReadContinuous() to read the values
 * Set the resolution, number of averages and voltage reference using the appropriate functions BEFORE calling this function
*/
bool ADC_Module::startContinuous(uint8_t pin)
{
    7c60:	b550      	push	{r4, r6, lr}
    if (pin > ADC_MAX_PIN)
    7c62:	292b      	cmp	r1, #43	; 0x2b
{
    7c64:	b083      	sub	sp, #12
    7c66:	4604      	mov	r4, r0
    if (pin > ADC_MAX_PIN)
    7c68:	d817      	bhi.n	7c9a <ADC_Module::startContinuous(unsigned char)+0x3a>
    const uint8_t sc1a_pin = channel2sc1a[pin];
    7c6a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((sc1a_pin & ADC_SC1A_CHANNELS) == ADC_SC1A_PIN_INVALID)
    7c6c:	5c5b      	ldrb	r3, [r3, r1]
    7c6e:	f003 031f 	and.w	r3, r3, #31
    7c72:	2b1f      	cmp	r3, #31
    7c74:	d011      	beq.n	7c9a <ADC_Module::startContinuous(unsigned char)+0x3a>
        fail_flag |= ADC_ERROR::WRONG_PIN;
        return false;
    }

    // check for calibration before setting channels,
    if (calibrating)
    7c76:	7e43      	ldrb	r3, [r0, #25]
    7c78:	b9bb      	cbnz	r3, 7caa <ADC_Module::startContinuous(unsigned char)+0x4a>
        atomic::setBitFlag(adc_regs.SC3, ADC_SC3_ADCO);
    7c7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
        wait_for_cal();

    // increase the counter of measurements
    num_measurements++;
    7c7c:	7d62      	ldrb	r2, [r4, #21]
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    7c7e:	015b      	lsls	r3, r3, #5
    7c80:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    7c84:	3201      	adds	r2, #1
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    7c86:	2601      	movs	r6, #1
    7c88:	7562      	strb	r2, [r4, #21]

    // set continuous conversion flag
    continuousMode();

    startReadFast(pin);
    7c8a:	4620      	mov	r0, r4
    7c8c:	f8c3 648c 	str.w	r6, [r3, #1164]	; 0x48c
    7c90:	f7ff ffc8 	bl	7c24 <ADC_Module::startReadFast(unsigned char)>

    return true;
    7c94:	4630      	mov	r0, r6
}
    7c96:	b003      	add	sp, #12
    7c98:	bd50      	pop	{r4, r6, pc}
    7c9a:	8ae3      	ldrh	r3, [r4, #22]
    7c9c:	b29b      	uxth	r3, r3
        return false;
    7c9e:	2000      	movs	r0, #0
    7ca0:	f043 0304 	orr.w	r3, r3, #4
    7ca4:	82e3      	strh	r3, [r4, #22]
}
    7ca6:	b003      	add	sp, #12
    7ca8:	bd50      	pop	{r4, r6, pc}
    7caa:	9101      	str	r1, [sp, #4]
        wait_for_cal();
    7cac:	f7ff fdc4 	bl	7838 <ADC_Module::wait_for_cal()>
    7cb0:	9901      	ldr	r1, [sp, #4]
    7cb2:	e7e2      	b.n	7c7a <ADC_Module::startContinuous(unsigned char)+0x1a>

00007cb4 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    7cb4:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    7cb8:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    7cba:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    7cbe:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    7cc0:	d101      	bne.n	7cc6 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    7cc2:	6883      	ldr	r3, [r0, #8]
    7cc4:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    7cc6:	f000 ba4f 	b.w	8168 <EventResponder::triggerEventNotImmediate()>
    7cca:	bf00      	nop

00007ccc <SPIClass::dma_rxisr()>:


//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
    7ccc:	b470      	push	{r4, r5, r6}
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    7cce:	6b01      	ldr	r1, [r0, #48]	; 0x30
    7cd0:	4a4a      	ldr	r2, [pc, #296]	; (7dfc <SPIClass::dma_rxisr()+0x130>)
    7cd2:	7909      	ldrb	r1, [r1, #4]
    7cd4:	77d1      	strb	r1, [r2, #31]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    7cd6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    7cd8:	7909      	ldrb	r1, [r1, #4]
    7cda:	7711      	strb	r1, [r2, #28]
    7cdc:	6b01      	ldr	r1, [r0, #48]	; 0x30
    7cde:	7909      	ldrb	r1, [r1, #4]
    7ce0:	7711      	strb	r1, [r2, #28]
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    7ce2:	6a82      	ldr	r2, [r0, #40]	; 0x28
void SPIClass::dma_rxisr(void) {
    7ce4:	4603      	mov	r3, r0
	if (_dma_count_remaining) {
    7ce6:	b32a      	cbz	r2, 7d34 <SPIClass::dma_rxisr()+0x68>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    7ce8:	6841      	ldr	r1, [r0, #4]
    7cea:	68c9      	ldr	r1, [r1, #12]
    7cec:	428a      	cmp	r2, r1
    7cee:	d943      	bls.n	7d78 <SPIClass::dma_rxisr()+0xac>
			_dma_count_remaining -= hardware().max_dma_count;
    7cf0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    7cf2:	6b00      	ldr	r0, [r0, #48]	; 0x30
			_dma_count_remaining -= hardware().max_dma_count;
    7cf4:	1a52      	subs	r2, r2, r1
    7cf6:	6821      	ldr	r1, [r4, #0]
    7cf8:	629a      	str	r2, [r3, #40]	; 0x28
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    7cfa:	680d      	ldr	r5, [r1, #0]
    7cfc:	f103 0424 	add.w	r4, r3, #36	; 0x24
    7d00:	42a5      	cmp	r5, r4
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    7d02:	f04f 0201 	mov.w	r2, #1
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    7d06:	d059      	beq.n	7dbc <SPIClass::dma_rxisr()+0xf0>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    7d08:	681c      	ldr	r4, [r3, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    7d0a:	68e5      	ldr	r5, [r4, #12]
    7d0c:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    7d10:	680d      	ldr	r5, [r1, #0]
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    7d12:	d129      	bne.n	7d68 <SPIClass::dma_rxisr()+0x9c>
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    7d14:	782d      	ldrb	r5, [r5, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    7d16:	680e      	ldr	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    7d18:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    7d1c:	3601      	adds	r6, #1
    7d1e:	600e      	str	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    7d20:	6365      	str	r5, [r4, #52]	; 0x34
		DMA_SERQ = channel;
    7d22:	4936      	ldr	r1, [pc, #216]	; (7dfc <SPIClass::dma_rxisr()+0x130>)
    7d24:	7900      	ldrb	r0, [r0, #4]
    7d26:	76c8      	strb	r0, [r1, #27]
			}
		}
		_dmaRX->enable();
		if (should_reenable_tx)
    7d28:	b112      	cbz	r2, 7d30 <SPIClass::dma_rxisr()+0x64>
    7d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7d2c:	791b      	ldrb	r3, [r3, #4]
    7d2e:	76cb      	strb	r3, [r1, #27]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();

	}
}
    7d30:	bc70      	pop	{r4, r5, r6}
    7d32:	4770      	bx	lr
    7d34:	6801      	ldr	r1, [r0, #0]
		port().SR = 0xFF0F0000;
    7d36:	4c32      	ldr	r4, [pc, #200]	; (7e00 <SPIClass::dma_rxisr()+0x134>)
		_dma_event_responder->triggerEvent();
    7d38:	6b40      	ldr	r0, [r0, #52]	; 0x34
		port().RSER = 0;
    7d3a:	630a      	str	r2, [r1, #48]	; 0x30
		port().SR = 0xFF0F0000;
    7d3c:	62cc      	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    7d3e:	68cc      	ldr	r4, [r1, #12]
    7d40:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
    7d44:	60cc      	str	r4, [r1, #12]
		_dma_event_responder->triggerEvent();
    7d46:	6804      	ldr	r4, [r0, #0]
    7d48:	492e      	ldr	r1, [pc, #184]	; (7e04 <SPIClass::dma_rxisr()+0x138>)
    7d4a:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    7d4c:	f04f 0c03 	mov.w	ip, #3
    7d50:	428c      	cmp	r4, r1
    7d52:	f883 c025 	strb.w	ip, [r3, #37]	; 0x25
		_dma_event_responder->triggerEvent();
    7d56:	d139      	bne.n	7dcc <SPIClass::dma_rxisr()+0x100>
		if (_type == EventTypeImmediate) {
    7d58:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    7d5a:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    7d5c:	2b02      	cmp	r3, #2
		_data = data;
    7d5e:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    7d60:	d138      	bne.n	7dd4 <SPIClass::dma_rxisr()+0x108>
}
    7d62:	bc70      	pop	{r4, r5, r6}
			(*_function)(*this);
    7d64:	6883      	ldr	r3, [r0, #8]
    7d66:	4718      	bx	r3
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    7d68:	882d      	ldrh	r5, [r5, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    7d6a:	680e      	ldr	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    7d6c:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    7d70:	3602      	adds	r6, #2
    7d72:	600e      	str	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    7d74:	6365      	str	r5, [r4, #52]	; 0x34
    7d76:	e7d4      	b.n	7d22 <SPIClass::dma_rxisr()+0x56>
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    7d78:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    7d7a:	6809      	ldr	r1, [r1, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7d7c:	8bcc      	ldrh	r4, [r1, #30]
    7d7e:	0426      	lsls	r6, r4, #16
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    7d80:	f102 30ff 	add.w	r0, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7d84:	d431      	bmi.n	7dea <SPIClass::dma_rxisr()+0x11e>
		tcd->BITER = len & 0x7fff;
    7d86:	f3c0 000e 	ubfx	r0, r0, #0, #15
    7d8a:	83c8      	strh	r0, [r1, #30]
	tcd->CITER = tcd->BITER; 
    7d8c:	8bcc      	ldrh	r4, [r1, #30]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    7d8e:	6b18      	ldr	r0, [r3, #48]	; 0x30
	tcd->CITER = tcd->BITER; 
    7d90:	b2a4      	uxth	r4, r4
    7d92:	82cc      	strh	r4, [r1, #22]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    7d94:	6804      	ldr	r4, [r0, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    7d96:	8be5      	ldrh	r5, [r4, #30]
    7d98:	042d      	lsls	r5, r5, #16
    7d9a:	d41e      	bmi.n	7dda <SPIClass::dma_rxisr()+0x10e>
		tcd->BITER = len & 0x7fff;
    7d9c:	f3c2 050e 	ubfx	r5, r2, #0, #15
    7da0:	83e5      	strh	r5, [r4, #30]
	tcd->CITER = tcd->BITER; 
    7da2:	8be5      	ldrh	r5, [r4, #30]
    7da4:	b2ad      	uxth	r5, r5
    7da6:	82e5      	strh	r5, [r4, #22]
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    7da8:	680d      	ldr	r5, [r1, #0]
			_dma_count_remaining = 0;
    7daa:	2400      	movs	r4, #0
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    7dac:	3a01      	subs	r2, #1
			_dma_count_remaining = 0;
    7dae:	629c      	str	r4, [r3, #40]	; 0x28
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    7db0:	f103 0424 	add.w	r4, r3, #36	; 0x24
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    7db4:	bf18      	it	ne
    7db6:	2201      	movne	r2, #1
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    7db8:	42a5      	cmp	r5, r4
    7dba:	d1a5      	bne.n	7d08 <SPIClass::dma_rxisr()+0x3c>
    7dbc:	6819      	ldr	r1, [r3, #0]
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    7dbe:	68cc      	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    7dc0:	f893 4024 	ldrb.w	r4, [r3, #36]	; 0x24
    7dc4:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
    7dc8:	634c      	str	r4, [r1, #52]	; 0x34
    7dca:	e7aa      	b.n	7d22 <SPIClass::dma_rxisr()+0x56>
		_dma_event_responder->triggerEvent();
    7dcc:	4623      	mov	r3, r4
    7dce:	4611      	mov	r1, r2
}
    7dd0:	bc70      	pop	{r4, r5, r6}
		_dma_event_responder->triggerEvent();
    7dd2:	4718      	bx	r3
}
    7dd4:	bc70      	pop	{r4, r5, r6}
			triggerEventNotImmediate();
    7dd6:	f000 b9c7 	b.w	8168 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    7dda:	8be5      	ldrh	r5, [r4, #30]
    7ddc:	f3c2 0608 	ubfx	r6, r2, #0, #9
    7de0:	f405 457e 	and.w	r5, r5, #65024	; 0xfe00
    7de4:	4335      	orrs	r5, r6
    7de6:	83e5      	strh	r5, [r4, #30]
    7de8:	e7db      	b.n	7da2 <SPIClass::dma_rxisr()+0xd6>
    7dea:	8bcc      	ldrh	r4, [r1, #30]
    7dec:	f3c0 0008 	ubfx	r0, r0, #0, #9
    7df0:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    7df4:	4320      	orrs	r0, r4
    7df6:	83c8      	strh	r0, [r1, #30]
    7df8:	e7c8      	b.n	7d8c <SPIClass::dma_rxisr()+0xc0>
    7dfa:	bf00      	nop
    7dfc:	40008000 	.word	0x40008000
    7e00:	ff0f0000 	.word	0xff0f0000
    7e04:	00007cb5 	.word	0x00007cb5

00007e08 <_spi_dma_rxISR0()>:
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    7e08:	b508      	push	{r3, lr}
    7e0a:	4802      	ldr	r0, [pc, #8]	; (7e14 <_spi_dma_rxISR0()+0xc>)
    7e0c:	f7ff ff5e 	bl	7ccc <SPIClass::dma_rxisr()>
    7e10:	bd08      	pop	{r3, pc}
    7e12:	bf00      	nop
    7e14:	1fffb488 	.word	0x1fffb488

00007e18 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v>:
		: port_addr(myport), hardware_addr(myhardware) {
    7e18:	4a0a      	ldr	r2, [pc, #40]	; (7e44 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x2c>)
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);
    7e1a:	490b      	ldr	r1, [pc, #44]	; (7e48 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x30>)
    7e1c:	2300      	movs	r3, #0
}
    7e1e:	b410      	push	{r4}
    7e20:	4c0a      	ldr	r4, [pc, #40]	; (7e4c <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x34>)
    7e22:	6093      	str	r3, [r2, #8]
    7e24:	8493      	strh	r3, [r2, #36]	; 0x24
    7e26:	6014      	str	r4, [r2, #0]
    7e28:	6051      	str	r1, [r2, #4]
    7e2a:	bc10      	pop	{r4}
    7e2c:	60d3      	str	r3, [r2, #12]
    7e2e:	6193      	str	r3, [r2, #24]
    7e30:	6293      	str	r3, [r2, #40]	; 0x28
    7e32:	62d3      	str	r3, [r2, #44]	; 0x2c
    7e34:	6313      	str	r3, [r2, #48]	; 0x30
    7e36:	6353      	str	r3, [r2, #52]	; 0x34
    7e38:	6113      	str	r3, [r2, #16]
    7e3a:	6153      	str	r3, [r2, #20]
    7e3c:	61d3      	str	r3, [r2, #28]
    7e3e:	6213      	str	r3, [r2, #32]
    7e40:	4770      	bx	lr
    7e42:	bf00      	nop
    7e44:	1fffb488 	.word	0x1fffb488
    7e48:	00013eb4 	.word	0x00013eb4
    7e4c:	4002c000 	.word	0x4002c000

00007e50 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)>:
#include "FilterOnePole.h"
#include "FloatDefine.h"

FilterOnePole::FilterOnePole( FILTER_TYPE ft, float fc, float initialValue ) {
    7e50:	b538      	push	{r3, r4, r5, lr}
    7e52:	4604      	mov	r4, r0
    7e54:	4608      	mov	r0, r1
  setFilter( ft, fc, initialValue );
}

void FilterOnePole::setFilter( FILTER_TYPE ft, float fc, float initialValue ) {
  FT = ft;
    7e56:	7020      	strb	r0, [r4, #0]

  return output();
}

void FilterOnePole::setFrequency( float newFrequency ) {
  setTau( 1.0/(TWO_PI*newFrequency ) ); // τ=1/ω
    7e58:	490a      	ldr	r1, [pc, #40]	; (7e84 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)+0x34>)
    7e5a:	4610      	mov	r0, r2
FilterOnePole::FilterOnePole( FILTER_TYPE ft, float fc, float initialValue ) {
    7e5c:	461d      	mov	r5, r3
  setTau( 1.0/(TWO_PI*newFrequency ) ); // τ=1/ω
    7e5e:	f003 ff35 	bl	bccc <__aeabi_fmul>
    7e62:	4601      	mov	r1, r0
    7e64:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    7e68:	f003 ffe4 	bl	be34 <__aeabi_fdiv>
}

void FilterOnePole::setTau( float newTau ) {
  TauUS = newTau * 1e6;
    7e6c:	4906      	ldr	r1, [pc, #24]	; (7e88 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)+0x38>)
    7e6e:	f003 ff2d 	bl	bccc <__aeabi_fmul>
  Y = initialValue;
    7e72:	60e5      	str	r5, [r4, #12]
  TauUS = newTau * 1e6;
    7e74:	6060      	str	r0, [r4, #4]
  Ylast = initialValue;
    7e76:	6125      	str	r5, [r4, #16]
  X = initialValue;
    7e78:	6165      	str	r5, [r4, #20]
  LastUS = micros();
    7e7a:	f001 fa45 	bl	9308 <micros>
    7e7e:	61e0      	str	r0, [r4, #28]
}
    7e80:	4620      	mov	r0, r4
    7e82:	bd38      	pop	{r3, r4, r5, pc}
    7e84:	40c90fdb 	.word	0x40c90fdb
    7e88:	49742400 	.word	0x49742400

00007e8c <FilterOnePole::output()>:
}

float FilterOnePole::output() {
    // figure out which button to read
  switch (FT) {
    7e8c:	7803      	ldrb	r3, [r0, #0]
float FilterOnePole::output() {
    7e8e:	b510      	push	{r4, lr}
    7e90:	4604      	mov	r4, r0
  switch (FT) {
    7e92:	2b03      	cmp	r3, #3
    7e94:	d821      	bhi.n	7eda <FilterOnePole::output()+0x4e>
    7e96:	e8df f003 	tbb	[pc, r3]
    7e9a:	1e19      	.short	0x1e19
    7e9c:	0211      	.short	0x0211
      // highpass is the _difference_
      return X-Y;
      break;
    case DIFFERENTIATOR:
      // like a highpass, but normalize
      return (X-Y)/(TauUS/1.0e6);
    7e9e:	68c1      	ldr	r1, [r0, #12]
    7ea0:	6940      	ldr	r0, [r0, #20]
    7ea2:	f003 fe09 	bl	bab8 <__aeabi_fsub>
    7ea6:	490e      	ldr	r1, [pc, #56]	; (7ee0 <FilterOnePole::output()+0x54>)
    7ea8:	4603      	mov	r3, r0
    7eaa:	6860      	ldr	r0, [r4, #4]
    7eac:	461c      	mov	r4, r3
    7eae:	f003 ffc1 	bl	be34 <__aeabi_fdiv>
    7eb2:	4601      	mov	r1, r0
    7eb4:	4620      	mov	r0, r4
    7eb6:	f003 ffbd 	bl	be34 <__aeabi_fdiv>
      break;
    default:
      // should never get to here, return 0 just in case
      return 0;
  }
}
    7eba:	bd10      	pop	{r4, pc}
      return Y * (TauUS/1.0e6);
    7ebc:	4908      	ldr	r1, [pc, #32]	; (7ee0 <FilterOnePole::output()+0x54>)
    7ebe:	6840      	ldr	r0, [r0, #4]
    7ec0:	f003 ffb8 	bl	be34 <__aeabi_fdiv>
    7ec4:	68e1      	ldr	r1, [r4, #12]
    7ec6:	f003 ff01 	bl	bccc <__aeabi_fmul>
}
    7eca:	bd10      	pop	{r4, pc}
      return X-Y;
    7ecc:	68c1      	ldr	r1, [r0, #12]
    7ece:	6940      	ldr	r0, [r0, #20]
    7ed0:	f003 fdf2 	bl	bab8 <__aeabi_fsub>
}
    7ed4:	bd10      	pop	{r4, pc}
      return Y; 
    7ed6:	68c0      	ldr	r0, [r0, #12]
}
    7ed8:	bd10      	pop	{r4, pc}
  switch (FT) {
    7eda:	2000      	movs	r0, #0
}
    7edc:	bd10      	pop	{r4, pc}
    7ede:	bf00      	nop
    7ee0:	49742400 	.word	0x49742400

00007ee4 <FilterOnePole::input(float)>:
float FilterOnePole::input( float inVal ) {
    7ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7ee6:	4604      	mov	r4, r0
    7ee8:	460e      	mov	r6, r1
  long time = micros();
    7eea:	f001 fa0d 	bl	9308 <micros>
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    7eee:	69e3      	ldr	r3, [r4, #28]
  long time = micros();
    7ef0:	4605      	mov	r5, r0
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    7ef2:	1ac0      	subs	r0, r0, r3
    7ef4:	f003 fe96 	bl	bc24 <__aeabi_i2f>
  Ylast = Y;
    7ef8:	68e7      	ldr	r7, [r4, #12]
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    7efa:	61a0      	str	r0, [r4, #24]
    7efc:	4601      	mov	r1, r0
  LastUS = time;                      // update this now
    7efe:	61e5      	str	r5, [r4, #28]
  TauSamps = TauUS / ElapsedUS;
    7f00:	6860      	ldr	r0, [r4, #4]
  X = inVal;                          // this is now the most recent input value
    7f02:	6166      	str	r6, [r4, #20]
  Ylast = Y;
    7f04:	6127      	str	r7, [r4, #16]
  TauSamps = TauUS / ElapsedUS;
    7f06:	f003 ff95 	bl	be34 <__aeabi_fdiv>
    7f0a:	4601      	mov	r1, r0
    7f0c:	60a0      	str	r0, [r4, #8]
  ampFactor = exp( -1.0 / TauSamps );      // this is 1 if called quickly
    7f0e:	480e      	ldr	r0, [pc, #56]	; (7f48 <FilterOnePole::input(float)+0x64>)
    7f10:	f003 ff90 	bl	be34 <__aeabi_fdiv>
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
    7f14:	f003 f9da 	bl	b2cc <expf>
    7f18:	4605      	mov	r5, r0
  Y = (1.0-ampFactor)*X + ampFactor*Ylast;     // set the new value
    7f1a:	4601      	mov	r1, r0
    7f1c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    7f20:	f003 fdca 	bl	bab8 <__aeabi_fsub>
    7f24:	4631      	mov	r1, r6
    7f26:	f003 fed1 	bl	bccc <__aeabi_fmul>
    7f2a:	4629      	mov	r1, r5
    7f2c:	4606      	mov	r6, r0
    7f2e:	4638      	mov	r0, r7
    7f30:	f003 fecc 	bl	bccc <__aeabi_fmul>
    7f34:	4601      	mov	r1, r0
    7f36:	4630      	mov	r0, r6
    7f38:	f003 fdc0 	bl	babc <__addsf3>
    7f3c:	60e0      	str	r0, [r4, #12]
  return output();
    7f3e:	4620      	mov	r0, r4
}
    7f40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return output();
    7f44:	f7ff bfa2 	b.w	7e8c <FilterOnePole::output()>
    7f48:	bf800000 	.word	0xbf800000

00007f4c <Serial_CAN::recv(unsigned long*, unsigned char*)>:


// 0: no data
// 1: get data
unsigned char Serial_CAN::recv(unsigned long *id, uchar *buf)
{
    7f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f4e:	b089      	sub	sp, #36	; 0x24
    7f50:	460e      	mov	r6, r1
    7f52:	4615      	mov	r5, r2
	virtual int available(void)     { return serial3_available(); }
    7f54:	f002 f900 	bl	a158 <serial3_available>
    if(canSerial.available())
    7f58:	b1c0      	cbz	r0, 7f8c <Serial_CAN::recv(unsigned long*, unsigned char*)+0x40>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7f5a:	4f19      	ldr	r7, [pc, #100]	; (7fc0 <Serial_CAN::recv(unsigned long*, unsigned char*)+0x74>)
    7f5c:	683b      	ldr	r3, [r7, #0]
    7f5e:	9300      	str	r3, [sp, #0]
	return ret;
    7f60:	9b00      	ldr	r3, [sp, #0]
    {
        unsigned long timer_s = millis();
        
        int len = 0;
    7f62:	2400      	movs	r4, #0
    7f64:	f002 f8f8 	bl	a158 <serial3_available>
        uchar dta[20];
        
        while(1)
        {
            while(canSerial.available())
    7f68:	b990      	cbnz	r0, 7f90 <Serial_CAN::recv(unsigned long*, unsigned char*)+0x44>
                timer_s = millis();
            	if((millis()-timer_s) > 10)
                    return 0; // Reading 12 bytes should be faster than 10ms, abort if it takes longer, we loose the partial message in this case
            }
            
            if(len == 12) // Just to be sure, must be 12 here
    7f6a:	2c0c      	cmp	r4, #12
    7f6c:	d1fa      	bne.n	7f64 <Serial_CAN::recv(unsigned long*, unsigned char*)+0x18>
    7f6e:	ab03      	add	r3, sp, #12
    7f70:	a904      	add	r1, sp, #16
            {
                unsigned long __id = 0;
    7f72:	2200      	movs	r2, #0
                
                for(int i=0; i<4; i++) // Store the id of the sender
                {
                    __id <<= 8;
                    __id += dta[i];
    7f74:	f813 0b01 	ldrb.w	r0, [r3], #1
                for(int i=0; i<4; i++) // Store the id of the sender
    7f78:	4299      	cmp	r1, r3
                    __id += dta[i];
    7f7a:	eb00 2202 	add.w	r2, r0, r2, lsl #8
                for(int i=0; i<4; i++) // Store the id of the sender
    7f7e:	d1f9      	bne.n	7f74 <Serial_CAN::recv(unsigned long*, unsigned char*)+0x28>
                }
                
                *id = __id;
    7f80:	6032      	str	r2, [r6, #0]
                
                for(int i=0; i<8; i++) // Store the message in the buffer
                {
                    buf[i] = dta[i+4];
    7f82:	4628      	mov	r0, r5
    7f84:	2208      	movs	r2, #8
    7f86:	f000 fdd3 	bl	8b30 <memcpy>
                }
                return 1;
    7f8a:	2001      	movs	r0, #1
            }
        }
    }
    
    return 0;
}
    7f8c:	b009      	add	sp, #36	; 0x24
    7f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	virtual int read(void)          { return serial3_getchar(); }
    7f90:	f002 f8f6 	bl	a180 <serial3_getchar>
                dta[len++] = canSerial.read();
    7f94:	f104 0320 	add.w	r3, r4, #32
    7f98:	446b      	add	r3, sp
		if(len == 12)
    7f9a:	2c0b      	cmp	r4, #11
                dta[len++] = canSerial.read();
    7f9c:	f104 0201 	add.w	r2, r4, #1
    7fa0:	f803 0c14 	strb.w	r0, [r3, #-20]
		if(len == 12)
    7fa4:	d0e3      	beq.n	7f6e <Serial_CAN::recv(unsigned long*, unsigned char*)+0x22>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7fa6:	683b      	ldr	r3, [r7, #0]
    7fa8:	9302      	str	r3, [sp, #8]
	return ret;
    7faa:	9902      	ldr	r1, [sp, #8]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7fac:	683b      	ldr	r3, [r7, #0]
    7fae:	9301      	str	r3, [sp, #4]
	return ret;
    7fb0:	9b01      	ldr	r3, [sp, #4]
            	if((millis()-timer_s) > 10)
    7fb2:	1a5b      	subs	r3, r3, r1
    7fb4:	2b0a      	cmp	r3, #10
    7fb6:	4614      	mov	r4, r2
    7fb8:	d9d4      	bls.n	7f64 <Serial_CAN::recv(unsigned long*, unsigned char*)+0x18>
                    return 0; // Reading 12 bytes should be faster than 10ms, abort if it takes longer, we loose the partial message in this case
    7fba:	2000      	movs	r0, #0
}
    7fbc:	b009      	add	sp, #36	; 0x24
    7fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7fc0:	1fffb4d8 	.word	0x1fffb4d8

00007fc4 <Serial_CAN::clear()>:
    return ret;
}


void Serial_CAN::clear()
{
    7fc4:	b530      	push	{r4, r5, lr}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7fc6:	4c0b      	ldr	r4, [pc, #44]	; (7ff4 <Serial_CAN::clear()+0x30>)
    7fc8:	b085      	sub	sp, #20
    7fca:	6823      	ldr	r3, [r4, #0]
    7fcc:	9301      	str	r3, [sp, #4]
	return ret;
    7fce:	9d01      	ldr	r5, [sp, #4]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7fd0:	6823      	ldr	r3, [r4, #0]
    7fd2:	9302      	str	r3, [sp, #8]
	return ret;
    7fd4:	9b02      	ldr	r3, [sp, #8]
    unsigned long timer_s = millis();
    while(1)
    {
        if(millis()-timer_s > 50)return;
    7fd6:	1b5b      	subs	r3, r3, r5
    7fd8:	2b32      	cmp	r3, #50	; 0x32
    7fda:	d809      	bhi.n	7ff0 <Serial_CAN::clear()+0x2c>
	virtual int available(void)     { return serial3_available(); }
    7fdc:	f002 f8bc 	bl	a158 <serial3_available>
        while(canSerial.available())
    7fe0:	2800      	cmp	r0, #0
    7fe2:	d0f5      	beq.n	7fd0 <Serial_CAN::clear()+0xc>
	virtual int read(void)          { return serial3_getchar(); }
    7fe4:	f002 f8cc 	bl	a180 <serial3_getchar>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7fe8:	6823      	ldr	r3, [r4, #0]
    7fea:	9303      	str	r3, [sp, #12]
	return ret;
    7fec:	9d03      	ldr	r5, [sp, #12]
    7fee:	e7f5      	b.n	7fdc <Serial_CAN::clear()+0x18>
        {
            canSerial.read();
            timer_s = millis();
        }
    }
}
    7ff0:	b005      	add	sp, #20
    7ff2:	bd30      	pop	{r4, r5, pc}
    7ff4:	1fffb4d8 	.word	0x1fffb4d8

00007ff8 <Serial_CAN::cmdOk(char*)>:
{
    7ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7ffa:	4e25      	ldr	r6, [pc, #148]	; (8090 <Serial_CAN::cmdOk(char*)+0x98>)
    7ffc:	b085      	sub	sp, #20
    7ffe:	6833      	ldr	r3, [r6, #0]
    8000:	9301      	str	r3, [sp, #4]
	return ret;
    8002:	9f01      	ldr	r7, [sp, #4]
    8004:	4605      	mov	r5, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    8006:	b139      	cbz	r1, 8018 <Serial_CAN::cmdOk(char*)+0x20>
							  return write((const uint8_t *)str, strlen(str)); }
    8008:	4608      	mov	r0, r1
    800a:	460c      	mov	r4, r1
    800c:	f005 f818 	bl	d040 <strlen>
    8010:	4601      	mov	r1, r0
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial3_write(buffer, size); return size; }
    8012:	4620      	mov	r0, r4
    8014:	f002 f868 	bl	a0e8 <serial3_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    8018:	481e      	ldr	r0, [pc, #120]	; (8094 <Serial_CAN::cmdOk(char*)+0x9c>)
    801a:	f000 facd 	bl	85b8 <Print::println()>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    801e:	6833      	ldr	r3, [r6, #0]
    8020:	9302      	str	r3, [sp, #8]
	return ret;
    8022:	9b02      	ldr	r3, [sp, #8]
        if(millis()-timer_s > 500)
    8024:	1bdb      	subs	r3, r3, r7
    8026:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    unsigned char len = 0;
    802a:	bf98      	it	ls
    802c:	2400      	movls	r4, #0
        if(millis()-timer_s > 500)
    802e:	d908      	bls.n	8042 <Serial_CAN::cmdOk(char*)+0x4a>
    8030:	e01a      	b.n	8068 <Serial_CAN::cmdOk(char*)+0x70>
	virtual int read(void)          { return serial3_getchar(); }
    8032:	f002 f8a5 	bl	a180 <serial3_getchar>
            str_tmp[len++] = canSerial.read();
    8036:	5528      	strb	r0, [r5, r4]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8038:	6833      	ldr	r3, [r6, #0]
    803a:	9303      	str	r3, [sp, #12]
    803c:	3401      	adds	r4, #1
	return ret;
    803e:	9f03      	ldr	r7, [sp, #12]
    8040:	b2e4      	uxtb	r4, r4
	virtual int available(void)     { return serial3_available(); }
    8042:	f002 f889 	bl	a158 <serial3_available>
        while(canSerial.available())
    8046:	2800      	cmp	r0, #0
    8048:	d1f3      	bne.n	8032 <Serial_CAN::cmdOk(char*)+0x3a>
        if(len >= 4 && str_tmp[len-1] == '\n' && str_tmp[len-2] == '\r' && str_tmp[len-3] == 'K' && str_tmp[len-4] == 'O')
    804a:	2c03      	cmp	r4, #3
    804c:	eb05 0304 	add.w	r3, r5, r4
    8050:	d903      	bls.n	805a <Serial_CAN::cmdOk(char*)+0x62>
    8052:	f813 2c01 	ldrb.w	r2, [r3, #-1]
    8056:	2a0a      	cmp	r2, #10
    8058:	d009      	beq.n	806e <Serial_CAN::cmdOk(char*)+0x76>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    805a:	6833      	ldr	r3, [r6, #0]
    805c:	9302      	str	r3, [sp, #8]
	return ret;
    805e:	9b02      	ldr	r3, [sp, #8]
        if(millis()-timer_s > 500)
    8060:	1bdb      	subs	r3, r3, r7
    8062:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    8066:	d9ec      	bls.n	8042 <Serial_CAN::cmdOk(char*)+0x4a>
            return 0;
    8068:	2000      	movs	r0, #0
}
    806a:	b005      	add	sp, #20
    806c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if(len >= 4 && str_tmp[len-1] == '\n' && str_tmp[len-2] == '\r' && str_tmp[len-3] == 'K' && str_tmp[len-4] == 'O')
    806e:	f813 2c02 	ldrb.w	r2, [r3, #-2]
    8072:	2a0d      	cmp	r2, #13
    8074:	d1f1      	bne.n	805a <Serial_CAN::cmdOk(char*)+0x62>
    8076:	f813 2c03 	ldrb.w	r2, [r3, #-3]
    807a:	2a4b      	cmp	r2, #75	; 0x4b
    807c:	d1ed      	bne.n	805a <Serial_CAN::cmdOk(char*)+0x62>
    807e:	f813 3c04 	ldrb.w	r3, [r3, #-4]
    8082:	2b4f      	cmp	r3, #79	; 0x4f
    8084:	d1e9      	bne.n	805a <Serial_CAN::cmdOk(char*)+0x62>
            clear();
    8086:	4628      	mov	r0, r5
    8088:	f7ff ff9c 	bl	7fc4 <Serial_CAN::clear()>
            return 1;        
    808c:	2001      	movs	r0, #1
    808e:	e7ec      	b.n	806a <Serial_CAN::cmdOk(char*)+0x72>
    8090:	1fffb4d8 	.word	0x1fffb4d8
    8094:	1fff87c0 	.word	0x1fff87c0

00008098 <Serial_CAN::baudRate(unsigned char)>:
{
    8098:	b538      	push	{r3, r4, r5, lr}
    809a:	4604      	mov	r4, r0
    809c:	460d      	mov	r5, r1
					{ serial3_write(buffer, size); return size; }
    809e:	4810      	ldr	r0, [pc, #64]	; (80e0 <Serial_CAN::baudRate(unsigned char)+0x48>)
    80a0:	2103      	movs	r1, #3
    80a2:	f002 f821 	bl	a0e8 <serial3_write>

unsigned char Serial_CAN::enterSettingMode()
{
    canSerial.print("+++");
	delay(50);
    80a6:	2032      	movs	r0, #50	; 0x32
    80a8:	f001 f94e 	bl	9348 <delay>
    clear();
    80ac:	4620      	mov	r0, r4
    80ae:	f7ff ff89 	bl	7fc4 <Serial_CAN::clear()>
    sprintf(str_tmp, "AT+S=%d\r\n", rate);
    80b2:	462a      	mov	r2, r5
    80b4:	490b      	ldr	r1, [pc, #44]	; (80e4 <Serial_CAN::baudRate(unsigned char)+0x4c>)
    80b6:	4620      	mov	r0, r4
    80b8:	f004 fda8 	bl	cc0c <sprintf>
    int ret = cmdOk(str_tmp);
    80bc:	4621      	mov	r1, r4
    80be:	4620      	mov	r0, r4
    80c0:	f7ff ff9a 	bl	7ff8 <Serial_CAN::cmdOk(char*)>
    80c4:	4605      	mov	r5, r0
    return 1;
}

unsigned char Serial_CAN::exitSettingMode()
{
    clear();
    80c6:	4620      	mov	r0, r4
    80c8:	f7ff ff7c 	bl	7fc4 <Serial_CAN::clear()>
    int ret = cmdOk("AT+Q\r\n");
    80cc:	4906      	ldr	r1, [pc, #24]	; (80e8 <Serial_CAN::baudRate(unsigned char)+0x50>)
    80ce:	4620      	mov	r0, r4
    80d0:	f7ff ff92 	bl	7ff8 <Serial_CAN::cmdOk(char*)>
    clear();
    80d4:	4620      	mov	r0, r4
    80d6:	f7ff ff75 	bl	7fc4 <Serial_CAN::clear()>
}
    80da:	4628      	mov	r0, r5
    80dc:	bd38      	pop	{r3, r4, r5, pc}
    80de:	bf00      	nop
    80e0:	00013f2c 	.word	0x00013f2c
    80e4:	00013f30 	.word	0x00013f30
    80e8:	00013f3c 	.word	0x00013f3c

000080ec <Serial_CAN::canRate(unsigned char)>:
{
    80ec:	b538      	push	{r3, r4, r5, lr}
    80ee:	4604      	mov	r4, r0
    80f0:	460d      	mov	r5, r1
    80f2:	4811      	ldr	r0, [pc, #68]	; (8138 <Serial_CAN::canRate(unsigned char)+0x4c>)
    80f4:	2103      	movs	r1, #3
    80f6:	f001 fff7 	bl	a0e8 <serial3_write>
	delay(50);
    80fa:	2032      	movs	r0, #50	; 0x32
    80fc:	f001 f924 	bl	9348 <delay>
    clear();
    8100:	4620      	mov	r0, r4
    8102:	f7ff ff5f 	bl	7fc4 <Serial_CAN::clear()>
    if(rate < 10)
    8106:	2d09      	cmp	r5, #9
        sprintf(str_tmp, "AT+C=0%d\r\n", rate);
    8108:	bf94      	ite	ls
    810a:	490c      	ldrls	r1, [pc, #48]	; (813c <Serial_CAN::canRate(unsigned char)+0x50>)
        sprintf(str_tmp, "AT+C=%d\r\n", rate);
    810c:	490c      	ldrhi	r1, [pc, #48]	; (8140 <Serial_CAN::canRate(unsigned char)+0x54>)
    810e:	462a      	mov	r2, r5
    8110:	4620      	mov	r0, r4
    8112:	f004 fd7b 	bl	cc0c <sprintf>
    int ret = cmdOk(str_tmp);
    8116:	4621      	mov	r1, r4
    8118:	4620      	mov	r0, r4
    811a:	f7ff ff6d 	bl	7ff8 <Serial_CAN::cmdOk(char*)>
    811e:	4605      	mov	r5, r0
    clear();
    8120:	4620      	mov	r0, r4
    8122:	f7ff ff4f 	bl	7fc4 <Serial_CAN::clear()>
    int ret = cmdOk("AT+Q\r\n");
    8126:	4907      	ldr	r1, [pc, #28]	; (8144 <Serial_CAN::canRate(unsigned char)+0x58>)
    8128:	4620      	mov	r0, r4
    812a:	f7ff ff65 	bl	7ff8 <Serial_CAN::cmdOk(char*)>
    clear();
    812e:	4620      	mov	r0, r4
    8130:	f7ff ff48 	bl	7fc4 <Serial_CAN::clear()>
}
    8134:	4628      	mov	r0, r5
    8136:	bd38      	pop	{r3, r4, r5, pc}
    8138:	00013f2c 	.word	0x00013f2c
    813c:	00013f44 	.word	0x00013f44
    8140:	00013f50 	.word	0x00013f50
    8144:	00013f3c 	.word	0x00013f3c

00008148 <Serial_CAN::exitSettingMode()>:
{
    8148:	b538      	push	{r3, r4, r5, lr}
    814a:	4604      	mov	r4, r0
    clear();
    814c:	f7ff ff3a 	bl	7fc4 <Serial_CAN::clear()>
    int ret = cmdOk("AT+Q\r\n");
    8150:	4904      	ldr	r1, [pc, #16]	; (8164 <Serial_CAN::exitSettingMode()+0x1c>)
    8152:	4620      	mov	r0, r4
    8154:	f7ff ff50 	bl	7ff8 <Serial_CAN::cmdOk(char*)>
    8158:	4605      	mov	r5, r0
    clear();
    815a:	4620      	mov	r0, r4
    815c:	f7ff ff32 	bl	7fc4 <Serial_CAN::clear()>
    return ret;
}
    8160:	4628      	mov	r0, r5
    8162:	bd38      	pop	{r3, r4, r5, pc}
    8164:	00013f3c 	.word	0x00013f3c

00008168 <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    8168:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    816c:	b672      	cpsid	i
extern const uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;

void EventResponder::triggerEventNotImmediate()
{
	bool irq = disableInterrupts();
	if (_triggered == false) {
    816e:	7f43      	ldrb	r3, [r0, #29]
    8170:	b95b      	cbnz	r3, 818a <EventResponder::triggerEventNotImmediate()+0x22>
		// not already triggered
		if (_type == EventTypeYield) {
    8172:	7f01      	ldrb	r1, [r0, #28]
    8174:	2901      	cmp	r1, #1
{
    8176:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    8178:	d00b      	beq.n	8192 <EventResponder::triggerEventNotImmediate()+0x2a>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    817a:	2903      	cmp	r1, #3
    817c:	d013      	beq.n	81a6 <EventResponder::triggerEventNotImmediate()+0x3e>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    817e:	2301      	movs	r3, #1
    8180:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    8182:	b902      	cbnz	r2, 8186 <EventResponder::triggerEventNotImmediate()+0x1e>
    8184:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    8186:	bc30      	pop	{r4, r5}
    8188:	4770      	bx	lr
    818a:	b90a      	cbnz	r2, 8190 <EventResponder::triggerEventNotImmediate()+0x28>
    818c:	b662      	cpsie	i
    818e:	4770      	bx	lr
    8190:	4770      	bx	lr
			if (firstYield == nullptr) {
    8192:	4c12      	ldr	r4, [pc, #72]	; (81dc <EventResponder::triggerEventNotImmediate()+0x74>)
    8194:	6821      	ldr	r1, [r4, #0]
    8196:	b1b1      	cbz	r1, 81c6 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    8198:	4911      	ldr	r1, [pc, #68]	; (81e0 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    819a:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    819c:	680b      	ldr	r3, [r1, #0]
    819e:	6183      	str	r3, [r0, #24]
				lastYield = this;
    81a0:	6008      	str	r0, [r1, #0]
				_prev->_next = this;
    81a2:	6158      	str	r0, [r3, #20]
				lastYield = this;
    81a4:	e7eb      	b.n	817e <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    81a6:	4d0f      	ldr	r5, [pc, #60]	; (81e4 <EventResponder::triggerEventNotImmediate()+0x7c>)
    81a8:	490f      	ldr	r1, [pc, #60]	; (81e8 <EventResponder::triggerEventNotImmediate()+0x80>)
    81aa:	682c      	ldr	r4, [r5, #0]
    81ac:	b18c      	cbz	r4, 81d2 <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    81ae:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    81b0:	680b      	ldr	r3, [r1, #0]
    81b2:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    81b4:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    81b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    81ba:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    81be:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    81c0:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    81c4:	e7db      	b.n	817e <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    81c6:	4b06      	ldr	r3, [pc, #24]	; (81e0 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    81c8:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    81ca:	6181      	str	r1, [r0, #24]
				firstYield = this;
    81cc:	6020      	str	r0, [r4, #0]
				lastYield = this;
    81ce:	6018      	str	r0, [r3, #0]
    81d0:	e7d5      	b.n	817e <EventResponder::triggerEventNotImmediate()+0x16>
				_next = nullptr;
    81d2:	6144      	str	r4, [r0, #20]
				_prev = nullptr;
    81d4:	6184      	str	r4, [r0, #24]
				firstInterrupt = this;
    81d6:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    81d8:	e7ed      	b.n	81b6 <EventResponder::triggerEventNotImmediate()+0x4e>
    81da:	bf00      	nop
    81dc:	1fffb4c0 	.word	0x1fffb4c0
    81e0:	1fffb4d0 	.word	0x1fffb4d0
    81e4:	1fffb4c8 	.word	0x1fffb4c8
    81e8:	1fffb4c4 	.word	0x1fffb4c4

000081ec <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    81ec:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    81ee:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    81f2:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    81f4:	4c0c      	ldr	r4, [pc, #48]	; (8228 <EventResponder::runFromInterrupt()+0x3c>)
    81f6:	6820      	ldr	r0, [r4, #0]
		if (first) {
    81f8:	b180      	cbz	r0, 821c <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    81fa:	4e0c      	ldr	r6, [pc, #48]	; (822c <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    81fc:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    81fe:	6943      	ldr	r3, [r0, #20]
    8200:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    8202:	b173      	cbz	r3, 8222 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    8204:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    8206:	b902      	cbnz	r2, 820a <EventResponder::runFromInterrupt()+0x1e>
    8208:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    820a:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    820c:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    820e:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    8210:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    8214:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    8216:	6820      	ldr	r0, [r4, #0]
		if (first) {
    8218:	2800      	cmp	r0, #0
    821a:	d1f0      	bne.n	81fe <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    821c:	b902      	cbnz	r2, 8220 <EventResponder::runFromInterrupt()+0x34>
    821e:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    8220:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    8222:	6033      	str	r3, [r6, #0]
    8224:	e7ef      	b.n	8206 <EventResponder::runFromInterrupt()+0x1a>
    8226:	bf00      	nop
    8228:	1fffb4c8 	.word	0x1fffb4c8
    822c:	1fffb4c4 	.word	0x1fffb4c4

00008230 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    8230:	f7ff bfdc 	b.w	81ec <EventResponder::runFromInterrupt()>

00008234 <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    8234:	4a02      	ldr	r2, [pc, #8]	; (8240 <systick_isr+0xc>)
    8236:	6813      	ldr	r3, [r2, #0]
    8238:	3301      	adds	r3, #1
    823a:	6013      	str	r3, [r2, #0]
}
    823c:	4770      	bx	lr
    823e:	bf00      	nop
    8240:	1fffb4d8 	.word	0x1fffb4d8

00008244 <HardwareSerial2::begin(unsigned long)>:
HardwareSerial2 Serial2(&serialEvent2);

uint8_t _serialEvent2_default __attribute__((weak)) PROGMEM = 0 ;

void HardwareSerial2::begin(uint32_t baud) {
	serial2_begin(BAUD2DIV2(baud));
    8244:	084b      	lsrs	r3, r1, #1
    8246:	f103 6337 	add.w	r3, r3, #191889408	; 0xb700000
    824a:	f503 33d8 	add.w	r3, r3, #110592	; 0x1b000
void HardwareSerial2::begin(uint32_t baud) {
    824e:	b510      	push	{r4, lr}
    8250:	4604      	mov	r4, r0
	serial2_begin(BAUD2DIV2(baud));
    8252:	fbb3 f0f1 	udiv	r0, r3, r1
    8256:	f001 f8c3 	bl	93e0 <serial2_begin>
	if (!_serialEvent2_default) addToSerialEventsList();
    825a:	4b04      	ldr	r3, [pc, #16]	; (826c <HardwareSerial2::begin(unsigned long)+0x28>)
    825c:	781b      	ldrb	r3, [r3, #0]
    825e:	b103      	cbz	r3, 8262 <HardwareSerial2::begin(unsigned long)+0x1e>
}
    8260:	bd10      	pop	{r4, pc}
	if (!_serialEvent2_default) addToSerialEventsList();
    8262:	4620      	mov	r0, r4
}
    8264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!_serialEvent2_default) addToSerialEventsList();
    8268:	f002 bfce 	b.w	b208 <HardwareSerial::addToSerialEventsList()>
    826c:	1fff8809 	.word	0x1fff8809

00008270 <HardwareSerial2::write9bit(unsigned long)>:
	virtual size_t write9bit(uint32_t c)	{ serial2_putchar(c); return 1; }
    8270:	b508      	push	{r3, lr}
    8272:	4608      	mov	r0, r1
    8274:	f001 faa2 	bl	97bc <serial2_putchar>
    8278:	2001      	movs	r0, #1
    827a:	bd08      	pop	{r3, pc}

0000827c <HardwareSerial2::write(unsigned char)>:
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    827c:	b508      	push	{r3, lr}
    827e:	4608      	mov	r0, r1
    8280:	f001 fa9c 	bl	97bc <serial2_putchar>
    8284:	2001      	movs	r0, #1
    8286:	bd08      	pop	{r3, pc}

00008288 <HardwareSerial2::write(char const*)>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    8288:	b538      	push	{r3, r4, r5, lr}
    828a:	4608      	mov	r0, r1
    828c:	460d      	mov	r5, r1
    828e:	f004 fed7 	bl	d040 <strlen>
    8292:	4604      	mov	r4, r0
					  serial2_write((const uint8_t *)str, len);
    8294:	4601      	mov	r1, r0
    8296:	4628      	mov	r0, r5
    8298:	f001 fb0c 	bl	98b4 <serial2_write>
					  return len; }
    829c:	4620      	mov	r0, r4
    829e:	bd38      	pop	{r3, r4, r5, pc}

000082a0 <HardwareSerial2::write(unsigned char const*, unsigned int)>:
	virtual size_t write(const uint8_t *buffer, size_t size)
    82a0:	b510      	push	{r4, lr}
    82a2:	4608      	mov	r0, r1
    82a4:	4614      	mov	r4, r2
					{ serial2_write(buffer, size); return size; }
    82a6:	4611      	mov	r1, r2
    82a8:	f001 fb04 	bl	98b4 <serial2_write>
    82ac:	4620      	mov	r0, r4
    82ae:	bd10      	pop	{r4, pc}

000082b0 <HardwareSerial2::addMemoryForWrite(void*, unsigned int)>:
	virtual void addMemoryForWrite(void *buffer, size_t length){serial2_add_memory_for_write(buffer, length);}
    82b0:	4608      	mov	r0, r1
    82b2:	4611      	mov	r1, r2
    82b4:	f001 bd2c 	b.w	9d10 <serial2_add_memory_for_write>

000082b8 <HardwareSerial2::addMemoryForRead(void*, unsigned int)>:
 	virtual void addMemoryForRead(void *buffer, size_t length) {serial2_add_memory_for_read(buffer, length);}
    82b8:	4608      	mov	r0, r1
    82ba:	4611      	mov	r1, r2
    82bc:	f001 bd0c 	b.w	9cd8 <serial2_add_memory_for_read>

000082c0 <HardwareSerial2::clear()>:
	virtual void clear(void)	{ serial2_clear(); }
    82c0:	f001 bc24 	b.w	9b0c <serial2_clear>

000082c4 <HardwareSerial2::attachCts(unsigned char)>:
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
    82c4:	b508      	push	{r3, lr}
    82c6:	4608      	mov	r0, r1
    82c8:	f001 fa58 	bl	977c <serial2_set_cts>
    82cc:	3800      	subs	r0, #0
    82ce:	bf18      	it	ne
    82d0:	2001      	movne	r0, #1
    82d2:	bd08      	pop	{r3, pc}

000082d4 <HardwareSerial2::attachRts(unsigned char)>:
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
    82d4:	b508      	push	{r3, lr}
    82d6:	4608      	mov	r0, r1
    82d8:	f001 fa2e 	bl	9738 <serial2_set_rts>
    82dc:	3800      	subs	r0, #0
    82de:	bf18      	it	ne
    82e0:	2001      	movne	r0, #1
    82e2:	bd08      	pop	{r3, pc}

000082e4 <HardwareSerial2::setTX(unsigned char, bool)>:
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
    82e4:	4608      	mov	r0, r1
    82e6:	4611      	mov	r1, r2
    82e8:	f001 b9ba 	b.w	9660 <serial2_set_tx>

000082ec <HardwareSerial2::setRX(unsigned char)>:
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
    82ec:	4608      	mov	r0, r1
    82ee:	f001 b9f5 	b.w	96dc <serial2_set_rx>
    82f2:	bf00      	nop

000082f4 <HardwareSerial2::transmitterEnable(unsigned char)>:
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
    82f4:	4608      	mov	r0, r1
    82f6:	f001 b997 	b.w	9628 <serial2_set_transmit_pin>
    82fa:	bf00      	nop

000082fc <HardwareSerial2::end()>:
	virtual void end(void)		{ serial2_end(); }
    82fc:	f001 b92c 	b.w	9558 <serial2_end>

00008300 <HardwareSerial2::begin(unsigned long, unsigned long)>:
	virtual void begin(uint32_t baud, uint32_t format) {
    8300:	b510      	push	{r4, lr}
					  serial2_begin(BAUD2DIV2(baud));
    8302:	084b      	lsrs	r3, r1, #1
    8304:	f103 6337 	add.w	r3, r3, #191889408	; 0xb700000
	virtual void begin(uint32_t baud, uint32_t format) {
    8308:	4614      	mov	r4, r2
					  serial2_begin(BAUD2DIV2(baud));
    830a:	f503 33d8 	add.w	r3, r3, #110592	; 0x1b000
    830e:	fbb3 f0f1 	udiv	r0, r3, r1
    8312:	f001 f865 	bl	93e0 <serial2_begin>
					  serial2_format(format); }
    8316:	4620      	mov	r0, r4
    8318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    831c:	f001 b8ce 	b.w	94bc <serial2_format>

00008320 <HardwareSerial2::peek()>:
	virtual int peek(void)          { return serial2_peek(); }
    8320:	f001 bbce 	b.w	9ac0 <serial2_peek>

00008324 <HardwareSerial2::read()>:
	virtual int read(void)          { return serial2_getchar(); }
    8324:	f001 bb86 	b.w	9a34 <serial2_getchar>

00008328 <HardwareSerial2::available()>:
	virtual int available(void)     { return serial2_available(); }
    8328:	f001 bb70 	b.w	9a0c <serial2_available>

0000832c <HardwareSerial2::flush()>:
	virtual void flush(void)        { serial2_flush(); }
    832c:	f001 bb4a 	b.w	99c4 <serial2_flush>

00008330 <HardwareSerial2::availableForWrite()>:
	virtual int availableForWrite(void) { return serial2_write_buffer_free(); }
    8330:	f001 bb54 	b.w	99dc <serial2_write_buffer_free>

00008334 <HardwareSerial2::write(int)>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    8334:	6803      	ldr	r3, [r0, #0]
    8336:	4a06      	ldr	r2, [pc, #24]	; (8350 <HardwareSerial2::write(int)+0x1c>)
    8338:	681b      	ldr	r3, [r3, #0]
    833a:	4293      	cmp	r3, r2
    833c:	d105      	bne.n	834a <HardwareSerial2::write(int)+0x16>
    833e:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    8340:	b2c8      	uxtb	r0, r1
    8342:	f001 fa3b 	bl	97bc <serial2_putchar>
	virtual size_t write(int n)             { return write((uint8_t)n); }
    8346:	2001      	movs	r0, #1
    8348:	bd10      	pop	{r4, pc}
    834a:	b2c9      	uxtb	r1, r1
    834c:	4718      	bx	r3
    834e:	bf00      	nop
    8350:	0000827d 	.word	0x0000827d

00008354 <HardwareSerial2::write(unsigned long)>:
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    8354:	6803      	ldr	r3, [r0, #0]
    8356:	4a06      	ldr	r2, [pc, #24]	; (8370 <HardwareSerial2::write(unsigned long)+0x1c>)
    8358:	681b      	ldr	r3, [r3, #0]
    835a:	4293      	cmp	r3, r2
    835c:	d105      	bne.n	836a <HardwareSerial2::write(unsigned long)+0x16>
    835e:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    8360:	b2c8      	uxtb	r0, r1
    8362:	f001 fa2b 	bl	97bc <serial2_putchar>
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    8366:	2001      	movs	r0, #1
    8368:	bd10      	pop	{r4, pc}
    836a:	b2c9      	uxtb	r1, r1
    836c:	4718      	bx	r3
    836e:	bf00      	nop
    8370:	0000827d 	.word	0x0000827d

00008374 <HardwareSerial2::write(long)>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    8374:	6803      	ldr	r3, [r0, #0]
    8376:	4a06      	ldr	r2, [pc, #24]	; (8390 <HardwareSerial2::write(long)+0x1c>)
    8378:	681b      	ldr	r3, [r3, #0]
    837a:	4293      	cmp	r3, r2
    837c:	d105      	bne.n	838a <HardwareSerial2::write(long)+0x16>
    837e:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    8380:	b2c8      	uxtb	r0, r1
    8382:	f001 fa1b 	bl	97bc <serial2_putchar>
	virtual size_t write(long n)            { return write((uint8_t)n); }
    8386:	2001      	movs	r0, #1
    8388:	bd10      	pop	{r4, pc}
    838a:	b2c9      	uxtb	r1, r1
    838c:	4718      	bx	r3
    838e:	bf00      	nop
    8390:	0000827d 	.word	0x0000827d

00008394 <HardwareSerial2::write(unsigned int)>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    8394:	6803      	ldr	r3, [r0, #0]
    8396:	4a06      	ldr	r2, [pc, #24]	; (83b0 <HardwareSerial2::write(unsigned int)+0x1c>)
    8398:	681b      	ldr	r3, [r3, #0]
    839a:	4293      	cmp	r3, r2
    839c:	d105      	bne.n	83aa <HardwareSerial2::write(unsigned int)+0x16>
    839e:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    83a0:	b2c8      	uxtb	r0, r1
    83a2:	f001 fa0b 	bl	97bc <serial2_putchar>
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    83a6:	2001      	movs	r0, #1
    83a8:	bd10      	pop	{r4, pc}
    83aa:	b2c9      	uxtb	r1, r1
    83ac:	4718      	bx	r3
    83ae:	bf00      	nop
    83b0:	0000827d 	.word	0x0000827d

000083b4 <HardwareSerial3::begin(unsigned long)>:
HardwareSerial3 Serial3(&serialEvent3);

uint8_t _serialEvent3_default __attribute__((weak)) PROGMEM = 0 ;

void HardwareSerial3::begin(uint32_t baud) { 
	serial3_begin(BAUD2DIV3(baud));
    83b4:	084b      	lsrs	r3, r1, #1
    83b6:	f103 63b7 	add.w	r3, r3, #95944704	; 0x5b80000
    83ba:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
void HardwareSerial3::begin(uint32_t baud) { 
    83be:	b510      	push	{r4, lr}
    83c0:	4604      	mov	r4, r0
	serial3_begin(BAUD2DIV3(baud));
    83c2:	fbb3 f0f1 	udiv	r0, r3, r1
    83c6:	f001 fd29 	bl	9e1c <serial3_begin>
	if (!_serialEvent3_default) addToSerialEventsList();
    83ca:	4b04      	ldr	r3, [pc, #16]	; (83dc <HardwareSerial3::begin(unsigned long)+0x28>)
    83cc:	781b      	ldrb	r3, [r3, #0]
    83ce:	b103      	cbz	r3, 83d2 <HardwareSerial3::begin(unsigned long)+0x1e>
}
    83d0:	bd10      	pop	{r4, pc}
	if (!_serialEvent3_default) addToSerialEventsList();
    83d2:	4620      	mov	r0, r4
}
    83d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!_serialEvent3_default) addToSerialEventsList();
    83d8:	f002 bf16 	b.w	b208 <HardwareSerial::addToSerialEventsList()>
    83dc:	1fff880a 	.word	0x1fff880a

000083e0 <HardwareSerial3::write9bit(unsigned long)>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial3_write((const uint8_t *)str, len);
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial3_putchar(c); return 1; }
    83e0:	b508      	push	{r3, lr}
    83e2:	4608      	mov	r0, r1
    83e4:	f001 fe76 	bl	a0d4 <serial3_putchar>
    83e8:	2001      	movs	r0, #1
    83ea:	bd08      	pop	{r3, pc}

000083ec <HardwareSerial3::write(unsigned char)>:
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    83ec:	b508      	push	{r3, lr}
    83ee:	4608      	mov	r0, r1
    83f0:	f001 fe70 	bl	a0d4 <serial3_putchar>
    83f4:	2001      	movs	r0, #1
    83f6:	bd08      	pop	{r3, pc}

000083f8 <HardwareSerial3::write(char const*)>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    83f8:	b538      	push	{r3, r4, r5, lr}
    83fa:	4608      	mov	r0, r1
    83fc:	460d      	mov	r5, r1
    83fe:	f004 fe1f 	bl	d040 <strlen>
    8402:	4604      	mov	r4, r0
					  serial3_write((const uint8_t *)str, len);
    8404:	4601      	mov	r1, r0
    8406:	4628      	mov	r0, r5
    8408:	f001 fe6e 	bl	a0e8 <serial3_write>
					  return len; }
    840c:	4620      	mov	r0, r4
    840e:	bd38      	pop	{r3, r4, r5, pc}

00008410 <HardwareSerial3::write(unsigned char const*, unsigned int)>:
	virtual size_t write(const uint8_t *buffer, size_t size)
    8410:	b510      	push	{r4, lr}
    8412:	4608      	mov	r0, r1
    8414:	4614      	mov	r4, r2
					{ serial3_write(buffer, size); return size; }
    8416:	4611      	mov	r1, r2
    8418:	f001 fe66 	bl	a0e8 <serial3_write>
    841c:	4620      	mov	r0, r4
    841e:	bd10      	pop	{r4, pc}

00008420 <HardwareSerial3::addMemoryForWrite(void*, unsigned int)>:
	virtual void addMemoryForWrite(void *buffer, size_t length){serial3_add_memory_for_write(buffer, length);}
    8420:	4608      	mov	r0, r1
    8422:	4611      	mov	r1, r2
    8424:	f001 bfda 	b.w	a3dc <serial3_add_memory_for_write>

00008428 <HardwareSerial3::addMemoryForRead(void*, unsigned int)>:
 	virtual void addMemoryForRead(void *buffer, size_t length) {serial3_add_memory_for_read(buffer, length);}
    8428:	4608      	mov	r0, r1
    842a:	4611      	mov	r1, r2
    842c:	f001 bfba 	b.w	a3a4 <serial3_add_memory_for_read>

00008430 <HardwareSerial3::clear()>:
	virtual void clear(void)	{ serial3_clear(); }
    8430:	f001 bf12 	b.w	a258 <serial3_clear>

00008434 <HardwareSerial3::attachCts(unsigned char)>:
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
    8434:	b508      	push	{r3, lr}
    8436:	4608      	mov	r0, r1
    8438:	f001 fe2c 	bl	a094 <serial3_set_cts>
    843c:	3800      	subs	r0, #0
    843e:	bf18      	it	ne
    8440:	2001      	movne	r0, #1
    8442:	bd08      	pop	{r3, pc}

00008444 <HardwareSerial3::attachRts(unsigned char)>:
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
    8444:	b508      	push	{r3, lr}
    8446:	4608      	mov	r0, r1
    8448:	f001 fe02 	bl	a050 <serial3_set_rts>
    844c:	3800      	subs	r0, #0
    844e:	bf18      	it	ne
    8450:	2001      	movne	r0, #1
    8452:	bd08      	pop	{r3, pc}

00008454 <HardwareSerial3::setTX(unsigned char, bool)>:
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
    8454:	4608      	mov	r0, r1
    8456:	4611      	mov	r1, r2
    8458:	f001 bdcc 	b.w	9ff4 <serial3_set_tx>

0000845c <HardwareSerial3::setRX(unsigned char)>:
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
    845c:	4608      	mov	r0, r1
    845e:	f001 bdf5 	b.w	a04c <serial3_set_rx>
    8462:	bf00      	nop

00008464 <HardwareSerial3::transmitterEnable(unsigned char)>:
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
    8464:	4608      	mov	r0, r1
    8466:	f001 bda9 	b.w	9fbc <serial3_set_transmit_pin>
    846a:	bf00      	nop

0000846c <HardwareSerial3::end()>:
	virtual void end(void)          { serial3_end(); }
    846c:	f001 bd70 	b.w	9f50 <serial3_end>

00008470 <HardwareSerial3::begin(unsigned long, unsigned long)>:
	virtual void begin(uint32_t baud, uint32_t format) {
    8470:	b510      	push	{r4, lr}
					  serial3_begin(BAUD2DIV3(baud));
    8472:	084b      	lsrs	r3, r1, #1
    8474:	f103 63b7 	add.w	r3, r3, #95944704	; 0x5b80000
	virtual void begin(uint32_t baud, uint32_t format) {
    8478:	4614      	mov	r4, r2
					  serial3_begin(BAUD2DIV3(baud));
    847a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    847e:	fbb3 f0f1 	udiv	r0, r3, r1
    8482:	f001 fccb 	bl	9e1c <serial3_begin>
					  serial3_format(format); }
    8486:	4620      	mov	r0, r4
    8488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    848c:	f001 bd12 	b.w	9eb4 <serial3_format>

00008490 <HardwareSerial3::peek()>:
	virtual int peek(void)          { return serial3_peek(); }
    8490:	f001 bebc 	b.w	a20c <serial3_peek>

00008494 <HardwareSerial3::read()>:
	virtual int read(void)          { return serial3_getchar(); }
    8494:	f001 be74 	b.w	a180 <serial3_getchar>

00008498 <HardwareSerial3::available()>:
	virtual int available(void)     { return serial3_available(); }
    8498:	f001 be5e 	b.w	a158 <serial3_available>

0000849c <HardwareSerial3::flush()>:
	virtual void flush(void)        { serial3_flush(); }
    849c:	f001 be38 	b.w	a110 <serial3_flush>

000084a0 <HardwareSerial3::availableForWrite()>:
	virtual int availableForWrite(void) { return serial3_write_buffer_free(); }
    84a0:	f001 be42 	b.w	a128 <serial3_write_buffer_free>

000084a4 <HardwareSerial3::write(int)>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    84a4:	6803      	ldr	r3, [r0, #0]
    84a6:	4a06      	ldr	r2, [pc, #24]	; (84c0 <HardwareSerial3::write(int)+0x1c>)
    84a8:	681b      	ldr	r3, [r3, #0]
    84aa:	4293      	cmp	r3, r2
    84ac:	d105      	bne.n	84ba <HardwareSerial3::write(int)+0x16>
    84ae:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    84b0:	b2c8      	uxtb	r0, r1
    84b2:	f001 fe0f 	bl	a0d4 <serial3_putchar>
	virtual size_t write(int n)             { return write((uint8_t)n); }
    84b6:	2001      	movs	r0, #1
    84b8:	bd10      	pop	{r4, pc}
    84ba:	b2c9      	uxtb	r1, r1
    84bc:	4718      	bx	r3
    84be:	bf00      	nop
    84c0:	000083ed 	.word	0x000083ed

000084c4 <HardwareSerial3::write(unsigned long)>:
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    84c4:	6803      	ldr	r3, [r0, #0]
    84c6:	4a06      	ldr	r2, [pc, #24]	; (84e0 <HardwareSerial3::write(unsigned long)+0x1c>)
    84c8:	681b      	ldr	r3, [r3, #0]
    84ca:	4293      	cmp	r3, r2
    84cc:	d105      	bne.n	84da <HardwareSerial3::write(unsigned long)+0x16>
    84ce:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    84d0:	b2c8      	uxtb	r0, r1
    84d2:	f001 fdff 	bl	a0d4 <serial3_putchar>
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    84d6:	2001      	movs	r0, #1
    84d8:	bd10      	pop	{r4, pc}
    84da:	b2c9      	uxtb	r1, r1
    84dc:	4718      	bx	r3
    84de:	bf00      	nop
    84e0:	000083ed 	.word	0x000083ed

000084e4 <HardwareSerial3::write(long)>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    84e4:	6803      	ldr	r3, [r0, #0]
    84e6:	4a06      	ldr	r2, [pc, #24]	; (8500 <HardwareSerial3::write(long)+0x1c>)
    84e8:	681b      	ldr	r3, [r3, #0]
    84ea:	4293      	cmp	r3, r2
    84ec:	d105      	bne.n	84fa <HardwareSerial3::write(long)+0x16>
    84ee:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    84f0:	b2c8      	uxtb	r0, r1
    84f2:	f001 fdef 	bl	a0d4 <serial3_putchar>
	virtual size_t write(long n)            { return write((uint8_t)n); }
    84f6:	2001      	movs	r0, #1
    84f8:	bd10      	pop	{r4, pc}
    84fa:	b2c9      	uxtb	r1, r1
    84fc:	4718      	bx	r3
    84fe:	bf00      	nop
    8500:	000083ed 	.word	0x000083ed

00008504 <HardwareSerial3::write(unsigned int)>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    8504:	6803      	ldr	r3, [r0, #0]
    8506:	4a06      	ldr	r2, [pc, #24]	; (8520 <HardwareSerial3::write(unsigned int)+0x1c>)
    8508:	681b      	ldr	r3, [r3, #0]
    850a:	4293      	cmp	r3, r2
    850c:	d105      	bne.n	851a <HardwareSerial3::write(unsigned int)+0x16>
    850e:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    8510:	b2c8      	uxtb	r0, r1
    8512:	f001 fddf 	bl	a0d4 <serial3_putchar>
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    8516:	2001      	movs	r0, #1
    8518:	bd10      	pop	{r4, pc}
    851a:	b2c9      	uxtb	r1, r1
    851c:	4718      	bx	r3
    851e:	bf00      	nop
    8520:	000083ed 	.word	0x000083ed

00008524 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
        return write(p, sizeof(buf) - (p - buf));
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    8524:	b570      	push	{r4, r5, r6, lr}
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    8526:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    8528:	b08a      	sub	sp, #40	; 0x28
		base = 10;
    852a:	bf08      	it	eq
    852c:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    852e:	b3a1      	cbz	r1, 859a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x76>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    8530:	f04f 0e21 	mov.w	lr, #33	; 0x21
    8534:	e002      	b.n	853c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    8536:	fa5f fe86 	uxtb.w	lr, r6
			n /= base;
    853a:	4629      	mov	r1, r5
			digit = n % base;
    853c:	fbb1 f5f2 	udiv	r5, r1, r2
    8540:	fb02 1415 	mls	r4, r2, r5, r1
    8544:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    8548:	2c09      	cmp	r4, #9
    854a:	f10c 0430 	add.w	r4, ip, #48	; 0x30
    854e:	bf98      	it	ls
    8550:	fa5f fc84 	uxtbls.w	ip, r4
    8554:	f10e 0428 	add.w	r4, lr, #40	; 0x28
    8558:	bf88      	it	hi
    855a:	f10c 0c37 	addhi.w	ip, ip, #55	; 0x37
    855e:	446c      	add	r4, sp
    8560:	bf88      	it	hi
    8562:	fa5f fc8c 	uxtbhi.w	ip, ip
			if (n == 0) break;
    8566:	4291      	cmp	r1, r2
			i--;
    8568:	f10e 36ff 	add.w	r6, lr, #4294967295
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    856c:	f804 cc24 	strb.w	ip, [r4, #-36]
			if (n == 0) break;
    8570:	d2e1      	bcs.n	8536 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
    8572:	b14b      	cbz	r3, 8588 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x64>
		i--;
    8574:	f10e 3eff 	add.w	lr, lr, #4294967295
    8578:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    857c:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    8580:	446b      	add	r3, sp
    8582:	222d      	movs	r2, #45	; 0x2d
    8584:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    8588:	6803      	ldr	r3, [r0, #0]
    858a:	a901      	add	r1, sp, #4
    858c:	685b      	ldr	r3, [r3, #4]
    858e:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    8592:	4471      	add	r1, lr
    8594:	4798      	blx	r3
}
    8596:	b00a      	add	sp, #40	; 0x28
    8598:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    859a:	2230      	movs	r2, #48	; 0x30
    859c:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    85a0:	f04f 0e21 	mov.w	lr, #33	; 0x21
    85a4:	e7e5      	b.n	8572 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4e>
    85a6:	bf00      	nop

000085a8 <Print::print(long)>:
	if (n < 0) {
    85a8:	2900      	cmp	r1, #0
		n = -n;
    85aa:	bfba      	itte	lt
    85ac:	4249      	neglt	r1, r1
		sign = '-';
    85ae:	232d      	movlt	r3, #45	; 0x2d
	uint8_t sign=0;
    85b0:	2300      	movge	r3, #0
	if (base == 0) {
    85b2:	220a      	movs	r2, #10
    85b4:	f7ff bfb6 	b.w	8524 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

000085b8 <Print::println()>:
{
    85b8:	b500      	push	{lr}
	return write(buf, 2);
    85ba:	6803      	ldr	r3, [r0, #0]
{
    85bc:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    85be:	f640 220d 	movw	r2, #2573	; 0xa0d
    85c2:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    85c6:	685b      	ldr	r3, [r3, #4]
    85c8:	2202      	movs	r2, #2
    85ca:	a901      	add	r1, sp, #4
    85cc:	4798      	blx	r3
}
    85ce:	b003      	add	sp, #12
    85d0:	f85d fb04 	ldr.w	pc, [sp], #4

000085d4 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    85d4:	4b03      	ldr	r3, [pc, #12]	; (85e4 <_write+0x10>)
    85d6:	2802      	cmp	r0, #2
    85d8:	bf88      	it	hi
    85da:	4603      	movhi	r3, r0
    85dc:	4618      	mov	r0, r3
    85de:	681b      	ldr	r3, [r3, #0]
    85e0:	685b      	ldr	r3, [r3, #4]
    85e2:	4718      	bx	r3
    85e4:	1fff880c 	.word	0x1fff880c

000085e8 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    85e8:	b932      	cbnz	r2, 85f8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x10>
		return write((uint8_t)n);
    85ea:	6803      	ldr	r3, [r0, #0]
{
    85ec:	b500      	push	{lr}
		return write((uint8_t)n);
    85ee:	681b      	ldr	r3, [r3, #0]
}
    85f0:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    85f4:	b2c9      	uxtb	r1, r1
    85f6:	4718      	bx	r3
    85f8:	f7ff bf94 	b.w	8524 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    85fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00008600 <Print::printFloat(double, unsigned char)>:
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    8600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    8604:	4619      	mov	r1, r3
{
    8606:	b087      	sub	sp, #28
    8608:	4606      	mov	r6, r0
	if (isnan(number)) return print("nan");
    860a:	4610      	mov	r0, r2
{
    860c:	4614      	mov	r4, r2
    860e:	469a      	mov	sl, r3
	if (isnan(number)) return print("nan");
    8610:	f003 fa18 	bl	ba44 <__aeabi_dcmpun>
{
    8614:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
	if (isnan(number)) return print("nan");
    8618:	2800      	cmp	r0, #0
    861a:	f040 80a9 	bne.w	8770 <Print::printFloat(double, unsigned char)+0x170>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    861e:	f02a 4500 	bic.w	r5, sl, #2147483648	; 0x80000000
    	if (isinf(number)) return print("inf");
    8622:	4b5f      	ldr	r3, [pc, #380]	; (87a0 <Print::printFloat(double, unsigned char)+0x1a0>)
    8624:	4620      	mov	r0, r4
    8626:	4629      	mov	r1, r5
    8628:	f04f 32ff 	mov.w	r2, #4294967295
    862c:	f003 fa0a 	bl	ba44 <__aeabi_dcmpun>
    8630:	b948      	cbnz	r0, 8646 <Print::printFloat(double, unsigned char)+0x46>
    8632:	4b5b      	ldr	r3, [pc, #364]	; (87a0 <Print::printFloat(double, unsigned char)+0x1a0>)
    8634:	4620      	mov	r0, r4
    8636:	4629      	mov	r1, r5
    8638:	f04f 32ff 	mov.w	r2, #4294967295
    863c:	f003 f9e4 	bl	ba08 <__aeabi_dcmple>
    8640:	2800      	cmp	r0, #0
    8642:	f000 808e 	beq.w	8762 <Print::printFloat(double, unsigned char)+0x162>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    8646:	4b57      	ldr	r3, [pc, #348]	; (87a4 <Print::printFloat(double, unsigned char)+0x1a4>)
    8648:	4620      	mov	r0, r4
    864a:	4651      	mov	r1, sl
    864c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    8650:	f003 f9ee 	bl	ba30 <__aeabi_dcmpgt>
    8654:	2800      	cmp	r0, #0
    8656:	d17b      	bne.n	8750 <Print::printFloat(double, unsigned char)+0x150>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    8658:	4b53      	ldr	r3, [pc, #332]	; (87a8 <Print::printFloat(double, unsigned char)+0x1a8>)
    865a:	4620      	mov	r0, r4
    865c:	4651      	mov	r1, sl
    865e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    8662:	f003 f9c7 	bl	b9f4 <__aeabi_dcmplt>
    8666:	2800      	cmp	r0, #0
    8668:	d172      	bne.n	8750 <Print::printFloat(double, unsigned char)+0x150>
	
	// Handle negative numbers
	if (number < 0.0) {
    866a:	4620      	mov	r0, r4
    866c:	4651      	mov	r1, sl
    866e:	2200      	movs	r2, #0
    8670:	2300      	movs	r3, #0
    8672:	f003 f9bf 	bl	b9f4 <__aeabi_dcmplt>
    8676:	4605      	mov	r5, r0
    8678:	2800      	cmp	r0, #0
    867a:	d175      	bne.n	8768 <Print::printFloat(double, unsigned char)+0x168>
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    867c:	2f00      	cmp	r7, #0
    867e:	d07a      	beq.n	8776 <Print::printFloat(double, unsigned char)+0x176>
		rounding *= 0.1;
    8680:	f20f 1914 	addw	r9, pc, #276	; 0x114
    8684:	e9d9 8900 	ldrd	r8, r9, [r9]
	double rounding = 0.5;
    8688:	4948      	ldr	r1, [pc, #288]	; (87ac <Print::printFloat(double, unsigned char)+0x1ac>)
	for (uint8_t i=0; i<digits; ++i) {
    868a:	f04f 0b00 	mov.w	fp, #0
	double rounding = 0.5;
    868e:	2000      	movs	r0, #0
		rounding *= 0.1;
    8690:	464b      	mov	r3, r9
	for (uint8_t i=0; i<digits; ++i) {
    8692:	f10b 0b01 	add.w	fp, fp, #1
		rounding *= 0.1;
    8696:	4642      	mov	r2, r8
    8698:	f009 ff7e 	bl	12598 <__aeabi_dmul>
	for (uint8_t i=0; i<digits; ++i) {
    869c:	fa5f f38b 	uxtb.w	r3, fp
    86a0:	42bb      	cmp	r3, r7
    86a2:	d3f5      	bcc.n	8690 <Print::printFloat(double, unsigned char)+0x90>
	}
	number += rounding;
    86a4:	4602      	mov	r2, r0
    86a6:	460b      	mov	r3, r1
    86a8:	4620      	mov	r0, r4
    86aa:	4651      	mov	r1, sl
    86ac:	f002 ff8c 	bl	b5c8 <__adddf3>
    86b0:	4689      	mov	r9, r1
    86b2:	4680      	mov	r8, r0

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    86b4:	f003 f9dc 	bl	ba70 <__aeabi_d2uiz>
    86b8:	2f0f      	cmp	r7, #15
    86ba:	bf28      	it	cs
    86bc:	270f      	movcs	r7, #15
    86be:	4682      	mov	sl, r0
	double remainder = number - (double)int_part;
    86c0:	9701      	str	r7, [sp, #4]
    86c2:	f003 f8bd 	bl	b840 <__aeabi_ui2d>
    86c6:	4602      	mov	r2, r0
    86c8:	460b      	mov	r3, r1
    86ca:	4640      	mov	r0, r8
    86cc:	4649      	mov	r1, r9
    86ce:	f002 ff79 	bl	b5c4 <__aeabi_dsub>
    86d2:	462b      	mov	r3, r5
    86d4:	4680      	mov	r8, r0
    86d6:	4689      	mov	r9, r1
    86d8:	220a      	movs	r2, #10
    86da:	4651      	mov	r1, sl
    86dc:	4630      	mov	r0, r6
    86de:	f7ff ff21 	bl	8524 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    86e2:	232e      	movs	r3, #46	; 0x2e
	double remainder = number - (double)int_part;
    86e4:	464d      	mov	r5, r9
		buf[0] = '.';
    86e6:	f88d 3008 	strb.w	r3, [sp, #8]
    86ea:	f10d 0209 	add.w	r2, sp, #9

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    86ee:	1e7b      	subs	r3, r7, #1
			remainder *= 10.0;
    86f0:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 87b0 <Print::printFloat(double, unsigned char)+0x1b0>
	double remainder = number - (double)int_part;
    86f4:	4644      	mov	r4, r8
	if (base == 0) {
    86f6:	4683      	mov	fp, r0
		while (digits-- > 0) {
    86f8:	fa52 fa83 	uxtab	sl, r2, r3
    86fc:	af02      	add	r7, sp, #8
			remainder *= 10.0;
    86fe:	f04f 0800 	mov.w	r8, #0
    8702:	4642      	mov	r2, r8
    8704:	464b      	mov	r3, r9
    8706:	4620      	mov	r0, r4
    8708:	4629      	mov	r1, r5
    870a:	f009 ff45 	bl	12598 <__aeabi_dmul>
    870e:	460d      	mov	r5, r1
    8710:	4604      	mov	r4, r0
			n = (uint8_t)(remainder);
    8712:	f003 f9ad 	bl	ba70 <__aeabi_d2uiz>
    8716:	b2c0      	uxtb	r0, r0
			buf[count++] = '0' + n;
    8718:	f100 0330 	add.w	r3, r0, #48	; 0x30
    871c:	f807 3f01 	strb.w	r3, [r7, #1]!
			remainder -= n; 
    8720:	f003 f89e 	bl	b860 <__aeabi_i2d>
    8724:	4602      	mov	r2, r0
    8726:	460b      	mov	r3, r1
    8728:	4620      	mov	r0, r4
    872a:	4629      	mov	r1, r5
    872c:	f002 ff4a 	bl	b5c4 <__aeabi_dsub>
		while (digits-- > 0) {
    8730:	45ba      	cmp	sl, r7
			remainder -= n; 
    8732:	4604      	mov	r4, r0
    8734:	460d      	mov	r5, r1
		while (digits-- > 0) {
    8736:	d1e4      	bne.n	8702 <Print::printFloat(double, unsigned char)+0x102>
			buf[count++] = '0' + n;
    8738:	9a01      	ldr	r2, [sp, #4]
		}
		count += write(buf, count);
    873a:	6833      	ldr	r3, [r6, #0]
			buf[count++] = '0' + n;
    873c:	3201      	adds	r2, #1
		count += write(buf, count);
    873e:	685b      	ldr	r3, [r3, #4]
    8740:	b2d2      	uxtb	r2, r2
    8742:	a902      	add	r1, sp, #8
    8744:	4630      	mov	r0, r6
    8746:	4798      	blx	r3
	}
	return count;
}
    8748:	4658      	mov	r0, fp
    874a:	b007      	add	sp, #28
    874c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							  return write((const uint8_t *)str, strlen(str)); }
    8750:	6833      	ldr	r3, [r6, #0]
    8752:	4918      	ldr	r1, [pc, #96]	; (87b4 <Print::printFloat(double, unsigned char)+0x1b4>)
    8754:	685b      	ldr	r3, [r3, #4]
    8756:	2203      	movs	r2, #3
    8758:	4630      	mov	r0, r6
    875a:	b007      	add	sp, #28
    875c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8760:	4718      	bx	r3
    8762:	6833      	ldr	r3, [r6, #0]
    8764:	4914      	ldr	r1, [pc, #80]	; (87b8 <Print::printFloat(double, unsigned char)+0x1b8>)
    8766:	e7f5      	b.n	8754 <Print::printFloat(double, unsigned char)+0x154>
		number = -number;
    8768:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
		sign = 1;
    876c:	2501      	movs	r5, #1
    876e:	e785      	b.n	867c <Print::printFloat(double, unsigned char)+0x7c>
    8770:	6833      	ldr	r3, [r6, #0]
    8772:	4912      	ldr	r1, [pc, #72]	; (87bc <Print::printFloat(double, unsigned char)+0x1bc>)
    8774:	e7ee      	b.n	8754 <Print::printFloat(double, unsigned char)+0x154>
	number += rounding;
    8776:	4b0d      	ldr	r3, [pc, #52]	; (87ac <Print::printFloat(double, unsigned char)+0x1ac>)
    8778:	2200      	movs	r2, #0
    877a:	4620      	mov	r0, r4
    877c:	4651      	mov	r1, sl
    877e:	f002 ff23 	bl	b5c8 <__adddf3>
	unsigned long int_part = (unsigned long)number;
    8782:	f003 f975 	bl	ba70 <__aeabi_d2uiz>
    8786:	462b      	mov	r3, r5
    8788:	4601      	mov	r1, r0
    878a:	220a      	movs	r2, #10
    878c:	4630      	mov	r0, r6
}
    878e:	b007      	add	sp, #28
    8790:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8794:	f7ff bec6 	b.w	8524 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    8798:	a0000000 	.word	0xa0000000
    879c:	3fb99999 	.word	0x3fb99999
    87a0:	7fefffff 	.word	0x7fefffff
    87a4:	41efffff 	.word	0x41efffff
    87a8:	c1efffff 	.word	0xc1efffff
    87ac:	3fe00000 	.word	0x3fe00000
    87b0:	40240000 	.word	0x40240000
    87b4:	00014034 	.word	0x00014034
    87b8:	00014030 	.word	0x00014030
    87bc:	0001402c 	.word	0x0001402c

000087c0 <Stream::timedPeek()>:
  return -1;     // -1 indicates timeout
}

// private method to peek stream with timeout
int Stream::timedPeek()
{
    87c0:	b570      	push	{r4, r5, r6, lr}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    87c2:	4d0e      	ldr	r5, [pc, #56]	; (87fc <Stream::timedPeek()+0x3c>)
    87c4:	b082      	sub	sp, #8
    87c6:	682b      	ldr	r3, [r5, #0]
    87c8:	9300      	str	r3, [sp, #0]
	return ret;
    87ca:	9e00      	ldr	r6, [sp, #0]
    87cc:	4604      	mov	r4, r0
    87ce:	e008      	b.n	87e2 <Stream::timedPeek()+0x22>
  int c;
  unsigned long startMillis = millis();
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
    87d0:	f002 fca2 	bl	b118 <yield>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    87d4:	682b      	ldr	r3, [r5, #0]
    87d6:	9301      	str	r3, [sp, #4]
	return ret;
    87d8:	9b01      	ldr	r3, [sp, #4]
  } while(millis() - startMillis < _timeout);
    87da:	68a2      	ldr	r2, [r4, #8]
    87dc:	1b9b      	subs	r3, r3, r6
    87de:	4293      	cmp	r3, r2
    87e0:	d207      	bcs.n	87f2 <Stream::timedPeek()+0x32>
    c = peek();
    87e2:	6823      	ldr	r3, [r4, #0]
    87e4:	4620      	mov	r0, r4
    87e6:	699b      	ldr	r3, [r3, #24]
    87e8:	4798      	blx	r3
    if (c >= 0) return c;
    87ea:	2800      	cmp	r0, #0
    87ec:	dbf0      	blt.n	87d0 <Stream::timedPeek()+0x10>
  return -1;     // -1 indicates timeout
}
    87ee:	b002      	add	sp, #8
    87f0:	bd70      	pop	{r4, r5, r6, pc}
  return -1;     // -1 indicates timeout
    87f2:	f04f 30ff 	mov.w	r0, #4294967295
}
    87f6:	b002      	add	sp, #8
    87f8:	bd70      	pop	{r4, r5, r6, pc}
    87fa:	bf00      	nop
    87fc:	1fffb4d8 	.word	0x1fffb4d8

00008800 <Stream::parseInt(char)>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
    8800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8802:	4604      	mov	r4, r0
    8804:	460d      	mov	r5, r1
int Stream::peekNextDigit()
    8806:	e006      	b.n	8816 <Stream::parseInt(char)+0x16>
    if (c == '-') return c;
    8808:	2b2d      	cmp	r3, #45	; 0x2d
    880a:	d00f      	beq.n	882c <Stream::parseInt(char)+0x2c>
    if (c >= '0' && c <= '9') return c;
    880c:	2a09      	cmp	r2, #9
    880e:	d90d      	bls.n	882c <Stream::parseInt(char)+0x2c>
    read();  // discard non-numeric
    8810:	6823      	ldr	r3, [r4, #0]
    8812:	695b      	ldr	r3, [r3, #20]
    8814:	4798      	blx	r3
    c = timedPeek();
    8816:	4620      	mov	r0, r4
    8818:	f7ff ffd2 	bl	87c0 <Stream::timedPeek()>
    if (c < 0) return c;  // timeout
    881c:	1e03      	subs	r3, r0, #0
    if (c >= '0' && c <= '9') return c;
    881e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    read();  // discard non-numeric
    8822:	4620      	mov	r0, r4
    if (c < 0) return c;  // timeout
    8824:	daf0      	bge.n	8808 <Stream::parseInt(char)+0x8>
  int c;

  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
    8826:	2700      	movs	r7, #0
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    value = -value;
  return value;
}
    8828:	4638      	mov	r0, r7
    882a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(c == skipChar)
    882c:	2700      	movs	r7, #0
    882e:	463e      	mov	r6, r7
    8830:	42ab      	cmp	r3, r5
    8832:	d00b      	beq.n	884c <Stream::parseInt(char)+0x4c>
    else if(c == '-')
    8834:	2b2d      	cmp	r3, #45	; 0x2d
    8836:	d01c      	beq.n	8872 <Stream::parseInt(char)+0x72>
    else if(c >= '0' && c <= '9')        // is c a digit?
    8838:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    883c:	2a09      	cmp	r2, #9
    883e:	d805      	bhi.n	884c <Stream::parseInt(char)+0x4c>
      value = value * 10 + c - '0';
    8840:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    8844:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    8848:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
    read();  // consume the character we got with peek
    884c:	6823      	ldr	r3, [r4, #0]
    884e:	4620      	mov	r0, r4
    8850:	695b      	ldr	r3, [r3, #20]
    8852:	4798      	blx	r3
    c = timedPeek();
    8854:	4620      	mov	r0, r4
    8856:	f7ff ffb3 	bl	87c0 <Stream::timedPeek()>
  while( (c >= '0' && c <= '9') || c == skipChar );
    885a:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    885e:	2a09      	cmp	r2, #9
    c = timedPeek();
    8860:	4603      	mov	r3, r0
  while( (c >= '0' && c <= '9') || c == skipChar );
    8862:	d9e5      	bls.n	8830 <Stream::parseInt(char)+0x30>
    8864:	42a8      	cmp	r0, r5
    8866:	d0f1      	beq.n	884c <Stream::parseInt(char)+0x4c>
  if(isNegative)
    8868:	2e00      	cmp	r6, #0
    886a:	d0dd      	beq.n	8828 <Stream::parseInt(char)+0x28>
    value = -value;
    886c:	427f      	negs	r7, r7
}
    886e:	4638      	mov	r0, r7
    8870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      isNegative = true;
    8872:	2601      	movs	r6, #1
    8874:	e7ea      	b.n	884c <Stream::parseInt(char)+0x4c>
    8876:	bf00      	nop

00008878 <Stream::parseInt()>:
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
    8878:	2101      	movs	r1, #1
    887a:	f7ff bfc1 	b.w	8800 <Stream::parseInt(char)>
    887e:	bf00      	nop

00008880 <analog_init>:
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    8880:	4b2a      	ldr	r3, [pc, #168]	; (892c <analog_init+0xac>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    8882:	4a2b      	ldr	r2, [pc, #172]	; (8930 <analog_init+0xb0>)
	VREF_TRM = 0x60;
    8884:	2060      	movs	r0, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    8886:	21e1      	movs	r1, #225	; 0xe1
	VREF_TRM = 0x60;
    8888:	7018      	strb	r0, [r3, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    888a:	7059      	strb	r1, [r3, #1]
	if (analog_config_bits == 8) {
    888c:	7813      	ldrb	r3, [r2, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    888e:	4829      	ldr	r0, [pc, #164]	; (8934 <analog_init+0xb4>)
	if (analog_config_bits == 8) {
    8890:	2b08      	cmp	r3, #8
    8892:	d034      	beq.n	88fe <analog_init+0x7e>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    8894:	2b0a      	cmp	r3, #10
    8896:	d020      	beq.n	88da <analog_init+0x5a>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    8898:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    889a:	4b27      	ldr	r3, [pc, #156]	; (8938 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    889c:	bf0c      	ite	eq
    889e:	2135      	moveq	r1, #53	; 0x35
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    88a0:	213d      	movne	r1, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    88a2:	2212      	movs	r2, #18
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    88a4:	6081      	str	r1, [r0, #8]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    88a6:	60c2      	str	r2, [r0, #12]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    88a8:	6099      	str	r1, [r3, #8]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    88aa:	60da      	str	r2, [r3, #12]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    88ac:	4b23      	ldr	r3, [pc, #140]	; (893c <analog_init+0xbc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    88ae:	4921      	ldr	r1, [pc, #132]	; (8934 <analog_init+0xb4>)
	if (analog_reference_internal) {
    88b0:	781b      	ldrb	r3, [r3, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    88b2:	4a21      	ldr	r2, [pc, #132]	; (8938 <analog_init+0xb8>)
	if (analog_reference_internal) {
    88b4:	b1cb      	cbz	r3, 88ea <analog_init+0x6a>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    88b6:	2301      	movs	r3, #1
    88b8:	620b      	str	r3, [r1, #32]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    88ba:	6213      	str	r3, [r2, #32]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    88bc:	4b20      	ldr	r3, [pc, #128]	; (8940 <analog_init+0xc0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    88be:	491d      	ldr	r1, [pc, #116]	; (8934 <analog_init+0xb4>)
	num = analog_num_average;
    88c0:	781b      	ldrb	r3, [r3, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    88c2:	4a1d      	ldr	r2, [pc, #116]	; (8938 <analog_init+0xb8>)
	if (num <= 1) {
    88c4:	2b01      	cmp	r3, #1
    88c6:	d913      	bls.n	88f0 <analog_init+0x70>
		#endif
	} else if (num <= 4) {
    88c8:	2b04      	cmp	r3, #4
    88ca:	d81b      	bhi.n	8904 <analog_init+0x84>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    88cc:	2384      	movs	r3, #132	; 0x84
    88ce:	624b      	str	r3, [r1, #36]	; 0x24
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    88d0:	6253      	str	r3, [r2, #36]	; 0x24
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
		#endif
	}
	calibrating = 1;
    88d2:	4b1c      	ldr	r3, [pc, #112]	; (8944 <analog_init+0xc4>)
    88d4:	2201      	movs	r2, #1
    88d6:	701a      	strb	r2, [r3, #0]
}
    88d8:	4770      	bx	lr
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    88da:	4b17      	ldr	r3, [pc, #92]	; (8938 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    88dc:	2139      	movs	r1, #57	; 0x39
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    88de:	2213      	movs	r2, #19
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    88e0:	6081      	str	r1, [r0, #8]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    88e2:	60c2      	str	r2, [r0, #12]
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    88e4:	6099      	str	r1, [r3, #8]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    88e6:	60da      	str	r2, [r3, #12]
    88e8:	e7e0      	b.n	88ac <analog_init+0x2c>
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    88ea:	620b      	str	r3, [r1, #32]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    88ec:	6213      	str	r3, [r2, #32]
    88ee:	e7e5      	b.n	88bc <analog_init+0x3c>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    88f0:	2380      	movs	r3, #128	; 0x80
    88f2:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    88f4:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    88f6:	4b13      	ldr	r3, [pc, #76]	; (8944 <analog_init+0xc4>)
    88f8:	2201      	movs	r2, #1
    88fa:	701a      	strb	r2, [r3, #0]
}
    88fc:	4770      	bx	lr
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    88fe:	4b0e      	ldr	r3, [pc, #56]	; (8938 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    8900:	2101      	movs	r1, #1
    8902:	e7ec      	b.n	88de <analog_init+0x5e>
	} else if (num <= 8) {
    8904:	2b08      	cmp	r3, #8
    8906:	d806      	bhi.n	8916 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    8908:	2385      	movs	r3, #133	; 0x85
    890a:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    890c:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    890e:	4b0d      	ldr	r3, [pc, #52]	; (8944 <analog_init+0xc4>)
    8910:	2201      	movs	r2, #1
    8912:	701a      	strb	r2, [r3, #0]
}
    8914:	4770      	bx	lr
	} else if (num <= 16) {
    8916:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    8918:	bf94      	ite	ls
    891a:	2386      	movls	r3, #134	; 0x86
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    891c:	2387      	movhi	r3, #135	; 0x87
    891e:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    8920:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    8922:	4b08      	ldr	r3, [pc, #32]	; (8944 <analog_init+0xc4>)
    8924:	2201      	movs	r2, #1
    8926:	701a      	strb	r2, [r3, #0]
}
    8928:	4770      	bx	lr
    892a:	bf00      	nop
    892c:	40074000 	.word	0x40074000
    8930:	1fff87d4 	.word	0x1fff87d4
    8934:	4003b000 	.word	0x4003b000
    8938:	400bb000 	.word	0x400bb000
    893c:	1fffb4d4 	.word	0x1fffb4d4
    8940:	1fff87d5 	.word	0x1fff87d5
    8944:	1fffb4d5 	.word	0x1fffb4d5

00008948 <analogWriteDAC0>:
typedef int16_t __attribute__((__may_alias__)) aliased_int16_t;

void analogWriteDAC0(int val)
{
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_DAC0;
    8948:	4a0b      	ldr	r2, [pc, #44]	; (8978 <analogWriteDAC0+0x30>)
	if (analog_reference_internal) {
    894a:	490c      	ldr	r1, [pc, #48]	; (897c <analogWriteDAC0+0x34>)
	SIM_SCGC2 |= SIM_SCGC2_DAC0;
    894c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    894e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    8952:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (analog_reference_internal) {
    8954:	780b      	ldrb	r3, [r1, #0]
    8956:	b14b      	cbz	r3, 896c <analogWriteDAC0+0x24>
		DAC0_C0 = DAC_C0_DACEN;  // 1.2V ref is DACREF_1
    8958:	4b09      	ldr	r3, [pc, #36]	; (8980 <analogWriteDAC0+0x38>)
    895a:	2280      	movs	r2, #128	; 0x80
    895c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	} else {
		DAC0_C0 = DAC_C0_DACEN | DAC_C0_DACRFS; // 3.3V VDDA is DACREF_2
	}
	__asm__ ("usat    %[value], #12, %[value]\n\t" : [value] "+r" (val));  // 0 <= val <= 4095

	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
    8960:	4b07      	ldr	r3, [pc, #28]	; (8980 <analogWriteDAC0+0x38>)
	__asm__ ("usat    %[value], #12, %[value]\n\t" : [value] "+r" (val));  // 0 <= val <= 4095
    8962:	f380 000c 	usat	r0, #12, r0
	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
    8966:	b200      	sxth	r0, r0
    8968:	8018      	strh	r0, [r3, #0]
	if (val < 0) val = 0;
	else if (val > 4095) val = 4095;

	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
#endif
}
    896a:	4770      	bx	lr
		DAC0_C0 = DAC_C0_DACEN | DAC_C0_DACRFS; // 3.3V VDDA is DACREF_2
    896c:	4b04      	ldr	r3, [pc, #16]	; (8980 <analogWriteDAC0+0x38>)
    896e:	22c0      	movs	r2, #192	; 0xc0
    8970:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    8974:	e7f4      	b.n	8960 <analogWriteDAC0+0x18>
    8976:	bf00      	nop
    8978:	40048000 	.word	0x40048000
    897c:	1fffb4d4 	.word	0x1fffb4d4
    8980:	400cc000 	.word	0x400cc000

00008984 <eeprom_initialize>:
//
#define HANDLE_UNALIGNED_WRITES


void eeprom_initialize(void)
{
    8984:	b510      	push	{r4, lr}
	uint32_t count=0;
	uint16_t do_flash_cmd[] = {
    8986:	4b17      	ldr	r3, [pc, #92]	; (89e4 <eeprom_initialize+0x60>)
    8988:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
{
    898a:	b084      	sub	sp, #16
	uint16_t do_flash_cmd[] = {
    898c:	46ec      	mov	ip, sp
    898e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		0xf06f, 0x037f, 0x7003, 0x7803,
		0xf013, 0x0f80, 0xd0fb, 0x4770};
	uint8_t status;

	if (FTFL_FCNFG & FTFL_FCNFG_RAMRDY) {
    8992:	4b15      	ldr	r3, [pc, #84]	; (89e8 <eeprom_initialize+0x64>)
    8994:	785a      	ldrb	r2, [r3, #1]
    8996:	0791      	lsls	r1, r2, #30
    8998:	d517      	bpl.n	89ca <eeprom_initialize+0x46>
		uint8_t stat = FTFL_FSTAT & 0x70;
    899a:	781a      	ldrb	r2, [r3, #0]
		if (stat) FTFL_FSTAT = stat;
		// FlexRAM is configured as traditional RAM
		// We need to reconfigure for EEPROM usage
		kinetis_hsrun_disable();
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    899c:	4c12      	ldr	r4, [pc, #72]	; (89e8 <eeprom_initialize+0x64>)
		if (stat) FTFL_FSTAT = stat;
    899e:	f012 0270 	ands.w	r2, r2, #112	; 0x70
    89a2:	bf18      	it	ne
    89a4:	701a      	strbne	r2, [r3, #0]
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    89a6:	2180      	movs	r1, #128	; 0x80
		FTFL_FCCOB3 = 0;
    89a8:	2300      	movs	r3, #0
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    89aa:	71e1      	strb	r1, [r4, #7]
		FTFL_FCCOB4 = EEESPLIT | EEESIZE;
    89ac:	2233      	movs	r2, #51	; 0x33
		FTFL_FCCOB3 = 0;
    89ae:	7123      	strb	r3, [r4, #4]
		FTFL_FCCOB5 = EEPARTITION;
    89b0:	2303      	movs	r3, #3
		FTFL_FCCOB4 = EEESPLIT | EEESIZE;
    89b2:	72e2      	strb	r2, [r4, #11]
		FTFL_FCCOB5 = EEPARTITION;
    89b4:	72a3      	strb	r3, [r4, #10]
		__disable_irq();
    89b6:	b672      	cpsid	i
		// do_flash_cmd() must execute from RAM.  Luckily the C syntax is simple...
		(*((void (*)(volatile uint8_t *))((uint32_t)do_flash_cmd | 1)))(&FTFL_FSTAT);
    89b8:	f04c 0301 	orr.w	r3, ip, #1
    89bc:	4620      	mov	r0, r4
    89be:	4798      	blx	r3
		__enable_irq();
    89c0:	b662      	cpsie	i
		kinetis_hsrun_enable();
		status = FTFL_FSTAT;
    89c2:	7823      	ldrb	r3, [r4, #0]
		if (status & 0x70) {
    89c4:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    89c8:	d109      	bne.n	89de <eeprom_initialize+0x5a>
{
    89ca:	4b08      	ldr	r3, [pc, #32]	; (89ec <eeprom_initialize+0x68>)
			FTFL_FSTAT = (status & 0x70);
			return; // error
		}
	}
	// wait for eeprom to become ready (is this really necessary?)
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    89cc:	4906      	ldr	r1, [pc, #24]	; (89e8 <eeprom_initialize+0x64>)
    89ce:	e001      	b.n	89d4 <eeprom_initialize+0x50>
		if (++count > 200000) break;
    89d0:	3b01      	subs	r3, #1
    89d2:	d002      	beq.n	89da <eeprom_initialize+0x56>
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    89d4:	784a      	ldrb	r2, [r1, #1]
    89d6:	07d2      	lsls	r2, r2, #31
    89d8:	d5fa      	bpl.n	89d0 <eeprom_initialize+0x4c>
	}
}
    89da:	b004      	add	sp, #16
    89dc:	bd10      	pop	{r4, pc}
			FTFL_FSTAT = (status & 0x70);
    89de:	7023      	strb	r3, [r4, #0]
}
    89e0:	b004      	add	sp, #16
    89e2:	bd10      	pop	{r4, pc}
    89e4:	00014038 	.word	0x00014038
    89e8:	40020000 	.word	0x40020000
    89ec:	00030d41 	.word	0x00030d41

000089f0 <eeprom_read_byte>:
#define FlexRAM ((volatile uint8_t *)0x14000000)

uint8_t eeprom_read_byte(const uint8_t *addr)
{
	uint32_t offset = (uint32_t)addr;
	if (offset >= EEPROM_SIZE) return 0;
    89f0:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    89f4:	d211      	bcs.n	8a1a <eeprom_read_byte+0x2a>
{
    89f6:	b510      	push	{r4, lr}
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    89f8:	4b09      	ldr	r3, [pc, #36]	; (8a20 <eeprom_read_byte+0x30>)
    89fa:	785b      	ldrb	r3, [r3, #1]
    89fc:	07db      	lsls	r3, r3, #31
    89fe:	4604      	mov	r4, r0
    8a00:	d504      	bpl.n	8a0c <eeprom_read_byte+0x1c>
	return FlexRAM[offset];
    8a02:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
    8a06:	7820      	ldrb	r0, [r4, #0]
    8a08:	b2c0      	uxtb	r0, r0
}
    8a0a:	bd10      	pop	{r4, pc}
	return FlexRAM[offset];
    8a0c:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    8a10:	f7ff ffb8 	bl	8984 <eeprom_initialize>
	return FlexRAM[offset];
    8a14:	7820      	ldrb	r0, [r4, #0]
    8a16:	b2c0      	uxtb	r0, r0
}
    8a18:	bd10      	pop	{r4, pc}
	if (offset >= EEPROM_SIZE) return 0;
    8a1a:	2000      	movs	r0, #0
}
    8a1c:	4770      	bx	lr
    8a1e:	bf00      	nop
    8a20:	40020000 	.word	0x40020000

00008a24 <eeprom_write_block>:
void eeprom_write_block(const void *buf, void *addr, uint32_t len)
{
	uint32_t offset = (uint32_t)addr;
	const uint8_t *src = (const uint8_t *)buf;

	if (offset >= EEPROM_SIZE) return;
    8a24:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    8a28:	d276      	bcs.n	8b18 <eeprom_write_block+0xf4>
{
    8a2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    8a2c:	4b3b      	ldr	r3, [pc, #236]	; (8b1c <eeprom_write_block+0xf8>)
    8a2e:	785b      	ldrb	r3, [r3, #1]
    8a30:	07db      	lsls	r3, r3, #31
    8a32:	460e      	mov	r6, r1
    8a34:	4604      	mov	r4, r0
    8a36:	4617      	mov	r7, r2
    8a38:	460d      	mov	r5, r1
    8a3a:	d51f      	bpl.n	8a7c <eeprom_write_block+0x58>
	if (len >= EEPROM_SIZE) len = EEPROM_SIZE;
    8a3c:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
    8a40:	4638      	mov	r0, r7
    8a42:	bf28      	it	cs
    8a44:	f44f 6000 	movcs.w	r0, #2048	; 0x800
	if (offset + len >= EEPROM_SIZE) len = EEPROM_SIZE - offset;
    8a48:	1833      	adds	r3, r6, r0
    8a4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    8a4e:	d212      	bcs.n	8a76 <eeprom_write_block+0x52>
	while (len > 0) {
    8a50:	b187      	cbz	r7, 8a74 <eeprom_write_block+0x50>
		} else {
			// write 8 bits
			uint8_t val8 = *src++;
			if (FlexRAM[offset] != val8) {
				kinetis_hsrun_disable();
				uint8_t stat = FTFL_FSTAT & 0x70;
    8a52:	4a32      	ldr	r2, [pc, #200]	; (8b1c <eeprom_write_block+0xf8>)
		if (lsb == 0 && len >= 4) {
    8a54:	f015 0303 	ands.w	r3, r5, #3
    8a58:	d026      	beq.n	8aa8 <eeprom_write_block+0x84>
		} else if ((lsb == 0 || lsb == 2) && len >= 2) {
    8a5a:	2b02      	cmp	r3, #2
    8a5c:	d011      	beq.n	8a82 <eeprom_write_block+0x5e>
			if (FlexRAM[offset] != val8) {
    8a5e:	f105 53a0 	add.w	r3, r5, #335544320	; 0x14000000
			uint8_t val8 = *src++;
    8a62:	f814 1b01 	ldrb.w	r1, [r4], #1
			if (FlexRAM[offset] != val8) {
    8a66:	781e      	ldrb	r6, [r3, #0]
    8a68:	428e      	cmp	r6, r1
    8a6a:	d137      	bne.n	8adc <eeprom_write_block+0xb8>
				FlexRAM[offset] = val8;
				flexram_wait();
				kinetis_hsrun_enable();
			}
			offset++;
			len--;
    8a6c:	3801      	subs	r0, #1
			offset++;
    8a6e:	3501      	adds	r5, #1
	while (len > 0) {
    8a70:	2800      	cmp	r0, #0
    8a72:	d1ef      	bne.n	8a54 <eeprom_write_block+0x30>
		}
	}
}
    8a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (offset + len >= EEPROM_SIZE) len = EEPROM_SIZE - offset;
    8a76:	f5c6 6000 	rsb	r0, r6, #2048	; 0x800
	while (len > 0) {
    8a7a:	e7ea      	b.n	8a52 <eeprom_write_block+0x2e>
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    8a7c:	f7ff ff82 	bl	8984 <eeprom_initialize>
    8a80:	e7dc      	b.n	8a3c <eeprom_write_block+0x18>
		} else if ((lsb == 0 || lsb == 2) && len >= 2) {
    8a82:	2801      	cmp	r0, #1
    8a84:	d0eb      	beq.n	8a5e <eeprom_write_block+0x3a>
			val16 |= (*src++ << 8);
    8a86:	4621      	mov	r1, r4
			if (*(uint16_t *)(&FlexRAM[offset]) != val16) {
    8a88:	f105 56a0 	add.w	r6, r5, #335544320	; 0x14000000
    8a8c:	7867      	ldrb	r7, [r4, #1]
    8a8e:	f811 3b02 	ldrb.w	r3, [r1], #2
    8a92:	8834      	ldrh	r4, [r6, #0]
    8a94:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    8a98:	429c      	cmp	r4, r3
    8a9a:	d129      	bne.n	8af0 <eeprom_write_block+0xcc>
			len -= 2;
    8a9c:	3802      	subs	r0, #2
			offset += 2;
    8a9e:	3502      	adds	r5, #2
			val16 |= (*src++ << 8);
    8aa0:	460c      	mov	r4, r1
	while (len > 0) {
    8aa2:	2800      	cmp	r0, #0
    8aa4:	d1d6      	bne.n	8a54 <eeprom_write_block+0x30>
    8aa6:	e7e5      	b.n	8a74 <eeprom_write_block+0x50>
		if (lsb == 0 && len >= 4) {
    8aa8:	2803      	cmp	r0, #3
    8aaa:	d9ea      	bls.n	8a82 <eeprom_write_block+0x5e>
			val32 |= (*src++ << 24);
    8aac:	4621      	mov	r1, r4
    8aae:	f894 c001 	ldrb.w	ip, [r4, #1]
    8ab2:	f811 3b04 	ldrb.w	r3, [r1], #4
    8ab6:	78a7      	ldrb	r7, [r4, #2]
    8ab8:	78e6      	ldrb	r6, [r4, #3]
    8aba:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
			if (*(uint32_t *)(&FlexRAM[offset]) != val32) {
    8abe:	f105 54a0 	add.w	r4, r5, #335544320	; 0x14000000
			val32 |= (*src++ << 24);
    8ac2:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
    8ac6:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
			if (*(uint32_t *)(&FlexRAM[offset]) != val32) {
    8aca:	6826      	ldr	r6, [r4, #0]
    8acc:	429e      	cmp	r6, r3
    8ace:	d119      	bne.n	8b04 <eeprom_write_block+0xe0>
			len -= 4;
    8ad0:	3804      	subs	r0, #4
			offset += 4;
    8ad2:	3504      	adds	r5, #4
			val32 |= (*src++ << 24);
    8ad4:	460c      	mov	r4, r1
	while (len > 0) {
    8ad6:	2800      	cmp	r0, #0
    8ad8:	d1bc      	bne.n	8a54 <eeprom_write_block+0x30>
    8ada:	e7cb      	b.n	8a74 <eeprom_write_block+0x50>
				uint8_t stat = FTFL_FSTAT & 0x70;
    8adc:	7816      	ldrb	r6, [r2, #0]
				if (stat) FTFL_FSTAT = stat;
    8ade:	f016 0670 	ands.w	r6, r6, #112	; 0x70
    8ae2:	bf18      	it	ne
    8ae4:	7016      	strbne	r6, [r2, #0]
				FlexRAM[offset] = val8;
    8ae6:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    8ae8:	7853      	ldrb	r3, [r2, #1]
    8aea:	07db      	lsls	r3, r3, #31
    8aec:	d5fc      	bpl.n	8ae8 <eeprom_write_block+0xc4>
    8aee:	e7bd      	b.n	8a6c <eeprom_write_block+0x48>
				uint8_t stat = FTFL_FSTAT & 0x70;
    8af0:	7814      	ldrb	r4, [r2, #0]
				if (stat) FTFL_FSTAT = stat;
    8af2:	f014 0470 	ands.w	r4, r4, #112	; 0x70
    8af6:	bf18      	it	ne
    8af8:	7014      	strbne	r4, [r2, #0]
				*(uint16_t *)(&FlexRAM[offset]) = val16;
    8afa:	8033      	strh	r3, [r6, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    8afc:	7853      	ldrb	r3, [r2, #1]
    8afe:	07dc      	lsls	r4, r3, #31
    8b00:	d5fc      	bpl.n	8afc <eeprom_write_block+0xd8>
    8b02:	e7cb      	b.n	8a9c <eeprom_write_block+0x78>
				uint8_t stat = FTFL_FSTAT & 0x70;
    8b04:	7816      	ldrb	r6, [r2, #0]
				if (stat) FTFL_FSTAT = stat;
    8b06:	f016 0670 	ands.w	r6, r6, #112	; 0x70
    8b0a:	bf18      	it	ne
    8b0c:	7016      	strbne	r6, [r2, #0]
				*(uint32_t *)(&FlexRAM[offset]) = val32;
    8b0e:	6023      	str	r3, [r4, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    8b10:	7853      	ldrb	r3, [r2, #1]
    8b12:	07de      	lsls	r6, r3, #31
    8b14:	d5fc      	bpl.n	8b10 <eeprom_write_block+0xec>
    8b16:	e7db      	b.n	8ad0 <eeprom_write_block+0xac>
    8b18:	4770      	bx	lr
    8b1a:	bf00      	nop
    8b1c:	40020000 	.word	0x40020000

00008b20 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    8b20:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    8b22:	f7fb faf5 	bl	4110 <setup>
	while (1) {
		loop();
    8b26:	f7fd fb19 	bl	615c <loop>
		yield();
    8b2a:	f002 faf5 	bl	b118 <yield>
	while (1) {
    8b2e:	e7fa      	b.n	8b26 <main+0x6>

00008b30 <memcpy>:
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
#else
	push	{r0}
    8b30:	b401      	push	{r0}
#endif
	orr	r3, r1, r0
    8b32:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    8b36:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    8b3a:	d16f      	bne.n	8c1c <memcpy+0xec>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8b3c:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    8b3e:	d341      	bcc.n	8bc4 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8b40:	f851 3b04 	ldr.w	r3, [r1], #4
    8b44:	f840 3b04 	str.w	r3, [r0], #4
    8b48:	f851 3b04 	ldr.w	r3, [r1], #4
    8b4c:	f840 3b04 	str.w	r3, [r0], #4
    8b50:	f851 3b04 	ldr.w	r3, [r1], #4
    8b54:	f840 3b04 	str.w	r3, [r0], #4
    8b58:	f851 3b04 	ldr.w	r3, [r1], #4
    8b5c:	f840 3b04 	str.w	r3, [r0], #4
    8b60:	f851 3b04 	ldr.w	r3, [r1], #4
    8b64:	f840 3b04 	str.w	r3, [r0], #4
    8b68:	f851 3b04 	ldr.w	r3, [r1], #4
    8b6c:	f840 3b04 	str.w	r3, [r0], #4
    8b70:	f851 3b04 	ldr.w	r3, [r1], #4
    8b74:	f840 3b04 	str.w	r3, [r0], #4
    8b78:	f851 3b04 	ldr.w	r3, [r1], #4
    8b7c:	f840 3b04 	str.w	r3, [r0], #4
    8b80:	f851 3b04 	ldr.w	r3, [r1], #4
    8b84:	f840 3b04 	str.w	r3, [r0], #4
    8b88:	f851 3b04 	ldr.w	r3, [r1], #4
    8b8c:	f840 3b04 	str.w	r3, [r0], #4
    8b90:	f851 3b04 	ldr.w	r3, [r1], #4
    8b94:	f840 3b04 	str.w	r3, [r0], #4
    8b98:	f851 3b04 	ldr.w	r3, [r1], #4
    8b9c:	f840 3b04 	str.w	r3, [r0], #4
    8ba0:	f851 3b04 	ldr.w	r3, [r1], #4
    8ba4:	f840 3b04 	str.w	r3, [r0], #4
    8ba8:	f851 3b04 	ldr.w	r3, [r1], #4
    8bac:	f840 3b04 	str.w	r3, [r0], #4
    8bb0:	f851 3b04 	ldr.w	r3, [r1], #4
    8bb4:	f840 3b04 	str.w	r3, [r0], #4
    8bb8:	f851 3b04 	ldr.w	r3, [r1], #4
    8bbc:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8bc0:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    8bc2:	d2bd      	bcs.n	8b40 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    8bc4:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    8bc6:	d311      	bcc.n	8bec <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8bc8:	f851 3b04 	ldr.w	r3, [r1], #4
    8bcc:	f840 3b04 	str.w	r3, [r0], #4
    8bd0:	f851 3b04 	ldr.w	r3, [r1], #4
    8bd4:	f840 3b04 	str.w	r3, [r0], #4
    8bd8:	f851 3b04 	ldr.w	r3, [r1], #4
    8bdc:	f840 3b04 	str.w	r3, [r0], #4
    8be0:	f851 3b04 	ldr.w	r3, [r1], #4
    8be4:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    8be8:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    8bea:	d2ed      	bcs.n	8bc8 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    8bec:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    8bee:	d305      	bcc.n	8bfc <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    8bf0:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    8bf4:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    8bf8:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    8bfa:	d2f9      	bcs.n	8bf0 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    8bfc:	3204      	adds	r2, #4
	beq	.Ldone
    8bfe:	d00a      	beq.n	8c16 <memcpy+0xe6>

	lsls	r2, r2, #31
    8c00:	07d2      	lsls	r2, r2, #31
	itt ne
    8c02:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    8c04:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    8c08:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    8c0c:	d303      	bcc.n	8c16 <memcpy+0xe6>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
	strh	r3, [r0]
#else
	ldrb	r3, [r1]
    8c0e:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    8c10:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    8c12:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    8c14:	7043      	strb	r3, [r0, #1]

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    8c16:	bc01      	pop	{r0}
#endif
	bx	lr
    8c18:	4770      	bx	lr
    8c1a:	bf00      	nop
	beq	.Ldst_aligned
#else
	/* if len < 12, misalignment adjustment has more overhead than
	just byte-to-byte copy.  Also, len must >=8 to guarantee code
	afterward work correctly.  */
	cmp	r2, #12
    8c1c:	2a0c      	cmp	r2, #12
	blo	.Lbyte_copy
    8c1e:	d34a      	bcc.n	8cb6 <memcpy+0x186>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    8c20:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    8c24:	d011      	beq.n	8c4a <memcpy+0x11a>

	rsb	r3, #4
    8c26:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    8c2a:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    8c2c:	07db      	lsls	r3, r3, #31
	itt ne
    8c2e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    8c30:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    8c34:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    8c38:	d307      	bcc.n	8c4a <memcpy+0x11a>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
	strh    r3, [r0], #2
	b	.Ldst_aligned
#else
	ldrb    r3, [r1], #1
    8c3a:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    8c3e:	f800 3b01 	strb.w	r3, [r0], #1
	ldrb    r3, [r1], #1
    8c42:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    8c46:	f800 3b01 	strb.w	r3, [r0], #1
	/* Now that dst is aligned */
.Ldst_aligned:
	/* if r1 is aligned now, it means r0/r1 has the same misalignment,
	and they are both aligned now.  Go aligned copy.  */
	ands	r3, r1, #3
    8c4a:	f011 0303 	ands.w	r3, r1, #3
	beq	.Lbig_block
    8c4e:	f43f af75 	beq.w	8b3c <memcpy+0xc>

	/* dst is aligned, but src isn't.  Misaligned copy.  */

	push	{r4, r5}
    8c52:	b430      	push	{r4, r5}
	subs	r2, #4
    8c54:	3a04      	subs	r2, #4

	/* Backward r1 by misaligned bytes, to make r1 aligned.
	Since we need to restore r1 to unaligned address after the loop,
	we need keep the offset bytes to ip and sub it from r1 afterward.  */
	subs	r1, r3
    8c56:	1ac9      	subs	r1, r1, r3
	rsb	ip, r3, #4
    8c58:	f1c3 0c04 	rsb	ip, r3, #4

	/* Pre-load on word */
	ldr	r4, [r1], #4
    8c5c:	f851 4b04 	ldr.w	r4, [r1], #4

	cmp	r3, #2
    8c60:	2b02      	cmp	r3, #2
	beq	.Lmisaligned_copy_2_2
    8c62:	d019      	beq.n	8c98 <memcpy+0x168>
	cmp	r3, #3
    8c64:	2b03      	cmp	r3, #3
	beq	.Lmisaligned_copy_3_1
    8c66:	d00b      	beq.n	8c80 <memcpy+0x150>
	subs	r2, #4
	bhs	1b
	.endm

.Lmisaligned_copy_1_3:
	mis_src_copy shift=8
    8c68:	0a24      	lsrs	r4, r4, #8
    8c6a:	f851 3b04 	ldr.w	r3, [r1], #4
    8c6e:	061d      	lsls	r5, r3, #24
    8c70:	ea44 0405 	orr.w	r4, r4, r5
    8c74:	f840 4b04 	str.w	r4, [r0], #4
    8c78:	461c      	mov	r4, r3
    8c7a:	3a04      	subs	r2, #4
    8c7c:	d2f4      	bcs.n	8c68 <memcpy+0x138>
	b	.Lsrc_misaligned_tail
    8c7e:	e016      	b.n	8cae <memcpy+0x17e>

.Lmisaligned_copy_3_1:
	mis_src_copy shift=24
    8c80:	0e24      	lsrs	r4, r4, #24
    8c82:	f851 3b04 	ldr.w	r3, [r1], #4
    8c86:	021d      	lsls	r5, r3, #8
    8c88:	ea44 0405 	orr.w	r4, r4, r5
    8c8c:	f840 4b04 	str.w	r4, [r0], #4
    8c90:	461c      	mov	r4, r3
    8c92:	3a04      	subs	r2, #4
    8c94:	d2f4      	bcs.n	8c80 <memcpy+0x150>
	b	.Lsrc_misaligned_tail
    8c96:	e00a      	b.n	8cae <memcpy+0x17e>

.Lmisaligned_copy_2_2:
	/* For 2_2 misalignment, ldr is still faster than 2 x ldrh.  */
	mis_src_copy shift=16
    8c98:	0c24      	lsrs	r4, r4, #16
    8c9a:	f851 3b04 	ldr.w	r3, [r1], #4
    8c9e:	041d      	lsls	r5, r3, #16
    8ca0:	ea44 0405 	orr.w	r4, r4, r5
    8ca4:	f840 4b04 	str.w	r4, [r0], #4
    8ca8:	461c      	mov	r4, r3
    8caa:	3a04      	subs	r2, #4
    8cac:	d2f4      	bcs.n	8c98 <memcpy+0x168>

.Lsrc_misaligned_tail:
	adds	r2, #4
    8cae:	3204      	adds	r2, #4
	subs	r1, ip
    8cb0:	ebb1 010c 	subs.w	r1, r1, ip
	pop	{r4, r5}
    8cb4:	bc30      	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    8cb6:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    8cb8:	d3a0      	bcc.n	8bfc <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    8cba:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    8cbc:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    8cc0:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    8cc4:	d2f9      	bcs.n	8cba <memcpy+0x18a>

	ldrb	r3, [r1]
    8cc6:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    8cc8:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    8cca:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    8ccc:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    8cce:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    8cd0:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    8cd2:	bc01      	pop	{r0}
#endif
	bx	lr
    8cd4:	4770      	bx	lr
    8cd6:	bf00      	nop

00008cd8 <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    8cd8:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    8cda:	4c0f      	ldr	r4, [pc, #60]	; (8d18 <fault_isr+0x40>)
    8cdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8cde:	0358      	lsls	r0, r3, #13
    8ce0:	d40d      	bmi.n	8cfe <fault_isr+0x26>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    8ce2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8ce4:	0559      	lsls	r1, r3, #21
    8ce6:	d40f      	bmi.n	8d08 <fault_isr+0x30>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    8ce8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8cea:	051a      	lsls	r2, r3, #20
    8cec:	d411      	bmi.n	8d12 <fault_isr+0x3a>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    8cee:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8cf0:	04db      	lsls	r3, r3, #19
    8cf2:	d5f3      	bpl.n	8cdc <fault_isr+0x4>
    8cf4:	f001 fac2 	bl	a27c <uart2_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    8cf8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8cfa:	0358      	lsls	r0, r3, #13
    8cfc:	d5f1      	bpl.n	8ce2 <fault_isr+0xa>
    8cfe:	f001 fc3d 	bl	a57c <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    8d02:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8d04:	0559      	lsls	r1, r3, #21
    8d06:	d5ef      	bpl.n	8ce8 <fault_isr+0x10>
    8d08:	f000 f808 	bl	8d1c <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    8d0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8d0e:	051a      	lsls	r2, r3, #20
    8d10:	d5ed      	bpl.n	8cee <fault_isr+0x16>
    8d12:	f000 ff1f 	bl	9b54 <uart1_status_isr>
    8d16:	e7ea      	b.n	8cee <fault_isr+0x16>
    8d18:	40048000 	.word	0x40048000

00008d1c <unused_isr>:
	}
}

void unused_isr(void)
{
    8d1c:	b508      	push	{r3, lr}
	fault_isr();
    8d1e:	f7ff ffdb 	bl	8cd8 <fault_isr>
    8d22:	bf00      	nop

00008d24 <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    8d24:	4b01      	ldr	r3, [pc, #4]	; (8d2c <startup_early_hook+0x8>)
    8d26:	2210      	movs	r2, #16
    8d28:	801a      	strh	r2, [r3, #0]
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
    8d2a:	4770      	bx	lr
    8d2c:	40052000 	.word	0x40052000

00008d30 <startup_late_hook>:
static void startup_default_late_hook(void) {}
    8d30:	4770      	bx	lr
    8d32:	bf00      	nop

00008d34 <_sbrk>:
__attribute__((weak))
void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    8d34:	4a09      	ldr	r2, [pc, #36]	; (8d5c <_sbrk+0x28>)
{
    8d36:	b508      	push	{r3, lr}
    8d38:	4603      	mov	r3, r0
	prev = __brkval;
    8d3a:	6810      	ldr	r0, [r2, #0]
	if (incr != 0) {
    8d3c:	b133      	cbz	r3, 8d4c <_sbrk+0x18>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    8d3e:	4669      	mov	r1, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    8d40:	4403      	add	r3, r0
    8d42:	f5a1 5180 	sub.w	r1, r1, #4096	; 0x1000
    8d46:	428b      	cmp	r3, r1
    8d48:	d201      	bcs.n	8d4e <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    8d4a:	6013      	str	r3, [r2, #0]
	}
	return prev;
}
    8d4c:	bd08      	pop	{r3, pc}
			errno = ENOMEM;
    8d4e:	f004 f92f 	bl	cfb0 <__errno>
    8d52:	230c      	movs	r3, #12
    8d54:	6003      	str	r3, [r0, #0]
			return (void *)-1;
    8d56:	f04f 30ff 	mov.w	r0, #4294967295
}
    8d5a:	bd08      	pop	{r3, pc}
    8d5c:	1fff87d8 	.word	0x1fff87d8

00008d60 <_read>:

__attribute__((weak)) 
int _read(int file, char *ptr, int len)
{
	return 0;
}
    8d60:	2000      	movs	r0, #0
    8d62:	4770      	bx	lr

00008d64 <_close>:

__attribute__((weak)) 
int _close(int fd)
{
	return -1;
}
    8d64:	f04f 30ff 	mov.w	r0, #4294967295
    8d68:	4770      	bx	lr
    8d6a:	bf00      	nop

00008d6c <_fstat>:
#include <sys/stat.h>

__attribute__((weak)) 
int _fstat(int fd, struct stat *st)
{
	st->st_mode = S_IFCHR;
    8d6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    8d70:	604b      	str	r3, [r1, #4]
	return 0;
}
    8d72:	2000      	movs	r0, #0
    8d74:	4770      	bx	lr
    8d76:	bf00      	nop

00008d78 <_isatty>:

__attribute__((weak)) 
int _isatty(int fd)
{
	return 1;
}
    8d78:	2001      	movs	r0, #1
    8d7a:	4770      	bx	lr

00008d7c <_lseek>:

__attribute__((weak)) 
int _lseek(int fd, long long offset, int whence)
{
	return -1;
}
    8d7c:	f04f 30ff 	mov.w	r0, #4294967295
    8d80:	4770      	bx	lr
    8d82:	bf00      	nop

00008d84 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) ;
    8d84:	e7fe      	b.n	8d84 <abort>
    8d86:	Address 0x00008d86 is out of bounds.


00008d88 <nvic_execution_priority>:
	uint32_t priority=256;
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    8d88:	f3ef 8313 	mrs	r3, FAULTMASK
	if (faultmask) return -1;
    8d8c:	b9cb      	cbnz	r3, 8dc2 <nvic_execution_priority+0x3a>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    8d8e:	f3ef 8010 	mrs	r0, PRIMASK
	if (primask) return 0;
    8d92:	b9a0      	cbnz	r0, 8dbe <nvic_execution_priority+0x36>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    8d94:	f3ef 8305 	mrs	r3, IPSR
	if (ipsr) {
    8d98:	b943      	cbnz	r3, 8dac <nvic_execution_priority+0x24>
	uint32_t priority=256;
    8d9a:	f44f 7080 	mov.w	r0, #256	; 0x100
		if (ipsr < 16) priority = 0; // could be non-zero
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    8d9e:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    8da2:	b15b      	cbz	r3, 8dbc <nvic_execution_priority+0x34>
    8da4:	4298      	cmp	r0, r3
    8da6:	bf28      	it	cs
    8da8:	4618      	movcs	r0, r3
	return priority;
    8daa:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    8dac:	2b0f      	cmp	r3, #15
    8dae:	d9f6      	bls.n	8d9e <nvic_execution_priority+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    8db0:	4a05      	ldr	r2, [pc, #20]	; (8dc8 <nvic_execution_priority+0x40>)
    8db2:	5cd0      	ldrb	r0, [r2, r3]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    8db4:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    8db8:	2b00      	cmp	r3, #0
    8dba:	d1f3      	bne.n	8da4 <nvic_execution_priority+0x1c>
}
    8dbc:	4770      	bx	lr
	if (primask) return 0;
    8dbe:	4618      	mov	r0, r3
}
    8dc0:	4770      	bx	lr
	if (faultmask) return -1;
    8dc2:	f04f 30ff 	mov.w	r0, #4294967295
    8dc6:	4770      	bx	lr
    8dc8:	e000e3f0 	.word	0xe000e3f0

00008dcc <operator new(unsigned int)>:

#include "new.h"

void * operator new(size_t size)
{
  return malloc(size);
    8dcc:	f003 b98a 	b.w	c0e4 <malloc>

00008dd0 <operator new[](unsigned int)>:
    8dd0:	f003 b988 	b.w	c0e4 <malloc>

00008dd4 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    8dd4:	f101 3cff 	add.w	ip, r1, #4294967295
{
    8dd8:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    8dda:	4665      	mov	r5, ip
	int i=0, j;
    8ddc:	2400      	movs	r4, #0
    8dde:	e001      	b.n	8de4 <ultoa+0x10>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
    8de0:	4670      	mov	r0, lr
		if (val == 0) break;
		i++;
    8de2:	3401      	adds	r4, #1
		digit = val % radix;
    8de4:	fbb0 fef2 	udiv	lr, r0, r2
    8de8:	fb02 031e 	mls	r3, r2, lr, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    8dec:	2b09      	cmp	r3, #9
    8dee:	f103 0630 	add.w	r6, r3, #48	; 0x30
    8df2:	bf8a      	itet	hi
    8df4:	3337      	addhi	r3, #55	; 0x37
    8df6:	b2f3      	uxtbls	r3, r6
    8df8:	b2db      	uxtbhi	r3, r3
		if (val == 0) break;
    8dfa:	4290      	cmp	r0, r2
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    8dfc:	f805 3f01 	strb.w	r3, [r5, #1]!
		if (val == 0) break;
    8e00:	d2ee      	bcs.n	8de0 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    8e02:	1c63      	adds	r3, r4, #1
    8e04:	2200      	movs	r2, #0
    8e06:	54ca      	strb	r2, [r1, r3]
    8e08:	18c8      	adds	r0, r1, r3
	for (j=0; j < i; j++, i--) {
    8e0a:	b17c      	cbz	r4, 8e2c <ultoa+0x58>
		t = buf[j];
    8e0c:	4662      	mov	r2, ip
    8e0e:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    8e12:	f810 ed01 	ldrb.w	lr, [r0, #-1]!
    8e16:	f88c e000 	strb.w	lr, [ip]
	for (j=0; j < i; j++, i--) {
    8e1a:	eba1 030c 	sub.w	r3, r1, ip
    8e1e:	3202      	adds	r2, #2
    8e20:	3b01      	subs	r3, #1
    8e22:	1a52      	subs	r2, r2, r1
    8e24:	4423      	add	r3, r4
    8e26:	429a      	cmp	r2, r3
		buf[i] = t;
    8e28:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    8e2a:	dbef      	blt.n	8e0c <ultoa+0x38>
	}
	return buf;
}
    8e2c:	4608      	mov	r0, r1
    8e2e:	bd70      	pop	{r4, r5, r6, pc}

00008e30 <digitalWrite.part.0>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    8e30:	b410      	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    8e32:	4b0f      	ldr	r3, [pc, #60]	; (8e70 <digitalWrite.part.0+0x40>)
    8e34:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    8e38:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    8e3c:	b12c      	cbz	r4, 8e4a <digitalWrite.part.0+0x1a>
		if (val) {
			*portSetRegister(pin) = 1;
    8e3e:	2301      	movs	r3, #1
		if (val) {
    8e40:	b191      	cbz	r1, 8e68 <digitalWrite.part.0+0x38>
			*portSetRegister(pin) = 1;
    8e42:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    8e46:	bc10      	pop	{r4}
    8e48:	4770      	bx	lr
		volatile uint32_t *config = portConfigRegister(pin);
    8e4a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    8e4e:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    8e50:	681a      	ldr	r2, [r3, #0]
		if (val) {
    8e52:	b921      	cbnz	r1, 8e5e <digitalWrite.part.0+0x2e>
			*config &= ~(PORT_PCR_PE);
    8e54:	f022 0202 	bic.w	r2, r2, #2
}
    8e58:	bc10      	pop	{r4}
			*config &= ~(PORT_PCR_PE);
    8e5a:	601a      	str	r2, [r3, #0]
}
    8e5c:	4770      	bx	lr
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    8e5e:	f042 0203 	orr.w	r2, r2, #3
}
    8e62:	bc10      	pop	{r4}
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    8e64:	601a      	str	r2, [r3, #0]
}
    8e66:	4770      	bx	lr
			*portClearRegister(pin) = 1;
    8e68:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
}
    8e6c:	bc10      	pop	{r4}
    8e6e:	4770      	bx	lr
    8e70:	00014048 	.word	0x00014048

00008e74 <rtc_set>:
	RTC_SR = 0;
    8e74:	4b03      	ldr	r3, [pc, #12]	; (8e84 <rtc_set+0x10>)
    8e76:	2200      	movs	r2, #0
	RTC_SR = RTC_SR_TCE;
    8e78:	2110      	movs	r1, #16
	RTC_SR = 0;
    8e7a:	615a      	str	r2, [r3, #20]
	RTC_TPR = 0;
    8e7c:	605a      	str	r2, [r3, #4]
	RTC_TSR = t;
    8e7e:	6018      	str	r0, [r3, #0]
	RTC_SR = RTC_SR_TCE;
    8e80:	6159      	str	r1, [r3, #20]
}
    8e82:	4770      	bx	lr
    8e84:	4003d000 	.word	0x4003d000

00008e88 <startup_middle_hook>:
static void startup_default_middle_hook(void) {}
    8e88:	4770      	bx	lr
    8e8a:	bf00      	nop

00008e8c <_init_Teensyduino_internal_>:
{
    8e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    8e8e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    8e92:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    8e96:	f04f 7c80 	mov.w	ip, #16777216	; 0x1000000
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    8e9a:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    8e9e:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    8ea2:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
    8ea6:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	FTM0_CNT = 0;
    8eaa:	4a1d      	ldr	r2, [pc, #116]	; (8f20 <_init_Teensyduino_internal_+0x94>)
	FTM1_CNT = 0;
    8eac:	481d      	ldr	r0, [pc, #116]	; (8f24 <_init_Teensyduino_internal_+0x98>)
	FTM2_CNT = 0;
    8eae:	491e      	ldr	r1, [pc, #120]	; (8f28 <_init_Teensyduino_internal_+0x9c>)
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    8eb0:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
    8eb4:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    8eb8:	2328      	movs	r3, #40	; 0x28
	FTM0_CNT = 0;
    8eba:	2700      	movs	r7, #0
	FTM0_MOD = DEFAULT_FTM_MOD;
    8ebc:	f64b 76ff 	movw	r6, #49151	; 0xbfff
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    8ec0:	2509      	movs	r5, #9
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    8ec2:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    8ec6:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
{
    8eca:	b083      	sub	sp, #12
	FTM0_CNT = 0;
    8ecc:	6057      	str	r7, [r2, #4]
	FTM0_MOD = DEFAULT_FTM_MOD;
    8ece:	6096      	str	r6, [r2, #8]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    8ed0:	60d3      	str	r3, [r2, #12]
	FTM0_C1SC = 0x28;
    8ed2:	6153      	str	r3, [r2, #20]
	FTM0_C2SC = 0x28;
    8ed4:	61d3      	str	r3, [r2, #28]
	FTM0_C3SC = 0x28;
    8ed6:	6253      	str	r3, [r2, #36]	; 0x24
	FTM0_C4SC = 0x28;
    8ed8:	62d3      	str	r3, [r2, #44]	; 0x2c
	FTM0_C5SC = 0x28;
    8eda:	6353      	str	r3, [r2, #52]	; 0x34
	FTM0_C6SC = 0x28;
    8edc:	63d3      	str	r3, [r2, #60]	; 0x3c
	FTM0_C7SC = 0x28;
    8ede:	6453      	str	r3, [r2, #68]	; 0x44
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    8ee0:	6015      	str	r5, [r2, #0]
	FTM1_CNT = 0;
    8ee2:	6047      	str	r7, [r0, #4]
	FTM1_MOD = DEFAULT_FTM_MOD;
    8ee4:	6086      	str	r6, [r0, #8]
	FTM1_C0SC = 0x28;
    8ee6:	60c3      	str	r3, [r0, #12]
	FTM1_C1SC = 0x28;
    8ee8:	6143      	str	r3, [r0, #20]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    8eea:	6005      	str	r5, [r0, #0]
	FTM2_CNT = 0;
    8eec:	604f      	str	r7, [r1, #4]
	FTM2_MOD = DEFAULT_FTM_MOD;
    8eee:	608e      	str	r6, [r1, #8]
	FTM2_C0SC = 0x28;
    8ef0:	60cb      	str	r3, [r1, #12]
	FTM2_C1SC = 0x28;
    8ef2:	614b      	str	r3, [r1, #20]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    8ef4:	600d      	str	r5, [r1, #0]
	analog_init();
    8ef6:	f7ff fcc3 	bl	8880 <analog_init>
	startup_middle_hook();
    8efa:	f7ff ffc5 	bl	8e88 <startup_middle_hook>
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
    8efe:	4c0b      	ldr	r4, [pc, #44]	; (8f2c <_init_Teensyduino_internal_+0xa0>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8f00:	6823      	ldr	r3, [r4, #0]
    8f02:	9300      	str	r3, [sp, #0]
	return ret;
    8f04:	9b00      	ldr	r3, [sp, #0]
    8f06:	2b13      	cmp	r3, #19
    8f08:	d9fa      	bls.n	8f00 <_init_Teensyduino_internal_+0x74>
	usb_init();
    8f0a:	f001 fef1 	bl	acf0 <usb_init>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    8f0e:	6823      	ldr	r3, [r4, #0]
    8f10:	9301      	str	r3, [sp, #4]
	return ret;
    8f12:	9b01      	ldr	r3, [sp, #4]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
    8f14:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    8f18:	d3f9      	bcc.n	8f0e <_init_Teensyduino_internal_+0x82>
}
    8f1a:	b003      	add	sp, #12
    8f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8f1e:	bf00      	nop
    8f20:	40038000 	.word	0x40038000
    8f24:	40039000 	.word	0x40039000
    8f28:	400b8000 	.word	0x400b8000
    8f2c:	1fffb4d8 	.word	0x1fffb4d8

00008f30 <analogWrite>:
	if (pin == A14) {
    8f30:	2828      	cmp	r0, #40	; 0x28
		uint8_t res = analog_write_res;
    8f32:	4b7f      	ldr	r3, [pc, #508]	; (9130 <analogWrite+0x200>)
	if (pin == A14) {
    8f34:	d036      	beq.n	8fa4 <analogWrite+0x74>
	if (val <= 0) {
    8f36:	2900      	cmp	r1, #0
	max = 1 << analog_write_res;
    8f38:	781b      	ldrb	r3, [r3, #0]
	if (val <= 0) {
    8f3a:	dd3f      	ble.n	8fbc <analogWrite+0x8c>
	max = 1 << analog_write_res;
    8f3c:	2201      	movs	r2, #1
    8f3e:	fa02 fc03 	lsl.w	ip, r2, r3
	} else if (val >= max) {
    8f42:	4561      	cmp	r1, ip
{
    8f44:	b510      	push	{r4, lr}
	} else if (val >= max) {
    8f46:	d254      	bcs.n	8ff2 <analogWrite+0xc2>
	if (pin == FTM1_CH0_PIN || pin == FTM1_CH1_PIN) {
    8f48:	1ec2      	subs	r2, r0, #3
    8f4a:	2a01      	cmp	r2, #1
    8f4c:	d970      	bls.n	9030 <analogWrite+0x100>
	} else if (pin == FTM2_CH0_PIN || pin == FTM2_CH1_PIN) {
    8f4e:	2820      	cmp	r0, #32
    8f50:	d067      	beq.n	9022 <analogWrite+0xf2>
    8f52:	2819      	cmp	r0, #25
    8f54:	d065      	beq.n	9022 <analogWrite+0xf2>
		cval = ((uint32_t)val * (uint32_t)(FTM0_MOD + 1)) >> analog_write_res;
    8f56:	4a77      	ldr	r2, [pc, #476]	; (9134 <analogWrite+0x204>)
    8f58:	6892      	ldr	r2, [r2, #8]
    8f5a:	fb02 1201 	mla	r2, r2, r1, r1
    8f5e:	fa22 f303 	lsr.w	r3, r2, r3
	switch (pin) {
    8f62:	1f42      	subs	r2, r0, #5
    8f64:	2a1b      	cmp	r2, #27
    8f66:	d87d      	bhi.n	9064 <analogWrite+0x134>
    8f68:	e8df f012 	tbh	[pc, r2, lsl #1]
    8f6c:	00bf00c6 	.word	0x00bf00c6
    8f70:	007c007c 	.word	0x007c007c
    8f74:	00b100b8 	.word	0x00b100b8
    8f78:	007c007c 	.word	0x007c007c
    8f7c:	007c007c 	.word	0x007c007c
    8f80:	007c007c 	.word	0x007c007c
    8f84:	007c007c 	.word	0x007c007c
    8f88:	00aa007c 	.word	0x00aa007c
    8f8c:	009c00a3 	.word	0x009c00a3
    8f90:	007c0095 	.word	0x007c0095
    8f94:	007c00cd 	.word	0x007c00cd
    8f98:	007c007c 	.word	0x007c007c
    8f9c:	007c007c 	.word	0x007c007c
    8fa0:	00d4007c 	.word	0x00d4007c
		uint8_t res = analog_write_res;
    8fa4:	7818      	ldrb	r0, [r3, #0]
		if (res < 12) {
    8fa6:	280b      	cmp	r0, #11
			val <<= 12 - res;
    8fa8:	bf95      	itete	ls
    8faa:	f1c0 000c 	rsbls	r0, r0, #12
			val >>= res - 12;
    8fae:	380c      	subhi	r0, #12
			val <<= 12 - res;
    8fb0:	fa01 f000 	lslls.w	r0, r1, r0
			val >>= res - 12;
    8fb4:	fa41 f000 	asrhi.w	r0, r1, r0
		analogWriteDAC0(val);
    8fb8:	f7ff bcc6 	b.w	8948 <analogWriteDAC0>
	if (pin >= CORE_NUM_DIGITAL) return;
    8fbc:	2821      	cmp	r0, #33	; 0x21
    8fbe:	d817      	bhi.n	8ff0 <analogWrite+0xc0>
	if (*portModeRegister(pin)) {
    8fc0:	4b5d      	ldr	r3, [pc, #372]	; (9138 <analogWrite+0x208>)
    8fc2:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    8fc6:	f892 1280 	ldrb.w	r1, [r2, #640]	; 0x280
		volatile uint32_t *config = portConfigRegister(pin);
    8fca:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	if (*portModeRegister(pin)) {
    8fce:	2900      	cmp	r1, #0
    8fd0:	d03c      	beq.n	904c <analogWrite+0x11c>
			*portClearRegister(pin) = 1;
    8fd2:	2101      	movs	r1, #1
		volatile uint32_t *config = portConfigRegister(pin);
    8fd4:	685b      	ldr	r3, [r3, #4]
			*portClearRegister(pin) = 1;
    8fd6:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    8fda:	2001      	movs	r0, #1
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    8fdc:	f44f 71a2 	mov.w	r1, #324	; 0x144
		*portModeRegister(pin) = 1;
    8fe0:	f882 0280 	strb.w	r0, [r2, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    8fe4:	6019      	str	r1, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    8fe6:	681a      	ldr	r2, [r3, #0]
    8fe8:	f022 0220 	bic.w	r2, r2, #32
    8fec:	601a      	str	r2, [r3, #0]
    8fee:	4770      	bx	lr
    8ff0:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
    8ff2:	2821      	cmp	r0, #33	; 0x21
    8ff4:	d814      	bhi.n	9020 <analogWrite+0xf0>
	if (*portModeRegister(pin)) {
    8ff6:	4b50      	ldr	r3, [pc, #320]	; (9138 <analogWrite+0x208>)
    8ff8:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
    8ffc:	f891 4280 	ldrb.w	r4, [r1, #640]	; 0x280
		volatile uint32_t *config = portConfigRegister(pin);
    9000:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	if (*portModeRegister(pin)) {
    9004:	b344      	cbz	r4, 9058 <analogWrite+0x128>
		volatile uint32_t *config = portConfigRegister(pin);
    9006:	685b      	ldr	r3, [r3, #4]
			*portSetRegister(pin) = 1;
    9008:	f881 2080 	strb.w	r2, [r1, #128]	; 0x80
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    900c:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    9010:	2001      	movs	r0, #1
    9012:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9016:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    9018:	681a      	ldr	r2, [r3, #0]
    901a:	f022 0220 	bic.w	r2, r2, #32
    901e:	601a      	str	r2, [r3, #0]
}
    9020:	bd10      	pop	{r4, pc}
		cval = ((uint32_t)val * (uint32_t)(FTM2_MOD + 1)) >> analog_write_res;
    9022:	4a46      	ldr	r2, [pc, #280]	; (913c <analogWrite+0x20c>)
    9024:	6892      	ldr	r2, [r2, #8]
    9026:	fb02 1201 	mla	r2, r2, r1, r1
    902a:	fa22 f303 	lsr.w	r3, r2, r3
    902e:	e798      	b.n	8f62 <analogWrite+0x32>
		cval = ((uint32_t)val * (uint32_t)(FTM1_MOD + 1)) >> analog_write_res;
    9030:	4c43      	ldr	r4, [pc, #268]	; (9140 <analogWrite+0x210>)
    9032:	68a2      	ldr	r2, [r4, #8]
	switch (pin) {
    9034:	2804      	cmp	r0, #4
		cval = ((uint32_t)val * (uint32_t)(FTM1_MOD + 1)) >> analog_write_res;
    9036:	fb02 1201 	mla	r2, r2, r1, r1
    903a:	fa22 f203 	lsr.w	r2, r2, r3
	switch (pin) {
    903e:	d170      	bne.n	9122 <analogWrite+0x1f2>
		FTM_PINCFG(FTM1_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    9040:	4b40      	ldr	r3, [pc, #256]	; (9144 <analogWrite+0x214>)
		FTM1_C1V = cval;
    9042:	61a2      	str	r2, [r4, #24]
		FTM_PINCFG(FTM1_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    9044:	f44f 7151 	mov.w	r1, #836	; 0x344
    9048:	6359      	str	r1, [r3, #52]	; 0x34
}
    904a:	bd10      	pop	{r4, pc}
		volatile uint32_t *config = portConfigRegister(pin);
    904c:	685b      	ldr	r3, [r3, #4]
			*config &= ~(PORT_PCR_PE);
    904e:	6819      	ldr	r1, [r3, #0]
    9050:	f021 0102 	bic.w	r1, r1, #2
    9054:	6019      	str	r1, [r3, #0]
    9056:	e7c0      	b.n	8fda <analogWrite+0xaa>
		volatile uint32_t *config = portConfigRegister(pin);
    9058:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    905a:	681a      	ldr	r2, [r3, #0]
    905c:	f042 0203 	orr.w	r2, r2, #3
    9060:	601a      	str	r2, [r3, #0]
    9062:	e7d3      	b.n	900c <analogWrite+0xdc>
	if (pin >= CORE_NUM_DIGITAL) return;
    9064:	2821      	cmp	r0, #33	; 0x21
    9066:	d8db      	bhi.n	9020 <analogWrite+0xf0>
    9068:	297f      	cmp	r1, #127	; 0x7f
    906a:	bfd4      	ite	le
    906c:	2100      	movle	r1, #0
    906e:	2101      	movgt	r1, #1
    9070:	f7ff fede 	bl	8e30 <digitalWrite.part.0>
	config = portConfigRegister(pin);
    9074:	4b30      	ldr	r3, [pc, #192]	; (9138 <analogWrite+0x208>)
    9076:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
		*portModeRegister(pin) = 1;
    907a:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
	config = portConfigRegister(pin);
    907e:	6853      	ldr	r3, [r2, #4]
		*portModeRegister(pin) = 1;
    9080:	2401      	movs	r4, #1
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9082:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    9086:	f881 4280 	strb.w	r4, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    908a:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    908c:	681a      	ldr	r2, [r3, #0]
    908e:	f022 0220 	bic.w	r2, r2, #32
    9092:	601a      	str	r2, [r3, #0]
}
    9094:	bd10      	pop	{r4, pc}
		FTM0_C1V = cval;
    9096:	4827      	ldr	r0, [pc, #156]	; (9134 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    9098:	4a2b      	ldr	r2, [pc, #172]	; (9148 <analogWrite+0x218>)
		FTM0_C1V = cval;
    909a:	6183      	str	r3, [r0, #24]
		FTM_PINCFG(FTM0_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    909c:	f240 4144 	movw	r1, #1092	; 0x444
    90a0:	6091      	str	r1, [r2, #8]
}
    90a2:	bd10      	pop	{r4, pc}
		FTM0_C0V = cval;
    90a4:	4823      	ldr	r0, [pc, #140]	; (9134 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    90a6:	4a28      	ldr	r2, [pc, #160]	; (9148 <analogWrite+0x218>)
		FTM0_C0V = cval;
    90a8:	6103      	str	r3, [r0, #16]
		FTM_PINCFG(FTM0_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    90aa:	f240 4144 	movw	r1, #1092	; 0x444
    90ae:	6051      	str	r1, [r2, #4]
}
    90b0:	bd10      	pop	{r4, pc}
		FTM0_C6V = cval;
    90b2:	4820      	ldr	r0, [pc, #128]	; (9134 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH6_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    90b4:	4a25      	ldr	r2, [pc, #148]	; (914c <analogWrite+0x21c>)
		FTM0_C6V = cval;
    90b6:	6403      	str	r3, [r0, #64]	; 0x40
		FTM_PINCFG(FTM0_CH6_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    90b8:	f240 4144 	movw	r1, #1092	; 0x444
    90bc:	6191      	str	r1, [r2, #24]
}
    90be:	bd10      	pop	{r4, pc}
		FTM0_C5V = cval;
    90c0:	481c      	ldr	r0, [pc, #112]	; (9134 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH5_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    90c2:	4a22      	ldr	r2, [pc, #136]	; (914c <analogWrite+0x21c>)
		FTM0_C5V = cval;
    90c4:	6383      	str	r3, [r0, #56]	; 0x38
		FTM_PINCFG(FTM0_CH5_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    90c6:	f240 4144 	movw	r1, #1092	; 0x444
    90ca:	6151      	str	r1, [r2, #20]
}
    90cc:	bd10      	pop	{r4, pc}
		FTM0_C3V = cval;
    90ce:	4819      	ldr	r0, [pc, #100]	; (9134 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    90d0:	4a1d      	ldr	r2, [pc, #116]	; (9148 <analogWrite+0x218>)
		FTM0_C3V = cval;
    90d2:	6283      	str	r3, [r0, #40]	; 0x28
		FTM_PINCFG(FTM0_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    90d4:	f240 4144 	movw	r1, #1092	; 0x444
    90d8:	6111      	str	r1, [r2, #16]
}
    90da:	bd10      	pop	{r4, pc}
		FTM0_C2V = cval;
    90dc:	4815      	ldr	r0, [pc, #84]	; (9134 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    90de:	4a1a      	ldr	r2, [pc, #104]	; (9148 <analogWrite+0x218>)
		FTM0_C2V = cval;
    90e0:	6203      	str	r3, [r0, #32]
		FTM_PINCFG(FTM0_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    90e2:	f240 4144 	movw	r1, #1092	; 0x444
    90e6:	60d1      	str	r1, [r2, #12]
}
    90e8:	bd10      	pop	{r4, pc}
		FTM0_C4V = cval;
    90ea:	4812      	ldr	r0, [pc, #72]	; (9134 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH4_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    90ec:	4a17      	ldr	r2, [pc, #92]	; (914c <analogWrite+0x21c>)
		FTM0_C4V = cval;
    90ee:	6303      	str	r3, [r0, #48]	; 0x30
		FTM_PINCFG(FTM0_CH4_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    90f0:	f240 4144 	movw	r1, #1092	; 0x444
    90f4:	6111      	str	r1, [r2, #16]
}
    90f6:	bd10      	pop	{r4, pc}
		FTM0_C7V = cval;
    90f8:	480e      	ldr	r0, [pc, #56]	; (9134 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH7_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    90fa:	4a14      	ldr	r2, [pc, #80]	; (914c <analogWrite+0x21c>)
		FTM0_C7V = cval;
    90fc:	6483      	str	r3, [r0, #72]	; 0x48
		FTM_PINCFG(FTM0_CH7_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    90fe:	f240 4144 	movw	r1, #1092	; 0x444
    9102:	61d1      	str	r1, [r2, #28]
}
    9104:	bd10      	pop	{r4, pc}
		FTM2_C1V = cval;
    9106:	480d      	ldr	r0, [pc, #52]	; (913c <analogWrite+0x20c>)
		FTM_PINCFG(FTM2_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    9108:	4a11      	ldr	r2, [pc, #68]	; (9150 <analogWrite+0x220>)
		FTM2_C1V = cval;
    910a:	6183      	str	r3, [r0, #24]
		FTM_PINCFG(FTM2_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    910c:	f44f 7151 	mov.w	r1, #836	; 0x344
    9110:	64d1      	str	r1, [r2, #76]	; 0x4c
}
    9112:	bd10      	pop	{r4, pc}
		FTM2_C0V = cval;
    9114:	4809      	ldr	r0, [pc, #36]	; (913c <analogWrite+0x20c>)
		FTM_PINCFG(FTM2_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    9116:	4a0e      	ldr	r2, [pc, #56]	; (9150 <analogWrite+0x220>)
		FTM2_C0V = cval;
    9118:	6103      	str	r3, [r0, #16]
		FTM_PINCFG(FTM2_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    911a:	f44f 7151 	mov.w	r1, #836	; 0x344
    911e:	6491      	str	r1, [r2, #72]	; 0x48
}
    9120:	bd10      	pop	{r4, pc}
		FTM_PINCFG(FTM1_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    9122:	4b08      	ldr	r3, [pc, #32]	; (9144 <analogWrite+0x214>)
		FTM1_C0V = cval;
    9124:	6122      	str	r2, [r4, #16]
		FTM_PINCFG(FTM1_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    9126:	f44f 7151 	mov.w	r1, #836	; 0x344
    912a:	6319      	str	r1, [r3, #48]	; 0x30
}
    912c:	bd10      	pop	{r4, pc}
    912e:	bf00      	nop
    9130:	1fff87dc 	.word	0x1fff87dc
    9134:	40038000 	.word	0x40038000
    9138:	00014048 	.word	0x00014048
    913c:	400b8000 	.word	0x400b8000
    9140:	40039000 	.word	0x40039000
    9144:	40049000 	.word	0x40049000
    9148:	4004b000 	.word	0x4004b000
    914c:	4004c000 	.word	0x4004c000
    9150:	4004a000 	.word	0x4004a000

00009154 <analogWriteFrequency>:
{
    9154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9158:	460e      	mov	r6, r1
    915a:	4680      	mov	r8, r0
	if (frequency < (float)(F_TIMER >> 7) / 65536.0f) {
    915c:	492c      	ldr	r1, [pc, #176]	; (9210 <analogWriteFrequency+0xbc>)
    915e:	4630      	mov	r0, r6
    9160:	f002 ff52 	bl	c008 <__aeabi_fcmplt>
		ftmClockSource = 1; 	// Use default F_TIMER clock source
    9164:	4b2b      	ldr	r3, [pc, #172]	; (9214 <analogWriteFrequency+0xc0>)
    9166:	2800      	cmp	r0, #0
    9168:	f647 2712 	movw	r7, #31250	; 0x7a12
    916c:	bf12      	itee	ne
    916e:	f04f 0a02 	movne.w	sl, #2
    9172:	f04f 0a01 	moveq.w	sl, #1
    9176:	461f      	moveq	r7, r3
	for (prescale = 0; prescale < 7; prescale++) {
    9178:	2400      	movs	r4, #0
		minfreq = (float)(ftmClock >> prescale) / 65536.0f;	//Use ftmClock instead of F_TIMER
    917a:	f04f 595e 	mov.w	r9, #931135488	; 0x37800000
    917e:	fa27 f004 	lsr.w	r0, r7, r4
    9182:	f002 fd4b 	bl	bc1c <__aeabi_ui2f>
    9186:	4649      	mov	r1, r9
    9188:	4605      	mov	r5, r0
    918a:	f002 fd9f 	bl	bccc <__aeabi_fmul>
    918e:	4601      	mov	r1, r0
		if (frequency >= minfreq) break;
    9190:	4630      	mov	r0, r6
    9192:	f002 ff4d 	bl	c030 <__aeabi_fcmpge>
    9196:	b930      	cbnz	r0, 91a6 <analogWriteFrequency+0x52>
	for (prescale = 0; prescale < 7; prescale++) {
    9198:	3401      	adds	r4, #1
    919a:	2c07      	cmp	r4, #7
    919c:	d1ef      	bne.n	917e <analogWriteFrequency+0x2a>
	mod = (float)(ftmClock >> prescale) / frequency - 0.5f;	//Use ftmClock instead of F_TIMER
    919e:	09f8      	lsrs	r0, r7, #7
    91a0:	f002 fd3c 	bl	bc1c <__aeabi_ui2f>
    91a4:	4605      	mov	r5, r0
    91a6:	4631      	mov	r1, r6
    91a8:	4628      	mov	r0, r5
    91aa:	f002 fe43 	bl	be34 <__aeabi_fdiv>
    91ae:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    91b2:	f002 fc81 	bl	bab8 <__aeabi_fsub>
    91b6:	f002 ff75 	bl	c0a4 <__aeabi_f2uiz>
    91ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
    91be:	4298      	cmp	r0, r3
    91c0:	bf28      	it	cs
    91c2:	4618      	movcs	r0, r3
	if (pin == FTM1_CH0_PIN || pin == FTM1_CH1_PIN) {
    91c4:	f1a8 0303 	sub.w	r3, r8, #3
    91c8:	2b01      	cmp	r3, #1
    91ca:	d911      	bls.n	91f0 <analogWriteFrequency+0x9c>
	} else if (pin == FTM0_CH0_PIN || pin == FTM0_CH1_PIN
    91cc:	f1a8 0805 	sub.w	r8, r8, #5
    91d0:	fa5f f888 	uxtb.w	r8, r8
    91d4:	f1b8 0f1b 	cmp.w	r8, #27
    91d8:	d808      	bhi.n	91ec <analogWriteFrequency+0x98>
    91da:	4a0f      	ldr	r2, [pc, #60]	; (9218 <analogWriteFrequency+0xc4>)
    91dc:	2301      	movs	r3, #1
    91de:	fa03 f308 	lsl.w	r3, r3, r8
    91e2:	401a      	ands	r2, r3
    91e4:	d110      	bne.n	9208 <analogWriteFrequency+0xb4>
    91e6:	f013 6f01 	tst.w	r3, #135266304	; 0x8100000
    91ea:	d10b      	bne.n	9204 <analogWriteFrequency+0xb0>
}
    91ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		FTM1_SC = 0;
    91f0:	4b0a      	ldr	r3, [pc, #40]	; (921c <analogWriteFrequency+0xc8>)
    91f2:	2200      	movs	r2, #0
		FTM2_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
    91f4:	ea44 04ca 	orr.w	r4, r4, sl, lsl #3
		FTM2_SC = 0;
    91f8:	601a      	str	r2, [r3, #0]
		FTM2_CNT = 0;
    91fa:	605a      	str	r2, [r3, #4]
		FTM2_MOD = mod;
    91fc:	6098      	str	r0, [r3, #8]
		FTM2_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
    91fe:	601c      	str	r4, [r3, #0]
}
    9200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		FTM2_SC = 0;
    9204:	4b06      	ldr	r3, [pc, #24]	; (9220 <analogWriteFrequency+0xcc>)
    9206:	e7f5      	b.n	91f4 <analogWriteFrequency+0xa0>
		FTM0_SC = 0;
    9208:	4b06      	ldr	r3, [pc, #24]	; (9224 <analogWriteFrequency+0xd0>)
    920a:	2200      	movs	r2, #0
    920c:	e7f2      	b.n	91f4 <analogWriteFrequency+0xa0>
    920e:	bf00      	nop
    9210:	40b71b00 	.word	0x40b71b00
    9214:	02dc6c00 	.word	0x02dc6c00
    9218:	00078033 	.word	0x00078033
    921c:	40039000 	.word	0x40039000
    9220:	400b8000 	.word	0x400b8000
    9224:	40038000 	.word	0x40038000

00009228 <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    9228:	2821      	cmp	r0, #33	; 0x21
    922a:	d816      	bhi.n	925a <digitalWrite+0x32>
{
    922c:	b410      	push	{r4}
	if (*portModeRegister(pin)) {
    922e:	4b10      	ldr	r3, [pc, #64]	; (9270 <digitalWrite+0x48>)
    9230:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    9234:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    9238:	b12c      	cbz	r4, 9246 <digitalWrite+0x1e>
			*portSetRegister(pin) = 1;
    923a:	2301      	movs	r3, #1
		if (val) {
    923c:	b971      	cbnz	r1, 925c <digitalWrite+0x34>
			*portClearRegister(pin) = 1;
    923e:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
}
    9242:	bc10      	pop	{r4}
    9244:	4770      	bx	lr
		volatile uint32_t *config = portConfigRegister(pin);
    9246:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    924a:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    924c:	681a      	ldr	r2, [r3, #0]
		if (val) {
    924e:	b149      	cbz	r1, 9264 <digitalWrite+0x3c>
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    9250:	f042 0203 	orr.w	r2, r2, #3
}
    9254:	bc10      	pop	{r4}
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    9256:	601a      	str	r2, [r3, #0]
}
    9258:	4770      	bx	lr
    925a:	4770      	bx	lr
			*portSetRegister(pin) = 1;
    925c:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
}
    9260:	bc10      	pop	{r4}
    9262:	4770      	bx	lr
			*config &= ~(PORT_PCR_PE);
    9264:	f022 0202 	bic.w	r2, r2, #2
}
    9268:	bc10      	pop	{r4}
			*config &= ~(PORT_PCR_PE);
    926a:	601a      	str	r2, [r3, #0]
}
    926c:	4770      	bx	lr
    926e:	bf00      	nop
    9270:	00014048 	.word	0x00014048

00009274 <digitalRead>:
	if (pin >= CORE_NUM_DIGITAL) return 0;
    9274:	2821      	cmp	r0, #33	; 0x21
    9276:	d806      	bhi.n	9286 <digitalRead+0x12>
	return *portInputRegister(pin);
    9278:	4b04      	ldr	r3, [pc, #16]	; (928c <digitalRead+0x18>)
    927a:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    927e:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
    9282:	b2c0      	uxtb	r0, r0
    9284:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    9286:	2000      	movs	r0, #0
}
    9288:	4770      	bx	lr
    928a:	bf00      	nop
    928c:	00014048 	.word	0x00014048

00009290 <pinMode>:
	if (pin >= CORE_NUM_DIGITAL) return;
    9290:	2821      	cmp	r0, #33	; 0x21
    9292:	d820      	bhi.n	92d6 <pinMode+0x46>
	config = portConfigRegister(pin);
    9294:	4a1b      	ldr	r2, [pc, #108]	; (9304 <pinMode+0x74>)
    9296:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    929a:	2901      	cmp	r1, #1
	config = portConfigRegister(pin);
    929c:	685b      	ldr	r3, [r3, #4]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    929e:	d00f      	beq.n	92c0 <pinMode+0x30>
    92a0:	2904      	cmp	r1, #4
    92a2:	d01d      	beq.n	92e0 <pinMode+0x50>
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    92a4:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    92a8:	2200      	movs	r2, #0
    92aa:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    92ae:	b199      	cbz	r1, 92d8 <pinMode+0x48>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    92b0:	2902      	cmp	r1, #2
    92b2:	d022      	beq.n	92fa <pinMode+0x6a>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    92b4:	2903      	cmp	r1, #3
    92b6:	d10d      	bne.n	92d4 <pinMode+0x44>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    92b8:	f44f 7281 	mov.w	r2, #258	; 0x102
    92bc:	601a      	str	r2, [r3, #0]
    92be:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    92c0:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    92c4:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    92c8:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    92cc:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    92ce:	681a      	ldr	r2, [r3, #0]
    92d0:	f022 0220 	bic.w	r2, r2, #32
    92d4:	601a      	str	r2, [r3, #0]
		} else { // INPUT_DISABLE
			*config = 0;
		}
	}
}
    92d6:	4770      	bx	lr
			*config = PORT_PCR_MUX(1);
    92d8:	f44f 7280 	mov.w	r2, #256	; 0x100
    92dc:	601a      	str	r2, [r3, #0]
    92de:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    92e0:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    92e4:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    92e8:	2001      	movs	r0, #1
    92ea:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    92ee:	601a      	str	r2, [r3, #0]
		    *config |= PORT_PCR_ODE;
    92f0:	681a      	ldr	r2, [r3, #0]
    92f2:	f042 0220 	orr.w	r2, r2, #32
    92f6:	601a      	str	r2, [r3, #0]
    92f8:	4770      	bx	lr
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    92fa:	f240 1203 	movw	r2, #259	; 0x103
    92fe:	601a      	str	r2, [r3, #0]
    9300:	4770      	bx	lr
    9302:	bf00      	nop
    9304:	00014048 	.word	0x00014048

00009308 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    9308:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    930a:	490d      	ldr	r1, [pc, #52]	; (9340 <micros+0x38>)
	current = SYST_CVR;
    930c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    9310:	6993      	ldr	r3, [r2, #24]
	count = systick_millis_count;
    9312:	6808      	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9314:	f8d2 2d04 	ldr.w	r2, [r2, #3332]	; 0xd04
	__enable_irq();
    9318:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    931a:	0152      	lsls	r2, r2, #5
    931c:	d502      	bpl.n	9324 <micros+0x1c>
    931e:	2b32      	cmp	r3, #50	; 0x32
    9320:	bf88      	it	hi
    9322:	3001      	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    9324:	4a07      	ldr	r2, [pc, #28]	; (9344 <micros+0x3c>)
	current = ((F_CPU / 1000) - 1) - current;
    9326:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
	return count * 1000 + current / (F_CPU / 1000000);
    932a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	current = ((F_CPU / 1000) - 1) - current;
    932e:	33ff      	adds	r3, #255	; 0xff
	return count * 1000 + current / (F_CPU / 1000000);
    9330:	fba2 2303 	umull	r2, r3, r2, r3
    9334:	fb01 f000 	mul.w	r0, r1, r0
}
    9338:	eb00 1093 	add.w	r0, r0, r3, lsr #6
    933c:	4770      	bx	lr
    933e:	bf00      	nop
    9340:	1fffb4d8 	.word	0x1fffb4d8
    9344:	aaaaaaab 	.word	0xaaaaaaab

00009348 <delay>:

void delay(uint32_t ms)
{
    9348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    934c:	4604      	mov	r4, r0
	__disable_irq();
    934e:	b672      	cpsid	i
	count = systick_millis_count;
    9350:	4f20      	ldr	r7, [pc, #128]	; (93d4 <delay+0x8c>)
	current = SYST_CVR;
    9352:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    9356:	6993      	ldr	r3, [r2, #24]
	count = systick_millis_count;
    9358:	683d      	ldr	r5, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    935a:	f8d2 2d04 	ldr.w	r2, [r2, #3332]	; 0xd04
	__enable_irq();
    935e:	b662      	cpsie	i
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    9360:	0152      	lsls	r2, r2, #5
    9362:	d502      	bpl.n	936a <delay+0x22>
    9364:	2b32      	cmp	r3, #50	; 0x32
    9366:	bf88      	it	hi
    9368:	3501      	addhi	r5, #1
	uint32_t start = micros();

	if (ms > 0) {
    936a:	b90c      	cbnz	r4, 9370 <delay+0x28>
				start += 1000;
			}
			yield();
		}
	}
}
    936c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	current = ((F_CPU / 1000) - 1) - current;
    9370:	f8df 9064 	ldr.w	r9, [pc, #100]	; 93d8 <delay+0x90>
	return count * 1000 + current / (F_CPU / 1000000);
    9374:	f8df 8064 	ldr.w	r8, [pc, #100]	; 93dc <delay+0x94>
	current = ((F_CPU / 1000) - 1) - current;
    9378:	eba9 0303 	sub.w	r3, r9, r3
	return count * 1000 + current / (F_CPU / 1000000);
    937c:	fba8 2303 	umull	r2, r3, r8, r3
    9380:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9384:	fb02 f505 	mul.w	r5, r2, r5
    9388:	eb05 1593 	add.w	r5, r5, r3, lsr #6
	current = SYST_CVR;
    938c:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
	__disable_irq();
    9390:	b672      	cpsid	i
	current = SYST_CVR;
    9392:	69b1      	ldr	r1, [r6, #24]
	count = systick_millis_count;
    9394:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    9396:	f8d6 cd04 	ldr.w	ip, [r6, #3332]	; 0xd04
	__enable_irq();
    939a:	b662      	cpsie	i
	current = ((F_CPU / 1000) - 1) - current;
    939c:	eba9 0301 	sub.w	r3, r9, r1
	return count * 1000 + current / (F_CPU / 1000000);
    93a0:	fba8 0303 	umull	r0, r3, r8, r3
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    93a4:	f01c 6f80 	tst.w	ip, #67108864	; 0x4000000
			while ((micros() - start) >= 1000) {
    93a8:	ebc5 1393 	rsb	r3, r5, r3, lsr #6
	return count * 1000 + current / (F_CPU / 1000000);
    93ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    93b0:	d002      	beq.n	93b8 <delay+0x70>
    93b2:	2932      	cmp	r1, #50	; 0x32
    93b4:	bf88      	it	hi
    93b6:	3201      	addhi	r2, #1
			while ((micros() - start) >= 1000) {
    93b8:	fb00 3302 	mla	r3, r0, r2, r3
    93bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    93c0:	d304      	bcc.n	93cc <delay+0x84>
				if (ms == 0) return;
    93c2:	3c01      	subs	r4, #1
    93c4:	d0d2      	beq.n	936c <delay+0x24>
				start += 1000;
    93c6:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
    93ca:	e7e1      	b.n	9390 <delay+0x48>
			yield();
    93cc:	f001 fea4 	bl	b118 <yield>
			while ((micros() - start) >= 1000) {
    93d0:	e7de      	b.n	9390 <delay+0x48>
    93d2:	bf00      	nop
    93d4:	1fffb4d8 	.word	0x1fffb4d8
    93d8:	000176ff 	.word	0x000176ff
    93dc:	aaaaaaab 	.word	0xaaaaaaab

000093e0 <serial2_begin>:
#define GPIO_BITBAND_PTR(reg, bit) ((uint32_t *)GPIO_BITBAND_ADDR((reg), (bit)))
#define C3_TXDIR_BIT 5

void serial2_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    93e0:	4a2a      	ldr	r2, [pc, #168]	; (948c <serial2_begin+0xac>)
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
    93e2:	492b      	ldr	r1, [pc, #172]	; (9490 <serial2_begin+0xb0>)
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    93e4:	6b53      	ldr	r3, [r2, #52]	; 0x34
{
    93e6:	b470      	push	{r4, r5, r6}
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    93e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
	rx_buffer_head = 0;
    93ec:	4d29      	ldr	r5, [pc, #164]	; (9494 <serial2_begin+0xb4>)
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    93ee:	6353      	str	r3, [r2, #52]	; 0x34
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
#if defined(KINETISK)
	switch (rx_pin_num) {
    93f0:	4e29      	ldr	r6, [pc, #164]	; (9498 <serial2_begin+0xb8>)
	tx_buffer_head = 0;
    93f2:	4c2a      	ldr	r4, [pc, #168]	; (949c <serial2_begin+0xbc>)
	switch (rx_pin_num) {
    93f4:	7832      	ldrb	r2, [r6, #0]
	rx_buffer_head = 0;
    93f6:	2300      	movs	r3, #0
    93f8:	702b      	strb	r3, [r5, #0]
	rx_buffer_tail = 0;
    93fa:	700b      	strb	r3, [r1, #0]
	tx_buffer_tail = 0;
    93fc:	4928      	ldr	r1, [pc, #160]	; (94a0 <serial2_begin+0xc0>)
	tx_buffer_head = 0;
    93fe:	7023      	strb	r3, [r4, #0]
	tx_buffer_tail = 0;
    9400:	700b      	strb	r3, [r1, #0]
	transmitting = 0;
    9402:	4928      	ldr	r1, [pc, #160]	; (94a4 <serial2_begin+0xc4>)
	switch (rx_pin_num) {
    9404:	2a09      	cmp	r2, #9
	transmitting = 0;
    9406:	700b      	strb	r3, [r1, #0]
	switch (rx_pin_num) {
    9408:	d033      	beq.n	9472 <serial2_begin+0x92>
    940a:	2a1a      	cmp	r2, #26
    940c:	d103      	bne.n	9416 <serial2_begin+0x36>
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#if defined(__MK20DX128__) || defined(__MK20DX256__)    // T3.0, T3.1, T3.2
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    940e:	4b26      	ldr	r3, [pc, #152]	; (94a8 <serial2_begin+0xc8>)
    9410:	f240 3213 	movw	r2, #787	; 0x313
    9414:	605a      	str	r2, [r3, #4]
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)  // T3.5 or T3.6
		case 59: CORE_PIN59_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
    9416:	4b25      	ldr	r3, [pc, #148]	; (94ac <serial2_begin+0xcc>)
    9418:	781b      	ldrb	r3, [r3, #0]
    941a:	2b0a      	cmp	r3, #10
    941c:	d031      	beq.n	9482 <serial2_begin+0xa2>
    941e:	2b1f      	cmp	r3, #31
    9420:	d103      	bne.n	942a <serial2_begin+0x4a>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#if defined(__MK20DX128__) || defined(__MK20DX256__)    // T3.0, T3.1, T3.2
		case 31: CORE_PIN31_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    9422:	4b21      	ldr	r3, [pc, #132]	; (94a8 <serial2_begin+0xc8>)
    9424:	f44f 7251 	mov.w	r2, #836	; 0x344
    9428:	601a      	str	r2, [r3, #0]
#elif defined(KINETISL)
	CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
#endif
#if defined(HAS_KINETISK_UART1)
	if (divisor < 32) divisor = 32;
    942a:	2820      	cmp	r0, #32
	UART1_BDH = (divisor >> 13) & 0x1F;
    942c:	4b20      	ldr	r3, [pc, #128]	; (94b0 <serial2_begin+0xd0>)
	UART1_BDH = (divisor >> 8) & 0x1F;
	UART1_BDL = divisor & 0xFF;
	UART1_C1 = 0;
#endif
	UART1_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    942e:	4c21      	ldr	r4, [pc, #132]	; (94b4 <serial2_begin+0xd4>)
    9430:	bf38      	it	cc
    9432:	2020      	movcc	r0, #32
	UART1_BDH = (divisor >> 13) & 0x1F;
    9434:	f3c0 3c44 	ubfx	ip, r0, #13, #5
    9438:	f883 c000 	strb.w	ip, [r3]
	UART1_BDL = (divisor >> 5) & 0xFF;
    943c:	f3c0 1c47 	ubfx	ip, r0, #5, #8
	UART1_C4 = divisor & 0x1F;
    9440:	f000 001f 	and.w	r0, r0, #31
	UART1_BDL = (divisor >> 5) & 0xFF;
    9444:	f883 c001 	strb.w	ip, [r3, #1]
	UART1_C1 = UART_C1_ILT;
    9448:	2204      	movs	r2, #4
	UART1_C4 = divisor & 0x1F;
    944a:	7298      	strb	r0, [r3, #10]
	UART1_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    944c:	2002      	movs	r0, #2
	UART1_C1 = UART_C1_ILT;
    944e:	709a      	strb	r2, [r3, #2]
	UART1_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    9450:	74d8      	strb	r0, [r3, #19]
	UART1_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    9452:	2088      	movs	r0, #136	; 0x88
	UART1_RWFIFO = 4; // rx watermark, causes S1_RDRF to set
    9454:	755a      	strb	r2, [r3, #21]
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    9456:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	UART1_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    945a:	7418      	strb	r0, [r3, #16]
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    945c:	2240      	movs	r2, #64	; 0x40
	UART1_C2 = C2_TX_INACTIVE;
    945e:	203c      	movs	r0, #60	; 0x3c
    9460:	70d8      	strb	r0, [r3, #3]
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    9462:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    9466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
}
    946a:	bc70      	pop	{r4, r5, r6}
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    946c:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
}
    9470:	4770      	bx	lr
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    9472:	4b11      	ldr	r3, [pc, #68]	; (94b8 <serial2_begin+0xd8>)
    9474:	f240 3213 	movw	r2, #787	; 0x313
    9478:	60da      	str	r2, [r3, #12]
	switch (tx_pin_num) {
    947a:	4b0c      	ldr	r3, [pc, #48]	; (94ac <serial2_begin+0xcc>)
    947c:	781b      	ldrb	r3, [r3, #0]
    947e:	2b0a      	cmp	r3, #10
    9480:	d1cd      	bne.n	941e <serial2_begin+0x3e>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    9482:	4b0d      	ldr	r3, [pc, #52]	; (94b8 <serial2_begin+0xd8>)
    9484:	f44f 7251 	mov.w	r2, #836	; 0x344
    9488:	611a      	str	r2, [r3, #16]
    948a:	e7ce      	b.n	942a <serial2_begin+0x4a>
    948c:	40048000 	.word	0x40048000
    9490:	1fffb528 	.word	0x1fffb528
    9494:	1fffb520 	.word	0x1fffb520
    9498:	1fff87ec 	.word	0x1fff87ec
    949c:	1fffb55c 	.word	0x1fffb55c
    94a0:	1fffb564 	.word	0x1fffb564
    94a4:	1fffb530 	.word	0x1fffb530
    94a8:	4004d000 	.word	0x4004d000
    94ac:	1fff87f4 	.word	0x1fff87f4
    94b0:	4006b000 	.word	0x4006b000
    94b4:	e000e400 	.word	0xe000e400
    94b8:	4004b000 	.word	0x4004b000

000094bc <serial2_format>:

void serial2_format(uint32_t format)
{
	uint8_t c;

	c = UART1_C1;
    94bc:	4b21      	ldr	r3, [pc, #132]	; (9544 <serial2_format+0x88>)
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART1_C1 = c;
    94be:	4921      	ldr	r1, [pc, #132]	; (9544 <serial2_format+0x88>)
	c = UART1_C1;
    94c0:	789b      	ldrb	r3, [r3, #2]
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    94c2:	f000 0203 	and.w	r2, r0, #3
    94c6:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    94ca:	4313      	orrs	r3, r2
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    94cc:	0742      	lsls	r2, r0, #29
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    94ce:	f000 020f 	and.w	r2, r0, #15
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    94d2:	bf48      	it	mi
    94d4:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    94d8:	2a04      	cmp	r2, #4
	UART1_C1 = c;
    94da:	708b      	strb	r3, [r1, #2]
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    94dc:	d103      	bne.n	94e6 <serial2_format+0x2a>
    94de:	798b      	ldrb	r3, [r1, #6]
    94e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    94e4:	718b      	strb	r3, [r1, #6]
	c = UART1_S2 & ~0x10;
    94e6:	4b17      	ldr	r3, [pc, #92]	; (9544 <serial2_format+0x88>)
	if (format & 0x10) c |= 0x10;		// rx invert
	UART1_S2 = c;
    94e8:	4a16      	ldr	r2, [pc, #88]	; (9544 <serial2_format+0x88>)
	c = UART1_S2 & ~0x10;
    94ea:	795b      	ldrb	r3, [r3, #5]
	if (format & 0x10) c |= 0x10;		// rx invert
    94ec:	06c1      	lsls	r1, r0, #27
	c = UART1_S2 & ~0x10;
    94ee:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	if (format & 0x10) c |= 0x10;		// rx invert
    94f2:	bf48      	it	mi
    94f4:	f043 0310 	orrmi.w	r3, r3, #16
	UART1_S2 = c;
    94f8:	7153      	strb	r3, [r2, #5]
	c = UART1_C3 & ~0x10;
    94fa:	7993      	ldrb	r3, [r2, #6]
	if (format & 0x20) c |= 0x10;		// tx invert
    94fc:	0682      	lsls	r2, r0, #26
	c = UART1_C3 & ~0x10;
    94fe:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	UART1_C3 = c;
    9502:	4a10      	ldr	r2, [pc, #64]	; (9544 <serial2_format+0x88>)
	if (format & 0x20) c |= 0x10;		// tx invert
    9504:	bf48      	it	mi
    9506:	f043 0310 	orrmi.w	r3, r3, #16
		UART1_BDH |= UART_BDH_SBNS;		// Turn on 2 stop bits - was turned off by set baud
		UART1_BDL = bdl;		// Says BDH not acted on until BDL is written
	}
#endif
	// process request for half duplex.
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    950a:	f410 7000 	ands.w	r0, r0, #512	; 0x200
	UART1_C3 = c;
    950e:	7193      	strb	r3, [r2, #6]
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    9510:	d010      	beq.n	9534 <serial2_format+0x78>
		c = UART1_C1;
    9512:	7893      	ldrb	r3, [r2, #2]
		#if defined(KINETISL)
		//CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		CORE_PIN10_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
		half_duplex_mode = 1;
		#else
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    9514:	490c      	ldr	r1, [pc, #48]	; (9548 <serial2_format+0x8c>)
		c |= UART_C1_LOOPS | UART_C1_RSRC;
    9516:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		UART1_C1 = c;
    951a:	7093      	strb	r3, [r2, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    951c:	7809      	ldrb	r1, [r1, #0]
    951e:	4b0b      	ldr	r3, [pc, #44]	; (954c <serial2_format+0x90>)
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT);
    9520:	4a0b      	ldr	r2, [pc, #44]	; (9550 <serial2_format+0x94>)
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    9522:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    9526:	f240 3047 	movw	r0, #839	; 0x347
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    952a:	685b      	ldr	r3, [r3, #4]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT);
    952c:	4909      	ldr	r1, [pc, #36]	; (9554 <serial2_format+0x98>)
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    952e:	6018      	str	r0, [r3, #0]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT);
    9530:	6011      	str	r1, [r2, #0]
    9532:	4770      	bx	lr

	} else {
		#if defined(KINETISL)
		half_duplex_mode = 0;
		#else
		if (transmit_pin == (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT)) transmit_pin = NULL;
    9534:	4b06      	ldr	r3, [pc, #24]	; (9550 <serial2_format+0x94>)
    9536:	4a07      	ldr	r2, [pc, #28]	; (9554 <serial2_format+0x98>)
    9538:	6819      	ldr	r1, [r3, #0]
    953a:	4291      	cmp	r1, r2
    953c:	bf08      	it	eq
    953e:	6018      	streq	r0, [r3, #0]
		#endif
	}
}
    9540:	4770      	bx	lr
    9542:	bf00      	nop
    9544:	4006b000 	.word	0x4006b000
    9548:	1fff87f4 	.word	0x1fff87f4
    954c:	00014048 	.word	0x00014048
    9550:	1fffb52c 	.word	0x1fffb52c
    9554:	42d600d4 	.word	0x42d600d4

00009558 <serial2_end>:

void serial2_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    9558:	4b29      	ldr	r3, [pc, #164]	; (9600 <serial2_end+0xa8>)
    955a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    955c:	051b      	lsls	r3, r3, #20
    955e:	d54d      	bpl.n	95fc <serial2_end+0xa4>
{
    9560:	b510      	push	{r4, lr}
	while (transmitting) yield();  // wait for buffered data to send
    9562:	4c28      	ldr	r4, [pc, #160]	; (9604 <serial2_end+0xac>)
    9564:	7823      	ldrb	r3, [r4, #0]
    9566:	b123      	cbz	r3, 9572 <serial2_end+0x1a>
    9568:	f001 fdd6 	bl	b118 <yield>
    956c:	7823      	ldrb	r3, [r4, #0]
    956e:	2b00      	cmp	r3, #0
    9570:	d1fa      	bne.n	9568 <serial2_end+0x10>
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
	UART1_C2 = 0;
    9572:	4a25      	ldr	r2, [pc, #148]	; (9608 <serial2_end+0xb0>)
#if defined(KINETISK)
	switch (rx_pin_num) {
    9574:	4b25      	ldr	r3, [pc, #148]	; (960c <serial2_end+0xb4>)
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
    9576:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    957a:	f44f 4400 	mov.w	r4, #32768	; 0x8000
	UART1_C2 = 0;
    957e:	2100      	movs	r1, #0
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
    9580:	f8c0 4184 	str.w	r4, [r0, #388]	; 0x184
	UART1_C2 = 0;
    9584:	70d1      	strb	r1, [r2, #3]
	switch (rx_pin_num) {
    9586:	781b      	ldrb	r3, [r3, #0]
    9588:	2b09      	cmp	r3, #9
    958a:	d02c      	beq.n	95e6 <serial2_end+0x8e>
    958c:	2b1a      	cmp	r3, #26
    958e:	d01b      	beq.n	95c8 <serial2_end+0x70>
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE1
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
		case 59: CORE_PIN59_CONFIG = 0; break;
		#endif
	}
	switch (tx_pin_num & 127) {
    9590:	4b1f      	ldr	r3, [pc, #124]	; (9610 <serial2_end+0xb8>)
    9592:	781b      	ldrb	r3, [r3, #0]
    9594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9598:	2b0a      	cmp	r3, #10
    959a:	d01f      	beq.n	95dc <serial2_end+0x84>
    959c:	2b1f      	cmp	r3, #31
    959e:	d00e      	beq.n	95be <serial2_end+0x66>
#endif
	UART1_S1;
	UART1_D; // clear leftover error status
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	if (rts_pin) rts_deassert();
    95a0:	4b1c      	ldr	r3, [pc, #112]	; (9614 <serial2_end+0xbc>)
	UART1_S1;
    95a2:	4a19      	ldr	r2, [pc, #100]	; (9608 <serial2_end+0xb0>)
	rx_buffer_head = 0;
    95a4:	4c1c      	ldr	r4, [pc, #112]	; (9618 <serial2_end+0xc0>)
	rx_buffer_tail = 0;
    95a6:	481d      	ldr	r0, [pc, #116]	; (961c <serial2_end+0xc4>)
	if (rts_pin) rts_deassert();
    95a8:	6819      	ldr	r1, [r3, #0]
	UART1_S1;
    95aa:	f892 c004 	ldrb.w	ip, [r2, #4]
	UART1_D; // clear leftover error status
    95ae:	79d2      	ldrb	r2, [r2, #7]
	rx_buffer_head = 0;
    95b0:	2300      	movs	r3, #0
    95b2:	7023      	strb	r3, [r4, #0]
	rx_buffer_tail = 0;
    95b4:	7003      	strb	r3, [r0, #0]
	if (rts_pin) rts_deassert();
    95b6:	b109      	cbz	r1, 95bc <serial2_end+0x64>
    95b8:	2301      	movs	r3, #1
    95ba:	700b      	strb	r3, [r1, #0]
}
    95bc:	bd10      	pop	{r4, pc}
		case 31: CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE0
    95be:	4b18      	ldr	r3, [pc, #96]	; (9620 <serial2_end+0xc8>)
    95c0:	f240 1203 	movw	r2, #259	; 0x103
    95c4:	601a      	str	r2, [r3, #0]
    95c6:	e7eb      	b.n	95a0 <serial2_end+0x48>
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE1
    95c8:	4b15      	ldr	r3, [pc, #84]	; (9620 <serial2_end+0xc8>)
    95ca:	f240 1203 	movw	r2, #259	; 0x103
    95ce:	605a      	str	r2, [r3, #4]
	switch (tx_pin_num & 127) {
    95d0:	4b0f      	ldr	r3, [pc, #60]	; (9610 <serial2_end+0xb8>)
    95d2:	781b      	ldrb	r3, [r3, #0]
    95d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    95d8:	2b0a      	cmp	r3, #10
    95da:	d1df      	bne.n	959c <serial2_end+0x44>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC4
    95dc:	4b11      	ldr	r3, [pc, #68]	; (9624 <serial2_end+0xcc>)
    95de:	f240 1203 	movw	r2, #259	; 0x103
    95e2:	611a      	str	r2, [r3, #16]
    95e4:	e7dc      	b.n	95a0 <serial2_end+0x48>
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC3
    95e6:	4b0f      	ldr	r3, [pc, #60]	; (9624 <serial2_end+0xcc>)
    95e8:	f240 1203 	movw	r2, #259	; 0x103
    95ec:	60da      	str	r2, [r3, #12]
	switch (tx_pin_num & 127) {
    95ee:	4b08      	ldr	r3, [pc, #32]	; (9610 <serial2_end+0xb8>)
    95f0:	781b      	ldrb	r3, [r3, #0]
    95f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    95f6:	2b0a      	cmp	r3, #10
    95f8:	d1d0      	bne.n	959c <serial2_end+0x44>
    95fa:	e7ef      	b.n	95dc <serial2_end+0x84>
    95fc:	4770      	bx	lr
    95fe:	bf00      	nop
    9600:	40048000 	.word	0x40048000
    9604:	1fffb530 	.word	0x1fffb530
    9608:	4006b000 	.word	0x4006b000
    960c:	1fff87ec 	.word	0x1fff87ec
    9610:	1fff87f4 	.word	0x1fff87f4
    9614:	1fffb4dc 	.word	0x1fffb4dc
    9618:	1fffb520 	.word	0x1fffb520
    961c:	1fffb528 	.word	0x1fffb528
    9620:	4004d000 	.word	0x4004d000
    9624:	4004b000 	.word	0x4004b000

00009628 <serial2_set_transmit_pin>:

void serial2_set_transmit_pin(uint8_t pin)
{
	while (transmitting) ;
    9628:	4a0a      	ldr	r2, [pc, #40]	; (9654 <serial2_set_transmit_pin+0x2c>)
{
    962a:	b538      	push	{r3, r4, r5, lr}
    962c:	4605      	mov	r5, r0
	while (transmitting) ;
    962e:	7813      	ldrb	r3, [r2, #0]
    9630:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    9634:	2b00      	cmp	r3, #0
    9636:	d1fa      	bne.n	962e <serial2_set_transmit_pin+0x6>
	pinMode(pin, OUTPUT);
    9638:	2101      	movs	r1, #1
    963a:	4628      	mov	r0, r5
    963c:	f7ff fe28 	bl	9290 <pinMode>
	digitalWrite(pin, LOW);
    9640:	4621      	mov	r1, r4
    9642:	4628      	mov	r0, r5
    9644:	f7ff fdf0 	bl	9228 <digitalWrite>
	transmit_pin = portOutputRegister(pin);
    9648:	4a03      	ldr	r2, [pc, #12]	; (9658 <serial2_set_transmit_pin+0x30>)
    964a:	4b04      	ldr	r3, [pc, #16]	; (965c <serial2_set_transmit_pin+0x34>)
    964c:	f852 2035 	ldr.w	r2, [r2, r5, lsl #3]
    9650:	601a      	str	r2, [r3, #0]
	#if defined(KINETISL)
	transmit_mask = digitalPinToBitMask(pin);
	#endif
}
    9652:	bd38      	pop	{r3, r4, r5, pc}
    9654:	1fffb530 	.word	0x1fffb530
    9658:	00014048 	.word	0x00014048
    965c:	1fffb52c 	.word	0x1fffb52c

00009660 <serial2_set_tx>:
void serial2_set_tx(uint8_t pin, uint8_t opendrain)
{
	#if defined(KINETISK)
	uint32_t cfg;

	if (opendrain) pin |= 128;
    9660:	b109      	cbz	r1, 9666 <serial2_set_tx+0x6>
    9662:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	if (pin == tx_pin_num) return;
    9666:	4a19      	ldr	r2, [pc, #100]	; (96cc <serial2_set_tx+0x6c>)
    9668:	7813      	ldrb	r3, [r2, #0]
    966a:	4283      	cmp	r3, r0
    966c:	d017      	beq.n	969e <serial2_set_tx+0x3e>
{
    966e:	b410      	push	{r4}
	if ((SIM_SCGC4 & SIM_SCGC4_UART1)) {
    9670:	4c17      	ldr	r4, [pc, #92]	; (96d0 <serial2_set_tx+0x70>)
    9672:	6b64      	ldr	r4, [r4, #52]	; 0x34
    9674:	0524      	lsls	r4, r4, #20
    9676:	d50f      	bpl.n	9698 <serial2_set_tx+0x38>
		switch (tx_pin_num & 127) {
    9678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    967c:	2b0a      	cmp	r3, #10
    967e:	d021      	beq.n	96c4 <serial2_set_tx+0x64>
    9680:	2b1f      	cmp	r3, #31
    9682:	d014      	beq.n	96ae <serial2_set_tx+0x4e>
			#endif
		}
		if (opendrain) {
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    9684:	2900      	cmp	r1, #0
    9686:	f000 037f 	and.w	r3, r0, #127	; 0x7f
    968a:	bf14      	ite	ne
    968c:	2160      	movne	r1, #96	; 0x60
    968e:	2144      	moveq	r1, #68	; 0x44
		}
		switch (pin & 127) {
    9690:	2b0a      	cmp	r3, #10
    9692:	d010      	beq.n	96b6 <serial2_set_tx+0x56>
    9694:	2b1f      	cmp	r3, #31
    9696:	d003      	beq.n	96a0 <serial2_set_tx+0x40>
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 58: CORE_PIN58_CONFIG = cfg | PORT_PCR_MUX(3); break;
			#endif
		}
	}
	tx_pin_num = pin;
    9698:	7010      	strb	r0, [r2, #0]
	#endif
}
    969a:	bc10      	pop	{r4}
    969c:	4770      	bx	lr
    969e:	4770      	bx	lr
			case 31: CORE_PIN31_CONFIG = cfg | PORT_PCR_MUX(3); break;
    96a0:	4b0c      	ldr	r3, [pc, #48]	; (96d4 <serial2_set_tx+0x74>)
    96a2:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    96a6:	6019      	str	r1, [r3, #0]
	tx_pin_num = pin;
    96a8:	7010      	strb	r0, [r2, #0]
}
    96aa:	bc10      	pop	{r4}
    96ac:	4770      	bx	lr
			case 31: CORE_PIN31_CONFIG = 0; break; // PTE0
    96ae:	4b09      	ldr	r3, [pc, #36]	; (96d4 <serial2_set_tx+0x74>)
    96b0:	2400      	movs	r4, #0
    96b2:	601c      	str	r4, [r3, #0]
    96b4:	e7e6      	b.n	9684 <serial2_set_tx+0x24>
			case 10: CORE_PIN10_CONFIG = cfg | PORT_PCR_MUX(3); break;
    96b6:	4b08      	ldr	r3, [pc, #32]	; (96d8 <serial2_set_tx+0x78>)
    96b8:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    96bc:	6119      	str	r1, [r3, #16]
	tx_pin_num = pin;
    96be:	7010      	strb	r0, [r2, #0]
}
    96c0:	bc10      	pop	{r4}
    96c2:	4770      	bx	lr
			case 10: CORE_PIN10_CONFIG = 0; break; // PTC4
    96c4:	4b04      	ldr	r3, [pc, #16]	; (96d8 <serial2_set_tx+0x78>)
    96c6:	2400      	movs	r4, #0
    96c8:	611c      	str	r4, [r3, #16]
    96ca:	e7db      	b.n	9684 <serial2_set_tx+0x24>
    96cc:	1fff87f4 	.word	0x1fff87f4
    96d0:	40048000 	.word	0x40048000
    96d4:	4004d000 	.word	0x4004d000
    96d8:	4004b000 	.word	0x4004b000

000096dc <serial2_set_rx>:

void serial2_set_rx(uint8_t pin)
{
	#if defined(KINETISK)
	if (pin == rx_pin_num) return;
    96dc:	4b12      	ldr	r3, [pc, #72]	; (9728 <serial2_set_rx+0x4c>)
    96de:	781a      	ldrb	r2, [r3, #0]
    96e0:	4282      	cmp	r2, r0
    96e2:	d00c      	beq.n	96fe <serial2_set_rx+0x22>
	if ((SIM_SCGC4 & SIM_SCGC4_UART1)) {
    96e4:	4911      	ldr	r1, [pc, #68]	; (972c <serial2_set_rx+0x50>)
    96e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
    96e8:	0509      	lsls	r1, r1, #20
    96ea:	d507      	bpl.n	96fc <serial2_set_rx+0x20>
		switch (rx_pin_num) {
    96ec:	2a09      	cmp	r2, #9
    96ee:	d016      	beq.n	971e <serial2_set_rx+0x42>
    96f0:	2a1a      	cmp	r2, #26
    96f2:	d00a      	beq.n	970a <serial2_set_rx+0x2e>
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 59: CORE_PIN59_CONFIG = 0; break;
			#endif
		}
		switch (pin) {
    96f4:	2809      	cmp	r0, #9
    96f6:	d00d      	beq.n	9714 <serial2_set_rx+0x38>
    96f8:	281a      	cmp	r0, #26
    96fa:	d001      	beq.n	9700 <serial2_set_rx+0x24>
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 59: CORE_PIN59_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
			#endif
		}
	}
	rx_pin_num = pin;
    96fc:	7018      	strb	r0, [r3, #0]
	#endif
}
    96fe:	4770      	bx	lr
			case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    9700:	4a0b      	ldr	r2, [pc, #44]	; (9730 <serial2_set_rx+0x54>)
    9702:	f240 3113 	movw	r1, #787	; 0x313
    9706:	6051      	str	r1, [r2, #4]
    9708:	e7f8      	b.n	96fc <serial2_set_rx+0x20>
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
    970a:	4a09      	ldr	r2, [pc, #36]	; (9730 <serial2_set_rx+0x54>)
    970c:	2100      	movs	r1, #0
		switch (pin) {
    970e:	2809      	cmp	r0, #9
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
    9710:	6051      	str	r1, [r2, #4]
		switch (pin) {
    9712:	d1f1      	bne.n	96f8 <serial2_set_rx+0x1c>
			case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    9714:	4a07      	ldr	r2, [pc, #28]	; (9734 <serial2_set_rx+0x58>)
    9716:	f240 3113 	movw	r1, #787	; 0x313
    971a:	60d1      	str	r1, [r2, #12]
    971c:	e7ee      	b.n	96fc <serial2_set_rx+0x20>
			case 9: CORE_PIN9_CONFIG = 0; break; // PTC3
    971e:	4a05      	ldr	r2, [pc, #20]	; (9734 <serial2_set_rx+0x58>)
    9720:	2100      	movs	r1, #0
    9722:	60d1      	str	r1, [r2, #12]
    9724:	e7e6      	b.n	96f4 <serial2_set_rx+0x18>
    9726:	bf00      	nop
    9728:	1fff87ec 	.word	0x1fff87ec
    972c:	40048000 	.word	0x40048000
    9730:	4004d000 	.word	0x4004d000
    9734:	4004b000 	.word	0x4004b000

00009738 <serial2_set_rts>:

int serial2_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    9738:	4b0d      	ldr	r3, [pc, #52]	; (9770 <serial2_set_rts+0x38>)
    973a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    973c:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
    9740:	d013      	beq.n	976a <serial2_set_rts+0x32>
	if (pin < CORE_NUM_DIGITAL) {
    9742:	2821      	cmp	r0, #33	; 0x21
    9744:	d903      	bls.n	974e <serial2_set_rts+0x16>
		rts_mask = digitalPinToBitMask(pin);
		#endif
		pinMode(pin, OUTPUT);
		rts_assert();
	} else {
		rts_pin = NULL;
    9746:	4b0b      	ldr	r3, [pc, #44]	; (9774 <serial2_set_rts+0x3c>)
    9748:	2000      	movs	r0, #0
    974a:	6018      	str	r0, [r3, #0]
		return 0;
    974c:	4770      	bx	lr
		rts_pin = portOutputRegister(pin);
    974e:	4b0a      	ldr	r3, [pc, #40]	; (9778 <serial2_set_rts+0x40>)
{
    9750:	b510      	push	{r4, lr}
		rts_pin = portOutputRegister(pin);
    9752:	4c08      	ldr	r4, [pc, #32]	; (9774 <serial2_set_rts+0x3c>)
    9754:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    9758:	6023      	str	r3, [r4, #0]
		pinMode(pin, OUTPUT);
    975a:	2101      	movs	r1, #1
    975c:	f7ff fd98 	bl	9290 <pinMode>
		rts_assert();
    9760:	6823      	ldr	r3, [r4, #0]
    9762:	2200      	movs	r2, #0
    9764:	701a      	strb	r2, [r3, #0]
		UART1_MODEM &= ~UART_MODEM_RXRTSE;
		return 0;
	}
	UART1_MODEM |= UART_MODEM_RXRTSE;
*/
	return 1;
    9766:	2001      	movs	r0, #1
}
    9768:	bd10      	pop	{r4, pc}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    976a:	4618      	mov	r0, r3
}
    976c:	4770      	bx	lr
    976e:	bf00      	nop
    9770:	40048000 	.word	0x40048000
    9774:	1fffb4dc 	.word	0x1fffb4dc
    9778:	00014048 	.word	0x00014048

0000977c <serial2_set_cts>:

int serial2_set_cts(uint8_t pin)
{
#if defined(KINETISK)
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    977c:	4b0c      	ldr	r3, [pc, #48]	; (97b0 <serial2_set_cts+0x34>)
    977e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9780:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
    9784:	d012      	beq.n	97ac <serial2_set_cts+0x30>
	if (pin == 23) {
    9786:	2817      	cmp	r0, #23
    9788:	d109      	bne.n	979e <serial2_set_cts+0x22>
		CORE_PIN23_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    978a:	4b0a      	ldr	r3, [pc, #40]	; (97b4 <serial2_set_cts+0x38>)
	#endif
	} else {
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
		return 0;
	}
	UART1_MODEM |= UART_MODEM_TXCTSE;
    978c:	4a0a      	ldr	r2, [pc, #40]	; (97b8 <serial2_set_cts+0x3c>)
		CORE_PIN23_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    978e:	f240 3102 	movw	r1, #770	; 0x302
    9792:	6099      	str	r1, [r3, #8]
	UART1_MODEM |= UART_MODEM_TXCTSE;
    9794:	7b53      	ldrb	r3, [r2, #13]
	return 1;
    9796:	2001      	movs	r0, #1
	UART1_MODEM |= UART_MODEM_TXCTSE;
    9798:	4303      	orrs	r3, r0
    979a:	7353      	strb	r3, [r2, #13]
	return 1;
    979c:	4770      	bx	lr
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
    979e:	4a06      	ldr	r2, [pc, #24]	; (97b8 <serial2_set_cts+0x3c>)
    97a0:	7b53      	ldrb	r3, [r2, #13]
    97a2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		return 0;
    97a6:	2000      	movs	r0, #0
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
    97a8:	7353      	strb	r3, [r2, #13]
		return 0;
    97aa:	4770      	bx	lr
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    97ac:	4618      	mov	r0, r3
#else
	return 0;
#endif
}
    97ae:	4770      	bx	lr
    97b0:	40048000 	.word	0x40048000
    97b4:	4004b000 	.word	0x4004b000
    97b8:	4006b000 	.word	0x4006b000

000097bc <serial2_putchar>:

void serial2_putchar(uint32_t c)
{
    97bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    97c0:	4b33      	ldr	r3, [pc, #204]	; (9890 <serial2_putchar+0xd4>)
    97c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    97c4:	051a      	lsls	r2, r3, #20
    97c6:	d53a      	bpl.n	983e <serial2_putchar+0x82>
	if (transmit_pin) transmit_assert();
    97c8:	4b32      	ldr	r3, [pc, #200]	; (9894 <serial2_putchar+0xd8>)
    97ca:	681b      	ldr	r3, [r3, #0]
    97cc:	4606      	mov	r6, r0
    97ce:	b10b      	cbz	r3, 97d4 <serial2_putchar+0x18>
    97d0:	2201      	movs	r2, #1
    97d2:	701a      	strb	r2, [r3, #0]
		reg |= UART_C3_TXDIR;
		UART1_C3 = reg;
		__enable_irq();
	}
	#endif 
	head = tx_buffer_head;
    97d4:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 9898 <serial2_putchar+0xdc>
	if (++head >= tx_buffer_total_size_) head = 0;
    97d8:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 989c <serial2_putchar+0xe0>
	head = tx_buffer_head;
    97dc:	f899 4000 	ldrb.w	r4, [r9]
	if (++head >= tx_buffer_total_size_) head = 0;
    97e0:	f8d8 3000 	ldr.w	r3, [r8]
	while (tx_buffer_tail == head) {
    97e4:	4d2e      	ldr	r5, [pc, #184]	; (98a0 <serial2_putchar+0xe4>)
	if (++head >= tx_buffer_total_size_) head = 0;
    97e6:	3401      	adds	r4, #1
    97e8:	42a3      	cmp	r3, r4
	while (tx_buffer_tail == head) {
    97ea:	782b      	ldrb	r3, [r5, #0]
	if (++head >= tx_buffer_total_size_) head = 0;
    97ec:	d929      	bls.n	9842 <serial2_putchar+0x86>
	while (tx_buffer_tail == head) {
    97ee:	429c      	cmp	r4, r3
		tx_buffer[head] = c;
	} else {
		tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = c;
	}
	transmitting = 1;
	tx_buffer_head = head;
    97f0:	fa5f fa84 	uxtb.w	sl, r4
	while (tx_buffer_tail == head) {
    97f4:	d114      	bne.n	9820 <serial2_putchar+0x64>
			if ((UART1_S1 & UART_S1_TDRE)) {
    97f6:	4f2b      	ldr	r7, [pc, #172]	; (98a4 <serial2_putchar+0xe8>)
					n = tx_buffer[tail];
    97f8:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 98a8 <serial2_putchar+0xec>
    97fc:	e005      	b.n	980a <serial2_putchar+0x4e>
			if ((UART1_S1 & UART_S1_TDRE)) {
    97fe:	793b      	ldrb	r3, [r7, #4]
    9800:	061b      	lsls	r3, r3, #24
    9802:	d423      	bmi.n	984c <serial2_putchar+0x90>
	while (tx_buffer_tail == head) {
    9804:	782b      	ldrb	r3, [r5, #0]
    9806:	42a3      	cmp	r3, r4
    9808:	d10a      	bne.n	9820 <serial2_putchar+0x64>
		int priority = nvic_execution_priority();
    980a:	f7ff fabd 	bl	8d88 <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    980e:	2840      	cmp	r0, #64	; 0x40
    9810:	ddf5      	ble.n	97fe <serial2_putchar+0x42>
		} else if (priority >= 256) {
    9812:	28ff      	cmp	r0, #255	; 0xff
    9814:	ddf6      	ble.n	9804 <serial2_putchar+0x48>
			yield(); // wait
    9816:	f001 fc7f 	bl	b118 <yield>
	while (tx_buffer_tail == head) {
    981a:	782b      	ldrb	r3, [r5, #0]
    981c:	42a3      	cmp	r3, r4
    981e:	d0f4      	beq.n	980a <serial2_putchar+0x4e>
	if (head < SERIAL2_TX_BUFFER_SIZE) {
    9820:	2c27      	cmp	r4, #39	; 0x27
    9822:	d929      	bls.n	9878 <serial2_putchar+0xbc>
		tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = c;
    9824:	4b21      	ldr	r3, [pc, #132]	; (98ac <serial2_putchar+0xf0>)
    9826:	3c28      	subs	r4, #40	; 0x28
    9828:	681b      	ldr	r3, [r3, #0]
    982a:	b2f6      	uxtb	r6, r6
    982c:	551e      	strb	r6, [r3, r4]
	transmitting = 1;
    982e:	4a20      	ldr	r2, [pc, #128]	; (98b0 <serial2_putchar+0xf4>)
	UART1_C2 = C2_TX_ACTIVE;
    9830:	4b1c      	ldr	r3, [pc, #112]	; (98a4 <serial2_putchar+0xe8>)
	transmitting = 1;
    9832:	2101      	movs	r1, #1
    9834:	7011      	strb	r1, [r2, #0]
	UART1_C2 = C2_TX_ACTIVE;
    9836:	22bc      	movs	r2, #188	; 0xbc
	tx_buffer_head = head;
    9838:	f889 a000 	strb.w	sl, [r9]
	UART1_C2 = C2_TX_ACTIVE;
    983c:	70da      	strb	r2, [r3, #3]
}
    983e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (tx_buffer_tail == head) {
    9842:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    9846:	b9a3      	cbnz	r3, 9872 <serial2_putchar+0xb6>
	if (++head >= tx_buffer_total_size_) head = 0;
    9848:	4654      	mov	r4, sl
    984a:	e7d4      	b.n	97f6 <serial2_putchar+0x3a>
				uint32_t tail = tx_buffer_tail;
    984c:	782b      	ldrb	r3, [r5, #0]
				if (++tail >= tx_buffer_total_size_) tail = 0;
    984e:	f8d8 1000 	ldr.w	r1, [r8]
    9852:	1c5a      	adds	r2, r3, #1
    9854:	4291      	cmp	r1, r2
				uint32_t tail = tx_buffer_tail;
    9856:	b2db      	uxtb	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    9858:	d908      	bls.n	986c <serial2_putchar+0xb0>
				if (tail < SERIAL2_TX_BUFFER_SIZE) {
    985a:	2a27      	cmp	r2, #39	; 0x27
    985c:	d810      	bhi.n	9880 <serial2_putchar+0xc4>
				tx_buffer_tail = tail;
    985e:	b2d1      	uxtb	r1, r2
					n = tx_buffer[tail];
    9860:	f81b 3002 	ldrb.w	r3, [fp, r2]
    9864:	b2db      	uxtb	r3, r3
				UART1_D = n;
    9866:	71fb      	strb	r3, [r7, #7]
				tx_buffer_tail = tail;
    9868:	7029      	strb	r1, [r5, #0]
    986a:	e7cb      	b.n	9804 <serial2_putchar+0x48>
    986c:	2100      	movs	r1, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    986e:	460a      	mov	r2, r1
    9870:	e7f6      	b.n	9860 <serial2_putchar+0xa4>
	while (tx_buffer_tail == head) {
    9872:	f04f 0a00 	mov.w	sl, #0
	if (++head >= tx_buffer_total_size_) head = 0;
    9876:	4654      	mov	r4, sl
		tx_buffer[head] = c;
    9878:	4b0b      	ldr	r3, [pc, #44]	; (98a8 <serial2_putchar+0xec>)
    987a:	b2f6      	uxtb	r6, r6
    987c:	551e      	strb	r6, [r3, r4]
    987e:	e7d6      	b.n	982e <serial2_putchar+0x72>
				tx_buffer_tail = tail;
    9880:	b2d1      	uxtb	r1, r2
					n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    9882:	4a0a      	ldr	r2, [pc, #40]	; (98ac <serial2_putchar+0xf0>)
    9884:	3b27      	subs	r3, #39	; 0x27
    9886:	6812      	ldr	r2, [r2, #0]
    9888:	5cd3      	ldrb	r3, [r2, r3]
    988a:	b2db      	uxtb	r3, r3
    988c:	e7eb      	b.n	9866 <serial2_putchar+0xaa>
    988e:	bf00      	nop
    9890:	40048000 	.word	0x40048000
    9894:	1fffb52c 	.word	0x1fffb52c
    9898:	1fffb55c 	.word	0x1fffb55c
    989c:	1fff87f0 	.word	0x1fff87f0
    98a0:	1fffb564 	.word	0x1fffb564
    98a4:	4006b000 	.word	0x4006b000
    98a8:	1fffb534 	.word	0x1fffb534
    98ac:	1fffb560 	.word	0x1fffb560
    98b0:	1fffb530 	.word	0x1fffb530

000098b4 <serial2_write>:

#ifdef HAS_KINETISK_UART1_FIFO
void serial2_write(const void *buf, unsigned int count)
{
    98b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const uint8_t *p = (const uint8_t *)buf;
	const uint8_t *end = p + count;
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    98b8:	4b39      	ldr	r3, [pc, #228]	; (99a0 <serial2_write+0xec>)
    98ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    98bc:	051a      	lsls	r2, r3, #20
    98be:	d53c      	bpl.n	993a <serial2_write+0x86>
	if (transmit_pin) transmit_assert();
    98c0:	4b38      	ldr	r3, [pc, #224]	; (99a4 <serial2_write+0xf0>)
    98c2:	681b      	ldr	r3, [r3, #0]
    98c4:	b10b      	cbz	r3, 98ca <serial2_write+0x16>
    98c6:	2201      	movs	r2, #1
    98c8:	701a      	strb	r2, [r3, #0]
	const uint8_t *end = p + count;
    98ca:	1847      	adds	r7, r0, r1
	while (p < end) {
    98cc:	42b8      	cmp	r0, r7
    98ce:	d231      	bcs.n	9934 <serial2_write+0x80>
    98d0:	4e35      	ldr	r6, [pc, #212]	; (99a8 <serial2_write+0xf4>)
    98d2:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 99ac <serial2_write+0xf8>
    98d6:	4c36      	ldr	r4, [pc, #216]	; (99b0 <serial2_write+0xfc>)
		head = tx_buffer_head;
		if (++head >= tx_buffer_total_size_) head = 0;
		if (tx_buffer_tail == head) {
			UART1_C2 = C2_TX_ACTIVE;
    98d8:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 99b4 <serial2_write+0x100>
    98dc:	f100 0a01 	add.w	sl, r0, #1
    98e0:	e013      	b.n	990a <serial2_write+0x56>
		if (tx_buffer_tail == head) {
    98e2:	f003 0bff 	and.w	fp, r3, #255	; 0xff
    98e6:	b353      	cbz	r3, 993e <serial2_write+0x8a>
    98e8:	f04f 0b00 	mov.w	fp, #0
    98ec:	465d      	mov	r5, fp
					yield();
				}
			} while (tx_buffer_tail == head);
		}
		if (head < SERIAL2_TX_BUFFER_SIZE) {
			tx_buffer[head] = *p++;
    98ee:	4a32      	ldr	r2, [pc, #200]	; (99b8 <serial2_write+0x104>)
    98f0:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    98f4:	5553      	strb	r3, [r2, r5]
    98f6:	4652      	mov	r2, sl
		} else {
			tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = *p++;
		}
		transmitting = 1;
    98f8:	4930      	ldr	r1, [pc, #192]	; (99bc <serial2_write+0x108>)
    98fa:	2301      	movs	r3, #1
	while (p < end) {
    98fc:	42ba      	cmp	r2, r7
		transmitting = 1;
    98fe:	700b      	strb	r3, [r1, #0]
	while (p < end) {
    9900:	f10a 0a01 	add.w	sl, sl, #1
		tx_buffer_head = head;
    9904:	f886 b000 	strb.w	fp, [r6]
	while (p < end) {
    9908:	d214      	bcs.n	9934 <serial2_write+0x80>
		head = tx_buffer_head;
    990a:	7835      	ldrb	r5, [r6, #0]
		if (++head >= tx_buffer_total_size_) head = 0;
    990c:	f8d8 3000 	ldr.w	r3, [r8]
    9910:	3501      	adds	r5, #1
    9912:	42ab      	cmp	r3, r5
		if (tx_buffer_tail == head) {
    9914:	7823      	ldrb	r3, [r4, #0]
		if (++head >= tx_buffer_total_size_) head = 0;
    9916:	d9e4      	bls.n	98e2 <serial2_write+0x2e>
		if (tx_buffer_tail == head) {
    9918:	42ab      	cmp	r3, r5
		tx_buffer_head = head;
    991a:	fa5f fb85 	uxtb.w	fp, r5
		if (tx_buffer_tail == head) {
    991e:	d00f      	beq.n	9940 <serial2_write+0x8c>
		if (head < SERIAL2_TX_BUFFER_SIZE) {
    9920:	2d27      	cmp	r5, #39	; 0x27
    9922:	d9e4      	bls.n	98ee <serial2_write+0x3a>
			tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = *p++;
    9924:	4b26      	ldr	r3, [pc, #152]	; (99c0 <serial2_write+0x10c>)
    9926:	f81a 2c01 	ldrb.w	r2, [sl, #-1]
    992a:	681b      	ldr	r3, [r3, #0]
    992c:	3d28      	subs	r5, #40	; 0x28
    992e:	555a      	strb	r2, [r3, r5]
    9930:	4652      	mov	r2, sl
    9932:	e7e1      	b.n	98f8 <serial2_write+0x44>
	}
	UART1_C2 = C2_TX_ACTIVE;
    9934:	4b1f      	ldr	r3, [pc, #124]	; (99b4 <serial2_write+0x100>)
    9936:	22bc      	movs	r2, #188	; 0xbc
    9938:	70da      	strb	r2, [r3, #3]
}
    993a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (tx_buffer_tail == head) {
    993e:	465d      	mov	r5, fp
			UART1_C2 = C2_TX_ACTIVE;
    9940:	f06f 0343 	mvn.w	r3, #67	; 0x43
    9944:	f889 3003 	strb.w	r3, [r9, #3]
    9948:	e006      	b.n	9958 <serial2_write+0xa4>
					if ((UART1_S1 & UART_S1_TDRE)) {
    994a:	f899 3004 	ldrb.w	r3, [r9, #4]
    994e:	061b      	lsls	r3, r3, #24
    9950:	d40b      	bmi.n	996a <serial2_write+0xb6>
			} while (tx_buffer_tail == head);
    9952:	7823      	ldrb	r3, [r4, #0]
    9954:	42ab      	cmp	r3, r5
    9956:	d1e3      	bne.n	9920 <serial2_write+0x6c>
				int priority = nvic_execution_priority();
    9958:	f7ff fa16 	bl	8d88 <nvic_execution_priority>
				if (priority <= IRQ_PRIORITY) {
    995c:	2840      	cmp	r0, #64	; 0x40
    995e:	ddf4      	ble.n	994a <serial2_write+0x96>
				} else if (priority >= 256) {
    9960:	28ff      	cmp	r0, #255	; 0xff
    9962:	ddf6      	ble.n	9952 <serial2_write+0x9e>
					yield();
    9964:	f001 fbd8 	bl	b118 <yield>
    9968:	e7f3      	b.n	9952 <serial2_write+0x9e>
						uint32_t tail = tx_buffer_tail;
    996a:	7823      	ldrb	r3, [r4, #0]
						if (++tail >= tx_buffer_total_size_) tail = 0;
    996c:	f8d8 1000 	ldr.w	r1, [r8]
    9970:	1c5a      	adds	r2, r3, #1
    9972:	4291      	cmp	r1, r2
						uint32_t tail = tx_buffer_tail;
    9974:	b2db      	uxtb	r3, r3
						if (++tail >= tx_buffer_total_size_) tail = 0;
    9976:	d903      	bls.n	9980 <serial2_write+0xcc>
						if (tail < SERIAL2_TX_BUFFER_SIZE) {
    9978:	2a27      	cmp	r2, #39	; 0x27
    997a:	d80a      	bhi.n	9992 <serial2_write+0xde>
						tx_buffer_tail = tail;
    997c:	b2d1      	uxtb	r1, r2
    997e:	e001      	b.n	9984 <serial2_write+0xd0>
    9980:	2100      	movs	r1, #0
						if (++tail >= tx_buffer_total_size_) tail = 0;
    9982:	460a      	mov	r2, r1
							n = tx_buffer[tail];
    9984:	4b0c      	ldr	r3, [pc, #48]	; (99b8 <serial2_write+0x104>)
    9986:	5c9b      	ldrb	r3, [r3, r2]
    9988:	b2db      	uxtb	r3, r3
						UART1_D = n;
    998a:	f889 3007 	strb.w	r3, [r9, #7]
						tx_buffer_tail = tail;
    998e:	7021      	strb	r1, [r4, #0]
    9990:	e7df      	b.n	9952 <serial2_write+0x9e>
    9992:	b2d1      	uxtb	r1, r2
							n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    9994:	4a0a      	ldr	r2, [pc, #40]	; (99c0 <serial2_write+0x10c>)
    9996:	3b27      	subs	r3, #39	; 0x27
    9998:	6812      	ldr	r2, [r2, #0]
    999a:	5cd3      	ldrb	r3, [r2, r3]
    999c:	b2db      	uxtb	r3, r3
    999e:	e7f4      	b.n	998a <serial2_write+0xd6>
    99a0:	40048000 	.word	0x40048000
    99a4:	1fffb52c 	.word	0x1fffb52c
    99a8:	1fffb55c 	.word	0x1fffb55c
    99ac:	1fff87f0 	.word	0x1fff87f0
    99b0:	1fffb564 	.word	0x1fffb564
    99b4:	4006b000 	.word	0x4006b000
    99b8:	1fffb534 	.word	0x1fffb534
    99bc:	1fffb530 	.word	0x1fffb530
    99c0:	1fffb560 	.word	0x1fffb560

000099c4 <serial2_flush>:
	while (count-- > 0) serial2_putchar(*p++);
}
#endif

void serial2_flush(void)
{
    99c4:	b510      	push	{r4, lr}
	while (transmitting) yield(); // wait
    99c6:	4c04      	ldr	r4, [pc, #16]	; (99d8 <serial2_flush+0x14>)
    99c8:	7823      	ldrb	r3, [r4, #0]
    99ca:	b123      	cbz	r3, 99d6 <serial2_flush+0x12>
    99cc:	f001 fba4 	bl	b118 <yield>
    99d0:	7823      	ldrb	r3, [r4, #0]
    99d2:	2b00      	cmp	r3, #0
    99d4:	d1fa      	bne.n	99cc <serial2_flush+0x8>
}
    99d6:	bd10      	pop	{r4, pc}
    99d8:	1fffb530 	.word	0x1fffb530

000099dc <serial2_write_buffer_free>:

int serial2_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    99dc:	4a08      	ldr	r2, [pc, #32]	; (9a00 <serial2_write_buffer_free+0x24>)
	tail = tx_buffer_tail;
    99de:	4b09      	ldr	r3, [pc, #36]	; (9a04 <serial2_write_buffer_free+0x28>)
	head = tx_buffer_head;
    99e0:	7811      	ldrb	r1, [r2, #0]
	tail = tx_buffer_tail;
    99e2:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    99e4:	4291      	cmp	r1, r2
	head = tx_buffer_head;
    99e6:	b2c8      	uxtb	r0, r1
	tail = tx_buffer_tail;
    99e8:	b2d3      	uxtb	r3, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    99ea:	d202      	bcs.n	99f2 <serial2_write_buffer_free+0x16>
	return tail - head - 1;
    99ec:	3b01      	subs	r3, #1
    99ee:	1a18      	subs	r0, r3, r0
}
    99f0:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    99f2:	4a05      	ldr	r2, [pc, #20]	; (9a08 <serial2_write_buffer_free+0x2c>)
    99f4:	6812      	ldr	r2, [r2, #0]
    99f6:	3a01      	subs	r2, #1
    99f8:	4413      	add	r3, r2
    99fa:	1a18      	subs	r0, r3, r0
    99fc:	4770      	bx	lr
    99fe:	bf00      	nop
    9a00:	1fffb55c 	.word	0x1fffb55c
    9a04:	1fffb564 	.word	0x1fffb564
    9a08:	1fff87f0 	.word	0x1fff87f0

00009a0c <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    9a0c:	4a06      	ldr	r2, [pc, #24]	; (9a28 <serial2_available+0x1c>)
	tail = rx_buffer_tail;
    9a0e:	4b07      	ldr	r3, [pc, #28]	; (9a2c <serial2_available+0x20>)
	head = rx_buffer_head;
    9a10:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    9a12:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return head - tail;
    9a14:	4291      	cmp	r1, r2
	tail = rx_buffer_tail;
    9a16:	b2d0      	uxtb	r0, r2
	return rx_buffer_total_size_ + head - tail;
    9a18:	bf3c      	itt	cc
    9a1a:	4a05      	ldrcc	r2, [pc, #20]	; (9a30 <serial2_available+0x24>)
    9a1c:	6812      	ldrcc	r2, [r2, #0]
	head = rx_buffer_head;
    9a1e:	b2cb      	uxtb	r3, r1
	return rx_buffer_total_size_ + head - tail;
    9a20:	bf38      	it	cc
    9a22:	189b      	addcc	r3, r3, r2
    9a24:	1a18      	subs	r0, r3, r0
}
    9a26:	4770      	bx	lr
    9a28:	1fffb520 	.word	0x1fffb520
    9a2c:	1fffb528 	.word	0x1fffb528
    9a30:	1fff87e8 	.word	0x1fff87e8

00009a34 <serial2_getchar>:
int serial2_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    9a34:	4b1b      	ldr	r3, [pc, #108]	; (9aa4 <serial2_getchar+0x70>)
	tail = rx_buffer_tail;
    9a36:	491c      	ldr	r1, [pc, #112]	; (9aa8 <serial2_getchar+0x74>)
	head = rx_buffer_head;
    9a38:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    9a3a:	780b      	ldrb	r3, [r1, #0]
	if (head == tail) return -1;
    9a3c:	429a      	cmp	r2, r3
    9a3e:	d02e      	beq.n	9a9e <serial2_getchar+0x6a>
{
    9a40:	b510      	push	{r4, lr}
    9a42:	fa5f fe82 	uxtb.w	lr, r2
	if (++tail >= rx_buffer_total_size_) tail = 0;
    9a46:	4a19      	ldr	r2, [pc, #100]	; (9aac <serial2_getchar+0x78>)
    9a48:	b2d8      	uxtb	r0, r3
    9a4a:	6812      	ldr	r2, [r2, #0]
    9a4c:	1c43      	adds	r3, r0, #1
    9a4e:	429a      	cmp	r2, r3
    9a50:	d919      	bls.n	9a86 <serial2_getchar+0x52>
	if (tail < SERIAL2_RX_BUFFER_SIZE) {
    9a52:	2b3f      	cmp	r3, #63	; 0x3f
    9a54:	d81b      	bhi.n	9a8e <serial2_getchar+0x5a>
		c = rx_buffer[tail];
	} else {
		c = rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
	}
	rx_buffer_tail = tail;
    9a56:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer[tail];
    9a5a:	4815      	ldr	r0, [pc, #84]	; (9ab0 <serial2_getchar+0x7c>)
    9a5c:	5cc0      	ldrb	r0, [r0, r3]
    9a5e:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    9a60:	f881 c000 	strb.w	ip, [r1]
	if (rts_pin) {
    9a64:	4913      	ldr	r1, [pc, #76]	; (9ab4 <serial2_getchar+0x80>)
    9a66:	6809      	ldr	r1, [r1, #0]
    9a68:	b161      	cbz	r1, 9a84 <serial2_getchar+0x50>
		int avail;
		if (head >= tail) avail = head - tail;
    9a6a:	459e      	cmp	lr, r3
		else avail = rx_buffer_total_size_ + head - tail;
    9a6c:	bf3c      	itt	cc
    9a6e:	4472      	addcc	r2, lr
    9a70:	1ad3      	subcc	r3, r2, r3
		if (avail <= rts_low_watermark_) rts_assert();
    9a72:	4a11      	ldr	r2, [pc, #68]	; (9ab8 <serial2_getchar+0x84>)
    9a74:	6812      	ldr	r2, [r2, #0]
		if (head >= tail) avail = head - tail;
    9a76:	bf28      	it	cs
    9a78:	ebae 0303 	subcs.w	r3, lr, r3
		if (avail <= rts_low_watermark_) rts_assert();
    9a7c:	429a      	cmp	r2, r3
    9a7e:	d301      	bcc.n	9a84 <serial2_getchar+0x50>
    9a80:	2300      	movs	r3, #0
    9a82:	700b      	strb	r3, [r1, #0]
	}
	return c;
}
    9a84:	bd10      	pop	{r4, pc}
    9a86:	f04f 0c00 	mov.w	ip, #0
	if (++tail >= rx_buffer_total_size_) tail = 0;
    9a8a:	4663      	mov	r3, ip
    9a8c:	e7e5      	b.n	9a5a <serial2_getchar+0x26>
		c = rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
    9a8e:	4c0b      	ldr	r4, [pc, #44]	; (9abc <serial2_getchar+0x88>)
    9a90:	383f      	subs	r0, #63	; 0x3f
    9a92:	6824      	ldr	r4, [r4, #0]
    9a94:	5c20      	ldrb	r0, [r4, r0]
	rx_buffer_tail = tail;
    9a96:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
    9a9a:	b2c0      	uxtb	r0, r0
    9a9c:	e7e0      	b.n	9a60 <serial2_getchar+0x2c>
	if (head == tail) return -1;
    9a9e:	f04f 30ff 	mov.w	r0, #4294967295
}
    9aa2:	4770      	bx	lr
    9aa4:	1fffb520 	.word	0x1fffb520
    9aa8:	1fffb528 	.word	0x1fffb528
    9aac:	1fff87e8 	.word	0x1fff87e8
    9ab0:	1fffb4e0 	.word	0x1fffb4e0
    9ab4:	1fffb4dc 	.word	0x1fffb4dc
    9ab8:	1fff87e4 	.word	0x1fff87e4
    9abc:	1fffb524 	.word	0x1fffb524

00009ac0 <serial2_peek>:

int serial2_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    9ac0:	4a0d      	ldr	r2, [pc, #52]	; (9af8 <serial2_peek+0x38>)
	tail = rx_buffer_tail;
    9ac2:	4b0e      	ldr	r3, [pc, #56]	; (9afc <serial2_peek+0x3c>)
	head = rx_buffer_head;
    9ac4:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    9ac6:	781b      	ldrb	r3, [r3, #0]
	if (head == tail) return -1;
    9ac8:	4299      	cmp	r1, r3
	tail = rx_buffer_tail;
    9aca:	b2da      	uxtb	r2, r3
	if (head == tail) return -1;
    9acc:	d011      	beq.n	9af2 <serial2_peek+0x32>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    9ace:	490c      	ldr	r1, [pc, #48]	; (9b00 <serial2_peek+0x40>)
    9ad0:	6809      	ldr	r1, [r1, #0]
    9ad2:	1c53      	adds	r3, r2, #1
    9ad4:	4299      	cmp	r1, r3
    9ad6:	d907      	bls.n	9ae8 <serial2_peek+0x28>
	if (tail < SERIAL2_RX_BUFFER_SIZE) {
    9ad8:	2b3f      	cmp	r3, #63	; 0x3f
    9ada:	d906      	bls.n	9aea <serial2_peek+0x2a>
		return rx_buffer[tail];
	}
	return rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
    9adc:	4b09      	ldr	r3, [pc, #36]	; (9b04 <serial2_peek+0x44>)
    9ade:	3a3f      	subs	r2, #63	; 0x3f
    9ae0:	681b      	ldr	r3, [r3, #0]
    9ae2:	5c98      	ldrb	r0, [r3, r2]
    9ae4:	b2c0      	uxtb	r0, r0
    9ae6:	4770      	bx	lr
	if (++tail >= rx_buffer_total_size_) tail = 0;
    9ae8:	2300      	movs	r3, #0
		return rx_buffer[tail];
    9aea:	4a07      	ldr	r2, [pc, #28]	; (9b08 <serial2_peek+0x48>)
    9aec:	5cd0      	ldrb	r0, [r2, r3]
    9aee:	b2c0      	uxtb	r0, r0
    9af0:	4770      	bx	lr
	if (head == tail) return -1;
    9af2:	f04f 30ff 	mov.w	r0, #4294967295
}
    9af6:	4770      	bx	lr
    9af8:	1fffb520 	.word	0x1fffb520
    9afc:	1fffb528 	.word	0x1fffb528
    9b00:	1fff87e8 	.word	0x1fff87e8
    9b04:	1fffb524 	.word	0x1fffb524
    9b08:	1fffb4e0 	.word	0x1fffb4e0

00009b0c <serial2_clear>:

void serial2_clear(void)
{
#ifdef HAS_KINETISK_UART1_FIFO
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    9b0c:	4b0c      	ldr	r3, [pc, #48]	; (9b40 <serial2_clear+0x34>)
    9b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9b10:	051b      	lsls	r3, r3, #20
    9b12:	d514      	bpl.n	9b3e <serial2_clear+0x32>
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    9b14:	4b0b      	ldr	r3, [pc, #44]	; (9b44 <serial2_clear+0x38>)
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
#endif
	rx_buffer_head = rx_buffer_tail;
    9b16:	480c      	ldr	r0, [pc, #48]	; (9b48 <serial2_clear+0x3c>)
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    9b18:	78da      	ldrb	r2, [r3, #3]
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
    9b1a:	2140      	movs	r1, #64	; 0x40
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    9b1c:	f002 02cb 	and.w	r2, r2, #203	; 0xcb
    9b20:	70da      	strb	r2, [r3, #3]
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
    9b22:	7459      	strb	r1, [r3, #17]
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    9b24:	78da      	ldrb	r2, [r3, #3]
	rx_buffer_head = rx_buffer_tail;
    9b26:	4909      	ldr	r1, [pc, #36]	; (9b4c <serial2_clear+0x40>)
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    9b28:	f042 0234 	orr.w	r2, r2, #52	; 0x34
    9b2c:	70da      	strb	r2, [r3, #3]
	if (rts_pin) rts_assert();
    9b2e:	4a08      	ldr	r2, [pc, #32]	; (9b50 <serial2_clear+0x44>)
	rx_buffer_head = rx_buffer_tail;
    9b30:	7803      	ldrb	r3, [r0, #0]
	if (rts_pin) rts_assert();
    9b32:	6812      	ldr	r2, [r2, #0]
	rx_buffer_head = rx_buffer_tail;
    9b34:	b2db      	uxtb	r3, r3
    9b36:	700b      	strb	r3, [r1, #0]
	if (rts_pin) rts_assert();
    9b38:	b10a      	cbz	r2, 9b3e <serial2_clear+0x32>
    9b3a:	2300      	movs	r3, #0
    9b3c:	7013      	strb	r3, [r2, #0]
}
    9b3e:	4770      	bx	lr
    9b40:	40048000 	.word	0x40048000
    9b44:	4006b000 	.word	0x4006b000
    9b48:	1fffb528 	.word	0x1fffb528
    9b4c:	1fffb520 	.word	0x1fffb520
    9b50:	1fffb4dc 	.word	0x1fffb4dc

00009b54 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    9b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    9b58:	4c50      	ldr	r4, [pc, #320]	; (9c9c <uart1_status_isr+0x148>)
    9b5a:	7923      	ldrb	r3, [r4, #4]
    9b5c:	f013 0f30 	tst.w	r3, #48	; 0x30
    9b60:	d047      	beq.n	9bf2 <uart1_status_isr+0x9e>
		__disable_irq();
    9b62:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    9b64:	7da3      	ldrb	r3, [r4, #22]
		if (avail == 0) {
    9b66:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    9b6a:	2b00      	cmp	r3, #0
    9b6c:	d058      	beq.n	9c20 <uart1_status_isr+0xcc>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    9b6e:	b662      	cpsie	i
			head = rx_buffer_head;
    9b70:	f8df 812c 	ldr.w	r8, [pc, #300]	; 9ca0 <uart1_status_isr+0x14c>
			tail = rx_buffer_tail;
    9b74:	484b      	ldr	r0, [pc, #300]	; (9ca4 <uart1_status_isr+0x150>)
			head = rx_buffer_head;
    9b76:	f898 3000 	ldrb.w	r3, [r8]
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    9b7a:	4a4b      	ldr	r2, [pc, #300]	; (9ca8 <uart1_status_isr+0x154>)
			tail = rx_buffer_tail;
    9b7c:	7805      	ldrb	r5, [r0, #0]
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    9b7e:	6816      	ldr	r6, [r2, #0]
				if (newhead != tail) {
					head = newhead;
					if (newhead < SERIAL2_RX_BUFFER_SIZE) {
						rx_buffer[head] = n;
    9b80:	4f4a      	ldr	r7, [pc, #296]	; (9cac <uart1_status_isr+0x158>)
			head = rx_buffer_head;
    9b82:	fa5f fc83 	uxtb.w	ip, r3
					} else {
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    9b86:	4b4a      	ldr	r3, [pc, #296]	; (9cb0 <uart1_status_isr+0x15c>)
			tail = rx_buffer_tail;
    9b88:	b2ed      	uxtb	r5, r5
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    9b8a:	f8d3 e000 	ldr.w	lr, [r3]
    9b8e:	e008      	b.n	9ba2 <uart1_status_isr+0x4e>
				if (newhead != tail) {
    9b90:	b11d      	cbz	r5, 9b9a <uart1_status_isr+0x46>
    9b92:	f04f 0c00 	mov.w	ip, #0
						rx_buffer[head] = n;
    9b96:	f807 300c 	strb.w	r3, [r7, ip]
					}
				}
			} while (--avail > 0);
    9b9a:	1e4a      	subs	r2, r1, #1
    9b9c:	f012 01ff 	ands.w	r1, r2, #255	; 0xff
    9ba0:	d012      	beq.n	9bc8 <uart1_status_isr+0x74>
					n = UART1_D;
    9ba2:	79e3      	ldrb	r3, [r4, #7]
				newhead = head + 1;
    9ba4:	f10c 0201 	add.w	r2, ip, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    9ba8:	4296      	cmp	r6, r2
					n = UART1_D;
    9baa:	b2db      	uxtb	r3, r3
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    9bac:	d9f0      	bls.n	9b90 <uart1_status_isr+0x3c>
				if (newhead != tail) {
    9bae:	4295      	cmp	r5, r2
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    9bb0:	f1ac 003f 	sub.w	r0, ip, #63	; 0x3f
				if (newhead != tail) {
    9bb4:	d0f1      	beq.n	9b9a <uart1_status_isr+0x46>
					if (newhead < SERIAL2_RX_BUFFER_SIZE) {
    9bb6:	2a3f      	cmp	r2, #63	; 0x3f
    9bb8:	d96d      	bls.n	9c96 <uart1_status_isr+0x142>
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    9bba:	4694      	mov	ip, r2
			} while (--avail > 0);
    9bbc:	1e4a      	subs	r2, r1, #1
    9bbe:	f012 01ff 	ands.w	r1, r2, #255	; 0xff
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    9bc2:	f80e 3000 	strb.w	r3, [lr, r0]
			} while (--avail > 0);
    9bc6:	d1ec      	bne.n	9ba2 <uart1_status_isr+0x4e>
			rx_buffer_head = head;
    9bc8:	fa5f f38c 	uxtb.w	r3, ip
    9bcc:	f888 3000 	strb.w	r3, [r8]
			if (rts_pin) {
    9bd0:	4b38      	ldr	r3, [pc, #224]	; (9cb4 <uart1_status_isr+0x160>)
    9bd2:	6819      	ldr	r1, [r3, #0]
    9bd4:	b169      	cbz	r1, 9bf2 <uart1_status_isr+0x9e>
				int avail;
				if (head >= tail) avail = head - tail;
    9bd6:	45ac      	cmp	ip, r5
				else avail = rx_buffer_total_size_ + head - tail;
    9bd8:	bf3c      	itt	cc
    9bda:	1b72      	subcc	r2, r6, r5
    9bdc:	eb02 030c 	addcc.w	r3, r2, ip
				if (avail >= rts_high_watermark_) rts_deassert();
    9be0:	4a35      	ldr	r2, [pc, #212]	; (9cb8 <uart1_status_isr+0x164>)
    9be2:	6812      	ldr	r2, [r2, #0]
				if (head >= tail) avail = head - tail;
    9be4:	bf28      	it	cs
    9be6:	ebac 0305 	subcs.w	r3, ip, r5
				if (avail >= rts_high_watermark_) rts_deassert();
    9bea:	429a      	cmp	r2, r3
    9bec:	bf9c      	itt	ls
    9bee:	2301      	movls	r3, #1
    9bf0:	700b      	strbls	r3, [r1, #0]
			}
		}
	}
	c = UART1_C2;
    9bf2:	482a      	ldr	r0, [pc, #168]	; (9c9c <uart1_status_isr+0x148>)
    9bf4:	78c3      	ldrb	r3, [r0, #3]
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    9bf6:	061e      	lsls	r6, r3, #24
	c = UART1_C2;
    9bf8:	b2dd      	uxtb	r5, r3
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    9bfa:	d416      	bmi.n	9c2a <uart1_status_isr+0xd6>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    9bfc:	066a      	lsls	r2, r5, #25
    9bfe:	d50d      	bpl.n	9c1c <uart1_status_isr+0xc8>
    9c00:	4b26      	ldr	r3, [pc, #152]	; (9c9c <uart1_status_isr+0x148>)
    9c02:	791b      	ldrb	r3, [r3, #4]
    9c04:	065b      	lsls	r3, r3, #25
    9c06:	d509      	bpl.n	9c1c <uart1_status_isr+0xc8>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    9c08:	4b2c      	ldr	r3, [pc, #176]	; (9cbc <uart1_status_isr+0x168>)
		transmitting = 0;
    9c0a:	492d      	ldr	r1, [pc, #180]	; (9cc0 <uart1_status_isr+0x16c>)
		if (transmit_pin) transmit_deassert();
    9c0c:	681b      	ldr	r3, [r3, #0]
		transmitting = 0;
    9c0e:	2200      	movs	r2, #0
    9c10:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    9c12:	b103      	cbz	r3, 9c16 <uart1_status_isr+0xc2>
    9c14:	701a      	strb	r2, [r3, #0]
			reg &= ~UART_C3_TXDIR;
			UART1_C3 = reg;
			__enable_irq();
		}
		#endif		
		UART1_C2 = C2_TX_INACTIVE;
    9c16:	4b21      	ldr	r3, [pc, #132]	; (9c9c <uart1_status_isr+0x148>)
    9c18:	223c      	movs	r2, #60	; 0x3c
    9c1a:	70da      	strb	r2, [r3, #3]
	}
}
    9c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    9c20:	2340      	movs	r3, #64	; 0x40
			c = UART1_D;
    9c22:	79e2      	ldrb	r2, [r4, #7]
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    9c24:	7463      	strb	r3, [r4, #17]
			__enable_irq();
    9c26:	b662      	cpsie	i
    9c28:	e7e3      	b.n	9bf2 <uart1_status_isr+0x9e>
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    9c2a:	7903      	ldrb	r3, [r0, #4]
    9c2c:	061c      	lsls	r4, r3, #24
    9c2e:	d5e5      	bpl.n	9bfc <uart1_status_isr+0xa8>
		head = tx_buffer_head;
    9c30:	4b24      	ldr	r3, [pc, #144]	; (9cc4 <uart1_status_isr+0x170>)
			if (++tail >= tx_buffer_total_size_) tail = 0;
    9c32:	4a25      	ldr	r2, [pc, #148]	; (9cc8 <uart1_status_isr+0x174>)
		tail = tx_buffer_tail;
    9c34:	f8df e094 	ldr.w	lr, [pc, #148]	; 9ccc <uart1_status_isr+0x178>
		head = tx_buffer_head;
    9c38:	781c      	ldrb	r4, [r3, #0]
			if (++tail >= tx_buffer_total_size_) tail = 0;
    9c3a:	6816      	ldr	r6, [r2, #0]
		tail = tx_buffer_tail;
    9c3c:	f89e 3000 	ldrb.w	r3, [lr]
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    9c40:	4a23      	ldr	r2, [pc, #140]	; (9cd0 <uart1_status_isr+0x17c>)
				n = tx_buffer[tail];
    9c42:	4f24      	ldr	r7, [pc, #144]	; (9cd4 <uart1_status_isr+0x180>)
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    9c44:	f8d2 c000 	ldr.w	ip, [r2]
		head = tx_buffer_head;
    9c48:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    9c4a:	b2db      	uxtb	r3, r3
    9c4c:	e007      	b.n	9c5e <uart1_status_isr+0x10a>
			avail = UART1_S1;
    9c4e:	7903      	ldrb	r3, [r0, #4]
			if (++tail >= tx_buffer_total_size_) tail = 0;
    9c50:	2300      	movs	r3, #0
				n = tx_buffer[tail];
    9c52:	5cfa      	ldrb	r2, [r7, r3]
    9c54:	b2d2      	uxtb	r2, r2
			UART1_D = n;
    9c56:	71c2      	strb	r2, [r0, #7]
		} while (UART1_TCFIFO < 8);
    9c58:	7d02      	ldrb	r2, [r0, #20]
    9c5a:	2a07      	cmp	r2, #7
    9c5c:	d811      	bhi.n	9c82 <uart1_status_isr+0x12e>
			if (tail == head) break;
    9c5e:	42a3      	cmp	r3, r4
			if (++tail >= tx_buffer_total_size_) tail = 0;
    9c60:	f103 0101 	add.w	r1, r3, #1
			if (tail == head) break;
    9c64:	d00e      	beq.n	9c84 <uart1_status_isr+0x130>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    9c66:	428e      	cmp	r6, r1
    9c68:	d9f1      	bls.n	9c4e <uart1_status_isr+0xfa>
			if (tail < SERIAL2_TX_BUFFER_SIZE) {
    9c6a:	2927      	cmp	r1, #39	; 0x27
			avail = UART1_S1;
    9c6c:	7902      	ldrb	r2, [r0, #4]
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    9c6e:	f1a3 0327 	sub.w	r3, r3, #39	; 0x27
			if (tail < SERIAL2_TX_BUFFER_SIZE) {
    9c72:	d801      	bhi.n	9c78 <uart1_status_isr+0x124>
    9c74:	460b      	mov	r3, r1
    9c76:	e7ec      	b.n	9c52 <uart1_status_isr+0xfe>
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    9c78:	f81c 2003 	ldrb.w	r2, [ip, r3]
    9c7c:	460b      	mov	r3, r1
    9c7e:	b2d2      	uxtb	r2, r2
    9c80:	e7e9      	b.n	9c56 <uart1_status_isr+0x102>
		tx_buffer_tail = tail;
    9c82:	b2dc      	uxtb	r4, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    9c84:	4b05      	ldr	r3, [pc, #20]	; (9c9c <uart1_status_isr+0x148>)
		tx_buffer_tail = tail;
    9c86:	f88e 4000 	strb.w	r4, [lr]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    9c8a:	791a      	ldrb	r2, [r3, #4]
    9c8c:	0611      	lsls	r1, r2, #24
    9c8e:	bf44      	itt	mi
    9c90:	227c      	movmi	r2, #124	; 0x7c
    9c92:	70da      	strbmi	r2, [r3, #3]
    9c94:	e7b2      	b.n	9bfc <uart1_status_isr+0xa8>
    9c96:	4694      	mov	ip, r2
    9c98:	e77d      	b.n	9b96 <uart1_status_isr+0x42>
    9c9a:	bf00      	nop
    9c9c:	4006b000 	.word	0x4006b000
    9ca0:	1fffb520 	.word	0x1fffb520
    9ca4:	1fffb528 	.word	0x1fffb528
    9ca8:	1fff87e8 	.word	0x1fff87e8
    9cac:	1fffb4e0 	.word	0x1fffb4e0
    9cb0:	1fffb524 	.word	0x1fffb524
    9cb4:	1fffb4dc 	.word	0x1fffb4dc
    9cb8:	1fff87e0 	.word	0x1fff87e0
    9cbc:	1fffb52c 	.word	0x1fffb52c
    9cc0:	1fffb530 	.word	0x1fffb530
    9cc4:	1fffb55c 	.word	0x1fffb55c
    9cc8:	1fff87f0 	.word	0x1fff87f0
    9ccc:	1fffb564 	.word	0x1fffb564
    9cd0:	1fffb560 	.word	0x1fffb560
    9cd4:	1fffb534 	.word	0x1fffb534

00009cd8 <serial2_add_memory_for_read>:

void serial2_add_memory_for_read(void *buffer, size_t length)
{
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    9cd8:	4b09      	ldr	r3, [pc, #36]	; (9d00 <serial2_add_memory_for_read+0x28>)
{
    9cda:	b410      	push	{r4}
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    9cdc:	6018      	str	r0, [r3, #0]
	if (buffer) {
    9cde:	b160      	cbz	r0, 9cfa <serial2_add_memory_for_read+0x22>
		rx_buffer_total_size_ = SERIAL2_RX_BUFFER_SIZE + length;
    9ce0:	f101 0440 	add.w	r4, r1, #64	; 0x40
	} else {
		rx_buffer_total_size_ = SERIAL2_RX_BUFFER_SIZE;
	} 

	rts_low_watermark_ = RTS_LOW_WATERMARK + length;
    9ce4:	4b07      	ldr	r3, [pc, #28]	; (9d04 <serial2_add_memory_for_read+0x2c>)
    9ce6:	4808      	ldr	r0, [pc, #32]	; (9d08 <serial2_add_memory_for_read+0x30>)
    9ce8:	f101 021a 	add.w	r2, r1, #26
    9cec:	601a      	str	r2, [r3, #0]
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    9cee:	4b07      	ldr	r3, [pc, #28]	; (9d0c <serial2_add_memory_for_read+0x34>)
    9cf0:	6004      	str	r4, [r0, #0]
    9cf2:	3128      	adds	r1, #40	; 0x28
}
    9cf4:	bc10      	pop	{r4}
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    9cf6:	6019      	str	r1, [r3, #0]
}
    9cf8:	4770      	bx	lr
		rx_buffer_total_size_ = SERIAL2_RX_BUFFER_SIZE;
    9cfa:	2440      	movs	r4, #64	; 0x40
    9cfc:	e7f2      	b.n	9ce4 <serial2_add_memory_for_read+0xc>
    9cfe:	bf00      	nop
    9d00:	1fffb524 	.word	0x1fffb524
    9d04:	1fff87e4 	.word	0x1fff87e4
    9d08:	1fff87e8 	.word	0x1fff87e8
    9d0c:	1fff87e0 	.word	0x1fff87e0

00009d10 <serial2_add_memory_for_write>:

void serial2_add_memory_for_write(void *buffer, size_t length)
{
	tx_buffer_storage_ = (BUFTYPE*)buffer;
    9d10:	4b05      	ldr	r3, [pc, #20]	; (9d28 <serial2_add_memory_for_write+0x18>)
    9d12:	6018      	str	r0, [r3, #0]
	if (buffer) {
    9d14:	b118      	cbz	r0, 9d1e <serial2_add_memory_for_write+0xe>
		tx_buffer_total_size_ = SERIAL2_TX_BUFFER_SIZE + length;
    9d16:	4b05      	ldr	r3, [pc, #20]	; (9d2c <serial2_add_memory_for_write+0x1c>)
    9d18:	3128      	adds	r1, #40	; 0x28
    9d1a:	6019      	str	r1, [r3, #0]
	} else {
		tx_buffer_total_size_ = SERIAL2_TX_BUFFER_SIZE;
	} 
}
    9d1c:	4770      	bx	lr
    9d1e:	4b03      	ldr	r3, [pc, #12]	; (9d2c <serial2_add_memory_for_write+0x1c>)
		tx_buffer_total_size_ = SERIAL2_TX_BUFFER_SIZE;
    9d20:	2128      	movs	r1, #40	; 0x28
    9d22:	6019      	str	r1, [r3, #0]
}
    9d24:	4770      	bx	lr
    9d26:	bf00      	nop
    9d28:	1fffb560 	.word	0x1fffb560
    9d2c:	1fff87f0 	.word	0x1fff87f0

00009d30 <serial3_putchar.part.0>:
#else
	return 0;
#endif
}

void serial3_putchar(uint32_t c)
    9d30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
	if (transmit_pin) transmit_assert();
    9d34:	4b31      	ldr	r3, [pc, #196]	; (9dfc <serial3_putchar.part.0+0xcc>)
    9d36:	681b      	ldr	r3, [r3, #0]
void serial3_putchar(uint32_t c)
    9d38:	4607      	mov	r7, r0
	if (transmit_pin) transmit_assert();
    9d3a:	b10b      	cbz	r3, 9d40 <serial3_putchar.part.0+0x10>
    9d3c:	2201      	movs	r2, #1
    9d3e:	701a      	strb	r2, [r3, #0]
		reg |= UART_C3_TXDIR;
		UART2_C3 = reg;
		__enable_irq();
	}
	#endif 
	head = tx_buffer_head;
    9d40:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 9e00 <serial3_putchar.part.0+0xd0>
	if (++head >= tx_buffer_total_size_) head = 0;
    9d44:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 9e04 <serial3_putchar.part.0+0xd4>
	head = tx_buffer_head;
    9d48:	f899 4000 	ldrb.w	r4, [r9]
	if (++head >= tx_buffer_total_size_) head = 0;
    9d4c:	f8d8 3000 	ldr.w	r3, [r8]
	while (tx_buffer_tail == head) {
    9d50:	4d2d      	ldr	r5, [pc, #180]	; (9e08 <serial3_putchar.part.0+0xd8>)
	if (++head >= tx_buffer_total_size_) head = 0;
    9d52:	3401      	adds	r4, #1
    9d54:	429c      	cmp	r4, r3
	while (tx_buffer_tail == head) {
    9d56:	782b      	ldrb	r3, [r5, #0]
	if (++head >= tx_buffer_total_size_) head = 0;
    9d58:	d32a      	bcc.n	9db0 <serial3_putchar.part.0+0x80>
	while (tx_buffer_tail == head) {
    9d5a:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    9d5e:	2b00      	cmp	r3, #0
    9d60:	d13e      	bne.n	9de0 <serial3_putchar.part.0+0xb0>
	if (++head >= tx_buffer_total_size_) head = 0;
    9d62:	4654      	mov	r4, sl
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART2_S1 & UART_S1_TDRE)) {
    9d64:	4e29      	ldr	r6, [pc, #164]	; (9e0c <serial3_putchar.part.0+0xdc>)
				uint32_t tail = tx_buffer_tail;
				if (++tail >= tx_buffer_total_size_) tail = 0;
				if (tail < SERIAL3_TX_BUFFER_SIZE) {
					n = tx_buffer[tail];
    9d66:	f8df b0a8 	ldr.w	fp, [pc, #168]	; 9e10 <serial3_putchar.part.0+0xe0>
    9d6a:	e005      	b.n	9d78 <serial3_putchar.part.0+0x48>
			if ((UART2_S1 & UART_S1_TDRE)) {
    9d6c:	7933      	ldrb	r3, [r6, #4]
    9d6e:	061b      	lsls	r3, r3, #24
    9d70:	d423      	bmi.n	9dba <serial3_putchar.part.0+0x8a>
	while (tx_buffer_tail == head) {
    9d72:	782b      	ldrb	r3, [r5, #0]
    9d74:	42a3      	cmp	r3, r4
    9d76:	d10a      	bne.n	9d8e <serial3_putchar.part.0+0x5e>
		int priority = nvic_execution_priority();
    9d78:	f7ff f806 	bl	8d88 <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    9d7c:	2840      	cmp	r0, #64	; 0x40
    9d7e:	ddf5      	ble.n	9d6c <serial3_putchar.part.0+0x3c>
				}
				if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART2_D = n;
				tx_buffer_tail = tail;
			}
		} else if (priority >= 256) {
    9d80:	28ff      	cmp	r0, #255	; 0xff
    9d82:	ddf6      	ble.n	9d72 <serial3_putchar.part.0+0x42>
			yield(); // wait
    9d84:	f001 f9c8 	bl	b118 <yield>
	while (tx_buffer_tail == head) {
    9d88:	782b      	ldrb	r3, [r5, #0]
    9d8a:	42a3      	cmp	r3, r4
    9d8c:	d0f4      	beq.n	9d78 <serial3_putchar.part.0+0x48>
		}
	}
	if (head < SERIAL3_TX_BUFFER_SIZE) {
    9d8e:	2c27      	cmp	r4, #39	; 0x27
    9d90:	d929      	bls.n	9de6 <serial3_putchar.part.0+0xb6>
		tx_buffer[head] = c;
	} else {
		tx_buffer_storage_[head - SERIAL3_TX_BUFFER_SIZE] = c;
    9d92:	4b20      	ldr	r3, [pc, #128]	; (9e14 <serial3_putchar.part.0+0xe4>)
    9d94:	3c28      	subs	r4, #40	; 0x28
    9d96:	681b      	ldr	r3, [r3, #0]
    9d98:	b2ff      	uxtb	r7, r7
    9d9a:	551f      	strb	r7, [r3, r4]
	}
	transmitting = 1;
    9d9c:	4a1e      	ldr	r2, [pc, #120]	; (9e18 <serial3_putchar.part.0+0xe8>)
	tx_buffer_head = head;
	UART2_C2 = C2_TX_ACTIVE;
    9d9e:	4b1b      	ldr	r3, [pc, #108]	; (9e0c <serial3_putchar.part.0+0xdc>)
	transmitting = 1;
    9da0:	2101      	movs	r1, #1
    9da2:	7011      	strb	r1, [r2, #0]
	UART2_C2 = C2_TX_ACTIVE;
    9da4:	22ac      	movs	r2, #172	; 0xac
	tx_buffer_head = head;
    9da6:	f889 a000 	strb.w	sl, [r9]
	UART2_C2 = C2_TX_ACTIVE;
    9daa:	70da      	strb	r2, [r3, #3]
}
    9dac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (tx_buffer_tail == head) {
    9db0:	429c      	cmp	r4, r3
	tx_buffer_head = head;
    9db2:	fa5f fa84 	uxtb.w	sl, r4
	while (tx_buffer_tail == head) {
    9db6:	d0d5      	beq.n	9d64 <serial3_putchar.part.0+0x34>
    9db8:	e7e9      	b.n	9d8e <serial3_putchar.part.0+0x5e>
				uint32_t tail = tx_buffer_tail;
    9dba:	782b      	ldrb	r3, [r5, #0]
				if (++tail >= tx_buffer_total_size_) tail = 0;
    9dbc:	f8d8 1000 	ldr.w	r1, [r8]
    9dc0:	1c5a      	adds	r2, r3, #1
    9dc2:	428a      	cmp	r2, r1
				uint32_t tail = tx_buffer_tail;
    9dc4:	b2db      	uxtb	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    9dc6:	d203      	bcs.n	9dd0 <serial3_putchar.part.0+0xa0>
				if (tail < SERIAL3_TX_BUFFER_SIZE) {
    9dc8:	2a27      	cmp	r2, #39	; 0x27
    9dca:	d810      	bhi.n	9dee <serial3_putchar.part.0+0xbe>
				tx_buffer_tail = tail;
    9dcc:	b2d1      	uxtb	r1, r2
    9dce:	e001      	b.n	9dd4 <serial3_putchar.part.0+0xa4>
    9dd0:	2100      	movs	r1, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    9dd2:	460a      	mov	r2, r1
					n = tx_buffer[tail];
    9dd4:	f81b 3002 	ldrb.w	r3, [fp, r2]
    9dd8:	b2db      	uxtb	r3, r3
				UART2_D = n;
    9dda:	71f3      	strb	r3, [r6, #7]
				tx_buffer_tail = tail;
    9ddc:	7029      	strb	r1, [r5, #0]
    9dde:	e7c8      	b.n	9d72 <serial3_putchar.part.0+0x42>
	while (tx_buffer_tail == head) {
    9de0:	f04f 0a00 	mov.w	sl, #0
	if (++head >= tx_buffer_total_size_) head = 0;
    9de4:	4654      	mov	r4, sl
		tx_buffer[head] = c;
    9de6:	4b0a      	ldr	r3, [pc, #40]	; (9e10 <serial3_putchar.part.0+0xe0>)
    9de8:	b2ff      	uxtb	r7, r7
    9dea:	551f      	strb	r7, [r3, r4]
    9dec:	e7d6      	b.n	9d9c <serial3_putchar.part.0+0x6c>
				tx_buffer_tail = tail;
    9dee:	b2d1      	uxtb	r1, r2
					n = tx_buffer_storage_[tail-SERIAL3_TX_BUFFER_SIZE];
    9df0:	4a08      	ldr	r2, [pc, #32]	; (9e14 <serial3_putchar.part.0+0xe4>)
    9df2:	3b27      	subs	r3, #39	; 0x27
    9df4:	6812      	ldr	r2, [r2, #0]
    9df6:	5cd3      	ldrb	r3, [r2, r3]
    9df8:	b2db      	uxtb	r3, r3
    9dfa:	e7ee      	b.n	9dda <serial3_putchar.part.0+0xaa>
    9dfc:	1fffb5b8 	.word	0x1fffb5b8
    9e00:	1fffb5e8 	.word	0x1fffb5e8
    9e04:	1fff8804 	.word	0x1fff8804
    9e08:	1fffb5f0 	.word	0x1fffb5f0
    9e0c:	4006c000 	.word	0x4006c000
    9e10:	1fffb5c0 	.word	0x1fffb5c0
    9e14:	1fffb5ec 	.word	0x1fffb5ec
    9e18:	1fffb5bc 	.word	0x1fffb5bc

00009e1c <serial3_begin>:
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    9e1c:	4a1d      	ldr	r2, [pc, #116]	; (9e94 <serial3_begin+0x78>)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    9e1e:	491e      	ldr	r1, [pc, #120]	; (9e98 <serial3_begin+0x7c>)
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    9e20:	6b53      	ldr	r3, [r2, #52]	; 0x34
{
    9e22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    9e26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
	transmitting = 0;
    9e2a:	4d1c      	ldr	r5, [pc, #112]	; (9e9c <serial3_begin+0x80>)
	rx_buffer_head = 0;
    9e2c:	f8df 8070 	ldr.w	r8, [pc, #112]	; 9ea0 <serial3_begin+0x84>
	rx_buffer_tail = 0;
    9e30:	f8df 9070 	ldr.w	r9, [pc, #112]	; 9ea4 <serial3_begin+0x88>
	tx_buffer_head = 0;
    9e34:	4f1c      	ldr	r7, [pc, #112]	; (9ea8 <serial3_begin+0x8c>)
	tx_buffer_tail = 0;
    9e36:	4e1d      	ldr	r6, [pc, #116]	; (9eac <serial3_begin+0x90>)
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    9e38:	6353      	str	r3, [r2, #52]	; 0x34
	rx_buffer_head = 0;
    9e3a:	2300      	movs	r3, #0
    9e3c:	f888 3000 	strb.w	r3, [r8]
	rx_buffer_tail = 0;
    9e40:	2820      	cmp	r0, #32
    9e42:	f889 3000 	strb.w	r3, [r9]
	tx_buffer_head = 0;
    9e46:	703b      	strb	r3, [r7, #0]
	tx_buffer_tail = 0;
    9e48:	7033      	strb	r3, [r6, #0]
	transmitting = 0;
    9e4a:	702b      	strb	r3, [r5, #0]
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    9e4c:	f240 3513 	movw	r5, #787	; 0x313
    9e50:	608d      	str	r5, [r1, #8]
	UART2_BDH = (divisor >> 13) & 0x1F;
    9e52:	f502 3210 	add.w	r2, r2, #147456	; 0x24000
    9e56:	bf38      	it	cc
    9e58:	2020      	movcc	r0, #32
	CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    9e5a:	f44f 7551 	mov.w	r5, #836	; 0x344
    9e5e:	60cd      	str	r5, [r1, #12]
	UART2_BDH = (divisor >> 13) & 0x1F;
    9e60:	f3c0 3144 	ubfx	r1, r0, #13, #5
    9e64:	7011      	strb	r1, [r2, #0]
	UART2_BDL = (divisor >> 5) & 0xFF;
    9e66:	f3c0 1e47 	ubfx	lr, r0, #5, #8
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    9e6a:	4c11      	ldr	r4, [pc, #68]	; (9eb0 <serial3_begin+0x94>)
	UART2_BDL = (divisor >> 5) & 0xFF;
    9e6c:	f882 e001 	strb.w	lr, [r2, #1]
	UART2_C4 = divisor & 0x1F;
    9e70:	f000 001f 	and.w	r0, r0, #31
	UART2_C2 = C2_TX_INACTIVE;
    9e74:	212c      	movs	r1, #44	; 0x2c
	UART2_C4 = divisor & 0x1F;
    9e76:	7290      	strb	r0, [r2, #10]
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    9e78:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
	UART2_C1 = 0;
    9e7c:	7093      	strb	r3, [r2, #2]
	UART2_PFIFO = 0;
    9e7e:	7413      	strb	r3, [r2, #16]
	UART2_C2 = C2_TX_INACTIVE;
    9e80:	70d1      	strb	r1, [r2, #3]
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    9e82:	2240      	movs	r2, #64	; 0x40
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    9e84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    9e88:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    9e8c:	f8cc 3104 	str.w	r3, [ip, #260]	; 0x104
}
    9e90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9e94:	40048000 	.word	0x40048000
    9e98:	4004c000 	.word	0x4004c000
    9e9c:	1fffb5bc 	.word	0x1fffb5bc
    9ea0:	1fffb5ac 	.word	0x1fffb5ac
    9ea4:	1fffb5b4 	.word	0x1fffb5b4
    9ea8:	1fffb5e8 	.word	0x1fffb5e8
    9eac:	1fffb5f0 	.word	0x1fffb5f0
    9eb0:	e000e400 	.word	0xe000e400

00009eb4 <serial3_format>:
	c = UART2_C1;
    9eb4:	4b21      	ldr	r3, [pc, #132]	; (9f3c <serial3_format+0x88>)
	UART2_C1 = c;
    9eb6:	4921      	ldr	r1, [pc, #132]	; (9f3c <serial3_format+0x88>)
	c = UART2_C1;
    9eb8:	789b      	ldrb	r3, [r3, #2]
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    9eba:	f000 0203 	and.w	r2, r0, #3
    9ebe:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    9ec2:	4313      	orrs	r3, r2
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    9ec4:	0742      	lsls	r2, r0, #29
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    9ec6:	f000 020f 	and.w	r2, r0, #15
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    9eca:	bf48      	it	mi
    9ecc:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    9ed0:	2a04      	cmp	r2, #4
	UART2_C1 = c;
    9ed2:	708b      	strb	r3, [r1, #2]
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    9ed4:	d103      	bne.n	9ede <serial3_format+0x2a>
    9ed6:	798b      	ldrb	r3, [r1, #6]
    9ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9edc:	718b      	strb	r3, [r1, #6]
	c = UART2_S2 & ~0x10;
    9ede:	4b17      	ldr	r3, [pc, #92]	; (9f3c <serial3_format+0x88>)
	UART2_S2 = c;
    9ee0:	4a16      	ldr	r2, [pc, #88]	; (9f3c <serial3_format+0x88>)
	c = UART2_S2 & ~0x10;
    9ee2:	795b      	ldrb	r3, [r3, #5]
	if (format & 0x10) c |= 0x10;		// rx invert
    9ee4:	06c1      	lsls	r1, r0, #27
	c = UART2_S2 & ~0x10;
    9ee6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	if (format & 0x10) c |= 0x10;		// rx invert
    9eea:	bf48      	it	mi
    9eec:	f043 0310 	orrmi.w	r3, r3, #16
	UART2_S2 = c;
    9ef0:	7153      	strb	r3, [r2, #5]
	c = UART2_C3 & ~0x10;
    9ef2:	7993      	ldrb	r3, [r2, #6]
	if (format & 0x20) c |= 0x10;		// tx invert
    9ef4:	0682      	lsls	r2, r0, #26
	c = UART2_C3 & ~0x10;
    9ef6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	UART2_C3 = c;
    9efa:	4a10      	ldr	r2, [pc, #64]	; (9f3c <serial3_format+0x88>)
	if (format & 0x20) c |= 0x10;		// tx invert
    9efc:	bf48      	it	mi
    9efe:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    9f02:	f410 7000 	ands.w	r0, r0, #512	; 0x200
	UART2_C3 = c;
    9f06:	7193      	strb	r3, [r2, #6]
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    9f08:	d010      	beq.n	9f2c <serial3_format+0x78>
		c = UART2_C1;
    9f0a:	7893      	ldrb	r3, [r2, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    9f0c:	490c      	ldr	r1, [pc, #48]	; (9f40 <serial3_format+0x8c>)
		c |= UART_C1_LOOPS | UART_C1_RSRC;
    9f0e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		UART2_C1 = c;
    9f12:	7093      	strb	r3, [r2, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    9f14:	7809      	ldrb	r1, [r1, #0]
    9f16:	4b0b      	ldr	r3, [pc, #44]	; (9f44 <serial3_format+0x90>)
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT);
    9f18:	4a0b      	ldr	r2, [pc, #44]	; (9f48 <serial3_format+0x94>)
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    9f1a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    9f1e:	f240 3047 	movw	r0, #839	; 0x347
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    9f22:	685b      	ldr	r3, [r3, #4]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT);
    9f24:	4909      	ldr	r1, [pc, #36]	; (9f4c <serial3_format+0x98>)
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    9f26:	6018      	str	r0, [r3, #0]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT);
    9f28:	6011      	str	r1, [r2, #0]
    9f2a:	4770      	bx	lr
		if (transmit_pin == (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT)) transmit_pin = NULL;
    9f2c:	4b06      	ldr	r3, [pc, #24]	; (9f48 <serial3_format+0x94>)
    9f2e:	4a07      	ldr	r2, [pc, #28]	; (9f4c <serial3_format+0x98>)
    9f30:	6819      	ldr	r1, [r3, #0]
    9f32:	4291      	cmp	r1, r2
    9f34:	bf08      	it	eq
    9f36:	6018      	streq	r0, [r3, #0]
}
    9f38:	4770      	bx	lr
    9f3a:	bf00      	nop
    9f3c:	4006c000 	.word	0x4006c000
    9f40:	1fff8808 	.word	0x1fff8808
    9f44:	00014048 	.word	0x00014048
    9f48:	1fffb5b8 	.word	0x1fffb5b8
    9f4c:	42d800d4 	.word	0x42d800d4

00009f50 <serial3_end>:
{
    9f50:	b538      	push	{r3, r4, r5, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    9f52:	4b13      	ldr	r3, [pc, #76]	; (9fa0 <serial3_end+0x50>)
    9f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    9f56:	04db      	lsls	r3, r3, #19
    9f58:	d520      	bpl.n	9f9c <serial3_end+0x4c>
	while (transmitting) yield();  // wait for buffered data to send
    9f5a:	4c12      	ldr	r4, [pc, #72]	; (9fa4 <serial3_end+0x54>)
    9f5c:	7823      	ldrb	r3, [r4, #0]
    9f5e:	b123      	cbz	r3, 9f6a <serial3_end+0x1a>
    9f60:	f001 f8da 	bl	b118 <yield>
    9f64:	7823      	ldrb	r3, [r4, #0]
    9f66:	2b00      	cmp	r3, #0
    9f68:	d1fa      	bne.n	9f60 <serial3_end+0x10>
	UART2_C2 = 0;
    9f6a:	4a0f      	ldr	r2, [pc, #60]	; (9fa8 <serial3_end+0x58>)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    9f6c:	490f      	ldr	r1, [pc, #60]	; (9fac <serial3_end+0x5c>)
	NVIC_DISABLE_IRQ(IRQ_UART2_STATUS);
    9f6e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	UART2_C2 = 0;
    9f72:	2300      	movs	r3, #0
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    9f74:	f240 1003 	movw	r0, #259	; 0x103
	NVIC_DISABLE_IRQ(IRQ_UART2_STATUS);
    9f78:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    9f7c:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
	UART2_C2 = 0;
    9f80:	70d3      	strb	r3, [r2, #3]
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    9f82:	6088      	str	r0, [r1, #8]
	CORE_PIN8_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    9f84:	60c8      	str	r0, [r1, #12]
	if (rts_pin) rts_deassert();
    9f86:	490a      	ldr	r1, [pc, #40]	; (9fb0 <serial3_end+0x60>)
	rx_buffer_head = 0;
    9f88:	4c0a      	ldr	r4, [pc, #40]	; (9fb4 <serial3_end+0x64>)
	rx_buffer_tail = 0;
    9f8a:	480b      	ldr	r0, [pc, #44]	; (9fb8 <serial3_end+0x68>)
	if (rts_pin) rts_deassert();
    9f8c:	6809      	ldr	r1, [r1, #0]
	UART2_S1;
    9f8e:	7915      	ldrb	r5, [r2, #4]
	UART2_D; // clear leftover error status
    9f90:	79d2      	ldrb	r2, [r2, #7]
	rx_buffer_head = 0;
    9f92:	7023      	strb	r3, [r4, #0]
	rx_buffer_tail = 0;
    9f94:	7003      	strb	r3, [r0, #0]
	if (rts_pin) rts_deassert();
    9f96:	b109      	cbz	r1, 9f9c <serial3_end+0x4c>
    9f98:	2301      	movs	r3, #1
    9f9a:	700b      	strb	r3, [r1, #0]
}
    9f9c:	bd38      	pop	{r3, r4, r5, pc}
    9f9e:	bf00      	nop
    9fa0:	40048000 	.word	0x40048000
    9fa4:	1fffb5bc 	.word	0x1fffb5bc
    9fa8:	4006c000 	.word	0x4006c000
    9fac:	4004c000 	.word	0x4004c000
    9fb0:	1fffb568 	.word	0x1fffb568
    9fb4:	1fffb5ac 	.word	0x1fffb5ac
    9fb8:	1fffb5b4 	.word	0x1fffb5b4

00009fbc <serial3_set_transmit_pin>:
	while (transmitting) ;
    9fbc:	4a0a      	ldr	r2, [pc, #40]	; (9fe8 <serial3_set_transmit_pin+0x2c>)
{
    9fbe:	b538      	push	{r3, r4, r5, lr}
    9fc0:	4605      	mov	r5, r0
	while (transmitting) ;
    9fc2:	7813      	ldrb	r3, [r2, #0]
    9fc4:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    9fc8:	2b00      	cmp	r3, #0
    9fca:	d1fa      	bne.n	9fc2 <serial3_set_transmit_pin+0x6>
	pinMode(pin, OUTPUT);
    9fcc:	2101      	movs	r1, #1
    9fce:	4628      	mov	r0, r5
    9fd0:	f7ff f95e 	bl	9290 <pinMode>
	digitalWrite(pin, LOW);
    9fd4:	4621      	mov	r1, r4
    9fd6:	4628      	mov	r0, r5
    9fd8:	f7ff f926 	bl	9228 <digitalWrite>
	transmit_pin = portOutputRegister(pin);
    9fdc:	4a03      	ldr	r2, [pc, #12]	; (9fec <serial3_set_transmit_pin+0x30>)
    9fde:	4b04      	ldr	r3, [pc, #16]	; (9ff0 <serial3_set_transmit_pin+0x34>)
    9fe0:	f852 2035 	ldr.w	r2, [r2, r5, lsl #3]
    9fe4:	601a      	str	r2, [r3, #0]
}
    9fe6:	bd38      	pop	{r3, r4, r5, pc}
    9fe8:	1fffb5bc 	.word	0x1fffb5bc
    9fec:	00014048 	.word	0x00014048
    9ff0:	1fffb5b8 	.word	0x1fffb5b8

00009ff4 <serial3_set_tx>:
	if (opendrain) pin |= 128;
    9ff4:	b109      	cbz	r1, 9ffa <serial3_set_tx+0x6>
    9ff6:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	if (pin == tx_pin_num) return;
    9ffa:	4a11      	ldr	r2, [pc, #68]	; (a040 <serial3_set_tx+0x4c>)
    9ffc:	7813      	ldrb	r3, [r2, #0]
    9ffe:	4283      	cmp	r3, r0
    a000:	d016      	beq.n	a030 <serial3_set_tx+0x3c>
{
    a002:	b410      	push	{r4}
	if ((SIM_SCGC4 & SIM_SCGC4_UART2)) {
    a004:	4c0f      	ldr	r4, [pc, #60]	; (a044 <serial3_set_tx+0x50>)
    a006:	6b64      	ldr	r4, [r4, #52]	; 0x34
    a008:	04e4      	lsls	r4, r4, #19
    a00a:	d50e      	bpl.n	a02a <serial3_set_tx+0x36>
		switch (tx_pin_num & 127) {
    a00c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a010:	2b08      	cmp	r3, #8
    a012:	d102      	bne.n	a01a <serial3_set_tx+0x26>
			case 8:  CORE_PIN8_CONFIG = 0; break; // PTD3
    a014:	4b0c      	ldr	r3, [pc, #48]	; (a048 <serial3_set_tx+0x54>)
    a016:	2400      	movs	r4, #0
    a018:	60dc      	str	r4, [r3, #12]
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    a01a:	2900      	cmp	r1, #0
		switch (pin & 127) {
    a01c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    a020:	bf14      	ite	ne
    a022:	2160      	movne	r1, #96	; 0x60
    a024:	2144      	moveq	r1, #68	; 0x44
		switch (pin & 127) {
    a026:	2b08      	cmp	r3, #8
    a028:	d003      	beq.n	a032 <serial3_set_tx+0x3e>
	tx_pin_num = pin;
    a02a:	7010      	strb	r0, [r2, #0]
}
    a02c:	bc10      	pop	{r4}
    a02e:	4770      	bx	lr
    a030:	4770      	bx	lr
			case 8:  CORE_PIN8_CONFIG = cfg | PORT_PCR_MUX(3); break;
    a032:	4b05      	ldr	r3, [pc, #20]	; (a048 <serial3_set_tx+0x54>)
    a034:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    a038:	60d9      	str	r1, [r3, #12]
	tx_pin_num = pin;
    a03a:	7010      	strb	r0, [r2, #0]
}
    a03c:	bc10      	pop	{r4}
    a03e:	4770      	bx	lr
    a040:	1fff8808 	.word	0x1fff8808
    a044:	40048000 	.word	0x40048000
    a048:	4004c000 	.word	0x4004c000

0000a04c <serial3_set_rx>:
}
    a04c:	4770      	bx	lr
    a04e:	bf00      	nop

0000a050 <serial3_set_rts>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    a050:	4b0d      	ldr	r3, [pc, #52]	; (a088 <serial3_set_rts+0x38>)
    a052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a054:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    a058:	d013      	beq.n	a082 <serial3_set_rts+0x32>
	if (pin < CORE_NUM_DIGITAL) {
    a05a:	2821      	cmp	r0, #33	; 0x21
    a05c:	d903      	bls.n	a066 <serial3_set_rts+0x16>
		rts_pin = NULL;
    a05e:	4b0b      	ldr	r3, [pc, #44]	; (a08c <serial3_set_rts+0x3c>)
    a060:	2000      	movs	r0, #0
    a062:	6018      	str	r0, [r3, #0]
		return 0;
    a064:	4770      	bx	lr
		rts_pin = portOutputRegister(pin);
    a066:	4b0a      	ldr	r3, [pc, #40]	; (a090 <serial3_set_rts+0x40>)
{
    a068:	b510      	push	{r4, lr}
		rts_pin = portOutputRegister(pin);
    a06a:	4c08      	ldr	r4, [pc, #32]	; (a08c <serial3_set_rts+0x3c>)
    a06c:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    a070:	6023      	str	r3, [r4, #0]
		pinMode(pin, OUTPUT);
    a072:	2101      	movs	r1, #1
    a074:	f7ff f90c 	bl	9290 <pinMode>
		rts_assert();
    a078:	6823      	ldr	r3, [r4, #0]
    a07a:	2200      	movs	r2, #0
    a07c:	701a      	strb	r2, [r3, #0]
	return 1;
    a07e:	2001      	movs	r0, #1
}
    a080:	bd10      	pop	{r4, pc}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    a082:	4618      	mov	r0, r3
}
    a084:	4770      	bx	lr
    a086:	bf00      	nop
    a088:	40048000 	.word	0x40048000
    a08c:	1fffb568 	.word	0x1fffb568
    a090:	00014048 	.word	0x00014048

0000a094 <serial3_set_cts>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    a094:	4b0c      	ldr	r3, [pc, #48]	; (a0c8 <serial3_set_cts+0x34>)
    a096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a098:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    a09c:	d012      	beq.n	a0c4 <serial3_set_cts+0x30>
	if (pin == 14) {
    a09e:	280e      	cmp	r0, #14
    a0a0:	d109      	bne.n	a0b6 <serial3_set_cts+0x22>
		CORE_PIN14_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    a0a2:	4b0a      	ldr	r3, [pc, #40]	; (a0cc <serial3_set_cts+0x38>)
	UART2_MODEM |= UART_MODEM_TXCTSE;
    a0a4:	4a0a      	ldr	r2, [pc, #40]	; (a0d0 <serial3_set_cts+0x3c>)
		CORE_PIN14_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    a0a6:	f240 3102 	movw	r1, #770	; 0x302
    a0aa:	6059      	str	r1, [r3, #4]
	UART2_MODEM |= UART_MODEM_TXCTSE;
    a0ac:	7b53      	ldrb	r3, [r2, #13]
	return 1;
    a0ae:	2001      	movs	r0, #1
	UART2_MODEM |= UART_MODEM_TXCTSE;
    a0b0:	4303      	orrs	r3, r0
    a0b2:	7353      	strb	r3, [r2, #13]
	return 1;
    a0b4:	4770      	bx	lr
		UART2_MODEM &= ~UART_MODEM_TXCTSE;
    a0b6:	4a06      	ldr	r2, [pc, #24]	; (a0d0 <serial3_set_cts+0x3c>)
    a0b8:	7b53      	ldrb	r3, [r2, #13]
    a0ba:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		return 0;
    a0be:	2000      	movs	r0, #0
		UART2_MODEM &= ~UART_MODEM_TXCTSE;
    a0c0:	7353      	strb	r3, [r2, #13]
		return 0;
    a0c2:	4770      	bx	lr
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    a0c4:	4618      	mov	r0, r3
}
    a0c6:	4770      	bx	lr
    a0c8:	40048000 	.word	0x40048000
    a0cc:	4004c000 	.word	0x4004c000
    a0d0:	4006c000 	.word	0x4006c000

0000a0d4 <serial3_putchar>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    a0d4:	4b03      	ldr	r3, [pc, #12]	; (a0e4 <serial3_putchar+0x10>)
    a0d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a0d8:	04db      	lsls	r3, r3, #19
    a0da:	d501      	bpl.n	a0e0 <serial3_putchar+0xc>
    a0dc:	f7ff be28 	b.w	9d30 <serial3_putchar.part.0>
}
    a0e0:	4770      	bx	lr
    a0e2:	bf00      	nop
    a0e4:	40048000 	.word	0x40048000

0000a0e8 <serial3_write>:

void serial3_write(const void *buf, unsigned int count)
{
	const uint8_t *p = (const uint8_t *)buf;
	while (count-- > 0) serial3_putchar(*p++);
    a0e8:	b179      	cbz	r1, a10a <serial3_write+0x22>
{
    a0ea:	b570      	push	{r4, r5, r6, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    a0ec:	4e07      	ldr	r6, [pc, #28]	; (a10c <serial3_write+0x24>)
    a0ee:	4604      	mov	r4, r0
    a0f0:	1845      	adds	r5, r0, r1
    a0f2:	6b73      	ldr	r3, [r6, #52]	; 0x34
    a0f4:	04db      	lsls	r3, r3, #19
	while (count-- > 0) serial3_putchar(*p++);
    a0f6:	f104 0401 	add.w	r4, r4, #1
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    a0fa:	d503      	bpl.n	a104 <serial3_write+0x1c>
    a0fc:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    a100:	f7ff fe16 	bl	9d30 <serial3_putchar.part.0>
	while (count-- > 0) serial3_putchar(*p++);
    a104:	42ac      	cmp	r4, r5
    a106:	d1f4      	bne.n	a0f2 <serial3_write+0xa>
}
    a108:	bd70      	pop	{r4, r5, r6, pc}
    a10a:	4770      	bx	lr
    a10c:	40048000 	.word	0x40048000

0000a110 <serial3_flush>:

void serial3_flush(void)
{
    a110:	b510      	push	{r4, lr}
	while (transmitting) yield(); // wait
    a112:	4c04      	ldr	r4, [pc, #16]	; (a124 <serial3_flush+0x14>)
    a114:	7823      	ldrb	r3, [r4, #0]
    a116:	b123      	cbz	r3, a122 <serial3_flush+0x12>
    a118:	f000 fffe 	bl	b118 <yield>
    a11c:	7823      	ldrb	r3, [r4, #0]
    a11e:	2b00      	cmp	r3, #0
    a120:	d1fa      	bne.n	a118 <serial3_flush+0x8>
}
    a122:	bd10      	pop	{r4, pc}
    a124:	1fffb5bc 	.word	0x1fffb5bc

0000a128 <serial3_write_buffer_free>:

int serial3_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    a128:	4a08      	ldr	r2, [pc, #32]	; (a14c <serial3_write_buffer_free+0x24>)
	tail = tx_buffer_tail;
    a12a:	4b09      	ldr	r3, [pc, #36]	; (a150 <serial3_write_buffer_free+0x28>)
	head = tx_buffer_head;
    a12c:	7811      	ldrb	r1, [r2, #0]
	tail = tx_buffer_tail;
    a12e:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    a130:	4291      	cmp	r1, r2
	head = tx_buffer_head;
    a132:	b2c8      	uxtb	r0, r1
	tail = tx_buffer_tail;
    a134:	b2d3      	uxtb	r3, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    a136:	d202      	bcs.n	a13e <serial3_write_buffer_free+0x16>
	return tail - head - 1;
    a138:	3b01      	subs	r3, #1
    a13a:	1a18      	subs	r0, r3, r0
}
    a13c:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    a13e:	4a05      	ldr	r2, [pc, #20]	; (a154 <serial3_write_buffer_free+0x2c>)
    a140:	6812      	ldr	r2, [r2, #0]
    a142:	3a01      	subs	r2, #1
    a144:	4413      	add	r3, r2
    a146:	1a18      	subs	r0, r3, r0
    a148:	4770      	bx	lr
    a14a:	bf00      	nop
    a14c:	1fffb5e8 	.word	0x1fffb5e8
    a150:	1fffb5f0 	.word	0x1fffb5f0
    a154:	1fff8804 	.word	0x1fff8804

0000a158 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a158:	4a06      	ldr	r2, [pc, #24]	; (a174 <serial3_available+0x1c>)
	tail = rx_buffer_tail;
    a15a:	4b07      	ldr	r3, [pc, #28]	; (a178 <serial3_available+0x20>)
	head = rx_buffer_head;
    a15c:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    a15e:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return head - tail;
    a160:	4291      	cmp	r1, r2
	tail = rx_buffer_tail;
    a162:	b2d0      	uxtb	r0, r2
	return rx_buffer_total_size_ + head - tail;
    a164:	bf3c      	itt	cc
    a166:	4a05      	ldrcc	r2, [pc, #20]	; (a17c <serial3_available+0x24>)
    a168:	6812      	ldrcc	r2, [r2, #0]
	head = rx_buffer_head;
    a16a:	b2cb      	uxtb	r3, r1
	return rx_buffer_total_size_ + head - tail;
    a16c:	bf38      	it	cc
    a16e:	189b      	addcc	r3, r3, r2
    a170:	1a18      	subs	r0, r3, r0
}
    a172:	4770      	bx	lr
    a174:	1fffb5ac 	.word	0x1fffb5ac
    a178:	1fffb5b4 	.word	0x1fffb5b4
    a17c:	1fff8800 	.word	0x1fff8800

0000a180 <serial3_getchar>:
int serial3_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    a180:	4b1b      	ldr	r3, [pc, #108]	; (a1f0 <serial3_getchar+0x70>)
	tail = rx_buffer_tail;
    a182:	491c      	ldr	r1, [pc, #112]	; (a1f4 <serial3_getchar+0x74>)
	head = rx_buffer_head;
    a184:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    a186:	780b      	ldrb	r3, [r1, #0]
	if (head == tail) return -1;
    a188:	429a      	cmp	r2, r3
    a18a:	d02e      	beq.n	a1ea <serial3_getchar+0x6a>
{
    a18c:	b510      	push	{r4, lr}
    a18e:	fa5f fe82 	uxtb.w	lr, r2
	if (++tail >= rx_buffer_total_size_) tail = 0;
    a192:	4a19      	ldr	r2, [pc, #100]	; (a1f8 <serial3_getchar+0x78>)
    a194:	b2d8      	uxtb	r0, r3
    a196:	6812      	ldr	r2, [r2, #0]
    a198:	1c43      	adds	r3, r0, #1
    a19a:	429a      	cmp	r2, r3
    a19c:	d919      	bls.n	a1d2 <serial3_getchar+0x52>
	if (tail < SERIAL3_RX_BUFFER_SIZE) {
    a19e:	2b3f      	cmp	r3, #63	; 0x3f
    a1a0:	d81b      	bhi.n	a1da <serial3_getchar+0x5a>
		c = rx_buffer[tail];
	} else {
		c = rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
	}
	rx_buffer_tail = tail;
    a1a2:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer[tail];
    a1a6:	4815      	ldr	r0, [pc, #84]	; (a1fc <serial3_getchar+0x7c>)
    a1a8:	5cc0      	ldrb	r0, [r0, r3]
    a1aa:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    a1ac:	f881 c000 	strb.w	ip, [r1]
	if (rts_pin) {
    a1b0:	4913      	ldr	r1, [pc, #76]	; (a200 <serial3_getchar+0x80>)
    a1b2:	6809      	ldr	r1, [r1, #0]
    a1b4:	b161      	cbz	r1, a1d0 <serial3_getchar+0x50>
		int avail;
		if (head >= tail) avail = head - tail;
    a1b6:	459e      	cmp	lr, r3
		else avail = rx_buffer_total_size_ + head - tail;
    a1b8:	bf3c      	itt	cc
    a1ba:	4472      	addcc	r2, lr
    a1bc:	1ad3      	subcc	r3, r2, r3
		if (avail <= rts_low_watermark_) rts_assert();
    a1be:	4a11      	ldr	r2, [pc, #68]	; (a204 <serial3_getchar+0x84>)
    a1c0:	6812      	ldr	r2, [r2, #0]
		if (head >= tail) avail = head - tail;
    a1c2:	bf28      	it	cs
    a1c4:	ebae 0303 	subcs.w	r3, lr, r3
		if (avail <= rts_low_watermark_) rts_assert();
    a1c8:	429a      	cmp	r2, r3
    a1ca:	d301      	bcc.n	a1d0 <serial3_getchar+0x50>
    a1cc:	2300      	movs	r3, #0
    a1ce:	700b      	strb	r3, [r1, #0]
	}
	return c;
}
    a1d0:	bd10      	pop	{r4, pc}
    a1d2:	f04f 0c00 	mov.w	ip, #0
	if (++tail >= rx_buffer_total_size_) tail = 0;
    a1d6:	4663      	mov	r3, ip
    a1d8:	e7e5      	b.n	a1a6 <serial3_getchar+0x26>
		c = rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
    a1da:	4c0b      	ldr	r4, [pc, #44]	; (a208 <serial3_getchar+0x88>)
    a1dc:	383f      	subs	r0, #63	; 0x3f
    a1de:	6824      	ldr	r4, [r4, #0]
    a1e0:	5c20      	ldrb	r0, [r4, r0]
	rx_buffer_tail = tail;
    a1e2:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
    a1e6:	b2c0      	uxtb	r0, r0
    a1e8:	e7e0      	b.n	a1ac <serial3_getchar+0x2c>
	if (head == tail) return -1;
    a1ea:	f04f 30ff 	mov.w	r0, #4294967295
}
    a1ee:	4770      	bx	lr
    a1f0:	1fffb5ac 	.word	0x1fffb5ac
    a1f4:	1fffb5b4 	.word	0x1fffb5b4
    a1f8:	1fff8800 	.word	0x1fff8800
    a1fc:	1fffb56c 	.word	0x1fffb56c
    a200:	1fffb568 	.word	0x1fffb568
    a204:	1fff87fc 	.word	0x1fff87fc
    a208:	1fffb5b0 	.word	0x1fffb5b0

0000a20c <serial3_peek>:

int serial3_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a20c:	4a0d      	ldr	r2, [pc, #52]	; (a244 <serial3_peek+0x38>)
	tail = rx_buffer_tail;
    a20e:	4b0e      	ldr	r3, [pc, #56]	; (a248 <serial3_peek+0x3c>)
	head = rx_buffer_head;
    a210:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    a212:	781b      	ldrb	r3, [r3, #0]
	if (head == tail) return -1;
    a214:	4299      	cmp	r1, r3
	tail = rx_buffer_tail;
    a216:	b2da      	uxtb	r2, r3
	if (head == tail) return -1;
    a218:	d011      	beq.n	a23e <serial3_peek+0x32>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    a21a:	490c      	ldr	r1, [pc, #48]	; (a24c <serial3_peek+0x40>)
    a21c:	6809      	ldr	r1, [r1, #0]
    a21e:	1c53      	adds	r3, r2, #1
    a220:	4299      	cmp	r1, r3
    a222:	d907      	bls.n	a234 <serial3_peek+0x28>
	if (tail < SERIAL3_RX_BUFFER_SIZE) {
    a224:	2b3f      	cmp	r3, #63	; 0x3f
    a226:	d906      	bls.n	a236 <serial3_peek+0x2a>
		return rx_buffer[tail];
	}
	return rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
    a228:	4b09      	ldr	r3, [pc, #36]	; (a250 <serial3_peek+0x44>)
    a22a:	3a3f      	subs	r2, #63	; 0x3f
    a22c:	681b      	ldr	r3, [r3, #0]
    a22e:	5c98      	ldrb	r0, [r3, r2]
    a230:	b2c0      	uxtb	r0, r0
    a232:	4770      	bx	lr
	if (++tail >= rx_buffer_total_size_) tail = 0;
    a234:	2300      	movs	r3, #0
		return rx_buffer[tail];
    a236:	4a07      	ldr	r2, [pc, #28]	; (a254 <serial3_peek+0x48>)
    a238:	5cd0      	ldrb	r0, [r2, r3]
    a23a:	b2c0      	uxtb	r0, r0
    a23c:	4770      	bx	lr
	if (head == tail) return -1;
    a23e:	f04f 30ff 	mov.w	r0, #4294967295
}
    a242:	4770      	bx	lr
    a244:	1fffb5ac 	.word	0x1fffb5ac
    a248:	1fffb5b4 	.word	0x1fffb5b4
    a24c:	1fff8800 	.word	0x1fff8800
    a250:	1fffb5b0 	.word	0x1fffb5b0
    a254:	1fffb56c 	.word	0x1fffb56c

0000a258 <serial3_clear>:

void serial3_clear(void)
{
	rx_buffer_head = rx_buffer_tail;
    a258:	4b05      	ldr	r3, [pc, #20]	; (a270 <serial3_clear+0x18>)
	if (rts_pin) rts_assert();
    a25a:	4a06      	ldr	r2, [pc, #24]	; (a274 <serial3_clear+0x1c>)
	rx_buffer_head = rx_buffer_tail;
    a25c:	781b      	ldrb	r3, [r3, #0]
    a25e:	4906      	ldr	r1, [pc, #24]	; (a278 <serial3_clear+0x20>)
	if (rts_pin) rts_assert();
    a260:	6812      	ldr	r2, [r2, #0]
	rx_buffer_head = rx_buffer_tail;
    a262:	b2db      	uxtb	r3, r3
    a264:	700b      	strb	r3, [r1, #0]
	if (rts_pin) rts_assert();
    a266:	b10a      	cbz	r2, a26c <serial3_clear+0x14>
    a268:	2300      	movs	r3, #0
    a26a:	7013      	strb	r3, [r2, #0]
}
    a26c:	4770      	bx	lr
    a26e:	bf00      	nop
    a270:	1fffb5b4 	.word	0x1fffb5b4
    a274:	1fffb568 	.word	0x1fffb568
    a278:	1fffb5ac 	.word	0x1fffb5ac

0000a27c <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    a27c:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    a27e:	4b3a      	ldr	r3, [pc, #232]	; (a368 <uart2_status_isr+0xec>)
    a280:	791a      	ldrb	r2, [r3, #4]
    a282:	0695      	lsls	r5, r2, #26
    a284:	d524      	bpl.n	a2d0 <uart2_status_isr+0x54>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    a286:	4d39      	ldr	r5, [pc, #228]	; (a36c <uart2_status_isr+0xf0>)
		if (head >= rx_buffer_total_size_) head = 0;
    a288:	4939      	ldr	r1, [pc, #228]	; (a370 <uart2_status_isr+0xf4>)
			n = UART2_D;
    a28a:	79db      	ldrb	r3, [r3, #7]
		head = rx_buffer_head + 1;
    a28c:	782a      	ldrb	r2, [r5, #0]
		if (head >= rx_buffer_total_size_) head = 0;
    a28e:	680c      	ldr	r4, [r1, #0]
			n = UART2_D;
    a290:	b2d8      	uxtb	r0, r3
		head = rx_buffer_head + 1;
    a292:	1c53      	adds	r3, r2, #1
		if (head >= rx_buffer_total_size_) head = 0;
    a294:	429c      	cmp	r4, r3
		head = rx_buffer_head + 1;
    a296:	b2d2      	uxtb	r2, r2
		if (head >= rx_buffer_total_size_) head = 0;
    a298:	d831      	bhi.n	a2fe <uart2_status_isr+0x82>
		if (head != rx_buffer_tail) {
    a29a:	4b36      	ldr	r3, [pc, #216]	; (a374 <uart2_status_isr+0xf8>)
    a29c:	781a      	ldrb	r2, [r3, #0]
    a29e:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    a2a2:	b122      	cbz	r2, a2ae <uart2_status_isr+0x32>
    a2a4:	2200      	movs	r2, #0
    a2a6:	4613      	mov	r3, r2
			if (head < SERIAL3_RX_BUFFER_SIZE) {
				rx_buffer[head] = n;
    a2a8:	4933      	ldr	r1, [pc, #204]	; (a378 <uart2_status_isr+0xfc>)
    a2aa:	54c8      	strb	r0, [r1, r3]
			} else {
				rx_buffer_storage_[head-SERIAL3_RX_BUFFER_SIZE] = n;
			}

			rx_buffer_head = head;
    a2ac:	702a      	strb	r2, [r5, #0]
		}
		if (rts_pin) {
    a2ae:	4933      	ldr	r1, [pc, #204]	; (a37c <uart2_status_isr+0x100>)
    a2b0:	6809      	ldr	r1, [r1, #0]
    a2b2:	b169      	cbz	r1, a2d0 <uart2_status_isr+0x54>
			int avail;
			tail = tx_buffer_tail;
    a2b4:	4a32      	ldr	r2, [pc, #200]	; (a380 <uart2_status_isr+0x104>)
    a2b6:	7810      	ldrb	r0, [r2, #0]
			if (head >= tail) avail = head - tail;
    a2b8:	4298      	cmp	r0, r3
			tail = tx_buffer_tail;
    a2ba:	b2c2      	uxtb	r2, r0
			else avail = rx_buffer_total_size_ + head - tail;
    a2bc:	bf8a      	itet	hi
    a2be:	1aa2      	subhi	r2, r4, r2
			if (head >= tail) avail = head - tail;
    a2c0:	1a9b      	subls	r3, r3, r2
			else avail = rx_buffer_total_size_ + head - tail;
    a2c2:	189b      	addhi	r3, r3, r2
			if (avail >= rts_high_watermark_) rts_deassert();
    a2c4:	4a2f      	ldr	r2, [pc, #188]	; (a384 <uart2_status_isr+0x108>)
    a2c6:	6812      	ldr	r2, [r2, #0]
    a2c8:	429a      	cmp	r2, r3
    a2ca:	bf9c      	itt	ls
    a2cc:	2301      	movls	r3, #1
    a2ce:	700b      	strbls	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    a2d0:	4a25      	ldr	r2, [pc, #148]	; (a368 <uart2_status_isr+0xec>)
    a2d2:	78d3      	ldrb	r3, [r2, #3]
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    a2d4:	061c      	lsls	r4, r3, #24
	c = UART2_C2;
    a2d6:	b2d9      	uxtb	r1, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    a2d8:	d41e      	bmi.n	a318 <uart2_status_isr+0x9c>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    a2da:	064a      	lsls	r2, r1, #25
    a2dc:	d50d      	bpl.n	a2fa <uart2_status_isr+0x7e>
    a2de:	4b22      	ldr	r3, [pc, #136]	; (a368 <uart2_status_isr+0xec>)
    a2e0:	791b      	ldrb	r3, [r3, #4]
    a2e2:	065b      	lsls	r3, r3, #25
    a2e4:	d509      	bpl.n	a2fa <uart2_status_isr+0x7e>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    a2e6:	4b28      	ldr	r3, [pc, #160]	; (a388 <uart2_status_isr+0x10c>)
		transmitting = 0;
    a2e8:	4928      	ldr	r1, [pc, #160]	; (a38c <uart2_status_isr+0x110>)
		if (transmit_pin) transmit_deassert();
    a2ea:	681b      	ldr	r3, [r3, #0]
		transmitting = 0;
    a2ec:	2200      	movs	r2, #0
    a2ee:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    a2f0:	b103      	cbz	r3, a2f4 <uart2_status_isr+0x78>
    a2f2:	701a      	strb	r2, [r3, #0]
			reg &= ~UART_C3_TXDIR;
			UART2_C3 = reg;
			__enable_irq();
		}
		#endif
		UART2_C2 = C2_TX_INACTIVE;
    a2f4:	4b1c      	ldr	r3, [pc, #112]	; (a368 <uart2_status_isr+0xec>)
    a2f6:	222c      	movs	r2, #44	; 0x2c
    a2f8:	70da      	strb	r2, [r3, #3]
	}
}
    a2fa:	bc30      	pop	{r4, r5}
    a2fc:	4770      	bx	lr
		if (head != rx_buffer_tail) {
    a2fe:	491d      	ldr	r1, [pc, #116]	; (a374 <uart2_status_isr+0xf8>)
    a300:	7809      	ldrb	r1, [r1, #0]
    a302:	4299      	cmp	r1, r3
    a304:	d0d3      	beq.n	a2ae <uart2_status_isr+0x32>
			if (head < SERIAL3_RX_BUFFER_SIZE) {
    a306:	2b3f      	cmp	r3, #63	; 0x3f
    a308:	d92c      	bls.n	a364 <uart2_status_isr+0xe8>
				rx_buffer_storage_[head-SERIAL3_RX_BUFFER_SIZE] = n;
    a30a:	4921      	ldr	r1, [pc, #132]	; (a390 <uart2_status_isr+0x114>)
    a30c:	3a3f      	subs	r2, #63	; 0x3f
    a30e:	6809      	ldr	r1, [r1, #0]
    a310:	5488      	strb	r0, [r1, r2]
			rx_buffer_head = head;
    a312:	b2da      	uxtb	r2, r3
    a314:	702a      	strb	r2, [r5, #0]
    a316:	e7ca      	b.n	a2ae <uart2_status_isr+0x32>
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    a318:	7913      	ldrb	r3, [r2, #4]
    a31a:	0618      	lsls	r0, r3, #24
    a31c:	d5dd      	bpl.n	a2da <uart2_status_isr+0x5e>
		head = tx_buffer_head;
    a31e:	4b1d      	ldr	r3, [pc, #116]	; (a394 <uart2_status_isr+0x118>)
		tail = tx_buffer_tail;
    a320:	4817      	ldr	r0, [pc, #92]	; (a380 <uart2_status_isr+0x104>)
		head = tx_buffer_head;
    a322:	781d      	ldrb	r5, [r3, #0]
		tail = tx_buffer_tail;
    a324:	7803      	ldrb	r3, [r0, #0]
		if (head == tail) {
    a326:	429d      	cmp	r5, r3
		tail = tx_buffer_tail;
    a328:	b2dc      	uxtb	r4, r3
		if (head == tail) {
    a32a:	d008      	beq.n	a33e <uart2_status_isr+0xc2>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    a32c:	4a1a      	ldr	r2, [pc, #104]	; (a398 <uart2_status_isr+0x11c>)
    a32e:	6812      	ldr	r2, [r2, #0]
    a330:	1c63      	adds	r3, r4, #1
    a332:	429a      	cmp	r2, r3
    a334:	d906      	bls.n	a344 <uart2_status_isr+0xc8>
			if (tail < SERIAL3_TX_BUFFER_SIZE) {
    a336:	2b27      	cmp	r3, #39	; 0x27
    a338:	d80d      	bhi.n	a356 <uart2_status_isr+0xda>
			tx_buffer_tail = tail;
    a33a:	b2da      	uxtb	r2, r3
    a33c:	e004      	b.n	a348 <uart2_status_isr+0xcc>
			UART2_C2 = C2_TX_COMPLETING;
    a33e:	236c      	movs	r3, #108	; 0x6c
    a340:	70d3      	strb	r3, [r2, #3]
    a342:	e7ca      	b.n	a2da <uart2_status_isr+0x5e>
    a344:	2200      	movs	r2, #0
			if (++tail >= tx_buffer_total_size_) tail = 0;
    a346:	4613      	mov	r3, r2
				n = tx_buffer[tail];
    a348:	4c14      	ldr	r4, [pc, #80]	; (a39c <uart2_status_isr+0x120>)
    a34a:	5ce3      	ldrb	r3, [r4, r3]
    a34c:	b2db      	uxtb	r3, r3
			UART2_D = n;
    a34e:	4c06      	ldr	r4, [pc, #24]	; (a368 <uart2_status_isr+0xec>)
    a350:	71e3      	strb	r3, [r4, #7]
			tx_buffer_tail = tail;
    a352:	7002      	strb	r2, [r0, #0]
    a354:	e7c1      	b.n	a2da <uart2_status_isr+0x5e>
				n = tx_buffer_storage_[tail-SERIAL3_TX_BUFFER_SIZE];
    a356:	4a12      	ldr	r2, [pc, #72]	; (a3a0 <uart2_status_isr+0x124>)
    a358:	3c27      	subs	r4, #39	; 0x27
    a35a:	6815      	ldr	r5, [r2, #0]
			tx_buffer_tail = tail;
    a35c:	b2da      	uxtb	r2, r3
				n = tx_buffer_storage_[tail-SERIAL3_TX_BUFFER_SIZE];
    a35e:	5d2b      	ldrb	r3, [r5, r4]
    a360:	b2db      	uxtb	r3, r3
    a362:	e7f4      	b.n	a34e <uart2_status_isr+0xd2>
			rx_buffer_head = head;
    a364:	b2da      	uxtb	r2, r3
    a366:	e79f      	b.n	a2a8 <uart2_status_isr+0x2c>
    a368:	4006c000 	.word	0x4006c000
    a36c:	1fffb5ac 	.word	0x1fffb5ac
    a370:	1fff8800 	.word	0x1fff8800
    a374:	1fffb5b4 	.word	0x1fffb5b4
    a378:	1fffb56c 	.word	0x1fffb56c
    a37c:	1fffb568 	.word	0x1fffb568
    a380:	1fffb5f0 	.word	0x1fffb5f0
    a384:	1fff87f8 	.word	0x1fff87f8
    a388:	1fffb5b8 	.word	0x1fffb5b8
    a38c:	1fffb5bc 	.word	0x1fffb5bc
    a390:	1fffb5b0 	.word	0x1fffb5b0
    a394:	1fffb5e8 	.word	0x1fffb5e8
    a398:	1fff8804 	.word	0x1fff8804
    a39c:	1fffb5c0 	.word	0x1fffb5c0
    a3a0:	1fffb5ec 	.word	0x1fffb5ec

0000a3a4 <serial3_add_memory_for_read>:

void serial3_add_memory_for_read(void *buffer, size_t length)
{
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    a3a4:	4b09      	ldr	r3, [pc, #36]	; (a3cc <serial3_add_memory_for_read+0x28>)
{
    a3a6:	b410      	push	{r4}
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    a3a8:	6018      	str	r0, [r3, #0]
	if (buffer) {
    a3aa:	b160      	cbz	r0, a3c6 <serial3_add_memory_for_read+0x22>
		rx_buffer_total_size_ = SERIAL3_RX_BUFFER_SIZE + length;
    a3ac:	f101 0440 	add.w	r4, r1, #64	; 0x40
	} else {
		rx_buffer_total_size_ = SERIAL3_RX_BUFFER_SIZE;
	} 

	rts_low_watermark_ = RTS_LOW_WATERMARK + length;
    a3b0:	4b07      	ldr	r3, [pc, #28]	; (a3d0 <serial3_add_memory_for_read+0x2c>)
    a3b2:	4808      	ldr	r0, [pc, #32]	; (a3d4 <serial3_add_memory_for_read+0x30>)
    a3b4:	f101 021a 	add.w	r2, r1, #26
    a3b8:	601a      	str	r2, [r3, #0]
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    a3ba:	4b07      	ldr	r3, [pc, #28]	; (a3d8 <serial3_add_memory_for_read+0x34>)
    a3bc:	6004      	str	r4, [r0, #0]
    a3be:	3128      	adds	r1, #40	; 0x28
}
    a3c0:	bc10      	pop	{r4}
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    a3c2:	6019      	str	r1, [r3, #0]
}
    a3c4:	4770      	bx	lr
		rx_buffer_total_size_ = SERIAL3_RX_BUFFER_SIZE;
    a3c6:	2440      	movs	r4, #64	; 0x40
    a3c8:	e7f2      	b.n	a3b0 <serial3_add_memory_for_read+0xc>
    a3ca:	bf00      	nop
    a3cc:	1fffb5b0 	.word	0x1fffb5b0
    a3d0:	1fff87fc 	.word	0x1fff87fc
    a3d4:	1fff8800 	.word	0x1fff8800
    a3d8:	1fff87f8 	.word	0x1fff87f8

0000a3dc <serial3_add_memory_for_write>:

void serial3_add_memory_for_write(void *buffer, size_t length)
{
	tx_buffer_storage_ = (BUFTYPE*)buffer;
    a3dc:	4b05      	ldr	r3, [pc, #20]	; (a3f4 <serial3_add_memory_for_write+0x18>)
    a3de:	6018      	str	r0, [r3, #0]
	if (buffer) {
    a3e0:	b118      	cbz	r0, a3ea <serial3_add_memory_for_write+0xe>
		tx_buffer_total_size_ = SERIAL3_TX_BUFFER_SIZE + length;
    a3e2:	4b05      	ldr	r3, [pc, #20]	; (a3f8 <serial3_add_memory_for_write+0x1c>)
    a3e4:	3128      	adds	r1, #40	; 0x28
    a3e6:	6019      	str	r1, [r3, #0]
	} else {
		tx_buffer_total_size_ = SERIAL3_TX_BUFFER_SIZE;
	} 
}
    a3e8:	4770      	bx	lr
    a3ea:	4b03      	ldr	r3, [pc, #12]	; (a3f8 <serial3_add_memory_for_write+0x1c>)
		tx_buffer_total_size_ = SERIAL3_TX_BUFFER_SIZE;
    a3ec:	2128      	movs	r1, #40	; 0x28
    a3ee:	6019      	str	r1, [r3, #0]
}
    a3f0:	4770      	bx	lr
    a3f2:	bf00      	nop
    a3f4:	1fffb5ec 	.word	0x1fffb5ec
    a3f8:	1fff8804 	.word	0x1fff8804

0000a3fc <serialEvent2()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent2() __attribute__((weak));
void serialEvent2() {}		// No use calling this so disable if called...
    a3fc:	4770      	bx	lr
    a3fe:	bf00      	nop

0000a400 <serialEvent3()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent3() __attribute__((weak));
void serialEvent3() {}		// No use calling this so disable if called...
    a400:	4770      	bx	lr
    a402:	bf00      	nop

0000a404 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    a404:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    a406:	2b03      	cmp	r3, #3
    a408:	d817      	bhi.n	a43a <usb_rx+0x36>
	__disable_irq();
    a40a:	b672      	cpsid	i
	ret = rx_first[endpoint];
    a40c:	490c      	ldr	r1, [pc, #48]	; (a440 <usb_rx+0x3c>)
    a40e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    a412:	b180      	cbz	r0, a436 <usb_rx+0x32>
{
    a414:	b410      	push	{r4}
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    a416:	4c0b      	ldr	r4, [pc, #44]	; (a444 <usb_rx+0x40>)
    a418:	f8b0 c000 	ldrh.w	ip, [r0]
    a41c:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
    a420:	eba2 020c 	sub.w	r2, r2, ip
		rx_first[endpoint] = ret->next;
    a424:	f8d0 c004 	ldr.w	ip, [r0, #4]
    a428:	f841 c023 	str.w	ip, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    a42c:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    a430:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    a432:	bc10      	pop	{r4}
    a434:	4770      	bx	lr
	__enable_irq();
    a436:	b662      	cpsie	i
}
    a438:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    a43a:	2000      	movs	r0, #0
    a43c:	4770      	bx	lr
    a43e:	bf00      	nop
    a440:	1fffb684 	.word	0x1fffb684
    a444:	1fffb6d4 	.word	0x1fffb6d4

0000a448 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    a448:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    a44a:	2803      	cmp	r0, #3
    a44c:	d80b      	bhi.n	a466 <usb_tx_packet_count+0x1e>
	__disable_irq();
    a44e:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    a450:	4b07      	ldr	r3, [pc, #28]	; (a470 <usb_tx_packet_count+0x28>)
    a452:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    a456:	b143      	cbz	r3, a46a <usb_tx_packet_count+0x22>
	uint32_t count=0;
    a458:	2000      	movs	r0, #0
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    a45a:	685b      	ldr	r3, [r3, #4]
    a45c:	3001      	adds	r0, #1
    a45e:	2b00      	cmp	r3, #0
    a460:	d1fb      	bne.n	a45a <usb_tx_packet_count+0x12>
	__enable_irq();
    a462:	b662      	cpsie	i
	return count;
    a464:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return 0;
    a466:	2000      	movs	r0, #0
}
    a468:	4770      	bx	lr
	uint32_t count=0;
    a46a:	4618      	mov	r0, r3
    a46c:	e7f9      	b.n	a462 <usb_tx_packet_count+0x1a>
    a46e:	bf00      	nop
    a470:	1fffb6ac 	.word	0x1fffb6ac

0000a474 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    a474:	b410      	push	{r4}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    a476:	b672      	cpsid	i
	cfg = usb_endpoint_config_table;
    a478:	4a19      	ldr	r2, [pc, #100]	; (a4e0 <usb_rx_memory+0x6c>)
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    a47a:	4c1a      	ldr	r4, [pc, #104]	; (a4e4 <usb_rx_memory+0x70>)
	__disable_irq();
    a47c:	2304      	movs	r3, #4
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    a47e:	f812 1b01 	ldrb.w	r1, [r2], #1
    a482:	0709      	lsls	r1, r1, #28
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    a484:	f043 0c01 	orr.w	ip, r3, #1
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    a488:	d505      	bpl.n	a496 <usb_rx_memory+0x22>
			if (table[index(i, RX, EVEN)].desc == 0) {
    a48a:	f854 1033 	ldr.w	r1, [r4, r3, lsl #3]
    a48e:	b161      	cbz	r1, a4aa <usb_rx_memory+0x36>
			if (table[index(i, RX, ODD)].desc == 0) {
    a490:	f854 103c 	ldr.w	r1, [r4, ip, lsl #3]
    a494:	b1b9      	cbz	r1, a4c6 <usb_rx_memory+0x52>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    a496:	3304      	adds	r3, #4
    a498:	2b14      	cmp	r3, #20
    a49a:	d1f0      	bne.n	a47e <usb_rx_memory+0xa>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    a49c:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    a49e:	4b12      	ldr	r3, [pc, #72]	; (a4e8 <usb_rx_memory+0x74>)
    a4a0:	2200      	movs	r2, #0
    a4a2:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    a4a4:	bc10      	pop	{r4}
	usb_free(packet);
    a4a6:	f000 bc9b 	b.w	ade0 <usb_free>
				usb_rx_memory_needed--;
    a4aa:	490f      	ldr	r1, [pc, #60]	; (a4e8 <usb_rx_memory+0x74>)
				table[index(i, RX, EVEN)].addr = packet->buf;
    a4ac:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    a4b0:	3008      	adds	r0, #8
    a4b2:	6050      	str	r0, [r2, #4]
				usb_rx_memory_needed--;
    a4b4:	780a      	ldrb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    a4b6:	480d      	ldr	r0, [pc, #52]	; (a4ec <usb_rx_memory+0x78>)
    a4b8:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
				usb_rx_memory_needed--;
    a4bc:	3a01      	subs	r2, #1
    a4be:	700a      	strb	r2, [r1, #0]
				__enable_irq();
    a4c0:	b662      	cpsie	i
}
    a4c2:	bc10      	pop	{r4}
    a4c4:	4770      	bx	lr
				usb_rx_memory_needed--;
    a4c6:	4a08      	ldr	r2, [pc, #32]	; (a4e8 <usb_rx_memory+0x74>)
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a4c8:	4909      	ldr	r1, [pc, #36]	; (a4f0 <usb_rx_memory+0x7c>)
				table[index(i, RX, ODD)].addr = packet->buf;
    a4ca:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
    a4ce:	3008      	adds	r0, #8
    a4d0:	6058      	str	r0, [r3, #4]
				usb_rx_memory_needed--;
    a4d2:	7813      	ldrb	r3, [r2, #0]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    a4d4:	f844 103c 	str.w	r1, [r4, ip, lsl #3]
				usb_rx_memory_needed--;
    a4d8:	3b01      	subs	r3, #1
    a4da:	7013      	strb	r3, [r2, #0]
				__enable_irq();
    a4dc:	b662      	cpsie	i
				return;
    a4de:	e7f0      	b.n	a4c2 <usb_rx_memory+0x4e>
    a4e0:	000141d4 	.word	0x000141d4
    a4e4:	1fff8000 	.word	0x1fff8000
    a4e8:	1fffb6dc 	.word	0x1fffb6dc
    a4ec:	00400088 	.word	0x00400088
    a4f0:	004000c8 	.word	0x004000c8

0000a4f4 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    a4f4:	1e42      	subs	r2, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    a4f6:	2a03      	cmp	r2, #3
    a4f8:	d80e      	bhi.n	a518 <usb_tx+0x24>
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    a4fa:	4b1c      	ldr	r3, [pc, #112]	; (a56c <usb_tx+0x78>)
    a4fc:	0140      	lsls	r0, r0, #5
    a4fe:	f040 0010 	orr.w	r0, r0, #16
{
    a502:	b410      	push	{r4}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    a504:	4403      	add	r3, r0
	__disable_irq();
    a506:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    a508:	4c19      	ldr	r4, [pc, #100]	; (a570 <usb_tx+0x7c>)
    a50a:	5ca0      	ldrb	r0, [r4, r2]
    a50c:	2803      	cmp	r0, #3
    a50e:	d81c      	bhi.n	a54a <usb_tx+0x56>
    a510:	e8df f000 	tbb	[pc, r0]
    a514:	18031513 	.word	0x18031513
    a518:	4770      	bx	lr
    a51a:	2005      	movs	r0, #5
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    a51c:	54a0      	strb	r0, [r4, r2]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    a51e:	f013 0f08 	tst.w	r3, #8
    a522:	8808      	ldrh	r0, [r1, #0]
    a524:	bf14      	ite	ne
    a526:	22c8      	movne	r2, #200	; 0xc8
    a528:	2288      	moveq	r2, #136	; 0x88
	b->addr = packet->buf;
    a52a:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    a52c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
	b->addr = packet->buf;
    a530:	6059      	str	r1, [r3, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    a532:	601a      	str	r2, [r3, #0]
	__enable_irq();
    a534:	b662      	cpsie	i
}
    a536:	bc10      	pop	{r4}
    a538:	4770      	bx	lr
		next = TX_STATE_ODD_FREE;
    a53a:	2003      	movs	r0, #3
    a53c:	e7ee      	b.n	a51c <usb_tx+0x28>
		b++;
    a53e:	3308      	adds	r3, #8
		next = TX_STATE_EVEN_FREE;
    a540:	2002      	movs	r0, #2
		break;
    a542:	e7eb      	b.n	a51c <usb_tx+0x28>
		b++;
    a544:	3308      	adds	r3, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    a546:	2004      	movs	r0, #4
		break;
    a548:	e7e8      	b.n	a51c <usb_tx+0x28>
		if (tx_first[endpoint] == NULL) {
    a54a:	4b0a      	ldr	r3, [pc, #40]	; (a574 <usb_tx+0x80>)
    a54c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    a550:	b138      	cbz	r0, a562 <usb_tx+0x6e>
			tx_last[endpoint]->next = packet;
    a552:	4b09      	ldr	r3, [pc, #36]	; (a578 <usb_tx+0x84>)
    a554:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    a558:	6041      	str	r1, [r0, #4]
		tx_last[endpoint] = packet;
    a55a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		__enable_irq();
    a55e:	b662      	cpsie	i
		return;
    a560:	e7e9      	b.n	a536 <usb_tx+0x42>
			tx_first[endpoint] = packet;
    a562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    a566:	4b04      	ldr	r3, [pc, #16]	; (a578 <usb_tx+0x84>)
    a568:	e7f7      	b.n	a55a <usb_tx+0x66>
    a56a:	bf00      	nop
    a56c:	1fff8000 	.word	0x1fff8000
    a570:	1fffb6cc 	.word	0x1fffb6cc
    a574:	1fffb6ac 	.word	0x1fffb6ac
    a578:	1fffb6bc 	.word	0x1fffb6bc

0000a57c <usb_isr>:
}



void usb_isr(void)
{
    a57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    a580:	f8df a2cc 	ldr.w	sl, [pc, #716]	; a850 <usb_isr+0x2d4>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    a584:	f8df b2cc 	ldr.w	fp, [pc, #716]	; a854 <usb_isr+0x2d8>
{
    a588:	b085      	sub	sp, #20
    a58a:	e03d      	b.n	a608 <usb_isr+0x8c>
			bdt_t *b = stat2bufferdescriptor(stat);
    a58c:	4db2      	ldr	r5, [pc, #712]	; (a858 <usb_isr+0x2dc>)
    a58e:	089e      	lsrs	r6, r3, #2
    a590:	eb05 07c6 	add.w	r7, r5, r6, lsl #3
			endpoint--;	// endpoint is index to zero-based arrays
    a594:	3a01      	subs	r2, #1
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    a596:	6879      	ldr	r1, [r7, #4]
			if (stat & 0x08) { // transmit
    a598:	f013 0308 	ands.w	r3, r3, #8
			endpoint--;	// endpoint is index to zero-based arrays
    a59c:	b2d4      	uxtb	r4, r2
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    a59e:	f1a1 0008 	sub.w	r0, r1, #8
			if (stat & 0x08) { // transmit
    a5a2:	f040 80b8 	bne.w	a716 <usb_isr+0x19a>
				packet->len = b->desc >> 16;
    a5a6:	f855 2036 	ldr.w	r2, [r5, r6, lsl #3]
    a5aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
				if (packet->len > 0) {
    a5ae:	0c12      	lsrs	r2, r2, #16
				packet->len = b->desc >> 16;
    a5b0:	f821 cc08 	strh.w	ip, [r1, #-8]
				if (packet->len > 0) {
    a5b4:	f000 80a7 	beq.w	a706 <usb_isr+0x18a>
					packet->index = 0;
    a5b8:	f821 3c06 	strh.w	r3, [r1, #-6]
					packet->next = NULL;
    a5bc:	f841 3c04 	str.w	r3, [r1, #-4]
					if (rx_first[endpoint] == NULL) {
    a5c0:	4ba6      	ldr	r3, [pc, #664]	; (a85c <usb_isr+0x2e0>)
    a5c2:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    a5c6:	2a00      	cmp	r2, #0
    a5c8:	f000 8201 	beq.w	a9ce <usb_isr+0x452>
						rx_last[endpoint]->next = packet;
    a5cc:	4ba4      	ldr	r3, [pc, #656]	; (a860 <usb_isr+0x2e4>)
    a5ce:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    a5d2:	6050      	str	r0, [r2, #4]
					rx_last[endpoint] = packet;
    a5d4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    a5d8:	4ba2      	ldr	r3, [pc, #648]	; (a864 <usb_isr+0x2e8>)
    a5da:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
    a5de:	4494      	add	ip, r2
    a5e0:	f823 c014 	strh.w	ip, [r3, r4, lsl #1]
					packet = usb_malloc();
    a5e4:	f000 fbdc 	bl	ada0 <usb_malloc>
					if (packet) {
    a5e8:	2800      	cmp	r0, #0
    a5ea:	f000 81e9 	beq.w	a9c0 <usb_isr+0x444>
						b->desc = BDT_DESC(64,
    a5ee:	f017 0f08 	tst.w	r7, #8
    a5f2:	4b9d      	ldr	r3, [pc, #628]	; (a868 <usb_isr+0x2ec>)
						b->addr = packet->buf;
    a5f4:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    a5f8:	bf18      	it	ne
    a5fa:	465b      	movne	r3, fp
						b->addr = packet->buf;
    a5fc:	6078      	str	r0, [r7, #4]
						b->desc = BDT_DESC(64,
    a5fe:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    a602:	2308      	movs	r3, #8
    a604:	f88a 3080 	strb.w	r3, [sl, #128]	; 0x80
	status = USB0_ISTAT;
    a608:	f89a 3080 	ldrb.w	r3, [sl, #128]	; 0x80
	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    a60c:	0759      	lsls	r1, r3, #29
	status = USB0_ISTAT;
    a60e:	b2dc      	uxtb	r4, r3
	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    a610:	d51b      	bpl.n	a64a <usb_isr+0xce>
		if (usb_configuration) {
    a612:	4b96      	ldr	r3, [pc, #600]	; (a86c <usb_isr+0x2f0>)
    a614:	781b      	ldrb	r3, [r3, #0]
    a616:	b1ab      	cbz	r3, a644 <usb_isr+0xc8>
			t = usb_reboot_timer;
    a618:	4995      	ldr	r1, [pc, #596]	; (a870 <usb_isr+0x2f4>)
    a61a:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    a61c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    a620:	b12a      	cbz	r2, a62e <usb_isr+0xb2>
				usb_reboot_timer = --t;
    a622:	3b01      	subs	r3, #1
    a624:	b2db      	uxtb	r3, r3
    a626:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    a628:	2b00      	cmp	r3, #0
    a62a:	f000 8346 	beq.w	acba <usb_isr+0x73e>
			t = usb_cdc_transmit_flush_timer;
    a62e:	4991      	ldr	r1, [pc, #580]	; (a874 <usb_isr+0x2f8>)
    a630:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    a632:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    a636:	b12a      	cbz	r2, a644 <usb_isr+0xc8>
				usb_cdc_transmit_flush_timer = --t;
    a638:	3b01      	subs	r3, #1
    a63a:	b2db      	uxtb	r3, r3
    a63c:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    a63e:	2b00      	cmp	r3, #0
    a640:	f000 81eb 	beq.w	aa1a <usb_isr+0x49e>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    a644:	2304      	movs	r3, #4
    a646:	f88a 3080 	strb.w	r3, [sl, #128]	; 0x80
	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    a64a:	f014 0208 	ands.w	r2, r4, #8
    a64e:	f000 81cc 	beq.w	a9ea <usb_isr+0x46e>
		stat = USB0_STAT;
    a652:	f89a 2090 	ldrb.w	r2, [sl, #144]	; 0x90
    a656:	b2d3      	uxtb	r3, r2
		if (endpoint == 0) {
    a658:	0912      	lsrs	r2, r2, #4
    a65a:	d197      	bne.n	a58c <usb_isr+0x10>
	b = stat2bufferdescriptor(stat);
    a65c:	f8df 91f8 	ldr.w	r9, [pc, #504]	; a858 <usb_isr+0x2dc>
    a660:	089b      	lsrs	r3, r3, #2
    a662:	eb09 04c3 	add.w	r4, r9, r3, lsl #3
	pid = BDT_PID(b->desc);
    a666:	f859 0033 	ldr.w	r0, [r9, r3, lsl #3]
	buf = b->addr;
    a66a:	6864      	ldr	r4, [r4, #4]
	pid = BDT_PID(b->desc);
    a66c:	f3c0 0083 	ubfx	r0, r0, #2, #4
	switch (pid) {
    a670:	2809      	cmp	r0, #9
    a672:	d07c      	beq.n	a76e <usb_isr+0x1f2>
    a674:	d80f      	bhi.n	a696 <usb_isr+0x11a>
    a676:	3801      	subs	r0, #1
    a678:	2801      	cmp	r0, #1
    a67a:	d808      	bhi.n	a68e <usb_isr+0x112>
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    a67c:	4a7e      	ldr	r2, [pc, #504]	; (a878 <usb_isr+0x2fc>)
    a67e:	8815      	ldrh	r5, [r2, #0]
    a680:	f242 0021 	movw	r0, #8225	; 0x2021
    a684:	4285      	cmp	r5, r0
    a686:	f000 81fb 	beq.w	aa80 <usb_isr+0x504>
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    a68a:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    a68e:	2301      	movs	r3, #1
    a690:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
}
    a694:	e7b5      	b.n	a602 <usb_isr+0x86>
	switch (pid) {
    a696:	280d      	cmp	r0, #13
    a698:	d1f9      	bne.n	a68e <usb_isr+0x112>
		setup.word2 = *(uint32_t *)(buf + 4);
    a69a:	e9d4 0700 	ldrd	r0, r7, [r4]
		ep0_tx_ptr = NULL;
    a69e:	4d77      	ldr	r5, [pc, #476]	; (a87c <usb_isr+0x300>)
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    a6a0:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
		setup.word1 = *(uint32_t *)(buf);
    a6a4:	4e74      	ldr	r6, [pc, #464]	; (a878 <usb_isr+0x2fc>)
		ep0_tx_data_toggle = 1;
    a6a6:	4c76      	ldr	r4, [pc, #472]	; (a880 <usb_isr+0x304>)
		table[index(0, TX, EVEN)].desc = 0;
    a6a8:	f8c9 2010 	str.w	r2, [r9, #16]
    a6ac:	b283      	uxth	r3, r0
	switch (setup.wRequestAndType) {
    a6ae:	f240 6c81 	movw	ip, #1665	; 0x681
		table[index(0, TX, ODD)].desc = 0;
    a6b2:	f8c9 2018 	str.w	r2, [r9, #24]
		ep0_tx_ptr = NULL;
    a6b6:	602a      	str	r2, [r5, #0]
	switch (setup.wRequestAndType) {
    a6b8:	4563      	cmp	r3, ip
		ep0_tx_data_toggle = 1;
    a6ba:	f04f 0201 	mov.w	r2, #1
		setup.word2 = *(uint32_t *)(buf + 4);
    a6be:	e9c6 0700 	strd	r0, r7, [r6]
		ep0_tx_data_toggle = 1;
    a6c2:	7022      	strb	r2, [r4, #0]
	switch (setup.wRequestAndType) {
    a6c4:	f200 80ff 	bhi.w	a8c6 <usb_isr+0x34a>
    a6c8:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
    a6cc:	f080 82cb 	bcs.w	ac66 <usb_isr+0x6ea>
    a6d0:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    a6d4:	f000 8226 	beq.w	ab24 <usb_isr+0x5a8>
    a6d8:	f240 80de 	bls.w	a898 <usb_isr+0x31c>
    a6dc:	f240 3202 	movw	r2, #770	; 0x302
    a6e0:	4293      	cmp	r3, r2
    a6e2:	d17b      	bne.n	a7dc <usb_isr+0x260>
		i = setup.wIndex & 0x7F;
    a6e4:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    a6e8:	2f04      	cmp	r7, #4
    a6ea:	f200 8108 	bhi.w	a8fe <usb_isr+0x382>
    a6ee:	0c02      	lsrs	r2, r0, #16
    a6f0:	f040 8105 	bne.w	a8fe <usb_isr+0x382>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    a6f4:	4963      	ldr	r1, [pc, #396]	; (a884 <usb_isr+0x308>)
    a6f6:	f811 3027 	ldrb.w	r3, [r1, r7, lsl #2]
    a6fa:	f043 0302 	orr.w	r3, r3, #2
    a6fe:	f801 3027 	strb.w	r3, [r1, r7, lsl #2]
	const uint8_t *data = NULL;
    a702:	4613      	mov	r3, r2
		break;
    a704:	e070      	b.n	a7e8 <usb_isr+0x26c>
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    a706:	f017 0f08 	tst.w	r7, #8
    a70a:	4b57      	ldr	r3, [pc, #348]	; (a868 <usb_isr+0x2ec>)
    a70c:	bf18      	it	ne
    a70e:	465b      	movne	r3, fp
    a710:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
    a714:	e775      	b.n	a602 <usb_isr+0x86>
				usb_free(packet);
    a716:	f000 fb63 	bl	ade0 <usb_free>
				packet = tx_first[endpoint];
    a71a:	495b      	ldr	r1, [pc, #364]	; (a888 <usb_isr+0x30c>)
					switch (tx_state[endpoint]) {
    a71c:	4a5b      	ldr	r2, [pc, #364]	; (a88c <usb_isr+0x310>)
				packet = tx_first[endpoint];
    a71e:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
				if (packet) {
    a722:	2b00      	cmp	r3, #0
    a724:	f000 8157 	beq.w	a9d6 <usb_isr+0x45a>
					tx_first[endpoint] = packet->next;
    a728:	6858      	ldr	r0, [r3, #4]
    a72a:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
					switch (tx_state[endpoint]) {
    a72e:	5d11      	ldrb	r1, [r2, r4]
					b->addr = packet->buf;
    a730:	f103 0008 	add.w	r0, r3, #8
    a734:	6078      	str	r0, [r7, #4]
					switch (tx_state[endpoint]) {
    a736:	2903      	cmp	r1, #3
    a738:	d805      	bhi.n	a746 <usb_isr+0x1ca>
    a73a:	e8df f001 	tbb	[pc, r1]
    a73e:	0f12      	.short	0x0f12
    a740:	0215      	.short	0x0215
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    a742:	2104      	movs	r1, #4
    a744:	5511      	strb	r1, [r2, r4]
					b->desc = BDT_DESC(packet->len,
    a746:	881a      	ldrh	r2, [r3, #0]
    a748:	f017 0f08 	tst.w	r7, #8
    a74c:	bf14      	ite	ne
    a74e:	23c8      	movne	r3, #200	; 0xc8
    a750:	2388      	moveq	r3, #136	; 0x88
    a752:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    a756:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
    a75a:	e752      	b.n	a602 <usb_isr+0x86>
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    a75c:	2102      	movs	r1, #2
    a75e:	5511      	strb	r1, [r2, r4]
						break;
    a760:	e7f1      	b.n	a746 <usb_isr+0x1ca>
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    a762:	2103      	movs	r1, #3
    a764:	5511      	strb	r1, [r2, r4]
						break;
    a766:	e7ee      	b.n	a746 <usb_isr+0x1ca>
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    a768:	2105      	movs	r1, #5
    a76a:	5511      	strb	r1, [r2, r4]
						break;
    a76c:	e7eb      	b.n	a746 <usb_isr+0x1ca>
		data = ep0_tx_ptr;
    a76e:	4d43      	ldr	r5, [pc, #268]	; (a87c <usb_isr+0x300>)
    a770:	682a      	ldr	r2, [r5, #0]
		if (data) {
    a772:	b33a      	cbz	r2, a7c4 <usb_isr+0x248>
			size = ep0_tx_len;
    a774:	4946      	ldr	r1, [pc, #280]	; (a890 <usb_isr+0x314>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a776:	4c42      	ldr	r4, [pc, #264]	; (a880 <usb_isr+0x304>)
			size = ep0_tx_len;
    a778:	880f      	ldrh	r7, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a77a:	4846      	ldr	r0, [pc, #280]	; (a894 <usb_isr+0x318>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a77c:	f894 e000 	ldrb.w	lr, [r4]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a780:	7806      	ldrb	r6, [r0, #0]
    a782:	2f40      	cmp	r7, #64	; 0x40
    a784:	463b      	mov	r3, r7
    a786:	bf28      	it	cs
    a788:	2340      	movcs	r3, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a78a:	f1be 0f00 	cmp.w	lr, #0
	ep0_tx_data_toggle ^= 1;
    a78e:	f08e 0e01 	eor.w	lr, lr, #1
    a792:	f884 e000 	strb.w	lr, [r4]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a796:	f046 0402 	orr.w	r4, r6, #2
	ep0_tx_bdt_bank ^= 1;
    a79a:	f086 0601 	eor.w	r6, r6, #1
    a79e:	7006      	strb	r6, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a7a0:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
    a7a4:	6042      	str	r2, [r0, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a7a6:	bf14      	ite	ne
    a7a8:	20c8      	movne	r0, #200	; 0xc8
    a7aa:	2088      	moveq	r0, #136	; 0x88
    a7ac:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
			data += size;
    a7b0:	441a      	add	r2, r3
			ep0_tx_len -= size;
    a7b2:	1afb      	subs	r3, r7, r3
    a7b4:	b29b      	uxth	r3, r3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a7b6:	f849 0034 	str.w	r0, [r9, r4, lsl #3]
			ep0_tx_len -= size;
    a7ba:	800b      	strh	r3, [r1, #0]
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    a7bc:	2b00      	cmp	r3, #0
    a7be:	f000 8136 	beq.w	aa2e <usb_isr+0x4b2>
    a7c2:	602a      	str	r2, [r5, #0]
		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    a7c4:	4b2c      	ldr	r3, [pc, #176]	; (a878 <usb_isr+0x2fc>)
    a7c6:	881a      	ldrh	r2, [r3, #0]
    a7c8:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    a7cc:	f47f af5f 	bne.w	a68e <usb_isr+0x112>
			USB0_ADDR = setup.wValue;
    a7d0:	789a      	ldrb	r2, [r3, #2]
    a7d2:	f88a 2098 	strb.w	r2, [sl, #152]	; 0x98
			setup.bRequest = 0;
    a7d6:	2200      	movs	r2, #0
    a7d8:	705a      	strb	r2, [r3, #1]
			USB0_ADDR = setup.wValue;
    a7da:	e758      	b.n	a68e <usb_isr+0x112>
	switch (setup.wRequestAndType) {
    a7dc:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    a7e0:	f040 808d 	bne.w	a8fe <usb_isr+0x382>
	uint32_t datalen = 0;
    a7e4:	2200      	movs	r2, #0
	const uint8_t *data = NULL;
    a7e6:	4613      	mov	r3, r2
	if (datalen > setup.wLength) datalen = setup.wLength;
    a7e8:	f8b6 c006 	ldrh.w	ip, [r6, #6]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a7ec:	4829      	ldr	r0, [pc, #164]	; (a894 <usb_isr+0x318>)
    a7ee:	4594      	cmp	ip, r2
    a7f0:	bf28      	it	cs
    a7f2:	4694      	movcs	ip, r2
	if (size > EP0_SIZE) size = EP0_SIZE;
    a7f4:	4667      	mov	r7, ip
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a7f6:	7802      	ldrb	r2, [r0, #0]
    a7f8:	2f40      	cmp	r7, #64	; 0x40
    a7fa:	bf28      	it	cs
    a7fc:	2740      	movcs	r7, #64	; 0x40
    a7fe:	f042 0e02 	orr.w	lr, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a802:	043e      	lsls	r6, r7, #16
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a804:	eb09 08ce 	add.w	r8, r9, lr, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a808:	f046 06c8 	orr.w	r6, r6, #200	; 0xc8
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a80c:	f8c8 3004 	str.w	r3, [r8, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a810:	f849 603e 	str.w	r6, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    a814:	2600      	movs	r6, #0
	data += size;
    a816:	443b      	add	r3, r7
	ep0_tx_data_toggle ^= 1;
    a818:	7026      	strb	r6, [r4, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    a81a:	ebbc 0707 	subs.w	r7, ip, r7
	ep0_tx_bdt_bank ^= 1;
    a81e:	f082 0601 	eor.w	r6, r2, #1
    a822:	7006      	strb	r6, [r0, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    a824:	f040 8111 	bne.w	aa4a <usb_isr+0x4ce>
    a828:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
    a82c:	f04f 0501 	mov.w	r5, #1
    a830:	d909      	bls.n	a846 <usb_isr+0x2ca>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a832:	f046 0602 	orr.w	r6, r6, #2
	ep0_tx_bdt_bank ^= 1;
    a836:	7002      	strb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a838:	eb09 02c6 	add.w	r2, r9, r6, lsl #3
	ep0_tx_data_toggle ^= 1;
    a83c:	7025      	strb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    a83e:	6053      	str	r3, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    a840:	2388      	movs	r3, #136	; 0x88
    a842:	f849 3036 	str.w	r3, [r9, r6, lsl #3]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    a846:	2301      	movs	r3, #1
    a848:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    a84c:	e71f      	b.n	a68e <usb_isr+0x112>
    a84e:	bf00      	nop
    a850:	40072000 	.word	0x40072000
    a854:	004000c8 	.word	0x004000c8
    a858:	1fff8000 	.word	0x1fff8000
    a85c:	1fffb684 	.word	0x1fffb684
    a860:	1fffb694 	.word	0x1fffb694
    a864:	1fffb6d4 	.word	0x1fffb6d4
    a868:	00400088 	.word	0x00400088
    a86c:	1fffb6d0 	.word	0x1fffb6d0
    a870:	1fffb6d1 	.word	0x1fffb6d1
    a874:	1fffb6fc 	.word	0x1fffb6fc
    a878:	1fffb6a4 	.word	0x1fffb6a4
    a87c:	1fffb678 	.word	0x1fffb678
    a880:	1fffb675 	.word	0x1fffb675
    a884:	400720c0 	.word	0x400720c0
    a888:	1fffb6ac 	.word	0x1fffb6ac
    a88c:	1fffb6cc 	.word	0x1fffb6cc
    a890:	1fffb676 	.word	0x1fffb676
    a894:	1fffb674 	.word	0x1fffb674
	switch (setup.wRequestAndType) {
    a898:	2b80      	cmp	r3, #128	; 0x80
    a89a:	f000 818b 	beq.w	abb4 <usb_isr+0x638>
    a89e:	2b82      	cmp	r3, #130	; 0x82
    a8a0:	d12d      	bne.n	a8fe <usb_isr+0x382>
		i = setup.wIndex & 0x7F;
    a8a2:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS) {
    a8a6:	2f04      	cmp	r7, #4
    a8a8:	d829      	bhi.n	a8fe <usb_isr+0x382>
		reply_buffer[0] = 0;
    a8aa:	4aa7      	ldr	r2, [pc, #668]	; (ab48 <usb_isr+0x5cc>)
    a8ac:	2300      	movs	r3, #0
    a8ae:	8013      	strh	r3, [r2, #0]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    a8b0:	4ba6      	ldr	r3, [pc, #664]	; (ab4c <usb_isr+0x5d0>)
    a8b2:	f813 3027 	ldrb.w	r3, [r3, r7, lsl #2]
    a8b6:	079f      	lsls	r7, r3, #30
    a8b8:	f140 81fc 	bpl.w	acb4 <usb_isr+0x738>
    a8bc:	2301      	movs	r3, #1
    a8be:	7013      	strb	r3, [r2, #0]
		data = reply_buffer;
    a8c0:	4ba1      	ldr	r3, [pc, #644]	; (ab48 <usb_isr+0x5cc>)
		datalen = 2;
    a8c2:	2202      	movs	r2, #2
    a8c4:	e790      	b.n	a7e8 <usb_isr+0x26c>
	switch (setup.wRequestAndType) {
    a8c6:	f242 0c21 	movw	ip, #8225	; 0x2021
    a8ca:	4563      	cmp	r3, ip
    a8cc:	d0bb      	beq.n	a846 <usb_isr+0x2ca>
    a8ce:	d91d      	bls.n	a90c <usb_isr+0x390>
    a8d0:	f242 2221 	movw	r2, #8737	; 0x2221
    a8d4:	4293      	cmp	r3, r2
    a8d6:	d10d      	bne.n	a8f4 <usb_isr+0x378>
		switch (setup.wIndex) {
    a8d8:	b2bf      	uxth	r7, r7
    a8da:	2f00      	cmp	r7, #0
    a8dc:	d182      	bne.n	a7e4 <usb_isr+0x268>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    a8de:	4b9c      	ldr	r3, [pc, #624]	; (ab50 <usb_isr+0x5d4>)
    a8e0:	681a      	ldr	r2, [r3, #0]
    a8e2:	4b9c      	ldr	r3, [pc, #624]	; (ab54 <usb_isr+0x5d8>)
    a8e4:	601a      	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    a8e6:	4b9c      	ldr	r3, [pc, #624]	; (ab58 <usb_isr+0x5dc>)
    a8e8:	f3c0 4007 	ubfx	r0, r0, #16, #8
	uint32_t datalen = 0;
    a8ec:	2200      	movs	r2, #0
			usb_cdc_line_rtsdtr = setup.wValue;
    a8ee:	7018      	strb	r0, [r3, #0]
	const uint8_t *data = NULL;
    a8f0:	4613      	mov	r3, r2
			break;
    a8f2:	e779      	b.n	a7e8 <usb_isr+0x26c>
	switch (setup.wRequestAndType) {
    a8f4:	f242 3221 	movw	r2, #8993	; 0x2321
    a8f8:	4293      	cmp	r3, r2
    a8fa:	f43f af73 	beq.w	a7e4 <usb_isr+0x268>
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    a8fe:	230f      	movs	r3, #15
    a900:	f88a 30c0 	strb.w	r3, [sl, #192]	; 0xc0
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    a904:	2301      	movs	r3, #1
    a906:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    a90a:	e6c0      	b.n	a68e <usb_isr+0x112>
	switch (setup.wRequestAndType) {
    a90c:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    a910:	f000 814a 	beq.w	aba8 <usb_isr+0x62c>
    a914:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    a918:	d1f1      	bne.n	a8fe <usb_isr+0x382>
		usb_configuration = setup.wValue;
    a91a:	4b90      	ldr	r3, [pc, #576]	; (ab5c <usb_isr+0x5e0>)
    a91c:	f3c0 4007 	ubfx	r0, r0, #16, #8
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    a920:	2504      	movs	r5, #4
		usb_configuration = setup.wValue;
    a922:	7018      	strb	r0, [r3, #0]
			if (table[i].desc & BDT_OWN) {
    a924:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
    a928:	061a      	lsls	r2, r3, #24
    a92a:	d406      	bmi.n	a93a <usb_isr+0x3be>
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    a92c:	3501      	adds	r5, #1
    a92e:	2d14      	cmp	r5, #20
    a930:	d00c      	beq.n	a94c <usb_isr+0x3d0>
			if (table[i].desc & BDT_OWN) {
    a932:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
    a936:	061a      	lsls	r2, r3, #24
    a938:	d5f8      	bpl.n	a92c <usb_isr+0x3b0>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    a93a:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    a93e:	3501      	adds	r5, #1
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    a940:	6858      	ldr	r0, [r3, #4]
    a942:	3808      	subs	r0, #8
    a944:	f000 fa4c 	bl	ade0 <usb_free>
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    a948:	2d14      	cmp	r5, #20
    a94a:	d1f2      	bne.n	a932 <usb_isr+0x3b6>
    a94c:	4a84      	ldr	r2, [pc, #528]	; (ab60 <usb_isr+0x5e4>)
    a94e:	4b85      	ldr	r3, [pc, #532]	; (ab64 <usb_isr+0x5e8>)
    a950:	9202      	str	r2, [sp, #8]
    a952:	4a85      	ldr	r2, [pc, #532]	; (ab68 <usb_isr+0x5ec>)
    a954:	9201      	str	r2, [sp, #4]
    a956:	4e85      	ldr	r6, [pc, #532]	; (ab6c <usb_isr+0x5f0>)
    a958:	4a85      	ldr	r2, [pc, #532]	; (ab70 <usb_isr+0x5f4>)
    a95a:	f8df 8218 	ldr.w	r8, [pc, #536]	; ab74 <usb_isr+0x5f8>
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    a95e:	9403      	str	r4, [sp, #12]
    a960:	9200      	str	r2, [sp, #0]
			rx_first[i] = NULL;
    a962:	2500      	movs	r5, #0
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    a964:	461c      	mov	r4, r3
			p = rx_first[i];
    a966:	f856 7b04 	ldr.w	r7, [r6], #4
			while (p) {
    a96a:	b12f      	cbz	r7, a978 <usb_isr+0x3fc>
				n = p->next;
    a96c:	4638      	mov	r0, r7
    a96e:	687f      	ldr	r7, [r7, #4]
				usb_free(p);
    a970:	f000 fa36 	bl	ade0 <usb_free>
			while (p) {
    a974:	2f00      	cmp	r7, #0
    a976:	d1f9      	bne.n	a96c <usb_isr+0x3f0>
			rx_last[i] = NULL;
    a978:	9b00      	ldr	r3, [sp, #0]
			p = tx_first[i];
    a97a:	f8d8 7000 	ldr.w	r7, [r8]
			rx_last[i] = NULL;
    a97e:	f843 5b04 	str.w	r5, [r3], #4
			rx_first[i] = NULL;
    a982:	f846 5c04 	str.w	r5, [r6, #-4]
			rx_last[i] = NULL;
    a986:	9300      	str	r3, [sp, #0]
			while (p) {
    a988:	b12f      	cbz	r7, a996 <usb_isr+0x41a>
				n = p->next;
    a98a:	4638      	mov	r0, r7
    a98c:	687f      	ldr	r7, [r7, #4]
				usb_free(p);
    a98e:	f000 fa27 	bl	ade0 <usb_free>
			while (p) {
    a992:	2f00      	cmp	r7, #0
    a994:	d1f9      	bne.n	a98a <usb_isr+0x40e>
			tx_last[i] = NULL;
    a996:	9b02      	ldr	r3, [sp, #8]
			tx_first[i] = NULL;
    a998:	f848 5b04 	str.w	r5, [r8], #4
			tx_last[i] = NULL;
    a99c:	f843 5b04 	str.w	r5, [r3], #4
    a9a0:	9302      	str	r3, [sp, #8]
			usb_rx_byte_count_data[i] = 0;
    a9a2:	9b01      	ldr	r3, [sp, #4]
    a9a4:	f823 5b02 	strh.w	r5, [r3], #2
    a9a8:	9301      	str	r3, [sp, #4]
			switch (tx_state[i]) {
    a9aa:	7823      	ldrb	r3, [r4, #0]
    a9ac:	3b02      	subs	r3, #2
    a9ae:	2b03      	cmp	r3, #3
    a9b0:	f200 8109 	bhi.w	abc6 <usb_isr+0x64a>
    a9b4:	e8df f013 	tbh	[pc, r3, lsl #1]
    a9b8:	0104013f 	.word	0x0104013f
    a9bc:	0104013f 	.word	0x0104013f
						usb_rx_memory_needed++;
    a9c0:	4a6d      	ldr	r2, [pc, #436]	; (ab78 <usb_isr+0x5fc>)
						b->desc = 0;
    a9c2:	f845 0036 	str.w	r0, [r5, r6, lsl #3]
						usb_rx_memory_needed++;
    a9c6:	7813      	ldrb	r3, [r2, #0]
    a9c8:	3301      	adds	r3, #1
    a9ca:	7013      	strb	r3, [r2, #0]
    a9cc:	e619      	b.n	a602 <usb_isr+0x86>
						rx_first[endpoint] = packet;
    a9ce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    a9d2:	4b67      	ldr	r3, [pc, #412]	; (ab70 <usb_isr+0x5f4>)
    a9d4:	e5fe      	b.n	a5d4 <usb_isr+0x58>
					switch (tx_state[endpoint]) {
    a9d6:	5d11      	ldrb	r1, [r2, r4]
    a9d8:	2902      	cmp	r1, #2
    a9da:	d026      	beq.n	aa2a <usb_isr+0x4ae>
    a9dc:	f67f ae11 	bls.w	a602 <usb_isr+0x86>
    a9e0:	2903      	cmp	r1, #3
    a9e2:	d11d      	bne.n	aa20 <usb_isr+0x4a4>
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    a9e4:	2301      	movs	r3, #1
    a9e6:	5513      	strb	r3, [r2, r4]
						break;
    a9e8:	e60b      	b.n	a602 <usb_isr+0x86>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    a9ea:	07e0      	lsls	r0, r4, #31
    a9ec:	d46e      	bmi.n	aacc <usb_isr+0x550>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    a9ee:	0621      	lsls	r1, r4, #24
    a9f0:	d421      	bmi.n	aa36 <usb_isr+0x4ba>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    a9f2:	07a2      	lsls	r2, r4, #30
    a9f4:	d508      	bpl.n	aa08 <usb_isr+0x48c>
		uint8_t err = USB0_ERRSTAT;
    a9f6:	4b61      	ldr	r3, [pc, #388]	; (ab7c <usb_isr+0x600>)
    a9f8:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    a9fc:	2102      	movs	r1, #2
		uint8_t err = USB0_ERRSTAT;
    a9fe:	b2d2      	uxtb	r2, r2
		USB0_ERRSTAT = err;
    aa00:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		USB0_ISTAT = USB_ISTAT_ERROR;
    aa04:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    aa08:	06e3      	lsls	r3, r4, #27
    aa0a:	d503      	bpl.n	aa14 <usb_isr+0x498>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    aa0c:	4b5b      	ldr	r3, [pc, #364]	; (ab7c <usb_isr+0x600>)
    aa0e:	2210      	movs	r2, #16
    aa10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

}
    aa14:	b005      	add	sp, #20
    aa16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (t == 0) usb_serial_flush_callback();
    aa1a:	f000 fb59 	bl	b0d0 <usb_serial_flush_callback>
    aa1e:	e611      	b.n	a644 <usb_isr+0xc8>
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    aa20:	f017 0f08 	tst.w	r7, #8
    aa24:	bf14      	ite	ne
    aa26:	2303      	movne	r3, #3
    aa28:	2302      	moveq	r3, #2
    aa2a:	5513      	strb	r3, [r2, r4]
						break;
    aa2c:	e5e9      	b.n	a602 <usb_isr+0x86>
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    aa2e:	2f3f      	cmp	r7, #63	; 0x3f
    aa30:	bf98      	it	ls
    aa32:	2200      	movls	r2, #0
    aa34:	e6c5      	b.n	a7c2 <usb_isr+0x246>
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    aa36:	4b51      	ldr	r3, [pc, #324]	; (ab7c <usb_isr+0x600>)
		USB0_ISTAT = USB_ISTAT_STALL;
    aa38:	2280      	movs	r2, #128	; 0x80
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    aa3a:	210d      	movs	r1, #13
    aa3c:	f883 10c0 	strb.w	r1, [r3, #192]	; 0xc0
		USB0_ISTAT = USB_ISTAT_STALL;
    aa40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    aa44:	07a2      	lsls	r2, r4, #30
    aa46:	d5df      	bpl.n	aa08 <usb_isr+0x48c>
    aa48:	e7d5      	b.n	a9f6 <usb_isr+0x47a>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    aa4a:	f046 0602 	orr.w	r6, r6, #2
	ep0_tx_bdt_bank ^= 1;
    aa4e:	7002      	strb	r2, [r0, #0]
    aa50:	2f40      	cmp	r7, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    aa52:	eb09 00c6 	add.w	r0, r9, r6, lsl #3
    aa56:	463a      	mov	r2, r7
    aa58:	bf28      	it	cs
    aa5a:	2240      	movcs	r2, #64	; 0x40
    aa5c:	6043      	str	r3, [r0, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    aa5e:	0410      	lsls	r0, r2, #16
	data += size;
    aa60:	4413      	add	r3, r2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    aa62:	f040 0088 	orr.w	r0, r0, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    aa66:	2101      	movs	r1, #1
	if (datalen == 0 && size < EP0_SIZE) return;
    aa68:	1aba      	subs	r2, r7, r2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    aa6a:	f849 0036 	str.w	r0, [r9, r6, lsl #3]
	ep0_tx_data_toggle ^= 1;
    aa6e:	7021      	strb	r1, [r4, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    aa70:	d055      	beq.n	ab1e <usb_isr+0x5a2>
	ep0_tx_ptr = data;
    aa72:	602b      	str	r3, [r5, #0]
	ep0_tx_len = datalen;
    aa74:	4b42      	ldr	r3, [pc, #264]	; (ab80 <usb_isr+0x604>)
    aa76:	801a      	strh	r2, [r3, #0]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    aa78:	2301      	movs	r3, #1
    aa7a:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    aa7e:	e606      	b.n	a68e <usb_isr+0x112>
			switch (setup.wIndex) {
    aa80:	8892      	ldrh	r2, [r2, #4]
    aa82:	b95a      	cbnz	r2, aa9c <usb_isr+0x520>
    aa84:	4a3f      	ldr	r2, [pc, #252]	; (ab84 <usb_isr+0x608>)
    aa86:	1de5      	adds	r5, r4, #7
					*dst++ = *buf++;
    aa88:	f814 1b01 	ldrb.w	r1, [r4], #1
    aa8c:	f802 1f01 	strb.w	r1, [r2, #1]!
				for (i=0; i<7; i++) {
    aa90:	42ac      	cmp	r4, r5
    aa92:	d1f9      	bne.n	aa88 <usb_isr+0x50c>
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    aa94:	4a3c      	ldr	r2, [pc, #240]	; (ab88 <usb_isr+0x60c>)
    aa96:	6812      	ldr	r2, [r2, #0]
    aa98:	2a86      	cmp	r2, #134	; 0x86
    aa9a:	d03c      	beq.n	ab16 <usb_isr+0x59a>
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    aa9c:	4c3b      	ldr	r4, [pc, #236]	; (ab8c <usb_isr+0x610>)
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    aa9e:	483c      	ldr	r0, [pc, #240]	; (ab90 <usb_isr+0x614>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    aaa0:	7825      	ldrb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    aaa2:	7802      	ldrb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    aaa4:	2d00      	cmp	r5, #0
	ep0_tx_data_toggle ^= 1;
    aaa6:	f085 0501 	eor.w	r5, r5, #1
    aaaa:	7025      	strb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    aaac:	f042 0402 	orr.w	r4, r2, #2
	ep0_tx_bdt_bank ^= 1;
    aab0:	f082 0201 	eor.w	r2, r2, #1
    aab4:	7002      	strb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    aab6:	eb09 02c4 	add.w	r2, r9, r4, lsl #3
    aaba:	f04f 0000 	mov.w	r0, #0
    aabe:	6050      	str	r0, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    aac0:	bf14      	ite	ne
    aac2:	22c8      	movne	r2, #200	; 0xc8
    aac4:	2288      	moveq	r2, #136	; 0x88
    aac6:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
}
    aaca:	e5de      	b.n	a68a <usb_isr+0x10e>
		USB0_CTL = USB_CTL_ODDRST;
    aacc:	4b2b      	ldr	r3, [pc, #172]	; (ab7c <usb_isr+0x600>)
		ep0_tx_bdt_bank = 0;
    aace:	4830      	ldr	r0, [pc, #192]	; (ab90 <usb_isr+0x614>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    aad0:	4930      	ldr	r1, [pc, #192]	; (ab94 <usb_isr+0x618>)
    aad2:	4c31      	ldr	r4, [pc, #196]	; (ab98 <usb_isr+0x61c>)
		USB0_CTL = USB_CTL_ODDRST;
    aad4:	2502      	movs	r5, #2
    aad6:	f883 5094 	strb.w	r5, [r3, #148]	; 0x94
		ep0_tx_bdt_bank = 0;
    aada:	7002      	strb	r2, [r0, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    aadc:	482f      	ldr	r0, [pc, #188]	; (ab9c <usb_isr+0x620>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    aade:	600c      	str	r4, [r1, #0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    aae0:	4d2f      	ldr	r5, [pc, #188]	; (aba0 <usb_isr+0x624>)
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    aae2:	6048      	str	r0, [r1, #4]
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    aae4:	608c      	str	r4, [r1, #8]
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    aae6:	240d      	movs	r4, #13
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    aae8:	60cd      	str	r5, [r1, #12]
		USB0_ERRSTAT = 0xFF;
    aaea:	20ff      	movs	r0, #255	; 0xff
		table[index(0, TX, EVEN)].desc = 0;
    aaec:	610a      	str	r2, [r1, #16]
		table[index(0, TX, ODD)].desc = 0;
    aaee:	618a      	str	r2, [r1, #24]
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    aaf0:	f883 40c0 	strb.w	r4, [r3, #192]	; 0xc0
		USB0_CTL = USB_CTL_USBENSOFEN;
    aaf4:	2101      	movs	r1, #1
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    aaf6:	249f      	movs	r4, #159	; 0x9f
		USB0_ERRSTAT = 0xFF;
    aaf8:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
		USB0_ISTAT = 0xFF;
    aafc:	f883 0080 	strb.w	r0, [r3, #128]	; 0x80
		USB0_ADDR = 0;
    ab00:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		USB0_ERREN = 0xFF;
    ab04:	f883 008c 	strb.w	r0, [r3, #140]	; 0x8c
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    ab08:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
		USB0_CTL = USB_CTL_USBENSOFEN;
    ab0c:	f883 1094 	strb.w	r1, [r3, #148]	; 0x94
}
    ab10:	b005      	add	sp, #20
    ab12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    ab16:	4a23      	ldr	r2, [pc, #140]	; (aba4 <usb_isr+0x628>)
    ab18:	200f      	movs	r0, #15
    ab1a:	7010      	strb	r0, [r2, #0]
    ab1c:	e7be      	b.n	aa9c <usb_isr+0x520>
	if (datalen == 0 && size < EP0_SIZE) return;
    ab1e:	2f3f      	cmp	r7, #63	; 0x3f
    ab20:	d8a7      	bhi.n	aa72 <usb_isr+0x4f6>
    ab22:	e690      	b.n	a846 <usb_isr+0x2ca>
		i = setup.wIndex & 0x7F;
    ab24:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    ab28:	2f04      	cmp	r7, #4
    ab2a:	f63f aee8 	bhi.w	a8fe <usb_isr+0x382>
    ab2e:	0c00      	lsrs	r0, r0, #16
    ab30:	f47f aee5 	bne.w	a8fe <usb_isr+0x382>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    ab34:	4a05      	ldr	r2, [pc, #20]	; (ab4c <usb_isr+0x5d0>)
    ab36:	f812 3027 	ldrb.w	r3, [r2, r7, lsl #2]
    ab3a:	f023 0302 	bic.w	r3, r3, #2
    ab3e:	f802 3027 	strb.w	r3, [r2, r7, lsl #2]
	uint32_t datalen = 0;
    ab42:	2200      	movs	r2, #0
	const uint8_t *data = NULL;
    ab44:	4613      	mov	r3, r2
		break;
    ab46:	e64f      	b.n	a7e8 <usb_isr+0x26c>
    ab48:	1fffb67c 	.word	0x1fffb67c
    ab4c:	400720c0 	.word	0x400720c0
    ab50:	1fffb4d8 	.word	0x1fffb4d8
    ab54:	1fffb6f8 	.word	0x1fffb6f8
    ab58:	1fffb6f4 	.word	0x1fffb6f4
    ab5c:	1fffb6d0 	.word	0x1fffb6d0
    ab60:	1fffb6bc 	.word	0x1fffb6bc
    ab64:	1fffb6cc 	.word	0x1fffb6cc
    ab68:	1fffb6d4 	.word	0x1fffb6d4
    ab6c:	1fffb684 	.word	0x1fffb684
    ab70:	1fffb694 	.word	0x1fffb694
    ab74:	1fffb6ac 	.word	0x1fffb6ac
    ab78:	1fffb6dc 	.word	0x1fffb6dc
    ab7c:	40072000 	.word	0x40072000
    ab80:	1fffb676 	.word	0x1fffb676
    ab84:	1fffb6eb 	.word	0x1fffb6eb
    ab88:	1fffb6ec 	.word	0x1fffb6ec
    ab8c:	1fffb675 	.word	0x1fffb675
    ab90:	1fffb674 	.word	0x1fffb674
    ab94:	1fff8000 	.word	0x1fff8000
    ab98:	00400088 	.word	0x00400088
    ab9c:	1fffb5f4 	.word	0x1fffb5f4
    aba0:	1fffb634 	.word	0x1fffb634
    aba4:	1fffb6d1 	.word	0x1fffb6d1
		reply_buffer[0] = usb_configuration;
    aba8:	4b48      	ldr	r3, [pc, #288]	; (accc <usb_isr+0x750>)
    abaa:	4949      	ldr	r1, [pc, #292]	; (acd0 <usb_isr+0x754>)
    abac:	781b      	ldrb	r3, [r3, #0]
    abae:	700b      	strb	r3, [r1, #0]
		data = reply_buffer;
    abb0:	460b      	mov	r3, r1
		break;
    abb2:	e619      	b.n	a7e8 <usb_isr+0x26c>
		reply_buffer[0] = 0;
    abb4:	4a46      	ldr	r2, [pc, #280]	; (acd0 <usb_isr+0x754>)
    abb6:	2300      	movs	r3, #0
    abb8:	8013      	strh	r3, [r2, #0]
		data = reply_buffer;
    abba:	4b45      	ldr	r3, [pc, #276]	; (acd0 <usb_isr+0x754>)
		datalen = 2;
    abbc:	2202      	movs	r2, #2
		break;
    abbe:	e613      	b.n	a7e8 <usb_isr+0x26c>
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    abc0:	f04f 0301 	mov.w	r3, #1
    abc4:	7023      	strb	r3, [r4, #0]
		for (i=0; i < NUM_ENDPOINTS; i++) {
    abc6:	4b43      	ldr	r3, [pc, #268]	; (acd4 <usb_isr+0x758>)
    abc8:	42b3      	cmp	r3, r6
    abca:	f104 0401 	add.w	r4, r4, #1
    abce:	f47f aeca 	bne.w	a966 <usb_isr+0x3ea>
		usb_rx_memory_needed = 0;
    abd2:	4e41      	ldr	r6, [pc, #260]	; (acd8 <usb_isr+0x75c>)
    abd4:	9c03      	ldr	r4, [sp, #12]
		cfg = usb_endpoint_config_table;
    abd6:	f8df 8104 	ldr.w	r8, [pc, #260]	; acdc <usb_isr+0x760>
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    abda:	4f41      	ldr	r7, [pc, #260]	; (ace0 <usb_isr+0x764>)
		usb_rx_memory_needed = 0;
    abdc:	2300      	movs	r3, #0
    abde:	7033      	strb	r3, [r6, #0]
    abe0:	2504      	movs	r5, #4
			epconf = *cfg++;
    abe2:	f818 3b01 	ldrb.w	r3, [r8], #1
			*reg = epconf;
    abe6:	4a3f      	ldr	r2, [pc, #252]	; (ace4 <usb_isr+0x768>)
    abe8:	54ab      	strb	r3, [r5, r2]
			if (epconf & USB_ENDPT_EPRXEN) {
    abea:	071b      	lsls	r3, r3, #28
    abec:	d425      	bmi.n	ac3a <usb_isr+0x6be>
			table[index(i, TX, EVEN)].desc = 0;
    abee:	f045 0102 	orr.w	r1, r5, #2
			table[index(i, TX, ODD)].desc = 0;
    abf2:	f045 0203 	orr.w	r2, r5, #3
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    abf6:	3504      	adds	r5, #4
			table[index(i, TX, EVEN)].desc = 0;
    abf8:	2300      	movs	r3, #0
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    abfa:	2d14      	cmp	r5, #20
			table[index(i, TX, EVEN)].desc = 0;
    abfc:	f849 3031 	str.w	r3, [r9, r1, lsl #3]
			table[index(i, TX, ODD)].desc = 0;
    ac00:	f849 3032 	str.w	r3, [r9, r2, lsl #3]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    ac04:	d1ed      	bne.n	abe2 <usb_isr+0x666>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ac06:	4f38      	ldr	r7, [pc, #224]	; (ace8 <usb_isr+0x76c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ac08:	7825      	ldrb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ac0a:	783a      	ldrb	r2, [r7, #0]
    ac0c:	f042 0002 	orr.w	r0, r2, #2
    ac10:	eb09 0cc0 	add.w	ip, r9, r0, lsl #3
	ep0_tx_data_toggle ^= 1;
    ac14:	f085 0601 	eor.w	r6, r5, #1
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ac18:	f8cc 3004 	str.w	r3, [ip, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ac1c:	2d00      	cmp	r5, #0
    ac1e:	d14d      	bne.n	acbc <usb_isr+0x740>
    ac20:	2388      	movs	r3, #136	; 0x88
	ep0_tx_bdt_bank ^= 1;
    ac22:	f082 0201 	eor.w	r2, r2, #1
	ep0_tx_data_toggle ^= 1;
    ac26:	7026      	strb	r6, [r4, #0]
	ep0_tx_bdt_bank ^= 1;
    ac28:	703a      	strb	r2, [r7, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ac2a:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    ac2e:	2301      	movs	r3, #1
    ac30:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    ac34:	e52b      	b.n	a68e <usb_isr+0x112>
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    ac36:	7025      	strb	r5, [r4, #0]
				break;
    ac38:	e7c5      	b.n	abc6 <usb_isr+0x64a>
				p = usb_malloc();
    ac3a:	f000 f8b1 	bl	ada0 <usb_malloc>
				if (p) {
    ac3e:	2800      	cmp	r0, #0
    ac40:	d032      	beq.n	aca8 <usb_isr+0x72c>
					table[index(i, RX, EVEN)].addr = p->buf;
    ac42:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
    ac46:	3008      	adds	r0, #8
    ac48:	6058      	str	r0, [r3, #4]
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    ac4a:	f849 7035 	str.w	r7, [r9, r5, lsl #3]
				p = usb_malloc();
    ac4e:	f000 f8a7 	bl	ada0 <usb_malloc>
				if (p) {
    ac52:	b308      	cbz	r0, ac98 <usb_isr+0x71c>
					table[index(i, RX, ODD)].addr = p->buf;
    ac54:	f045 0301 	orr.w	r3, r5, #1
    ac58:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
    ac5c:	3008      	adds	r0, #8
    ac5e:	6050      	str	r0, [r2, #4]
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    ac60:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
    ac64:	e7c3      	b.n	abee <usb_isr+0x672>
			if (list->addr == NULL) break;
    ac66:	4a21      	ldr	r2, [pc, #132]	; (acec <usb_isr+0x770>)
    ac68:	6853      	ldr	r3, [r2, #4]
    ac6a:	2b00      	cmp	r3, #0
    ac6c:	f43f ae47 	beq.w	a8fe <usb_isr+0x382>
    ac70:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    ac72:	b2bf      	uxth	r7, r7
    ac74:	e004      	b.n	ac80 <usb_isr+0x704>
			if (list->addr == NULL) break;
    ac76:	6913      	ldr	r3, [r2, #16]
		for (list = usb_descriptor_list; 1; list++) {
    ac78:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    ac7a:	2b00      	cmp	r3, #0
    ac7c:	f43f ae3f 	beq.w	a8fe <usb_isr+0x382>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    ac80:	8811      	ldrh	r1, [r2, #0]
    ac82:	4281      	cmp	r1, r0
    ac84:	d1f7      	bne.n	ac76 <usb_isr+0x6fa>
    ac86:	8851      	ldrh	r1, [r2, #2]
    ac88:	42b9      	cmp	r1, r7
    ac8a:	d1f4      	bne.n	ac76 <usb_isr+0x6fa>
				if ((setup.wValue >> 8) == 3) {
    ac8c:	0a00      	lsrs	r0, r0, #8
    ac8e:	2803      	cmp	r0, #3
					datalen = *(list->addr);
    ac90:	bf0c      	ite	eq
    ac92:	781a      	ldrbeq	r2, [r3, #0]
					datalen = list->length;
    ac94:	8912      	ldrhne	r2, [r2, #8]
    ac96:	e5a7      	b.n	a7e8 <usb_isr+0x26c>
					usb_rx_memory_needed++;
    ac98:	7833      	ldrb	r3, [r6, #0]
    ac9a:	3301      	adds	r3, #1
    ac9c:	7033      	strb	r3, [r6, #0]
					table[index(i, RX, ODD)].desc = 0;
    ac9e:	f045 0301 	orr.w	r3, r5, #1
    aca2:	f849 0033 	str.w	r0, [r9, r3, lsl #3]
					usb_rx_memory_needed++;
    aca6:	e7a2      	b.n	abee <usb_isr+0x672>
					usb_rx_memory_needed++;
    aca8:	7833      	ldrb	r3, [r6, #0]
					table[index(i, RX, EVEN)].desc = 0;
    acaa:	f849 0035 	str.w	r0, [r9, r5, lsl #3]
					usb_rx_memory_needed++;
    acae:	3301      	adds	r3, #1
    acb0:	7033      	strb	r3, [r6, #0]
    acb2:	e7cc      	b.n	ac4e <usb_isr+0x6d2>
		data = reply_buffer;
    acb4:	4b06      	ldr	r3, [pc, #24]	; (acd0 <usb_isr+0x754>)
		datalen = 2;
    acb6:	2202      	movs	r2, #2
    acb8:	e596      	b.n	a7e8 <usb_isr+0x26c>
	__asm__ volatile("bkpt");
    acba:	be00      	bkpt	0x0000
	ep0_tx_data_toggle ^= 1;
    acbc:	7026      	strb	r6, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    acbe:	23c8      	movs	r3, #200	; 0xc8
	ep0_tx_bdt_bank ^= 1;
    acc0:	f082 0601 	eor.w	r6, r2, #1
    acc4:	703e      	strb	r6, [r7, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    acc6:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;
    acca:	e5bc      	b.n	a846 <usb_isr+0x2ca>
    accc:	1fffb6d0 	.word	0x1fffb6d0
    acd0:	1fffb67c 	.word	0x1fffb67c
    acd4:	1fffb694 	.word	0x1fffb694
    acd8:	1fffb6dc 	.word	0x1fffb6dc
    acdc:	000141d4 	.word	0x000141d4
    ace0:	00400088 	.word	0x00400088
    ace4:	400720c0 	.word	0x400720c0
    ace8:	1fffb674 	.word	0x1fffb674
    acec:	00014180 	.word	0x00014180

0000acf0 <usb_init>:



void usb_init(void)
{
    acf0:	b570      	push	{r4, r5, r6, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    acf2:	f000 fab3 	bl	b25c <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    acf6:	2300      	movs	r3, #0
    acf8:	4a1a      	ldr	r2, [pc, #104]	; (ad64 <usb_init+0x74>)
		table[i].desc = 0;
    acfa:	4619      	mov	r1, r3
    acfc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		table[i].addr = 0;
    ad00:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    ad04:	3301      	adds	r3, #1
    ad06:	2b14      	cmp	r3, #20
		table[i].addr = 0;
    ad08:	6041      	str	r1, [r0, #4]
	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    ad0a:	d1f7      	bne.n	acfc <usb_init+0xc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    ad0c:	4c16      	ldr	r4, [pc, #88]	; (ad68 <usb_init+0x78>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    ad0e:	4b17      	ldr	r3, [pc, #92]	; (ad6c <usb_init+0x7c>)
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    ad10:	6b60      	ldr	r0, [r4, #52]	; 0x34

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    ad12:	4d17      	ldr	r5, [pc, #92]	; (ad70 <usb_init+0x80>)
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    ad14:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
    ad18:	6360      	str	r0, [r4, #52]	; 0x34
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    ad1a:	f3c2 2407 	ubfx	r4, r2, #8, #8
    ad1e:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	USB0_USBCTRL = 0;
    ad22:	4c14      	ldr	r4, [pc, #80]	; (ad74 <usb_init+0x84>)
	USB0_ISTAT = 0xFF;
    ad24:	20ff      	movs	r0, #255	; 0xff
	USB0_CTL = USB_CTL_USBENSOFEN;
    ad26:	f04f 0c01 	mov.w	ip, #1
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    ad2a:	f3c2 4607 	ubfx	r6, r2, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    ad2e:	0e12      	lsrs	r2, r2, #24
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    ad30:	f883 60b0 	strb.w	r6, [r3, #176]	; 0xb0
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    ad34:	f04f 2ee0 	mov.w	lr, #3758153728	; 0xe000e000
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    ad38:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	USB0_ISTAT = 0xFF;
    ad3c:	f883 0080 	strb.w	r0, [r3, #128]	; 0x80
	USB0_ERRSTAT = 0xFF;
    ad40:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
	USB0_OTGISTAT = 0xFF;
    ad44:	7418      	strb	r0, [r3, #16]
	USB0_CTL = USB_CTL_USBENSOFEN;
    ad46:	f883 c094 	strb.w	ip, [r3, #148]	; 0x94
	USB0_USBCTRL = 0;
    ad4a:	7021      	strb	r1, [r4, #0]
	USB0_INTEN = USB_INTEN_USBRSTEN;
    ad4c:	f883 c084 	strb.w	ip, [r3, #132]	; 0x84
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    ad50:	2370      	movs	r3, #112	; 0x70
    ad52:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    ad56:	f44f 7200 	mov.w	r2, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    ad5a:	2310      	movs	r3, #16
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    ad5c:	f8ce 2108 	str.w	r2, [lr, #264]	; 0x108
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    ad60:	7223      	strb	r3, [r4, #8]
}
    ad62:	bd70      	pop	{r4, r5, r6, pc}
    ad64:	1fff8000 	.word	0x1fff8000
    ad68:	40048000 	.word	0x40048000
    ad6c:	40072000 	.word	0x40072000
    ad70:	e000e400 	.word	0xe000e400
    ad74:	40072100 	.word	0x40072100

0000ad78 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    ad78:	f000 b8ac 	b.w	aed4 <usb_serial_flush_input>

0000ad7c <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    ad7c:	f000 b87c 	b.w	ae78 <usb_serial_peekchar>

0000ad80 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    ad80:	f000 b856 	b.w	ae30 <usb_serial_getchar>

0000ad84 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    ad84:	f000 b890 	b.w	aea8 <usb_serial_available>

0000ad88 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    ad88:	f000 b976 	b.w	b078 <usb_serial_flush_output>

0000ad8c <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    ad8c:	f000 b950 	b.w	b030 <usb_serial_write_buffer_free>

0000ad90 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    ad90:	4608      	mov	r0, r1
    ad92:	4611      	mov	r1, r2
    ad94:	f000 b8ba 	b.w	af0c <usb_serial_write>

0000ad98 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    ad98:	4608      	mov	r0, r1
    ad9a:	f000 b93b 	b.w	b014 <usb_serial_putchar>
    ad9e:	bf00      	nop

0000ada0 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    ada0:	b672      	cpsid	i
	avail = usb_buffer_available;
    ada2:	490d      	ldr	r1, [pc, #52]	; (add8 <usb_malloc+0x38>)
    ada4:	680b      	ldr	r3, [r1, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    ada6:	fab3 f083 	clz	r0, r3
	if (n >= NUM_USB_BUFFERS) {
    adaa:	280b      	cmp	r0, #11
    adac:	dc10      	bgt.n	add0 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    adae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    adb2:	40c2      	lsrs	r2, r0
    adb4:	ea23 0302 	bic.w	r3, r3, r2
    adb8:	600b      	str	r3, [r1, #0]
	__enable_irq();
    adba:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    adbc:	4a07      	ldr	r2, [pc, #28]	; (addc <usb_malloc+0x3c>)
    adbe:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    adc2:	00c1      	lsls	r1, r0, #3
    adc4:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    adc8:	2300      	movs	r3, #0
    adca:	5053      	str	r3, [r2, r1]
	*(uint32_t *)(p + 4) = 0;
    adcc:	6043      	str	r3, [r0, #4]
	return (usb_packet_t *)p;
}
    adce:	4770      	bx	lr
		__enable_irq();
    add0:	b662      	cpsie	i
		return NULL;
    add2:	2000      	movs	r0, #0
    add4:	4770      	bx	lr
    add6:	bf00      	nop
    add8:	1fff881c 	.word	0x1fff881c
    addc:	1fff83bc 	.word	0x1fff83bc

0000ade0 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    ade0:	4b0e      	ldr	r3, [pc, #56]	; (ae1c <usb_free+0x3c>)
    ade2:	1ac3      	subs	r3, r0, r3
	if (n >= NUM_USB_BUFFERS) return;
    ade4:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
    ade8:	d210      	bcs.n	ae0c <usb_free+0x2c>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    adea:	4a0d      	ldr	r2, [pc, #52]	; (ae20 <usb_free+0x40>)
    adec:	7812      	ldrb	r2, [r2, #0]
    adee:	b972      	cbnz	r2, ae0e <usb_free+0x2e>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    adf0:	b672      	cpsid	i
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    adf2:	4a0c      	ldr	r2, [pc, #48]	; (ae24 <usb_free+0x44>)
	usb_buffer_available |= mask;
    adf4:	490c      	ldr	r1, [pc, #48]	; (ae28 <usb_free+0x48>)
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    adf6:	fba2 2303 	umull	r2, r3, r2, r3
	usb_buffer_available |= mask;
    adfa:	6808      	ldr	r0, [r1, #0]
	mask = (0x80000000 >> n);
    adfc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    ae00:	091b      	lsrs	r3, r3, #4
	mask = (0x80000000 >> n);
    ae02:	fa22 f303 	lsr.w	r3, r2, r3
	usb_buffer_available |= mask;
    ae06:	4303      	orrs	r3, r0
    ae08:	600b      	str	r3, [r1, #0]
	__enable_irq();
    ae0a:	b662      	cpsie	i

	//serial_print("free:");
	//serial_phex32((int)p);
	//serial_print("\n");
}
    ae0c:	4770      	bx	lr
	if (usb_rx_memory_needed && usb_configuration) {
    ae0e:	4a07      	ldr	r2, [pc, #28]	; (ae2c <usb_free+0x4c>)
    ae10:	7812      	ldrb	r2, [r2, #0]
    ae12:	2a00      	cmp	r2, #0
    ae14:	d0ec      	beq.n	adf0 <usb_free+0x10>
		usb_rx_memory(p);
    ae16:	f7ff bb2d 	b.w	a474 <usb_rx_memory>
    ae1a:	bf00      	nop
    ae1c:	1fff83bc 	.word	0x1fff83bc
    ae20:	1fffb6dc 	.word	0x1fffb6dc
    ae24:	38e38e39 	.word	0x38e38e39
    ae28:	1fff881c 	.word	0x1fff881c
    ae2c:	1fffb6d0 	.word	0x1fffb6d0

0000ae30 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    ae30:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    ae32:	4c0f      	ldr	r4, [pc, #60]	; (ae70 <usb_serial_getchar+0x40>)
    ae34:	6820      	ldr	r0, [r4, #0]
    ae36:	b178      	cbz	r0, ae58 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    ae38:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    ae3a:	8802      	ldrh	r2, [r0, #0]
	c = rx_packet->buf[i++];
    ae3c:	18c1      	adds	r1, r0, r3
    ae3e:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    ae40:	429a      	cmp	r2, r3
	c = rx_packet->buf[i++];
    ae42:	7a0d      	ldrb	r5, [r1, #8]
	if (i >= rx_packet->len) {
    ae44:	d902      	bls.n	ae4c <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    ae46:	8043      	strh	r3, [r0, #2]
	}
	return c;
}
    ae48:	4628      	mov	r0, r5
    ae4a:	bd38      	pop	{r3, r4, r5, pc}
		usb_free(rx_packet);
    ae4c:	f7ff ffc8 	bl	ade0 <usb_free>
		rx_packet = NULL;
    ae50:	2300      	movs	r3, #0
    ae52:	6023      	str	r3, [r4, #0]
}
    ae54:	4628      	mov	r0, r5
    ae56:	bd38      	pop	{r3, r4, r5, pc}
		if (!usb_configuration) return -1;
    ae58:	4b06      	ldr	r3, [pc, #24]	; (ae74 <usb_serial_getchar+0x44>)
    ae5a:	781b      	ldrb	r3, [r3, #0]
    ae5c:	b12b      	cbz	r3, ae6a <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    ae5e:	2003      	movs	r0, #3
    ae60:	f7ff fad0 	bl	a404 <usb_rx>
    ae64:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    ae66:	2800      	cmp	r0, #0
    ae68:	d1e6      	bne.n	ae38 <usb_serial_getchar+0x8>
		if (!usb_configuration) return -1;
    ae6a:	f04f 35ff 	mov.w	r5, #4294967295
    ae6e:	e7eb      	b.n	ae48 <usb_serial_getchar+0x18>
    ae70:	1fffb6e0 	.word	0x1fffb6e0
    ae74:	1fffb6d0 	.word	0x1fffb6d0

0000ae78 <usb_serial_peekchar>:

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    ae78:	b510      	push	{r4, lr}
	if (!rx_packet) {
    ae7a:	4c09      	ldr	r4, [pc, #36]	; (aea0 <usb_serial_peekchar+0x28>)
    ae7c:	6820      	ldr	r0, [r4, #0]
    ae7e:	b118      	cbz	r0, ae88 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    ae80:	8843      	ldrh	r3, [r0, #2]
    ae82:	4418      	add	r0, r3
    ae84:	7a00      	ldrb	r0, [r0, #8]
}
    ae86:	bd10      	pop	{r4, pc}
		if (!usb_configuration) return -1;
    ae88:	4b06      	ldr	r3, [pc, #24]	; (aea4 <usb_serial_peekchar+0x2c>)
    ae8a:	781b      	ldrb	r3, [r3, #0]
    ae8c:	b12b      	cbz	r3, ae9a <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    ae8e:	2003      	movs	r0, #3
    ae90:	f7ff fab8 	bl	a404 <usb_rx>
    ae94:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    ae96:	2800      	cmp	r0, #0
    ae98:	d1f2      	bne.n	ae80 <usb_serial_peekchar+0x8>
		if (!usb_configuration) return -1;
    ae9a:	f04f 30ff 	mov.w	r0, #4294967295
}
    ae9e:	bd10      	pop	{r4, pc}
    aea0:	1fffb6e0 	.word	0x1fffb6e0
    aea4:	1fffb6d0 	.word	0x1fffb6d0

0000aea8 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    aea8:	4b08      	ldr	r3, [pc, #32]	; (aecc <usb_serial_available+0x24>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    aeaa:	4a09      	ldr	r2, [pc, #36]	; (aed0 <usb_serial_available+0x28>)
    aeac:	681b      	ldr	r3, [r3, #0]
{
    aeae:	b510      	push	{r4, lr}
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    aeb0:	8894      	ldrh	r4, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    aeb2:	b11b      	cbz	r3, aebc <usb_serial_available+0x14>
    aeb4:	881a      	ldrh	r2, [r3, #0]
    aeb6:	885b      	ldrh	r3, [r3, #2]
    aeb8:	1ad3      	subs	r3, r2, r3
    aeba:	441c      	add	r4, r3
	if (count == 0) yield();
    aebc:	b10c      	cbz	r4, aec2 <usb_serial_available+0x1a>
	return count;
}
    aebe:	4620      	mov	r0, r4
    aec0:	bd10      	pop	{r4, pc}
	if (count == 0) yield();
    aec2:	f000 f929 	bl	b118 <yield>
}
    aec6:	4620      	mov	r0, r4
    aec8:	bd10      	pop	{r4, pc}
    aeca:	bf00      	nop
    aecc:	1fffb6e0 	.word	0x1fffb6e0
    aed0:	1fffb6d4 	.word	0x1fffb6d4

0000aed4 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    aed4:	4b0b      	ldr	r3, [pc, #44]	; (af04 <usb_serial_flush_input+0x30>)
    aed6:	781b      	ldrb	r3, [r3, #0]
    aed8:	b19b      	cbz	r3, af02 <usb_serial_flush_input+0x2e>
{
    aeda:	b510      	push	{r4, lr}
	if (rx_packet) {
    aedc:	4c0a      	ldr	r4, [pc, #40]	; (af08 <usb_serial_flush_input+0x34>)
    aede:	6820      	ldr	r0, [r4, #0]
    aee0:	b148      	cbz	r0, aef6 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    aee2:	f7ff ff7d 	bl	ade0 <usb_free>
		rx_packet = NULL;
    aee6:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    aee8:	2003      	movs	r0, #3
		rx_packet = NULL;
    aeea:	6023      	str	r3, [r4, #0]
		rx = usb_rx(CDC_RX_ENDPOINT);
    aeec:	f7ff fa8a 	bl	a404 <usb_rx>
		if (!rx) break;
    aef0:	b130      	cbz	r0, af00 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    aef2:	f7ff ff75 	bl	ade0 <usb_free>
		rx = usb_rx(CDC_RX_ENDPOINT);
    aef6:	2003      	movs	r0, #3
    aef8:	f7ff fa84 	bl	a404 <usb_rx>
		if (!rx) break;
    aefc:	2800      	cmp	r0, #0
    aefe:	d1f8      	bne.n	aef2 <usb_serial_flush_input+0x1e>
	}
}
    af00:	bd10      	pop	{r4, pc}
    af02:	4770      	bx	lr
    af04:	1fffb6d0 	.word	0x1fffb6d0
    af08:	1fffb6e0 	.word	0x1fffb6e0

0000af0c <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    af0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    af10:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b000 <usb_serial_write+0xf4>
{
    af14:	b083      	sub	sp, #12
	tx_noautoflush = 1;
    af16:	2201      	movs	r2, #1
    af18:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    af1c:	9101      	str	r1, [sp, #4]
    af1e:	b379      	cbz	r1, af80 <usb_serial_write+0x74>
    af20:	4f38      	ldr	r7, [pc, #224]	; (b004 <usb_serial_write+0xf8>)
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    af22:	f8df 80e4 	ldr.w	r8, [pc, #228]	; b008 <usb_serial_write+0xfc>
	while (size > 0) {
    af26:	9d01      	ldr	r5, [sp, #4]
    af28:	4e38      	ldr	r6, [pc, #224]	; (b00c <usb_serial_write+0x100>)
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    af2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; b010 <usb_serial_write+0x104>
    af2e:	4683      	mov	fp, r0
		if (!tx_packet) {
    af30:	6839      	ldr	r1, [r7, #0]
    af32:	b3a1      	cbz	r1, af9e <usb_serial_write+0x92>
		len = CDC_TX_SIZE - tx_packet->index;
    af34:	f8b1 e002 	ldrh.w	lr, [r1, #2]
    af38:	f1ce 0c40 	rsb	ip, lr, #64	; 0x40
    af3c:	45ac      	cmp	ip, r5
    af3e:	bf28      	it	cs
    af40:	46ac      	movcs	ip, r5
		tx_packet->index += len;
    af42:	eb0e 040c 	add.w	r4, lr, ip
		transmit_previous_timeout = 0;
    af46:	2200      	movs	r2, #0
		tx_packet->index += len;
    af48:	b2a4      	uxth	r4, r4
		transmit_previous_timeout = 0;
    af4a:	7032      	strb	r2, [r6, #0]
		size -= len;
    af4c:	eba5 050c 	sub.w	r5, r5, ip
		tx_packet->index += len;
    af50:	804c      	strh	r4, [r1, #2]
		dest = tx_packet->buf + tx_packet->index;
    af52:	f101 0208 	add.w	r2, r1, #8
		while (len-- > 0) *dest++ = *src++;
    af56:	f1bc 0f00 	cmp.w	ip, #0
    af5a:	d00a      	beq.n	af72 <usb_serial_write+0x66>
    af5c:	f10e 3eff 	add.w	lr, lr, #4294967295
    af60:	4472      	add	r2, lr
    af62:	44dc      	add	ip, fp
    af64:	f81b 4b01 	ldrb.w	r4, [fp], #1
    af68:	f802 4f01 	strb.w	r4, [r2, #1]!
    af6c:	45dc      	cmp	ip, fp
    af6e:	d1f9      	bne.n	af64 <usb_serial_write+0x58>
		if (tx_packet->index >= CDC_TX_SIZE) {
    af70:	884c      	ldrh	r4, [r1, #2]
    af72:	2c3f      	cmp	r4, #63	; 0x3f
    af74:	d80b      	bhi.n	af8e <usb_serial_write+0x82>
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    af76:	2205      	movs	r2, #5
    af78:	f88a 2000 	strb.w	r2, [sl]
	while (size > 0) {
    af7c:	2d00      	cmp	r5, #0
    af7e:	d1d7      	bne.n	af30 <usb_serial_write+0x24>
	}
	tx_noautoflush = 0;
	return ret;
    af80:	9801      	ldr	r0, [sp, #4]
	tx_noautoflush = 0;
    af82:	2300      	movs	r3, #0
    af84:	f889 3000 	strb.w	r3, [r9]
}
    af88:	b003      	add	sp, #12
    af8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx_packet->len = CDC_TX_SIZE;
    af8e:	2240      	movs	r2, #64	; 0x40
    af90:	800a      	strh	r2, [r1, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    af92:	2004      	movs	r0, #4
    af94:	f7ff faae 	bl	a4f4 <usb_tx>
			tx_packet = NULL;
    af98:	2200      	movs	r2, #0
    af9a:	603a      	str	r2, [r7, #0]
    af9c:	e7eb      	b.n	af76 <usb_serial_write+0x6a>
				if (!usb_configuration) {
    af9e:	f898 2000 	ldrb.w	r2, [r8]
    afa2:	b32a      	cbz	r2, aff0 <usb_serial_write+0xe4>
    afa4:	f24a 24f9 	movw	r4, #41721	; 0xa2f9
    afa8:	e008      	b.n	afbc <usb_serial_write+0xb0>
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    afaa:	3c01      	subs	r4, #1
    afac:	d019      	beq.n	afe2 <usb_serial_write+0xd6>
    afae:	7832      	ldrb	r2, [r6, #0]
    afb0:	b9ba      	cbnz	r2, afe2 <usb_serial_write+0xd6>
				yield();
    afb2:	f000 f8b1 	bl	b118 <yield>
				if (!usb_configuration) {
    afb6:	f898 2000 	ldrb.w	r2, [r8]
    afba:	b1ca      	cbz	r2, aff0 <usb_serial_write+0xe4>
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    afbc:	2004      	movs	r0, #4
    afbe:	f7ff fa43 	bl	a448 <usb_tx_packet_count>
    afc2:	2807      	cmp	r0, #7
    afc4:	d8f1      	bhi.n	afaa <usb_serial_write+0x9e>
					tx_noautoflush = 1;
    afc6:	f04f 0301 	mov.w	r3, #1
    afca:	f889 3000 	strb.w	r3, [r9]
					tx_packet = usb_malloc();
    afce:	f7ff fee7 	bl	ada0 <usb_malloc>
    afd2:	4601      	mov	r1, r0
    afd4:	6038      	str	r0, [r7, #0]
					if (tx_packet) break;
    afd6:	2800      	cmp	r0, #0
    afd8:	d1ac      	bne.n	af34 <usb_serial_write+0x28>
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    afda:	3c01      	subs	r4, #1
					tx_noautoflush = 0;
    afdc:	f889 0000 	strb.w	r0, [r9]
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    afe0:	d1e5      	bne.n	afae <usb_serial_write+0xa2>
					transmit_previous_timeout = 1;
    afe2:	2301      	movs	r3, #1
					return -1;
    afe4:	f04f 30ff 	mov.w	r0, #4294967295
					transmit_previous_timeout = 1;
    afe8:	7033      	strb	r3, [r6, #0]
}
    afea:	b003      	add	sp, #12
    afec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					tx_noautoflush = 0;
    aff0:	2300      	movs	r3, #0
					return -1;
    aff2:	f04f 30ff 	mov.w	r0, #4294967295
					tx_noautoflush = 0;
    aff6:	f889 3000 	strb.w	r3, [r9]
}
    affa:	b003      	add	sp, #12
    affc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b000:	1fffb6e5 	.word	0x1fffb6e5
    b004:	1fffb6e8 	.word	0x1fffb6e8
    b008:	1fffb6d0 	.word	0x1fffb6d0
    b00c:	1fffb6e4 	.word	0x1fffb6e4
    b010:	1fffb6fc 	.word	0x1fffb6fc

0000b014 <usb_serial_putchar>:
{
    b014:	b500      	push	{lr}
    b016:	b083      	sub	sp, #12
    b018:	4603      	mov	r3, r0
	return usb_serial_write(&c, 1);
    b01a:	2101      	movs	r1, #1
    b01c:	f10d 0007 	add.w	r0, sp, #7
{
    b020:	f88d 3007 	strb.w	r3, [sp, #7]
	return usb_serial_write(&c, 1);
    b024:	f7ff ff72 	bl	af0c <usb_serial_write>
}
    b028:	b003      	add	sp, #12
    b02a:	f85d fb04 	ldr.w	pc, [sp], #4
    b02e:	bf00      	nop

0000b030 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    b030:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    b032:	4d0e      	ldr	r5, [pc, #56]	; (b06c <usb_serial_write_buffer_free+0x3c>)
	tx_noautoflush = 1;
    b034:	4c0e      	ldr	r4, [pc, #56]	; (b070 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    b036:	6828      	ldr	r0, [r5, #0]
	tx_noautoflush = 1;
    b038:	2301      	movs	r3, #1
    b03a:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    b03c:	b128      	cbz	r0, b04a <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    b03e:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    b040:	2300      	movs	r3, #0
	len = CDC_TX_SIZE - tx_packet->index;
    b042:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	tx_noautoflush = 0;
    b046:	7023      	strb	r3, [r4, #0]
	return len;
}
    b048:	bd38      	pop	{r3, r4, r5, pc}
		if (!usb_configuration ||
    b04a:	4b0a      	ldr	r3, [pc, #40]	; (b074 <usb_serial_write_buffer_free+0x44>)
    b04c:	781b      	ldrb	r3, [r3, #0]
    b04e:	b913      	cbnz	r3, b056 <usb_serial_write_buffer_free+0x26>
			tx_noautoflush = 0;
    b050:	2000      	movs	r0, #0
    b052:	7020      	strb	r0, [r4, #0]
}
    b054:	bd38      	pop	{r3, r4, r5, pc}
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    b056:	2004      	movs	r0, #4
    b058:	f7ff f9f6 	bl	a448 <usb_tx_packet_count>
		if (!usb_configuration ||
    b05c:	2807      	cmp	r0, #7
    b05e:	d8f7      	bhi.n	b050 <usb_serial_write_buffer_free+0x20>
		  (tx_packet = usb_malloc()) == NULL) {
    b060:	f7ff fe9e 	bl	ada0 <usb_malloc>
    b064:	6028      	str	r0, [r5, #0]
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    b066:	2800      	cmp	r0, #0
    b068:	d1e9      	bne.n	b03e <usb_serial_write_buffer_free+0xe>
    b06a:	e7f1      	b.n	b050 <usb_serial_write_buffer_free+0x20>
    b06c:	1fffb6e8 	.word	0x1fffb6e8
    b070:	1fffb6e5 	.word	0x1fffb6e5
    b074:	1fffb6d0 	.word	0x1fffb6d0

0000b078 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    b078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    b07a:	4b11      	ldr	r3, [pc, #68]	; (b0c0 <usb_serial_flush_output+0x48>)
    b07c:	781b      	ldrb	r3, [r3, #0]
    b07e:	b18b      	cbz	r3, b0a4 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    b080:	4e10      	ldr	r6, [pc, #64]	; (b0c4 <usb_serial_flush_output+0x4c>)
	tx_noautoflush = 1;
    b082:	4d11      	ldr	r5, [pc, #68]	; (b0c8 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    b084:	6834      	ldr	r4, [r6, #0]
	tx_noautoflush = 1;
    b086:	2701      	movs	r7, #1
    b088:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    b08a:	b164      	cbz	r4, b0a6 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    b08c:	4b0f      	ldr	r3, [pc, #60]	; (b0cc <usb_serial_flush_output+0x54>)
    b08e:	2700      	movs	r7, #0
    b090:	701f      	strb	r7, [r3, #0]
		tx_packet->len = tx_packet->index;
    b092:	8863      	ldrh	r3, [r4, #2]
    b094:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    b096:	4621      	mov	r1, r4
    b098:	2004      	movs	r0, #4
    b09a:	f7ff fa2b 	bl	a4f4 <usb_tx>
		tx_packet = NULL;
    b09e:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    b0a0:	2300      	movs	r3, #0
    b0a2:	702b      	strb	r3, [r5, #0]
}
    b0a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_packet_t *tx = usb_malloc();
    b0a6:	f7ff fe7b 	bl	ada0 <usb_malloc>
			usb_cdc_transmit_flush_timer = 0;
    b0aa:	4b08      	ldr	r3, [pc, #32]	; (b0cc <usb_serial_flush_output+0x54>)
		if (tx) {
    b0ac:	4601      	mov	r1, r0
    b0ae:	b120      	cbz	r0, b0ba <usb_serial_flush_output+0x42>
			usb_tx(CDC_TX_ENDPOINT, tx);
    b0b0:	2004      	movs	r0, #4
			usb_cdc_transmit_flush_timer = 0;
    b0b2:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    b0b4:	f7ff fa1e 	bl	a4f4 <usb_tx>
    b0b8:	e7f2      	b.n	b0a0 <usb_serial_flush_output+0x28>
			usb_cdc_transmit_flush_timer = 1;
    b0ba:	701f      	strb	r7, [r3, #0]
    b0bc:	e7f0      	b.n	b0a0 <usb_serial_flush_output+0x28>
    b0be:	bf00      	nop
    b0c0:	1fffb6d0 	.word	0x1fffb6d0
    b0c4:	1fffb6e8 	.word	0x1fffb6e8
    b0c8:	1fffb6e5 	.word	0x1fffb6e5
    b0cc:	1fffb6fc 	.word	0x1fffb6fc

0000b0d0 <usb_serial_flush_callback>:

void usb_serial_flush_callback(void)
{
    b0d0:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    b0d2:	4b0e      	ldr	r3, [pc, #56]	; (b10c <usb_serial_flush_callback+0x3c>)
    b0d4:	781b      	ldrb	r3, [r3, #0]
    b0d6:	b953      	cbnz	r3, b0ee <usb_serial_flush_callback+0x1e>
	if (tx_packet) {
    b0d8:	4c0d      	ldr	r4, [pc, #52]	; (b110 <usb_serial_flush_callback+0x40>)
    b0da:	6821      	ldr	r1, [r4, #0]
    b0dc:	b141      	cbz	r1, b0f0 <usb_serial_flush_callback+0x20>
    b0de:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    b0e2:	884b      	ldrh	r3, [r1, #2]
    b0e4:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    b0e6:	2004      	movs	r0, #4
    b0e8:	f7ff fa04 	bl	a4f4 <usb_tx>
		tx_packet = NULL;
    b0ec:	6025      	str	r5, [r4, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    b0ee:	bd38      	pop	{r3, r4, r5, pc}
		usb_packet_t *tx = usb_malloc();
    b0f0:	f7ff fe56 	bl	ada0 <usb_malloc>
		if (tx) {
    b0f4:	4601      	mov	r1, r0
    b0f6:	b120      	cbz	r0, b102 <usb_serial_flush_callback+0x32>
}
    b0f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			usb_tx(CDC_TX_ENDPOINT, tx);
    b0fc:	2004      	movs	r0, #4
    b0fe:	f7ff b9f9 	b.w	a4f4 <usb_tx>
			usb_cdc_transmit_flush_timer = 1;
    b102:	4b04      	ldr	r3, [pc, #16]	; (b114 <usb_serial_flush_callback+0x44>)
    b104:	2201      	movs	r2, #1
    b106:	701a      	strb	r2, [r3, #0]
}
    b108:	bd38      	pop	{r3, r4, r5, pc}
    b10a:	bf00      	nop
    b10c:	1fffb6e5 	.word	0x1fffb6e5
    b110:	1fffb6e8 	.word	0x1fffb6e8
    b114:	1fffb6fc 	.word	0x1fffb6fc

0000b118 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    b118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    b11c:	4e32      	ldr	r6, [pc, #200]	; (b1e8 <yield+0xd0>)
    b11e:	7833      	ldrb	r3, [r6, #0]
    b120:	b163      	cbz	r3, b13c <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    b122:	4f32      	ldr	r7, [pc, #200]	; (b1ec <yield+0xd4>)
    b124:	783a      	ldrb	r2, [r7, #0]
    b126:	b94a      	cbnz	r2, b13c <yield+0x24>
	running = 1;
    b128:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    b12a:	07d9      	lsls	r1, r3, #31
	running = 1;
    b12c:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    b12e:	d443      	bmi.n	b1b8 <yield+0xa0>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    b130:	079a      	lsls	r2, r3, #30
    b132:	d426      	bmi.n	b182 <yield+0x6a>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    b134:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    b136:	075b      	lsls	r3, r3, #29
	running = 0;
    b138:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    b13a:	d401      	bmi.n	b140 <yield+0x28>
	
};
    b13c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    b140:	4b2b      	ldr	r3, [pc, #172]	; (b1f0 <yield+0xd8>)
    b142:	681a      	ldr	r2, [r3, #0]
    b144:	2a00      	cmp	r2, #0
    b146:	d0f9      	beq.n	b13c <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    b148:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    b14c:	2a00      	cmp	r2, #0
    b14e:	d1f5      	bne.n	b13c <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    b150:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    b154:	b672      	cpsid	i
		EventResponder *first = firstYield;
    b156:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    b158:	2800      	cmp	r0, #0
    b15a:	d03a      	beq.n	b1d2 <yield+0xba>
		if (runningFromYield) {
    b15c:	4c25      	ldr	r4, [pc, #148]	; (b1f4 <yield+0xdc>)
    b15e:	7821      	ldrb	r1, [r4, #0]
    b160:	2900      	cmp	r1, #0
    b162:	d136      	bne.n	b1d2 <yield+0xba>
		firstYield = first->_next;
    b164:	6942      	ldr	r2, [r0, #20]
    b166:	601a      	str	r2, [r3, #0]
		runningFromYield = true;
    b168:	2301      	movs	r3, #1
    b16a:	7023      	strb	r3, [r4, #0]
		if (firstYield) {
    b16c:	2a00      	cmp	r2, #0
    b16e:	d037      	beq.n	b1e0 <yield+0xc8>
			firstYield->_prev = nullptr;
    b170:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    b172:	b905      	cbnz	r5, b176 <yield+0x5e>
    b174:	b662      	cpsie	i
		first->_triggered = false;
    b176:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    b178:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    b17a:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    b17c:	4798      	blx	r3
		runningFromYield = false;
    b17e:	7025      	strb	r5, [r4, #0]
    b180:	e7dc      	b.n	b13c <yield+0x24>
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    b182:	f8df 8074 	ldr.w	r8, [pc, #116]	; b1f8 <yield+0xe0>
    b186:	f898 2000 	ldrb.w	r2, [r8]
    b18a:	2a00      	cmp	r2, #0
    b18c:	d0d2      	beq.n	b134 <yield+0x1c>
    b18e:	2500      	movs	r5, #0
    b190:	f8df 9068 	ldr.w	r9, [pc, #104]	; b1fc <yield+0xe4>
    b194:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    b196:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		if (available()) (*_serialEvent)();
    b19a:	6823      	ldr	r3, [r4, #0]
    b19c:	4620      	mov	r0, r4
    b19e:	691b      	ldr	r3, [r3, #16]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    b1a0:	3501      	adds	r5, #1
		if (available()) (*_serialEvent)();
    b1a2:	4798      	blx	r3
    b1a4:	b108      	cbz	r0, b1aa <yield+0x92>
    b1a6:	6923      	ldr	r3, [r4, #16]
    b1a8:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    b1aa:	f898 2000 	ldrb.w	r2, [r8]
    b1ae:	b2eb      	uxtb	r3, r5
    b1b0:	429a      	cmp	r2, r3
    b1b2:	d8f0      	bhi.n	b196 <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    b1b4:	7833      	ldrb	r3, [r6, #0]
    b1b6:	e7bd      	b.n	b134 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    b1b8:	f7ff fe76 	bl	aea8 <usb_serial_available>
		if (Serial.available()) serialEvent();
    b1bc:	b968      	cbnz	r0, b1da <yield+0xc2>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    b1be:	4b10      	ldr	r3, [pc, #64]	; (b200 <yield+0xe8>)
    b1c0:	781b      	ldrb	r3, [r3, #0]
    b1c2:	b90b      	cbnz	r3, b1c8 <yield+0xb0>
    b1c4:	7833      	ldrb	r3, [r6, #0]
    b1c6:	e7b3      	b.n	b130 <yield+0x18>
    b1c8:	7833      	ldrb	r3, [r6, #0]
    b1ca:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    b1ce:	7033      	strb	r3, [r6, #0]
    b1d0:	e7ae      	b.n	b130 <yield+0x18>
		if (doit) __enable_irq();
    b1d2:	2d00      	cmp	r5, #0
    b1d4:	d1b2      	bne.n	b13c <yield+0x24>
    b1d6:	b662      	cpsie	i
    b1d8:	e7b0      	b.n	b13c <yield+0x24>
		if (Serial.available()) serialEvent();
    b1da:	f000 f83d 	bl	b258 <serialEvent()>
    b1de:	e7ee      	b.n	b1be <yield+0xa6>
			lastYield = nullptr;
    b1e0:	4b08      	ldr	r3, [pc, #32]	; (b204 <yield+0xec>)
    b1e2:	601a      	str	r2, [r3, #0]
    b1e4:	e7c5      	b.n	b172 <yield+0x5a>
    b1e6:	bf00      	nop
    b1e8:	1fff8820 	.word	0x1fff8820
    b1ec:	1fffb6fd 	.word	0x1fffb6fd
    b1f0:	1fffb4c0 	.word	0x1fffb4c0
    b1f4:	1fffb4cc 	.word	0x1fffb4cc
    b1f8:	1fffb70c 	.word	0x1fffb70c
    b1fc:	1fffb700 	.word	0x1fffb700
    b200:	00013f5a 	.word	0x00013f5a
    b204:	1fffb4d0 	.word	0x1fffb4d0

0000b208 <HardwareSerial::addToSerialEventsList()>:
HardwareSerial 	*HardwareSerial::s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
uint8_t 		HardwareSerial::s_count_serials_with_serial_events = 0;

// simple helper function that add us to the list of Serial ports that have
// their own serialEvent code defined that needs to be called at yield.
void HardwareSerial::addToSerialEventsList() {
    b208:	b470      	push	{r4, r5, r6}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    b20a:	4e10      	ldr	r6, [pc, #64]	; (b24c <HardwareSerial::addToSerialEventsList()+0x44>)
    b20c:	4d10      	ldr	r5, [pc, #64]	; (b250 <HardwareSerial::addToSerialEventsList()+0x48>)
    b20e:	7834      	ldrb	r4, [r6, #0]
    b210:	b1d4      	cbz	r4, b248 <HardwareSerial::addToSerialEventsList()+0x40>
    b212:	1e62      	subs	r2, r4, #1
    b214:	b2d2      	uxtb	r2, r2
    b216:	1d29      	adds	r1, r5, #4
    b218:	462b      	mov	r3, r5
    b21a:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    b21e:	e001      	b.n	b224 <HardwareSerial::addToSerialEventsList()+0x1c>
    b220:	428b      	cmp	r3, r1
    b222:	d005      	beq.n	b230 <HardwareSerial::addToSerialEventsList()+0x28>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    b224:	f853 2b04 	ldr.w	r2, [r3], #4
    b228:	4282      	cmp	r2, r0
    b22a:	d1f9      	bne.n	b220 <HardwareSerial::addToSerialEventsList()+0x18>
	}

	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
}
    b22c:	bc70      	pop	{r4, r5, r6}
    b22e:	4770      	bx	lr
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    b230:	1c63      	adds	r3, r4, #1
    b232:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    b234:	4a07      	ldr	r2, [pc, #28]	; (b254 <HardwareSerial::addToSerialEventsList()+0x4c>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    b236:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    b238:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    b23a:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    b23e:	f043 0302 	orr.w	r3, r3, #2
    b242:	7013      	strb	r3, [r2, #0]
}
    b244:	bc70      	pop	{r4, r5, r6}
    b246:	4770      	bx	lr
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    b248:	2301      	movs	r3, #1
    b24a:	e7f3      	b.n	b234 <HardwareSerial::addToSerialEventsList()+0x2c>
    b24c:	1fffb70c 	.word	0x1fffb70c
    b250:	1fffb700 	.word	0x1fffb700
    b254:	1fff8820 	.word	0x1fff8820

0000b258 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    b258:	4770      	bx	lr
    b25a:	bf00      	nop

0000b25c <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    b25c:	b510      	push	{r4, lr}
    b25e:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    b260:	b672      	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    b262:	4a17      	ldr	r2, [pc, #92]	; (b2c0 <usb_init_serialnumber+0x64>)
    b264:	2470      	movs	r4, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    b266:	2041      	movs	r0, #65	; 0x41
	FTFL_FCCOB1 = 15;
    b268:	210f      	movs	r1, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    b26a:	2380      	movs	r3, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    b26c:	7014      	strb	r4, [r2, #0]
	FTFL_FCCOB0 = 0x41;
    b26e:	71d0      	strb	r0, [r2, #7]
	FTFL_FCCOB1 = 15;
    b270:	7191      	strb	r1, [r2, #6]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    b272:	7013      	strb	r3, [r2, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    b274:	7813      	ldrb	r3, [r2, #0]
    b276:	061b      	lsls	r3, r3, #24
    b278:	d5fc      	bpl.n	b274 <usb_init_serialnumber+0x18>
	num = *(uint32_t *)&FTFL_FCCOB7;
    b27a:	6890      	ldr	r0, [r2, #8]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    b27c:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    b27e:	4b11      	ldr	r3, [pc, #68]	; (b2c4 <usb_init_serialnumber+0x68>)
    b280:	4c11      	ldr	r4, [pc, #68]	; (b2c8 <usb_init_serialnumber+0x6c>)
    b282:	4298      	cmp	r0, r3
    b284:	bf38      	it	cc
    b286:	eb00 0080 	addcc.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    b28a:	a901      	add	r1, sp, #4
	if (num < 10000000) num = num * 10;
    b28c:	bf38      	it	cc
    b28e:	0040      	lslcc	r0, r0, #1
	ultoa(num, buf, 10);
    b290:	220a      	movs	r2, #10
    b292:	f7fd fd9f 	bl	8dd4 <ultoa>
	for (i=0; i<10; i++) {
    b296:	a901      	add	r1, sp, #4
    b298:	4620      	mov	r0, r4
    b29a:	2300      	movs	r3, #0
		char c = buf[i];
    b29c:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    b2a0:	3301      	adds	r3, #1
		if (!c) break;
    b2a2:	b13a      	cbz	r2, b2b4 <usb_init_serialnumber+0x58>
	for (i=0; i<10; i++) {
    b2a4:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    b2a6:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    b2aa:	d1f7      	bne.n	b29c <usb_init_serialnumber+0x40>
    b2ac:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    b2ae:	7023      	strb	r3, [r4, #0]
}
    b2b0:	b004      	add	sp, #16
    b2b2:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    b2b4:	005b      	lsls	r3, r3, #1
    b2b6:	b2db      	uxtb	r3, r3
    b2b8:	7023      	strb	r3, [r4, #0]
}
    b2ba:	b004      	add	sp, #16
    b2bc:	bd10      	pop	{r4, pc}
    b2be:	bf00      	nop
    b2c0:	40020000 	.word	0x40020000
    b2c4:	00989680 	.word	0x00989680
    b2c8:	1fff88b0 	.word	0x1fff88b0

0000b2cc <expf>:
    b2cc:	b538      	push	{r3, r4, r5, lr}
    b2ce:	4604      	mov	r4, r0
    b2d0:	f000 f82c 	bl	b32c <__ieee754_expf>
    b2d4:	4605      	mov	r5, r0
    b2d6:	4620      	mov	r0, r4
    b2d8:	f000 f820 	bl	b31c <finitef>
    b2dc:	b148      	cbz	r0, b2f2 <expf+0x26>
    b2de:	490d      	ldr	r1, [pc, #52]	; (b314 <expf+0x48>)
    b2e0:	4620      	mov	r0, r4
    b2e2:	f000 feaf 	bl	c044 <__aeabi_fcmpgt>
    b2e6:	b930      	cbnz	r0, b2f6 <expf+0x2a>
    b2e8:	490b      	ldr	r1, [pc, #44]	; (b318 <expf+0x4c>)
    b2ea:	4620      	mov	r0, r4
    b2ec:	f000 fe8c 	bl	c008 <__aeabi_fcmplt>
    b2f0:	b948      	cbnz	r0, b306 <expf+0x3a>
    b2f2:	4628      	mov	r0, r5
    b2f4:	bd38      	pop	{r3, r4, r5, pc}
    b2f6:	f001 fe5b 	bl	cfb0 <__errno>
    b2fa:	f04f 45ff 	mov.w	r5, #2139095040	; 0x7f800000
    b2fe:	2322      	movs	r3, #34	; 0x22
    b300:	6003      	str	r3, [r0, #0]
    b302:	4628      	mov	r0, r5
    b304:	bd38      	pop	{r3, r4, r5, pc}
    b306:	f001 fe53 	bl	cfb0 <__errno>
    b30a:	2322      	movs	r3, #34	; 0x22
    b30c:	2500      	movs	r5, #0
    b30e:	6003      	str	r3, [r0, #0]
    b310:	e7ef      	b.n	b2f2 <expf+0x26>
    b312:	bf00      	nop
    b314:	42b17217 	.word	0x42b17217
    b318:	c2cff1b5 	.word	0xc2cff1b5

0000b31c <finitef>:
    b31c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    b320:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
    b324:	bfac      	ite	ge
    b326:	2000      	movge	r0, #0
    b328:	2001      	movlt	r0, #1
    b32a:	4770      	bx	lr

0000b32c <__ieee754_expf>:
    b32c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
    b330:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
    b334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b338:	4604      	mov	r4, r0
    b33a:	d86c      	bhi.n	b416 <__ieee754_expf+0xea>
    b33c:	ea4f 75d0 	mov.w	r5, r0, lsr #31
    b340:	f000 80c6 	beq.w	b4d0 <__ieee754_expf+0x1a4>
    b344:	497a      	ldr	r1, [pc, #488]	; (b530 <__ieee754_expf+0x204>)
    b346:	4288      	cmp	r0, r1
    b348:	f300 80b4 	bgt.w	b4b4 <__ieee754_expf+0x188>
    b34c:	2800      	cmp	r0, #0
    b34e:	f2c0 80b6 	blt.w	b4be <__ieee754_expf+0x192>
    b352:	4b78      	ldr	r3, [pc, #480]	; (b534 <__ieee754_expf+0x208>)
    b354:	429a      	cmp	r2, r3
    b356:	d963      	bls.n	b420 <__ieee754_expf+0xf4>
    b358:	4b77      	ldr	r3, [pc, #476]	; (b538 <__ieee754_expf+0x20c>)
    b35a:	429a      	cmp	r2, r3
    b35c:	f200 80c5 	bhi.w	b4ea <__ieee754_expf+0x1be>
    b360:	4b76      	ldr	r3, [pc, #472]	; (b53c <__ieee754_expf+0x210>)
    b362:	4620      	mov	r0, r4
    b364:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
    b368:	f000 fba6 	bl	bab8 <__aeabi_fsub>
    b36c:	4b74      	ldr	r3, [pc, #464]	; (b540 <__ieee754_expf+0x214>)
    b36e:	f1c5 0601 	rsb	r6, r5, #1
    b372:	f853 9025 	ldr.w	r9, [r3, r5, lsl #2]
    b376:	4680      	mov	r8, r0
    b378:	1b76      	subs	r6, r6, r5
    b37a:	4649      	mov	r1, r9
    b37c:	4640      	mov	r0, r8
    b37e:	f000 fb9b 	bl	bab8 <__aeabi_fsub>
    b382:	4601      	mov	r1, r0
    b384:	4605      	mov	r5, r0
    b386:	f000 fca1 	bl	bccc <__aeabi_fmul>
    b38a:	496e      	ldr	r1, [pc, #440]	; (b544 <__ieee754_expf+0x218>)
    b38c:	4604      	mov	r4, r0
    b38e:	f000 fc9d 	bl	bccc <__aeabi_fmul>
    b392:	496d      	ldr	r1, [pc, #436]	; (b548 <__ieee754_expf+0x21c>)
    b394:	f000 fb90 	bl	bab8 <__aeabi_fsub>
    b398:	4621      	mov	r1, r4
    b39a:	f000 fc97 	bl	bccc <__aeabi_fmul>
    b39e:	496b      	ldr	r1, [pc, #428]	; (b54c <__ieee754_expf+0x220>)
    b3a0:	f000 fb8c 	bl	babc <__addsf3>
    b3a4:	4621      	mov	r1, r4
    b3a6:	f000 fc91 	bl	bccc <__aeabi_fmul>
    b3aa:	4969      	ldr	r1, [pc, #420]	; (b550 <__ieee754_expf+0x224>)
    b3ac:	f000 fb84 	bl	bab8 <__aeabi_fsub>
    b3b0:	4621      	mov	r1, r4
    b3b2:	f000 fc8b 	bl	bccc <__aeabi_fmul>
    b3b6:	4967      	ldr	r1, [pc, #412]	; (b554 <__ieee754_expf+0x228>)
    b3b8:	f000 fb80 	bl	babc <__addsf3>
    b3bc:	4621      	mov	r1, r4
    b3be:	f000 fc85 	bl	bccc <__aeabi_fmul>
    b3c2:	4601      	mov	r1, r0
    b3c4:	4628      	mov	r0, r5
    b3c6:	f000 fb77 	bl	bab8 <__aeabi_fsub>
    b3ca:	462c      	mov	r4, r5
    b3cc:	4607      	mov	r7, r0
    b3ce:	4682      	mov	sl, r0
    b3d0:	2e00      	cmp	r6, #0
    b3d2:	d057      	beq.n	b484 <__ieee754_expf+0x158>
    b3d4:	4639      	mov	r1, r7
    b3d6:	4628      	mov	r0, r5
    b3d8:	f000 fc78 	bl	bccc <__aeabi_fmul>
    b3dc:	4639      	mov	r1, r7
    b3de:	4604      	mov	r4, r0
    b3e0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    b3e4:	f000 fb68 	bl	bab8 <__aeabi_fsub>
    b3e8:	4601      	mov	r1, r0
    b3ea:	4620      	mov	r0, r4
    b3ec:	f000 fd22 	bl	be34 <__aeabi_fdiv>
    b3f0:	4601      	mov	r1, r0
    b3f2:	4648      	mov	r0, r9
    b3f4:	f000 fb60 	bl	bab8 <__aeabi_fsub>
    b3f8:	4641      	mov	r1, r8
    b3fa:	f000 fb5d 	bl	bab8 <__aeabi_fsub>
    b3fe:	4601      	mov	r1, r0
    b400:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    b404:	f000 fb58 	bl	bab8 <__aeabi_fsub>
    b408:	f116 0f7d 	cmn.w	r6, #125	; 0x7d
    b40c:	db64      	blt.n	b4d8 <__ieee754_expf+0x1ac>
    b40e:	eb00 50c6 	add.w	r0, r0, r6, lsl #23
    b412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b416:	4601      	mov	r1, r0
    b418:	f000 fb50 	bl	babc <__addsf3>
    b41c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b420:	f1b2 5f50 	cmp.w	r2, #872415232	; 0x34000000
    b424:	d209      	bcs.n	b43a <__ieee754_expf+0x10e>
    b426:	494c      	ldr	r1, [pc, #304]	; (b558 <__ieee754_expf+0x22c>)
    b428:	4620      	mov	r0, r4
    b42a:	f000 fb47 	bl	babc <__addsf3>
    b42e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    b432:	f000 fe07 	bl	c044 <__aeabi_fcmpgt>
    b436:	2800      	cmp	r0, #0
    b438:	d174      	bne.n	b524 <__ieee754_expf+0x1f8>
    b43a:	4621      	mov	r1, r4
    b43c:	4620      	mov	r0, r4
    b43e:	f000 fc45 	bl	bccc <__aeabi_fmul>
    b442:	4940      	ldr	r1, [pc, #256]	; (b544 <__ieee754_expf+0x218>)
    b444:	4605      	mov	r5, r0
    b446:	f000 fc41 	bl	bccc <__aeabi_fmul>
    b44a:	493f      	ldr	r1, [pc, #252]	; (b548 <__ieee754_expf+0x21c>)
    b44c:	f000 fb34 	bl	bab8 <__aeabi_fsub>
    b450:	4629      	mov	r1, r5
    b452:	f000 fc3b 	bl	bccc <__aeabi_fmul>
    b456:	493d      	ldr	r1, [pc, #244]	; (b54c <__ieee754_expf+0x220>)
    b458:	f000 fb30 	bl	babc <__addsf3>
    b45c:	4629      	mov	r1, r5
    b45e:	f000 fc35 	bl	bccc <__aeabi_fmul>
    b462:	493b      	ldr	r1, [pc, #236]	; (b550 <__ieee754_expf+0x224>)
    b464:	f000 fb28 	bl	bab8 <__aeabi_fsub>
    b468:	4629      	mov	r1, r5
    b46a:	f000 fc2f 	bl	bccc <__aeabi_fmul>
    b46e:	4939      	ldr	r1, [pc, #228]	; (b554 <__ieee754_expf+0x228>)
    b470:	f000 fb24 	bl	babc <__addsf3>
    b474:	4629      	mov	r1, r5
    b476:	f000 fc29 	bl	bccc <__aeabi_fmul>
    b47a:	4601      	mov	r1, r0
    b47c:	4620      	mov	r0, r4
    b47e:	f000 fb1b 	bl	bab8 <__aeabi_fsub>
    b482:	4682      	mov	sl, r0
    b484:	4651      	mov	r1, sl
    b486:	4620      	mov	r0, r4
    b488:	f000 fc20 	bl	bccc <__aeabi_fmul>
    b48c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    b490:	4605      	mov	r5, r0
    b492:	4650      	mov	r0, sl
    b494:	f000 fb10 	bl	bab8 <__aeabi_fsub>
    b498:	4601      	mov	r1, r0
    b49a:	4628      	mov	r0, r5
    b49c:	f000 fcca 	bl	be34 <__aeabi_fdiv>
    b4a0:	4621      	mov	r1, r4
    b4a2:	f000 fb09 	bl	bab8 <__aeabi_fsub>
    b4a6:	4601      	mov	r1, r0
    b4a8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    b4ac:	f000 fb04 	bl	bab8 <__aeabi_fsub>
    b4b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b4b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b4b8:	2000      	movs	r0, #0
    b4ba:	f000 b87b 	b.w	b5b4 <__math_oflowf>
    b4be:	4b27      	ldr	r3, [pc, #156]	; (b55c <__ieee754_expf+0x230>)
    b4c0:	429a      	cmp	r2, r3
    b4c2:	f67f af46 	bls.w	b352 <__ieee754_expf+0x26>
    b4c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b4ca:	2000      	movs	r0, #0
    b4cc:	f000 b86e 	b.w	b5ac <__math_uflowf>
    b4d0:	2d00      	cmp	r5, #0
    b4d2:	d0a3      	beq.n	b41c <__ieee754_expf+0xf0>
    b4d4:	2000      	movs	r0, #0
    b4d6:	e7a1      	b.n	b41c <__ieee754_expf+0xf0>
    b4d8:	3664      	adds	r6, #100	; 0x64
    b4da:	f04f 6158 	mov.w	r1, #226492416	; 0xd800000
    b4de:	eb00 50c6 	add.w	r0, r0, r6, lsl #23
    b4e2:	f000 fbf3 	bl	bccc <__aeabi_fmul>
    b4e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b4ea:	491d      	ldr	r1, [pc, #116]	; (b560 <__ieee754_expf+0x234>)
    b4ec:	4620      	mov	r0, r4
    b4ee:	f000 fbed 	bl	bccc <__aeabi_fmul>
    b4f2:	4b1c      	ldr	r3, [pc, #112]	; (b564 <__ieee754_expf+0x238>)
    b4f4:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
    b4f8:	f000 fae0 	bl	babc <__addsf3>
    b4fc:	f000 fdac 	bl	c058 <__aeabi_f2iz>
    b500:	4606      	mov	r6, r0
    b502:	f000 fb8f 	bl	bc24 <__aeabi_i2f>
    b506:	4918      	ldr	r1, [pc, #96]	; (b568 <__ieee754_expf+0x23c>)
    b508:	4605      	mov	r5, r0
    b50a:	f000 fbdf 	bl	bccc <__aeabi_fmul>
    b50e:	4601      	mov	r1, r0
    b510:	4620      	mov	r0, r4
    b512:	f000 fad1 	bl	bab8 <__aeabi_fsub>
    b516:	4915      	ldr	r1, [pc, #84]	; (b56c <__ieee754_expf+0x240>)
    b518:	4680      	mov	r8, r0
    b51a:	4628      	mov	r0, r5
    b51c:	f000 fbd6 	bl	bccc <__aeabi_fmul>
    b520:	4681      	mov	r9, r0
    b522:	e72a      	b.n	b37a <__ieee754_expf+0x4e>
    b524:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    b528:	4620      	mov	r0, r4
    b52a:	f000 fac7 	bl	babc <__addsf3>
    b52e:	e775      	b.n	b41c <__ieee754_expf+0xf0>
    b530:	42b17217 	.word	0x42b17217
    b534:	3eb17218 	.word	0x3eb17218
    b538:	3f851591 	.word	0x3f851591
    b53c:	000141e0 	.word	0x000141e0
    b540:	000141e8 	.word	0x000141e8
    b544:	3331bb4c 	.word	0x3331bb4c
    b548:	35ddea0e 	.word	0x35ddea0e
    b54c:	388ab355 	.word	0x388ab355
    b550:	3b360b61 	.word	0x3b360b61
    b554:	3e2aaaab 	.word	0x3e2aaaab
    b558:	7149f2ca 	.word	0x7149f2ca
    b55c:	42cff1b5 	.word	0x42cff1b5
    b560:	3fb8aa3b 	.word	0x3fb8aa3b
    b564:	000141d8 	.word	0x000141d8
    b568:	3f317180 	.word	0x3f317180
    b56c:	3717f7d1 	.word	0x3717f7d1

0000b570 <with_errnof>:
    b570:	b538      	push	{r3, r4, r5, lr}
    b572:	4605      	mov	r5, r0
    b574:	460c      	mov	r4, r1
    b576:	f001 fd1b 	bl	cfb0 <__errno>
    b57a:	4603      	mov	r3, r0
    b57c:	4628      	mov	r0, r5
    b57e:	601c      	str	r4, [r3, #0]
    b580:	bd38      	pop	{r3, r4, r5, pc}
    b582:	bf00      	nop

0000b584 <xflowf>:
    b584:	b508      	push	{r3, lr}
    b586:	b140      	cbz	r0, b59a <xflowf+0x16>
    b588:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
    b58c:	f000 fb9e 	bl	bccc <__aeabi_fmul>
    b590:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b594:	2122      	movs	r1, #34	; 0x22
    b596:	f7ff bfeb 	b.w	b570 <with_errnof>
    b59a:	4608      	mov	r0, r1
    b59c:	f000 fb96 	bl	bccc <__aeabi_fmul>
    b5a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b5a4:	2122      	movs	r1, #34	; 0x22
    b5a6:	f7ff bfe3 	b.w	b570 <with_errnof>
    b5aa:	bf00      	nop

0000b5ac <__math_uflowf>:
    b5ac:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    b5b0:	f7ff bfe8 	b.w	b584 <xflowf>

0000b5b4 <__math_oflowf>:
    b5b4:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
    b5b8:	f7ff bfe4 	b.w	b584 <xflowf>

0000b5bc <__aeabi_drsub>:
    b5bc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    b5c0:	e002      	b.n	b5c8 <__adddf3>
    b5c2:	bf00      	nop

0000b5c4 <__aeabi_dsub>:
    b5c4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000b5c8 <__adddf3>:
    b5c8:	b530      	push	{r4, r5, lr}
    b5ca:	ea4f 0441 	mov.w	r4, r1, lsl #1
    b5ce:	ea4f 0543 	mov.w	r5, r3, lsl #1
    b5d2:	ea94 0f05 	teq	r4, r5
    b5d6:	bf08      	it	eq
    b5d8:	ea90 0f02 	teqeq	r0, r2
    b5dc:	bf1f      	itttt	ne
    b5de:	ea54 0c00 	orrsne.w	ip, r4, r0
    b5e2:	ea55 0c02 	orrsne.w	ip, r5, r2
    b5e6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    b5ea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    b5ee:	f000 80e2 	beq.w	b7b6 <__adddf3+0x1ee>
    b5f2:	ea4f 5454 	mov.w	r4, r4, lsr #21
    b5f6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    b5fa:	bfb8      	it	lt
    b5fc:	426d      	neglt	r5, r5
    b5fe:	dd0c      	ble.n	b61a <__adddf3+0x52>
    b600:	442c      	add	r4, r5
    b602:	ea80 0202 	eor.w	r2, r0, r2
    b606:	ea81 0303 	eor.w	r3, r1, r3
    b60a:	ea82 0000 	eor.w	r0, r2, r0
    b60e:	ea83 0101 	eor.w	r1, r3, r1
    b612:	ea80 0202 	eor.w	r2, r0, r2
    b616:	ea81 0303 	eor.w	r3, r1, r3
    b61a:	2d36      	cmp	r5, #54	; 0x36
    b61c:	bf88      	it	hi
    b61e:	bd30      	pophi	{r4, r5, pc}
    b620:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    b624:	ea4f 3101 	mov.w	r1, r1, lsl #12
    b628:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    b62c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    b630:	d002      	beq.n	b638 <__adddf3+0x70>
    b632:	4240      	negs	r0, r0
    b634:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    b638:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    b63c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    b640:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    b644:	d002      	beq.n	b64c <__adddf3+0x84>
    b646:	4252      	negs	r2, r2
    b648:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    b64c:	ea94 0f05 	teq	r4, r5
    b650:	f000 80a7 	beq.w	b7a2 <__adddf3+0x1da>
    b654:	f1a4 0401 	sub.w	r4, r4, #1
    b658:	f1d5 0e20 	rsbs	lr, r5, #32
    b65c:	db0d      	blt.n	b67a <__adddf3+0xb2>
    b65e:	fa02 fc0e 	lsl.w	ip, r2, lr
    b662:	fa22 f205 	lsr.w	r2, r2, r5
    b666:	1880      	adds	r0, r0, r2
    b668:	f141 0100 	adc.w	r1, r1, #0
    b66c:	fa03 f20e 	lsl.w	r2, r3, lr
    b670:	1880      	adds	r0, r0, r2
    b672:	fa43 f305 	asr.w	r3, r3, r5
    b676:	4159      	adcs	r1, r3
    b678:	e00e      	b.n	b698 <__adddf3+0xd0>
    b67a:	f1a5 0520 	sub.w	r5, r5, #32
    b67e:	f10e 0e20 	add.w	lr, lr, #32
    b682:	2a01      	cmp	r2, #1
    b684:	fa03 fc0e 	lsl.w	ip, r3, lr
    b688:	bf28      	it	cs
    b68a:	f04c 0c02 	orrcs.w	ip, ip, #2
    b68e:	fa43 f305 	asr.w	r3, r3, r5
    b692:	18c0      	adds	r0, r0, r3
    b694:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    b698:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b69c:	d507      	bpl.n	b6ae <__adddf3+0xe6>
    b69e:	f04f 0e00 	mov.w	lr, #0
    b6a2:	f1dc 0c00 	rsbs	ip, ip, #0
    b6a6:	eb7e 0000 	sbcs.w	r0, lr, r0
    b6aa:	eb6e 0101 	sbc.w	r1, lr, r1
    b6ae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    b6b2:	d31b      	bcc.n	b6ec <__adddf3+0x124>
    b6b4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    b6b8:	d30c      	bcc.n	b6d4 <__adddf3+0x10c>
    b6ba:	0849      	lsrs	r1, r1, #1
    b6bc:	ea5f 0030 	movs.w	r0, r0, rrx
    b6c0:	ea4f 0c3c 	mov.w	ip, ip, rrx
    b6c4:	f104 0401 	add.w	r4, r4, #1
    b6c8:	ea4f 5244 	mov.w	r2, r4, lsl #21
    b6cc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    b6d0:	f080 809a 	bcs.w	b808 <__adddf3+0x240>
    b6d4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    b6d8:	bf08      	it	eq
    b6da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    b6de:	f150 0000 	adcs.w	r0, r0, #0
    b6e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b6e6:	ea41 0105 	orr.w	r1, r1, r5
    b6ea:	bd30      	pop	{r4, r5, pc}
    b6ec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    b6f0:	4140      	adcs	r0, r0
    b6f2:	eb41 0101 	adc.w	r1, r1, r1
    b6f6:	3c01      	subs	r4, #1
    b6f8:	bf28      	it	cs
    b6fa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    b6fe:	d2e9      	bcs.n	b6d4 <__adddf3+0x10c>
    b700:	f091 0f00 	teq	r1, #0
    b704:	bf04      	itt	eq
    b706:	4601      	moveq	r1, r0
    b708:	2000      	moveq	r0, #0
    b70a:	fab1 f381 	clz	r3, r1
    b70e:	bf08      	it	eq
    b710:	3320      	addeq	r3, #32
    b712:	f1a3 030b 	sub.w	r3, r3, #11
    b716:	f1b3 0220 	subs.w	r2, r3, #32
    b71a:	da0c      	bge.n	b736 <__adddf3+0x16e>
    b71c:	320c      	adds	r2, #12
    b71e:	dd08      	ble.n	b732 <__adddf3+0x16a>
    b720:	f102 0c14 	add.w	ip, r2, #20
    b724:	f1c2 020c 	rsb	r2, r2, #12
    b728:	fa01 f00c 	lsl.w	r0, r1, ip
    b72c:	fa21 f102 	lsr.w	r1, r1, r2
    b730:	e00c      	b.n	b74c <__adddf3+0x184>
    b732:	f102 0214 	add.w	r2, r2, #20
    b736:	bfd8      	it	le
    b738:	f1c2 0c20 	rsble	ip, r2, #32
    b73c:	fa01 f102 	lsl.w	r1, r1, r2
    b740:	fa20 fc0c 	lsr.w	ip, r0, ip
    b744:	bfdc      	itt	le
    b746:	ea41 010c 	orrle.w	r1, r1, ip
    b74a:	4090      	lslle	r0, r2
    b74c:	1ae4      	subs	r4, r4, r3
    b74e:	bfa2      	ittt	ge
    b750:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    b754:	4329      	orrge	r1, r5
    b756:	bd30      	popge	{r4, r5, pc}
    b758:	ea6f 0404 	mvn.w	r4, r4
    b75c:	3c1f      	subs	r4, #31
    b75e:	da1c      	bge.n	b79a <__adddf3+0x1d2>
    b760:	340c      	adds	r4, #12
    b762:	dc0e      	bgt.n	b782 <__adddf3+0x1ba>
    b764:	f104 0414 	add.w	r4, r4, #20
    b768:	f1c4 0220 	rsb	r2, r4, #32
    b76c:	fa20 f004 	lsr.w	r0, r0, r4
    b770:	fa01 f302 	lsl.w	r3, r1, r2
    b774:	ea40 0003 	orr.w	r0, r0, r3
    b778:	fa21 f304 	lsr.w	r3, r1, r4
    b77c:	ea45 0103 	orr.w	r1, r5, r3
    b780:	bd30      	pop	{r4, r5, pc}
    b782:	f1c4 040c 	rsb	r4, r4, #12
    b786:	f1c4 0220 	rsb	r2, r4, #32
    b78a:	fa20 f002 	lsr.w	r0, r0, r2
    b78e:	fa01 f304 	lsl.w	r3, r1, r4
    b792:	ea40 0003 	orr.w	r0, r0, r3
    b796:	4629      	mov	r1, r5
    b798:	bd30      	pop	{r4, r5, pc}
    b79a:	fa21 f004 	lsr.w	r0, r1, r4
    b79e:	4629      	mov	r1, r5
    b7a0:	bd30      	pop	{r4, r5, pc}
    b7a2:	f094 0f00 	teq	r4, #0
    b7a6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    b7aa:	bf06      	itte	eq
    b7ac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    b7b0:	3401      	addeq	r4, #1
    b7b2:	3d01      	subne	r5, #1
    b7b4:	e74e      	b.n	b654 <__adddf3+0x8c>
    b7b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    b7ba:	bf18      	it	ne
    b7bc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    b7c0:	d029      	beq.n	b816 <__adddf3+0x24e>
    b7c2:	ea94 0f05 	teq	r4, r5
    b7c6:	bf08      	it	eq
    b7c8:	ea90 0f02 	teqeq	r0, r2
    b7cc:	d005      	beq.n	b7da <__adddf3+0x212>
    b7ce:	ea54 0c00 	orrs.w	ip, r4, r0
    b7d2:	bf04      	itt	eq
    b7d4:	4619      	moveq	r1, r3
    b7d6:	4610      	moveq	r0, r2
    b7d8:	bd30      	pop	{r4, r5, pc}
    b7da:	ea91 0f03 	teq	r1, r3
    b7de:	bf1e      	ittt	ne
    b7e0:	2100      	movne	r1, #0
    b7e2:	2000      	movne	r0, #0
    b7e4:	bd30      	popne	{r4, r5, pc}
    b7e6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    b7ea:	d105      	bne.n	b7f8 <__adddf3+0x230>
    b7ec:	0040      	lsls	r0, r0, #1
    b7ee:	4149      	adcs	r1, r1
    b7f0:	bf28      	it	cs
    b7f2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    b7f6:	bd30      	pop	{r4, r5, pc}
    b7f8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    b7fc:	bf3c      	itt	cc
    b7fe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    b802:	bd30      	popcc	{r4, r5, pc}
    b804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b808:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    b80c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    b810:	f04f 0000 	mov.w	r0, #0
    b814:	bd30      	pop	{r4, r5, pc}
    b816:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    b81a:	bf1a      	itte	ne
    b81c:	4619      	movne	r1, r3
    b81e:	4610      	movne	r0, r2
    b820:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    b824:	bf1c      	itt	ne
    b826:	460b      	movne	r3, r1
    b828:	4602      	movne	r2, r0
    b82a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    b82e:	bf06      	itte	eq
    b830:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    b834:	ea91 0f03 	teqeq	r1, r3
    b838:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    b83c:	bd30      	pop	{r4, r5, pc}
    b83e:	bf00      	nop

0000b840 <__aeabi_ui2d>:
    b840:	f090 0f00 	teq	r0, #0
    b844:	bf04      	itt	eq
    b846:	2100      	moveq	r1, #0
    b848:	4770      	bxeq	lr
    b84a:	b530      	push	{r4, r5, lr}
    b84c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b850:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b854:	f04f 0500 	mov.w	r5, #0
    b858:	f04f 0100 	mov.w	r1, #0
    b85c:	e750      	b.n	b700 <__adddf3+0x138>
    b85e:	bf00      	nop

0000b860 <__aeabi_i2d>:
    b860:	f090 0f00 	teq	r0, #0
    b864:	bf04      	itt	eq
    b866:	2100      	moveq	r1, #0
    b868:	4770      	bxeq	lr
    b86a:	b530      	push	{r4, r5, lr}
    b86c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b870:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b874:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    b878:	bf48      	it	mi
    b87a:	4240      	negmi	r0, r0
    b87c:	f04f 0100 	mov.w	r1, #0
    b880:	e73e      	b.n	b700 <__adddf3+0x138>
    b882:	bf00      	nop

0000b884 <__aeabi_f2d>:
    b884:	0042      	lsls	r2, r0, #1
    b886:	ea4f 01e2 	mov.w	r1, r2, asr #3
    b88a:	ea4f 0131 	mov.w	r1, r1, rrx
    b88e:	ea4f 7002 	mov.w	r0, r2, lsl #28
    b892:	bf1f      	itttt	ne
    b894:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    b898:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    b89c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    b8a0:	4770      	bxne	lr
    b8a2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    b8a6:	bf08      	it	eq
    b8a8:	4770      	bxeq	lr
    b8aa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    b8ae:	bf04      	itt	eq
    b8b0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    b8b4:	4770      	bxeq	lr
    b8b6:	b530      	push	{r4, r5, lr}
    b8b8:	f44f 7460 	mov.w	r4, #896	; 0x380
    b8bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b8c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    b8c4:	e71c      	b.n	b700 <__adddf3+0x138>
    b8c6:	bf00      	nop

0000b8c8 <__aeabi_ul2d>:
    b8c8:	ea50 0201 	orrs.w	r2, r0, r1
    b8cc:	bf08      	it	eq
    b8ce:	4770      	bxeq	lr
    b8d0:	b530      	push	{r4, r5, lr}
    b8d2:	f04f 0500 	mov.w	r5, #0
    b8d6:	e00a      	b.n	b8ee <__aeabi_l2d+0x16>

0000b8d8 <__aeabi_l2d>:
    b8d8:	ea50 0201 	orrs.w	r2, r0, r1
    b8dc:	bf08      	it	eq
    b8de:	4770      	bxeq	lr
    b8e0:	b530      	push	{r4, r5, lr}
    b8e2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    b8e6:	d502      	bpl.n	b8ee <__aeabi_l2d+0x16>
    b8e8:	4240      	negs	r0, r0
    b8ea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    b8ee:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b8f2:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b8f6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    b8fa:	f43f aed8 	beq.w	b6ae <__adddf3+0xe6>
    b8fe:	f04f 0203 	mov.w	r2, #3
    b902:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    b906:	bf18      	it	ne
    b908:	3203      	addne	r2, #3
    b90a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    b90e:	bf18      	it	ne
    b910:	3203      	addne	r2, #3
    b912:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    b916:	f1c2 0320 	rsb	r3, r2, #32
    b91a:	fa00 fc03 	lsl.w	ip, r0, r3
    b91e:	fa20 f002 	lsr.w	r0, r0, r2
    b922:	fa01 fe03 	lsl.w	lr, r1, r3
    b926:	ea40 000e 	orr.w	r0, r0, lr
    b92a:	fa21 f102 	lsr.w	r1, r1, r2
    b92e:	4414      	add	r4, r2
    b930:	e6bd      	b.n	b6ae <__adddf3+0xe6>
    b932:	bf00      	nop

0000b934 <__gedf2>:
    b934:	f04f 3cff 	mov.w	ip, #4294967295
    b938:	e006      	b.n	b948 <__cmpdf2+0x4>
    b93a:	bf00      	nop

0000b93c <__ledf2>:
    b93c:	f04f 0c01 	mov.w	ip, #1
    b940:	e002      	b.n	b948 <__cmpdf2+0x4>
    b942:	bf00      	nop

0000b944 <__cmpdf2>:
    b944:	f04f 0c01 	mov.w	ip, #1
    b948:	f84d cd04 	str.w	ip, [sp, #-4]!
    b94c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    b950:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    b954:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    b958:	bf18      	it	ne
    b95a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    b95e:	d01b      	beq.n	b998 <__cmpdf2+0x54>
    b960:	b001      	add	sp, #4
    b962:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    b966:	bf0c      	ite	eq
    b968:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    b96c:	ea91 0f03 	teqne	r1, r3
    b970:	bf02      	ittt	eq
    b972:	ea90 0f02 	teqeq	r0, r2
    b976:	2000      	moveq	r0, #0
    b978:	4770      	bxeq	lr
    b97a:	f110 0f00 	cmn.w	r0, #0
    b97e:	ea91 0f03 	teq	r1, r3
    b982:	bf58      	it	pl
    b984:	4299      	cmppl	r1, r3
    b986:	bf08      	it	eq
    b988:	4290      	cmpeq	r0, r2
    b98a:	bf2c      	ite	cs
    b98c:	17d8      	asrcs	r0, r3, #31
    b98e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    b992:	f040 0001 	orr.w	r0, r0, #1
    b996:	4770      	bx	lr
    b998:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    b99c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    b9a0:	d102      	bne.n	b9a8 <__cmpdf2+0x64>
    b9a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    b9a6:	d107      	bne.n	b9b8 <__cmpdf2+0x74>
    b9a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    b9ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    b9b0:	d1d6      	bne.n	b960 <__cmpdf2+0x1c>
    b9b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    b9b6:	d0d3      	beq.n	b960 <__cmpdf2+0x1c>
    b9b8:	f85d 0b04 	ldr.w	r0, [sp], #4
    b9bc:	4770      	bx	lr
    b9be:	bf00      	nop

0000b9c0 <__aeabi_cdrcmple>:
    b9c0:	4684      	mov	ip, r0
    b9c2:	4610      	mov	r0, r2
    b9c4:	4662      	mov	r2, ip
    b9c6:	468c      	mov	ip, r1
    b9c8:	4619      	mov	r1, r3
    b9ca:	4663      	mov	r3, ip
    b9cc:	e000      	b.n	b9d0 <__aeabi_cdcmpeq>
    b9ce:	bf00      	nop

0000b9d0 <__aeabi_cdcmpeq>:
    b9d0:	b501      	push	{r0, lr}
    b9d2:	f7ff ffb7 	bl	b944 <__cmpdf2>
    b9d6:	2800      	cmp	r0, #0
    b9d8:	bf48      	it	mi
    b9da:	f110 0f00 	cmnmi.w	r0, #0
    b9de:	bd01      	pop	{r0, pc}

0000b9e0 <__aeabi_dcmpeq>:
    b9e0:	f84d ed08 	str.w	lr, [sp, #-8]!
    b9e4:	f7ff fff4 	bl	b9d0 <__aeabi_cdcmpeq>
    b9e8:	bf0c      	ite	eq
    b9ea:	2001      	moveq	r0, #1
    b9ec:	2000      	movne	r0, #0
    b9ee:	f85d fb08 	ldr.w	pc, [sp], #8
    b9f2:	bf00      	nop

0000b9f4 <__aeabi_dcmplt>:
    b9f4:	f84d ed08 	str.w	lr, [sp, #-8]!
    b9f8:	f7ff ffea 	bl	b9d0 <__aeabi_cdcmpeq>
    b9fc:	bf34      	ite	cc
    b9fe:	2001      	movcc	r0, #1
    ba00:	2000      	movcs	r0, #0
    ba02:	f85d fb08 	ldr.w	pc, [sp], #8
    ba06:	bf00      	nop

0000ba08 <__aeabi_dcmple>:
    ba08:	f84d ed08 	str.w	lr, [sp, #-8]!
    ba0c:	f7ff ffe0 	bl	b9d0 <__aeabi_cdcmpeq>
    ba10:	bf94      	ite	ls
    ba12:	2001      	movls	r0, #1
    ba14:	2000      	movhi	r0, #0
    ba16:	f85d fb08 	ldr.w	pc, [sp], #8
    ba1a:	bf00      	nop

0000ba1c <__aeabi_dcmpge>:
    ba1c:	f84d ed08 	str.w	lr, [sp, #-8]!
    ba20:	f7ff ffce 	bl	b9c0 <__aeabi_cdrcmple>
    ba24:	bf94      	ite	ls
    ba26:	2001      	movls	r0, #1
    ba28:	2000      	movhi	r0, #0
    ba2a:	f85d fb08 	ldr.w	pc, [sp], #8
    ba2e:	bf00      	nop

0000ba30 <__aeabi_dcmpgt>:
    ba30:	f84d ed08 	str.w	lr, [sp, #-8]!
    ba34:	f7ff ffc4 	bl	b9c0 <__aeabi_cdrcmple>
    ba38:	bf34      	ite	cc
    ba3a:	2001      	movcc	r0, #1
    ba3c:	2000      	movcs	r0, #0
    ba3e:	f85d fb08 	ldr.w	pc, [sp], #8
    ba42:	bf00      	nop

0000ba44 <__aeabi_dcmpun>:
    ba44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    ba48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    ba4c:	d102      	bne.n	ba54 <__aeabi_dcmpun+0x10>
    ba4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    ba52:	d10a      	bne.n	ba6a <__aeabi_dcmpun+0x26>
    ba54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    ba58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    ba5c:	d102      	bne.n	ba64 <__aeabi_dcmpun+0x20>
    ba5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    ba62:	d102      	bne.n	ba6a <__aeabi_dcmpun+0x26>
    ba64:	f04f 0000 	mov.w	r0, #0
    ba68:	4770      	bx	lr
    ba6a:	f04f 0001 	mov.w	r0, #1
    ba6e:	4770      	bx	lr

0000ba70 <__aeabi_d2uiz>:
    ba70:	004a      	lsls	r2, r1, #1
    ba72:	d211      	bcs.n	ba98 <__aeabi_d2uiz+0x28>
    ba74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    ba78:	d211      	bcs.n	ba9e <__aeabi_d2uiz+0x2e>
    ba7a:	d50d      	bpl.n	ba98 <__aeabi_d2uiz+0x28>
    ba7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    ba80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    ba84:	d40e      	bmi.n	baa4 <__aeabi_d2uiz+0x34>
    ba86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    ba8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    ba8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    ba92:	fa23 f002 	lsr.w	r0, r3, r2
    ba96:	4770      	bx	lr
    ba98:	f04f 0000 	mov.w	r0, #0
    ba9c:	4770      	bx	lr
    ba9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    baa2:	d102      	bne.n	baaa <__aeabi_d2uiz+0x3a>
    baa4:	f04f 30ff 	mov.w	r0, #4294967295
    baa8:	4770      	bx	lr
    baaa:	f04f 0000 	mov.w	r0, #0
    baae:	4770      	bx	lr

0000bab0 <__aeabi_frsub>:
    bab0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    bab4:	e002      	b.n	babc <__addsf3>
    bab6:	bf00      	nop

0000bab8 <__aeabi_fsub>:
    bab8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0000babc <__addsf3>:
    babc:	0042      	lsls	r2, r0, #1
    babe:	bf1f      	itttt	ne
    bac0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    bac4:	ea92 0f03 	teqne	r2, r3
    bac8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    bacc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    bad0:	d06a      	beq.n	bba8 <__addsf3+0xec>
    bad2:	ea4f 6212 	mov.w	r2, r2, lsr #24
    bad6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    bada:	bfc1      	itttt	gt
    badc:	18d2      	addgt	r2, r2, r3
    bade:	4041      	eorgt	r1, r0
    bae0:	4048      	eorgt	r0, r1
    bae2:	4041      	eorgt	r1, r0
    bae4:	bfb8      	it	lt
    bae6:	425b      	neglt	r3, r3
    bae8:	2b19      	cmp	r3, #25
    baea:	bf88      	it	hi
    baec:	4770      	bxhi	lr
    baee:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    baf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    baf6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bafa:	bf18      	it	ne
    bafc:	4240      	negne	r0, r0
    bafe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    bb02:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    bb06:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    bb0a:	bf18      	it	ne
    bb0c:	4249      	negne	r1, r1
    bb0e:	ea92 0f03 	teq	r2, r3
    bb12:	d03f      	beq.n	bb94 <__addsf3+0xd8>
    bb14:	f1a2 0201 	sub.w	r2, r2, #1
    bb18:	fa41 fc03 	asr.w	ip, r1, r3
    bb1c:	eb10 000c 	adds.w	r0, r0, ip
    bb20:	f1c3 0320 	rsb	r3, r3, #32
    bb24:	fa01 f103 	lsl.w	r1, r1, r3
    bb28:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    bb2c:	d502      	bpl.n	bb34 <__addsf3+0x78>
    bb2e:	4249      	negs	r1, r1
    bb30:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    bb34:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    bb38:	d313      	bcc.n	bb62 <__addsf3+0xa6>
    bb3a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    bb3e:	d306      	bcc.n	bb4e <__addsf3+0x92>
    bb40:	0840      	lsrs	r0, r0, #1
    bb42:	ea4f 0131 	mov.w	r1, r1, rrx
    bb46:	f102 0201 	add.w	r2, r2, #1
    bb4a:	2afe      	cmp	r2, #254	; 0xfe
    bb4c:	d251      	bcs.n	bbf2 <__addsf3+0x136>
    bb4e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    bb52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    bb56:	bf08      	it	eq
    bb58:	f020 0001 	biceq.w	r0, r0, #1
    bb5c:	ea40 0003 	orr.w	r0, r0, r3
    bb60:	4770      	bx	lr
    bb62:	0049      	lsls	r1, r1, #1
    bb64:	eb40 0000 	adc.w	r0, r0, r0
    bb68:	3a01      	subs	r2, #1
    bb6a:	bf28      	it	cs
    bb6c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    bb70:	d2ed      	bcs.n	bb4e <__addsf3+0x92>
    bb72:	fab0 fc80 	clz	ip, r0
    bb76:	f1ac 0c08 	sub.w	ip, ip, #8
    bb7a:	ebb2 020c 	subs.w	r2, r2, ip
    bb7e:	fa00 f00c 	lsl.w	r0, r0, ip
    bb82:	bfaa      	itet	ge
    bb84:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    bb88:	4252      	neglt	r2, r2
    bb8a:	4318      	orrge	r0, r3
    bb8c:	bfbc      	itt	lt
    bb8e:	40d0      	lsrlt	r0, r2
    bb90:	4318      	orrlt	r0, r3
    bb92:	4770      	bx	lr
    bb94:	f092 0f00 	teq	r2, #0
    bb98:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    bb9c:	bf06      	itte	eq
    bb9e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    bba2:	3201      	addeq	r2, #1
    bba4:	3b01      	subne	r3, #1
    bba6:	e7b5      	b.n	bb14 <__addsf3+0x58>
    bba8:	ea4f 0341 	mov.w	r3, r1, lsl #1
    bbac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    bbb0:	bf18      	it	ne
    bbb2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    bbb6:	d021      	beq.n	bbfc <__addsf3+0x140>
    bbb8:	ea92 0f03 	teq	r2, r3
    bbbc:	d004      	beq.n	bbc8 <__addsf3+0x10c>
    bbbe:	f092 0f00 	teq	r2, #0
    bbc2:	bf08      	it	eq
    bbc4:	4608      	moveq	r0, r1
    bbc6:	4770      	bx	lr
    bbc8:	ea90 0f01 	teq	r0, r1
    bbcc:	bf1c      	itt	ne
    bbce:	2000      	movne	r0, #0
    bbd0:	4770      	bxne	lr
    bbd2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    bbd6:	d104      	bne.n	bbe2 <__addsf3+0x126>
    bbd8:	0040      	lsls	r0, r0, #1
    bbda:	bf28      	it	cs
    bbdc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    bbe0:	4770      	bx	lr
    bbe2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    bbe6:	bf3c      	itt	cc
    bbe8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    bbec:	4770      	bxcc	lr
    bbee:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    bbf2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    bbf6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    bbfa:	4770      	bx	lr
    bbfc:	ea7f 6222 	mvns.w	r2, r2, asr #24
    bc00:	bf16      	itet	ne
    bc02:	4608      	movne	r0, r1
    bc04:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    bc08:	4601      	movne	r1, r0
    bc0a:	0242      	lsls	r2, r0, #9
    bc0c:	bf06      	itte	eq
    bc0e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    bc12:	ea90 0f01 	teqeq	r0, r1
    bc16:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    bc1a:	4770      	bx	lr

0000bc1c <__aeabi_ui2f>:
    bc1c:	f04f 0300 	mov.w	r3, #0
    bc20:	e004      	b.n	bc2c <__aeabi_i2f+0x8>
    bc22:	bf00      	nop

0000bc24 <__aeabi_i2f>:
    bc24:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    bc28:	bf48      	it	mi
    bc2a:	4240      	negmi	r0, r0
    bc2c:	ea5f 0c00 	movs.w	ip, r0
    bc30:	bf08      	it	eq
    bc32:	4770      	bxeq	lr
    bc34:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    bc38:	4601      	mov	r1, r0
    bc3a:	f04f 0000 	mov.w	r0, #0
    bc3e:	e01c      	b.n	bc7a <__aeabi_l2f+0x2a>

0000bc40 <__aeabi_ul2f>:
    bc40:	ea50 0201 	orrs.w	r2, r0, r1
    bc44:	bf08      	it	eq
    bc46:	4770      	bxeq	lr
    bc48:	f04f 0300 	mov.w	r3, #0
    bc4c:	e00a      	b.n	bc64 <__aeabi_l2f+0x14>
    bc4e:	bf00      	nop

0000bc50 <__aeabi_l2f>:
    bc50:	ea50 0201 	orrs.w	r2, r0, r1
    bc54:	bf08      	it	eq
    bc56:	4770      	bxeq	lr
    bc58:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    bc5c:	d502      	bpl.n	bc64 <__aeabi_l2f+0x14>
    bc5e:	4240      	negs	r0, r0
    bc60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    bc64:	ea5f 0c01 	movs.w	ip, r1
    bc68:	bf02      	ittt	eq
    bc6a:	4684      	moveq	ip, r0
    bc6c:	4601      	moveq	r1, r0
    bc6e:	2000      	moveq	r0, #0
    bc70:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    bc74:	bf08      	it	eq
    bc76:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    bc7a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    bc7e:	fabc f28c 	clz	r2, ip
    bc82:	3a08      	subs	r2, #8
    bc84:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    bc88:	db10      	blt.n	bcac <__aeabi_l2f+0x5c>
    bc8a:	fa01 fc02 	lsl.w	ip, r1, r2
    bc8e:	4463      	add	r3, ip
    bc90:	fa00 fc02 	lsl.w	ip, r0, r2
    bc94:	f1c2 0220 	rsb	r2, r2, #32
    bc98:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    bc9c:	fa20 f202 	lsr.w	r2, r0, r2
    bca0:	eb43 0002 	adc.w	r0, r3, r2
    bca4:	bf08      	it	eq
    bca6:	f020 0001 	biceq.w	r0, r0, #1
    bcaa:	4770      	bx	lr
    bcac:	f102 0220 	add.w	r2, r2, #32
    bcb0:	fa01 fc02 	lsl.w	ip, r1, r2
    bcb4:	f1c2 0220 	rsb	r2, r2, #32
    bcb8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    bcbc:	fa21 f202 	lsr.w	r2, r1, r2
    bcc0:	eb43 0002 	adc.w	r0, r3, r2
    bcc4:	bf08      	it	eq
    bcc6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    bcca:	4770      	bx	lr

0000bccc <__aeabi_fmul>:
    bccc:	f04f 0cff 	mov.w	ip, #255	; 0xff
    bcd0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    bcd4:	bf1e      	ittt	ne
    bcd6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    bcda:	ea92 0f0c 	teqne	r2, ip
    bcde:	ea93 0f0c 	teqne	r3, ip
    bce2:	d06f      	beq.n	bdc4 <__aeabi_fmul+0xf8>
    bce4:	441a      	add	r2, r3
    bce6:	ea80 0c01 	eor.w	ip, r0, r1
    bcea:	0240      	lsls	r0, r0, #9
    bcec:	bf18      	it	ne
    bcee:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    bcf2:	d01e      	beq.n	bd32 <__aeabi_fmul+0x66>
    bcf4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    bcf8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    bcfc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    bd00:	fba0 3101 	umull	r3, r1, r0, r1
    bd04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    bd08:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    bd0c:	bf3e      	ittt	cc
    bd0e:	0049      	lslcc	r1, r1, #1
    bd10:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    bd14:	005b      	lslcc	r3, r3, #1
    bd16:	ea40 0001 	orr.w	r0, r0, r1
    bd1a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    bd1e:	2afd      	cmp	r2, #253	; 0xfd
    bd20:	d81d      	bhi.n	bd5e <__aeabi_fmul+0x92>
    bd22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    bd26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    bd2a:	bf08      	it	eq
    bd2c:	f020 0001 	biceq.w	r0, r0, #1
    bd30:	4770      	bx	lr
    bd32:	f090 0f00 	teq	r0, #0
    bd36:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    bd3a:	bf08      	it	eq
    bd3c:	0249      	lsleq	r1, r1, #9
    bd3e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    bd42:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    bd46:	3a7f      	subs	r2, #127	; 0x7f
    bd48:	bfc2      	ittt	gt
    bd4a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    bd4e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    bd52:	4770      	bxgt	lr
    bd54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    bd58:	f04f 0300 	mov.w	r3, #0
    bd5c:	3a01      	subs	r2, #1
    bd5e:	dc5d      	bgt.n	be1c <__aeabi_fmul+0x150>
    bd60:	f112 0f19 	cmn.w	r2, #25
    bd64:	bfdc      	itt	le
    bd66:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    bd6a:	4770      	bxle	lr
    bd6c:	f1c2 0200 	rsb	r2, r2, #0
    bd70:	0041      	lsls	r1, r0, #1
    bd72:	fa21 f102 	lsr.w	r1, r1, r2
    bd76:	f1c2 0220 	rsb	r2, r2, #32
    bd7a:	fa00 fc02 	lsl.w	ip, r0, r2
    bd7e:	ea5f 0031 	movs.w	r0, r1, rrx
    bd82:	f140 0000 	adc.w	r0, r0, #0
    bd86:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    bd8a:	bf08      	it	eq
    bd8c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    bd90:	4770      	bx	lr
    bd92:	f092 0f00 	teq	r2, #0
    bd96:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    bd9a:	bf02      	ittt	eq
    bd9c:	0040      	lsleq	r0, r0, #1
    bd9e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    bda2:	3a01      	subeq	r2, #1
    bda4:	d0f9      	beq.n	bd9a <__aeabi_fmul+0xce>
    bda6:	ea40 000c 	orr.w	r0, r0, ip
    bdaa:	f093 0f00 	teq	r3, #0
    bdae:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    bdb2:	bf02      	ittt	eq
    bdb4:	0049      	lsleq	r1, r1, #1
    bdb6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    bdba:	3b01      	subeq	r3, #1
    bdbc:	d0f9      	beq.n	bdb2 <__aeabi_fmul+0xe6>
    bdbe:	ea41 010c 	orr.w	r1, r1, ip
    bdc2:	e78f      	b.n	bce4 <__aeabi_fmul+0x18>
    bdc4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    bdc8:	ea92 0f0c 	teq	r2, ip
    bdcc:	bf18      	it	ne
    bdce:	ea93 0f0c 	teqne	r3, ip
    bdd2:	d00a      	beq.n	bdea <__aeabi_fmul+0x11e>
    bdd4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    bdd8:	bf18      	it	ne
    bdda:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    bdde:	d1d8      	bne.n	bd92 <__aeabi_fmul+0xc6>
    bde0:	ea80 0001 	eor.w	r0, r0, r1
    bde4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    bde8:	4770      	bx	lr
    bdea:	f090 0f00 	teq	r0, #0
    bdee:	bf17      	itett	ne
    bdf0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    bdf4:	4608      	moveq	r0, r1
    bdf6:	f091 0f00 	teqne	r1, #0
    bdfa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    bdfe:	d014      	beq.n	be2a <__aeabi_fmul+0x15e>
    be00:	ea92 0f0c 	teq	r2, ip
    be04:	d101      	bne.n	be0a <__aeabi_fmul+0x13e>
    be06:	0242      	lsls	r2, r0, #9
    be08:	d10f      	bne.n	be2a <__aeabi_fmul+0x15e>
    be0a:	ea93 0f0c 	teq	r3, ip
    be0e:	d103      	bne.n	be18 <__aeabi_fmul+0x14c>
    be10:	024b      	lsls	r3, r1, #9
    be12:	bf18      	it	ne
    be14:	4608      	movne	r0, r1
    be16:	d108      	bne.n	be2a <__aeabi_fmul+0x15e>
    be18:	ea80 0001 	eor.w	r0, r0, r1
    be1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    be20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    be24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    be28:	4770      	bx	lr
    be2a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    be2e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    be32:	4770      	bx	lr

0000be34 <__aeabi_fdiv>:
    be34:	f04f 0cff 	mov.w	ip, #255	; 0xff
    be38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    be3c:	bf1e      	ittt	ne
    be3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    be42:	ea92 0f0c 	teqne	r2, ip
    be46:	ea93 0f0c 	teqne	r3, ip
    be4a:	d069      	beq.n	bf20 <__aeabi_fdiv+0xec>
    be4c:	eba2 0203 	sub.w	r2, r2, r3
    be50:	ea80 0c01 	eor.w	ip, r0, r1
    be54:	0249      	lsls	r1, r1, #9
    be56:	ea4f 2040 	mov.w	r0, r0, lsl #9
    be5a:	d037      	beq.n	becc <__aeabi_fdiv+0x98>
    be5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    be60:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    be64:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    be68:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    be6c:	428b      	cmp	r3, r1
    be6e:	bf38      	it	cc
    be70:	005b      	lslcc	r3, r3, #1
    be72:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    be76:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    be7a:	428b      	cmp	r3, r1
    be7c:	bf24      	itt	cs
    be7e:	1a5b      	subcs	r3, r3, r1
    be80:	ea40 000c 	orrcs.w	r0, r0, ip
    be84:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    be88:	bf24      	itt	cs
    be8a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    be8e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    be92:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    be96:	bf24      	itt	cs
    be98:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    be9c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    bea0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    bea4:	bf24      	itt	cs
    bea6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    beaa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    beae:	011b      	lsls	r3, r3, #4
    beb0:	bf18      	it	ne
    beb2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    beb6:	d1e0      	bne.n	be7a <__aeabi_fdiv+0x46>
    beb8:	2afd      	cmp	r2, #253	; 0xfd
    beba:	f63f af50 	bhi.w	bd5e <__aeabi_fmul+0x92>
    bebe:	428b      	cmp	r3, r1
    bec0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    bec4:	bf08      	it	eq
    bec6:	f020 0001 	biceq.w	r0, r0, #1
    beca:	4770      	bx	lr
    becc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    bed0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    bed4:	327f      	adds	r2, #127	; 0x7f
    bed6:	bfc2      	ittt	gt
    bed8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    bedc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    bee0:	4770      	bxgt	lr
    bee2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    bee6:	f04f 0300 	mov.w	r3, #0
    beea:	3a01      	subs	r2, #1
    beec:	e737      	b.n	bd5e <__aeabi_fmul+0x92>
    beee:	f092 0f00 	teq	r2, #0
    bef2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    bef6:	bf02      	ittt	eq
    bef8:	0040      	lsleq	r0, r0, #1
    befa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    befe:	3a01      	subeq	r2, #1
    bf00:	d0f9      	beq.n	bef6 <__aeabi_fdiv+0xc2>
    bf02:	ea40 000c 	orr.w	r0, r0, ip
    bf06:	f093 0f00 	teq	r3, #0
    bf0a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    bf0e:	bf02      	ittt	eq
    bf10:	0049      	lsleq	r1, r1, #1
    bf12:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    bf16:	3b01      	subeq	r3, #1
    bf18:	d0f9      	beq.n	bf0e <__aeabi_fdiv+0xda>
    bf1a:	ea41 010c 	orr.w	r1, r1, ip
    bf1e:	e795      	b.n	be4c <__aeabi_fdiv+0x18>
    bf20:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    bf24:	ea92 0f0c 	teq	r2, ip
    bf28:	d108      	bne.n	bf3c <__aeabi_fdiv+0x108>
    bf2a:	0242      	lsls	r2, r0, #9
    bf2c:	f47f af7d 	bne.w	be2a <__aeabi_fmul+0x15e>
    bf30:	ea93 0f0c 	teq	r3, ip
    bf34:	f47f af70 	bne.w	be18 <__aeabi_fmul+0x14c>
    bf38:	4608      	mov	r0, r1
    bf3a:	e776      	b.n	be2a <__aeabi_fmul+0x15e>
    bf3c:	ea93 0f0c 	teq	r3, ip
    bf40:	d104      	bne.n	bf4c <__aeabi_fdiv+0x118>
    bf42:	024b      	lsls	r3, r1, #9
    bf44:	f43f af4c 	beq.w	bde0 <__aeabi_fmul+0x114>
    bf48:	4608      	mov	r0, r1
    bf4a:	e76e      	b.n	be2a <__aeabi_fmul+0x15e>
    bf4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    bf50:	bf18      	it	ne
    bf52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    bf56:	d1ca      	bne.n	beee <__aeabi_fdiv+0xba>
    bf58:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    bf5c:	f47f af5c 	bne.w	be18 <__aeabi_fmul+0x14c>
    bf60:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    bf64:	f47f af3c 	bne.w	bde0 <__aeabi_fmul+0x114>
    bf68:	e75f      	b.n	be2a <__aeabi_fmul+0x15e>
    bf6a:	bf00      	nop

0000bf6c <__gesf2>:
    bf6c:	f04f 3cff 	mov.w	ip, #4294967295
    bf70:	e006      	b.n	bf80 <__cmpsf2+0x4>
    bf72:	bf00      	nop

0000bf74 <__lesf2>:
    bf74:	f04f 0c01 	mov.w	ip, #1
    bf78:	e002      	b.n	bf80 <__cmpsf2+0x4>
    bf7a:	bf00      	nop

0000bf7c <__cmpsf2>:
    bf7c:	f04f 0c01 	mov.w	ip, #1
    bf80:	f84d cd04 	str.w	ip, [sp, #-4]!
    bf84:	ea4f 0240 	mov.w	r2, r0, lsl #1
    bf88:	ea4f 0341 	mov.w	r3, r1, lsl #1
    bf8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    bf90:	bf18      	it	ne
    bf92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    bf96:	d011      	beq.n	bfbc <__cmpsf2+0x40>
    bf98:	b001      	add	sp, #4
    bf9a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    bf9e:	bf18      	it	ne
    bfa0:	ea90 0f01 	teqne	r0, r1
    bfa4:	bf58      	it	pl
    bfa6:	ebb2 0003 	subspl.w	r0, r2, r3
    bfaa:	bf88      	it	hi
    bfac:	17c8      	asrhi	r0, r1, #31
    bfae:	bf38      	it	cc
    bfb0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    bfb4:	bf18      	it	ne
    bfb6:	f040 0001 	orrne.w	r0, r0, #1
    bfba:	4770      	bx	lr
    bfbc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    bfc0:	d102      	bne.n	bfc8 <__cmpsf2+0x4c>
    bfc2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    bfc6:	d105      	bne.n	bfd4 <__cmpsf2+0x58>
    bfc8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    bfcc:	d1e4      	bne.n	bf98 <__cmpsf2+0x1c>
    bfce:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    bfd2:	d0e1      	beq.n	bf98 <__cmpsf2+0x1c>
    bfd4:	f85d 0b04 	ldr.w	r0, [sp], #4
    bfd8:	4770      	bx	lr
    bfda:	bf00      	nop

0000bfdc <__aeabi_cfrcmple>:
    bfdc:	4684      	mov	ip, r0
    bfde:	4608      	mov	r0, r1
    bfe0:	4661      	mov	r1, ip
    bfe2:	e7ff      	b.n	bfe4 <__aeabi_cfcmpeq>

0000bfe4 <__aeabi_cfcmpeq>:
    bfe4:	b50f      	push	{r0, r1, r2, r3, lr}
    bfe6:	f7ff ffc9 	bl	bf7c <__cmpsf2>
    bfea:	2800      	cmp	r0, #0
    bfec:	bf48      	it	mi
    bfee:	f110 0f00 	cmnmi.w	r0, #0
    bff2:	bd0f      	pop	{r0, r1, r2, r3, pc}

0000bff4 <__aeabi_fcmpeq>:
    bff4:	f84d ed08 	str.w	lr, [sp, #-8]!
    bff8:	f7ff fff4 	bl	bfe4 <__aeabi_cfcmpeq>
    bffc:	bf0c      	ite	eq
    bffe:	2001      	moveq	r0, #1
    c000:	2000      	movne	r0, #0
    c002:	f85d fb08 	ldr.w	pc, [sp], #8
    c006:	bf00      	nop

0000c008 <__aeabi_fcmplt>:
    c008:	f84d ed08 	str.w	lr, [sp, #-8]!
    c00c:	f7ff ffea 	bl	bfe4 <__aeabi_cfcmpeq>
    c010:	bf34      	ite	cc
    c012:	2001      	movcc	r0, #1
    c014:	2000      	movcs	r0, #0
    c016:	f85d fb08 	ldr.w	pc, [sp], #8
    c01a:	bf00      	nop

0000c01c <__aeabi_fcmple>:
    c01c:	f84d ed08 	str.w	lr, [sp, #-8]!
    c020:	f7ff ffe0 	bl	bfe4 <__aeabi_cfcmpeq>
    c024:	bf94      	ite	ls
    c026:	2001      	movls	r0, #1
    c028:	2000      	movhi	r0, #0
    c02a:	f85d fb08 	ldr.w	pc, [sp], #8
    c02e:	bf00      	nop

0000c030 <__aeabi_fcmpge>:
    c030:	f84d ed08 	str.w	lr, [sp, #-8]!
    c034:	f7ff ffd2 	bl	bfdc <__aeabi_cfrcmple>
    c038:	bf94      	ite	ls
    c03a:	2001      	movls	r0, #1
    c03c:	2000      	movhi	r0, #0
    c03e:	f85d fb08 	ldr.w	pc, [sp], #8
    c042:	bf00      	nop

0000c044 <__aeabi_fcmpgt>:
    c044:	f84d ed08 	str.w	lr, [sp, #-8]!
    c048:	f7ff ffc8 	bl	bfdc <__aeabi_cfrcmple>
    c04c:	bf34      	ite	cc
    c04e:	2001      	movcc	r0, #1
    c050:	2000      	movcs	r0, #0
    c052:	f85d fb08 	ldr.w	pc, [sp], #8
    c056:	bf00      	nop

0000c058 <__aeabi_f2iz>:
    c058:	ea4f 0240 	mov.w	r2, r0, lsl #1
    c05c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    c060:	d30f      	bcc.n	c082 <__aeabi_f2iz+0x2a>
    c062:	f04f 039e 	mov.w	r3, #158	; 0x9e
    c066:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    c06a:	d90d      	bls.n	c088 <__aeabi_f2iz+0x30>
    c06c:	ea4f 2300 	mov.w	r3, r0, lsl #8
    c070:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c074:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    c078:	fa23 f002 	lsr.w	r0, r3, r2
    c07c:	bf18      	it	ne
    c07e:	4240      	negne	r0, r0
    c080:	4770      	bx	lr
    c082:	f04f 0000 	mov.w	r0, #0
    c086:	4770      	bx	lr
    c088:	f112 0f61 	cmn.w	r2, #97	; 0x61
    c08c:	d101      	bne.n	c092 <__aeabi_f2iz+0x3a>
    c08e:	0242      	lsls	r2, r0, #9
    c090:	d105      	bne.n	c09e <__aeabi_f2iz+0x46>
    c092:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    c096:	bf08      	it	eq
    c098:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    c09c:	4770      	bx	lr
    c09e:	f04f 0000 	mov.w	r0, #0
    c0a2:	4770      	bx	lr

0000c0a4 <__aeabi_f2uiz>:
    c0a4:	0042      	lsls	r2, r0, #1
    c0a6:	d20e      	bcs.n	c0c6 <__aeabi_f2uiz+0x22>
    c0a8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    c0ac:	d30b      	bcc.n	c0c6 <__aeabi_f2uiz+0x22>
    c0ae:	f04f 039e 	mov.w	r3, #158	; 0x9e
    c0b2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    c0b6:	d409      	bmi.n	c0cc <__aeabi_f2uiz+0x28>
    c0b8:	ea4f 2300 	mov.w	r3, r0, lsl #8
    c0bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c0c0:	fa23 f002 	lsr.w	r0, r3, r2
    c0c4:	4770      	bx	lr
    c0c6:	f04f 0000 	mov.w	r0, #0
    c0ca:	4770      	bx	lr
    c0cc:	f112 0f61 	cmn.w	r2, #97	; 0x61
    c0d0:	d101      	bne.n	c0d6 <__aeabi_f2uiz+0x32>
    c0d2:	0242      	lsls	r2, r0, #9
    c0d4:	d102      	bne.n	c0dc <__aeabi_f2uiz+0x38>
    c0d6:	f04f 30ff 	mov.w	r0, #4294967295
    c0da:	4770      	bx	lr
    c0dc:	f04f 0000 	mov.w	r0, #0
    c0e0:	4770      	bx	lr
    c0e2:	bf00      	nop

0000c0e4 <malloc>:
    c0e4:	4b02      	ldr	r3, [pc, #8]	; (c0f0 <malloc+0xc>)
    c0e6:	4601      	mov	r1, r0
    c0e8:	6818      	ldr	r0, [r3, #0]
    c0ea:	f000 b803 	b.w	c0f4 <_malloc_r>
    c0ee:	bf00      	nop
    c0f0:	1fff8f70 	.word	0x1fff8f70

0000c0f4 <_malloc_r>:
    c0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c0f8:	f101 060b 	add.w	r6, r1, #11
    c0fc:	2e16      	cmp	r6, #22
    c0fe:	b083      	sub	sp, #12
    c100:	4604      	mov	r4, r0
    c102:	d824      	bhi.n	c14e <_malloc_r+0x5a>
    c104:	2910      	cmp	r1, #16
    c106:	f200 80ba 	bhi.w	c27e <_malloc_r+0x18a>
    c10a:	f000 faa3 	bl	c654 <__malloc_lock>
    c10e:	2610      	movs	r6, #16
    c110:	2218      	movs	r2, #24
    c112:	2002      	movs	r0, #2
    c114:	4fb5      	ldr	r7, [pc, #724]	; (c3ec <_malloc_r+0x2f8>)
    c116:	443a      	add	r2, r7
    c118:	f1a2 0108 	sub.w	r1, r2, #8
    c11c:	6853      	ldr	r3, [r2, #4]
    c11e:	428b      	cmp	r3, r1
    c120:	f000 80ba 	beq.w	c298 <_malloc_r+0x1a4>
    c124:	685a      	ldr	r2, [r3, #4]
    c126:	68d9      	ldr	r1, [r3, #12]
    c128:	f022 0203 	bic.w	r2, r2, #3
    c12c:	441a      	add	r2, r3
    c12e:	689d      	ldr	r5, [r3, #8]
    c130:	60e9      	str	r1, [r5, #12]
    c132:	608d      	str	r5, [r1, #8]
    c134:	6851      	ldr	r1, [r2, #4]
    c136:	f041 0101 	orr.w	r1, r1, #1
    c13a:	4620      	mov	r0, r4
    c13c:	6051      	str	r1, [r2, #4]
    c13e:	f103 0508 	add.w	r5, r3, #8
    c142:	f000 fa8d 	bl	c660 <__malloc_unlock>
    c146:	4628      	mov	r0, r5
    c148:	b003      	add	sp, #12
    c14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c14e:	f036 0607 	bics.w	r6, r6, #7
    c152:	f100 8094 	bmi.w	c27e <_malloc_r+0x18a>
    c156:	42b1      	cmp	r1, r6
    c158:	f200 8091 	bhi.w	c27e <_malloc_r+0x18a>
    c15c:	f000 fa7a 	bl	c654 <__malloc_lock>
    c160:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    c164:	f0c0 819a 	bcc.w	c49c <_malloc_r+0x3a8>
    c168:	0a73      	lsrs	r3, r6, #9
    c16a:	f000 808f 	beq.w	c28c <_malloc_r+0x198>
    c16e:	2b04      	cmp	r3, #4
    c170:	f200 816f 	bhi.w	c452 <_malloc_r+0x35e>
    c174:	09b3      	lsrs	r3, r6, #6
    c176:	f103 0039 	add.w	r0, r3, #57	; 0x39
    c17a:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    c17e:	00c3      	lsls	r3, r0, #3
    c180:	4f9a      	ldr	r7, [pc, #616]	; (c3ec <_malloc_r+0x2f8>)
    c182:	443b      	add	r3, r7
    c184:	f1a3 0508 	sub.w	r5, r3, #8
    c188:	685b      	ldr	r3, [r3, #4]
    c18a:	429d      	cmp	r5, r3
    c18c:	d106      	bne.n	c19c <_malloc_r+0xa8>
    c18e:	e00c      	b.n	c1aa <_malloc_r+0xb6>
    c190:	2900      	cmp	r1, #0
    c192:	f280 8127 	bge.w	c3e4 <_malloc_r+0x2f0>
    c196:	68db      	ldr	r3, [r3, #12]
    c198:	429d      	cmp	r5, r3
    c19a:	d006      	beq.n	c1aa <_malloc_r+0xb6>
    c19c:	685a      	ldr	r2, [r3, #4]
    c19e:	f022 0203 	bic.w	r2, r2, #3
    c1a2:	1b91      	subs	r1, r2, r6
    c1a4:	290f      	cmp	r1, #15
    c1a6:	ddf3      	ble.n	c190 <_malloc_r+0x9c>
    c1a8:	4660      	mov	r0, ip
    c1aa:	693d      	ldr	r5, [r7, #16]
    c1ac:	f8df c240 	ldr.w	ip, [pc, #576]	; c3f0 <_malloc_r+0x2fc>
    c1b0:	4565      	cmp	r5, ip
    c1b2:	d07c      	beq.n	c2ae <_malloc_r+0x1ba>
    c1b4:	686a      	ldr	r2, [r5, #4]
    c1b6:	f022 0203 	bic.w	r2, r2, #3
    c1ba:	1b93      	subs	r3, r2, r6
    c1bc:	2b0f      	cmp	r3, #15
    c1be:	f300 817b 	bgt.w	c4b8 <_malloc_r+0x3c4>
    c1c2:	2b00      	cmp	r3, #0
    c1c4:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    c1c8:	f280 816c 	bge.w	c4a4 <_malloc_r+0x3b0>
    c1cc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    c1d0:	f080 811a 	bcs.w	c408 <_malloc_r+0x314>
    c1d4:	08d3      	lsrs	r3, r2, #3
    c1d6:	6879      	ldr	r1, [r7, #4]
    c1d8:	3301      	adds	r3, #1
    c1da:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    c1de:	2201      	movs	r2, #1
    c1e0:	fa02 f20e 	lsl.w	r2, r2, lr
    c1e4:	430a      	orrs	r2, r1
    c1e6:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    c1ea:	f8c5 e008 	str.w	lr, [r5, #8]
    c1ee:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    c1f2:	3908      	subs	r1, #8
    c1f4:	60e9      	str	r1, [r5, #12]
    c1f6:	607a      	str	r2, [r7, #4]
    c1f8:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    c1fc:	f8ce 500c 	str.w	r5, [lr, #12]
    c200:	1083      	asrs	r3, r0, #2
    c202:	2101      	movs	r1, #1
    c204:	4099      	lsls	r1, r3
    c206:	4291      	cmp	r1, r2
    c208:	d857      	bhi.n	c2ba <_malloc_r+0x1c6>
    c20a:	4211      	tst	r1, r2
    c20c:	d106      	bne.n	c21c <_malloc_r+0x128>
    c20e:	f020 0003 	bic.w	r0, r0, #3
    c212:	0049      	lsls	r1, r1, #1
    c214:	4211      	tst	r1, r2
    c216:	f100 0004 	add.w	r0, r0, #4
    c21a:	d0fa      	beq.n	c212 <_malloc_r+0x11e>
    c21c:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    c220:	464d      	mov	r5, r9
    c222:	4686      	mov	lr, r0
    c224:	f8d5 800c 	ldr.w	r8, [r5, #12]
    c228:	4545      	cmp	r5, r8
    c22a:	d108      	bne.n	c23e <_malloc_r+0x14a>
    c22c:	e11d      	b.n	c46a <_malloc_r+0x376>
    c22e:	2b00      	cmp	r3, #0
    c230:	f280 8124 	bge.w	c47c <_malloc_r+0x388>
    c234:	f8d8 800c 	ldr.w	r8, [r8, #12]
    c238:	4545      	cmp	r5, r8
    c23a:	f000 8116 	beq.w	c46a <_malloc_r+0x376>
    c23e:	f8d8 2004 	ldr.w	r2, [r8, #4]
    c242:	f022 0203 	bic.w	r2, r2, #3
    c246:	1b93      	subs	r3, r2, r6
    c248:	2b0f      	cmp	r3, #15
    c24a:	ddf0      	ble.n	c22e <_malloc_r+0x13a>
    c24c:	4620      	mov	r0, r4
    c24e:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    c252:	eb08 0106 	add.w	r1, r8, r6
    c256:	f046 0601 	orr.w	r6, r6, #1
    c25a:	f8c8 6004 	str.w	r6, [r8, #4]
    c25e:	60ec      	str	r4, [r5, #12]
    c260:	60a5      	str	r5, [r4, #8]
    c262:	f043 0401 	orr.w	r4, r3, #1
    c266:	e9c7 1104 	strd	r1, r1, [r7, #16]
    c26a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    c26e:	604c      	str	r4, [r1, #4]
    c270:	f848 3002 	str.w	r3, [r8, r2]
    c274:	f000 f9f4 	bl	c660 <__malloc_unlock>
    c278:	f108 0508 	add.w	r5, r8, #8
    c27c:	e002      	b.n	c284 <_malloc_r+0x190>
    c27e:	230c      	movs	r3, #12
    c280:	6023      	str	r3, [r4, #0]
    c282:	2500      	movs	r5, #0
    c284:	4628      	mov	r0, r5
    c286:	b003      	add	sp, #12
    c288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c28c:	f44f 7300 	mov.w	r3, #512	; 0x200
    c290:	2040      	movs	r0, #64	; 0x40
    c292:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    c296:	e773      	b.n	c180 <_malloc_r+0x8c>
    c298:	68d3      	ldr	r3, [r2, #12]
    c29a:	429a      	cmp	r2, r3
    c29c:	bf08      	it	eq
    c29e:	3002      	addeq	r0, #2
    c2a0:	f47f af40 	bne.w	c124 <_malloc_r+0x30>
    c2a4:	693d      	ldr	r5, [r7, #16]
    c2a6:	f8df c148 	ldr.w	ip, [pc, #328]	; c3f0 <_malloc_r+0x2fc>
    c2aa:	4565      	cmp	r5, ip
    c2ac:	d182      	bne.n	c1b4 <_malloc_r+0xc0>
    c2ae:	687a      	ldr	r2, [r7, #4]
    c2b0:	1083      	asrs	r3, r0, #2
    c2b2:	2101      	movs	r1, #1
    c2b4:	4099      	lsls	r1, r3
    c2b6:	4291      	cmp	r1, r2
    c2b8:	d9a7      	bls.n	c20a <_malloc_r+0x116>
    c2ba:	68bd      	ldr	r5, [r7, #8]
    c2bc:	686b      	ldr	r3, [r5, #4]
    c2be:	f023 0903 	bic.w	r9, r3, #3
    c2c2:	454e      	cmp	r6, r9
    c2c4:	d803      	bhi.n	c2ce <_malloc_r+0x1da>
    c2c6:	eba9 0306 	sub.w	r3, r9, r6
    c2ca:	2b0f      	cmp	r3, #15
    c2cc:	dc7a      	bgt.n	c3c4 <_malloc_r+0x2d0>
    c2ce:	f8df b124 	ldr.w	fp, [pc, #292]	; c3f4 <_malloc_r+0x300>
    c2d2:	4b49      	ldr	r3, [pc, #292]	; (c3f8 <_malloc_r+0x304>)
    c2d4:	f8db 2000 	ldr.w	r2, [fp]
    c2d8:	681b      	ldr	r3, [r3, #0]
    c2da:	3201      	adds	r2, #1
    c2dc:	4433      	add	r3, r6
    c2de:	eb05 0a09 	add.w	sl, r5, r9
    c2e2:	f000 8133 	beq.w	c54c <_malloc_r+0x458>
    c2e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    c2ea:	330f      	adds	r3, #15
    c2ec:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    c2f0:	f028 080f 	bic.w	r8, r8, #15
    c2f4:	4641      	mov	r1, r8
    c2f6:	4620      	mov	r0, r4
    c2f8:	f000 fe32 	bl	cf60 <_sbrk_r>
    c2fc:	1c41      	adds	r1, r0, #1
    c2fe:	4602      	mov	r2, r0
    c300:	f000 80f3 	beq.w	c4ea <_malloc_r+0x3f6>
    c304:	4582      	cmp	sl, r0
    c306:	f200 80ee 	bhi.w	c4e6 <_malloc_r+0x3f2>
    c30a:	4b3c      	ldr	r3, [pc, #240]	; (c3fc <_malloc_r+0x308>)
    c30c:	6819      	ldr	r1, [r3, #0]
    c30e:	4441      	add	r1, r8
    c310:	6019      	str	r1, [r3, #0]
    c312:	4608      	mov	r0, r1
    c314:	f000 814e 	beq.w	c5b4 <_malloc_r+0x4c0>
    c318:	f8db 1000 	ldr.w	r1, [fp]
    c31c:	9301      	str	r3, [sp, #4]
    c31e:	3101      	adds	r1, #1
    c320:	bf1b      	ittet	ne
    c322:	eba2 010a 	subne.w	r1, r2, sl
    c326:	1809      	addne	r1, r1, r0
    c328:	f8cb 2000 	streq.w	r2, [fp]
    c32c:	6019      	strne	r1, [r3, #0]
    c32e:	f012 0b07 	ands.w	fp, r2, #7
    c332:	f000 8117 	beq.w	c564 <_malloc_r+0x470>
    c336:	f1cb 0108 	rsb	r1, fp, #8
    c33a:	440a      	add	r2, r1
    c33c:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    c340:	4490      	add	r8, r2
    c342:	3108      	adds	r1, #8
    c344:	eba1 0108 	sub.w	r1, r1, r8
    c348:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    c34c:	4651      	mov	r1, sl
    c34e:	4620      	mov	r0, r4
    c350:	9200      	str	r2, [sp, #0]
    c352:	f000 fe05 	bl	cf60 <_sbrk_r>
    c356:	1c42      	adds	r2, r0, #1
    c358:	e9dd 2300 	ldrd	r2, r3, [sp]
    c35c:	f000 814f 	beq.w	c5fe <_malloc_r+0x50a>
    c360:	1a80      	subs	r0, r0, r2
    c362:	eb00 080a 	add.w	r8, r0, sl
    c366:	6819      	ldr	r1, [r3, #0]
    c368:	60ba      	str	r2, [r7, #8]
    c36a:	f048 0001 	orr.w	r0, r8, #1
    c36e:	4451      	add	r1, sl
    c370:	42bd      	cmp	r5, r7
    c372:	6050      	str	r0, [r2, #4]
    c374:	6019      	str	r1, [r3, #0]
    c376:	f000 8129 	beq.w	c5cc <_malloc_r+0x4d8>
    c37a:	f1b9 0f0f 	cmp.w	r9, #15
    c37e:	f240 8127 	bls.w	c5d0 <_malloc_r+0x4dc>
    c382:	6868      	ldr	r0, [r5, #4]
    c384:	f1a9 0c0c 	sub.w	ip, r9, #12
    c388:	f02c 0c07 	bic.w	ip, ip, #7
    c38c:	f000 0001 	and.w	r0, r0, #1
    c390:	ea40 000c 	orr.w	r0, r0, ip
    c394:	6068      	str	r0, [r5, #4]
    c396:	f04f 0e05 	mov.w	lr, #5
    c39a:	eb05 000c 	add.w	r0, r5, ip
    c39e:	f1bc 0f0f 	cmp.w	ip, #15
    c3a2:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    c3a6:	f200 8132 	bhi.w	c60e <_malloc_r+0x51a>
    c3aa:	6850      	ldr	r0, [r2, #4]
    c3ac:	4615      	mov	r5, r2
    c3ae:	4b14      	ldr	r3, [pc, #80]	; (c400 <_malloc_r+0x30c>)
    c3b0:	681a      	ldr	r2, [r3, #0]
    c3b2:	428a      	cmp	r2, r1
    c3b4:	bf38      	it	cc
    c3b6:	6019      	strcc	r1, [r3, #0]
    c3b8:	4b12      	ldr	r3, [pc, #72]	; (c404 <_malloc_r+0x310>)
    c3ba:	681a      	ldr	r2, [r3, #0]
    c3bc:	428a      	cmp	r2, r1
    c3be:	bf38      	it	cc
    c3c0:	6019      	strcc	r1, [r3, #0]
    c3c2:	e094      	b.n	c4ee <_malloc_r+0x3fa>
    c3c4:	19aa      	adds	r2, r5, r6
    c3c6:	f043 0301 	orr.w	r3, r3, #1
    c3ca:	f046 0601 	orr.w	r6, r6, #1
    c3ce:	606e      	str	r6, [r5, #4]
    c3d0:	4620      	mov	r0, r4
    c3d2:	60ba      	str	r2, [r7, #8]
    c3d4:	6053      	str	r3, [r2, #4]
    c3d6:	f000 f943 	bl	c660 <__malloc_unlock>
    c3da:	3508      	adds	r5, #8
    c3dc:	4628      	mov	r0, r5
    c3de:	b003      	add	sp, #12
    c3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c3e4:	68d9      	ldr	r1, [r3, #12]
    c3e6:	441a      	add	r2, r3
    c3e8:	e6a1      	b.n	c12e <_malloc_r+0x3a>
    c3ea:	bf00      	nop
    c3ec:	1fff88c8 	.word	0x1fff88c8
    c3f0:	1fff88d0 	.word	0x1fff88d0
    c3f4:	1fff8cd0 	.word	0x1fff8cd0
    c3f8:	1fffb740 	.word	0x1fffb740
    c3fc:	1fffb710 	.word	0x1fffb710
    c400:	1fffb738 	.word	0x1fffb738
    c404:	1fffb73c 	.word	0x1fffb73c
    c408:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    c40c:	ea4f 2352 	mov.w	r3, r2, lsr #9
    c410:	d363      	bcc.n	c4da <_malloc_r+0x3e6>
    c412:	2b14      	cmp	r3, #20
    c414:	f200 80b7 	bhi.w	c586 <_malloc_r+0x492>
    c418:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    c41c:	00c9      	lsls	r1, r1, #3
    c41e:	335b      	adds	r3, #91	; 0x5b
    c420:	eb07 0e01 	add.w	lr, r7, r1
    c424:	5879      	ldr	r1, [r7, r1]
    c426:	f1ae 0e08 	sub.w	lr, lr, #8
    c42a:	458e      	cmp	lr, r1
    c42c:	f000 8091 	beq.w	c552 <_malloc_r+0x45e>
    c430:	684b      	ldr	r3, [r1, #4]
    c432:	f023 0303 	bic.w	r3, r3, #3
    c436:	4293      	cmp	r3, r2
    c438:	d902      	bls.n	c440 <_malloc_r+0x34c>
    c43a:	6889      	ldr	r1, [r1, #8]
    c43c:	458e      	cmp	lr, r1
    c43e:	d1f7      	bne.n	c430 <_malloc_r+0x33c>
    c440:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    c444:	687a      	ldr	r2, [r7, #4]
    c446:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    c44a:	f8ce 5008 	str.w	r5, [lr, #8]
    c44e:	60cd      	str	r5, [r1, #12]
    c450:	e6d6      	b.n	c200 <_malloc_r+0x10c>
    c452:	2b14      	cmp	r3, #20
    c454:	d959      	bls.n	c50a <_malloc_r+0x416>
    c456:	2b54      	cmp	r3, #84	; 0x54
    c458:	f200 809d 	bhi.w	c596 <_malloc_r+0x4a2>
    c45c:	0b33      	lsrs	r3, r6, #12
    c45e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    c462:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    c466:	00c3      	lsls	r3, r0, #3
    c468:	e68a      	b.n	c180 <_malloc_r+0x8c>
    c46a:	f10e 0e01 	add.w	lr, lr, #1
    c46e:	f01e 0f03 	tst.w	lr, #3
    c472:	f105 0508 	add.w	r5, r5, #8
    c476:	f47f aed5 	bne.w	c224 <_malloc_r+0x130>
    c47a:	e051      	b.n	c520 <_malloc_r+0x42c>
    c47c:	4442      	add	r2, r8
    c47e:	4645      	mov	r5, r8
    c480:	6853      	ldr	r3, [r2, #4]
    c482:	f8d8 100c 	ldr.w	r1, [r8, #12]
    c486:	f043 0301 	orr.w	r3, r3, #1
    c48a:	6053      	str	r3, [r2, #4]
    c48c:	f855 3f08 	ldr.w	r3, [r5, #8]!
    c490:	4620      	mov	r0, r4
    c492:	60d9      	str	r1, [r3, #12]
    c494:	608b      	str	r3, [r1, #8]
    c496:	f000 f8e3 	bl	c660 <__malloc_unlock>
    c49a:	e6f3      	b.n	c284 <_malloc_r+0x190>
    c49c:	08f0      	lsrs	r0, r6, #3
    c49e:	f106 0208 	add.w	r2, r6, #8
    c4a2:	e637      	b.n	c114 <_malloc_r+0x20>
    c4a4:	442a      	add	r2, r5
    c4a6:	4620      	mov	r0, r4
    c4a8:	6853      	ldr	r3, [r2, #4]
    c4aa:	f043 0301 	orr.w	r3, r3, #1
    c4ae:	6053      	str	r3, [r2, #4]
    c4b0:	3508      	adds	r5, #8
    c4b2:	f000 f8d5 	bl	c660 <__malloc_unlock>
    c4b6:	e6e5      	b.n	c284 <_malloc_r+0x190>
    c4b8:	19a9      	adds	r1, r5, r6
    c4ba:	4620      	mov	r0, r4
    c4bc:	f046 0601 	orr.w	r6, r6, #1
    c4c0:	f043 0401 	orr.w	r4, r3, #1
    c4c4:	606e      	str	r6, [r5, #4]
    c4c6:	e9c7 1104 	strd	r1, r1, [r7, #16]
    c4ca:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    c4ce:	604c      	str	r4, [r1, #4]
    c4d0:	50ab      	str	r3, [r5, r2]
    c4d2:	f000 f8c5 	bl	c660 <__malloc_unlock>
    c4d6:	3508      	adds	r5, #8
    c4d8:	e6d4      	b.n	c284 <_malloc_r+0x190>
    c4da:	0993      	lsrs	r3, r2, #6
    c4dc:	f103 0139 	add.w	r1, r3, #57	; 0x39
    c4e0:	00c9      	lsls	r1, r1, #3
    c4e2:	3338      	adds	r3, #56	; 0x38
    c4e4:	e79c      	b.n	c420 <_malloc_r+0x32c>
    c4e6:	42bd      	cmp	r5, r7
    c4e8:	d05f      	beq.n	c5aa <_malloc_r+0x4b6>
    c4ea:	68bd      	ldr	r5, [r7, #8]
    c4ec:	6868      	ldr	r0, [r5, #4]
    c4ee:	f020 0803 	bic.w	r8, r0, #3
    c4f2:	4546      	cmp	r6, r8
    c4f4:	eba8 0306 	sub.w	r3, r8, r6
    c4f8:	d802      	bhi.n	c500 <_malloc_r+0x40c>
    c4fa:	2b0f      	cmp	r3, #15
    c4fc:	f73f af62 	bgt.w	c3c4 <_malloc_r+0x2d0>
    c500:	4620      	mov	r0, r4
    c502:	f000 f8ad 	bl	c660 <__malloc_unlock>
    c506:	2500      	movs	r5, #0
    c508:	e6bc      	b.n	c284 <_malloc_r+0x190>
    c50a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    c50e:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    c512:	00c3      	lsls	r3, r0, #3
    c514:	e634      	b.n	c180 <_malloc_r+0x8c>
    c516:	f859 3908 	ldr.w	r3, [r9], #-8
    c51a:	454b      	cmp	r3, r9
    c51c:	f040 8096 	bne.w	c64c <_malloc_r+0x558>
    c520:	f010 0f03 	tst.w	r0, #3
    c524:	f100 30ff 	add.w	r0, r0, #4294967295
    c528:	d1f5      	bne.n	c516 <_malloc_r+0x422>
    c52a:	687b      	ldr	r3, [r7, #4]
    c52c:	ea23 0301 	bic.w	r3, r3, r1
    c530:	607b      	str	r3, [r7, #4]
    c532:	0049      	lsls	r1, r1, #1
    c534:	4299      	cmp	r1, r3
    c536:	f63f aec0 	bhi.w	c2ba <_malloc_r+0x1c6>
    c53a:	b919      	cbnz	r1, c544 <_malloc_r+0x450>
    c53c:	e6bd      	b.n	c2ba <_malloc_r+0x1c6>
    c53e:	0049      	lsls	r1, r1, #1
    c540:	f10e 0e04 	add.w	lr, lr, #4
    c544:	4219      	tst	r1, r3
    c546:	d0fa      	beq.n	c53e <_malloc_r+0x44a>
    c548:	4670      	mov	r0, lr
    c54a:	e667      	b.n	c21c <_malloc_r+0x128>
    c54c:	f103 0810 	add.w	r8, r3, #16
    c550:	e6d0      	b.n	c2f4 <_malloc_r+0x200>
    c552:	109a      	asrs	r2, r3, #2
    c554:	f04f 0801 	mov.w	r8, #1
    c558:	687b      	ldr	r3, [r7, #4]
    c55a:	fa08 f202 	lsl.w	r2, r8, r2
    c55e:	431a      	orrs	r2, r3
    c560:	607a      	str	r2, [r7, #4]
    c562:	e770      	b.n	c446 <_malloc_r+0x352>
    c564:	eb02 0108 	add.w	r1, r2, r8
    c568:	4249      	negs	r1, r1
    c56a:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    c56e:	4651      	mov	r1, sl
    c570:	4620      	mov	r0, r4
    c572:	9200      	str	r2, [sp, #0]
    c574:	f000 fcf4 	bl	cf60 <_sbrk_r>
    c578:	1c43      	adds	r3, r0, #1
    c57a:	e9dd 2300 	ldrd	r2, r3, [sp]
    c57e:	f47f aeef 	bne.w	c360 <_malloc_r+0x26c>
    c582:	46da      	mov	sl, fp
    c584:	e6ef      	b.n	c366 <_malloc_r+0x272>
    c586:	2b54      	cmp	r3, #84	; 0x54
    c588:	d825      	bhi.n	c5d6 <_malloc_r+0x4e2>
    c58a:	0b13      	lsrs	r3, r2, #12
    c58c:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    c590:	00c9      	lsls	r1, r1, #3
    c592:	336e      	adds	r3, #110	; 0x6e
    c594:	e744      	b.n	c420 <_malloc_r+0x32c>
    c596:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    c59a:	d825      	bhi.n	c5e8 <_malloc_r+0x4f4>
    c59c:	0bf3      	lsrs	r3, r6, #15
    c59e:	f103 0078 	add.w	r0, r3, #120	; 0x78
    c5a2:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    c5a6:	00c3      	lsls	r3, r0, #3
    c5a8:	e5ea      	b.n	c180 <_malloc_r+0x8c>
    c5aa:	4b29      	ldr	r3, [pc, #164]	; (c650 <_malloc_r+0x55c>)
    c5ac:	6818      	ldr	r0, [r3, #0]
    c5ae:	4440      	add	r0, r8
    c5b0:	6018      	str	r0, [r3, #0]
    c5b2:	e6b1      	b.n	c318 <_malloc_r+0x224>
    c5b4:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    c5b8:	f1bc 0f00 	cmp.w	ip, #0
    c5bc:	f47f aeac 	bne.w	c318 <_malloc_r+0x224>
    c5c0:	68bd      	ldr	r5, [r7, #8]
    c5c2:	44c8      	add	r8, r9
    c5c4:	f048 0001 	orr.w	r0, r8, #1
    c5c8:	6068      	str	r0, [r5, #4]
    c5ca:	e6f0      	b.n	c3ae <_malloc_r+0x2ba>
    c5cc:	4615      	mov	r5, r2
    c5ce:	e6ee      	b.n	c3ae <_malloc_r+0x2ba>
    c5d0:	2301      	movs	r3, #1
    c5d2:	6053      	str	r3, [r2, #4]
    c5d4:	e794      	b.n	c500 <_malloc_r+0x40c>
    c5d6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    c5da:	d823      	bhi.n	c624 <_malloc_r+0x530>
    c5dc:	0bd3      	lsrs	r3, r2, #15
    c5de:	f103 0178 	add.w	r1, r3, #120	; 0x78
    c5e2:	00c9      	lsls	r1, r1, #3
    c5e4:	3377      	adds	r3, #119	; 0x77
    c5e6:	e71b      	b.n	c420 <_malloc_r+0x32c>
    c5e8:	f240 5254 	movw	r2, #1364	; 0x554
    c5ec:	4293      	cmp	r3, r2
    c5ee:	d823      	bhi.n	c638 <_malloc_r+0x544>
    c5f0:	0cb3      	lsrs	r3, r6, #18
    c5f2:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    c5f6:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    c5fa:	00c3      	lsls	r3, r0, #3
    c5fc:	e5c0      	b.n	c180 <_malloc_r+0x8c>
    c5fe:	f1ab 0b08 	sub.w	fp, fp, #8
    c602:	44d8      	add	r8, fp
    c604:	eba8 0802 	sub.w	r8, r8, r2
    c608:	f04f 0a00 	mov.w	sl, #0
    c60c:	e6ab      	b.n	c366 <_malloc_r+0x272>
    c60e:	f105 0108 	add.w	r1, r5, #8
    c612:	4620      	mov	r0, r4
    c614:	9300      	str	r3, [sp, #0]
    c616:	f000 fde1 	bl	d1dc <_free_r>
    c61a:	68bd      	ldr	r5, [r7, #8]
    c61c:	9b00      	ldr	r3, [sp, #0]
    c61e:	6868      	ldr	r0, [r5, #4]
    c620:	6819      	ldr	r1, [r3, #0]
    c622:	e6c4      	b.n	c3ae <_malloc_r+0x2ba>
    c624:	f240 5154 	movw	r1, #1364	; 0x554
    c628:	428b      	cmp	r3, r1
    c62a:	d80b      	bhi.n	c644 <_malloc_r+0x550>
    c62c:	0c93      	lsrs	r3, r2, #18
    c62e:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    c632:	00c9      	lsls	r1, r1, #3
    c634:	337c      	adds	r3, #124	; 0x7c
    c636:	e6f3      	b.n	c420 <_malloc_r+0x32c>
    c638:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    c63c:	207f      	movs	r0, #127	; 0x7f
    c63e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    c642:	e59d      	b.n	c180 <_malloc_r+0x8c>
    c644:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    c648:	237e      	movs	r3, #126	; 0x7e
    c64a:	e6e9      	b.n	c420 <_malloc_r+0x32c>
    c64c:	687b      	ldr	r3, [r7, #4]
    c64e:	e770      	b.n	c532 <_malloc_r+0x43e>
    c650:	1fffb710 	.word	0x1fffb710

0000c654 <__malloc_lock>:
    c654:	4801      	ldr	r0, [pc, #4]	; (c65c <__malloc_lock+0x8>)
    c656:	f000 bcd9 	b.w	d00c <__retarget_lock_acquire_recursive>
    c65a:	bf00      	nop
    c65c:	1fffb888 	.word	0x1fffb888

0000c660 <__malloc_unlock>:
    c660:	4801      	ldr	r0, [pc, #4]	; (c668 <__malloc_unlock+0x8>)
    c662:	f000 bcd5 	b.w	d010 <__retarget_lock_release_recursive>
    c666:	bf00      	nop
    c668:	1fffb888 	.word	0x1fffb888

0000c66c <_realloc_r>:
    c66c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c670:	4617      	mov	r7, r2
    c672:	2900      	cmp	r1, #0
    c674:	f000 8098 	beq.w	c7a8 <_realloc_r+0x13c>
    c678:	460c      	mov	r4, r1
    c67a:	f107 050b 	add.w	r5, r7, #11
    c67e:	4680      	mov	r8, r0
    c680:	f7ff ffe8 	bl	c654 <__malloc_lock>
    c684:	2d16      	cmp	r5, #22
    c686:	f854 1c04 	ldr.w	r1, [r4, #-4]
    c68a:	d85b      	bhi.n	c744 <_realloc_r+0xd8>
    c68c:	2510      	movs	r5, #16
    c68e:	462a      	mov	r2, r5
    c690:	42af      	cmp	r7, r5
    c692:	d85c      	bhi.n	c74e <_realloc_r+0xe2>
    c694:	f021 0603 	bic.w	r6, r1, #3
    c698:	4296      	cmp	r6, r2
    c69a:	f1a4 0908 	sub.w	r9, r4, #8
    c69e:	da62      	bge.n	c766 <_realloc_r+0xfa>
    c6a0:	4bbc      	ldr	r3, [pc, #752]	; (c994 <_realloc_r+0x328>)
    c6a2:	f8d3 c008 	ldr.w	ip, [r3, #8]
    c6a6:	eb09 0006 	add.w	r0, r9, r6
    c6aa:	4584      	cmp	ip, r0
    c6ac:	f000 8097 	beq.w	c7de <_realloc_r+0x172>
    c6b0:	f8d0 c004 	ldr.w	ip, [r0, #4]
    c6b4:	f02c 0301 	bic.w	r3, ip, #1
    c6b8:	4403      	add	r3, r0
    c6ba:	685b      	ldr	r3, [r3, #4]
    c6bc:	07db      	lsls	r3, r3, #31
    c6be:	d468      	bmi.n	c792 <_realloc_r+0x126>
    c6c0:	f02c 0c03 	bic.w	ip, ip, #3
    c6c4:	eb06 030c 	add.w	r3, r6, ip
    c6c8:	4293      	cmp	r3, r2
    c6ca:	da47      	bge.n	c75c <_realloc_r+0xf0>
    c6cc:	07cb      	lsls	r3, r1, #31
    c6ce:	d410      	bmi.n	c6f2 <_realloc_r+0x86>
    c6d0:	f854 3c08 	ldr.w	r3, [r4, #-8]
    c6d4:	eba9 0a03 	sub.w	sl, r9, r3
    c6d8:	f8da 3004 	ldr.w	r3, [sl, #4]
    c6dc:	f023 0103 	bic.w	r1, r3, #3
    c6e0:	448c      	add	ip, r1
    c6e2:	44b4      	add	ip, r6
    c6e4:	4594      	cmp	ip, r2
    c6e6:	f280 8111 	bge.w	c90c <_realloc_r+0x2a0>
    c6ea:	1873      	adds	r3, r6, r1
    c6ec:	4293      	cmp	r3, r2
    c6ee:	f280 80e8 	bge.w	c8c2 <_realloc_r+0x256>
    c6f2:	4639      	mov	r1, r7
    c6f4:	4640      	mov	r0, r8
    c6f6:	f7ff fcfd 	bl	c0f4 <_malloc_r>
    c6fa:	4607      	mov	r7, r0
    c6fc:	b1e0      	cbz	r0, c738 <_realloc_r+0xcc>
    c6fe:	f854 3c04 	ldr.w	r3, [r4, #-4]
    c702:	f023 0301 	bic.w	r3, r3, #1
    c706:	444b      	add	r3, r9
    c708:	f1a0 0208 	sub.w	r2, r0, #8
    c70c:	4293      	cmp	r3, r2
    c70e:	f000 80d2 	beq.w	c8b6 <_realloc_r+0x24a>
    c712:	1f32      	subs	r2, r6, #4
    c714:	2a24      	cmp	r2, #36	; 0x24
    c716:	f200 80f5 	bhi.w	c904 <_realloc_r+0x298>
    c71a:	2a13      	cmp	r2, #19
    c71c:	f200 80ac 	bhi.w	c878 <_realloc_r+0x20c>
    c720:	4603      	mov	r3, r0
    c722:	4622      	mov	r2, r4
    c724:	6811      	ldr	r1, [r2, #0]
    c726:	6019      	str	r1, [r3, #0]
    c728:	6851      	ldr	r1, [r2, #4]
    c72a:	6059      	str	r1, [r3, #4]
    c72c:	6892      	ldr	r2, [r2, #8]
    c72e:	609a      	str	r2, [r3, #8]
    c730:	4621      	mov	r1, r4
    c732:	4640      	mov	r0, r8
    c734:	f000 fd52 	bl	d1dc <_free_r>
    c738:	4640      	mov	r0, r8
    c73a:	f7ff ff91 	bl	c660 <__malloc_unlock>
    c73e:	4638      	mov	r0, r7
    c740:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c744:	f025 0507 	bic.w	r5, r5, #7
    c748:	2d00      	cmp	r5, #0
    c74a:	462a      	mov	r2, r5
    c74c:	daa0      	bge.n	c690 <_realloc_r+0x24>
    c74e:	230c      	movs	r3, #12
    c750:	f8c8 3000 	str.w	r3, [r8]
    c754:	2700      	movs	r7, #0
    c756:	4638      	mov	r0, r7
    c758:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c75c:	461e      	mov	r6, r3
    c75e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    c762:	60d3      	str	r3, [r2, #12]
    c764:	609a      	str	r2, [r3, #8]
    c766:	1b73      	subs	r3, r6, r5
    c768:	2b0f      	cmp	r3, #15
    c76a:	d822      	bhi.n	c7b2 <_realloc_r+0x146>
    c76c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    c770:	f003 0301 	and.w	r3, r3, #1
    c774:	4333      	orrs	r3, r6
    c776:	444e      	add	r6, r9
    c778:	f8c9 3004 	str.w	r3, [r9, #4]
    c77c:	6873      	ldr	r3, [r6, #4]
    c77e:	f043 0301 	orr.w	r3, r3, #1
    c782:	6073      	str	r3, [r6, #4]
    c784:	4640      	mov	r0, r8
    c786:	4627      	mov	r7, r4
    c788:	f7ff ff6a 	bl	c660 <__malloc_unlock>
    c78c:	4638      	mov	r0, r7
    c78e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c792:	07c9      	lsls	r1, r1, #31
    c794:	d4ad      	bmi.n	c6f2 <_realloc_r+0x86>
    c796:	f854 3c08 	ldr.w	r3, [r4, #-8]
    c79a:	eba9 0a03 	sub.w	sl, r9, r3
    c79e:	f8da 1004 	ldr.w	r1, [sl, #4]
    c7a2:	f021 0103 	bic.w	r1, r1, #3
    c7a6:	e7a0      	b.n	c6ea <_realloc_r+0x7e>
    c7a8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c7ac:	4611      	mov	r1, r2
    c7ae:	f7ff bca1 	b.w	c0f4 <_malloc_r>
    c7b2:	f8d9 2004 	ldr.w	r2, [r9, #4]
    c7b6:	eb09 0105 	add.w	r1, r9, r5
    c7ba:	f002 0201 	and.w	r2, r2, #1
    c7be:	444e      	add	r6, r9
    c7c0:	f043 0301 	orr.w	r3, r3, #1
    c7c4:	432a      	orrs	r2, r5
    c7c6:	f8c9 2004 	str.w	r2, [r9, #4]
    c7ca:	604b      	str	r3, [r1, #4]
    c7cc:	6873      	ldr	r3, [r6, #4]
    c7ce:	f043 0301 	orr.w	r3, r3, #1
    c7d2:	3108      	adds	r1, #8
    c7d4:	6073      	str	r3, [r6, #4]
    c7d6:	4640      	mov	r0, r8
    c7d8:	f000 fd00 	bl	d1dc <_free_r>
    c7dc:	e7d2      	b.n	c784 <_realloc_r+0x118>
    c7de:	f8dc 0004 	ldr.w	r0, [ip, #4]
    c7e2:	f020 0b03 	bic.w	fp, r0, #3
    c7e6:	eb06 0c0b 	add.w	ip, r6, fp
    c7ea:	f105 0010 	add.w	r0, r5, #16
    c7ee:	4584      	cmp	ip, r0
    c7f0:	da4d      	bge.n	c88e <_realloc_r+0x222>
    c7f2:	07c9      	lsls	r1, r1, #31
    c7f4:	f53f af7d 	bmi.w	c6f2 <_realloc_r+0x86>
    c7f8:	f854 1c08 	ldr.w	r1, [r4, #-8]
    c7fc:	eba9 0a01 	sub.w	sl, r9, r1
    c800:	f8da 1004 	ldr.w	r1, [sl, #4]
    c804:	f021 0103 	bic.w	r1, r1, #3
    c808:	448b      	add	fp, r1
    c80a:	44b3      	add	fp, r6
    c80c:	4558      	cmp	r0, fp
    c80e:	f73f af6c 	bgt.w	c6ea <_realloc_r+0x7e>
    c812:	4657      	mov	r7, sl
    c814:	f8da 100c 	ldr.w	r1, [sl, #12]
    c818:	f857 0f08 	ldr.w	r0, [r7, #8]!
    c81c:	1f32      	subs	r2, r6, #4
    c81e:	2a24      	cmp	r2, #36	; 0x24
    c820:	60c1      	str	r1, [r0, #12]
    c822:	6088      	str	r0, [r1, #8]
    c824:	f200 80db 	bhi.w	c9de <_realloc_r+0x372>
    c828:	2a13      	cmp	r2, #19
    c82a:	f240 80d6 	bls.w	c9da <_realloc_r+0x36e>
    c82e:	6821      	ldr	r1, [r4, #0]
    c830:	f8ca 1008 	str.w	r1, [sl, #8]
    c834:	6861      	ldr	r1, [r4, #4]
    c836:	f8ca 100c 	str.w	r1, [sl, #12]
    c83a:	2a1b      	cmp	r2, #27
    c83c:	f200 80df 	bhi.w	c9fe <_realloc_r+0x392>
    c840:	3408      	adds	r4, #8
    c842:	f10a 0210 	add.w	r2, sl, #16
    c846:	6821      	ldr	r1, [r4, #0]
    c848:	6011      	str	r1, [r2, #0]
    c84a:	6861      	ldr	r1, [r4, #4]
    c84c:	6051      	str	r1, [r2, #4]
    c84e:	68a1      	ldr	r1, [r4, #8]
    c850:	6091      	str	r1, [r2, #8]
    c852:	eb0a 0105 	add.w	r1, sl, r5
    c856:	ebab 0205 	sub.w	r2, fp, r5
    c85a:	f042 0201 	orr.w	r2, r2, #1
    c85e:	6099      	str	r1, [r3, #8]
    c860:	604a      	str	r2, [r1, #4]
    c862:	f8da 3004 	ldr.w	r3, [sl, #4]
    c866:	f003 0301 	and.w	r3, r3, #1
    c86a:	432b      	orrs	r3, r5
    c86c:	4640      	mov	r0, r8
    c86e:	f8ca 3004 	str.w	r3, [sl, #4]
    c872:	f7ff fef5 	bl	c660 <__malloc_unlock>
    c876:	e76e      	b.n	c756 <_realloc_r+0xea>
    c878:	6823      	ldr	r3, [r4, #0]
    c87a:	6003      	str	r3, [r0, #0]
    c87c:	6863      	ldr	r3, [r4, #4]
    c87e:	6043      	str	r3, [r0, #4]
    c880:	2a1b      	cmp	r2, #27
    c882:	d868      	bhi.n	c956 <_realloc_r+0x2ea>
    c884:	f104 0208 	add.w	r2, r4, #8
    c888:	f100 0308 	add.w	r3, r0, #8
    c88c:	e74a      	b.n	c724 <_realloc_r+0xb8>
    c88e:	eb09 0205 	add.w	r2, r9, r5
    c892:	609a      	str	r2, [r3, #8]
    c894:	ebac 0305 	sub.w	r3, ip, r5
    c898:	f043 0301 	orr.w	r3, r3, #1
    c89c:	6053      	str	r3, [r2, #4]
    c89e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    c8a2:	f003 0301 	and.w	r3, r3, #1
    c8a6:	432b      	orrs	r3, r5
    c8a8:	4640      	mov	r0, r8
    c8aa:	f844 3c04 	str.w	r3, [r4, #-4]
    c8ae:	f7ff fed7 	bl	c660 <__malloc_unlock>
    c8b2:	4627      	mov	r7, r4
    c8b4:	e74f      	b.n	c756 <_realloc_r+0xea>
    c8b6:	f850 3c04 	ldr.w	r3, [r0, #-4]
    c8ba:	f023 0303 	bic.w	r3, r3, #3
    c8be:	441e      	add	r6, r3
    c8c0:	e751      	b.n	c766 <_realloc_r+0xfa>
    c8c2:	4657      	mov	r7, sl
    c8c4:	f8da 100c 	ldr.w	r1, [sl, #12]
    c8c8:	f857 0f08 	ldr.w	r0, [r7, #8]!
    c8cc:	1f32      	subs	r2, r6, #4
    c8ce:	2a24      	cmp	r2, #36	; 0x24
    c8d0:	60c1      	str	r1, [r0, #12]
    c8d2:	6088      	str	r0, [r1, #8]
    c8d4:	d84c      	bhi.n	c970 <_realloc_r+0x304>
    c8d6:	2a13      	cmp	r2, #19
    c8d8:	d948      	bls.n	c96c <_realloc_r+0x300>
    c8da:	6821      	ldr	r1, [r4, #0]
    c8dc:	f8ca 1008 	str.w	r1, [sl, #8]
    c8e0:	6861      	ldr	r1, [r4, #4]
    c8e2:	f8ca 100c 	str.w	r1, [sl, #12]
    c8e6:	2a1b      	cmp	r2, #27
    c8e8:	d856      	bhi.n	c998 <_realloc_r+0x32c>
    c8ea:	3408      	adds	r4, #8
    c8ec:	f10a 0210 	add.w	r2, sl, #16
    c8f0:	461e      	mov	r6, r3
    c8f2:	6823      	ldr	r3, [r4, #0]
    c8f4:	6013      	str	r3, [r2, #0]
    c8f6:	6863      	ldr	r3, [r4, #4]
    c8f8:	6053      	str	r3, [r2, #4]
    c8fa:	68a3      	ldr	r3, [r4, #8]
    c8fc:	6093      	str	r3, [r2, #8]
    c8fe:	46d1      	mov	r9, sl
    c900:	463c      	mov	r4, r7
    c902:	e730      	b.n	c766 <_realloc_r+0xfa>
    c904:	4621      	mov	r1, r4
    c906:	f000 f9e7 	bl	ccd8 <memmove>
    c90a:	e711      	b.n	c730 <_realloc_r+0xc4>
    c90c:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    c910:	4657      	mov	r7, sl
    c912:	60cb      	str	r3, [r1, #12]
    c914:	6099      	str	r1, [r3, #8]
    c916:	f857 1f08 	ldr.w	r1, [r7, #8]!
    c91a:	f8da 300c 	ldr.w	r3, [sl, #12]
    c91e:	60cb      	str	r3, [r1, #12]
    c920:	1f32      	subs	r2, r6, #4
    c922:	2a24      	cmp	r2, #36	; 0x24
    c924:	6099      	str	r1, [r3, #8]
    c926:	d82d      	bhi.n	c984 <_realloc_r+0x318>
    c928:	2a13      	cmp	r2, #19
    c92a:	d929      	bls.n	c980 <_realloc_r+0x314>
    c92c:	6823      	ldr	r3, [r4, #0]
    c92e:	f8ca 3008 	str.w	r3, [sl, #8]
    c932:	6863      	ldr	r3, [r4, #4]
    c934:	f8ca 300c 	str.w	r3, [sl, #12]
    c938:	2a1b      	cmp	r2, #27
    c93a:	d842      	bhi.n	c9c2 <_realloc_r+0x356>
    c93c:	3408      	adds	r4, #8
    c93e:	f10a 0310 	add.w	r3, sl, #16
    c942:	6822      	ldr	r2, [r4, #0]
    c944:	601a      	str	r2, [r3, #0]
    c946:	6862      	ldr	r2, [r4, #4]
    c948:	605a      	str	r2, [r3, #4]
    c94a:	68a2      	ldr	r2, [r4, #8]
    c94c:	609a      	str	r2, [r3, #8]
    c94e:	4666      	mov	r6, ip
    c950:	46d1      	mov	r9, sl
    c952:	463c      	mov	r4, r7
    c954:	e707      	b.n	c766 <_realloc_r+0xfa>
    c956:	68a3      	ldr	r3, [r4, #8]
    c958:	6083      	str	r3, [r0, #8]
    c95a:	68e3      	ldr	r3, [r4, #12]
    c95c:	60c3      	str	r3, [r0, #12]
    c95e:	2a24      	cmp	r2, #36	; 0x24
    c960:	d026      	beq.n	c9b0 <_realloc_r+0x344>
    c962:	f104 0210 	add.w	r2, r4, #16
    c966:	f100 0310 	add.w	r3, r0, #16
    c96a:	e6db      	b.n	c724 <_realloc_r+0xb8>
    c96c:	463a      	mov	r2, r7
    c96e:	e7bf      	b.n	c8f0 <_realloc_r+0x284>
    c970:	4621      	mov	r1, r4
    c972:	4638      	mov	r0, r7
    c974:	461e      	mov	r6, r3
    c976:	46d1      	mov	r9, sl
    c978:	f000 f9ae 	bl	ccd8 <memmove>
    c97c:	463c      	mov	r4, r7
    c97e:	e6f2      	b.n	c766 <_realloc_r+0xfa>
    c980:	463b      	mov	r3, r7
    c982:	e7de      	b.n	c942 <_realloc_r+0x2d6>
    c984:	4621      	mov	r1, r4
    c986:	4638      	mov	r0, r7
    c988:	4666      	mov	r6, ip
    c98a:	46d1      	mov	r9, sl
    c98c:	f000 f9a4 	bl	ccd8 <memmove>
    c990:	463c      	mov	r4, r7
    c992:	e6e8      	b.n	c766 <_realloc_r+0xfa>
    c994:	1fff88c8 	.word	0x1fff88c8
    c998:	68a1      	ldr	r1, [r4, #8]
    c99a:	f8ca 1010 	str.w	r1, [sl, #16]
    c99e:	68e1      	ldr	r1, [r4, #12]
    c9a0:	f8ca 1014 	str.w	r1, [sl, #20]
    c9a4:	2a24      	cmp	r2, #36	; 0x24
    c9a6:	d020      	beq.n	c9ea <_realloc_r+0x37e>
    c9a8:	3410      	adds	r4, #16
    c9aa:	f10a 0218 	add.w	r2, sl, #24
    c9ae:	e79f      	b.n	c8f0 <_realloc_r+0x284>
    c9b0:	6923      	ldr	r3, [r4, #16]
    c9b2:	6103      	str	r3, [r0, #16]
    c9b4:	6961      	ldr	r1, [r4, #20]
    c9b6:	6141      	str	r1, [r0, #20]
    c9b8:	f104 0218 	add.w	r2, r4, #24
    c9bc:	f100 0318 	add.w	r3, r0, #24
    c9c0:	e6b0      	b.n	c724 <_realloc_r+0xb8>
    c9c2:	68a3      	ldr	r3, [r4, #8]
    c9c4:	f8ca 3010 	str.w	r3, [sl, #16]
    c9c8:	68e3      	ldr	r3, [r4, #12]
    c9ca:	f8ca 3014 	str.w	r3, [sl, #20]
    c9ce:	2a24      	cmp	r2, #36	; 0x24
    c9d0:	d021      	beq.n	ca16 <_realloc_r+0x3aa>
    c9d2:	3410      	adds	r4, #16
    c9d4:	f10a 0318 	add.w	r3, sl, #24
    c9d8:	e7b3      	b.n	c942 <_realloc_r+0x2d6>
    c9da:	463a      	mov	r2, r7
    c9dc:	e733      	b.n	c846 <_realloc_r+0x1da>
    c9de:	4621      	mov	r1, r4
    c9e0:	4638      	mov	r0, r7
    c9e2:	f000 f979 	bl	ccd8 <memmove>
    c9e6:	4b16      	ldr	r3, [pc, #88]	; (ca40 <_realloc_r+0x3d4>)
    c9e8:	e733      	b.n	c852 <_realloc_r+0x1e6>
    c9ea:	6922      	ldr	r2, [r4, #16]
    c9ec:	f8ca 2018 	str.w	r2, [sl, #24]
    c9f0:	6962      	ldr	r2, [r4, #20]
    c9f2:	f8ca 201c 	str.w	r2, [sl, #28]
    c9f6:	3418      	adds	r4, #24
    c9f8:	f10a 0220 	add.w	r2, sl, #32
    c9fc:	e778      	b.n	c8f0 <_realloc_r+0x284>
    c9fe:	68a1      	ldr	r1, [r4, #8]
    ca00:	f8ca 1010 	str.w	r1, [sl, #16]
    ca04:	68e1      	ldr	r1, [r4, #12]
    ca06:	f8ca 1014 	str.w	r1, [sl, #20]
    ca0a:	2a24      	cmp	r2, #36	; 0x24
    ca0c:	d00d      	beq.n	ca2a <_realloc_r+0x3be>
    ca0e:	3410      	adds	r4, #16
    ca10:	f10a 0218 	add.w	r2, sl, #24
    ca14:	e717      	b.n	c846 <_realloc_r+0x1da>
    ca16:	6923      	ldr	r3, [r4, #16]
    ca18:	f8ca 3018 	str.w	r3, [sl, #24]
    ca1c:	6963      	ldr	r3, [r4, #20]
    ca1e:	f8ca 301c 	str.w	r3, [sl, #28]
    ca22:	3418      	adds	r4, #24
    ca24:	f10a 0320 	add.w	r3, sl, #32
    ca28:	e78b      	b.n	c942 <_realloc_r+0x2d6>
    ca2a:	6922      	ldr	r2, [r4, #16]
    ca2c:	f8ca 2018 	str.w	r2, [sl, #24]
    ca30:	6962      	ldr	r2, [r4, #20]
    ca32:	f8ca 201c 	str.w	r2, [sl, #28]
    ca36:	3418      	adds	r4, #24
    ca38:	f10a 0220 	add.w	r2, sl, #32
    ca3c:	e703      	b.n	c846 <_realloc_r+0x1da>
    ca3e:	bf00      	nop
    ca40:	1fff88c8 	.word	0x1fff88c8

0000ca44 <stdio_exit_handler>:
    ca44:	4a02      	ldr	r2, [pc, #8]	; (ca50 <stdio_exit_handler+0xc>)
    ca46:	4903      	ldr	r1, [pc, #12]	; (ca54 <stdio_exit_handler+0x10>)
    ca48:	4803      	ldr	r0, [pc, #12]	; (ca58 <stdio_exit_handler+0x14>)
    ca4a:	f000 b8bb 	b.w	cbc4 <_fwalk_sglue>
    ca4e:	bf00      	nop
    ca50:	1fff8cd8 	.word	0x1fff8cd8
    ca54:	0000f731 	.word	0x0000f731
    ca58:	1fff8e50 	.word	0x1fff8e50

0000ca5c <cleanup_stdio>:
    ca5c:	4b0c      	ldr	r3, [pc, #48]	; (ca90 <cleanup_stdio+0x34>)
    ca5e:	6841      	ldr	r1, [r0, #4]
    ca60:	4299      	cmp	r1, r3
    ca62:	b510      	push	{r4, lr}
    ca64:	4604      	mov	r4, r0
    ca66:	d001      	beq.n	ca6c <cleanup_stdio+0x10>
    ca68:	f002 fe62 	bl	f730 <_fclose_r>
    ca6c:	68a1      	ldr	r1, [r4, #8]
    ca6e:	4b09      	ldr	r3, [pc, #36]	; (ca94 <cleanup_stdio+0x38>)
    ca70:	4299      	cmp	r1, r3
    ca72:	d002      	beq.n	ca7a <cleanup_stdio+0x1e>
    ca74:	4620      	mov	r0, r4
    ca76:	f002 fe5b 	bl	f730 <_fclose_r>
    ca7a:	68e1      	ldr	r1, [r4, #12]
    ca7c:	4b06      	ldr	r3, [pc, #24]	; (ca98 <cleanup_stdio+0x3c>)
    ca7e:	4299      	cmp	r1, r3
    ca80:	d004      	beq.n	ca8c <cleanup_stdio+0x30>
    ca82:	4620      	mov	r0, r4
    ca84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ca88:	f002 be52 	b.w	f730 <_fclose_r>
    ca8c:	bd10      	pop	{r4, pc}
    ca8e:	bf00      	nop
    ca90:	1fffb744 	.word	0x1fffb744
    ca94:	1fffb7ac 	.word	0x1fffb7ac
    ca98:	1fffb814 	.word	0x1fffb814

0000ca9c <global_stdio_init.part.0>:
    ca9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    caa0:	4c2a      	ldr	r4, [pc, #168]	; (cb4c <global_stdio_init.part.0+0xb0>)
    caa2:	4b2b      	ldr	r3, [pc, #172]	; (cb50 <global_stdio_init.part.0+0xb4>)
    caa4:	482b      	ldr	r0, [pc, #172]	; (cb54 <global_stdio_init.part.0+0xb8>)
    caa6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; cb58 <global_stdio_init.part.0+0xbc>
    caaa:	f8df 80b0 	ldr.w	r8, [pc, #176]	; cb5c <global_stdio_init.part.0+0xc0>
    caae:	4f2c      	ldr	r7, [pc, #176]	; (cb60 <global_stdio_init.part.0+0xc4>)
    cab0:	6018      	str	r0, [r3, #0]
    cab2:	2500      	movs	r5, #0
    cab4:	2304      	movs	r3, #4
    cab6:	2208      	movs	r2, #8
    cab8:	4629      	mov	r1, r5
    caba:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    cabe:	4e29      	ldr	r6, [pc, #164]	; (cb64 <global_stdio_init.part.0+0xc8>)
    cac0:	6665      	str	r5, [r4, #100]	; 0x64
    cac2:	e9c4 5302 	strd	r5, r3, [r4, #8]
    cac6:	e9c4 5500 	strd	r5, r5, [r4]
    caca:	e9c4 5504 	strd	r5, r5, [r4, #16]
    cace:	61a5      	str	r5, [r4, #24]
    cad0:	f000 f97e 	bl	cdd0 <memset>
    cad4:	4b24      	ldr	r3, [pc, #144]	; (cb68 <global_stdio_init.part.0+0xcc>)
    cad6:	6763      	str	r3, [r4, #116]	; 0x74
    cad8:	2208      	movs	r2, #8
    cada:	4629      	mov	r1, r5
    cadc:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    cae0:	e9c4 4907 	strd	r4, r9, [r4, #28]
    cae4:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    cae8:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    caec:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    caf0:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    caf4:	6725      	str	r5, [r4, #112]	; 0x70
    caf6:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    cafa:	62e6      	str	r6, [r4, #44]	; 0x2c
    cafc:	f000 f968 	bl	cdd0 <memset>
    cb00:	4b1a      	ldr	r3, [pc, #104]	; (cb6c <global_stdio_init.part.0+0xd0>)
    cb02:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    cb06:	4629      	mov	r1, r5
    cb08:	f104 0368 	add.w	r3, r4, #104	; 0x68
    cb0c:	2208      	movs	r2, #8
    cb0e:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    cb12:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    cb16:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    cb1a:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    cb1e:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    cb22:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    cb26:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    cb2a:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    cb2e:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    cb32:	f000 f94d 	bl	cdd0 <memset>
    cb36:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    cb3a:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    cb3e:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    cb42:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    cb46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cb4a:	bf00      	nop
    cb4c:	1fffb744 	.word	0x1fffb744
    cb50:	1fffb87c 	.word	0x1fffb87c
    cb54:	0000ca45 	.word	0x0000ca45
    cb58:	0000cc4d 	.word	0x0000cc4d
    cb5c:	0000cc71 	.word	0x0000cc71
    cb60:	0000ccb1 	.word	0x0000ccb1
    cb64:	0000ccd1 	.word	0x0000ccd1
    cb68:	00010009 	.word	0x00010009
    cb6c:	00020012 	.word	0x00020012

0000cb70 <__sinit>:
    cb70:	b510      	push	{r4, lr}
    cb72:	4604      	mov	r4, r0
    cb74:	480a      	ldr	r0, [pc, #40]	; (cba0 <__sinit+0x30>)
    cb76:	f000 fa49 	bl	d00c <__retarget_lock_acquire_recursive>
    cb7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    cb7c:	b923      	cbnz	r3, cb88 <__sinit+0x18>
    cb7e:	4b09      	ldr	r3, [pc, #36]	; (cba4 <__sinit+0x34>)
    cb80:	4a09      	ldr	r2, [pc, #36]	; (cba8 <__sinit+0x38>)
    cb82:	681b      	ldr	r3, [r3, #0]
    cb84:	6362      	str	r2, [r4, #52]	; 0x34
    cb86:	b123      	cbz	r3, cb92 <__sinit+0x22>
    cb88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cb8c:	4804      	ldr	r0, [pc, #16]	; (cba0 <__sinit+0x30>)
    cb8e:	f000 ba3f 	b.w	d010 <__retarget_lock_release_recursive>
    cb92:	f7ff ff83 	bl	ca9c <global_stdio_init.part.0>
    cb96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cb9a:	4801      	ldr	r0, [pc, #4]	; (cba0 <__sinit+0x30>)
    cb9c:	f000 ba38 	b.w	d010 <__retarget_lock_release_recursive>
    cba0:	1fffb88c 	.word	0x1fffb88c
    cba4:	1fffb87c 	.word	0x1fffb87c
    cba8:	0000ca5d 	.word	0x0000ca5d

0000cbac <__sfp_lock_acquire>:
    cbac:	4801      	ldr	r0, [pc, #4]	; (cbb4 <__sfp_lock_acquire+0x8>)
    cbae:	f000 ba2d 	b.w	d00c <__retarget_lock_acquire_recursive>
    cbb2:	bf00      	nop
    cbb4:	1fffb88c 	.word	0x1fffb88c

0000cbb8 <__sfp_lock_release>:
    cbb8:	4801      	ldr	r0, [pc, #4]	; (cbc0 <__sfp_lock_release+0x8>)
    cbba:	f000 ba29 	b.w	d010 <__retarget_lock_release_recursive>
    cbbe:	bf00      	nop
    cbc0:	1fffb88c 	.word	0x1fffb88c

0000cbc4 <_fwalk_sglue>:
    cbc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cbc8:	4680      	mov	r8, r0
    cbca:	460f      	mov	r7, r1
    cbcc:	4616      	mov	r6, r2
    cbce:	f04f 0900 	mov.w	r9, #0
    cbd2:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    cbd6:	3d01      	subs	r5, #1
    cbd8:	d411      	bmi.n	cbfe <_fwalk_sglue+0x3a>
    cbda:	89a3      	ldrh	r3, [r4, #12]
    cbdc:	2b01      	cmp	r3, #1
    cbde:	f105 35ff 	add.w	r5, r5, #4294967295
    cbe2:	d908      	bls.n	cbf6 <_fwalk_sglue+0x32>
    cbe4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    cbe8:	3301      	adds	r3, #1
    cbea:	4621      	mov	r1, r4
    cbec:	d003      	beq.n	cbf6 <_fwalk_sglue+0x32>
    cbee:	4640      	mov	r0, r8
    cbf0:	47b8      	blx	r7
    cbf2:	ea49 0900 	orr.w	r9, r9, r0
    cbf6:	1c6b      	adds	r3, r5, #1
    cbf8:	f104 0468 	add.w	r4, r4, #104	; 0x68
    cbfc:	d1ed      	bne.n	cbda <_fwalk_sglue+0x16>
    cbfe:	6836      	ldr	r6, [r6, #0]
    cc00:	2e00      	cmp	r6, #0
    cc02:	d1e6      	bne.n	cbd2 <_fwalk_sglue+0xe>
    cc04:	4648      	mov	r0, r9
    cc06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cc0a:	bf00      	nop

0000cc0c <sprintf>:
    cc0c:	b40e      	push	{r1, r2, r3}
    cc0e:	b510      	push	{r4, lr}
    cc10:	b09d      	sub	sp, #116	; 0x74
    cc12:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    cc16:	ab1f      	add	r3, sp, #124	; 0x7c
    cc18:	e9cd 0106 	strd	r0, r1, [sp, #24]
    cc1c:	9104      	str	r1, [sp, #16]
    cc1e:	4909      	ldr	r1, [pc, #36]	; (cc44 <sprintf+0x38>)
    cc20:	f853 2b04 	ldr.w	r2, [r3], #4
    cc24:	9002      	str	r0, [sp, #8]
    cc26:	4c08      	ldr	r4, [pc, #32]	; (cc48 <sprintf+0x3c>)
    cc28:	6808      	ldr	r0, [r1, #0]
    cc2a:	9301      	str	r3, [sp, #4]
    cc2c:	a902      	add	r1, sp, #8
    cc2e:	9405      	str	r4, [sp, #20]
    cc30:	f000 ffac 	bl	db8c <_svfprintf_r>
    cc34:	9b02      	ldr	r3, [sp, #8]
    cc36:	2200      	movs	r2, #0
    cc38:	701a      	strb	r2, [r3, #0]
    cc3a:	b01d      	add	sp, #116	; 0x74
    cc3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cc40:	b003      	add	sp, #12
    cc42:	4770      	bx	lr
    cc44:	1fff8f70 	.word	0x1fff8f70
    cc48:	ffff0208 	.word	0xffff0208

0000cc4c <__sread>:
    cc4c:	b510      	push	{r4, lr}
    cc4e:	460c      	mov	r4, r1
    cc50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    cc54:	f000 f96e 	bl	cf34 <_read_r>
    cc58:	2800      	cmp	r0, #0
    cc5a:	db03      	blt.n	cc64 <__sread+0x18>
    cc5c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    cc5e:	4403      	add	r3, r0
    cc60:	6523      	str	r3, [r4, #80]	; 0x50
    cc62:	bd10      	pop	{r4, pc}
    cc64:	89a3      	ldrh	r3, [r4, #12]
    cc66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    cc6a:	81a3      	strh	r3, [r4, #12]
    cc6c:	bd10      	pop	{r4, pc}
    cc6e:	bf00      	nop

0000cc70 <__swrite>:
    cc70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cc74:	460c      	mov	r4, r1
    cc76:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    cc7a:	461f      	mov	r7, r3
    cc7c:	05cb      	lsls	r3, r1, #23
    cc7e:	4605      	mov	r5, r0
    cc80:	4616      	mov	r6, r2
    cc82:	d40b      	bmi.n	cc9c <__swrite+0x2c>
    cc84:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    cc88:	81a1      	strh	r1, [r4, #12]
    cc8a:	463b      	mov	r3, r7
    cc8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    cc90:	4632      	mov	r2, r6
    cc92:	4628      	mov	r0, r5
    cc94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cc98:	f000 b974 	b.w	cf84 <_write_r>
    cc9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    cca0:	2302      	movs	r3, #2
    cca2:	2200      	movs	r2, #0
    cca4:	f000 f930 	bl	cf08 <_lseek_r>
    cca8:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    ccac:	e7ea      	b.n	cc84 <__swrite+0x14>
    ccae:	bf00      	nop

0000ccb0 <__sseek>:
    ccb0:	b510      	push	{r4, lr}
    ccb2:	460c      	mov	r4, r1
    ccb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    ccb8:	f000 f926 	bl	cf08 <_lseek_r>
    ccbc:	89a3      	ldrh	r3, [r4, #12]
    ccbe:	1c42      	adds	r2, r0, #1
    ccc0:	bf0e      	itee	eq
    ccc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    ccc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    ccca:	6520      	strne	r0, [r4, #80]	; 0x50
    cccc:	81a3      	strh	r3, [r4, #12]
    ccce:	bd10      	pop	{r4, pc}

0000ccd0 <__sclose>:
    ccd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    ccd4:	f000 b906 	b.w	cee4 <_close_r>

0000ccd8 <memmove>:
    ccd8:	4288      	cmp	r0, r1
    ccda:	d90d      	bls.n	ccf8 <memmove+0x20>
    ccdc:	188b      	adds	r3, r1, r2
    ccde:	4283      	cmp	r3, r0
    cce0:	d90a      	bls.n	ccf8 <memmove+0x20>
    cce2:	eb00 0c02 	add.w	ip, r0, r2
    cce6:	b1ba      	cbz	r2, cd18 <memmove+0x40>
    cce8:	4662      	mov	r2, ip
    ccea:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    ccee:	f802 cd01 	strb.w	ip, [r2, #-1]!
    ccf2:	4299      	cmp	r1, r3
    ccf4:	d1f9      	bne.n	ccea <memmove+0x12>
    ccf6:	4770      	bx	lr
    ccf8:	2a0f      	cmp	r2, #15
    ccfa:	d80e      	bhi.n	cd1a <memmove+0x42>
    ccfc:	4603      	mov	r3, r0
    ccfe:	f102 3cff 	add.w	ip, r2, #4294967295
    cd02:	b14a      	cbz	r2, cd18 <memmove+0x40>
    cd04:	f10c 0c01 	add.w	ip, ip, #1
    cd08:	3b01      	subs	r3, #1
    cd0a:	448c      	add	ip, r1
    cd0c:	f811 2b01 	ldrb.w	r2, [r1], #1
    cd10:	f803 2f01 	strb.w	r2, [r3, #1]!
    cd14:	4561      	cmp	r1, ip
    cd16:	d1f9      	bne.n	cd0c <memmove+0x34>
    cd18:	4770      	bx	lr
    cd1a:	ea40 0301 	orr.w	r3, r0, r1
    cd1e:	079b      	lsls	r3, r3, #30
    cd20:	d150      	bne.n	cdc4 <memmove+0xec>
    cd22:	f1a2 0310 	sub.w	r3, r2, #16
    cd26:	b570      	push	{r4, r5, r6, lr}
    cd28:	f101 0c20 	add.w	ip, r1, #32
    cd2c:	f023 050f 	bic.w	r5, r3, #15
    cd30:	f101 0e10 	add.w	lr, r1, #16
    cd34:	f100 0410 	add.w	r4, r0, #16
    cd38:	44ac      	add	ip, r5
    cd3a:	091b      	lsrs	r3, r3, #4
    cd3c:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    cd40:	f844 5c10 	str.w	r5, [r4, #-16]
    cd44:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    cd48:	f844 5c0c 	str.w	r5, [r4, #-12]
    cd4c:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    cd50:	f844 5c08 	str.w	r5, [r4, #-8]
    cd54:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    cd58:	f844 5c04 	str.w	r5, [r4, #-4]
    cd5c:	f10e 0e10 	add.w	lr, lr, #16
    cd60:	45e6      	cmp	lr, ip
    cd62:	f104 0410 	add.w	r4, r4, #16
    cd66:	d1e9      	bne.n	cd3c <memmove+0x64>
    cd68:	3301      	adds	r3, #1
    cd6a:	f012 0f0c 	tst.w	r2, #12
    cd6e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    cd72:	f002 040f 	and.w	r4, r2, #15
    cd76:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    cd7a:	d027      	beq.n	cdcc <memmove+0xf4>
    cd7c:	3c04      	subs	r4, #4
    cd7e:	f024 0603 	bic.w	r6, r4, #3
    cd82:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    cd86:	441e      	add	r6, r3
    cd88:	1f1c      	subs	r4, r3, #4
    cd8a:	468e      	mov	lr, r1
    cd8c:	f85e 5b04 	ldr.w	r5, [lr], #4
    cd90:	f844 5f04 	str.w	r5, [r4, #4]!
    cd94:	42b4      	cmp	r4, r6
    cd96:	d1f9      	bne.n	cd8c <memmove+0xb4>
    cd98:	f10c 0401 	add.w	r4, ip, #1
    cd9c:	f002 0203 	and.w	r2, r2, #3
    cda0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    cda4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    cda8:	f102 3cff 	add.w	ip, r2, #4294967295
    cdac:	b14a      	cbz	r2, cdc2 <memmove+0xea>
    cdae:	f10c 0c01 	add.w	ip, ip, #1
    cdb2:	3b01      	subs	r3, #1
    cdb4:	448c      	add	ip, r1
    cdb6:	f811 2b01 	ldrb.w	r2, [r1], #1
    cdba:	f803 2f01 	strb.w	r2, [r3, #1]!
    cdbe:	4561      	cmp	r1, ip
    cdc0:	d1f9      	bne.n	cdb6 <memmove+0xde>
    cdc2:	bd70      	pop	{r4, r5, r6, pc}
    cdc4:	f102 3cff 	add.w	ip, r2, #4294967295
    cdc8:	4603      	mov	r3, r0
    cdca:	e79b      	b.n	cd04 <memmove+0x2c>
    cdcc:	4622      	mov	r2, r4
    cdce:	e7eb      	b.n	cda8 <memmove+0xd0>

0000cdd0 <memset>:
    cdd0:	0783      	lsls	r3, r0, #30
    cdd2:	b530      	push	{r4, r5, lr}
    cdd4:	d048      	beq.n	ce68 <memset+0x98>
    cdd6:	1e54      	subs	r4, r2, #1
    cdd8:	2a00      	cmp	r2, #0
    cdda:	d03f      	beq.n	ce5c <memset+0x8c>
    cddc:	b2ca      	uxtb	r2, r1
    cdde:	4603      	mov	r3, r0
    cde0:	e001      	b.n	cde6 <memset+0x16>
    cde2:	3c01      	subs	r4, #1
    cde4:	d33a      	bcc.n	ce5c <memset+0x8c>
    cde6:	f803 2b01 	strb.w	r2, [r3], #1
    cdea:	079d      	lsls	r5, r3, #30
    cdec:	d1f9      	bne.n	cde2 <memset+0x12>
    cdee:	2c03      	cmp	r4, #3
    cdf0:	d92d      	bls.n	ce4e <memset+0x7e>
    cdf2:	b2cd      	uxtb	r5, r1
    cdf4:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    cdf8:	2c0f      	cmp	r4, #15
    cdfa:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    cdfe:	d936      	bls.n	ce6e <memset+0x9e>
    ce00:	f1a4 0210 	sub.w	r2, r4, #16
    ce04:	f022 0c0f 	bic.w	ip, r2, #15
    ce08:	f103 0e20 	add.w	lr, r3, #32
    ce0c:	44e6      	add	lr, ip
    ce0e:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    ce12:	f103 0210 	add.w	r2, r3, #16
    ce16:	e942 5504 	strd	r5, r5, [r2, #-16]
    ce1a:	e942 5502 	strd	r5, r5, [r2, #-8]
    ce1e:	3210      	adds	r2, #16
    ce20:	4572      	cmp	r2, lr
    ce22:	d1f8      	bne.n	ce16 <memset+0x46>
    ce24:	f10c 0201 	add.w	r2, ip, #1
    ce28:	f014 0f0c 	tst.w	r4, #12
    ce2c:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    ce30:	f004 0c0f 	and.w	ip, r4, #15
    ce34:	d013      	beq.n	ce5e <memset+0x8e>
    ce36:	f1ac 0304 	sub.w	r3, ip, #4
    ce3a:	f023 0303 	bic.w	r3, r3, #3
    ce3e:	3304      	adds	r3, #4
    ce40:	4413      	add	r3, r2
    ce42:	f842 5b04 	str.w	r5, [r2], #4
    ce46:	4293      	cmp	r3, r2
    ce48:	d1fb      	bne.n	ce42 <memset+0x72>
    ce4a:	f00c 0403 	and.w	r4, ip, #3
    ce4e:	b12c      	cbz	r4, ce5c <memset+0x8c>
    ce50:	b2c9      	uxtb	r1, r1
    ce52:	441c      	add	r4, r3
    ce54:	f803 1b01 	strb.w	r1, [r3], #1
    ce58:	429c      	cmp	r4, r3
    ce5a:	d1fb      	bne.n	ce54 <memset+0x84>
    ce5c:	bd30      	pop	{r4, r5, pc}
    ce5e:	4664      	mov	r4, ip
    ce60:	4613      	mov	r3, r2
    ce62:	2c00      	cmp	r4, #0
    ce64:	d1f4      	bne.n	ce50 <memset+0x80>
    ce66:	e7f9      	b.n	ce5c <memset+0x8c>
    ce68:	4603      	mov	r3, r0
    ce6a:	4614      	mov	r4, r2
    ce6c:	e7bf      	b.n	cdee <memset+0x1e>
    ce6e:	461a      	mov	r2, r3
    ce70:	46a4      	mov	ip, r4
    ce72:	e7e0      	b.n	ce36 <memset+0x66>

0000ce74 <strncpy>:
    ce74:	ea40 0301 	orr.w	r3, r0, r1
    ce78:	079b      	lsls	r3, r3, #30
    ce7a:	b530      	push	{r4, r5, lr}
    ce7c:	d101      	bne.n	ce82 <strncpy+0xe>
    ce7e:	2a03      	cmp	r2, #3
    ce80:	d80f      	bhi.n	cea2 <strncpy+0x2e>
    ce82:	4684      	mov	ip, r0
    ce84:	f101 3eff 	add.w	lr, r1, #4294967295
    ce88:	e007      	b.n	ce9a <strncpy+0x26>
    ce8a:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    ce8e:	f803 1b01 	strb.w	r1, [r3], #1
    ce92:	1e54      	subs	r4, r2, #1
    ce94:	b1c1      	cbz	r1, cec8 <strncpy+0x54>
    ce96:	469c      	mov	ip, r3
    ce98:	4622      	mov	r2, r4
    ce9a:	4663      	mov	r3, ip
    ce9c:	2a00      	cmp	r2, #0
    ce9e:	d1f4      	bne.n	ce8a <strncpy+0x16>
    cea0:	bd30      	pop	{r4, r5, pc}
    cea2:	460b      	mov	r3, r1
    cea4:	4684      	mov	ip, r0
    cea6:	4619      	mov	r1, r3
    cea8:	f853 5b04 	ldr.w	r5, [r3], #4
    ceac:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    ceb0:	ea24 0405 	bic.w	r4, r4, r5
    ceb4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    ceb8:	d1e4      	bne.n	ce84 <strncpy+0x10>
    ceba:	3a04      	subs	r2, #4
    cebc:	2a03      	cmp	r2, #3
    cebe:	f84c 5b04 	str.w	r5, [ip], #4
    cec2:	4619      	mov	r1, r3
    cec4:	d8ef      	bhi.n	cea6 <strncpy+0x32>
    cec6:	e7dd      	b.n	ce84 <strncpy+0x10>
    cec8:	4494      	add	ip, r2
    ceca:	2c00      	cmp	r4, #0
    cecc:	d0e8      	beq.n	cea0 <strncpy+0x2c>
    cece:	f803 1b01 	strb.w	r1, [r3], #1
    ced2:	4563      	cmp	r3, ip
    ced4:	d1fb      	bne.n	cece <strncpy+0x5a>
    ced6:	bd30      	pop	{r4, r5, pc}

0000ced8 <__locale_mb_cur_max>:
    ced8:	4b01      	ldr	r3, [pc, #4]	; (cee0 <__locale_mb_cur_max+0x8>)
    ceda:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    cede:	4770      	bx	lr
    cee0:	1fff8ce4 	.word	0x1fff8ce4

0000cee4 <_close_r>:
    cee4:	b538      	push	{r3, r4, r5, lr}
    cee6:	4d07      	ldr	r5, [pc, #28]	; (cf04 <_close_r+0x20>)
    cee8:	2200      	movs	r2, #0
    ceea:	4604      	mov	r4, r0
    ceec:	4608      	mov	r0, r1
    ceee:	602a      	str	r2, [r5, #0]
    cef0:	f7fb ff38 	bl	8d64 <_close>
    cef4:	1c43      	adds	r3, r0, #1
    cef6:	d000      	beq.n	cefa <_close_r+0x16>
    cef8:	bd38      	pop	{r3, r4, r5, pc}
    cefa:	682b      	ldr	r3, [r5, #0]
    cefc:	2b00      	cmp	r3, #0
    cefe:	d0fb      	beq.n	cef8 <_close_r+0x14>
    cf00:	6023      	str	r3, [r4, #0]
    cf02:	bd38      	pop	{r3, r4, r5, pc}
    cf04:	1fffb880 	.word	0x1fffb880

0000cf08 <_lseek_r>:
    cf08:	b538      	push	{r3, r4, r5, lr}
    cf0a:	460c      	mov	r4, r1
    cf0c:	4d08      	ldr	r5, [pc, #32]	; (cf30 <_lseek_r+0x28>)
    cf0e:	4684      	mov	ip, r0
    cf10:	4611      	mov	r1, r2
    cf12:	4620      	mov	r0, r4
    cf14:	461a      	mov	r2, r3
    cf16:	2300      	movs	r3, #0
    cf18:	602b      	str	r3, [r5, #0]
    cf1a:	4664      	mov	r4, ip
    cf1c:	f7fb ff2e 	bl	8d7c <_lseek>
    cf20:	1c43      	adds	r3, r0, #1
    cf22:	d000      	beq.n	cf26 <_lseek_r+0x1e>
    cf24:	bd38      	pop	{r3, r4, r5, pc}
    cf26:	682b      	ldr	r3, [r5, #0]
    cf28:	2b00      	cmp	r3, #0
    cf2a:	d0fb      	beq.n	cf24 <_lseek_r+0x1c>
    cf2c:	6023      	str	r3, [r4, #0]
    cf2e:	bd38      	pop	{r3, r4, r5, pc}
    cf30:	1fffb880 	.word	0x1fffb880

0000cf34 <_read_r>:
    cf34:	b538      	push	{r3, r4, r5, lr}
    cf36:	460c      	mov	r4, r1
    cf38:	4d08      	ldr	r5, [pc, #32]	; (cf5c <_read_r+0x28>)
    cf3a:	4684      	mov	ip, r0
    cf3c:	4611      	mov	r1, r2
    cf3e:	4620      	mov	r0, r4
    cf40:	461a      	mov	r2, r3
    cf42:	2300      	movs	r3, #0
    cf44:	602b      	str	r3, [r5, #0]
    cf46:	4664      	mov	r4, ip
    cf48:	f7fb ff0a 	bl	8d60 <_read>
    cf4c:	1c43      	adds	r3, r0, #1
    cf4e:	d000      	beq.n	cf52 <_read_r+0x1e>
    cf50:	bd38      	pop	{r3, r4, r5, pc}
    cf52:	682b      	ldr	r3, [r5, #0]
    cf54:	2b00      	cmp	r3, #0
    cf56:	d0fb      	beq.n	cf50 <_read_r+0x1c>
    cf58:	6023      	str	r3, [r4, #0]
    cf5a:	bd38      	pop	{r3, r4, r5, pc}
    cf5c:	1fffb880 	.word	0x1fffb880

0000cf60 <_sbrk_r>:
    cf60:	b538      	push	{r3, r4, r5, lr}
    cf62:	4d07      	ldr	r5, [pc, #28]	; (cf80 <_sbrk_r+0x20>)
    cf64:	2200      	movs	r2, #0
    cf66:	4604      	mov	r4, r0
    cf68:	4608      	mov	r0, r1
    cf6a:	602a      	str	r2, [r5, #0]
    cf6c:	f7fb fee2 	bl	8d34 <_sbrk>
    cf70:	1c43      	adds	r3, r0, #1
    cf72:	d000      	beq.n	cf76 <_sbrk_r+0x16>
    cf74:	bd38      	pop	{r3, r4, r5, pc}
    cf76:	682b      	ldr	r3, [r5, #0]
    cf78:	2b00      	cmp	r3, #0
    cf7a:	d0fb      	beq.n	cf74 <_sbrk_r+0x14>
    cf7c:	6023      	str	r3, [r4, #0]
    cf7e:	bd38      	pop	{r3, r4, r5, pc}
    cf80:	1fffb880 	.word	0x1fffb880

0000cf84 <_write_r>:
    cf84:	b538      	push	{r3, r4, r5, lr}
    cf86:	460c      	mov	r4, r1
    cf88:	4d08      	ldr	r5, [pc, #32]	; (cfac <_write_r+0x28>)
    cf8a:	4684      	mov	ip, r0
    cf8c:	4611      	mov	r1, r2
    cf8e:	4620      	mov	r0, r4
    cf90:	461a      	mov	r2, r3
    cf92:	2300      	movs	r3, #0
    cf94:	602b      	str	r3, [r5, #0]
    cf96:	4664      	mov	r4, ip
    cf98:	f7fb fb1c 	bl	85d4 <_write>
    cf9c:	1c43      	adds	r3, r0, #1
    cf9e:	d000      	beq.n	cfa2 <_write_r+0x1e>
    cfa0:	bd38      	pop	{r3, r4, r5, pc}
    cfa2:	682b      	ldr	r3, [r5, #0]
    cfa4:	2b00      	cmp	r3, #0
    cfa6:	d0fb      	beq.n	cfa0 <_write_r+0x1c>
    cfa8:	6023      	str	r3, [r4, #0]
    cfaa:	bd38      	pop	{r3, r4, r5, pc}
    cfac:	1fffb880 	.word	0x1fffb880

0000cfb0 <__errno>:
    cfb0:	4b01      	ldr	r3, [pc, #4]	; (cfb8 <__errno+0x8>)
    cfb2:	6818      	ldr	r0, [r3, #0]
    cfb4:	4770      	bx	lr
    cfb6:	bf00      	nop
    cfb8:	1fff8f70 	.word	0x1fff8f70

0000cfbc <__libc_init_array>:
    cfbc:	b570      	push	{r4, r5, r6, lr}
    cfbe:	4e0d      	ldr	r6, [pc, #52]	; (cff4 <__libc_init_array+0x38>)
    cfc0:	4d0d      	ldr	r5, [pc, #52]	; (cff8 <__libc_init_array+0x3c>)
    cfc2:	1b76      	subs	r6, r6, r5
    cfc4:	10b6      	asrs	r6, r6, #2
    cfc6:	d006      	beq.n	cfd6 <__libc_init_array+0x1a>
    cfc8:	2400      	movs	r4, #0
    cfca:	f855 3b04 	ldr.w	r3, [r5], #4
    cfce:	3401      	adds	r4, #1
    cfd0:	4798      	blx	r3
    cfd2:	42a6      	cmp	r6, r4
    cfd4:	d1f9      	bne.n	cfca <__libc_init_array+0xe>
    cfd6:	4e09      	ldr	r6, [pc, #36]	; (cffc <__libc_init_array+0x40>)
    cfd8:	4d09      	ldr	r5, [pc, #36]	; (d000 <__libc_init_array+0x44>)
    cfda:	1b76      	subs	r6, r6, r5
    cfdc:	f007 faf4 	bl	145c8 <_init>
    cfe0:	10b6      	asrs	r6, r6, #2
    cfe2:	d006      	beq.n	cff2 <__libc_init_array+0x36>
    cfe4:	2400      	movs	r4, #0
    cfe6:	f855 3b04 	ldr.w	r3, [r5], #4
    cfea:	3401      	adds	r4, #1
    cfec:	4798      	blx	r3
    cfee:	42a6      	cmp	r6, r4
    cff0:	d1f9      	bne.n	cfe6 <__libc_init_array+0x2a>
    cff2:	bd70      	pop	{r4, r5, r6, pc}
    cff4:	000145d4 	.word	0x000145d4
    cff8:	000145d4 	.word	0x000145d4
    cffc:	000145e8 	.word	0x000145e8
    d000:	000145d4 	.word	0x000145d4

0000d004 <__retarget_lock_init_recursive>:
    d004:	4770      	bx	lr
    d006:	bf00      	nop

0000d008 <__retarget_lock_close_recursive>:
    d008:	4770      	bx	lr
    d00a:	bf00      	nop

0000d00c <__retarget_lock_acquire_recursive>:
    d00c:	4770      	bx	lr
    d00e:	bf00      	nop

0000d010 <__retarget_lock_release_recursive>:
    d010:	4770      	bx	lr
    d012:	bf00      	nop
    d014:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    d018:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    d01c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    d020:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    d024:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    d028:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    d02c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    d030:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    d034:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    d038:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    d03c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

0000d040 <strlen>:
    d040:	f890 f000 	pld	[r0]
    d044:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    d048:	f020 0107 	bic.w	r1, r0, #7
    d04c:	f06f 0c00 	mvn.w	ip, #0
    d050:	f010 0407 	ands.w	r4, r0, #7
    d054:	f891 f020 	pld	[r1, #32]
    d058:	f040 8049 	bne.w	d0ee <strlen+0xae>
    d05c:	f04f 0400 	mov.w	r4, #0
    d060:	f06f 0007 	mvn.w	r0, #7
    d064:	e9d1 2300 	ldrd	r2, r3, [r1]
    d068:	f891 f040 	pld	[r1, #64]	; 0x40
    d06c:	f100 0008 	add.w	r0, r0, #8
    d070:	fa82 f24c 	uadd8	r2, r2, ip
    d074:	faa4 f28c 	sel	r2, r4, ip
    d078:	fa83 f34c 	uadd8	r3, r3, ip
    d07c:	faa2 f38c 	sel	r3, r2, ip
    d080:	bb4b      	cbnz	r3, d0d6 <strlen+0x96>
    d082:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    d086:	fa82 f24c 	uadd8	r2, r2, ip
    d08a:	f100 0008 	add.w	r0, r0, #8
    d08e:	faa4 f28c 	sel	r2, r4, ip
    d092:	fa83 f34c 	uadd8	r3, r3, ip
    d096:	faa2 f38c 	sel	r3, r2, ip
    d09a:	b9e3      	cbnz	r3, d0d6 <strlen+0x96>
    d09c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    d0a0:	fa82 f24c 	uadd8	r2, r2, ip
    d0a4:	f100 0008 	add.w	r0, r0, #8
    d0a8:	faa4 f28c 	sel	r2, r4, ip
    d0ac:	fa83 f34c 	uadd8	r3, r3, ip
    d0b0:	faa2 f38c 	sel	r3, r2, ip
    d0b4:	b97b      	cbnz	r3, d0d6 <strlen+0x96>
    d0b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    d0ba:	f101 0120 	add.w	r1, r1, #32
    d0be:	fa82 f24c 	uadd8	r2, r2, ip
    d0c2:	f100 0008 	add.w	r0, r0, #8
    d0c6:	faa4 f28c 	sel	r2, r4, ip
    d0ca:	fa83 f34c 	uadd8	r3, r3, ip
    d0ce:	faa2 f38c 	sel	r3, r2, ip
    d0d2:	2b00      	cmp	r3, #0
    d0d4:	d0c6      	beq.n	d064 <strlen+0x24>
    d0d6:	2a00      	cmp	r2, #0
    d0d8:	bf04      	itt	eq
    d0da:	3004      	addeq	r0, #4
    d0dc:	461a      	moveq	r2, r3
    d0de:	ba12      	rev	r2, r2
    d0e0:	fab2 f282 	clz	r2, r2
    d0e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    d0e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    d0ec:	4770      	bx	lr
    d0ee:	e9d1 2300 	ldrd	r2, r3, [r1]
    d0f2:	f004 0503 	and.w	r5, r4, #3
    d0f6:	f1c4 0000 	rsb	r0, r4, #0
    d0fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    d0fe:	f014 0f04 	tst.w	r4, #4
    d102:	f891 f040 	pld	[r1, #64]	; 0x40
    d106:	fa0c f505 	lsl.w	r5, ip, r5
    d10a:	ea62 0205 	orn	r2, r2, r5
    d10e:	bf1c      	itt	ne
    d110:	ea63 0305 	ornne	r3, r3, r5
    d114:	4662      	movne	r2, ip
    d116:	f04f 0400 	mov.w	r4, #0
    d11a:	e7a9      	b.n	d070 <strlen+0x30>

0000d11c <register_fini>:
    d11c:	4b02      	ldr	r3, [pc, #8]	; (d128 <register_fini+0xc>)
    d11e:	b113      	cbz	r3, d126 <register_fini+0xa>
    d120:	4802      	ldr	r0, [pc, #8]	; (d12c <register_fini+0x10>)
    d122:	f000 b805 	b.w	d130 <atexit>
    d126:	4770      	bx	lr
    d128:	00000000 	.word	0x00000000
    d12c:	0000f975 	.word	0x0000f975

0000d130 <atexit>:
    d130:	2300      	movs	r3, #0
    d132:	4601      	mov	r1, r0
    d134:	461a      	mov	r2, r3
    d136:	4618      	mov	r0, r3
    d138:	f002 bcba 	b.w	fab0 <__register_exitproc>

0000d13c <_malloc_trim_r>:
    d13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d13e:	4f24      	ldr	r7, [pc, #144]	; (d1d0 <_malloc_trim_r+0x94>)
    d140:	460c      	mov	r4, r1
    d142:	4606      	mov	r6, r0
    d144:	f7ff fa86 	bl	c654 <__malloc_lock>
    d148:	68bb      	ldr	r3, [r7, #8]
    d14a:	685d      	ldr	r5, [r3, #4]
    d14c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    d150:	310f      	adds	r1, #15
    d152:	f025 0503 	bic.w	r5, r5, #3
    d156:	194b      	adds	r3, r1, r5
    d158:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    d15c:	f023 030f 	bic.w	r3, r3, #15
    d160:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    d164:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    d168:	db07      	blt.n	d17a <_malloc_trim_r+0x3e>
    d16a:	2100      	movs	r1, #0
    d16c:	4630      	mov	r0, r6
    d16e:	f7ff fef7 	bl	cf60 <_sbrk_r>
    d172:	68bb      	ldr	r3, [r7, #8]
    d174:	442b      	add	r3, r5
    d176:	4298      	cmp	r0, r3
    d178:	d004      	beq.n	d184 <_malloc_trim_r+0x48>
    d17a:	4630      	mov	r0, r6
    d17c:	f7ff fa70 	bl	c660 <__malloc_unlock>
    d180:	2000      	movs	r0, #0
    d182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d184:	4261      	negs	r1, r4
    d186:	4630      	mov	r0, r6
    d188:	f7ff feea 	bl	cf60 <_sbrk_r>
    d18c:	3001      	adds	r0, #1
    d18e:	d00d      	beq.n	d1ac <_malloc_trim_r+0x70>
    d190:	4a10      	ldr	r2, [pc, #64]	; (d1d4 <_malloc_trim_r+0x98>)
    d192:	68bb      	ldr	r3, [r7, #8]
    d194:	1b2d      	subs	r5, r5, r4
    d196:	f045 0501 	orr.w	r5, r5, #1
    d19a:	605d      	str	r5, [r3, #4]
    d19c:	6813      	ldr	r3, [r2, #0]
    d19e:	4630      	mov	r0, r6
    d1a0:	1b1b      	subs	r3, r3, r4
    d1a2:	6013      	str	r3, [r2, #0]
    d1a4:	f7ff fa5c 	bl	c660 <__malloc_unlock>
    d1a8:	2001      	movs	r0, #1
    d1aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d1ac:	2100      	movs	r1, #0
    d1ae:	4630      	mov	r0, r6
    d1b0:	f7ff fed6 	bl	cf60 <_sbrk_r>
    d1b4:	68ba      	ldr	r2, [r7, #8]
    d1b6:	1a83      	subs	r3, r0, r2
    d1b8:	2b0f      	cmp	r3, #15
    d1ba:	ddde      	ble.n	d17a <_malloc_trim_r+0x3e>
    d1bc:	f043 0301 	orr.w	r3, r3, #1
    d1c0:	6053      	str	r3, [r2, #4]
    d1c2:	4b05      	ldr	r3, [pc, #20]	; (d1d8 <_malloc_trim_r+0x9c>)
    d1c4:	4903      	ldr	r1, [pc, #12]	; (d1d4 <_malloc_trim_r+0x98>)
    d1c6:	681b      	ldr	r3, [r3, #0]
    d1c8:	1ac0      	subs	r0, r0, r3
    d1ca:	6008      	str	r0, [r1, #0]
    d1cc:	e7d5      	b.n	d17a <_malloc_trim_r+0x3e>
    d1ce:	bf00      	nop
    d1d0:	1fff88c8 	.word	0x1fff88c8
    d1d4:	1fffb710 	.word	0x1fffb710
    d1d8:	1fff8cd0 	.word	0x1fff8cd0

0000d1dc <_free_r>:
    d1dc:	2900      	cmp	r1, #0
    d1de:	d061      	beq.n	d2a4 <_free_r+0xc8>
    d1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d1e2:	460c      	mov	r4, r1
    d1e4:	4606      	mov	r6, r0
    d1e6:	f7ff fa35 	bl	c654 <__malloc_lock>
    d1ea:	f854 2c04 	ldr.w	r2, [r4, #-4]
    d1ee:	4f7b      	ldr	r7, [pc, #492]	; (d3dc <_free_r+0x200>)
    d1f0:	f1a4 0508 	sub.w	r5, r4, #8
    d1f4:	f022 0101 	bic.w	r1, r2, #1
    d1f8:	eb05 0c01 	add.w	ip, r5, r1
    d1fc:	68b8      	ldr	r0, [r7, #8]
    d1fe:	f8dc 3004 	ldr.w	r3, [ip, #4]
    d202:	4560      	cmp	r0, ip
    d204:	f023 0303 	bic.w	r3, r3, #3
    d208:	f000 808b 	beq.w	d322 <_free_r+0x146>
    d20c:	07d2      	lsls	r2, r2, #31
    d20e:	f8cc 3004 	str.w	r3, [ip, #4]
    d212:	d432      	bmi.n	d27a <_free_r+0x9e>
    d214:	f854 2c08 	ldr.w	r2, [r4, #-8]
    d218:	1aad      	subs	r5, r5, r2
    d21a:	4411      	add	r1, r2
    d21c:	68aa      	ldr	r2, [r5, #8]
    d21e:	f107 0008 	add.w	r0, r7, #8
    d222:	4282      	cmp	r2, r0
    d224:	d06a      	beq.n	d2fc <_free_r+0x120>
    d226:	eb0c 0403 	add.w	r4, ip, r3
    d22a:	f8d4 e004 	ldr.w	lr, [r4, #4]
    d22e:	68ec      	ldr	r4, [r5, #12]
    d230:	60d4      	str	r4, [r2, #12]
    d232:	f01e 0f01 	tst.w	lr, #1
    d236:	60a2      	str	r2, [r4, #8]
    d238:	f000 8097 	beq.w	d36a <_free_r+0x18e>
    d23c:	f041 0301 	orr.w	r3, r1, #1
    d240:	606b      	str	r3, [r5, #4]
    d242:	f8cc 1000 	str.w	r1, [ip]
    d246:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    d24a:	d235      	bcs.n	d2b8 <_free_r+0xdc>
    d24c:	6878      	ldr	r0, [r7, #4]
    d24e:	08cb      	lsrs	r3, r1, #3
    d250:	2201      	movs	r2, #1
    d252:	0949      	lsrs	r1, r1, #5
    d254:	3301      	adds	r3, #1
    d256:	408a      	lsls	r2, r1
    d258:	4302      	orrs	r2, r0
    d25a:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    d25e:	607a      	str	r2, [r7, #4]
    d260:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    d264:	3a08      	subs	r2, #8
    d266:	e9c5 1202 	strd	r1, r2, [r5, #8]
    d26a:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    d26e:	60cd      	str	r5, [r1, #12]
    d270:	4630      	mov	r0, r6
    d272:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d276:	f7ff b9f3 	b.w	c660 <__malloc_unlock>
    d27a:	eb0c 0203 	add.w	r2, ip, r3
    d27e:	6852      	ldr	r2, [r2, #4]
    d280:	07d0      	lsls	r0, r2, #31
    d282:	d410      	bmi.n	d2a6 <_free_r+0xca>
    d284:	4419      	add	r1, r3
    d286:	f107 0008 	add.w	r0, r7, #8
    d28a:	f8dc 3008 	ldr.w	r3, [ip, #8]
    d28e:	4283      	cmp	r3, r0
    d290:	d073      	beq.n	d37a <_free_r+0x19e>
    d292:	f8dc 200c 	ldr.w	r2, [ip, #12]
    d296:	60da      	str	r2, [r3, #12]
    d298:	6093      	str	r3, [r2, #8]
    d29a:	f041 0301 	orr.w	r3, r1, #1
    d29e:	606b      	str	r3, [r5, #4]
    d2a0:	5069      	str	r1, [r5, r1]
    d2a2:	e7d0      	b.n	d246 <_free_r+0x6a>
    d2a4:	4770      	bx	lr
    d2a6:	f041 0301 	orr.w	r3, r1, #1
    d2aa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    d2ae:	f844 3c04 	str.w	r3, [r4, #-4]
    d2b2:	f8cc 1000 	str.w	r1, [ip]
    d2b6:	d3c9      	bcc.n	d24c <_free_r+0x70>
    d2b8:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    d2bc:	ea4f 2351 	mov.w	r3, r1, lsr #9
    d2c0:	d248      	bcs.n	d354 <_free_r+0x178>
    d2c2:	098b      	lsrs	r3, r1, #6
    d2c4:	f103 0039 	add.w	r0, r3, #57	; 0x39
    d2c8:	f103 0238 	add.w	r2, r3, #56	; 0x38
    d2cc:	00c3      	lsls	r3, r0, #3
    d2ce:	18f8      	adds	r0, r7, r3
    d2d0:	58fb      	ldr	r3, [r7, r3]
    d2d2:	3808      	subs	r0, #8
    d2d4:	4298      	cmp	r0, r3
    d2d6:	d059      	beq.n	d38c <_free_r+0x1b0>
    d2d8:	685a      	ldr	r2, [r3, #4]
    d2da:	f022 0203 	bic.w	r2, r2, #3
    d2de:	428a      	cmp	r2, r1
    d2e0:	d902      	bls.n	d2e8 <_free_r+0x10c>
    d2e2:	689b      	ldr	r3, [r3, #8]
    d2e4:	4298      	cmp	r0, r3
    d2e6:	d1f7      	bne.n	d2d8 <_free_r+0xfc>
    d2e8:	68d8      	ldr	r0, [r3, #12]
    d2ea:	e9c5 3002 	strd	r3, r0, [r5, #8]
    d2ee:	6085      	str	r5, [r0, #8]
    d2f0:	60dd      	str	r5, [r3, #12]
    d2f2:	4630      	mov	r0, r6
    d2f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d2f8:	f7ff b9b2 	b.w	c660 <__malloc_unlock>
    d2fc:	eb0c 0203 	add.w	r2, ip, r3
    d300:	6852      	ldr	r2, [r2, #4]
    d302:	07d2      	lsls	r2, r2, #31
    d304:	d463      	bmi.n	d3ce <_free_r+0x1f2>
    d306:	440b      	add	r3, r1
    d308:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    d30c:	60ca      	str	r2, [r1, #12]
    d30e:	6091      	str	r1, [r2, #8]
    d310:	f043 0201 	orr.w	r2, r3, #1
    d314:	606a      	str	r2, [r5, #4]
    d316:	4630      	mov	r0, r6
    d318:	50eb      	str	r3, [r5, r3]
    d31a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d31e:	f7ff b99f 	b.w	c660 <__malloc_unlock>
    d322:	440b      	add	r3, r1
    d324:	07d1      	lsls	r1, r2, #31
    d326:	d407      	bmi.n	d338 <_free_r+0x15c>
    d328:	f854 2c08 	ldr.w	r2, [r4, #-8]
    d32c:	1aad      	subs	r5, r5, r2
    d32e:	4413      	add	r3, r2
    d330:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    d334:	60ca      	str	r2, [r1, #12]
    d336:	6091      	str	r1, [r2, #8]
    d338:	f043 0201 	orr.w	r2, r3, #1
    d33c:	606a      	str	r2, [r5, #4]
    d33e:	4a28      	ldr	r2, [pc, #160]	; (d3e0 <_free_r+0x204>)
    d340:	60bd      	str	r5, [r7, #8]
    d342:	6812      	ldr	r2, [r2, #0]
    d344:	429a      	cmp	r2, r3
    d346:	d893      	bhi.n	d270 <_free_r+0x94>
    d348:	4b26      	ldr	r3, [pc, #152]	; (d3e4 <_free_r+0x208>)
    d34a:	4630      	mov	r0, r6
    d34c:	6819      	ldr	r1, [r3, #0]
    d34e:	f7ff fef5 	bl	d13c <_malloc_trim_r>
    d352:	e78d      	b.n	d270 <_free_r+0x94>
    d354:	2b14      	cmp	r3, #20
    d356:	d90a      	bls.n	d36e <_free_r+0x192>
    d358:	2b54      	cmp	r3, #84	; 0x54
    d35a:	d81f      	bhi.n	d39c <_free_r+0x1c0>
    d35c:	0b0b      	lsrs	r3, r1, #12
    d35e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    d362:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    d366:	00c3      	lsls	r3, r0, #3
    d368:	e7b1      	b.n	d2ce <_free_r+0xf2>
    d36a:	4419      	add	r1, r3
    d36c:	e78d      	b.n	d28a <_free_r+0xae>
    d36e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    d372:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    d376:	00c3      	lsls	r3, r0, #3
    d378:	e7a9      	b.n	d2ce <_free_r+0xf2>
    d37a:	f041 0301 	orr.w	r3, r1, #1
    d37e:	e9c7 5504 	strd	r5, r5, [r7, #16]
    d382:	e9c5 0002 	strd	r0, r0, [r5, #8]
    d386:	606b      	str	r3, [r5, #4]
    d388:	5069      	str	r1, [r5, r1]
    d38a:	e771      	b.n	d270 <_free_r+0x94>
    d38c:	6879      	ldr	r1, [r7, #4]
    d38e:	1092      	asrs	r2, r2, #2
    d390:	2401      	movs	r4, #1
    d392:	fa04 f202 	lsl.w	r2, r4, r2
    d396:	430a      	orrs	r2, r1
    d398:	607a      	str	r2, [r7, #4]
    d39a:	e7a6      	b.n	d2ea <_free_r+0x10e>
    d39c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    d3a0:	d806      	bhi.n	d3b0 <_free_r+0x1d4>
    d3a2:	0bcb      	lsrs	r3, r1, #15
    d3a4:	f103 0078 	add.w	r0, r3, #120	; 0x78
    d3a8:	f103 0277 	add.w	r2, r3, #119	; 0x77
    d3ac:	00c3      	lsls	r3, r0, #3
    d3ae:	e78e      	b.n	d2ce <_free_r+0xf2>
    d3b0:	f240 5254 	movw	r2, #1364	; 0x554
    d3b4:	4293      	cmp	r3, r2
    d3b6:	d806      	bhi.n	d3c6 <_free_r+0x1ea>
    d3b8:	0c8b      	lsrs	r3, r1, #18
    d3ba:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    d3be:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    d3c2:	00c3      	lsls	r3, r0, #3
    d3c4:	e783      	b.n	d2ce <_free_r+0xf2>
    d3c6:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    d3ca:	227e      	movs	r2, #126	; 0x7e
    d3cc:	e77f      	b.n	d2ce <_free_r+0xf2>
    d3ce:	f041 0301 	orr.w	r3, r1, #1
    d3d2:	606b      	str	r3, [r5, #4]
    d3d4:	f8cc 1000 	str.w	r1, [ip]
    d3d8:	e74a      	b.n	d270 <_free_r+0x94>
    d3da:	bf00      	nop
    d3dc:	1fff88c8 	.word	0x1fff88c8
    d3e0:	1fff8cd4 	.word	0x1fff8cd4
    d3e4:	1fffb740 	.word	0x1fffb740

0000d3e8 <__ascii_mbtowc>:
    d3e8:	b082      	sub	sp, #8
    d3ea:	b149      	cbz	r1, d400 <__ascii_mbtowc+0x18>
    d3ec:	b15a      	cbz	r2, d406 <__ascii_mbtowc+0x1e>
    d3ee:	b16b      	cbz	r3, d40c <__ascii_mbtowc+0x24>
    d3f0:	7813      	ldrb	r3, [r2, #0]
    d3f2:	600b      	str	r3, [r1, #0]
    d3f4:	7812      	ldrb	r2, [r2, #0]
    d3f6:	1e10      	subs	r0, r2, #0
    d3f8:	bf18      	it	ne
    d3fa:	2001      	movne	r0, #1
    d3fc:	b002      	add	sp, #8
    d3fe:	4770      	bx	lr
    d400:	a901      	add	r1, sp, #4
    d402:	2a00      	cmp	r2, #0
    d404:	d1f3      	bne.n	d3ee <__ascii_mbtowc+0x6>
    d406:	4610      	mov	r0, r2
    d408:	b002      	add	sp, #8
    d40a:	4770      	bx	lr
    d40c:	f06f 0001 	mvn.w	r0, #1
    d410:	e7f4      	b.n	d3fc <__ascii_mbtowc+0x14>
    d412:	bf00      	nop

0000d414 <_Balloc>:
    d414:	6c43      	ldr	r3, [r0, #68]	; 0x44
    d416:	b570      	push	{r4, r5, r6, lr}
    d418:	4605      	mov	r5, r0
    d41a:	460c      	mov	r4, r1
    d41c:	b14b      	cbz	r3, d432 <_Balloc+0x1e>
    d41e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    d422:	b180      	cbz	r0, d446 <_Balloc+0x32>
    d424:	6802      	ldr	r2, [r0, #0]
    d426:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    d42a:	2300      	movs	r3, #0
    d42c:	e9c0 3303 	strd	r3, r3, [r0, #12]
    d430:	bd70      	pop	{r4, r5, r6, pc}
    d432:	2221      	movs	r2, #33	; 0x21
    d434:	2104      	movs	r1, #4
    d436:	f002 fb9f 	bl	fb78 <_calloc_r>
    d43a:	4603      	mov	r3, r0
    d43c:	6468      	str	r0, [r5, #68]	; 0x44
    d43e:	2800      	cmp	r0, #0
    d440:	d1ed      	bne.n	d41e <_Balloc+0xa>
    d442:	2000      	movs	r0, #0
    d444:	bd70      	pop	{r4, r5, r6, pc}
    d446:	2101      	movs	r1, #1
    d448:	fa01 f604 	lsl.w	r6, r1, r4
    d44c:	1d72      	adds	r2, r6, #5
    d44e:	0092      	lsls	r2, r2, #2
    d450:	4628      	mov	r0, r5
    d452:	f002 fb91 	bl	fb78 <_calloc_r>
    d456:	2800      	cmp	r0, #0
    d458:	d0f3      	beq.n	d442 <_Balloc+0x2e>
    d45a:	e9c0 4601 	strd	r4, r6, [r0, #4]
    d45e:	e7e4      	b.n	d42a <_Balloc+0x16>

0000d460 <_Bfree>:
    d460:	b131      	cbz	r1, d470 <_Bfree+0x10>
    d462:	6c43      	ldr	r3, [r0, #68]	; 0x44
    d464:	684a      	ldr	r2, [r1, #4]
    d466:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    d46a:	6008      	str	r0, [r1, #0]
    d46c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    d470:	4770      	bx	lr
    d472:	bf00      	nop

0000d474 <__multadd>:
    d474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d478:	690d      	ldr	r5, [r1, #16]
    d47a:	4607      	mov	r7, r0
    d47c:	460e      	mov	r6, r1
    d47e:	461c      	mov	r4, r3
    d480:	f101 0e14 	add.w	lr, r1, #20
    d484:	2000      	movs	r0, #0
    d486:	f8de 1000 	ldr.w	r1, [lr]
    d48a:	b28b      	uxth	r3, r1
    d48c:	fb02 4303 	mla	r3, r2, r3, r4
    d490:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    d494:	0c09      	lsrs	r1, r1, #16
    d496:	fb02 cc01 	mla	ip, r2, r1, ip
    d49a:	3001      	adds	r0, #1
    d49c:	b29b      	uxth	r3, r3
    d49e:	eb03 430c 	add.w	r3, r3, ip, lsl #16
    d4a2:	4285      	cmp	r5, r0
    d4a4:	f84e 3b04 	str.w	r3, [lr], #4
    d4a8:	ea4f 441c 	mov.w	r4, ip, lsr #16
    d4ac:	dceb      	bgt.n	d486 <__multadd+0x12>
    d4ae:	b13c      	cbz	r4, d4c0 <__multadd+0x4c>
    d4b0:	68b3      	ldr	r3, [r6, #8]
    d4b2:	42ab      	cmp	r3, r5
    d4b4:	dd07      	ble.n	d4c6 <__multadd+0x52>
    d4b6:	eb06 0385 	add.w	r3, r6, r5, lsl #2
    d4ba:	3501      	adds	r5, #1
    d4bc:	615c      	str	r4, [r3, #20]
    d4be:	6135      	str	r5, [r6, #16]
    d4c0:	4630      	mov	r0, r6
    d4c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d4c6:	6871      	ldr	r1, [r6, #4]
    d4c8:	4638      	mov	r0, r7
    d4ca:	3101      	adds	r1, #1
    d4cc:	f7ff ffa2 	bl	d414 <_Balloc>
    d4d0:	4680      	mov	r8, r0
    d4d2:	b1a8      	cbz	r0, d500 <__multadd+0x8c>
    d4d4:	6932      	ldr	r2, [r6, #16]
    d4d6:	3202      	adds	r2, #2
    d4d8:	f106 010c 	add.w	r1, r6, #12
    d4dc:	0092      	lsls	r2, r2, #2
    d4de:	300c      	adds	r0, #12
    d4e0:	f7fb fb26 	bl	8b30 <memcpy>
    d4e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d4e6:	6872      	ldr	r2, [r6, #4]
    d4e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    d4ec:	6031      	str	r1, [r6, #0]
    d4ee:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    d4f2:	4646      	mov	r6, r8
    d4f4:	eb06 0385 	add.w	r3, r6, r5, lsl #2
    d4f8:	3501      	adds	r5, #1
    d4fa:	615c      	str	r4, [r3, #20]
    d4fc:	6135      	str	r5, [r6, #16]
    d4fe:	e7df      	b.n	d4c0 <__multadd+0x4c>
    d500:	4b02      	ldr	r3, [pc, #8]	; (d50c <__multadd+0x98>)
    d502:	4803      	ldr	r0, [pc, #12]	; (d510 <__multadd+0x9c>)
    d504:	4642      	mov	r2, r8
    d506:	21ba      	movs	r1, #186	; 0xba
    d508:	f002 fb16 	bl	fb38 <__assert_func>
    d50c:	00014338 	.word	0x00014338
    d510:	0001434c 	.word	0x0001434c

0000d514 <__hi0bits>:
    d514:	0c02      	lsrs	r2, r0, #16
    d516:	0412      	lsls	r2, r2, #16
    d518:	4603      	mov	r3, r0
    d51a:	b9ca      	cbnz	r2, d550 <__hi0bits+0x3c>
    d51c:	0403      	lsls	r3, r0, #16
    d51e:	2010      	movs	r0, #16
    d520:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
    d524:	bf04      	itt	eq
    d526:	021b      	lsleq	r3, r3, #8
    d528:	3008      	addeq	r0, #8
    d52a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
    d52e:	bf04      	itt	eq
    d530:	011b      	lsleq	r3, r3, #4
    d532:	3004      	addeq	r0, #4
    d534:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
    d538:	bf04      	itt	eq
    d53a:	009b      	lsleq	r3, r3, #2
    d53c:	3002      	addeq	r0, #2
    d53e:	2b00      	cmp	r3, #0
    d540:	db05      	blt.n	d54e <__hi0bits+0x3a>
    d542:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    d546:	f100 0001 	add.w	r0, r0, #1
    d54a:	bf08      	it	eq
    d54c:	2020      	moveq	r0, #32
    d54e:	4770      	bx	lr
    d550:	2000      	movs	r0, #0
    d552:	e7e5      	b.n	d520 <__hi0bits+0xc>

0000d554 <__lo0bits>:
    d554:	6803      	ldr	r3, [r0, #0]
    d556:	f013 0207 	ands.w	r2, r3, #7
    d55a:	4601      	mov	r1, r0
    d55c:	d007      	beq.n	d56e <__lo0bits+0x1a>
    d55e:	07da      	lsls	r2, r3, #31
    d560:	d41f      	bmi.n	d5a2 <__lo0bits+0x4e>
    d562:	0798      	lsls	r0, r3, #30
    d564:	d521      	bpl.n	d5aa <__lo0bits+0x56>
    d566:	085b      	lsrs	r3, r3, #1
    d568:	600b      	str	r3, [r1, #0]
    d56a:	2001      	movs	r0, #1
    d56c:	4770      	bx	lr
    d56e:	b298      	uxth	r0, r3
    d570:	b1a0      	cbz	r0, d59c <__lo0bits+0x48>
    d572:	4610      	mov	r0, r2
    d574:	b2da      	uxtb	r2, r3
    d576:	b90a      	cbnz	r2, d57c <__lo0bits+0x28>
    d578:	3008      	adds	r0, #8
    d57a:	0a1b      	lsrs	r3, r3, #8
    d57c:	071a      	lsls	r2, r3, #28
    d57e:	bf04      	itt	eq
    d580:	091b      	lsreq	r3, r3, #4
    d582:	3004      	addeq	r0, #4
    d584:	079a      	lsls	r2, r3, #30
    d586:	bf04      	itt	eq
    d588:	089b      	lsreq	r3, r3, #2
    d58a:	3002      	addeq	r0, #2
    d58c:	07da      	lsls	r2, r3, #31
    d58e:	d403      	bmi.n	d598 <__lo0bits+0x44>
    d590:	085b      	lsrs	r3, r3, #1
    d592:	f100 0001 	add.w	r0, r0, #1
    d596:	d006      	beq.n	d5a6 <__lo0bits+0x52>
    d598:	600b      	str	r3, [r1, #0]
    d59a:	4770      	bx	lr
    d59c:	0c1b      	lsrs	r3, r3, #16
    d59e:	2010      	movs	r0, #16
    d5a0:	e7e8      	b.n	d574 <__lo0bits+0x20>
    d5a2:	2000      	movs	r0, #0
    d5a4:	4770      	bx	lr
    d5a6:	2020      	movs	r0, #32
    d5a8:	4770      	bx	lr
    d5aa:	089b      	lsrs	r3, r3, #2
    d5ac:	600b      	str	r3, [r1, #0]
    d5ae:	2002      	movs	r0, #2
    d5b0:	4770      	bx	lr
    d5b2:	bf00      	nop

0000d5b4 <__i2b>:
    d5b4:	b538      	push	{r3, r4, r5, lr}
    d5b6:	6c43      	ldr	r3, [r0, #68]	; 0x44
    d5b8:	4604      	mov	r4, r0
    d5ba:	460d      	mov	r5, r1
    d5bc:	b14b      	cbz	r3, d5d2 <__i2b+0x1e>
    d5be:	6858      	ldr	r0, [r3, #4]
    d5c0:	b1b0      	cbz	r0, d5f0 <__i2b+0x3c>
    d5c2:	6802      	ldr	r2, [r0, #0]
    d5c4:	605a      	str	r2, [r3, #4]
    d5c6:	2200      	movs	r2, #0
    d5c8:	2301      	movs	r3, #1
    d5ca:	e9c0 3504 	strd	r3, r5, [r0, #16]
    d5ce:	60c2      	str	r2, [r0, #12]
    d5d0:	bd38      	pop	{r3, r4, r5, pc}
    d5d2:	2221      	movs	r2, #33	; 0x21
    d5d4:	2104      	movs	r1, #4
    d5d6:	f002 facf 	bl	fb78 <_calloc_r>
    d5da:	4603      	mov	r3, r0
    d5dc:	6460      	str	r0, [r4, #68]	; 0x44
    d5de:	2800      	cmp	r0, #0
    d5e0:	d1ed      	bne.n	d5be <__i2b+0xa>
    d5e2:	4b09      	ldr	r3, [pc, #36]	; (d608 <__i2b+0x54>)
    d5e4:	4809      	ldr	r0, [pc, #36]	; (d60c <__i2b+0x58>)
    d5e6:	2200      	movs	r2, #0
    d5e8:	f240 1145 	movw	r1, #325	; 0x145
    d5ec:	f002 faa4 	bl	fb38 <__assert_func>
    d5f0:	221c      	movs	r2, #28
    d5f2:	2101      	movs	r1, #1
    d5f4:	4620      	mov	r0, r4
    d5f6:	f002 fabf 	bl	fb78 <_calloc_r>
    d5fa:	2800      	cmp	r0, #0
    d5fc:	d0f1      	beq.n	d5e2 <__i2b+0x2e>
    d5fe:	2201      	movs	r2, #1
    d600:	2302      	movs	r3, #2
    d602:	e9c0 2301 	strd	r2, r3, [r0, #4]
    d606:	e7de      	b.n	d5c6 <__i2b+0x12>
    d608:	00014338 	.word	0x00014338
    d60c:	0001434c 	.word	0x0001434c

0000d610 <__multiply>:
    d610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d614:	690e      	ldr	r6, [r1, #16]
    d616:	6915      	ldr	r5, [r2, #16]
    d618:	42ae      	cmp	r6, r5
    d61a:	b085      	sub	sp, #20
    d61c:	4688      	mov	r8, r1
    d61e:	4614      	mov	r4, r2
    d620:	db05      	blt.n	d62e <__multiply+0x1e>
    d622:	462a      	mov	r2, r5
    d624:	4623      	mov	r3, r4
    d626:	4635      	mov	r5, r6
    d628:	460c      	mov	r4, r1
    d62a:	4616      	mov	r6, r2
    d62c:	4698      	mov	r8, r3
    d62e:	68a3      	ldr	r3, [r4, #8]
    d630:	6861      	ldr	r1, [r4, #4]
    d632:	19af      	adds	r7, r5, r6
    d634:	42bb      	cmp	r3, r7
    d636:	bfb8      	it	lt
    d638:	3101      	addlt	r1, #1
    d63a:	f7ff feeb 	bl	d414 <_Balloc>
    d63e:	9001      	str	r0, [sp, #4]
    d640:	2800      	cmp	r0, #0
    d642:	f000 8087 	beq.w	d754 <__multiply+0x144>
    d646:	9b01      	ldr	r3, [sp, #4]
    d648:	f103 0914 	add.w	r9, r3, #20
    d64c:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    d650:	45d1      	cmp	r9, sl
    d652:	d205      	bcs.n	d660 <__multiply+0x50>
    d654:	464b      	mov	r3, r9
    d656:	2200      	movs	r2, #0
    d658:	f843 2b04 	str.w	r2, [r3], #4
    d65c:	459a      	cmp	sl, r3
    d65e:	d8fb      	bhi.n	d658 <__multiply+0x48>
    d660:	f108 0814 	add.w	r8, r8, #20
    d664:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    d668:	f104 0314 	add.w	r3, r4, #20
    d66c:	45d8      	cmp	r8, fp
    d66e:	461a      	mov	r2, r3
    d670:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    d674:	d25f      	bcs.n	d736 <__multiply+0x126>
    d676:	1b2b      	subs	r3, r5, r4
    d678:	3b15      	subs	r3, #21
    d67a:	f023 0303 	bic.w	r3, r3, #3
    d67e:	3304      	adds	r3, #4
    d680:	3415      	adds	r4, #21
    d682:	42a5      	cmp	r5, r4
    d684:	bf38      	it	cc
    d686:	2304      	movcc	r3, #4
    d688:	e9cd a702 	strd	sl, r7, [sp, #8]
    d68c:	46ac      	mov	ip, r5
    d68e:	461f      	mov	r7, r3
    d690:	4692      	mov	sl, r2
    d692:	e005      	b.n	d6a0 <__multiply+0x90>
    d694:	0c09      	lsrs	r1, r1, #16
    d696:	d129      	bne.n	d6ec <__multiply+0xdc>
    d698:	45c3      	cmp	fp, r8
    d69a:	f109 0904 	add.w	r9, r9, #4
    d69e:	d948      	bls.n	d732 <__multiply+0x122>
    d6a0:	f858 1b04 	ldr.w	r1, [r8], #4
    d6a4:	b28d      	uxth	r5, r1
    d6a6:	2d00      	cmp	r5, #0
    d6a8:	d0f4      	beq.n	d694 <__multiply+0x84>
    d6aa:	4656      	mov	r6, sl
    d6ac:	464c      	mov	r4, r9
    d6ae:	2300      	movs	r3, #0
    d6b0:	f856 1b04 	ldr.w	r1, [r6], #4
    d6b4:	6822      	ldr	r2, [r4, #0]
    d6b6:	fa1f fe81 	uxth.w	lr, r1
    d6ba:	b290      	uxth	r0, r2
    d6bc:	0c09      	lsrs	r1, r1, #16
    d6be:	fb05 000e 	mla	r0, r5, lr, r0
    d6c2:	0c12      	lsrs	r2, r2, #16
    d6c4:	4403      	add	r3, r0
    d6c6:	fb05 2201 	mla	r2, r5, r1, r2
    d6ca:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    d6ce:	b29b      	uxth	r3, r3
    d6d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    d6d4:	45b4      	cmp	ip, r6
    d6d6:	f844 3b04 	str.w	r3, [r4], #4
    d6da:	ea4f 4312 	mov.w	r3, r2, lsr #16
    d6de:	d8e7      	bhi.n	d6b0 <__multiply+0xa0>
    d6e0:	f849 3007 	str.w	r3, [r9, r7]
    d6e4:	f858 1c04 	ldr.w	r1, [r8, #-4]
    d6e8:	0c09      	lsrs	r1, r1, #16
    d6ea:	d0d5      	beq.n	d698 <__multiply+0x88>
    d6ec:	f8d9 3000 	ldr.w	r3, [r9]
    d6f0:	4650      	mov	r0, sl
    d6f2:	461a      	mov	r2, r3
    d6f4:	464c      	mov	r4, r9
    d6f6:	2600      	movs	r6, #0
    d6f8:	8805      	ldrh	r5, [r0, #0]
    d6fa:	0c12      	lsrs	r2, r2, #16
    d6fc:	fb01 2205 	mla	r2, r1, r5, r2
    d700:	4416      	add	r6, r2
    d702:	b29b      	uxth	r3, r3
    d704:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    d708:	f844 3b04 	str.w	r3, [r4], #4
    d70c:	f850 5b04 	ldr.w	r5, [r0], #4
    d710:	6822      	ldr	r2, [r4, #0]
    d712:	0c2d      	lsrs	r5, r5, #16
    d714:	b293      	uxth	r3, r2
    d716:	fb01 3305 	mla	r3, r1, r5, r3
    d71a:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    d71e:	4584      	cmp	ip, r0
    d720:	ea4f 4613 	mov.w	r6, r3, lsr #16
    d724:	d8e8      	bhi.n	d6f8 <__multiply+0xe8>
    d726:	45c3      	cmp	fp, r8
    d728:	f849 3007 	str.w	r3, [r9, r7]
    d72c:	f109 0904 	add.w	r9, r9, #4
    d730:	d8b6      	bhi.n	d6a0 <__multiply+0x90>
    d732:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    d736:	2f00      	cmp	r7, #0
    d738:	dc02      	bgt.n	d740 <__multiply+0x130>
    d73a:	e005      	b.n	d748 <__multiply+0x138>
    d73c:	3f01      	subs	r7, #1
    d73e:	d003      	beq.n	d748 <__multiply+0x138>
    d740:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    d744:	2b00      	cmp	r3, #0
    d746:	d0f9      	beq.n	d73c <__multiply+0x12c>
    d748:	9b01      	ldr	r3, [sp, #4]
    d74a:	4618      	mov	r0, r3
    d74c:	611f      	str	r7, [r3, #16]
    d74e:	b005      	add	sp, #20
    d750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d754:	4b03      	ldr	r3, [pc, #12]	; (d764 <__multiply+0x154>)
    d756:	4804      	ldr	r0, [pc, #16]	; (d768 <__multiply+0x158>)
    d758:	9a01      	ldr	r2, [sp, #4]
    d75a:	f44f 71b1 	mov.w	r1, #354	; 0x162
    d75e:	f002 f9eb 	bl	fb38 <__assert_func>
    d762:	bf00      	nop
    d764:	00014338 	.word	0x00014338
    d768:	0001434c 	.word	0x0001434c

0000d76c <__pow5mult>:
    d76c:	f012 0303 	ands.w	r3, r2, #3
    d770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d774:	4614      	mov	r4, r2
    d776:	4606      	mov	r6, r0
    d778:	d132      	bne.n	d7e0 <__pow5mult+0x74>
    d77a:	460d      	mov	r5, r1
    d77c:	10a4      	asrs	r4, r4, #2
    d77e:	d020      	beq.n	d7c2 <__pow5mult+0x56>
    d780:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    d784:	f1b8 0f00 	cmp.w	r8, #0
    d788:	d033      	beq.n	d7f2 <__pow5mult+0x86>
    d78a:	07e3      	lsls	r3, r4, #31
    d78c:	f04f 0700 	mov.w	r7, #0
    d790:	d407      	bmi.n	d7a2 <__pow5mult+0x36>
    d792:	1064      	asrs	r4, r4, #1
    d794:	d015      	beq.n	d7c2 <__pow5mult+0x56>
    d796:	f8d8 0000 	ldr.w	r0, [r8]
    d79a:	b1a8      	cbz	r0, d7c8 <__pow5mult+0x5c>
    d79c:	4680      	mov	r8, r0
    d79e:	07e3      	lsls	r3, r4, #31
    d7a0:	d5f7      	bpl.n	d792 <__pow5mult+0x26>
    d7a2:	4642      	mov	r2, r8
    d7a4:	4629      	mov	r1, r5
    d7a6:	4630      	mov	r0, r6
    d7a8:	f7ff ff32 	bl	d610 <__multiply>
    d7ac:	b1b5      	cbz	r5, d7dc <__pow5mult+0x70>
    d7ae:	6869      	ldr	r1, [r5, #4]
    d7b0:	6c73      	ldr	r3, [r6, #68]	; 0x44
    d7b2:	1064      	asrs	r4, r4, #1
    d7b4:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    d7b8:	602a      	str	r2, [r5, #0]
    d7ba:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    d7be:	4605      	mov	r5, r0
    d7c0:	d1e9      	bne.n	d796 <__pow5mult+0x2a>
    d7c2:	4628      	mov	r0, r5
    d7c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d7c8:	4642      	mov	r2, r8
    d7ca:	4641      	mov	r1, r8
    d7cc:	4630      	mov	r0, r6
    d7ce:	f7ff ff1f 	bl	d610 <__multiply>
    d7d2:	f8c8 0000 	str.w	r0, [r8]
    d7d6:	6007      	str	r7, [r0, #0]
    d7d8:	4680      	mov	r8, r0
    d7da:	e7e0      	b.n	d79e <__pow5mult+0x32>
    d7dc:	4605      	mov	r5, r0
    d7de:	e7d8      	b.n	d792 <__pow5mult+0x26>
    d7e0:	3b01      	subs	r3, #1
    d7e2:	4a0f      	ldr	r2, [pc, #60]	; (d820 <__pow5mult+0xb4>)
    d7e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    d7e8:	2300      	movs	r3, #0
    d7ea:	f7ff fe43 	bl	d474 <__multadd>
    d7ee:	4605      	mov	r5, r0
    d7f0:	e7c4      	b.n	d77c <__pow5mult+0x10>
    d7f2:	2101      	movs	r1, #1
    d7f4:	4630      	mov	r0, r6
    d7f6:	f7ff fe0d 	bl	d414 <_Balloc>
    d7fa:	4680      	mov	r8, r0
    d7fc:	b140      	cbz	r0, d810 <__pow5mult+0xa4>
    d7fe:	2301      	movs	r3, #1
    d800:	f240 2271 	movw	r2, #625	; 0x271
    d804:	e9c0 3204 	strd	r3, r2, [r0, #16]
    d808:	2300      	movs	r3, #0
    d80a:	6430      	str	r0, [r6, #64]	; 0x40
    d80c:	6003      	str	r3, [r0, #0]
    d80e:	e7bc      	b.n	d78a <__pow5mult+0x1e>
    d810:	4b04      	ldr	r3, [pc, #16]	; (d824 <__pow5mult+0xb8>)
    d812:	4805      	ldr	r0, [pc, #20]	; (d828 <__pow5mult+0xbc>)
    d814:	4642      	mov	r2, r8
    d816:	f240 1145 	movw	r1, #325	; 0x145
    d81a:	f002 f98d 	bl	fb38 <__assert_func>
    d81e:	bf00      	nop
    d820:	00014498 	.word	0x00014498
    d824:	00014338 	.word	0x00014338
    d828:	0001434c 	.word	0x0001434c

0000d82c <__lshift>:
    d82c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d830:	460c      	mov	r4, r1
    d832:	4690      	mov	r8, r2
    d834:	6926      	ldr	r6, [r4, #16]
    d836:	68a3      	ldr	r3, [r4, #8]
    d838:	6849      	ldr	r1, [r1, #4]
    d83a:	eb06 1662 	add.w	r6, r6, r2, asr #5
    d83e:	1c75      	adds	r5, r6, #1
    d840:	429d      	cmp	r5, r3
    d842:	4607      	mov	r7, r0
    d844:	ea4f 1962 	mov.w	r9, r2, asr #5
    d848:	dd04      	ble.n	d854 <__lshift+0x28>
    d84a:	005b      	lsls	r3, r3, #1
    d84c:	429d      	cmp	r5, r3
    d84e:	f101 0101 	add.w	r1, r1, #1
    d852:	dcfa      	bgt.n	d84a <__lshift+0x1e>
    d854:	4638      	mov	r0, r7
    d856:	f7ff fddd 	bl	d414 <_Balloc>
    d85a:	4684      	mov	ip, r0
    d85c:	2800      	cmp	r0, #0
    d85e:	d051      	beq.n	d904 <__lshift+0xd8>
    d860:	f1b9 0f00 	cmp.w	r9, #0
    d864:	f100 0014 	add.w	r0, r0, #20
    d868:	dd0e      	ble.n	d888 <__lshift+0x5c>
    d86a:	f109 0205 	add.w	r2, r9, #5
    d86e:	ea4f 0e82 	mov.w	lr, r2, lsl #2
    d872:	4603      	mov	r3, r0
    d874:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
    d878:	2100      	movs	r1, #0
    d87a:	f843 1b04 	str.w	r1, [r3], #4
    d87e:	4293      	cmp	r3, r2
    d880:	d1fb      	bne.n	d87a <__lshift+0x4e>
    d882:	f1ae 0314 	sub.w	r3, lr, #20
    d886:	4418      	add	r0, r3
    d888:	6921      	ldr	r1, [r4, #16]
    d88a:	f104 0314 	add.w	r3, r4, #20
    d88e:	f018 081f 	ands.w	r8, r8, #31
    d892:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    d896:	d02d      	beq.n	d8f4 <__lshift+0xc8>
    d898:	f1c8 0920 	rsb	r9, r8, #32
    d89c:	4686      	mov	lr, r0
    d89e:	f04f 0a00 	mov.w	sl, #0
    d8a2:	681a      	ldr	r2, [r3, #0]
    d8a4:	fa02 f208 	lsl.w	r2, r2, r8
    d8a8:	ea42 020a 	orr.w	r2, r2, sl
    d8ac:	f84e 2b04 	str.w	r2, [lr], #4
    d8b0:	f853 2b04 	ldr.w	r2, [r3], #4
    d8b4:	4299      	cmp	r1, r3
    d8b6:	fa22 fa09 	lsr.w	sl, r2, r9
    d8ba:	d8f2      	bhi.n	d8a2 <__lshift+0x76>
    d8bc:	1b0b      	subs	r3, r1, r4
    d8be:	3b15      	subs	r3, #21
    d8c0:	f023 0303 	bic.w	r3, r3, #3
    d8c4:	3304      	adds	r3, #4
    d8c6:	f104 0215 	add.w	r2, r4, #21
    d8ca:	4291      	cmp	r1, r2
    d8cc:	bf38      	it	cc
    d8ce:	2304      	movcc	r3, #4
    d8d0:	f1ba 0f00 	cmp.w	sl, #0
    d8d4:	bf18      	it	ne
    d8d6:	462e      	movne	r6, r5
    d8d8:	f840 a003 	str.w	sl, [r0, r3]
    d8dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    d8de:	6862      	ldr	r2, [r4, #4]
    d8e0:	f8cc 6010 	str.w	r6, [ip, #16]
    d8e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    d8e8:	6021      	str	r1, [r4, #0]
    d8ea:	4660      	mov	r0, ip
    d8ec:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    d8f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d8f4:	3804      	subs	r0, #4
    d8f6:	f853 2b04 	ldr.w	r2, [r3], #4
    d8fa:	f840 2f04 	str.w	r2, [r0, #4]!
    d8fe:	4299      	cmp	r1, r3
    d900:	d8f9      	bhi.n	d8f6 <__lshift+0xca>
    d902:	e7eb      	b.n	d8dc <__lshift+0xb0>
    d904:	4b03      	ldr	r3, [pc, #12]	; (d914 <__lshift+0xe8>)
    d906:	4804      	ldr	r0, [pc, #16]	; (d918 <__lshift+0xec>)
    d908:	4662      	mov	r2, ip
    d90a:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    d90e:	f002 f913 	bl	fb38 <__assert_func>
    d912:	bf00      	nop
    d914:	00014338 	.word	0x00014338
    d918:	0001434c 	.word	0x0001434c

0000d91c <__mcmp>:
    d91c:	690b      	ldr	r3, [r1, #16]
    d91e:	4684      	mov	ip, r0
    d920:	6900      	ldr	r0, [r0, #16]
    d922:	1ac0      	subs	r0, r0, r3
    d924:	d115      	bne.n	d952 <__mcmp+0x36>
    d926:	f10c 0c14 	add.w	ip, ip, #20
    d92a:	3114      	adds	r1, #20
    d92c:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    d930:	b410      	push	{r4}
    d932:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    d936:	e001      	b.n	d93c <__mcmp+0x20>
    d938:	4594      	cmp	ip, r2
    d93a:	d208      	bcs.n	d94e <__mcmp+0x32>
    d93c:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    d940:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    d944:	428c      	cmp	r4, r1
    d946:	d0f7      	beq.n	d938 <__mcmp+0x1c>
    d948:	d204      	bcs.n	d954 <__mcmp+0x38>
    d94a:	f04f 30ff 	mov.w	r0, #4294967295
    d94e:	bc10      	pop	{r4}
    d950:	4770      	bx	lr
    d952:	4770      	bx	lr
    d954:	2001      	movs	r0, #1
    d956:	bc10      	pop	{r4}
    d958:	4770      	bx	lr
    d95a:	bf00      	nop

0000d95c <__mdiff>:
    d95c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d960:	690f      	ldr	r7, [r1, #16]
    d962:	6913      	ldr	r3, [r2, #16]
    d964:	1aff      	subs	r7, r7, r3
    d966:	2f00      	cmp	r7, #0
    d968:	460e      	mov	r6, r1
    d96a:	4690      	mov	r8, r2
    d96c:	d17f      	bne.n	da6e <__mdiff+0x112>
    d96e:	f101 0514 	add.w	r5, r1, #20
    d972:	3214      	adds	r2, #20
    d974:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    d978:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    d97c:	e001      	b.n	d982 <__mdiff+0x26>
    d97e:	429d      	cmp	r5, r3
    d980:	d278      	bcs.n	da74 <__mdiff+0x118>
    d982:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    d986:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    d98a:	42a1      	cmp	r1, r4
    d98c:	d0f7      	beq.n	d97e <__mdiff+0x22>
    d98e:	d369      	bcc.n	da64 <__mdiff+0x108>
    d990:	6871      	ldr	r1, [r6, #4]
    d992:	f7ff fd3f 	bl	d414 <_Balloc>
    d996:	4681      	mov	r9, r0
    d998:	2800      	cmp	r0, #0
    d99a:	d077      	beq.n	da8c <__mdiff+0x130>
    d99c:	6935      	ldr	r5, [r6, #16]
    d99e:	f8d8 2010 	ldr.w	r2, [r8, #16]
    d9a2:	60c7      	str	r7, [r0, #12]
    d9a4:	f108 0e14 	add.w	lr, r8, #20
    d9a8:	f106 0014 	add.w	r0, r6, #20
    d9ac:	f109 0a14 	add.w	sl, r9, #20
    d9b0:	f106 0110 	add.w	r1, r6, #16
    d9b4:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    d9b8:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    d9bc:	4656      	mov	r6, sl
    d9be:	f04f 0c00 	mov.w	ip, #0
    d9c2:	f85e 4b04 	ldr.w	r4, [lr], #4
    d9c6:	f851 bf04 	ldr.w	fp, [r1, #4]!
    d9ca:	b2a3      	uxth	r3, r4
    d9cc:	fa1c fc8b 	uxtah	ip, ip, fp
    d9d0:	ebac 0303 	sub.w	r3, ip, r3
    d9d4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    d9d8:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    d9dc:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    d9e0:	b29b      	uxth	r3, r3
    d9e2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    d9e6:	4572      	cmp	r2, lr
    d9e8:	f846 3b04 	str.w	r3, [r6], #4
    d9ec:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    d9f0:	d8e7      	bhi.n	d9c2 <__mdiff+0x66>
    d9f2:	eba2 0108 	sub.w	r1, r2, r8
    d9f6:	3915      	subs	r1, #21
    d9f8:	f108 0815 	add.w	r8, r8, #21
    d9fc:	4542      	cmp	r2, r8
    d9fe:	f021 0403 	bic.w	r4, r1, #3
    da02:	f104 0404 	add.w	r4, r4, #4
    da06:	bf38      	it	cc
    da08:	2404      	movcc	r4, #4
    da0a:	4420      	add	r0, r4
    da0c:	f021 0203 	bic.w	r2, r1, #3
    da10:	bf38      	it	cc
    da12:	2200      	movcc	r2, #0
    da14:	4287      	cmp	r7, r0
    da16:	4452      	add	r2, sl
    da18:	4454      	add	r4, sl
    da1a:	d918      	bls.n	da4e <__mdiff+0xf2>
    da1c:	4626      	mov	r6, r4
    da1e:	4601      	mov	r1, r0
    da20:	f851 3b04 	ldr.w	r3, [r1], #4
    da24:	fa1c fc83 	uxtah	ip, ip, r3
    da28:	ea4f 422c 	mov.w	r2, ip, asr #16
    da2c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    da30:	fa1f fc8c 	uxth.w	ip, ip
    da34:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    da38:	428f      	cmp	r7, r1
    da3a:	f846 3b04 	str.w	r3, [r6], #4
    da3e:	ea4f 4c22 	mov.w	ip, r2, asr #16
    da42:	d8ed      	bhi.n	da20 <__mdiff+0xc4>
    da44:	3f01      	subs	r7, #1
    da46:	1a3f      	subs	r7, r7, r0
    da48:	f027 0703 	bic.w	r7, r7, #3
    da4c:	19e2      	adds	r2, r4, r7
    da4e:	b923      	cbnz	r3, da5a <__mdiff+0xfe>
    da50:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    da54:	3d01      	subs	r5, #1
    da56:	2b00      	cmp	r3, #0
    da58:	d0fa      	beq.n	da50 <__mdiff+0xf4>
    da5a:	f8c9 5010 	str.w	r5, [r9, #16]
    da5e:	4648      	mov	r0, r9
    da60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da64:	4633      	mov	r3, r6
    da66:	2701      	movs	r7, #1
    da68:	4646      	mov	r6, r8
    da6a:	4698      	mov	r8, r3
    da6c:	e790      	b.n	d990 <__mdiff+0x34>
    da6e:	dbf9      	blt.n	da64 <__mdiff+0x108>
    da70:	2700      	movs	r7, #0
    da72:	e78d      	b.n	d990 <__mdiff+0x34>
    da74:	2100      	movs	r1, #0
    da76:	f7ff fccd 	bl	d414 <_Balloc>
    da7a:	4681      	mov	r9, r0
    da7c:	b168      	cbz	r0, da9a <__mdiff+0x13e>
    da7e:	2201      	movs	r2, #1
    da80:	2300      	movs	r3, #0
    da82:	e9c9 2304 	strd	r2, r3, [r9, #16]
    da86:	4648      	mov	r0, r9
    da88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da8c:	4b06      	ldr	r3, [pc, #24]	; (daa8 <__mdiff+0x14c>)
    da8e:	4807      	ldr	r0, [pc, #28]	; (daac <__mdiff+0x150>)
    da90:	464a      	mov	r2, r9
    da92:	f240 2145 	movw	r1, #581	; 0x245
    da96:	f002 f84f 	bl	fb38 <__assert_func>
    da9a:	4b03      	ldr	r3, [pc, #12]	; (daa8 <__mdiff+0x14c>)
    da9c:	4803      	ldr	r0, [pc, #12]	; (daac <__mdiff+0x150>)
    da9e:	464a      	mov	r2, r9
    daa0:	f240 2137 	movw	r1, #567	; 0x237
    daa4:	f002 f848 	bl	fb38 <__assert_func>
    daa8:	00014338 	.word	0x00014338
    daac:	0001434c 	.word	0x0001434c

0000dab0 <__d2b>:
    dab0:	b570      	push	{r4, r5, r6, lr}
    dab2:	2101      	movs	r1, #1
    dab4:	b082      	sub	sp, #8
    dab6:	4616      	mov	r6, r2
    dab8:	461d      	mov	r5, r3
    daba:	f7ff fcab 	bl	d414 <_Balloc>
    dabe:	4604      	mov	r4, r0
    dac0:	2800      	cmp	r0, #0
    dac2:	d04a      	beq.n	db5a <__d2b+0xaa>
    dac4:	462b      	mov	r3, r5
    dac6:	f3c5 550a 	ubfx	r5, r5, #20, #11
    daca:	f3c3 0313 	ubfx	r3, r3, #0, #20
    dace:	b10d      	cbz	r5, dad4 <__d2b+0x24>
    dad0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    dad4:	2e00      	cmp	r6, #0
    dad6:	9301      	str	r3, [sp, #4]
    dad8:	d114      	bne.n	db04 <__d2b+0x54>
    dada:	a801      	add	r0, sp, #4
    dadc:	f7ff fd3a 	bl	d554 <__lo0bits>
    dae0:	9b01      	ldr	r3, [sp, #4]
    dae2:	6163      	str	r3, [r4, #20]
    dae4:	2101      	movs	r1, #1
    dae6:	3020      	adds	r0, #32
    dae8:	6121      	str	r1, [r4, #16]
    daea:	b315      	cbz	r5, db32 <__d2b+0x82>
    daec:	9b06      	ldr	r3, [sp, #24]
    daee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
    daf2:	4405      	add	r5, r0
    daf4:	601d      	str	r5, [r3, #0]
    daf6:	9b07      	ldr	r3, [sp, #28]
    daf8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    dafc:	6018      	str	r0, [r3, #0]
    dafe:	4620      	mov	r0, r4
    db00:	b002      	add	sp, #8
    db02:	bd70      	pop	{r4, r5, r6, pc}
    db04:	4668      	mov	r0, sp
    db06:	9600      	str	r6, [sp, #0]
    db08:	f7ff fd24 	bl	d554 <__lo0bits>
    db0c:	b308      	cbz	r0, db52 <__d2b+0xa2>
    db0e:	9b01      	ldr	r3, [sp, #4]
    db10:	9900      	ldr	r1, [sp, #0]
    db12:	f1c0 0220 	rsb	r2, r0, #32
    db16:	fa03 f202 	lsl.w	r2, r3, r2
    db1a:	430a      	orrs	r2, r1
    db1c:	40c3      	lsrs	r3, r0
    db1e:	9301      	str	r3, [sp, #4]
    db20:	6162      	str	r2, [r4, #20]
    db22:	2b00      	cmp	r3, #0
    db24:	bf14      	ite	ne
    db26:	2102      	movne	r1, #2
    db28:	2101      	moveq	r1, #1
    db2a:	61a3      	str	r3, [r4, #24]
    db2c:	6121      	str	r1, [r4, #16]
    db2e:	2d00      	cmp	r5, #0
    db30:	d1dc      	bne.n	daec <__d2b+0x3c>
    db32:	eb04 0281 	add.w	r2, r4, r1, lsl #2
    db36:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
    db3a:	6910      	ldr	r0, [r2, #16]
    db3c:	9a06      	ldr	r2, [sp, #24]
    db3e:	6013      	str	r3, [r2, #0]
    db40:	f7ff fce8 	bl	d514 <__hi0bits>
    db44:	9b07      	ldr	r3, [sp, #28]
    db46:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
    db4a:	6018      	str	r0, [r3, #0]
    db4c:	4620      	mov	r0, r4
    db4e:	b002      	add	sp, #8
    db50:	bd70      	pop	{r4, r5, r6, pc}
    db52:	e9dd 2300 	ldrd	r2, r3, [sp]
    db56:	6162      	str	r2, [r4, #20]
    db58:	e7e3      	b.n	db22 <__d2b+0x72>
    db5a:	4b03      	ldr	r3, [pc, #12]	; (db68 <__d2b+0xb8>)
    db5c:	4803      	ldr	r0, [pc, #12]	; (db6c <__d2b+0xbc>)
    db5e:	4622      	mov	r2, r4
    db60:	f240 310f 	movw	r1, #783	; 0x30f
    db64:	f001 ffe8 	bl	fb38 <__assert_func>
    db68:	00014338 	.word	0x00014338
    db6c:	0001434c 	.word	0x0001434c

0000db70 <__ascii_wctomb>:
    db70:	b149      	cbz	r1, db86 <__ascii_wctomb+0x16>
    db72:	2aff      	cmp	r2, #255	; 0xff
    db74:	d802      	bhi.n	db7c <__ascii_wctomb+0xc>
    db76:	700a      	strb	r2, [r1, #0]
    db78:	2001      	movs	r0, #1
    db7a:	4770      	bx	lr
    db7c:	238a      	movs	r3, #138	; 0x8a
    db7e:	6003      	str	r3, [r0, #0]
    db80:	f04f 30ff 	mov.w	r0, #4294967295
    db84:	4770      	bx	lr
    db86:	4608      	mov	r0, r1
    db88:	4770      	bx	lr
    db8a:	bf00      	nop

0000db8c <_svfprintf_r>:
    db8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db90:	b0d9      	sub	sp, #356	; 0x164
    db92:	460c      	mov	r4, r1
    db94:	910c      	str	r1, [sp, #48]	; 0x30
    db96:	4690      	mov	r8, r2
    db98:	930e      	str	r3, [sp, #56]	; 0x38
    db9a:	4682      	mov	sl, r0
    db9c:	f001 fee6 	bl	f96c <_localeconv_r>
    dba0:	6803      	ldr	r3, [r0, #0]
    dba2:	9319      	str	r3, [sp, #100]	; 0x64
    dba4:	4618      	mov	r0, r3
    dba6:	f7ff fa4b 	bl	d040 <strlen>
    dbaa:	2208      	movs	r2, #8
    dbac:	9017      	str	r0, [sp, #92]	; 0x5c
    dbae:	2100      	movs	r1, #0
    dbb0:	a828      	add	r0, sp, #160	; 0xa0
    dbb2:	f7ff f90d 	bl	cdd0 <memset>
    dbb6:	89a3      	ldrh	r3, [r4, #12]
    dbb8:	061f      	lsls	r7, r3, #24
    dbba:	d503      	bpl.n	dbc4 <_svfprintf_r+0x38>
    dbbc:	6923      	ldr	r3, [r4, #16]
    dbbe:	2b00      	cmp	r3, #0
    dbc0:	f000 873f 	beq.w	ea42 <_svfprintf_r+0xeb6>
    dbc4:	2300      	movs	r3, #0
    dbc6:	aa2f      	add	r2, sp, #188	; 0xbc
    dbc8:	2400      	movs	r4, #0
    dbca:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
    dbce:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
    dbd2:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
    dbd6:	9313      	str	r3, [sp, #76]	; 0x4c
    dbd8:	9318      	str	r3, [sp, #96]	; 0x60
    dbda:	9309      	str	r3, [sp, #36]	; 0x24
    dbdc:	2300      	movs	r3, #0
    dbde:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
    dbe2:	922c      	str	r2, [sp, #176]	; 0xb0
    dbe4:	4691      	mov	r9, r2
    dbe6:	4644      	mov	r4, r8
    dbe8:	46a0      	mov	r8, r4
    dbea:	4b78      	ldr	r3, [pc, #480]	; (ddcc <_svfprintf_r+0x240>)
    dbec:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    dbf0:	f7ff f972 	bl	ced8 <__locale_mb_cur_max>
    dbf4:	4603      	mov	r3, r0
    dbf6:	a828      	add	r0, sp, #160	; 0xa0
    dbf8:	9000      	str	r0, [sp, #0]
    dbfa:	4642      	mov	r2, r8
    dbfc:	a924      	add	r1, sp, #144	; 0x90
    dbfe:	4650      	mov	r0, sl
    dc00:	47a8      	blx	r5
    dc02:	2800      	cmp	r0, #0
    dc04:	f000 80b0 	beq.w	dd68 <_svfprintf_r+0x1dc>
    dc08:	f2c0 80a6 	blt.w	dd58 <_svfprintf_r+0x1cc>
    dc0c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    dc0e:	2a25      	cmp	r2, #37	; 0x25
    dc10:	4603      	mov	r3, r0
    dc12:	d001      	beq.n	dc18 <_svfprintf_r+0x8c>
    dc14:	4498      	add	r8, r3
    dc16:	e7e8      	b.n	dbea <_svfprintf_r+0x5e>
    dc18:	ebb8 0704 	subs.w	r7, r8, r4
    dc1c:	4606      	mov	r6, r0
    dc1e:	f040 80a7 	bne.w	dd70 <_svfprintf_r+0x1e4>
    dc22:	2300      	movs	r3, #0
    dc24:	f04f 32ff 	mov.w	r2, #4294967295
    dc28:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    dc2c:	469b      	mov	fp, r3
    dc2e:	930b      	str	r3, [sp, #44]	; 0x2c
    dc30:	f108 0801 	add.w	r8, r8, #1
    dc34:	f898 3000 	ldrb.w	r3, [r8]
    dc38:	9208      	str	r2, [sp, #32]
    dc3a:	252b      	movs	r5, #43	; 0x2b
    dc3c:	2620      	movs	r6, #32
    dc3e:	f108 0801 	add.w	r8, r8, #1
    dc42:	f1a3 0220 	sub.w	r2, r3, #32
    dc46:	2a5a      	cmp	r2, #90	; 0x5a
    dc48:	f200 80c2 	bhi.w	ddd0 <_svfprintf_r+0x244>
    dc4c:	e8df f012 	tbh	[pc, r2, lsl #1]
    dc50:	00c002e6 	.word	0x00c002e6
    dc54:	02e100c0 	.word	0x02e100c0
    dc58:	00c000c0 	.word	0x00c000c0
    dc5c:	006a00c0 	.word	0x006a00c0
    dc60:	00c000c0 	.word	0x00c000c0
    dc64:	02840208 	.word	0x02840208
    dc68:	021300c0 	.word	0x021300c0
    dc6c:	00c002c7 	.word	0x00c002c7
    dc70:	005b02c2 	.word	0x005b02c2
    dc74:	005b005b 	.word	0x005b005b
    dc78:	005b005b 	.word	0x005b005b
    dc7c:	005b005b 	.word	0x005b005b
    dc80:	005b005b 	.word	0x005b005b
    dc84:	00c000c0 	.word	0x00c000c0
    dc88:	00c000c0 	.word	0x00c000c0
    dc8c:	00c000c0 	.word	0x00c000c0
    dc90:	014300c0 	.word	0x014300c0
    dc94:	018900c0 	.word	0x018900c0
    dc98:	0143021d 	.word	0x0143021d
    dc9c:	01430143 	.word	0x01430143
    dca0:	00c000c0 	.word	0x00c000c0
    dca4:	00c000c0 	.word	0x00c000c0
    dca8:	00c00218 	.word	0x00c00218
    dcac:	029600c0 	.word	0x029600c0
    dcb0:	00c000c0 	.word	0x00c000c0
    dcb4:	01b100c0 	.word	0x01b100c0
    dcb8:	02a900c0 	.word	0x02a900c0
    dcbc:	00c000c0 	.word	0x00c000c0
    dcc0:	00c006dd 	.word	0x00c006dd
    dcc4:	00c000c0 	.word	0x00c000c0
    dcc8:	00c000c0 	.word	0x00c000c0
    dccc:	00c000c0 	.word	0x00c000c0
    dcd0:	014300c0 	.word	0x014300c0
    dcd4:	018900c0 	.word	0x018900c0
    dcd8:	014301e2 	.word	0x014301e2
    dcdc:	01430143 	.word	0x01430143
    dce0:	01e20277 	.word	0x01e20277
    dce4:	00c0007f 	.word	0x00c0007f
    dce8:	00c00289 	.word	0x00c00289
    dcec:	06da025f 	.word	0x06da025f
    dcf0:	007f0232 	.word	0x007f0232
    dcf4:	01b100c0 	.word	0x01b100c0
    dcf8:	06b4007c 	.word	0x06b4007c
    dcfc:	00c000c0 	.word	0x00c000c0
    dd00:	00c006b8 	.word	0x00c006b8
    dd04:	007c      	.short	0x007c
    dd06:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    dd0a:	2100      	movs	r1, #0
    dd0c:	f818 3b01 	ldrb.w	r3, [r8], #1
    dd10:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    dd14:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    dd18:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    dd1c:	2a09      	cmp	r2, #9
    dd1e:	d9f5      	bls.n	dd0c <_svfprintf_r+0x180>
    dd20:	910b      	str	r1, [sp, #44]	; 0x2c
    dd22:	e78e      	b.n	dc42 <_svfprintf_r+0xb6>
    dd24:	4650      	mov	r0, sl
    dd26:	f001 fe21 	bl	f96c <_localeconv_r>
    dd2a:	6843      	ldr	r3, [r0, #4]
    dd2c:	931c      	str	r3, [sp, #112]	; 0x70
    dd2e:	4618      	mov	r0, r3
    dd30:	f7ff f986 	bl	d040 <strlen>
    dd34:	901d      	str	r0, [sp, #116]	; 0x74
    dd36:	4607      	mov	r7, r0
    dd38:	4650      	mov	r0, sl
    dd3a:	f001 fe17 	bl	f96c <_localeconv_r>
    dd3e:	6883      	ldr	r3, [r0, #8]
    dd40:	931a      	str	r3, [sp, #104]	; 0x68
    dd42:	2f00      	cmp	r7, #0
    dd44:	f040 85b1 	bne.w	e8aa <_svfprintf_r+0xd1e>
    dd48:	f898 3000 	ldrb.w	r3, [r8]
    dd4c:	e777      	b.n	dc3e <_svfprintf_r+0xb2>
    dd4e:	f898 3000 	ldrb.w	r3, [r8]
    dd52:	f04b 0b20 	orr.w	fp, fp, #32
    dd56:	e772      	b.n	dc3e <_svfprintf_r+0xb2>
    dd58:	2208      	movs	r2, #8
    dd5a:	2100      	movs	r1, #0
    dd5c:	a828      	add	r0, sp, #160	; 0xa0
    dd5e:	f7ff f837 	bl	cdd0 <memset>
    dd62:	2301      	movs	r3, #1
    dd64:	4498      	add	r8, r3
    dd66:	e740      	b.n	dbea <_svfprintf_r+0x5e>
    dd68:	ebb8 0704 	subs.w	r7, r8, r4
    dd6c:	4606      	mov	r6, r0
    dd6e:	d011      	beq.n	dd94 <_svfprintf_r+0x208>
    dd70:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    dd72:	443b      	add	r3, r7
    dd74:	932e      	str	r3, [sp, #184]	; 0xb8
    dd76:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    dd78:	3301      	adds	r3, #1
    dd7a:	2b07      	cmp	r3, #7
    dd7c:	e9c9 4700 	strd	r4, r7, [r9]
    dd80:	932d      	str	r3, [sp, #180]	; 0xb4
    dd82:	dc19      	bgt.n	ddb8 <_svfprintf_r+0x22c>
    dd84:	f109 0908 	add.w	r9, r9, #8
    dd88:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dd8a:	443b      	add	r3, r7
    dd8c:	9309      	str	r3, [sp, #36]	; 0x24
    dd8e:	2e00      	cmp	r6, #0
    dd90:	f47f af47 	bne.w	dc22 <_svfprintf_r+0x96>
    dd94:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    dd96:	2b00      	cmp	r3, #0
    dd98:	f041 8201 	bne.w	f19e <_svfprintf_r+0x1612>
    dd9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dd9e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    dda2:	f013 0f40 	tst.w	r3, #64	; 0x40
    dda6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dda8:	bf18      	it	ne
    ddaa:	f04f 33ff 	movne.w	r3, #4294967295
    ddae:	9309      	str	r3, [sp, #36]	; 0x24
    ddb0:	9809      	ldr	r0, [sp, #36]	; 0x24
    ddb2:	b059      	add	sp, #356	; 0x164
    ddb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ddb8:	990c      	ldr	r1, [sp, #48]	; 0x30
    ddba:	aa2c      	add	r2, sp, #176	; 0xb0
    ddbc:	4650      	mov	r0, sl
    ddbe:	f002 ff4f 	bl	10c60 <__ssprint_r>
    ddc2:	2800      	cmp	r0, #0
    ddc4:	d1ea      	bne.n	dd9c <_svfprintf_r+0x210>
    ddc6:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    ddca:	e7dd      	b.n	dd88 <_svfprintf_r+0x1fc>
    ddcc:	1fff8ce4 	.word	0x1fff8ce4
    ddd0:	9310      	str	r3, [sp, #64]	; 0x40
    ddd2:	2b00      	cmp	r3, #0
    ddd4:	d0de      	beq.n	dd94 <_svfprintf_r+0x208>
    ddd6:	2200      	movs	r2, #0
    ddd8:	f88d 30fc 	strb.w	r3, [sp, #252]	; 0xfc
    dddc:	2301      	movs	r3, #1
    ddde:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
    dde2:	9307      	str	r3, [sp, #28]
    dde4:	920d      	str	r2, [sp, #52]	; 0x34
    dde6:	930a      	str	r3, [sp, #40]	; 0x28
    dde8:	9208      	str	r2, [sp, #32]
    ddea:	9212      	str	r2, [sp, #72]	; 0x48
    ddec:	9216      	str	r2, [sp, #88]	; 0x58
    ddee:	9211      	str	r2, [sp, #68]	; 0x44
    ddf0:	ac3f      	add	r4, sp, #252	; 0xfc
    ddf2:	f01b 0302 	ands.w	r3, fp, #2
    ddf6:	d002      	beq.n	ddfe <_svfprintf_r+0x272>
    ddf8:	9907      	ldr	r1, [sp, #28]
    ddfa:	3102      	adds	r1, #2
    ddfc:	9107      	str	r1, [sp, #28]
    ddfe:	f01b 0184 	ands.w	r1, fp, #132	; 0x84
    de02:	910f      	str	r1, [sp, #60]	; 0x3c
    de04:	d105      	bne.n	de12 <_svfprintf_r+0x286>
    de06:	990b      	ldr	r1, [sp, #44]	; 0x2c
    de08:	9807      	ldr	r0, [sp, #28]
    de0a:	1a0f      	subs	r7, r1, r0
    de0c:	2f00      	cmp	r7, #0
    de0e:	f300 8382 	bgt.w	e516 <_svfprintf_r+0x98a>
    de12:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    de14:	b182      	cbz	r2, de38 <_svfprintf_r+0x2ac>
    de16:	2201      	movs	r2, #1
    de18:	f8c9 2004 	str.w	r2, [r9, #4]
    de1c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    de1e:	3201      	adds	r2, #1
    de20:	3601      	adds	r6, #1
    de22:	f10d 0187 	add.w	r1, sp, #135	; 0x87
    de26:	2a07      	cmp	r2, #7
    de28:	962e      	str	r6, [sp, #184]	; 0xb8
    de2a:	922d      	str	r2, [sp, #180]	; 0xb4
    de2c:	f8c9 1000 	str.w	r1, [r9]
    de30:	f300 83bd 	bgt.w	e5ae <_svfprintf_r+0xa22>
    de34:	f109 0908 	add.w	r9, r9, #8
    de38:	b183      	cbz	r3, de5c <_svfprintf_r+0x2d0>
    de3a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    de3c:	aa22      	add	r2, sp, #136	; 0x88
    de3e:	3301      	adds	r3, #1
    de40:	3602      	adds	r6, #2
    de42:	f8c9 2000 	str.w	r2, [r9]
    de46:	2b07      	cmp	r3, #7
    de48:	f04f 0202 	mov.w	r2, #2
    de4c:	962e      	str	r6, [sp, #184]	; 0xb8
    de4e:	932d      	str	r3, [sp, #180]	; 0xb4
    de50:	f8c9 2004 	str.w	r2, [r9, #4]
    de54:	f300 83c0 	bgt.w	e5d8 <_svfprintf_r+0xa4c>
    de58:	f109 0908 	add.w	r9, r9, #8
    de5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    de5e:	2b80      	cmp	r3, #128	; 0x80
    de60:	f000 8281 	beq.w	e366 <_svfprintf_r+0x7da>
    de64:	9b08      	ldr	r3, [sp, #32]
    de66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    de68:	1a9f      	subs	r7, r3, r2
    de6a:	2f00      	cmp	r7, #0
    de6c:	f300 82bc 	bgt.w	e3e8 <_svfprintf_r+0x85c>
    de70:	f41b 7f80 	tst.w	fp, #256	; 0x100
    de74:	f040 821e 	bne.w	e2b4 <_svfprintf_r+0x728>
    de78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    de7a:	f8c9 3004 	str.w	r3, [r9, #4]
    de7e:	441e      	add	r6, r3
    de80:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    de82:	f8c9 4000 	str.w	r4, [r9]
    de86:	3301      	adds	r3, #1
    de88:	2b07      	cmp	r3, #7
    de8a:	962e      	str	r6, [sp, #184]	; 0xb8
    de8c:	932d      	str	r3, [sp, #180]	; 0xb4
    de8e:	f300 8337 	bgt.w	e500 <_svfprintf_r+0x974>
    de92:	f109 0908 	add.w	r9, r9, #8
    de96:	f01b 0f04 	tst.w	fp, #4
    de9a:	d005      	beq.n	dea8 <_svfprintf_r+0x31c>
    de9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    de9e:	9a07      	ldr	r2, [sp, #28]
    dea0:	1a9c      	subs	r4, r3, r2
    dea2:	2c00      	cmp	r4, #0
    dea4:	f300 83a4 	bgt.w	e5f0 <_svfprintf_r+0xa64>
    dea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    deaa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    deac:	9907      	ldr	r1, [sp, #28]
    deae:	428a      	cmp	r2, r1
    deb0:	bfac      	ite	ge
    deb2:	189b      	addge	r3, r3, r2
    deb4:	185b      	addlt	r3, r3, r1
    deb6:	9309      	str	r3, [sp, #36]	; 0x24
    deb8:	2e00      	cmp	r6, #0
    deba:	f040 82ca 	bne.w	e452 <_svfprintf_r+0x8c6>
    debe:	2300      	movs	r3, #0
    dec0:	932d      	str	r3, [sp, #180]	; 0xb4
    dec2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dec4:	b11b      	cbz	r3, dece <_svfprintf_r+0x342>
    dec6:	990d      	ldr	r1, [sp, #52]	; 0x34
    dec8:	4650      	mov	r0, sl
    deca:	f7ff f987 	bl	d1dc <_free_r>
    dece:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    ded2:	4644      	mov	r4, r8
    ded4:	e688      	b.n	dbe8 <_svfprintf_r+0x5c>
    ded6:	9310      	str	r3, [sp, #64]	; 0x40
    ded8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    deda:	3307      	adds	r3, #7
    dedc:	f023 0107 	bic.w	r1, r3, #7
    dee0:	e8f1 2302 	ldrd	r2, r3, [r1], #8
    dee4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    dee8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    deec:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
    def0:	910e      	str	r1, [sp, #56]	; 0x38
    def2:	4616      	mov	r6, r2
    def4:	4610      	mov	r0, r2
    def6:	4bb3      	ldr	r3, [pc, #716]	; (e1c4 <_svfprintf_r+0x638>)
    def8:	4629      	mov	r1, r5
    defa:	f04f 32ff 	mov.w	r2, #4294967295
    defe:	f7fd fda1 	bl	ba44 <__aeabi_dcmpun>
    df02:	2800      	cmp	r0, #0
    df04:	f040 84fc 	bne.w	e900 <_svfprintf_r+0xd74>
    df08:	4bae      	ldr	r3, [pc, #696]	; (e1c4 <_svfprintf_r+0x638>)
    df0a:	4630      	mov	r0, r6
    df0c:	4629      	mov	r1, r5
    df0e:	f04f 32ff 	mov.w	r2, #4294967295
    df12:	f7fd fd79 	bl	ba08 <__aeabi_dcmple>
    df16:	2800      	cmp	r0, #0
    df18:	f040 84f2 	bne.w	e900 <_svfprintf_r+0xd74>
    df1c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    df20:	2200      	movs	r2, #0
    df22:	2300      	movs	r3, #0
    df24:	f7fd fd66 	bl	b9f4 <__aeabi_dcmplt>
    df28:	2800      	cmp	r0, #0
    df2a:	f041 8038 	bne.w	ef9e <_svfprintf_r+0x1412>
    df2e:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    df32:	4ca5      	ldr	r4, [pc, #660]	; (e1c8 <_svfprintf_r+0x63c>)
    df34:	4ba5      	ldr	r3, [pc, #660]	; (e1cc <_svfprintf_r+0x640>)
    df36:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    df3a:	9910      	ldr	r1, [sp, #64]	; 0x40
    df3c:	2947      	cmp	r1, #71	; 0x47
    df3e:	bfc8      	it	gt
    df40:	461c      	movgt	r4, r3
    df42:	2300      	movs	r3, #0
    df44:	2103      	movs	r1, #3
    df46:	930d      	str	r3, [sp, #52]	; 0x34
    df48:	9107      	str	r1, [sp, #28]
    df4a:	910a      	str	r1, [sp, #40]	; 0x28
    df4c:	9308      	str	r3, [sp, #32]
    df4e:	9312      	str	r3, [sp, #72]	; 0x48
    df50:	9316      	str	r3, [sp, #88]	; 0x58
    df52:	9311      	str	r3, [sp, #68]	; 0x44
    df54:	2a00      	cmp	r2, #0
    df56:	f43f af4c 	beq.w	ddf2 <_svfprintf_r+0x266>
    df5a:	9b07      	ldr	r3, [sp, #28]
    df5c:	3301      	adds	r3, #1
    df5e:	9307      	str	r3, [sp, #28]
    df60:	e747      	b.n	ddf2 <_svfprintf_r+0x266>
    df62:	2b43      	cmp	r3, #67	; 0x43
    df64:	9310      	str	r3, [sp, #64]	; 0x40
    df66:	d003      	beq.n	df70 <_svfprintf_r+0x3e4>
    df68:	f01b 0f10 	tst.w	fp, #16
    df6c:	f000 8551 	beq.w	ea12 <_svfprintf_r+0xe86>
    df70:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    df72:	2208      	movs	r2, #8
    df74:	2100      	movs	r1, #0
    df76:	a82a      	add	r0, sp, #168	; 0xa8
    df78:	ac3f      	add	r4, sp, #252	; 0xfc
    df7a:	f7fe ff29 	bl	cdd0 <memset>
    df7e:	ab2a      	add	r3, sp, #168	; 0xa8
    df80:	f856 2b04 	ldr.w	r2, [r6], #4
    df84:	4621      	mov	r1, r4
    df86:	4650      	mov	r0, sl
    df88:	f002 fe22 	bl	10bd0 <_wcrtomb_r>
    df8c:	4603      	mov	r3, r0
    df8e:	3301      	adds	r3, #1
    df90:	900a      	str	r0, [sp, #40]	; 0x28
    df92:	f001 82c3 	beq.w	f51c <_svfprintf_r+0x1990>
    df96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    df98:	960e      	str	r6, [sp, #56]	; 0x38
    df9a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    df9e:	9307      	str	r3, [sp, #28]
    dfa0:	2200      	movs	r2, #0
    dfa2:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
    dfa6:	920d      	str	r2, [sp, #52]	; 0x34
    dfa8:	9208      	str	r2, [sp, #32]
    dfaa:	9212      	str	r2, [sp, #72]	; 0x48
    dfac:	9216      	str	r2, [sp, #88]	; 0x58
    dfae:	9211      	str	r2, [sp, #68]	; 0x44
    dfb0:	e71f      	b.n	ddf2 <_svfprintf_r+0x266>
    dfb2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    dfb4:	9310      	str	r3, [sp, #64]	; 0x40
    dfb6:	f857 4b04 	ldr.w	r4, [r7], #4
    dfba:	2300      	movs	r3, #0
    dfbc:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    dfc0:	2c00      	cmp	r4, #0
    dfc2:	f000 854d 	beq.w	ea60 <_svfprintf_r+0xed4>
    dfc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    dfc8:	2b53      	cmp	r3, #83	; 0x53
    dfca:	f000 86d4 	beq.w	ed76 <_svfprintf_r+0x11ea>
    dfce:	f01b 0310 	ands.w	r3, fp, #16
    dfd2:	9311      	str	r3, [sp, #68]	; 0x44
    dfd4:	f040 86cf 	bne.w	ed76 <_svfprintf_r+0x11ea>
    dfd8:	9b08      	ldr	r3, [sp, #32]
    dfda:	1c5d      	adds	r5, r3, #1
    dfdc:	f001 80cc 	beq.w	f178 <_svfprintf_r+0x15ec>
    dfe0:	9911      	ldr	r1, [sp, #68]	; 0x44
    dfe2:	461a      	mov	r2, r3
    dfe4:	4620      	mov	r0, r4
    dfe6:	f001 fcdb 	bl	f9a0 <memchr>
    dfea:	900d      	str	r0, [sp, #52]	; 0x34
    dfec:	2800      	cmp	r0, #0
    dfee:	f001 8351 	beq.w	f694 <_svfprintf_r+0x1b08>
    dff2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dff4:	9911      	ldr	r1, [sp, #68]	; 0x44
    dff6:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    dffa:	970e      	str	r7, [sp, #56]	; 0x38
    dffc:	1b1b      	subs	r3, r3, r4
    dffe:	930a      	str	r3, [sp, #40]	; 0x28
    e000:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    e004:	9307      	str	r3, [sp, #28]
    e006:	2373      	movs	r3, #115	; 0x73
    e008:	9108      	str	r1, [sp, #32]
    e00a:	9112      	str	r1, [sp, #72]	; 0x48
    e00c:	9116      	str	r1, [sp, #88]	; 0x58
    e00e:	910d      	str	r1, [sp, #52]	; 0x34
    e010:	9310      	str	r3, [sp, #64]	; 0x40
    e012:	e79f      	b.n	df54 <_svfprintf_r+0x3c8>
    e014:	f01b 0f20 	tst.w	fp, #32
    e018:	9310      	str	r3, [sp, #64]	; 0x40
    e01a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e01c:	d03c      	beq.n	e098 <_svfprintf_r+0x50c>
    e01e:	3307      	adds	r3, #7
    e020:	f023 0307 	bic.w	r3, r3, #7
    e024:	461a      	mov	r2, r3
    e026:	4611      	mov	r1, r2
    e028:	685b      	ldr	r3, [r3, #4]
    e02a:	f851 2b08 	ldr.w	r2, [r1], #8
    e02e:	910e      	str	r1, [sp, #56]	; 0x38
    e030:	4619      	mov	r1, r3
    e032:	2b00      	cmp	r3, #0
    e034:	f2c0 8401 	blt.w	e83a <_svfprintf_r+0xcae>
    e038:	9b08      	ldr	r3, [sp, #32]
    e03a:	3301      	adds	r3, #1
    e03c:	f000 82a8 	beq.w	e590 <_svfprintf_r+0xa04>
    e040:	ea52 0301 	orrs.w	r3, r2, r1
    e044:	f02b 0580 	bic.w	r5, fp, #128	; 0x80
    e048:	f040 82a3 	bne.w	e592 <_svfprintf_r+0xa06>
    e04c:	9b08      	ldr	r3, [sp, #32]
    e04e:	2b00      	cmp	r3, #0
    e050:	f040 82a4 	bne.w	e59c <_svfprintf_r+0xa10>
    e054:	46ab      	mov	fp, r5
    e056:	2300      	movs	r3, #0
    e058:	9308      	str	r3, [sp, #32]
    e05a:	930a      	str	r3, [sp, #40]	; 0x28
    e05c:	ac58      	add	r4, sp, #352	; 0x160
    e05e:	e0ff      	b.n	e260 <_svfprintf_r+0x6d4>
    e060:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e062:	f853 2b04 	ldr.w	r2, [r3], #4
    e066:	920b      	str	r2, [sp, #44]	; 0x2c
    e068:	2a00      	cmp	r2, #0
    e06a:	f280 840c 	bge.w	e886 <_svfprintf_r+0xcfa>
    e06e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e070:	930e      	str	r3, [sp, #56]	; 0x38
    e072:	4252      	negs	r2, r2
    e074:	920b      	str	r2, [sp, #44]	; 0x2c
    e076:	f898 3000 	ldrb.w	r3, [r8]
    e07a:	f04b 0b04 	orr.w	fp, fp, #4
    e07e:	e5de      	b.n	dc3e <_svfprintf_r+0xb2>
    e080:	f898 3000 	ldrb.w	r3, [r8]
    e084:	f04b 0b08 	orr.w	fp, fp, #8
    e088:	e5d9      	b.n	dc3e <_svfprintf_r+0xb2>
    e08a:	f04b 0b10 	orr.w	fp, fp, #16
    e08e:	f01b 0f20 	tst.w	fp, #32
    e092:	9310      	str	r3, [sp, #64]	; 0x40
    e094:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e096:	d1c2      	bne.n	e01e <_svfprintf_r+0x492>
    e098:	f01b 0f10 	tst.w	fp, #16
    e09c:	f040 83fe 	bne.w	e89c <_svfprintf_r+0xd10>
    e0a0:	f01b 0f40 	tst.w	fp, #64	; 0x40
    e0a4:	f000 83f6 	beq.w	e894 <_svfprintf_r+0xd08>
    e0a8:	f933 2b04 	ldrsh.w	r2, [r3], #4
    e0ac:	930e      	str	r3, [sp, #56]	; 0x38
    e0ae:	17d1      	asrs	r1, r2, #31
    e0b0:	460b      	mov	r3, r1
    e0b2:	e7be      	b.n	e032 <_svfprintf_r+0x4a6>
    e0b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e0b6:	f853 2b04 	ldr.w	r2, [r3], #4
    e0ba:	930e      	str	r3, [sp, #56]	; 0x38
    e0bc:	f647 0330 	movw	r3, #30768	; 0x7830
    e0c0:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    e0c4:	2078      	movs	r0, #120	; 0x78
    e0c6:	4b42      	ldr	r3, [pc, #264]	; (e1d0 <_svfprintf_r+0x644>)
    e0c8:	9318      	str	r3, [sp, #96]	; 0x60
    e0ca:	f04b 0502 	orr.w	r5, fp, #2
    e0ce:	2100      	movs	r1, #0
    e0d0:	2302      	movs	r3, #2
    e0d2:	9010      	str	r0, [sp, #64]	; 0x40
    e0d4:	2000      	movs	r0, #0
    e0d6:	9c08      	ldr	r4, [sp, #32]
    e0d8:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
    e0dc:	1c60      	adds	r0, r4, #1
    e0de:	f000 80a8 	beq.w	e232 <_svfprintf_r+0x6a6>
    e0e2:	ea52 0001 	orrs.w	r0, r2, r1
    e0e6:	f025 0b80 	bic.w	fp, r5, #128	; 0x80
    e0ea:	f040 80a1 	bne.w	e230 <_svfprintf_r+0x6a4>
    e0ee:	2c00      	cmp	r4, #0
    e0f0:	f040 8695 	bne.w	ee1e <_svfprintf_r+0x1292>
    e0f4:	2b00      	cmp	r3, #0
    e0f6:	d1ae      	bne.n	e056 <_svfprintf_r+0x4ca>
    e0f8:	f015 0301 	ands.w	r3, r5, #1
    e0fc:	930a      	str	r3, [sp, #40]	; 0x28
    e0fe:	f000 83c7 	beq.w	e890 <_svfprintf_r+0xd04>
    e102:	2330      	movs	r3, #48	; 0x30
    e104:	f88d 315f 	strb.w	r3, [sp, #351]	; 0x15f
    e108:	f20d 145f 	addw	r4, sp, #351	; 0x15f
    e10c:	e0a8      	b.n	e260 <_svfprintf_r+0x6d4>
    e10e:	f01b 0f20 	tst.w	fp, #32
    e112:	f040 83e5 	bne.w	e8e0 <_svfprintf_r+0xd54>
    e116:	f01b 0f10 	tst.w	fp, #16
    e11a:	f040 8686 	bne.w	ee2a <_svfprintf_r+0x129e>
    e11e:	f01b 0f40 	tst.w	fp, #64	; 0x40
    e122:	f040 877f 	bne.w	f024 <_svfprintf_r+0x1498>
    e126:	f41b 7f00 	tst.w	fp, #512	; 0x200
    e12a:	f000 867e 	beq.w	ee2a <_svfprintf_r+0x129e>
    e12e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e130:	9909      	ldr	r1, [sp, #36]	; 0x24
    e132:	f853 2b04 	ldr.w	r2, [r3], #4
    e136:	930e      	str	r3, [sp, #56]	; 0x38
    e138:	7011      	strb	r1, [r2, #0]
    e13a:	4644      	mov	r4, r8
    e13c:	e554      	b.n	dbe8 <_svfprintf_r+0x5c>
    e13e:	f898 3000 	ldrb.w	r3, [r8]
    e142:	2b68      	cmp	r3, #104	; 0x68
    e144:	bf03      	ittte	eq
    e146:	f898 3001 	ldrbeq.w	r3, [r8, #1]
    e14a:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
    e14e:	f108 0801 	addeq.w	r8, r8, #1
    e152:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
    e156:	e572      	b.n	dc3e <_svfprintf_r+0xb2>
    e158:	f898 3000 	ldrb.w	r3, [r8]
    e15c:	f88d 5087 	strb.w	r5, [sp, #135]	; 0x87
    e160:	e56d      	b.n	dc3e <_svfprintf_r+0xb2>
    e162:	f898 3000 	ldrb.w	r3, [r8]
    e166:	2b6c      	cmp	r3, #108	; 0x6c
    e168:	bf03      	ittte	eq
    e16a:	f898 3001 	ldrbeq.w	r3, [r8, #1]
    e16e:	f04b 0b20 	orreq.w	fp, fp, #32
    e172:	f108 0801 	addeq.w	r8, r8, #1
    e176:	f04b 0b10 	orrne.w	fp, fp, #16
    e17a:	e560      	b.n	dc3e <_svfprintf_r+0xb2>
    e17c:	9310      	str	r3, [sp, #64]	; 0x40
    e17e:	f04b 0b10 	orr.w	fp, fp, #16
    e182:	f01b 0120 	ands.w	r1, fp, #32
    e186:	f000 834a 	beq.w	e81e <_svfprintf_r+0xc92>
    e18a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e18c:	3307      	adds	r3, #7
    e18e:	f023 0307 	bic.w	r3, r3, #7
    e192:	6859      	ldr	r1, [r3, #4]
    e194:	f853 2b08 	ldr.w	r2, [r3], #8
    e198:	930e      	str	r3, [sp, #56]	; 0x38
    e19a:	f42b 6580 	bic.w	r5, fp, #1024	; 0x400
    e19e:	2300      	movs	r3, #0
    e1a0:	e798      	b.n	e0d4 <_svfprintf_r+0x548>
    e1a2:	9310      	str	r3, [sp, #64]	; 0x40
    e1a4:	f04b 0510 	orr.w	r5, fp, #16
    e1a8:	f015 0120 	ands.w	r1, r5, #32
    e1ac:	f000 8328 	beq.w	e800 <_svfprintf_r+0xc74>
    e1b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e1b2:	3307      	adds	r3, #7
    e1b4:	f023 0307 	bic.w	r3, r3, #7
    e1b8:	6859      	ldr	r1, [r3, #4]
    e1ba:	f853 2b08 	ldr.w	r2, [r3], #8
    e1be:	930e      	str	r3, [sp, #56]	; 0x38
    e1c0:	2301      	movs	r3, #1
    e1c2:	e787      	b.n	e0d4 <_svfprintf_r+0x548>
    e1c4:	7fefffff 	.word	0x7fefffff
    e1c8:	000144a4 	.word	0x000144a4
    e1cc:	00014030 	.word	0x00014030
    e1d0:	000144ac 	.word	0x000144ac
    e1d4:	f898 3000 	ldrb.w	r3, [r8]
    e1d8:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
    e1dc:	e52f      	b.n	dc3e <_svfprintf_r+0xb2>
    e1de:	4641      	mov	r1, r8
    e1e0:	f811 3b01 	ldrb.w	r3, [r1], #1
    e1e4:	2b2a      	cmp	r3, #42	; 0x2a
    e1e6:	f001 827f 	beq.w	f6e8 <_svfprintf_r+0x1b5c>
    e1ea:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    e1ee:	2a09      	cmp	r2, #9
    e1f0:	4688      	mov	r8, r1
    e1f2:	bf98      	it	ls
    e1f4:	2100      	movls	r1, #0
    e1f6:	f201 8176 	bhi.w	f4e6 <_svfprintf_r+0x195a>
    e1fa:	f818 3b01 	ldrb.w	r3, [r8], #1
    e1fe:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    e202:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    e206:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    e20a:	2a09      	cmp	r2, #9
    e20c:	d9f5      	bls.n	e1fa <_svfprintf_r+0x66e>
    e20e:	9108      	str	r1, [sp, #32]
    e210:	e517      	b.n	dc42 <_svfprintf_r+0xb6>
    e212:	f898 3000 	ldrb.w	r3, [r8]
    e216:	f04b 0b01 	orr.w	fp, fp, #1
    e21a:	e510      	b.n	dc3e <_svfprintf_r+0xb2>
    e21c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    e220:	2b00      	cmp	r3, #0
    e222:	f47f ad91 	bne.w	dd48 <_svfprintf_r+0x1bc>
    e226:	f898 3000 	ldrb.w	r3, [r8]
    e22a:	f88d 6087 	strb.w	r6, [sp, #135]	; 0x87
    e22e:	e506      	b.n	dc3e <_svfprintf_r+0xb2>
    e230:	465d      	mov	r5, fp
    e232:	2b01      	cmp	r3, #1
    e234:	f000 81ad 	beq.w	e592 <_svfprintf_r+0xa06>
    e238:	2b02      	cmp	r3, #2
    e23a:	ac58      	add	r4, sp, #352	; 0x160
    e23c:	d11f      	bne.n	e27e <_svfprintf_r+0x6f2>
    e23e:	9818      	ldr	r0, [sp, #96]	; 0x60
    e240:	f002 030f 	and.w	r3, r2, #15
    e244:	0912      	lsrs	r2, r2, #4
    e246:	5cc3      	ldrb	r3, [r0, r3]
    e248:	f804 3d01 	strb.w	r3, [r4, #-1]!
    e24c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    e250:	0909      	lsrs	r1, r1, #4
    e252:	ea52 0301 	orrs.w	r3, r2, r1
    e256:	d1f3      	bne.n	e240 <_svfprintf_r+0x6b4>
    e258:	ab58      	add	r3, sp, #352	; 0x160
    e25a:	1b1b      	subs	r3, r3, r4
    e25c:	46ab      	mov	fp, r5
    e25e:	930a      	str	r3, [sp, #40]	; 0x28
    e260:	990a      	ldr	r1, [sp, #40]	; 0x28
    e262:	9808      	ldr	r0, [sp, #32]
    e264:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    e268:	4281      	cmp	r1, r0
    e26a:	f04f 0300 	mov.w	r3, #0
    e26e:	bfb8      	it	lt
    e270:	4601      	movlt	r1, r0
    e272:	930d      	str	r3, [sp, #52]	; 0x34
    e274:	9107      	str	r1, [sp, #28]
    e276:	9312      	str	r3, [sp, #72]	; 0x48
    e278:	9316      	str	r3, [sp, #88]	; 0x58
    e27a:	9311      	str	r3, [sp, #68]	; 0x44
    e27c:	e66a      	b.n	df54 <_svfprintf_r+0x3c8>
    e27e:	f002 0307 	and.w	r3, r2, #7
    e282:	08d2      	lsrs	r2, r2, #3
    e284:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    e288:	08c9      	lsrs	r1, r1, #3
    e28a:	3330      	adds	r3, #48	; 0x30
    e28c:	ea52 0601 	orrs.w	r6, r2, r1
    e290:	4620      	mov	r0, r4
    e292:	f804 3d01 	strb.w	r3, [r4, #-1]!
    e296:	d1f2      	bne.n	e27e <_svfprintf_r+0x6f2>
    e298:	07e9      	lsls	r1, r5, #31
    e29a:	d5dd      	bpl.n	e258 <_svfprintf_r+0x6cc>
    e29c:	2b30      	cmp	r3, #48	; 0x30
    e29e:	d0db      	beq.n	e258 <_svfprintf_r+0x6cc>
    e2a0:	2330      	movs	r3, #48	; 0x30
    e2a2:	3802      	subs	r0, #2
    e2a4:	f804 3c01 	strb.w	r3, [r4, #-1]
    e2a8:	ab58      	add	r3, sp, #352	; 0x160
    e2aa:	1a1b      	subs	r3, r3, r0
    e2ac:	46ab      	mov	fp, r5
    e2ae:	930a      	str	r3, [sp, #40]	; 0x28
    e2b0:	4604      	mov	r4, r0
    e2b2:	e7d5      	b.n	e260 <_svfprintf_r+0x6d4>
    e2b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e2b6:	2b65      	cmp	r3, #101	; 0x65
    e2b8:	f340 80dc 	ble.w	e474 <_svfprintf_r+0x8e8>
    e2bc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    e2c0:	2200      	movs	r2, #0
    e2c2:	2300      	movs	r3, #0
    e2c4:	f7fd fb8c 	bl	b9e0 <__aeabi_dcmpeq>
    e2c8:	2800      	cmp	r0, #0
    e2ca:	f000 81c8 	beq.w	e65e <_svfprintf_r+0xad2>
    e2ce:	2301      	movs	r3, #1
    e2d0:	f8c9 3004 	str.w	r3, [r9, #4]
    e2d4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    e2d6:	4abd      	ldr	r2, [pc, #756]	; (e5cc <_svfprintf_r+0xa40>)
    e2d8:	f8c9 2000 	str.w	r2, [r9]
    e2dc:	3301      	adds	r3, #1
    e2de:	3601      	adds	r6, #1
    e2e0:	2b07      	cmp	r3, #7
    e2e2:	962e      	str	r6, [sp, #184]	; 0xb8
    e2e4:	932d      	str	r3, [sp, #180]	; 0xb4
    e2e6:	f300 8539 	bgt.w	ed5c <_svfprintf_r+0x11d0>
    e2ea:	f109 0908 	add.w	r9, r9, #8
    e2ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    e2f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e2f2:	4293      	cmp	r3, r2
    e2f4:	f280 82c2 	bge.w	e87c <_svfprintf_r+0xcf0>
    e2f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    e2fa:	9a19      	ldr	r2, [sp, #100]	; 0x64
    e2fc:	441e      	add	r6, r3
    e2fe:	e9c9 2300 	strd	r2, r3, [r9]
    e302:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    e304:	962e      	str	r6, [sp, #184]	; 0xb8
    e306:	3301      	adds	r3, #1
    e308:	2b07      	cmp	r3, #7
    e30a:	932d      	str	r3, [sp, #180]	; 0xb4
    e30c:	f300 838d 	bgt.w	ea2a <_svfprintf_r+0xe9e>
    e310:	f109 0908 	add.w	r9, r9, #8
    e314:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e316:	1e5c      	subs	r4, r3, #1
    e318:	2c00      	cmp	r4, #0
    e31a:	f77f adbc 	ble.w	de96 <_svfprintf_r+0x30a>
    e31e:	2c10      	cmp	r4, #16
    e320:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    e322:	4dab      	ldr	r5, [pc, #684]	; (e5d0 <_svfprintf_r+0xa44>)
    e324:	f340 8555 	ble.w	edd2 <_svfprintf_r+0x1246>
    e328:	4632      	mov	r2, r6
    e32a:	2710      	movs	r7, #16
    e32c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    e32e:	e005      	b.n	e33c <_svfprintf_r+0x7b0>
    e330:	f109 0908 	add.w	r9, r9, #8
    e334:	3c10      	subs	r4, #16
    e336:	2c10      	cmp	r4, #16
    e338:	f340 854a 	ble.w	edd0 <_svfprintf_r+0x1244>
    e33c:	3301      	adds	r3, #1
    e33e:	3210      	adds	r2, #16
    e340:	2b07      	cmp	r3, #7
    e342:	e9c9 5700 	strd	r5, r7, [r9]
    e346:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    e34a:	ddf1      	ble.n	e330 <_svfprintf_r+0x7a4>
    e34c:	aa2c      	add	r2, sp, #176	; 0xb0
    e34e:	4631      	mov	r1, r6
    e350:	4650      	mov	r0, sl
    e352:	f002 fc85 	bl	10c60 <__ssprint_r>
    e356:	2800      	cmp	r0, #0
    e358:	f040 8083 	bne.w	e462 <_svfprintf_r+0x8d6>
    e35c:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    e360:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    e364:	e7e6      	b.n	e334 <_svfprintf_r+0x7a8>
    e366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e368:	9a07      	ldr	r2, [sp, #28]
    e36a:	1a9f      	subs	r7, r3, r2
    e36c:	2f00      	cmp	r7, #0
    e36e:	f77f ad79 	ble.w	de64 <_svfprintf_r+0x2d8>
    e372:	2f10      	cmp	r7, #16
    e374:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    e376:	4d96      	ldr	r5, [pc, #600]	; (e5d0 <_svfprintf_r+0xa44>)
    e378:	dd23      	ble.n	e3c2 <_svfprintf_r+0x836>
    e37a:	4632      	mov	r2, r6
    e37c:	4626      	mov	r6, r4
    e37e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    e380:	e004      	b.n	e38c <_svfprintf_r+0x800>
    e382:	3f10      	subs	r7, #16
    e384:	2f10      	cmp	r7, #16
    e386:	f109 0908 	add.w	r9, r9, #8
    e38a:	dd18      	ble.n	e3be <_svfprintf_r+0x832>
    e38c:	3301      	adds	r3, #1
    e38e:	3210      	adds	r2, #16
    e390:	2110      	movs	r1, #16
    e392:	2b07      	cmp	r3, #7
    e394:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    e398:	f8c9 5000 	str.w	r5, [r9]
    e39c:	f8c9 1004 	str.w	r1, [r9, #4]
    e3a0:	ddef      	ble.n	e382 <_svfprintf_r+0x7f6>
    e3a2:	aa2c      	add	r2, sp, #176	; 0xb0
    e3a4:	4621      	mov	r1, r4
    e3a6:	4650      	mov	r0, sl
    e3a8:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    e3ac:	f002 fc58 	bl	10c60 <__ssprint_r>
    e3b0:	2800      	cmp	r0, #0
    e3b2:	d156      	bne.n	e462 <_svfprintf_r+0x8d6>
    e3b4:	3f10      	subs	r7, #16
    e3b6:	2f10      	cmp	r7, #16
    e3b8:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    e3bc:	dce6      	bgt.n	e38c <_svfprintf_r+0x800>
    e3be:	4634      	mov	r4, r6
    e3c0:	4616      	mov	r6, r2
    e3c2:	3301      	adds	r3, #1
    e3c4:	443e      	add	r6, r7
    e3c6:	2b07      	cmp	r3, #7
    e3c8:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    e3cc:	f8c9 5000 	str.w	r5, [r9]
    e3d0:	f8c9 7004 	str.w	r7, [r9, #4]
    e3d4:	f300 8516 	bgt.w	ee04 <_svfprintf_r+0x1278>
    e3d8:	9b08      	ldr	r3, [sp, #32]
    e3da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    e3dc:	1a9f      	subs	r7, r3, r2
    e3de:	2f00      	cmp	r7, #0
    e3e0:	f109 0908 	add.w	r9, r9, #8
    e3e4:	f77f ad44 	ble.w	de70 <_svfprintf_r+0x2e4>
    e3e8:	2f10      	cmp	r7, #16
    e3ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    e3ec:	4d78      	ldr	r5, [pc, #480]	; (e5d0 <_svfprintf_r+0xa44>)
    e3ee:	dd22      	ble.n	e436 <_svfprintf_r+0x8aa>
    e3f0:	4632      	mov	r2, r6
    e3f2:	4626      	mov	r6, r4
    e3f4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    e3f6:	e004      	b.n	e402 <_svfprintf_r+0x876>
    e3f8:	3f10      	subs	r7, #16
    e3fa:	2f10      	cmp	r7, #16
    e3fc:	f109 0908 	add.w	r9, r9, #8
    e400:	dd17      	ble.n	e432 <_svfprintf_r+0x8a6>
    e402:	3301      	adds	r3, #1
    e404:	3210      	adds	r2, #16
    e406:	2110      	movs	r1, #16
    e408:	2b07      	cmp	r3, #7
    e40a:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    e40e:	f8c9 5000 	str.w	r5, [r9]
    e412:	f8c9 1004 	str.w	r1, [r9, #4]
    e416:	ddef      	ble.n	e3f8 <_svfprintf_r+0x86c>
    e418:	aa2c      	add	r2, sp, #176	; 0xb0
    e41a:	4621      	mov	r1, r4
    e41c:	4650      	mov	r0, sl
    e41e:	f002 fc1f 	bl	10c60 <__ssprint_r>
    e422:	b9f0      	cbnz	r0, e462 <_svfprintf_r+0x8d6>
    e424:	3f10      	subs	r7, #16
    e426:	2f10      	cmp	r7, #16
    e428:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    e42c:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    e430:	dce7      	bgt.n	e402 <_svfprintf_r+0x876>
    e432:	4634      	mov	r4, r6
    e434:	4616      	mov	r6, r2
    e436:	3301      	adds	r3, #1
    e438:	443e      	add	r6, r7
    e43a:	2b07      	cmp	r3, #7
    e43c:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    e440:	f8c9 5000 	str.w	r5, [r9]
    e444:	f8c9 7004 	str.w	r7, [r9, #4]
    e448:	f300 81cd 	bgt.w	e7e6 <_svfprintf_r+0xc5a>
    e44c:	f109 0908 	add.w	r9, r9, #8
    e450:	e50e      	b.n	de70 <_svfprintf_r+0x2e4>
    e452:	990c      	ldr	r1, [sp, #48]	; 0x30
    e454:	aa2c      	add	r2, sp, #176	; 0xb0
    e456:	4650      	mov	r0, sl
    e458:	f002 fc02 	bl	10c60 <__ssprint_r>
    e45c:	2800      	cmp	r0, #0
    e45e:	f43f ad2e 	beq.w	debe <_svfprintf_r+0x332>
    e462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e464:	2b00      	cmp	r3, #0
    e466:	f43f ac99 	beq.w	dd9c <_svfprintf_r+0x210>
    e46a:	990d      	ldr	r1, [sp, #52]	; 0x34
    e46c:	4650      	mov	r0, sl
    e46e:	f7fe feb5 	bl	d1dc <_free_r>
    e472:	e493      	b.n	dd9c <_svfprintf_r+0x210>
    e474:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e476:	2b01      	cmp	r3, #1
    e478:	f340 816e 	ble.w	e758 <_svfprintf_r+0xbcc>
    e47c:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
    e47e:	f8c9 4000 	str.w	r4, [r9]
    e482:	2301      	movs	r3, #1
    e484:	441f      	add	r7, r3
    e486:	3601      	adds	r6, #1
    e488:	2f07      	cmp	r7, #7
    e48a:	f8c9 3004 	str.w	r3, [r9, #4]
    e48e:	962e      	str	r6, [sp, #184]	; 0xb8
    e490:	972d      	str	r7, [sp, #180]	; 0xb4
    e492:	f300 81d9 	bgt.w	e848 <_svfprintf_r+0xcbc>
    e496:	f109 0908 	add.w	r9, r9, #8
    e49a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    e49c:	9a19      	ldr	r2, [sp, #100]	; 0x64
    e49e:	3701      	adds	r7, #1
    e4a0:	441e      	add	r6, r3
    e4a2:	2f07      	cmp	r7, #7
    e4a4:	e9c9 2300 	strd	r2, r3, [r9]
    e4a8:	e9cd 762d 	strd	r7, r6, [sp, #180]	; 0xb4
    e4ac:	f300 81d9 	bgt.w	e862 <_svfprintf_r+0xcd6>
    e4b0:	f109 0908 	add.w	r9, r9, #8
    e4b4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    e4b8:	2200      	movs	r2, #0
    e4ba:	2300      	movs	r3, #0
    e4bc:	f7fd fa90 	bl	b9e0 <__aeabi_dcmpeq>
    e4c0:	2800      	cmp	r0, #0
    e4c2:	f040 8167 	bne.w	e794 <_svfprintf_r+0xc08>
    e4c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e4c8:	3701      	adds	r7, #1
    e4ca:	3b01      	subs	r3, #1
    e4cc:	3401      	adds	r4, #1
    e4ce:	441e      	add	r6, r3
    e4d0:	2f07      	cmp	r7, #7
    e4d2:	f8c9 4000 	str.w	r4, [r9]
    e4d6:	972d      	str	r7, [sp, #180]	; 0xb4
    e4d8:	f8c9 3004 	str.w	r3, [r9, #4]
    e4dc:	962e      	str	r6, [sp, #184]	; 0xb8
    e4de:	f300 814c 	bgt.w	e77a <_svfprintf_r+0xbee>
    e4e2:	f109 0908 	add.w	r9, r9, #8
    e4e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e4e8:	f8c9 3004 	str.w	r3, [r9, #4]
    e4ec:	3701      	adds	r7, #1
    e4ee:	441e      	add	r6, r3
    e4f0:	2f07      	cmp	r7, #7
    e4f2:	ab26      	add	r3, sp, #152	; 0x98
    e4f4:	e9cd 762d 	strd	r7, r6, [sp, #180]	; 0xb4
    e4f8:	f8c9 3000 	str.w	r3, [r9]
    e4fc:	f77f acc9 	ble.w	de92 <_svfprintf_r+0x306>
    e500:	990c      	ldr	r1, [sp, #48]	; 0x30
    e502:	aa2c      	add	r2, sp, #176	; 0xb0
    e504:	4650      	mov	r0, sl
    e506:	f002 fbab 	bl	10c60 <__ssprint_r>
    e50a:	2800      	cmp	r0, #0
    e50c:	d1a9      	bne.n	e462 <_svfprintf_r+0x8d6>
    e50e:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    e510:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    e514:	e4bf      	b.n	de96 <_svfprintf_r+0x30a>
    e516:	2f10      	cmp	r7, #16
    e518:	e9dd 212d 	ldrd	r2, r1, [sp, #180]	; 0xb4
    e51c:	4d2d      	ldr	r5, [pc, #180]	; (e5d4 <_svfprintf_r+0xa48>)
    e51e:	dd27      	ble.n	e570 <_svfprintf_r+0x9e4>
    e520:	e9cd 381e 	strd	r3, r8, [sp, #120]	; 0x78
    e524:	2610      	movs	r6, #16
    e526:	46d0      	mov	r8, sl
    e528:	46a2      	mov	sl, r4
    e52a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    e52c:	e004      	b.n	e538 <_svfprintf_r+0x9ac>
    e52e:	3f10      	subs	r7, #16
    e530:	2f10      	cmp	r7, #16
    e532:	f109 0908 	add.w	r9, r9, #8
    e536:	dd16      	ble.n	e566 <_svfprintf_r+0x9da>
    e538:	3201      	adds	r2, #1
    e53a:	3110      	adds	r1, #16
    e53c:	2a07      	cmp	r2, #7
    e53e:	e9c9 5600 	strd	r5, r6, [r9]
    e542:	e9cd 212d 	strd	r2, r1, [sp, #180]	; 0xb4
    e546:	ddf2      	ble.n	e52e <_svfprintf_r+0x9a2>
    e548:	aa2c      	add	r2, sp, #176	; 0xb0
    e54a:	4621      	mov	r1, r4
    e54c:	4640      	mov	r0, r8
    e54e:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    e552:	f002 fb85 	bl	10c60 <__ssprint_r>
    e556:	2800      	cmp	r0, #0
    e558:	f040 83f2 	bne.w	ed40 <_svfprintf_r+0x11b4>
    e55c:	3f10      	subs	r7, #16
    e55e:	2f10      	cmp	r7, #16
    e560:	e9dd 212d 	ldrd	r2, r1, [sp, #180]	; 0xb4
    e564:	dce8      	bgt.n	e538 <_svfprintf_r+0x9ac>
    e566:	4654      	mov	r4, sl
    e568:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    e56a:	46c2      	mov	sl, r8
    e56c:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
    e570:	f8c9 5000 	str.w	r5, [r9]
    e574:	3201      	adds	r2, #1
    e576:	187e      	adds	r6, r7, r1
    e578:	2a07      	cmp	r2, #7
    e57a:	e9cd 262d 	strd	r2, r6, [sp, #180]	; 0xb4
    e57e:	f8c9 7004 	str.w	r7, [r9, #4]
    e582:	f300 83cc 	bgt.w	ed1e <_svfprintf_r+0x1192>
    e586:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    e58a:	f109 0908 	add.w	r9, r9, #8
    e58e:	e441      	b.n	de14 <_svfprintf_r+0x288>
    e590:	465d      	mov	r5, fp
    e592:	2a0a      	cmp	r2, #10
    e594:	f171 0300 	sbcs.w	r3, r1, #0
    e598:	f080 8329 	bcs.w	ebee <_svfprintf_r+0x1062>
    e59c:	3230      	adds	r2, #48	; 0x30
    e59e:	2301      	movs	r3, #1
    e5a0:	f88d 215f 	strb.w	r2, [sp, #351]	; 0x15f
    e5a4:	46ab      	mov	fp, r5
    e5a6:	930a      	str	r3, [sp, #40]	; 0x28
    e5a8:	f20d 145f 	addw	r4, sp, #351	; 0x15f
    e5ac:	e658      	b.n	e260 <_svfprintf_r+0x6d4>
    e5ae:	990c      	ldr	r1, [sp, #48]	; 0x30
    e5b0:	931e      	str	r3, [sp, #120]	; 0x78
    e5b2:	aa2c      	add	r2, sp, #176	; 0xb0
    e5b4:	4650      	mov	r0, sl
    e5b6:	f002 fb53 	bl	10c60 <__ssprint_r>
    e5ba:	2800      	cmp	r0, #0
    e5bc:	f47f af51 	bne.w	e462 <_svfprintf_r+0x8d6>
    e5c0:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    e5c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    e5c4:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    e5c8:	e436      	b.n	de38 <_svfprintf_r+0x2ac>
    e5ca:	bf00      	nop
    e5cc:	00012f18 	.word	0x00012f18
    e5d0:	000144ec 	.word	0x000144ec
    e5d4:	000144dc 	.word	0x000144dc
    e5d8:	990c      	ldr	r1, [sp, #48]	; 0x30
    e5da:	aa2c      	add	r2, sp, #176	; 0xb0
    e5dc:	4650      	mov	r0, sl
    e5de:	f002 fb3f 	bl	10c60 <__ssprint_r>
    e5e2:	2800      	cmp	r0, #0
    e5e4:	f47f af3d 	bne.w	e462 <_svfprintf_r+0x8d6>
    e5e8:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    e5ea:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    e5ee:	e435      	b.n	de5c <_svfprintf_r+0x2d0>
    e5f0:	2c10      	cmp	r4, #16
    e5f2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    e5f4:	4db8      	ldr	r5, [pc, #736]	; (e8d8 <_svfprintf_r+0xd4c>)
    e5f6:	dd1f      	ble.n	e638 <_svfprintf_r+0xaac>
    e5f8:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    e5fc:	2710      	movs	r7, #16
    e5fe:	e004      	b.n	e60a <_svfprintf_r+0xa7e>
    e600:	3c10      	subs	r4, #16
    e602:	2c10      	cmp	r4, #16
    e604:	f109 0908 	add.w	r9, r9, #8
    e608:	dd16      	ble.n	e638 <_svfprintf_r+0xaac>
    e60a:	3301      	adds	r3, #1
    e60c:	3610      	adds	r6, #16
    e60e:	2b07      	cmp	r3, #7
    e610:	e9c9 5700 	strd	r5, r7, [r9]
    e614:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    e618:	ddf2      	ble.n	e600 <_svfprintf_r+0xa74>
    e61a:	aa2c      	add	r2, sp, #176	; 0xb0
    e61c:	4659      	mov	r1, fp
    e61e:	4650      	mov	r0, sl
    e620:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    e624:	f002 fb1c 	bl	10c60 <__ssprint_r>
    e628:	2800      	cmp	r0, #0
    e62a:	f47f af1a 	bne.w	e462 <_svfprintf_r+0x8d6>
    e62e:	3c10      	subs	r4, #16
    e630:	2c10      	cmp	r4, #16
    e632:	e9dd 362d 	ldrd	r3, r6, [sp, #180]	; 0xb4
    e636:	dce8      	bgt.n	e60a <_svfprintf_r+0xa7e>
    e638:	3301      	adds	r3, #1
    e63a:	4426      	add	r6, r4
    e63c:	2b07      	cmp	r3, #7
    e63e:	e9c9 5400 	strd	r5, r4, [r9]
    e642:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    e646:	f77f ac2f 	ble.w	dea8 <_svfprintf_r+0x31c>
    e64a:	990c      	ldr	r1, [sp, #48]	; 0x30
    e64c:	aa2c      	add	r2, sp, #176	; 0xb0
    e64e:	4650      	mov	r0, sl
    e650:	f002 fb06 	bl	10c60 <__ssprint_r>
    e654:	2800      	cmp	r0, #0
    e656:	f47f af04 	bne.w	e462 <_svfprintf_r+0x8d6>
    e65a:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    e65c:	e424      	b.n	dea8 <_svfprintf_r+0x31c>
    e65e:	9923      	ldr	r1, [sp, #140]	; 0x8c
    e660:	2900      	cmp	r1, #0
    e662:	f340 8327 	ble.w	ecb4 <_svfprintf_r+0x1128>
    e666:	9d11      	ldr	r5, [sp, #68]	; 0x44
    e668:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e66a:	429d      	cmp	r5, r3
    e66c:	bfa8      	it	ge
    e66e:	461d      	movge	r5, r3
    e670:	2d00      	cmp	r5, #0
    e672:	dd0b      	ble.n	e68c <_svfprintf_r+0xb00>
    e674:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    e676:	3301      	adds	r3, #1
    e678:	442e      	add	r6, r5
    e67a:	2b07      	cmp	r3, #7
    e67c:	e9c9 4500 	strd	r4, r5, [r9]
    e680:	962e      	str	r6, [sp, #184]	; 0xb8
    e682:	932d      	str	r3, [sp, #180]	; 0xb4
    e684:	f300 86dd 	bgt.w	f442 <_svfprintf_r+0x18b6>
    e688:	f109 0908 	add.w	r9, r9, #8
    e68c:	9f11      	ldr	r7, [sp, #68]	; 0x44
    e68e:	2d00      	cmp	r5, #0
    e690:	bfa8      	it	ge
    e692:	1b7f      	subge	r7, r7, r5
    e694:	2f00      	cmp	r7, #0
    e696:	f300 81f4 	bgt.w	ea82 <_svfprintf_r+0xef6>
    e69a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e69c:	f41b 6f80 	tst.w	fp, #1024	; 0x400
    e6a0:	4423      	add	r3, r4
    e6a2:	930a      	str	r3, [sp, #40]	; 0x28
    e6a4:	f040 8214 	bne.w	ead0 <_svfprintf_r+0xf44>
    e6a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    e6aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e6ac:	4293      	cmp	r3, r2
    e6ae:	db03      	blt.n	e6b8 <_svfprintf_r+0xb2c>
    e6b0:	f01b 0f01 	tst.w	fp, #1
    e6b4:	f000 84a5 	beq.w	f002 <_svfprintf_r+0x1476>
    e6b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    e6ba:	9919      	ldr	r1, [sp, #100]	; 0x64
    e6bc:	4416      	add	r6, r2
    e6be:	e9c9 1200 	strd	r1, r2, [r9]
    e6c2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    e6c4:	962e      	str	r6, [sp, #184]	; 0xb8
    e6c6:	3201      	adds	r2, #1
    e6c8:	2a07      	cmp	r2, #7
    e6ca:	922d      	str	r2, [sp, #180]	; 0xb4
    e6cc:	f300 86c6 	bgt.w	f45c <_svfprintf_r+0x18d0>
    e6d0:	f109 0908 	add.w	r9, r9, #8
    e6d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    e6d6:	18a5      	adds	r5, r4, r2
    e6d8:	1ad4      	subs	r4, r2, r3
    e6da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e6dc:	1aed      	subs	r5, r5, r3
    e6de:	42a5      	cmp	r5, r4
    e6e0:	bfa8      	it	ge
    e6e2:	4625      	movge	r5, r4
    e6e4:	2d00      	cmp	r5, #0
    e6e6:	dd0d      	ble.n	e704 <_svfprintf_r+0xb78>
    e6e8:	f8c9 3000 	str.w	r3, [r9]
    e6ec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    e6ee:	f8c9 5004 	str.w	r5, [r9, #4]
    e6f2:	3301      	adds	r3, #1
    e6f4:	442e      	add	r6, r5
    e6f6:	2b07      	cmp	r3, #7
    e6f8:	962e      	str	r6, [sp, #184]	; 0xb8
    e6fa:	932d      	str	r3, [sp, #180]	; 0xb4
    e6fc:	f300 86be 	bgt.w	f47c <_svfprintf_r+0x18f0>
    e700:	f109 0908 	add.w	r9, r9, #8
    e704:	2d00      	cmp	r5, #0
    e706:	bfa8      	it	ge
    e708:	1b64      	subge	r4, r4, r5
    e70a:	2c00      	cmp	r4, #0
    e70c:	f77f abc3 	ble.w	de96 <_svfprintf_r+0x30a>
    e710:	2c10      	cmp	r4, #16
    e712:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    e714:	4d71      	ldr	r5, [pc, #452]	; (e8dc <_svfprintf_r+0xd50>)
    e716:	f340 835c 	ble.w	edd2 <_svfprintf_r+0x1246>
    e71a:	4632      	mov	r2, r6
    e71c:	2710      	movs	r7, #16
    e71e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    e720:	e005      	b.n	e72e <_svfprintf_r+0xba2>
    e722:	f109 0908 	add.w	r9, r9, #8
    e726:	3c10      	subs	r4, #16
    e728:	2c10      	cmp	r4, #16
    e72a:	f340 8351 	ble.w	edd0 <_svfprintf_r+0x1244>
    e72e:	3301      	adds	r3, #1
    e730:	3210      	adds	r2, #16
    e732:	2b07      	cmp	r3, #7
    e734:	e9c9 5700 	strd	r5, r7, [r9]
    e738:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    e73c:	ddf1      	ble.n	e722 <_svfprintf_r+0xb96>
    e73e:	aa2c      	add	r2, sp, #176	; 0xb0
    e740:	4631      	mov	r1, r6
    e742:	4650      	mov	r0, sl
    e744:	f002 fa8c 	bl	10c60 <__ssprint_r>
    e748:	2800      	cmp	r0, #0
    e74a:	f47f ae8a 	bne.w	e462 <_svfprintf_r+0x8d6>
    e74e:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    e752:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    e756:	e7e6      	b.n	e726 <_svfprintf_r+0xb9a>
    e758:	f01b 0f01 	tst.w	fp, #1
    e75c:	f47f ae8e 	bne.w	e47c <_svfprintf_r+0x8f0>
    e760:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
    e762:	f8c9 4000 	str.w	r4, [r9]
    e766:	2301      	movs	r3, #1
    e768:	441f      	add	r7, r3
    e76a:	3601      	adds	r6, #1
    e76c:	2f07      	cmp	r7, #7
    e76e:	f8c9 3004 	str.w	r3, [r9, #4]
    e772:	962e      	str	r6, [sp, #184]	; 0xb8
    e774:	972d      	str	r7, [sp, #180]	; 0xb4
    e776:	f77f aeb4 	ble.w	e4e2 <_svfprintf_r+0x956>
    e77a:	990c      	ldr	r1, [sp, #48]	; 0x30
    e77c:	aa2c      	add	r2, sp, #176	; 0xb0
    e77e:	4650      	mov	r0, sl
    e780:	f002 fa6e 	bl	10c60 <__ssprint_r>
    e784:	2800      	cmp	r0, #0
    e786:	f47f ae6c 	bne.w	e462 <_svfprintf_r+0x8d6>
    e78a:	e9dd 762d 	ldrd	r7, r6, [sp, #180]	; 0xb4
    e78e:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    e792:	e6a8      	b.n	e4e6 <_svfprintf_r+0x95a>
    e794:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    e796:	1e5c      	subs	r4, r3, #1
    e798:	2c00      	cmp	r4, #0
    e79a:	f77f aea4 	ble.w	e4e6 <_svfprintf_r+0x95a>
    e79e:	2c10      	cmp	r4, #16
    e7a0:	4d4e      	ldr	r5, [pc, #312]	; (e8dc <_svfprintf_r+0xd50>)
    e7a2:	f340 834c 	ble.w	ee3e <_svfprintf_r+0x12b2>
    e7a6:	4632      	mov	r2, r6
    e7a8:	2310      	movs	r3, #16
    e7aa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    e7ac:	e005      	b.n	e7ba <_svfprintf_r+0xc2e>
    e7ae:	f109 0908 	add.w	r9, r9, #8
    e7b2:	3c10      	subs	r4, #16
    e7b4:	2c10      	cmp	r4, #16
    e7b6:	f340 8341 	ble.w	ee3c <_svfprintf_r+0x12b0>
    e7ba:	3701      	adds	r7, #1
    e7bc:	3210      	adds	r2, #16
    e7be:	2f07      	cmp	r7, #7
    e7c0:	e9c9 5300 	strd	r5, r3, [r9]
    e7c4:	e9cd 722d 	strd	r7, r2, [sp, #180]	; 0xb4
    e7c8:	ddf1      	ble.n	e7ae <_svfprintf_r+0xc22>
    e7ca:	aa2c      	add	r2, sp, #176	; 0xb0
    e7cc:	4631      	mov	r1, r6
    e7ce:	4650      	mov	r0, sl
    e7d0:	f002 fa46 	bl	10c60 <__ssprint_r>
    e7d4:	2800      	cmp	r0, #0
    e7d6:	f47f ae44 	bne.w	e462 <_svfprintf_r+0x8d6>
    e7da:	e9dd 722d 	ldrd	r7, r2, [sp, #180]	; 0xb4
    e7de:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    e7e2:	2310      	movs	r3, #16
    e7e4:	e7e5      	b.n	e7b2 <_svfprintf_r+0xc26>
    e7e6:	990c      	ldr	r1, [sp, #48]	; 0x30
    e7e8:	aa2c      	add	r2, sp, #176	; 0xb0
    e7ea:	4650      	mov	r0, sl
    e7ec:	f002 fa38 	bl	10c60 <__ssprint_r>
    e7f0:	2800      	cmp	r0, #0
    e7f2:	f47f ae36 	bne.w	e462 <_svfprintf_r+0x8d6>
    e7f6:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    e7f8:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    e7fc:	f7ff bb38 	b.w	de70 <_svfprintf_r+0x2e4>
    e800:	f015 0310 	ands.w	r3, r5, #16
    e804:	d160      	bne.n	e8c8 <_svfprintf_r+0xd3c>
    e806:	f015 0240 	ands.w	r2, r5, #64	; 0x40
    e80a:	f000 8373 	beq.w	eef4 <_svfprintf_r+0x1368>
    e80e:	980e      	ldr	r0, [sp, #56]	; 0x38
    e810:	f850 2b04 	ldr.w	r2, [r0], #4
    e814:	900e      	str	r0, [sp, #56]	; 0x38
    e816:	4619      	mov	r1, r3
    e818:	b292      	uxth	r2, r2
    e81a:	2301      	movs	r3, #1
    e81c:	e45a      	b.n	e0d4 <_svfprintf_r+0x548>
    e81e:	f01b 0310 	ands.w	r3, fp, #16
    e822:	d168      	bne.n	e8f6 <_svfprintf_r+0xd6a>
    e824:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
    e828:	f000 8356 	beq.w	eed8 <_svfprintf_r+0x134c>
    e82c:	980e      	ldr	r0, [sp, #56]	; 0x38
    e82e:	f850 2b04 	ldr.w	r2, [r0], #4
    e832:	900e      	str	r0, [sp, #56]	; 0x38
    e834:	4619      	mov	r1, r3
    e836:	b292      	uxth	r2, r2
    e838:	e4af      	b.n	e19a <_svfprintf_r+0x60e>
    e83a:	4252      	negs	r2, r2
    e83c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    e840:	465d      	mov	r5, fp
    e842:	202d      	movs	r0, #45	; 0x2d
    e844:	2301      	movs	r3, #1
    e846:	e446      	b.n	e0d6 <_svfprintf_r+0x54a>
    e848:	990c      	ldr	r1, [sp, #48]	; 0x30
    e84a:	aa2c      	add	r2, sp, #176	; 0xb0
    e84c:	4650      	mov	r0, sl
    e84e:	f002 fa07 	bl	10c60 <__ssprint_r>
    e852:	2800      	cmp	r0, #0
    e854:	f47f ae05 	bne.w	e462 <_svfprintf_r+0x8d6>
    e858:	e9dd 762d 	ldrd	r7, r6, [sp, #180]	; 0xb4
    e85c:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    e860:	e61b      	b.n	e49a <_svfprintf_r+0x90e>
    e862:	990c      	ldr	r1, [sp, #48]	; 0x30
    e864:	aa2c      	add	r2, sp, #176	; 0xb0
    e866:	4650      	mov	r0, sl
    e868:	f002 f9fa 	bl	10c60 <__ssprint_r>
    e86c:	2800      	cmp	r0, #0
    e86e:	f47f adf8 	bne.w	e462 <_svfprintf_r+0x8d6>
    e872:	e9dd 762d 	ldrd	r7, r6, [sp, #180]	; 0xb4
    e876:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    e87a:	e61b      	b.n	e4b4 <_svfprintf_r+0x928>
    e87c:	f01b 0f01 	tst.w	fp, #1
    e880:	f43f ab09 	beq.w	de96 <_svfprintf_r+0x30a>
    e884:	e538      	b.n	e2f8 <_svfprintf_r+0x76c>
    e886:	930e      	str	r3, [sp, #56]	; 0x38
    e888:	f898 3000 	ldrb.w	r3, [r8]
    e88c:	f7ff b9d7 	b.w	dc3e <_svfprintf_r+0xb2>
    e890:	ac58      	add	r4, sp, #352	; 0x160
    e892:	e4e5      	b.n	e260 <_svfprintf_r+0x6d4>
    e894:	f41b 7f00 	tst.w	fp, #512	; 0x200
    e898:	f040 83bd 	bne.w	f016 <_svfprintf_r+0x148a>
    e89c:	f853 2b04 	ldr.w	r2, [r3], #4
    e8a0:	930e      	str	r3, [sp, #56]	; 0x38
    e8a2:	17d1      	asrs	r1, r2, #31
    e8a4:	460b      	mov	r3, r1
    e8a6:	f7ff bbc4 	b.w	e032 <_svfprintf_r+0x4a6>
    e8aa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    e8ac:	2b00      	cmp	r3, #0
    e8ae:	f43f aa4b 	beq.w	dd48 <_svfprintf_r+0x1bc>
    e8b2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    e8b4:	781b      	ldrb	r3, [r3, #0]
    e8b6:	2b00      	cmp	r3, #0
    e8b8:	f43f aa46 	beq.w	dd48 <_svfprintf_r+0x1bc>
    e8bc:	f898 3000 	ldrb.w	r3, [r8]
    e8c0:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
    e8c4:	f7ff b9bb 	b.w	dc3e <_svfprintf_r+0xb2>
    e8c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e8ca:	f853 2b04 	ldr.w	r2, [r3], #4
    e8ce:	930e      	str	r3, [sp, #56]	; 0x38
    e8d0:	2301      	movs	r3, #1
    e8d2:	f7ff bbff 	b.w	e0d4 <_svfprintf_r+0x548>
    e8d6:	bf00      	nop
    e8d8:	000144dc 	.word	0x000144dc
    e8dc:	000144ec 	.word	0x000144ec
    e8e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e8e2:	9809      	ldr	r0, [sp, #36]	; 0x24
    e8e4:	f853 1b04 	ldr.w	r1, [r3], #4
    e8e8:	930e      	str	r3, [sp, #56]	; 0x38
    e8ea:	17c2      	asrs	r2, r0, #31
    e8ec:	e9c1 0200 	strd	r0, r2, [r1]
    e8f0:	4644      	mov	r4, r8
    e8f2:	f7ff b979 	b.w	dbe8 <_svfprintf_r+0x5c>
    e8f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e8f8:	f853 2b04 	ldr.w	r2, [r3], #4
    e8fc:	930e      	str	r3, [sp, #56]	; 0x38
    e8fe:	e44c      	b.n	e19a <_svfprintf_r+0x60e>
    e900:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    e904:	4602      	mov	r2, r0
    e906:	460b      	mov	r3, r1
    e908:	f7fd f89c 	bl	ba44 <__aeabi_dcmpun>
    e90c:	2800      	cmp	r0, #0
    e90e:	f040 8675 	bne.w	f5fc <_svfprintf_r+0x1a70>
    e912:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e914:	2b61      	cmp	r3, #97	; 0x61
    e916:	f000 855b 	beq.w	f3d0 <_svfprintf_r+0x1844>
    e91a:	2b41      	cmp	r3, #65	; 0x41
    e91c:	f000 85ac 	beq.w	f478 <_svfprintf_r+0x18ec>
    e920:	9b08      	ldr	r3, [sp, #32]
    e922:	3301      	adds	r3, #1
    e924:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e926:	f023 0320 	bic.w	r3, r3, #32
    e92a:	9307      	str	r3, [sp, #28]
    e92c:	f000 8463 	beq.w	f1f6 <_svfprintf_r+0x166a>
    e930:	2b47      	cmp	r3, #71	; 0x47
    e932:	d104      	bne.n	e93e <_svfprintf_r+0xdb2>
    e934:	9b08      	ldr	r3, [sp, #32]
    e936:	2b00      	cmp	r3, #0
    e938:	bf08      	it	eq
    e93a:	2301      	moveq	r3, #1
    e93c:	9308      	str	r3, [sp, #32]
    e93e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    e942:	460a      	mov	r2, r1
    e944:	2a00      	cmp	r2, #0
    e946:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
    e94a:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
    e94e:	f2c0 85e1 	blt.w	f514 <_svfprintf_r+0x1988>
    e952:	469b      	mov	fp, r3
    e954:	2300      	movs	r3, #0
    e956:	4616      	mov	r6, r2
    e958:	931e      	str	r3, [sp, #120]	; 0x78
    e95a:	4607      	mov	r7, r0
    e95c:	930d      	str	r3, [sp, #52]	; 0x34
    e95e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e960:	3b41      	subs	r3, #65	; 0x41
    e962:	2b25      	cmp	r3, #37	; 0x25
    e964:	f200 8367 	bhi.w	f036 <_svfprintf_r+0x14aa>
    e968:	e8df f013 	tbh	[pc, r3, lsl #1]
    e96c:	03650452 	.word	0x03650452
    e970:	03650365 	.word	0x03650365
    e974:	044e0449 	.word	0x044e0449
    e978:	03650365 	.word	0x03650365
    e97c:	03650365 	.word	0x03650365
    e980:	03650365 	.word	0x03650365
    e984:	03650365 	.word	0x03650365
    e988:	03650365 	.word	0x03650365
    e98c:	03650365 	.word	0x03650365
    e990:	03650365 	.word	0x03650365
    e994:	03650365 	.word	0x03650365
    e998:	03650365 	.word	0x03650365
    e99c:	03650365 	.word	0x03650365
    e9a0:	03650365 	.word	0x03650365
    e9a4:	03650365 	.word	0x03650365
    e9a8:	03650365 	.word	0x03650365
    e9ac:	03650365 	.word	0x03650365
    e9b0:	03650365 	.word	0x03650365
    e9b4:	044e0449 	.word	0x044e0449
    e9b8:	9310      	str	r3, [sp, #64]	; 0x40
    e9ba:	465d      	mov	r5, fp
    e9bc:	f7ff bbf4 	b.w	e1a8 <_svfprintf_r+0x61c>
    e9c0:	9310      	str	r3, [sp, #64]	; 0x40
    e9c2:	4bb7      	ldr	r3, [pc, #732]	; (eca0 <_svfprintf_r+0x1114>)
    e9c4:	9318      	str	r3, [sp, #96]	; 0x60
    e9c6:	f01b 0120 	ands.w	r1, fp, #32
    e9ca:	f000 80fc 	beq.w	ebc6 <_svfprintf_r+0x103a>
    e9ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    e9d0:	3307      	adds	r3, #7
    e9d2:	f023 0307 	bic.w	r3, r3, #7
    e9d6:	6859      	ldr	r1, [r3, #4]
    e9d8:	f853 2b08 	ldr.w	r2, [r3], #8
    e9dc:	930e      	str	r3, [sp, #56]	; 0x38
    e9de:	f01b 0f01 	tst.w	fp, #1
    e9e2:	d00a      	beq.n	e9fa <_svfprintf_r+0xe6e>
    e9e4:	ea52 0301 	orrs.w	r3, r2, r1
    e9e8:	d007      	beq.n	e9fa <_svfprintf_r+0xe6e>
    e9ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e9ec:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
    e9f0:	2330      	movs	r3, #48	; 0x30
    e9f2:	f04b 0b02 	orr.w	fp, fp, #2
    e9f6:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
    e9fa:	f42b 6580 	bic.w	r5, fp, #1024	; 0x400
    e9fe:	2302      	movs	r3, #2
    ea00:	f7ff bb68 	b.w	e0d4 <_svfprintf_r+0x548>
    ea04:	9310      	str	r3, [sp, #64]	; 0x40
    ea06:	f7ff bbbc 	b.w	e182 <_svfprintf_r+0x5f6>
    ea0a:	9310      	str	r3, [sp, #64]	; 0x40
    ea0c:	4ba5      	ldr	r3, [pc, #660]	; (eca4 <_svfprintf_r+0x1118>)
    ea0e:	9318      	str	r3, [sp, #96]	; 0x60
    ea10:	e7d9      	b.n	e9c6 <_svfprintf_r+0xe3a>
    ea12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ea14:	2101      	movs	r1, #1
    ea16:	f853 2b04 	ldr.w	r2, [r3], #4
    ea1a:	9107      	str	r1, [sp, #28]
    ea1c:	f88d 20fc 	strb.w	r2, [sp, #252]	; 0xfc
    ea20:	930e      	str	r3, [sp, #56]	; 0x38
    ea22:	910a      	str	r1, [sp, #40]	; 0x28
    ea24:	ac3f      	add	r4, sp, #252	; 0xfc
    ea26:	f7ff babb 	b.w	dfa0 <_svfprintf_r+0x414>
    ea2a:	990c      	ldr	r1, [sp, #48]	; 0x30
    ea2c:	aa2c      	add	r2, sp, #176	; 0xb0
    ea2e:	4650      	mov	r0, sl
    ea30:	f002 f916 	bl	10c60 <__ssprint_r>
    ea34:	2800      	cmp	r0, #0
    ea36:	f47f ad14 	bne.w	e462 <_svfprintf_r+0x8d6>
    ea3a:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    ea3c:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    ea40:	e468      	b.n	e314 <_svfprintf_r+0x788>
    ea42:	2140      	movs	r1, #64	; 0x40
    ea44:	4650      	mov	r0, sl
    ea46:	f7fd fb55 	bl	c0f4 <_malloc_r>
    ea4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ea4c:	6018      	str	r0, [r3, #0]
    ea4e:	6118      	str	r0, [r3, #16]
    ea50:	2800      	cmp	r0, #0
    ea52:	f000 8660 	beq.w	f716 <_svfprintf_r+0x1b8a>
    ea56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ea58:	2340      	movs	r3, #64	; 0x40
    ea5a:	6153      	str	r3, [r2, #20]
    ea5c:	f7ff b8b2 	b.w	dbc4 <_svfprintf_r+0x38>
    ea60:	9b08      	ldr	r3, [sp, #32]
    ea62:	940d      	str	r4, [sp, #52]	; 0x34
    ea64:	2b06      	cmp	r3, #6
    ea66:	4621      	mov	r1, r4
    ea68:	bf28      	it	cs
    ea6a:	2306      	movcs	r3, #6
    ea6c:	9408      	str	r4, [sp, #32]
    ea6e:	4622      	mov	r2, r4
    ea70:	9307      	str	r3, [sp, #28]
    ea72:	4c8d      	ldr	r4, [pc, #564]	; (eca8 <_svfprintf_r+0x111c>)
    ea74:	970e      	str	r7, [sp, #56]	; 0x38
    ea76:	930a      	str	r3, [sp, #40]	; 0x28
    ea78:	9112      	str	r1, [sp, #72]	; 0x48
    ea7a:	9116      	str	r1, [sp, #88]	; 0x58
    ea7c:	9111      	str	r1, [sp, #68]	; 0x44
    ea7e:	f7ff ba69 	b.w	df54 <_svfprintf_r+0x3c8>
    ea82:	2f10      	cmp	r7, #16
    ea84:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    ea86:	4d89      	ldr	r5, [pc, #548]	; (ecac <_svfprintf_r+0x1120>)
    ea88:	f340 8245 	ble.w	ef16 <_svfprintf_r+0x138a>
    ea8c:	4632      	mov	r2, r6
    ea8e:	4626      	mov	r6, r4
    ea90:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    ea92:	e005      	b.n	eaa0 <_svfprintf_r+0xf14>
    ea94:	f109 0908 	add.w	r9, r9, #8
    ea98:	3f10      	subs	r7, #16
    ea9a:	2f10      	cmp	r7, #16
    ea9c:	f340 8239 	ble.w	ef12 <_svfprintf_r+0x1386>
    eaa0:	3301      	adds	r3, #1
    eaa2:	3210      	adds	r2, #16
    eaa4:	2110      	movs	r1, #16
    eaa6:	2b07      	cmp	r3, #7
    eaa8:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    eaac:	f8c9 5000 	str.w	r5, [r9]
    eab0:	f8c9 1004 	str.w	r1, [r9, #4]
    eab4:	ddee      	ble.n	ea94 <_svfprintf_r+0xf08>
    eab6:	aa2c      	add	r2, sp, #176	; 0xb0
    eab8:	4621      	mov	r1, r4
    eaba:	4650      	mov	r0, sl
    eabc:	f002 f8d0 	bl	10c60 <__ssprint_r>
    eac0:	2800      	cmp	r0, #0
    eac2:	f47f acce 	bne.w	e462 <_svfprintf_r+0x8d6>
    eac6:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    eaca:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    eace:	e7e3      	b.n	ea98 <_svfprintf_r+0xf0c>
    ead0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ead2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    ead4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    ead8:	464a      	mov	r2, r9
    eada:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    eade:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    eae2:	18e3      	adds	r3, r4, r3
    eae4:	9308      	str	r3, [sp, #32]
    eae6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
    eae8:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
    eaec:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    eaf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    eaf2:	9410      	str	r4, [sp, #64]	; 0x40
    eaf4:	4631      	mov	r1, r6
    eaf6:	f1b9 0f00 	cmp.w	r9, #0
    eafa:	d02e      	beq.n	eb5a <_svfprintf_r+0xfce>
    eafc:	bb83      	cbnz	r3, eb60 <_svfprintf_r+0xfd4>
    eafe:	3f01      	subs	r7, #1
    eb00:	f109 39ff 	add.w	r9, r9, #4294967295
    eb04:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    eb06:	e9c2 3b00 	strd	r3, fp, [r2]
    eb0a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    eb0c:	3301      	adds	r3, #1
    eb0e:	4459      	add	r1, fp
    eb10:	2b07      	cmp	r3, #7
    eb12:	912e      	str	r1, [sp, #184]	; 0xb8
    eb14:	932d      	str	r3, [sp, #180]	; 0xb4
    eb16:	dc5f      	bgt.n	ebd8 <_svfprintf_r+0x104c>
    eb18:	3208      	adds	r2, #8
    eb1a:	9b08      	ldr	r3, [sp, #32]
    eb1c:	7838      	ldrb	r0, [r7, #0]
    eb1e:	1b5b      	subs	r3, r3, r5
    eb20:	4283      	cmp	r3, r0
    eb22:	bfa8      	it	ge
    eb24:	4603      	movge	r3, r0
    eb26:	2b00      	cmp	r3, #0
    eb28:	461e      	mov	r6, r3
    eb2a:	dd0b      	ble.n	eb44 <_svfprintf_r+0xfb8>
    eb2c:	982d      	ldr	r0, [sp, #180]	; 0xb4
    eb2e:	3001      	adds	r0, #1
    eb30:	4419      	add	r1, r3
    eb32:	2807      	cmp	r0, #7
    eb34:	e9c2 5300 	strd	r5, r3, [r2]
    eb38:	912e      	str	r1, [sp, #184]	; 0xb8
    eb3a:	902d      	str	r0, [sp, #180]	; 0xb4
    eb3c:	f300 8156 	bgt.w	edec <_svfprintf_r+0x1260>
    eb40:	7838      	ldrb	r0, [r7, #0]
    eb42:	3208      	adds	r2, #8
    eb44:	2e00      	cmp	r6, #0
    eb46:	bfac      	ite	ge
    eb48:	1b84      	subge	r4, r0, r6
    eb4a:	4604      	movlt	r4, r0
    eb4c:	2c00      	cmp	r4, #0
    eb4e:	dc0b      	bgt.n	eb68 <_svfprintf_r+0xfdc>
    eb50:	4405      	add	r5, r0
    eb52:	9b12      	ldr	r3, [sp, #72]	; 0x48
    eb54:	f1b9 0f00 	cmp.w	r9, #0
    eb58:	d1d0      	bne.n	eafc <_svfprintf_r+0xf70>
    eb5a:	2b00      	cmp	r3, #0
    eb5c:	f000 83d4 	beq.w	f308 <_svfprintf_r+0x177c>
    eb60:	9b12      	ldr	r3, [sp, #72]	; 0x48
    eb62:	3b01      	subs	r3, #1
    eb64:	9312      	str	r3, [sp, #72]	; 0x48
    eb66:	e7cd      	b.n	eb04 <_svfprintf_r+0xf78>
    eb68:	2c10      	cmp	r4, #16
    eb6a:	982d      	ldr	r0, [sp, #180]	; 0xb4
    eb6c:	dd1d      	ble.n	ebaa <_svfprintf_r+0x101e>
    eb6e:	2610      	movs	r6, #16
    eb70:	e004      	b.n	eb7c <_svfprintf_r+0xff0>
    eb72:	3c10      	subs	r4, #16
    eb74:	2c10      	cmp	r4, #16
    eb76:	f102 0208 	add.w	r2, r2, #8
    eb7a:	dd16      	ble.n	ebaa <_svfprintf_r+0x101e>
    eb7c:	3001      	adds	r0, #1
    eb7e:	4b4b      	ldr	r3, [pc, #300]	; (ecac <_svfprintf_r+0x1120>)
    eb80:	3110      	adds	r1, #16
    eb82:	2807      	cmp	r0, #7
    eb84:	e9c2 3600 	strd	r3, r6, [r2]
    eb88:	e9cd 012d 	strd	r0, r1, [sp, #180]	; 0xb4
    eb8c:	ddf1      	ble.n	eb72 <_svfprintf_r+0xfe6>
    eb8e:	aa2c      	add	r2, sp, #176	; 0xb0
    eb90:	4641      	mov	r1, r8
    eb92:	4650      	mov	r0, sl
    eb94:	f002 f864 	bl	10c60 <__ssprint_r>
    eb98:	2800      	cmp	r0, #0
    eb9a:	f47f ac62 	bne.w	e462 <_svfprintf_r+0x8d6>
    eb9e:	3c10      	subs	r4, #16
    eba0:	2c10      	cmp	r4, #16
    eba2:	e9dd 012d 	ldrd	r0, r1, [sp, #180]	; 0xb4
    eba6:	aa2f      	add	r2, sp, #188	; 0xbc
    eba8:	dce8      	bgt.n	eb7c <_svfprintf_r+0xff0>
    ebaa:	3001      	adds	r0, #1
    ebac:	4b3f      	ldr	r3, [pc, #252]	; (ecac <_svfprintf_r+0x1120>)
    ebae:	6054      	str	r4, [r2, #4]
    ebb0:	4421      	add	r1, r4
    ebb2:	2807      	cmp	r0, #7
    ebb4:	e9cd 012d 	strd	r0, r1, [sp, #180]	; 0xb4
    ebb8:	6013      	str	r3, [r2, #0]
    ebba:	f300 83fb 	bgt.w	f3b4 <_svfprintf_r+0x1828>
    ebbe:	7838      	ldrb	r0, [r7, #0]
    ebc0:	3208      	adds	r2, #8
    ebc2:	4405      	add	r5, r0
    ebc4:	e7c5      	b.n	eb52 <_svfprintf_r+0xfc6>
    ebc6:	f01b 0310 	ands.w	r3, fp, #16
    ebca:	f000 80bc 	beq.w	ed46 <_svfprintf_r+0x11ba>
    ebce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ebd0:	f853 2b04 	ldr.w	r2, [r3], #4
    ebd4:	930e      	str	r3, [sp, #56]	; 0x38
    ebd6:	e702      	b.n	e9de <_svfprintf_r+0xe52>
    ebd8:	aa2c      	add	r2, sp, #176	; 0xb0
    ebda:	4641      	mov	r1, r8
    ebdc:	4650      	mov	r0, sl
    ebde:	f002 f83f 	bl	10c60 <__ssprint_r>
    ebe2:	2800      	cmp	r0, #0
    ebe4:	f47f ac3d 	bne.w	e462 <_svfprintf_r+0x8d6>
    ebe8:	992e      	ldr	r1, [sp, #184]	; 0xb8
    ebea:	aa2f      	add	r2, sp, #188	; 0xbc
    ebec:	e795      	b.n	eb1a <_svfprintf_r+0xf8e>
    ebee:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
    ebf2:	4b2f      	ldr	r3, [pc, #188]	; (ecb0 <_svfprintf_r+0x1124>)
    ebf4:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
    ebf8:	f8cd 801c 	str.w	r8, [sp, #28]
    ebfc:	f405 6780 	and.w	r7, r5, #1024	; 0x400
    ec00:	f04f 0c00 	mov.w	ip, #0
    ec04:	ac58      	add	r4, sp, #352	; 0x160
    ec06:	f04f 3bcc 	mov.w	fp, #3435973836	; 0xcccccccc
    ec0a:	950a      	str	r5, [sp, #40]	; 0x28
    ec0c:	e005      	b.n	ec1a <_svfprintf_r+0x108e>
    ec0e:	2a0a      	cmp	r2, #10
    ec10:	f171 0100 	sbcs.w	r1, r1, #0
    ec14:	d334      	bcc.n	ec80 <_svfprintf_r+0x10f4>
    ec16:	4642      	mov	r2, r8
    ec18:	4631      	mov	r1, r6
    ec1a:	1850      	adds	r0, r2, r1
    ec1c:	f140 0000 	adc.w	r0, r0, #0
    ec20:	fba3 5600 	umull	r5, r6, r3, r0
    ec24:	f026 0503 	bic.w	r5, r6, #3
    ec28:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    ec2c:	1b40      	subs	r0, r0, r5
    ec2e:	1a15      	subs	r5, r2, r0
    ec30:	f161 0e00 	sbc.w	lr, r1, #0
    ec34:	fb0b f605 	mul.w	r6, fp, r5
    ec38:	fb03 660e 	mla	r6, r3, lr, r6
    ec3c:	fba5 8503 	umull	r8, r5, r5, r3
    ec40:	442e      	add	r6, r5
    ec42:	f008 0e01 	and.w	lr, r8, #1
    ec46:	2505      	movs	r5, #5
    ec48:	fbae 5e05 	umull	r5, lr, lr, r5
    ec4c:	182d      	adds	r5, r5, r0
    ec4e:	ea4f 0858 	mov.w	r8, r8, lsr #1
    ec52:	3530      	adds	r5, #48	; 0x30
    ec54:	f804 5c01 	strb.w	r5, [r4, #-1]
    ec58:	ea48 78c6 	orr.w	r8, r8, r6, lsl #31
    ec5c:	f10c 0c01 	add.w	ip, ip, #1
    ec60:	3c01      	subs	r4, #1
    ec62:	0876      	lsrs	r6, r6, #1
    ec64:	2f00      	cmp	r7, #0
    ec66:	d0d2      	beq.n	ec0e <_svfprintf_r+0x1082>
    ec68:	f899 0000 	ldrb.w	r0, [r9]
    ec6c:	4584      	cmp	ip, r0
    ec6e:	d1ce      	bne.n	ec0e <_svfprintf_r+0x1082>
    ec70:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    ec74:	d0cb      	beq.n	ec0e <_svfprintf_r+0x1082>
    ec76:	2a0a      	cmp	r2, #10
    ec78:	f171 0100 	sbcs.w	r1, r1, #0
    ec7c:	f080 8198 	bcs.w	efb0 <_svfprintf_r+0x1424>
    ec80:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    ec82:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
    ec86:	ab58      	add	r3, sp, #352	; 0x160
    ec88:	1b1b      	subs	r3, r3, r4
    ec8a:	f8dd 801c 	ldr.w	r8, [sp, #28]
    ec8e:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    ec92:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
    ec96:	46ab      	mov	fp, r5
    ec98:	930a      	str	r3, [sp, #40]	; 0x28
    ec9a:	f7ff bae1 	b.w	e260 <_svfprintf_r+0x6d4>
    ec9e:	bf00      	nop
    eca0:	000144ac 	.word	0x000144ac
    eca4:	000144c0 	.word	0x000144c0
    eca8:	000144d4 	.word	0x000144d4
    ecac:	000144ec 	.word	0x000144ec
    ecb0:	cccccccd 	.word	0xcccccccd
    ecb4:	2301      	movs	r3, #1
    ecb6:	f8c9 3004 	str.w	r3, [r9, #4]
    ecba:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    ecbc:	4aba      	ldr	r2, [pc, #744]	; (efa8 <_svfprintf_r+0x141c>)
    ecbe:	f8c9 2000 	str.w	r2, [r9]
    ecc2:	3301      	adds	r3, #1
    ecc4:	3601      	adds	r6, #1
    ecc6:	2b07      	cmp	r3, #7
    ecc8:	962e      	str	r6, [sp, #184]	; 0xb8
    ecca:	932d      	str	r3, [sp, #180]	; 0xb4
    eccc:	f300 818c 	bgt.w	efe8 <_svfprintf_r+0x145c>
    ecd0:	f109 0908 	add.w	r9, r9, #8
    ecd4:	2900      	cmp	r1, #0
    ecd6:	f040 80be 	bne.w	ee56 <_svfprintf_r+0x12ca>
    ecda:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ecdc:	f00b 0301 	and.w	r3, fp, #1
    ece0:	4313      	orrs	r3, r2
    ece2:	f43f a8d8 	beq.w	de96 <_svfprintf_r+0x30a>
    ece6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ece8:	9919      	ldr	r1, [sp, #100]	; 0x64
    ecea:	199a      	adds	r2, r3, r6
    ecec:	e9c9 1300 	strd	r1, r3, [r9]
    ecf0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    ecf2:	922e      	str	r2, [sp, #184]	; 0xb8
    ecf4:	3301      	adds	r3, #1
    ecf6:	2b07      	cmp	r3, #7
    ecf8:	932d      	str	r3, [sp, #180]	; 0xb4
    ecfa:	f300 826e 	bgt.w	f1da <_svfprintf_r+0x164e>
    ecfe:	f109 0908 	add.w	r9, r9, #8
    ed02:	9913      	ldr	r1, [sp, #76]	; 0x4c
    ed04:	f8c9 4000 	str.w	r4, [r9]
    ed08:	3301      	adds	r3, #1
    ed0a:	188e      	adds	r6, r1, r2
    ed0c:	2b07      	cmp	r3, #7
    ed0e:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    ed12:	f8c9 1004 	str.w	r1, [r9, #4]
    ed16:	f77f a8bc 	ble.w	de92 <_svfprintf_r+0x306>
    ed1a:	f7ff bbf1 	b.w	e500 <_svfprintf_r+0x974>
    ed1e:	990c      	ldr	r1, [sp, #48]	; 0x30
    ed20:	931e      	str	r3, [sp, #120]	; 0x78
    ed22:	aa2c      	add	r2, sp, #176	; 0xb0
    ed24:	4650      	mov	r0, sl
    ed26:	f001 ff9b 	bl	10c60 <__ssprint_r>
    ed2a:	2800      	cmp	r0, #0
    ed2c:	f47f ab99 	bne.w	e462 <_svfprintf_r+0x8d6>
    ed30:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    ed34:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    ed36:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    ed38:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    ed3c:	f7ff b86a 	b.w	de14 <_svfprintf_r+0x288>
    ed40:	46c2      	mov	sl, r8
    ed42:	f7ff bb8e 	b.w	e462 <_svfprintf_r+0x8d6>
    ed46:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
    ed4a:	f000 80b8 	beq.w	eebe <_svfprintf_r+0x1332>
    ed4e:	980e      	ldr	r0, [sp, #56]	; 0x38
    ed50:	f850 2b04 	ldr.w	r2, [r0], #4
    ed54:	900e      	str	r0, [sp, #56]	; 0x38
    ed56:	4619      	mov	r1, r3
    ed58:	b292      	uxth	r2, r2
    ed5a:	e640      	b.n	e9de <_svfprintf_r+0xe52>
    ed5c:	990c      	ldr	r1, [sp, #48]	; 0x30
    ed5e:	aa2c      	add	r2, sp, #176	; 0xb0
    ed60:	4650      	mov	r0, sl
    ed62:	f001 ff7d 	bl	10c60 <__ssprint_r>
    ed66:	2800      	cmp	r0, #0
    ed68:	f47f ab7b 	bne.w	e462 <_svfprintf_r+0x8d6>
    ed6c:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    ed6e:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    ed72:	f7ff babc 	b.w	e2ee <_svfprintf_r+0x762>
    ed76:	ae2a      	add	r6, sp, #168	; 0xa8
    ed78:	2208      	movs	r2, #8
    ed7a:	2100      	movs	r1, #0
    ed7c:	4630      	mov	r0, r6
    ed7e:	9425      	str	r4, [sp, #148]	; 0x94
    ed80:	f7fe f826 	bl	cdd0 <memset>
    ed84:	9b08      	ldr	r3, [sp, #32]
    ed86:	1c5a      	adds	r2, r3, #1
    ed88:	f000 80d4 	beq.w	ef34 <_svfprintf_r+0x13a8>
    ed8c:	2500      	movs	r5, #0
    ed8e:	f8cd 801c 	str.w	r8, [sp, #28]
    ed92:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
    ed96:	46a8      	mov	r8, r5
    ed98:	469b      	mov	fp, r3
    ed9a:	e00c      	b.n	edb6 <_svfprintf_r+0x122a>
    ed9c:	a93f      	add	r1, sp, #252	; 0xfc
    ed9e:	4650      	mov	r0, sl
    eda0:	f001 ff16 	bl	10bd0 <_wcrtomb_r>
    eda4:	1c43      	adds	r3, r0, #1
    eda6:	4440      	add	r0, r8
    eda8:	f000 83b8 	beq.w	f51c <_svfprintf_r+0x1990>
    edac:	4558      	cmp	r0, fp
    edae:	dc08      	bgt.n	edc2 <_svfprintf_r+0x1236>
    edb0:	f000 8435 	beq.w	f61e <_svfprintf_r+0x1a92>
    edb4:	4680      	mov	r8, r0
    edb6:	9a25      	ldr	r2, [sp, #148]	; 0x94
    edb8:	5952      	ldr	r2, [r2, r5]
    edba:	4633      	mov	r3, r6
    edbc:	3504      	adds	r5, #4
    edbe:	2a00      	cmp	r2, #0
    edc0:	d1ec      	bne.n	ed9c <_svfprintf_r+0x1210>
    edc2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    edc6:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    edca:	f8dd 801c 	ldr.w	r8, [sp, #28]
    edce:	e0be      	b.n	ef4e <_svfprintf_r+0x13c2>
    edd0:	4616      	mov	r6, r2
    edd2:	3301      	adds	r3, #1
    edd4:	4426      	add	r6, r4
    edd6:	2b07      	cmp	r3, #7
    edd8:	f8c9 5000 	str.w	r5, [r9]
    eddc:	f8c9 4004 	str.w	r4, [r9, #4]
    ede0:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    ede4:	f77f a855 	ble.w	de92 <_svfprintf_r+0x306>
    ede8:	f7ff bb8a 	b.w	e500 <_svfprintf_r+0x974>
    edec:	aa2c      	add	r2, sp, #176	; 0xb0
    edee:	4641      	mov	r1, r8
    edf0:	4650      	mov	r0, sl
    edf2:	f001 ff35 	bl	10c60 <__ssprint_r>
    edf6:	2800      	cmp	r0, #0
    edf8:	f47f ab33 	bne.w	e462 <_svfprintf_r+0x8d6>
    edfc:	7838      	ldrb	r0, [r7, #0]
    edfe:	992e      	ldr	r1, [sp, #184]	; 0xb8
    ee00:	aa2f      	add	r2, sp, #188	; 0xbc
    ee02:	e69f      	b.n	eb44 <_svfprintf_r+0xfb8>
    ee04:	990c      	ldr	r1, [sp, #48]	; 0x30
    ee06:	aa2c      	add	r2, sp, #176	; 0xb0
    ee08:	4650      	mov	r0, sl
    ee0a:	f001 ff29 	bl	10c60 <__ssprint_r>
    ee0e:	2800      	cmp	r0, #0
    ee10:	f47f ab27 	bne.w	e462 <_svfprintf_r+0x8d6>
    ee14:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    ee16:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    ee1a:	f7ff b823 	b.w	de64 <_svfprintf_r+0x2d8>
    ee1e:	2b01      	cmp	r3, #1
    ee20:	465d      	mov	r5, fp
    ee22:	f47f aa09 	bne.w	e238 <_svfprintf_r+0x6ac>
    ee26:	f7ff bbb9 	b.w	e59c <_svfprintf_r+0xa10>
    ee2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ee2c:	9909      	ldr	r1, [sp, #36]	; 0x24
    ee2e:	f853 2b04 	ldr.w	r2, [r3], #4
    ee32:	4644      	mov	r4, r8
    ee34:	6011      	str	r1, [r2, #0]
    ee36:	930e      	str	r3, [sp, #56]	; 0x38
    ee38:	f7fe bed6 	b.w	dbe8 <_svfprintf_r+0x5c>
    ee3c:	4616      	mov	r6, r2
    ee3e:	3701      	adds	r7, #1
    ee40:	4426      	add	r6, r4
    ee42:	2f07      	cmp	r7, #7
    ee44:	e9cd 762d 	strd	r7, r6, [sp, #180]	; 0xb4
    ee48:	f8c9 5000 	str.w	r5, [r9]
    ee4c:	f8c9 4004 	str.w	r4, [r9, #4]
    ee50:	f77f ab47 	ble.w	e4e2 <_svfprintf_r+0x956>
    ee54:	e491      	b.n	e77a <_svfprintf_r+0xbee>
    ee56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ee58:	9819      	ldr	r0, [sp, #100]	; 0x64
    ee5a:	199a      	adds	r2, r3, r6
    ee5c:	e9c9 0300 	strd	r0, r3, [r9]
    ee60:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    ee62:	922e      	str	r2, [sp, #184]	; 0xb8
    ee64:	3301      	adds	r3, #1
    ee66:	2b07      	cmp	r3, #7
    ee68:	932d      	str	r3, [sp, #180]	; 0xb4
    ee6a:	f300 81b6 	bgt.w	f1da <_svfprintf_r+0x164e>
    ee6e:	f109 0908 	add.w	r9, r9, #8
    ee72:	2900      	cmp	r1, #0
    ee74:	f6bf af45 	bge.w	ed02 <_svfprintf_r+0x1176>
    ee78:	424f      	negs	r7, r1
    ee7a:	3110      	adds	r1, #16
    ee7c:	4d4b      	ldr	r5, [pc, #300]	; (efac <_svfprintf_r+0x1420>)
    ee7e:	f280 8388 	bge.w	f592 <_svfprintf_r+0x1a06>
    ee82:	4649      	mov	r1, r9
    ee84:	2610      	movs	r6, #16
    ee86:	46a1      	mov	r9, r4
    ee88:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    ee8a:	e004      	b.n	ee96 <_svfprintf_r+0x130a>
    ee8c:	3108      	adds	r1, #8
    ee8e:	3f10      	subs	r7, #16
    ee90:	2f10      	cmp	r7, #16
    ee92:	f340 837c 	ble.w	f58e <_svfprintf_r+0x1a02>
    ee96:	3301      	adds	r3, #1
    ee98:	3210      	adds	r2, #16
    ee9a:	2b07      	cmp	r3, #7
    ee9c:	e9c1 5600 	strd	r5, r6, [r1]
    eea0:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    eea4:	ddf2      	ble.n	ee8c <_svfprintf_r+0x1300>
    eea6:	aa2c      	add	r2, sp, #176	; 0xb0
    eea8:	4621      	mov	r1, r4
    eeaa:	4650      	mov	r0, sl
    eeac:	f001 fed8 	bl	10c60 <__ssprint_r>
    eeb0:	2800      	cmp	r0, #0
    eeb2:	f47f aad6 	bne.w	e462 <_svfprintf_r+0x8d6>
    eeb6:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    eeba:	a92f      	add	r1, sp, #188	; 0xbc
    eebc:	e7e7      	b.n	ee8e <_svfprintf_r+0x1302>
    eebe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    eec0:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
    eec4:	bf1a      	itte	ne
    eec6:	4611      	movne	r1, r2
    eec8:	f853 2b04 	ldrne.w	r2, [r3], #4
    eecc:	f853 2b04 	ldreq.w	r2, [r3], #4
    eed0:	930e      	str	r3, [sp, #56]	; 0x38
    eed2:	bf18      	it	ne
    eed4:	b2d2      	uxtbne	r2, r2
    eed6:	e582      	b.n	e9de <_svfprintf_r+0xe52>
    eed8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    eeda:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
    eede:	bf1a      	itte	ne
    eee0:	4611      	movne	r1, r2
    eee2:	f853 2b04 	ldrne.w	r2, [r3], #4
    eee6:	f853 2b04 	ldreq.w	r2, [r3], #4
    eeea:	930e      	str	r3, [sp, #56]	; 0x38
    eeec:	bf18      	it	ne
    eeee:	b2d2      	uxtbne	r2, r2
    eef0:	f7ff b953 	b.w	e19a <_svfprintf_r+0x60e>
    eef4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    eef6:	f415 7100 	ands.w	r1, r5, #512	; 0x200
    eefa:	bf1a      	itte	ne
    eefc:	4611      	movne	r1, r2
    eefe:	f853 2b04 	ldrne.w	r2, [r3], #4
    ef02:	f853 2b04 	ldreq.w	r2, [r3], #4
    ef06:	930e      	str	r3, [sp, #56]	; 0x38
    ef08:	bf18      	it	ne
    ef0a:	b2d2      	uxtbne	r2, r2
    ef0c:	2301      	movs	r3, #1
    ef0e:	f7ff b8e1 	b.w	e0d4 <_svfprintf_r+0x548>
    ef12:	4634      	mov	r4, r6
    ef14:	4616      	mov	r6, r2
    ef16:	3301      	adds	r3, #1
    ef18:	443e      	add	r6, r7
    ef1a:	2b07      	cmp	r3, #7
    ef1c:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    ef20:	f8c9 5000 	str.w	r5, [r9]
    ef24:	f8c9 7004 	str.w	r7, [r9, #4]
    ef28:	f300 814a 	bgt.w	f1c0 <_svfprintf_r+0x1634>
    ef2c:	f109 0908 	add.w	r9, r9, #8
    ef30:	f7ff bbb3 	b.w	e69a <_svfprintf_r+0xb0e>
    ef34:	2300      	movs	r3, #0
    ef36:	4619      	mov	r1, r3
    ef38:	9600      	str	r6, [sp, #0]
    ef3a:	aa25      	add	r2, sp, #148	; 0x94
    ef3c:	4650      	mov	r0, sl
    ef3e:	f001 fe6d 	bl	10c1c <_wcsrtombs_r>
    ef42:	4603      	mov	r3, r0
    ef44:	3301      	adds	r3, #1
    ef46:	900a      	str	r0, [sp, #40]	; 0x28
    ef48:	f000 82e8 	beq.w	f51c <_svfprintf_r+0x1990>
    ef4c:	9425      	str	r4, [sp, #148]	; 0x94
    ef4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ef50:	2b00      	cmp	r3, #0
    ef52:	d03d      	beq.n	efd0 <_svfprintf_r+0x1444>
    ef54:	2b63      	cmp	r3, #99	; 0x63
    ef56:	f300 8129 	bgt.w	f1ac <_svfprintf_r+0x1620>
    ef5a:	2300      	movs	r3, #0
    ef5c:	930d      	str	r3, [sp, #52]	; 0x34
    ef5e:	ac3f      	add	r4, sp, #252	; 0xfc
    ef60:	2208      	movs	r2, #8
    ef62:	2100      	movs	r1, #0
    ef64:	4630      	mov	r0, r6
    ef66:	f7fd ff33 	bl	cdd0 <memset>
    ef6a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    ef6c:	9600      	str	r6, [sp, #0]
    ef6e:	462b      	mov	r3, r5
    ef70:	aa25      	add	r2, sp, #148	; 0x94
    ef72:	4621      	mov	r1, r4
    ef74:	4650      	mov	r0, sl
    ef76:	f001 fe51 	bl	10c1c <_wcsrtombs_r>
    ef7a:	4285      	cmp	r5, r0
    ef7c:	f040 83c4 	bne.w	f708 <_svfprintf_r+0x1b7c>
    ef80:	990a      	ldr	r1, [sp, #40]	; 0x28
    ef82:	970e      	str	r7, [sp, #56]	; 0x38
    ef84:	2300      	movs	r3, #0
    ef86:	5463      	strb	r3, [r4, r1]
    ef88:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    ef8c:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    ef90:	9308      	str	r3, [sp, #32]
    ef92:	9107      	str	r1, [sp, #28]
    ef94:	9312      	str	r3, [sp, #72]	; 0x48
    ef96:	9316      	str	r3, [sp, #88]	; 0x58
    ef98:	9311      	str	r3, [sp, #68]	; 0x44
    ef9a:	f7fe bfdb 	b.w	df54 <_svfprintf_r+0x3c8>
    ef9e:	222d      	movs	r2, #45	; 0x2d
    efa0:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
    efa4:	f7fe bfc5 	b.w	df32 <_svfprintf_r+0x3a6>
    efa8:	00012f18 	.word	0x00012f18
    efac:	000144ec 	.word	0x000144ec
    efb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    efb2:	991c      	ldr	r1, [sp, #112]	; 0x70
    efb4:	1ae4      	subs	r4, r4, r3
    efb6:	461a      	mov	r2, r3
    efb8:	4620      	mov	r0, r4
    efba:	f7fd ff5b 	bl	ce74 <strncpy>
    efbe:	f899 2001 	ldrb.w	r2, [r9, #1]
    efc2:	4ba5      	ldr	r3, [pc, #660]	; (f258 <_svfprintf_r+0x16cc>)
    efc4:	b10a      	cbz	r2, efca <_svfprintf_r+0x143e>
    efc6:	f109 0901 	add.w	r9, r9, #1
    efca:	f04f 0c00 	mov.w	ip, #0
    efce:	e622      	b.n	ec16 <_svfprintf_r+0x108a>
    efd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    efd2:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    efd6:	970e      	str	r7, [sp, #56]	; 0x38
    efd8:	e9cd 3307 	strd	r3, r3, [sp, #28]
    efdc:	9312      	str	r3, [sp, #72]	; 0x48
    efde:	9316      	str	r3, [sp, #88]	; 0x58
    efe0:	9311      	str	r3, [sp, #68]	; 0x44
    efe2:	930d      	str	r3, [sp, #52]	; 0x34
    efe4:	f7fe bfb6 	b.w	df54 <_svfprintf_r+0x3c8>
    efe8:	990c      	ldr	r1, [sp, #48]	; 0x30
    efea:	aa2c      	add	r2, sp, #176	; 0xb0
    efec:	4650      	mov	r0, sl
    efee:	f001 fe37 	bl	10c60 <__ssprint_r>
    eff2:	2800      	cmp	r0, #0
    eff4:	f47f aa35 	bne.w	e462 <_svfprintf_r+0x8d6>
    eff8:	9923      	ldr	r1, [sp, #140]	; 0x8c
    effa:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    effc:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f000:	e668      	b.n	ecd4 <_svfprintf_r+0x1148>
    f002:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    f004:	990a      	ldr	r1, [sp, #40]	; 0x28
    f006:	18a5      	adds	r5, r4, r2
    f008:	1a6d      	subs	r5, r5, r1
    f00a:	1ad4      	subs	r4, r2, r3
    f00c:	42a5      	cmp	r5, r4
    f00e:	bfa8      	it	ge
    f010:	4625      	movge	r5, r4
    f012:	f7ff bb77 	b.w	e704 <_svfprintf_r+0xb78>
    f016:	f913 2b04 	ldrsb.w	r2, [r3], #4
    f01a:	930e      	str	r3, [sp, #56]	; 0x38
    f01c:	17d1      	asrs	r1, r2, #31
    f01e:	460b      	mov	r3, r1
    f020:	f7ff b807 	b.w	e032 <_svfprintf_r+0x4a6>
    f024:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f026:	9909      	ldr	r1, [sp, #36]	; 0x24
    f028:	f853 2b04 	ldr.w	r2, [r3], #4
    f02c:	930e      	str	r3, [sp, #56]	; 0x38
    f02e:	8011      	strh	r1, [r2, #0]
    f030:	4644      	mov	r4, r8
    f032:	f7fe bdd9 	b.w	dbe8 <_svfprintf_r+0x5c>
    f036:	9b08      	ldr	r3, [sp, #32]
    f038:	930a      	str	r3, [sp, #40]	; 0x28
    f03a:	2302      	movs	r3, #2
    f03c:	a92a      	add	r1, sp, #168	; 0xa8
    f03e:	9104      	str	r1, [sp, #16]
    f040:	a925      	add	r1, sp, #148	; 0x94
    f042:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    f044:	9103      	str	r1, [sp, #12]
    f046:	a923      	add	r1, sp, #140	; 0x8c
    f048:	9300      	str	r3, [sp, #0]
    f04a:	463a      	mov	r2, r7
    f04c:	4633      	mov	r3, r6
    f04e:	9501      	str	r5, [sp, #4]
    f050:	9102      	str	r1, [sp, #8]
    f052:	4650      	mov	r0, sl
    f054:	f000 fe60 	bl	fd18 <_dtoa_r>
    f058:	9b07      	ldr	r3, [sp, #28]
    f05a:	2b47      	cmp	r3, #71	; 0x47
    f05c:	4604      	mov	r4, r0
    f05e:	f000 81a3 	beq.w	f3a8 <_svfprintf_r+0x181c>
    f062:	2b46      	cmp	r3, #70	; 0x46
    f064:	4405      	add	r5, r0
    f066:	d105      	bne.n	f074 <_svfprintf_r+0x14e8>
    f068:	7803      	ldrb	r3, [r0, #0]
    f06a:	2b30      	cmp	r3, #48	; 0x30
    f06c:	f000 82b8 	beq.w	f5e0 <_svfprintf_r+0x1a54>
    f070:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    f072:	441d      	add	r5, r3
    f074:	4638      	mov	r0, r7
    f076:	4631      	mov	r1, r6
    f078:	2200      	movs	r2, #0
    f07a:	2300      	movs	r3, #0
    f07c:	f7fc fcb0 	bl	b9e0 <__aeabi_dcmpeq>
    f080:	2800      	cmp	r0, #0
    f082:	f000 8166 	beq.w	f352 <_svfprintf_r+0x17c6>
    f086:	462b      	mov	r3, r5
    f088:	1b1b      	subs	r3, r3, r4
    f08a:	9313      	str	r3, [sp, #76]	; 0x4c
    f08c:	9b07      	ldr	r3, [sp, #28]
    f08e:	2b47      	cmp	r3, #71	; 0x47
    f090:	f000 814a 	beq.w	f328 <_svfprintf_r+0x179c>
    f094:	9b07      	ldr	r3, [sp, #28]
    f096:	2b46      	cmp	r3, #70	; 0x46
    f098:	f000 8200 	beq.w	f49c <_svfprintf_r+0x1910>
    f09c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    f09e:	9311      	str	r3, [sp, #68]	; 0x44
    f0a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f0a2:	9a07      	ldr	r2, [sp, #28]
    f0a4:	3b01      	subs	r3, #1
    f0a6:	2a41      	cmp	r2, #65	; 0x41
    f0a8:	9323      	str	r3, [sp, #140]	; 0x8c
    f0aa:	f000 8223 	beq.w	f4f4 <_svfprintf_r+0x1968>
    f0ae:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    f0b2:	2100      	movs	r1, #0
    f0b4:	2b00      	cmp	r3, #0
    f0b6:	bfb8      	it	lt
    f0b8:	9b11      	ldrlt	r3, [sp, #68]	; 0x44
    f0ba:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
    f0be:	bfba      	itte	lt
    f0c0:	f1c3 0301 	rsblt	r3, r3, #1
    f0c4:	222d      	movlt	r2, #45	; 0x2d
    f0c6:	222b      	movge	r2, #43	; 0x2b
    f0c8:	2b09      	cmp	r3, #9
    f0ca:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
    f0ce:	f340 824f 	ble.w	f570 <_svfprintf_r+0x19e4>
    f0d2:	f10d 05af 	add.w	r5, sp, #175	; 0xaf
    f0d6:	4e61      	ldr	r6, [pc, #388]	; (f25c <_svfprintf_r+0x16d0>)
    f0d8:	462a      	mov	r2, r5
    f0da:	4610      	mov	r0, r2
    f0dc:	fb86 2103 	smull	r2, r1, r6, r3
    f0e0:	17da      	asrs	r2, r3, #31
    f0e2:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    f0e6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    f0ea:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    f0ee:	3130      	adds	r1, #48	; 0x30
    f0f0:	f800 1c01 	strb.w	r1, [r0, #-1]
    f0f4:	4619      	mov	r1, r3
    f0f6:	2963      	cmp	r1, #99	; 0x63
    f0f8:	4613      	mov	r3, r2
    f0fa:	f100 32ff 	add.w	r2, r0, #4294967295
    f0fe:	dcec      	bgt.n	f0da <_svfprintf_r+0x154e>
    f100:	3330      	adds	r3, #48	; 0x30
    f102:	b2d9      	uxtb	r1, r3
    f104:	1e83      	subs	r3, r0, #2
    f106:	429d      	cmp	r5, r3
    f108:	f802 1c01 	strb.w	r1, [r2, #-1]
    f10c:	f240 82e9 	bls.w	f6e2 <_svfprintf_r+0x1b56>
    f110:	4613      	mov	r3, r2
    f112:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
    f116:	e001      	b.n	f11c <_svfprintf_r+0x1590>
    f118:	f813 1b01 	ldrb.w	r1, [r3], #1
    f11c:	f802 1b01 	strb.w	r1, [r2], #1
    f120:	429d      	cmp	r5, r3
    f122:	d1f9      	bne.n	f118 <_svfprintf_r+0x158c>
    f124:	f10d 03b1 	add.w	r3, sp, #177	; 0xb1
    f128:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
    f12c:	1a1b      	subs	r3, r3, r0
    f12e:	4413      	add	r3, r2
    f130:	aa26      	add	r2, sp, #152	; 0x98
    f132:	1a9b      	subs	r3, r3, r2
    f134:	931b      	str	r3, [sp, #108]	; 0x6c
    f136:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f138:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    f13a:	2b01      	cmp	r3, #1
    f13c:	441a      	add	r2, r3
    f13e:	920a      	str	r2, [sp, #40]	; 0x28
    f140:	f340 8249 	ble.w	f5d6 <_svfprintf_r+0x1a4a>
    f144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f146:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    f148:	4413      	add	r3, r2
    f14a:	930a      	str	r3, [sp, #40]	; 0x28
    f14c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f14e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f150:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    f154:	f443 7b80 	orr.w	fp, r3, #256	; 0x100
    f158:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    f15c:	2300      	movs	r3, #0
    f15e:	9312      	str	r3, [sp, #72]	; 0x48
    f160:	9207      	str	r2, [sp, #28]
    f162:	9316      	str	r3, [sp, #88]	; 0x58
    f164:	9311      	str	r3, [sp, #68]	; 0x44
    f166:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    f168:	2b00      	cmp	r3, #0
    f16a:	f040 80eb 	bne.w	f344 <_svfprintf_r+0x17b8>
    f16e:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    f172:	9308      	str	r3, [sp, #32]
    f174:	f7fe beee 	b.w	df54 <_svfprintf_r+0x3c8>
    f178:	4620      	mov	r0, r4
    f17a:	970e      	str	r7, [sp, #56]	; 0x38
    f17c:	f7fd ff60 	bl	d040 <strlen>
    f180:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f182:	9308      	str	r3, [sp, #32]
    f184:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
    f188:	9312      	str	r3, [sp, #72]	; 0x48
    f18a:	9316      	str	r3, [sp, #88]	; 0x58
    f18c:	930d      	str	r3, [sp, #52]	; 0x34
    f18e:	2373      	movs	r3, #115	; 0x73
    f190:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    f194:	900a      	str	r0, [sp, #40]	; 0x28
    f196:	9107      	str	r1, [sp, #28]
    f198:	9310      	str	r3, [sp, #64]	; 0x40
    f19a:	f7fe bedb 	b.w	df54 <_svfprintf_r+0x3c8>
    f19e:	990c      	ldr	r1, [sp, #48]	; 0x30
    f1a0:	aa2c      	add	r2, sp, #176	; 0xb0
    f1a2:	4650      	mov	r0, sl
    f1a4:	f001 fd5c 	bl	10c60 <__ssprint_r>
    f1a8:	f7fe bdf8 	b.w	dd9c <_svfprintf_r+0x210>
    f1ac:	1c59      	adds	r1, r3, #1
    f1ae:	4650      	mov	r0, sl
    f1b0:	f7fc ffa0 	bl	c0f4 <_malloc_r>
    f1b4:	4604      	mov	r4, r0
    f1b6:	2800      	cmp	r0, #0
    f1b8:	f000 81b0 	beq.w	f51c <_svfprintf_r+0x1990>
    f1bc:	900d      	str	r0, [sp, #52]	; 0x34
    f1be:	e6cf      	b.n	ef60 <_svfprintf_r+0x13d4>
    f1c0:	990c      	ldr	r1, [sp, #48]	; 0x30
    f1c2:	aa2c      	add	r2, sp, #176	; 0xb0
    f1c4:	4650      	mov	r0, sl
    f1c6:	f001 fd4b 	bl	10c60 <__ssprint_r>
    f1ca:	2800      	cmp	r0, #0
    f1cc:	f47f a949 	bne.w	e462 <_svfprintf_r+0x8d6>
    f1d0:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f1d2:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f1d6:	f7ff ba60 	b.w	e69a <_svfprintf_r+0xb0e>
    f1da:	990c      	ldr	r1, [sp, #48]	; 0x30
    f1dc:	aa2c      	add	r2, sp, #176	; 0xb0
    f1de:	4650      	mov	r0, sl
    f1e0:	f001 fd3e 	bl	10c60 <__ssprint_r>
    f1e4:	2800      	cmp	r0, #0
    f1e6:	f47f a93c 	bne.w	e462 <_svfprintf_r+0x8d6>
    f1ea:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    f1ee:	9923      	ldr	r1, [sp, #140]	; 0x8c
    f1f0:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f1f4:	e63d      	b.n	ee72 <_svfprintf_r+0x12e6>
    f1f6:	2306      	movs	r3, #6
    f1f8:	9308      	str	r3, [sp, #32]
    f1fa:	f7ff bba0 	b.w	e93e <_svfprintf_r+0xdb2>
    f1fe:	9b08      	ldr	r3, [sp, #32]
    f200:	3301      	adds	r3, #1
    f202:	930a      	str	r3, [sp, #40]	; 0x28
    f204:	2302      	movs	r3, #2
    f206:	e719      	b.n	f03c <_svfprintf_r+0x14b0>
    f208:	9b08      	ldr	r3, [sp, #32]
    f20a:	930a      	str	r3, [sp, #40]	; 0x28
    f20c:	2303      	movs	r3, #3
    f20e:	e715      	b.n	f03c <_svfprintf_r+0x14b0>
    f210:	4638      	mov	r0, r7
    f212:	4631      	mov	r1, r6
    f214:	aa23      	add	r2, sp, #140	; 0x8c
    f216:	f000 fc13 	bl	fa40 <frexp>
    f21a:	2200      	movs	r2, #0
    f21c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    f220:	f003 f9ba 	bl	12598 <__aeabi_dmul>
    f224:	2200      	movs	r2, #0
    f226:	2300      	movs	r3, #0
    f228:	4606      	mov	r6, r0
    f22a:	460f      	mov	r7, r1
    f22c:	f7fc fbd8 	bl	b9e0 <__aeabi_dcmpeq>
    f230:	b108      	cbz	r0, f236 <_svfprintf_r+0x16aa>
    f232:	2301      	movs	r3, #1
    f234:	9323      	str	r3, [sp, #140]	; 0x8c
    f236:	4b0a      	ldr	r3, [pc, #40]	; (f260 <_svfprintf_r+0x16d4>)
    f238:	930a      	str	r3, [sp, #40]	; 0x28
    f23a:	9b08      	ldr	r3, [sp, #32]
    f23c:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
    f240:	3b01      	subs	r3, #1
    f242:	e9cd 8b11 	strd	r8, fp, [sp, #68]	; 0x44
    f246:	4625      	mov	r5, r4
    f248:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    f24c:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
    f250:	4698      	mov	r8, r3
    f252:	941f      	str	r4, [sp, #124]	; 0x7c
    f254:	e00d      	b.n	f272 <_svfprintf_r+0x16e6>
    f256:	bf00      	nop
    f258:	cccccccd 	.word	0xcccccccd
    f25c:	66666667 	.word	0x66666667
    f260:	000144c0 	.word	0x000144c0
    f264:	2200      	movs	r2, #0
    f266:	2300      	movs	r3, #0
    f268:	f108 38ff 	add.w	r8, r8, #4294967295
    f26c:	f7fc fbb8 	bl	b9e0 <__aeabi_dcmpeq>
    f270:	b9e8      	cbnz	r0, f2ae <_svfprintf_r+0x1722>
    f272:	4bae      	ldr	r3, [pc, #696]	; (f52c <_svfprintf_r+0x19a0>)
    f274:	2200      	movs	r2, #0
    f276:	4630      	mov	r0, r6
    f278:	4639      	mov	r1, r7
    f27a:	f003 f98d 	bl	12598 <__aeabi_dmul>
    f27e:	460f      	mov	r7, r1
    f280:	4606      	mov	r6, r0
    f282:	f003 fb9b 	bl	129bc <__aeabi_d2iz>
    f286:	4604      	mov	r4, r0
    f288:	f7fc faea 	bl	b860 <__aeabi_i2d>
    f28c:	460b      	mov	r3, r1
    f28e:	4602      	mov	r2, r0
    f290:	4639      	mov	r1, r7
    f292:	4630      	mov	r0, r6
    f294:	f7fc f996 	bl	b5c4 <__aeabi_dsub>
    f298:	f81b 3004 	ldrb.w	r3, [fp, r4]
    f29c:	f1b8 3fff 	cmp.w	r8, #4294967295
    f2a0:	46aa      	mov	sl, r5
    f2a2:	46c1      	mov	r9, r8
    f2a4:	f805 3b01 	strb.w	r3, [r5], #1
    f2a8:	4606      	mov	r6, r0
    f2aa:	460f      	mov	r7, r1
    f2ac:	d1da      	bne.n	f264 <_svfprintf_r+0x16d8>
    f2ae:	4ba0      	ldr	r3, [pc, #640]	; (f530 <_svfprintf_r+0x19a4>)
    f2b0:	2200      	movs	r2, #0
    f2b2:	4630      	mov	r0, r6
    f2b4:	4639      	mov	r1, r7
    f2b6:	e9dd 8b11 	ldrd	r8, fp, [sp, #68]	; 0x44
    f2ba:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
    f2be:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
    f2c2:	e9cd a412 	strd	sl, r4, [sp, #72]	; 0x48
    f2c6:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
    f2ca:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
    f2cc:	f7fc fbb0 	bl	ba30 <__aeabi_dcmpgt>
    f2d0:	2800      	cmp	r0, #0
    f2d2:	f040 8131 	bne.w	f538 <_svfprintf_r+0x19ac>
    f2d6:	4b96      	ldr	r3, [pc, #600]	; (f530 <_svfprintf_r+0x19a4>)
    f2d8:	4630      	mov	r0, r6
    f2da:	4639      	mov	r1, r7
    f2dc:	2200      	movs	r2, #0
    f2de:	f7fc fb7f 	bl	b9e0 <__aeabi_dcmpeq>
    f2e2:	b118      	cbz	r0, f2ec <_svfprintf_r+0x1760>
    f2e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f2e6:	07de      	lsls	r6, r3, #31
    f2e8:	f100 8126 	bmi.w	f538 <_svfprintf_r+0x19ac>
    f2ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f2ee:	2b00      	cmp	r3, #0
    f2f0:	db07      	blt.n	f302 <_svfprintf_r+0x1776>
    f2f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f2f4:	3301      	adds	r3, #1
    f2f6:	442b      	add	r3, r5
    f2f8:	2230      	movs	r2, #48	; 0x30
    f2fa:	f805 2b01 	strb.w	r2, [r5], #1
    f2fe:	42ab      	cmp	r3, r5
    f300:	d1fb      	bne.n	f2fa <_svfprintf_r+0x176e>
    f302:	1b2b      	subs	r3, r5, r4
    f304:	9313      	str	r3, [sp, #76]	; 0x4c
    f306:	e6c1      	b.n	f08c <_svfprintf_r+0x1500>
    f308:	9c10      	ldr	r4, [sp, #64]	; 0x40
    f30a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f30c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    f310:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    f314:	971a      	str	r7, [sp, #104]	; 0x68
    f316:	18e3      	adds	r3, r4, r3
    f318:	429d      	cmp	r5, r3
    f31a:	bf28      	it	cs
    f31c:	461d      	movcs	r5, r3
    f31e:	4691      	mov	r9, r2
    f320:	460e      	mov	r6, r1
    f322:	950a      	str	r5, [sp, #40]	; 0x28
    f324:	f7ff b9c0 	b.w	e6a8 <_svfprintf_r+0xb1c>
    f328:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    f32a:	9311      	str	r3, [sp, #68]	; 0x44
    f32c:	1cdd      	adds	r5, r3, #3
    f32e:	db02      	blt.n	f336 <_svfprintf_r+0x17aa>
    f330:	9a08      	ldr	r2, [sp, #32]
    f332:	4293      	cmp	r3, r2
    f334:	dd19      	ble.n	f36a <_svfprintf_r+0x17de>
    f336:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f338:	3b02      	subs	r3, #2
    f33a:	9310      	str	r3, [sp, #64]	; 0x40
    f33c:	f023 0320 	bic.w	r3, r3, #32
    f340:	9307      	str	r3, [sp, #28]
    f342:	e6ad      	b.n	f0a0 <_svfprintf_r+0x1514>
    f344:	222d      	movs	r2, #45	; 0x2d
    f346:	2300      	movs	r3, #0
    f348:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
    f34c:	9308      	str	r3, [sp, #32]
    f34e:	f7fe be04 	b.w	df5a <_svfprintf_r+0x3ce>
    f352:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    f354:	42ab      	cmp	r3, r5
    f356:	f4bf ae97 	bcs.w	f088 <_svfprintf_r+0x14fc>
    f35a:	2130      	movs	r1, #48	; 0x30
    f35c:	1c5a      	adds	r2, r3, #1
    f35e:	922a      	str	r2, [sp, #168]	; 0xa8
    f360:	7019      	strb	r1, [r3, #0]
    f362:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    f364:	429d      	cmp	r5, r3
    f366:	d8f9      	bhi.n	f35c <_svfprintf_r+0x17d0>
    f368:	e68e      	b.n	f088 <_svfprintf_r+0x14fc>
    f36a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f36c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    f36e:	4293      	cmp	r3, r2
    f370:	f2c0 80c5 	blt.w	f4fe <_svfprintf_r+0x1972>
    f374:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f376:	f013 0f01 	tst.w	r3, #1
    f37a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f37c:	f000 814d 	beq.w	f61a <_svfprintf_r+0x1a8e>
    f380:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    f382:	4413      	add	r3, r2
    f384:	930a      	str	r3, [sp, #40]	; 0x28
    f386:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f388:	0559      	lsls	r1, r3, #21
    f38a:	d503      	bpl.n	f394 <_svfprintf_r+0x1808>
    f38c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f38e:	2b00      	cmp	r3, #0
    f390:	f300 8156 	bgt.w	f640 <_svfprintf_r+0x1ab4>
    f394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f396:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f39a:	9307      	str	r3, [sp, #28]
    f39c:	2367      	movs	r3, #103	; 0x67
    f39e:	9310      	str	r3, [sp, #64]	; 0x40
    f3a0:	2300      	movs	r3, #0
    f3a2:	9312      	str	r3, [sp, #72]	; 0x48
    f3a4:	9316      	str	r3, [sp, #88]	; 0x58
    f3a6:	e6de      	b.n	f166 <_svfprintf_r+0x15da>
    f3a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f3aa:	07db      	lsls	r3, r3, #31
    f3ac:	f100 809f 	bmi.w	f4ee <_svfprintf_r+0x1962>
    f3b0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
    f3b2:	e669      	b.n	f088 <_svfprintf_r+0x14fc>
    f3b4:	aa2c      	add	r2, sp, #176	; 0xb0
    f3b6:	4641      	mov	r1, r8
    f3b8:	4650      	mov	r0, sl
    f3ba:	f001 fc51 	bl	10c60 <__ssprint_r>
    f3be:	2800      	cmp	r0, #0
    f3c0:	f47f a84f 	bne.w	e462 <_svfprintf_r+0x8d6>
    f3c4:	7838      	ldrb	r0, [r7, #0]
    f3c6:	992e      	ldr	r1, [sp, #184]	; 0xb8
    f3c8:	aa2f      	add	r2, sp, #188	; 0xbc
    f3ca:	4405      	add	r5, r0
    f3cc:	f7ff bbc1 	b.w	eb52 <_svfprintf_r+0xfc6>
    f3d0:	2378      	movs	r3, #120	; 0x78
    f3d2:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
    f3d6:	2330      	movs	r3, #48	; 0x30
    f3d8:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
    f3dc:	f04b 0302 	orr.w	r3, fp, #2
    f3e0:	930f      	str	r3, [sp, #60]	; 0x3c
    f3e2:	9b08      	ldr	r3, [sp, #32]
    f3e4:	2b63      	cmp	r3, #99	; 0x63
    f3e6:	f300 80ed 	bgt.w	f5c4 <_svfprintf_r+0x1a38>
    f3ea:	2300      	movs	r3, #0
    f3ec:	930d      	str	r3, [sp, #52]	; 0x34
    f3ee:	ac3f      	add	r4, sp, #252	; 0xfc
    f3f0:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
    f3f4:	4613      	mov	r3, r2
    f3f6:	2b00      	cmp	r3, #0
    f3f8:	f44b 7b81 	orr.w	fp, fp, #258	; 0x102
    f3fc:	db67      	blt.n	f4ce <_svfprintf_r+0x1942>
    f3fe:	461e      	mov	r6, r3
    f400:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f402:	f023 0320 	bic.w	r3, r3, #32
    f406:	9307      	str	r3, [sp, #28]
    f408:	2300      	movs	r3, #0
    f40a:	460f      	mov	r7, r1
    f40c:	931e      	str	r3, [sp, #120]	; 0x78
    f40e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f410:	2b61      	cmp	r3, #97	; 0x61
    f412:	f47f aaa4 	bne.w	e95e <_svfprintf_r+0xdd2>
    f416:	4638      	mov	r0, r7
    f418:	4631      	mov	r1, r6
    f41a:	aa23      	add	r2, sp, #140	; 0x8c
    f41c:	f000 fb10 	bl	fa40 <frexp>
    f420:	2200      	movs	r2, #0
    f422:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    f426:	f003 f8b7 	bl	12598 <__aeabi_dmul>
    f42a:	2200      	movs	r2, #0
    f42c:	2300      	movs	r3, #0
    f42e:	4606      	mov	r6, r0
    f430:	460f      	mov	r7, r1
    f432:	f7fc fad5 	bl	b9e0 <__aeabi_dcmpeq>
    f436:	b108      	cbz	r0, f43c <_svfprintf_r+0x18b0>
    f438:	2301      	movs	r3, #1
    f43a:	9323      	str	r3, [sp, #140]	; 0x8c
    f43c:	4b3d      	ldr	r3, [pc, #244]	; (f534 <_svfprintf_r+0x19a8>)
    f43e:	930a      	str	r3, [sp, #40]	; 0x28
    f440:	e6fb      	b.n	f23a <_svfprintf_r+0x16ae>
    f442:	990c      	ldr	r1, [sp, #48]	; 0x30
    f444:	aa2c      	add	r2, sp, #176	; 0xb0
    f446:	4650      	mov	r0, sl
    f448:	f001 fc0a 	bl	10c60 <__ssprint_r>
    f44c:	2800      	cmp	r0, #0
    f44e:	f47f a808 	bne.w	e462 <_svfprintf_r+0x8d6>
    f452:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f454:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f458:	f7ff b918 	b.w	e68c <_svfprintf_r+0xb00>
    f45c:	990c      	ldr	r1, [sp, #48]	; 0x30
    f45e:	aa2c      	add	r2, sp, #176	; 0xb0
    f460:	4650      	mov	r0, sl
    f462:	f001 fbfd 	bl	10c60 <__ssprint_r>
    f466:	2800      	cmp	r0, #0
    f468:	f47e affb 	bne.w	e462 <_svfprintf_r+0x8d6>
    f46c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    f46e:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f470:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f474:	f7ff b92e 	b.w	e6d4 <_svfprintf_r+0xb48>
    f478:	2358      	movs	r3, #88	; 0x58
    f47a:	e7aa      	b.n	f3d2 <_svfprintf_r+0x1846>
    f47c:	990c      	ldr	r1, [sp, #48]	; 0x30
    f47e:	aa2c      	add	r2, sp, #176	; 0xb0
    f480:	4650      	mov	r0, sl
    f482:	f001 fbed 	bl	10c60 <__ssprint_r>
    f486:	2800      	cmp	r0, #0
    f488:	f47e afeb 	bne.w	e462 <_svfprintf_r+0x8d6>
    f48c:	9c23      	ldr	r4, [sp, #140]	; 0x8c
    f48e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f490:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f492:	1b1c      	subs	r4, r3, r4
    f494:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f498:	f7ff b934 	b.w	e704 <_svfprintf_r+0xb78>
    f49c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    f49e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f4a0:	9211      	str	r2, [sp, #68]	; 0x44
    f4a2:	2a00      	cmp	r2, #0
    f4a4:	f003 0301 	and.w	r3, r3, #1
    f4a8:	f340 8108 	ble.w	f6bc <_svfprintf_r+0x1b30>
    f4ac:	9908      	ldr	r1, [sp, #32]
    f4ae:	430b      	orrs	r3, r1
    f4b0:	f040 80fd 	bne.w	f6ae <_svfprintf_r+0x1b22>
    f4b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f4b6:	930a      	str	r3, [sp, #40]	; 0x28
    f4b8:	2366      	movs	r3, #102	; 0x66
    f4ba:	9310      	str	r3, [sp, #64]	; 0x40
    f4bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f4be:	055a      	lsls	r2, r3, #21
    f4c0:	f100 80c0 	bmi.w	f644 <_svfprintf_r+0x1ab8>
    f4c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f4c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f4ca:	9307      	str	r3, [sp, #28]
    f4cc:	e768      	b.n	f3a0 <_svfprintf_r+0x1814>
    f4ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f4d0:	f023 0320 	bic.w	r3, r3, #32
    f4d4:	9307      	str	r3, [sp, #28]
    f4d6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    f4da:	f103 4600 	add.w	r6, r3, #2147483648	; 0x80000000
    f4de:	232d      	movs	r3, #45	; 0x2d
    f4e0:	4617      	mov	r7, r2
    f4e2:	931e      	str	r3, [sp, #120]	; 0x78
    f4e4:	e793      	b.n	f40e <_svfprintf_r+0x1882>
    f4e6:	2200      	movs	r2, #0
    f4e8:	9208      	str	r2, [sp, #32]
    f4ea:	f7fe bbaa 	b.w	dc42 <_svfprintf_r+0xb6>
    f4ee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    f4f0:	4425      	add	r5, r4
    f4f2:	e5bf      	b.n	f074 <_svfprintf_r+0x14e8>
    f4f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f4f6:	320f      	adds	r2, #15
    f4f8:	b2d2      	uxtb	r2, r2
    f4fa:	2101      	movs	r1, #1
    f4fc:	e5da      	b.n	f0b4 <_svfprintf_r+0x1528>
    f4fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f500:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    f502:	189a      	adds	r2, r3, r2
    f504:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f506:	920a      	str	r2, [sp, #40]	; 0x28
    f508:	2b00      	cmp	r3, #0
    f50a:	f340 808f 	ble.w	f62c <_svfprintf_r+0x1aa0>
    f50e:	2367      	movs	r3, #103	; 0x67
    f510:	9310      	str	r3, [sp, #64]	; 0x40
    f512:	e7d3      	b.n	f4bc <_svfprintf_r+0x1930>
    f514:	469b      	mov	fp, r3
    f516:	2300      	movs	r3, #0
    f518:	930d      	str	r3, [sp, #52]	; 0x34
    f51a:	e7dc      	b.n	f4d6 <_svfprintf_r+0x194a>
    f51c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f51e:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
    f522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f526:	8193      	strh	r3, [r2, #12]
    f528:	f7fe bc3b 	b.w	dda2 <_svfprintf_r+0x216>
    f52c:	40300000 	.word	0x40300000
    f530:	3fe00000 	.word	0x3fe00000
    f534:	000144ac 	.word	0x000144ac
    f538:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f53a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f53c:	932a      	str	r3, [sp, #168]	; 0xa8
    f53e:	7bd1      	ldrb	r1, [r2, #15]
    f540:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    f544:	428b      	cmp	r3, r1
    f546:	462a      	mov	r2, r5
    f548:	d109      	bne.n	f55e <_svfprintf_r+0x19d2>
    f54a:	2030      	movs	r0, #48	; 0x30
    f54c:	f802 0c01 	strb.w	r0, [r2, #-1]
    f550:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    f552:	1e53      	subs	r3, r2, #1
    f554:	932a      	str	r3, [sp, #168]	; 0xa8
    f556:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    f55a:	4299      	cmp	r1, r3
    f55c:	d0f6      	beq.n	f54c <_svfprintf_r+0x19c0>
    f55e:	2b39      	cmp	r3, #57	; 0x39
    f560:	bf0b      	itete	eq
    f562:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
    f564:	3301      	addne	r3, #1
    f566:	7a9b      	ldrbeq	r3, [r3, #10]
    f568:	b2db      	uxtbne	r3, r3
    f56a:	f802 3c01 	strb.w	r3, [r2, #-1]
    f56e:	e6c8      	b.n	f302 <_svfprintf_r+0x1776>
    f570:	2900      	cmp	r1, #0
    f572:	f040 808c 	bne.w	f68e <_svfprintf_r+0x1b02>
    f576:	2230      	movs	r2, #48	; 0x30
    f578:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
    f57c:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
    f580:	3330      	adds	r3, #48	; 0x30
    f582:	f802 3b01 	strb.w	r3, [r2], #1
    f586:	ab26      	add	r3, sp, #152	; 0x98
    f588:	1ad3      	subs	r3, r2, r3
    f58a:	931b      	str	r3, [sp, #108]	; 0x6c
    f58c:	e5d3      	b.n	f136 <_svfprintf_r+0x15aa>
    f58e:	464c      	mov	r4, r9
    f590:	4689      	mov	r9, r1
    f592:	3301      	adds	r3, #1
    f594:	443a      	add	r2, r7
    f596:	2b07      	cmp	r3, #7
    f598:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    f59c:	f8c9 5000 	str.w	r5, [r9]
    f5a0:	f8c9 7004 	str.w	r7, [r9, #4]
    f5a4:	f77f abab 	ble.w	ecfe <_svfprintf_r+0x1172>
    f5a8:	990c      	ldr	r1, [sp, #48]	; 0x30
    f5aa:	aa2c      	add	r2, sp, #176	; 0xb0
    f5ac:	4650      	mov	r0, sl
    f5ae:	f001 fb57 	bl	10c60 <__ssprint_r>
    f5b2:	2800      	cmp	r0, #0
    f5b4:	f47e af55 	bne.w	e462 <_svfprintf_r+0x8d6>
    f5b8:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    f5bc:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f5c0:	f7ff bb9f 	b.w	ed02 <_svfprintf_r+0x1176>
    f5c4:	1c59      	adds	r1, r3, #1
    f5c6:	4650      	mov	r0, sl
    f5c8:	f7fc fd94 	bl	c0f4 <_malloc_r>
    f5cc:	4604      	mov	r4, r0
    f5ce:	2800      	cmp	r0, #0
    f5d0:	d0a4      	beq.n	f51c <_svfprintf_r+0x1990>
    f5d2:	900d      	str	r0, [sp, #52]	; 0x34
    f5d4:	e70c      	b.n	f3f0 <_svfprintf_r+0x1864>
    f5d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f5d8:	07d8      	lsls	r0, r3, #31
    f5da:	f57f adb7 	bpl.w	f14c <_svfprintf_r+0x15c0>
    f5de:	e5b1      	b.n	f144 <_svfprintf_r+0x15b8>
    f5e0:	4638      	mov	r0, r7
    f5e2:	4631      	mov	r1, r6
    f5e4:	2200      	movs	r2, #0
    f5e6:	2300      	movs	r3, #0
    f5e8:	f7fc f9fa 	bl	b9e0 <__aeabi_dcmpeq>
    f5ec:	2800      	cmp	r0, #0
    f5ee:	f47f ad3f 	bne.w	f070 <_svfprintf_r+0x14e4>
    f5f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f5f4:	f1c3 0301 	rsb	r3, r3, #1
    f5f8:	9323      	str	r3, [sp, #140]	; 0x8c
    f5fa:	e53a      	b.n	f072 <_svfprintf_r+0x14e6>
    f5fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
    f5fe:	4c4a      	ldr	r4, [pc, #296]	; (f728 <_svfprintf_r+0x1b9c>)
    f600:	2b00      	cmp	r3, #0
    f602:	bfb4      	ite	lt
    f604:	222d      	movlt	r2, #45	; 0x2d
    f606:	f89d 2087 	ldrbge.w	r2, [sp, #135]	; 0x87
    f60a:	4b48      	ldr	r3, [pc, #288]	; (f72c <_svfprintf_r+0x1ba0>)
    f60c:	bfb8      	it	lt
    f60e:	f88d 2087 	strblt.w	r2, [sp, #135]	; 0x87
    f612:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    f616:	f7fe bc90 	b.w	df3a <_svfprintf_r+0x3ae>
    f61a:	930a      	str	r3, [sp, #40]	; 0x28
    f61c:	e6b3      	b.n	f386 <_svfprintf_r+0x17fa>
    f61e:	9b08      	ldr	r3, [sp, #32]
    f620:	f8dd 801c 	ldr.w	r8, [sp, #28]
    f624:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    f628:	930a      	str	r3, [sp, #40]	; 0x28
    f62a:	e490      	b.n	ef4e <_svfprintf_r+0x13c2>
    f62c:	f1c3 0301 	rsb	r3, r3, #1
    f630:	441a      	add	r2, r3
    f632:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    f636:	9307      	str	r3, [sp, #28]
    f638:	2367      	movs	r3, #103	; 0x67
    f63a:	920a      	str	r2, [sp, #40]	; 0x28
    f63c:	9310      	str	r3, [sp, #64]	; 0x40
    f63e:	e6af      	b.n	f3a0 <_svfprintf_r+0x1814>
    f640:	2367      	movs	r3, #103	; 0x67
    f642:	9310      	str	r3, [sp, #64]	; 0x40
    f644:	991a      	ldr	r1, [sp, #104]	; 0x68
    f646:	780b      	ldrb	r3, [r1, #0]
    f648:	2bff      	cmp	r3, #255	; 0xff
    f64a:	d059      	beq.n	f700 <_svfprintf_r+0x1b74>
    f64c:	2500      	movs	r5, #0
    f64e:	9a11      	ldr	r2, [sp, #68]	; 0x44
    f650:	4628      	mov	r0, r5
    f652:	e003      	b.n	f65c <_svfprintf_r+0x1ad0>
    f654:	3001      	adds	r0, #1
    f656:	3101      	adds	r1, #1
    f658:	2bff      	cmp	r3, #255	; 0xff
    f65a:	d008      	beq.n	f66e <_svfprintf_r+0x1ae2>
    f65c:	4293      	cmp	r3, r2
    f65e:	da06      	bge.n	f66e <_svfprintf_r+0x1ae2>
    f660:	1ad2      	subs	r2, r2, r3
    f662:	784b      	ldrb	r3, [r1, #1]
    f664:	2b00      	cmp	r3, #0
    f666:	d1f5      	bne.n	f654 <_svfprintf_r+0x1ac8>
    f668:	780b      	ldrb	r3, [r1, #0]
    f66a:	3501      	adds	r5, #1
    f66c:	e7f4      	b.n	f658 <_svfprintf_r+0x1acc>
    f66e:	9211      	str	r2, [sp, #68]	; 0x44
    f670:	911a      	str	r1, [sp, #104]	; 0x68
    f672:	9016      	str	r0, [sp, #88]	; 0x58
    f674:	9512      	str	r5, [sp, #72]	; 0x48
    f676:	9a12      	ldr	r2, [sp, #72]	; 0x48
    f678:	9b16      	ldr	r3, [sp, #88]	; 0x58
    f67a:	991d      	ldr	r1, [sp, #116]	; 0x74
    f67c:	4413      	add	r3, r2
    f67e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f680:	fb01 2303 	mla	r3, r1, r3, r2
    f684:	930a      	str	r3, [sp, #40]	; 0x28
    f686:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f68a:	9307      	str	r3, [sp, #28]
    f68c:	e56b      	b.n	f166 <_svfprintf_r+0x15da>
    f68e:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
    f692:	e775      	b.n	f580 <_svfprintf_r+0x19f4>
    f694:	9b08      	ldr	r3, [sp, #32]
    f696:	9307      	str	r3, [sp, #28]
    f698:	930a      	str	r3, [sp, #40]	; 0x28
    f69a:	2373      	movs	r3, #115	; 0x73
    f69c:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    f6a0:	970e      	str	r7, [sp, #56]	; 0x38
    f6a2:	9008      	str	r0, [sp, #32]
    f6a4:	9012      	str	r0, [sp, #72]	; 0x48
    f6a6:	9016      	str	r0, [sp, #88]	; 0x58
    f6a8:	9310      	str	r3, [sp, #64]	; 0x40
    f6aa:	f7fe bc53 	b.w	df54 <_svfprintf_r+0x3c8>
    f6ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    f6b0:	18d5      	adds	r5, r2, r3
    f6b2:	4429      	add	r1, r5
    f6b4:	2366      	movs	r3, #102	; 0x66
    f6b6:	910a      	str	r1, [sp, #40]	; 0x28
    f6b8:	9310      	str	r3, [sp, #64]	; 0x40
    f6ba:	e6ff      	b.n	f4bc <_svfprintf_r+0x1930>
    f6bc:	9a08      	ldr	r2, [sp, #32]
    f6be:	4313      	orrs	r3, r2
    f6c0:	d105      	bne.n	f6ce <_svfprintf_r+0x1b42>
    f6c2:	2301      	movs	r3, #1
    f6c4:	2266      	movs	r2, #102	; 0x66
    f6c6:	9307      	str	r3, [sp, #28]
    f6c8:	9210      	str	r2, [sp, #64]	; 0x40
    f6ca:	930a      	str	r3, [sp, #40]	; 0x28
    f6cc:	e668      	b.n	f3a0 <_svfprintf_r+0x1814>
    f6ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    f6d0:	1c5d      	adds	r5, r3, #1
    f6d2:	442a      	add	r2, r5
    f6d4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    f6d8:	9307      	str	r3, [sp, #28]
    f6da:	2366      	movs	r3, #102	; 0x66
    f6dc:	920a      	str	r2, [sp, #40]	; 0x28
    f6de:	9310      	str	r3, [sp, #64]	; 0x40
    f6e0:	e65e      	b.n	f3a0 <_svfprintf_r+0x1814>
    f6e2:	2302      	movs	r3, #2
    f6e4:	931b      	str	r3, [sp, #108]	; 0x6c
    f6e6:	e526      	b.n	f136 <_svfprintf_r+0x15aa>
    f6e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f6ea:	f898 3001 	ldrb.w	r3, [r8, #1]
    f6ee:	4688      	mov	r8, r1
    f6f0:	f852 1b04 	ldr.w	r1, [r2], #4
    f6f4:	920e      	str	r2, [sp, #56]	; 0x38
    f6f6:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
    f6fa:	9108      	str	r1, [sp, #32]
    f6fc:	f7fe ba9f 	b.w	dc3e <_svfprintf_r+0xb2>
    f700:	2300      	movs	r3, #0
    f702:	9312      	str	r3, [sp, #72]	; 0x48
    f704:	9316      	str	r3, [sp, #88]	; 0x58
    f706:	e7b6      	b.n	f676 <_svfprintf_r+0x1aea>
    f708:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f70a:	8993      	ldrh	r3, [r2, #12]
    f70c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f710:	8193      	strh	r3, [r2, #12]
    f712:	f7fe bea6 	b.w	e462 <_svfprintf_r+0x8d6>
    f716:	230c      	movs	r3, #12
    f718:	f8ca 3000 	str.w	r3, [sl]
    f71c:	f04f 33ff 	mov.w	r3, #4294967295
    f720:	9309      	str	r3, [sp, #36]	; 0x24
    f722:	f7fe bb45 	b.w	ddb0 <_svfprintf_r+0x224>
    f726:	bf00      	nop
    f728:	000144a8 	.word	0x000144a8
    f72c:	0001402c 	.word	0x0001402c

0000f730 <_fclose_r>:
    f730:	b570      	push	{r4, r5, r6, lr}
    f732:	2900      	cmp	r1, #0
    f734:	d04b      	beq.n	f7ce <_fclose_r+0x9e>
    f736:	4606      	mov	r6, r0
    f738:	460c      	mov	r4, r1
    f73a:	b110      	cbz	r0, f742 <_fclose_r+0x12>
    f73c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    f73e:	2b00      	cmp	r3, #0
    f740:	d048      	beq.n	f7d4 <_fclose_r+0xa4>
    f742:	6e63      	ldr	r3, [r4, #100]	; 0x64
    f744:	07d8      	lsls	r0, r3, #31
    f746:	d534      	bpl.n	f7b2 <_fclose_r+0x82>
    f748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    f74c:	2b00      	cmp	r3, #0
    f74e:	d03e      	beq.n	f7ce <_fclose_r+0x9e>
    f750:	4621      	mov	r1, r4
    f752:	4630      	mov	r0, r6
    f754:	f000 f850 	bl	f7f8 <__sflush_r>
    f758:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    f75a:	4605      	mov	r5, r0
    f75c:	b133      	cbz	r3, f76c <_fclose_r+0x3c>
    f75e:	69e1      	ldr	r1, [r4, #28]
    f760:	4630      	mov	r0, r6
    f762:	4798      	blx	r3
    f764:	2800      	cmp	r0, #0
    f766:	bfb8      	it	lt
    f768:	f04f 35ff 	movlt.w	r5, #4294967295
    f76c:	89a3      	ldrh	r3, [r4, #12]
    f76e:	061a      	lsls	r2, r3, #24
    f770:	d43c      	bmi.n	f7ec <_fclose_r+0xbc>
    f772:	6b21      	ldr	r1, [r4, #48]	; 0x30
    f774:	b141      	cbz	r1, f788 <_fclose_r+0x58>
    f776:	f104 0340 	add.w	r3, r4, #64	; 0x40
    f77a:	4299      	cmp	r1, r3
    f77c:	d002      	beq.n	f784 <_fclose_r+0x54>
    f77e:	4630      	mov	r0, r6
    f780:	f7fd fd2c 	bl	d1dc <_free_r>
    f784:	2300      	movs	r3, #0
    f786:	6323      	str	r3, [r4, #48]	; 0x30
    f788:	6c61      	ldr	r1, [r4, #68]	; 0x44
    f78a:	b121      	cbz	r1, f796 <_fclose_r+0x66>
    f78c:	4630      	mov	r0, r6
    f78e:	f7fd fd25 	bl	d1dc <_free_r>
    f792:	2300      	movs	r3, #0
    f794:	6463      	str	r3, [r4, #68]	; 0x44
    f796:	f7fd fa09 	bl	cbac <__sfp_lock_acquire>
    f79a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    f79c:	2200      	movs	r2, #0
    f79e:	07db      	lsls	r3, r3, #31
    f7a0:	81a2      	strh	r2, [r4, #12]
    f7a2:	d51f      	bpl.n	f7e4 <_fclose_r+0xb4>
    f7a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    f7a6:	f7fd fc2f 	bl	d008 <__retarget_lock_close_recursive>
    f7aa:	f7fd fa05 	bl	cbb8 <__sfp_lock_release>
    f7ae:	4628      	mov	r0, r5
    f7b0:	bd70      	pop	{r4, r5, r6, pc}
    f7b2:	89a3      	ldrh	r3, [r4, #12]
    f7b4:	0599      	lsls	r1, r3, #22
    f7b6:	d4cb      	bmi.n	f750 <_fclose_r+0x20>
    f7b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
    f7ba:	f7fd fc27 	bl	d00c <__retarget_lock_acquire_recursive>
    f7be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    f7c2:	2b00      	cmp	r3, #0
    f7c4:	d1c4      	bne.n	f750 <_fclose_r+0x20>
    f7c6:	6e65      	ldr	r5, [r4, #100]	; 0x64
    f7c8:	f015 0501 	ands.w	r5, r5, #1
    f7cc:	d005      	beq.n	f7da <_fclose_r+0xaa>
    f7ce:	2500      	movs	r5, #0
    f7d0:	4628      	mov	r0, r5
    f7d2:	bd70      	pop	{r4, r5, r6, pc}
    f7d4:	f7fd f9cc 	bl	cb70 <__sinit>
    f7d8:	e7b3      	b.n	f742 <_fclose_r+0x12>
    f7da:	6da0      	ldr	r0, [r4, #88]	; 0x58
    f7dc:	f7fd fc18 	bl	d010 <__retarget_lock_release_recursive>
    f7e0:	4628      	mov	r0, r5
    f7e2:	bd70      	pop	{r4, r5, r6, pc}
    f7e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    f7e6:	f7fd fc13 	bl	d010 <__retarget_lock_release_recursive>
    f7ea:	e7db      	b.n	f7a4 <_fclose_r+0x74>
    f7ec:	6921      	ldr	r1, [r4, #16]
    f7ee:	4630      	mov	r0, r6
    f7f0:	f7fd fcf4 	bl	d1dc <_free_r>
    f7f4:	e7bd      	b.n	f772 <_fclose_r+0x42>
    f7f6:	bf00      	nop

0000f7f8 <__sflush_r>:
    f7f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
    f7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f7fe:	460c      	mov	r4, r1
    f800:	0711      	lsls	r1, r2, #28
    f802:	4607      	mov	r7, r0
    f804:	d442      	bmi.n	f88c <__sflush_r+0x94>
    f806:	6863      	ldr	r3, [r4, #4]
    f808:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    f80c:	2b00      	cmp	r3, #0
    f80e:	81a2      	strh	r2, [r4, #12]
    f810:	dd59      	ble.n	f8c6 <__sflush_r+0xce>
    f812:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    f814:	2d00      	cmp	r5, #0
    f816:	d054      	beq.n	f8c2 <__sflush_r+0xca>
    f818:	2300      	movs	r3, #0
    f81a:	683e      	ldr	r6, [r7, #0]
    f81c:	603b      	str	r3, [r7, #0]
    f81e:	b293      	uxth	r3, r2
    f820:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
    f824:	d153      	bne.n	f8ce <__sflush_r+0xd6>
    f826:	69e1      	ldr	r1, [r4, #28]
    f828:	2301      	movs	r3, #1
    f82a:	4638      	mov	r0, r7
    f82c:	47a8      	blx	r5
    f82e:	1c42      	adds	r2, r0, #1
    f830:	d063      	beq.n	f8fa <__sflush_r+0x102>
    f832:	89a3      	ldrh	r3, [r4, #12]
    f834:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    f836:	075b      	lsls	r3, r3, #29
    f838:	d505      	bpl.n	f846 <__sflush_r+0x4e>
    f83a:	6863      	ldr	r3, [r4, #4]
    f83c:	1ac0      	subs	r0, r0, r3
    f83e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    f840:	b10b      	cbz	r3, f846 <__sflush_r+0x4e>
    f842:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    f844:	1ac0      	subs	r0, r0, r3
    f846:	69e1      	ldr	r1, [r4, #28]
    f848:	4602      	mov	r2, r0
    f84a:	2300      	movs	r3, #0
    f84c:	4638      	mov	r0, r7
    f84e:	47a8      	blx	r5
    f850:	1c41      	adds	r1, r0, #1
    f852:	d13e      	bne.n	f8d2 <__sflush_r+0xda>
    f854:	683b      	ldr	r3, [r7, #0]
    f856:	2b00      	cmp	r3, #0
    f858:	d03b      	beq.n	f8d2 <__sflush_r+0xda>
    f85a:	2b1d      	cmp	r3, #29
    f85c:	d001      	beq.n	f862 <__sflush_r+0x6a>
    f85e:	2b16      	cmp	r3, #22
    f860:	d152      	bne.n	f908 <__sflush_r+0x110>
    f862:	89a3      	ldrh	r3, [r4, #12]
    f864:	6922      	ldr	r2, [r4, #16]
    f866:	6022      	str	r2, [r4, #0]
    f868:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    f86c:	2100      	movs	r1, #0
    f86e:	6061      	str	r1, [r4, #4]
    f870:	81a3      	strh	r3, [r4, #12]
    f872:	6b21      	ldr	r1, [r4, #48]	; 0x30
    f874:	603e      	str	r6, [r7, #0]
    f876:	b321      	cbz	r1, f8c2 <__sflush_r+0xca>
    f878:	f104 0340 	add.w	r3, r4, #64	; 0x40
    f87c:	4299      	cmp	r1, r3
    f87e:	d002      	beq.n	f886 <__sflush_r+0x8e>
    f880:	4638      	mov	r0, r7
    f882:	f7fd fcab 	bl	d1dc <_free_r>
    f886:	2000      	movs	r0, #0
    f888:	6320      	str	r0, [r4, #48]	; 0x30
    f88a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f88c:	6926      	ldr	r6, [r4, #16]
    f88e:	b1c6      	cbz	r6, f8c2 <__sflush_r+0xca>
    f890:	b293      	uxth	r3, r2
    f892:	6825      	ldr	r5, [r4, #0]
    f894:	6026      	str	r6, [r4, #0]
    f896:	079a      	lsls	r2, r3, #30
    f898:	bf0c      	ite	eq
    f89a:	6963      	ldreq	r3, [r4, #20]
    f89c:	2300      	movne	r3, #0
    f89e:	1bad      	subs	r5, r5, r6
    f8a0:	60a3      	str	r3, [r4, #8]
    f8a2:	e00c      	b.n	f8be <__sflush_r+0xc6>
    f8a4:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
    f8a8:	69e1      	ldr	r1, [r4, #28]
    f8aa:	462b      	mov	r3, r5
    f8ac:	4632      	mov	r2, r6
    f8ae:	4638      	mov	r0, r7
    f8b0:	47e0      	blx	ip
    f8b2:	f1b0 0c00 	subs.w	ip, r0, #0
    f8b6:	eba5 050c 	sub.w	r5, r5, ip
    f8ba:	4466      	add	r6, ip
    f8bc:	dd16      	ble.n	f8ec <__sflush_r+0xf4>
    f8be:	2d00      	cmp	r5, #0
    f8c0:	dcf0      	bgt.n	f8a4 <__sflush_r+0xac>
    f8c2:	2000      	movs	r0, #0
    f8c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f8c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    f8c8:	2b00      	cmp	r3, #0
    f8ca:	dca2      	bgt.n	f812 <__sflush_r+0x1a>
    f8cc:	e7f9      	b.n	f8c2 <__sflush_r+0xca>
    f8ce:	6d20      	ldr	r0, [r4, #80]	; 0x50
    f8d0:	e7b1      	b.n	f836 <__sflush_r+0x3e>
    f8d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
    f8d6:	6922      	ldr	r2, [r4, #16]
    f8d8:	6022      	str	r2, [r4, #0]
    f8da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    f8de:	81a3      	strh	r3, [r4, #12]
    f8e0:	2200      	movs	r2, #0
    f8e2:	04db      	lsls	r3, r3, #19
    f8e4:	6062      	str	r2, [r4, #4]
    f8e6:	d5c4      	bpl.n	f872 <__sflush_r+0x7a>
    f8e8:	6520      	str	r0, [r4, #80]	; 0x50
    f8ea:	e7c2      	b.n	f872 <__sflush_r+0x7a>
    f8ec:	89a3      	ldrh	r3, [r4, #12]
    f8ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f8f2:	f04f 30ff 	mov.w	r0, #4294967295
    f8f6:	81a3      	strh	r3, [r4, #12]
    f8f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f8fa:	683b      	ldr	r3, [r7, #0]
    f8fc:	2b00      	cmp	r3, #0
    f8fe:	d098      	beq.n	f832 <__sflush_r+0x3a>
    f900:	2b1d      	cmp	r3, #29
    f902:	d006      	beq.n	f912 <__sflush_r+0x11a>
    f904:	2b16      	cmp	r3, #22
    f906:	d004      	beq.n	f912 <__sflush_r+0x11a>
    f908:	89a3      	ldrh	r3, [r4, #12]
    f90a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    f90e:	81a3      	strh	r3, [r4, #12]
    f910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f912:	603e      	str	r6, [r7, #0]
    f914:	e7d5      	b.n	f8c2 <__sflush_r+0xca>
    f916:	bf00      	nop

0000f918 <_fflush_r>:
    f918:	b538      	push	{r3, r4, r5, lr}
    f91a:	460c      	mov	r4, r1
    f91c:	4605      	mov	r5, r0
    f91e:	b108      	cbz	r0, f924 <_fflush_r+0xc>
    f920:	6b43      	ldr	r3, [r0, #52]	; 0x34
    f922:	b303      	cbz	r3, f966 <_fflush_r+0x4e>
    f924:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    f928:	b188      	cbz	r0, f94e <_fflush_r+0x36>
    f92a:	6e63      	ldr	r3, [r4, #100]	; 0x64
    f92c:	07db      	lsls	r3, r3, #31
    f92e:	d401      	bmi.n	f934 <_fflush_r+0x1c>
    f930:	0581      	lsls	r1, r0, #22
    f932:	d50f      	bpl.n	f954 <_fflush_r+0x3c>
    f934:	4628      	mov	r0, r5
    f936:	4621      	mov	r1, r4
    f938:	f7ff ff5e 	bl	f7f8 <__sflush_r>
    f93c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    f93e:	07da      	lsls	r2, r3, #31
    f940:	4605      	mov	r5, r0
    f942:	d402      	bmi.n	f94a <_fflush_r+0x32>
    f944:	89a3      	ldrh	r3, [r4, #12]
    f946:	059b      	lsls	r3, r3, #22
    f948:	d508      	bpl.n	f95c <_fflush_r+0x44>
    f94a:	4628      	mov	r0, r5
    f94c:	bd38      	pop	{r3, r4, r5, pc}
    f94e:	4605      	mov	r5, r0
    f950:	4628      	mov	r0, r5
    f952:	bd38      	pop	{r3, r4, r5, pc}
    f954:	6da0      	ldr	r0, [r4, #88]	; 0x58
    f956:	f7fd fb59 	bl	d00c <__retarget_lock_acquire_recursive>
    f95a:	e7eb      	b.n	f934 <_fflush_r+0x1c>
    f95c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    f95e:	f7fd fb57 	bl	d010 <__retarget_lock_release_recursive>
    f962:	4628      	mov	r0, r5
    f964:	bd38      	pop	{r3, r4, r5, pc}
    f966:	f7fd f903 	bl	cb70 <__sinit>
    f96a:	e7db      	b.n	f924 <_fflush_r+0xc>

0000f96c <_localeconv_r>:
    f96c:	4800      	ldr	r0, [pc, #0]	; (f970 <_localeconv_r+0x4>)
    f96e:	4770      	bx	lr
    f970:	1fff8dd4 	.word	0x1fff8dd4

0000f974 <__libc_fini_array>:
    f974:	b538      	push	{r3, r4, r5, lr}
    f976:	4d07      	ldr	r5, [pc, #28]	; (f994 <__libc_fini_array+0x20>)
    f978:	4c07      	ldr	r4, [pc, #28]	; (f998 <__libc_fini_array+0x24>)
    f97a:	1b2c      	subs	r4, r5, r4
    f97c:	10a4      	asrs	r4, r4, #2
    f97e:	d005      	beq.n	f98c <__libc_fini_array+0x18>
    f980:	3c01      	subs	r4, #1
    f982:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    f986:	4798      	blx	r3
    f988:	2c00      	cmp	r4, #0
    f98a:	d1f9      	bne.n	f980 <__libc_fini_array+0xc>
    f98c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    f990:	f004 be2a 	b.w	145e8 <__init_array_end>
	...
    f99c:	ffffffff 	.word	0xffffffff

0000f9a0 <memchr>:
    f9a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    f9a4:	2a10      	cmp	r2, #16
    f9a6:	db2b      	blt.n	fa00 <memchr+0x60>
    f9a8:	f010 0f07 	tst.w	r0, #7
    f9ac:	d008      	beq.n	f9c0 <memchr+0x20>
    f9ae:	f810 3b01 	ldrb.w	r3, [r0], #1
    f9b2:	3a01      	subs	r2, #1
    f9b4:	428b      	cmp	r3, r1
    f9b6:	d02d      	beq.n	fa14 <memchr+0x74>
    f9b8:	f010 0f07 	tst.w	r0, #7
    f9bc:	b342      	cbz	r2, fa10 <memchr+0x70>
    f9be:	d1f6      	bne.n	f9ae <memchr+0xe>
    f9c0:	b4f0      	push	{r4, r5, r6, r7}
    f9c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    f9c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    f9ca:	f022 0407 	bic.w	r4, r2, #7
    f9ce:	f07f 0700 	mvns.w	r7, #0
    f9d2:	2300      	movs	r3, #0
    f9d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    f9d8:	3c08      	subs	r4, #8
    f9da:	ea85 0501 	eor.w	r5, r5, r1
    f9de:	ea86 0601 	eor.w	r6, r6, r1
    f9e2:	fa85 f547 	uadd8	r5, r5, r7
    f9e6:	faa3 f587 	sel	r5, r3, r7
    f9ea:	fa86 f647 	uadd8	r6, r6, r7
    f9ee:	faa5 f687 	sel	r6, r5, r7
    f9f2:	b98e      	cbnz	r6, fa18 <memchr+0x78>
    f9f4:	d1ee      	bne.n	f9d4 <memchr+0x34>
    f9f6:	bcf0      	pop	{r4, r5, r6, r7}
    f9f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    f9fc:	f002 0207 	and.w	r2, r2, #7
    fa00:	b132      	cbz	r2, fa10 <memchr+0x70>
    fa02:	f810 3b01 	ldrb.w	r3, [r0], #1
    fa06:	3a01      	subs	r2, #1
    fa08:	ea83 0301 	eor.w	r3, r3, r1
    fa0c:	b113      	cbz	r3, fa14 <memchr+0x74>
    fa0e:	d1f8      	bne.n	fa02 <memchr+0x62>
    fa10:	2000      	movs	r0, #0
    fa12:	4770      	bx	lr
    fa14:	3801      	subs	r0, #1
    fa16:	4770      	bx	lr
    fa18:	2d00      	cmp	r5, #0
    fa1a:	bf06      	itte	eq
    fa1c:	4635      	moveq	r5, r6
    fa1e:	3803      	subeq	r0, #3
    fa20:	3807      	subne	r0, #7
    fa22:	f015 0f01 	tst.w	r5, #1
    fa26:	d107      	bne.n	fa38 <memchr+0x98>
    fa28:	3001      	adds	r0, #1
    fa2a:	f415 7f80 	tst.w	r5, #256	; 0x100
    fa2e:	bf02      	ittt	eq
    fa30:	3001      	addeq	r0, #1
    fa32:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    fa36:	3001      	addeq	r0, #1
    fa38:	bcf0      	pop	{r4, r5, r6, r7}
    fa3a:	3801      	subs	r0, #1
    fa3c:	4770      	bx	lr
    fa3e:	bf00      	nop

0000fa40 <frexp>:
    fa40:	f8df c060 	ldr.w	ip, [pc, #96]	; faa4 <frexp+0x64>
    fa44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fa46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    fa4a:	2700      	movs	r7, #0
    fa4c:	4563      	cmp	r3, ip
    fa4e:	4604      	mov	r4, r0
    fa50:	460d      	mov	r5, r1
    fa52:	4616      	mov	r6, r2
    fa54:	6017      	str	r7, [r2, #0]
    fa56:	dc22      	bgt.n	fa9e <frexp+0x5e>
    fa58:	4684      	mov	ip, r0
    fa5a:	ea53 0c0c 	orrs.w	ip, r3, ip
    fa5e:	d01e      	beq.n	fa9e <frexp+0x5e>
    fa60:	f8df c044 	ldr.w	ip, [pc, #68]	; faa8 <frexp+0x68>
    fa64:	ea01 0c0c 	and.w	ip, r1, ip
    fa68:	460a      	mov	r2, r1
    fa6a:	f1bc 0f00 	cmp.w	ip, #0
    fa6e:	d109      	bne.n	fa84 <frexp+0x44>
    fa70:	4b0e      	ldr	r3, [pc, #56]	; (faac <frexp+0x6c>)
    fa72:	2200      	movs	r2, #0
    fa74:	f002 fd90 	bl	12598 <__aeabi_dmul>
    fa78:	f06f 0735 	mvn.w	r7, #53	; 0x35
    fa7c:	4604      	mov	r4, r0
    fa7e:	460a      	mov	r2, r1
    fa80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    fa84:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
    fa88:	151b      	asrs	r3, r3, #20
    fa8a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
    fa8e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
    fa92:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
    fa96:	443b      	add	r3, r7
    fa98:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
    fa9c:	6033      	str	r3, [r6, #0]
    fa9e:	4620      	mov	r0, r4
    faa0:	4629      	mov	r1, r5
    faa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    faa4:	7fefffff 	.word	0x7fefffff
    faa8:	7ff00000 	.word	0x7ff00000
    faac:	43500000 	.word	0x43500000

0000fab0 <__register_exitproc>:
    fab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fab4:	f8df a074 	ldr.w	sl, [pc, #116]	; fb2c <__register_exitproc+0x7c>
    fab8:	4606      	mov	r6, r0
    faba:	f8da 0000 	ldr.w	r0, [sl]
    fabe:	4698      	mov	r8, r3
    fac0:	460f      	mov	r7, r1
    fac2:	4691      	mov	r9, r2
    fac4:	f7fd faa2 	bl	d00c <__retarget_lock_acquire_recursive>
    fac8:	4b19      	ldr	r3, [pc, #100]	; (fb30 <__register_exitproc+0x80>)
    faca:	681c      	ldr	r4, [r3, #0]
    facc:	b324      	cbz	r4, fb18 <__register_exitproc+0x68>
    face:	6865      	ldr	r5, [r4, #4]
    fad0:	2d1f      	cmp	r5, #31
    fad2:	dc24      	bgt.n	fb1e <__register_exitproc+0x6e>
    fad4:	b95e      	cbnz	r6, faee <__register_exitproc+0x3e>
    fad6:	1c6b      	adds	r3, r5, #1
    fad8:	3502      	adds	r5, #2
    fada:	f8da 0000 	ldr.w	r0, [sl]
    fade:	6063      	str	r3, [r4, #4]
    fae0:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    fae4:	f7fd fa94 	bl	d010 <__retarget_lock_release_recursive>
    fae8:	2000      	movs	r0, #0
    faea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    faee:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    faf2:	2301      	movs	r3, #1
    faf4:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    faf8:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    fafc:	40ab      	lsls	r3, r5
    fafe:	431a      	orrs	r2, r3
    fb00:	2e02      	cmp	r6, #2
    fb02:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    fb06:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    fb0a:	d1e4      	bne.n	fad6 <__register_exitproc+0x26>
    fb0c:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    fb10:	431a      	orrs	r2, r3
    fb12:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    fb16:	e7de      	b.n	fad6 <__register_exitproc+0x26>
    fb18:	4c06      	ldr	r4, [pc, #24]	; (fb34 <__register_exitproc+0x84>)
    fb1a:	601c      	str	r4, [r3, #0]
    fb1c:	e7d7      	b.n	face <__register_exitproc+0x1e>
    fb1e:	f8da 0000 	ldr.w	r0, [sl]
    fb22:	f7fd fa75 	bl	d010 <__retarget_lock_release_recursive>
    fb26:	f04f 30ff 	mov.w	r0, #4294967295
    fb2a:	e7de      	b.n	faea <__register_exitproc+0x3a>
    fb2c:	1fff8f74 	.word	0x1fff8f74
    fb30:	1fffb890 	.word	0x1fffb890
    fb34:	1fffb894 	.word	0x1fffb894

0000fb38 <__assert_func>:
    fb38:	b500      	push	{lr}
    fb3a:	4c0b      	ldr	r4, [pc, #44]	; (fb68 <__assert_func+0x30>)
    fb3c:	6825      	ldr	r5, [r4, #0]
    fb3e:	4614      	mov	r4, r2
    fb40:	68ee      	ldr	r6, [r5, #12]
    fb42:	461a      	mov	r2, r3
    fb44:	b085      	sub	sp, #20
    fb46:	4603      	mov	r3, r0
    fb48:	460d      	mov	r5, r1
    fb4a:	b14c      	cbz	r4, fb60 <__assert_func+0x28>
    fb4c:	4907      	ldr	r1, [pc, #28]	; (fb6c <__assert_func+0x34>)
    fb4e:	9500      	str	r5, [sp, #0]
    fb50:	e9cd 1401 	strd	r1, r4, [sp, #4]
    fb54:	4630      	mov	r0, r6
    fb56:	4906      	ldr	r1, [pc, #24]	; (fb70 <__assert_func+0x38>)
    fb58:	f001 f86e 	bl	10c38 <fiprintf>
    fb5c:	f7f9 f912 	bl	8d84 <abort>
    fb60:	4904      	ldr	r1, [pc, #16]	; (fb74 <__assert_func+0x3c>)
    fb62:	460c      	mov	r4, r1
    fb64:	e7f3      	b.n	fb4e <__assert_func+0x16>
    fb66:	bf00      	nop
    fb68:	1fff8f70 	.word	0x1fff8f70
    fb6c:	000144fc 	.word	0x000144fc
    fb70:	0001450c 	.word	0x0001450c
    fb74:	00012a2c 	.word	0x00012a2c

0000fb78 <_calloc_r>:
    fb78:	b538      	push	{r3, r4, r5, lr}
    fb7a:	fba1 1402 	umull	r1, r4, r1, r2
    fb7e:	bb8c      	cbnz	r4, fbe4 <_calloc_r+0x6c>
    fb80:	f7fc fab8 	bl	c0f4 <_malloc_r>
    fb84:	4605      	mov	r5, r0
    fb86:	b1e0      	cbz	r0, fbc2 <_calloc_r+0x4a>
    fb88:	f850 2c04 	ldr.w	r2, [r0, #-4]
    fb8c:	f022 0203 	bic.w	r2, r2, #3
    fb90:	3a04      	subs	r2, #4
    fb92:	2a24      	cmp	r2, #36	; 0x24
    fb94:	d817      	bhi.n	fbc6 <_calloc_r+0x4e>
    fb96:	2a13      	cmp	r2, #19
    fb98:	d91a      	bls.n	fbd0 <_calloc_r+0x58>
    fb9a:	2a1b      	cmp	r2, #27
    fb9c:	e9c0 4400 	strd	r4, r4, [r0]
    fba0:	d91d      	bls.n	fbde <_calloc_r+0x66>
    fba2:	2a24      	cmp	r2, #36	; 0x24
    fba4:	bf14      	ite	ne
    fba6:	f100 0210 	addne.w	r2, r0, #16
    fbaa:	f100 0218 	addeq.w	r2, r0, #24
    fbae:	f04f 0300 	mov.w	r3, #0
    fbb2:	e9c0 4402 	strd	r4, r4, [r0, #8]
    fbb6:	bf04      	itt	eq
    fbb8:	6104      	streq	r4, [r0, #16]
    fbba:	6144      	streq	r4, [r0, #20]
    fbbc:	e9c2 3300 	strd	r3, r3, [r2]
    fbc0:	6093      	str	r3, [r2, #8]
    fbc2:	4628      	mov	r0, r5
    fbc4:	bd38      	pop	{r3, r4, r5, pc}
    fbc6:	4621      	mov	r1, r4
    fbc8:	f7fd f902 	bl	cdd0 <memset>
    fbcc:	4628      	mov	r0, r5
    fbce:	bd38      	pop	{r3, r4, r5, pc}
    fbd0:	4602      	mov	r2, r0
    fbd2:	2300      	movs	r3, #0
    fbd4:	e9c2 3300 	strd	r3, r3, [r2]
    fbd8:	6093      	str	r3, [r2, #8]
    fbda:	4628      	mov	r0, r5
    fbdc:	bd38      	pop	{r3, r4, r5, pc}
    fbde:	f100 0208 	add.w	r2, r0, #8
    fbe2:	e7f6      	b.n	fbd2 <_calloc_r+0x5a>
    fbe4:	f7fd f9e4 	bl	cfb0 <__errno>
    fbe8:	230c      	movs	r3, #12
    fbea:	2500      	movs	r5, #0
    fbec:	6003      	str	r3, [r0, #0]
    fbee:	e7e8      	b.n	fbc2 <_calloc_r+0x4a>

0000fbf0 <quorem>:
    fbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fbf4:	6903      	ldr	r3, [r0, #16]
    fbf6:	690c      	ldr	r4, [r1, #16]
    fbf8:	42a3      	cmp	r3, r4
    fbfa:	b083      	sub	sp, #12
    fbfc:	f2c0 8088 	blt.w	fd10 <quorem+0x120>
    fc00:	3c01      	subs	r4, #1
    fc02:	f101 0514 	add.w	r5, r1, #20
    fc06:	00a3      	lsls	r3, r4, #2
    fc08:	f100 0814 	add.w	r8, r0, #20
    fc0c:	9300      	str	r3, [sp, #0]
    fc0e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    fc12:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    fc16:	3301      	adds	r3, #1
    fc18:	468a      	mov	sl, r1
    fc1a:	429a      	cmp	r2, r3
    fc1c:	eb08 0184 	add.w	r1, r8, r4, lsl #2
    fc20:	4681      	mov	r9, r0
    fc22:	eb05 0784 	add.w	r7, r5, r4, lsl #2
    fc26:	9101      	str	r1, [sp, #4]
    fc28:	fbb2 f6f3 	udiv	r6, r2, r3
    fc2c:	d33a      	bcc.n	fca4 <quorem+0xb4>
    fc2e:	f04f 0c00 	mov.w	ip, #0
    fc32:	46ae      	mov	lr, r5
    fc34:	4640      	mov	r0, r8
    fc36:	4662      	mov	r2, ip
    fc38:	4663      	mov	r3, ip
    fc3a:	f85e bb04 	ldr.w	fp, [lr], #4
    fc3e:	6801      	ldr	r1, [r0, #0]
    fc40:	fa1f fc8b 	uxth.w	ip, fp
    fc44:	fb06 330c 	mla	r3, r6, ip, r3
    fc48:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    fc4c:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
    fc50:	fb06 cc0b 	mla	ip, r6, fp, ip
    fc54:	b29b      	uxth	r3, r3
    fc56:	1ad3      	subs	r3, r2, r3
    fc58:	fa1f f28c 	uxth.w	r2, ip
    fc5c:	fa13 f381 	uxtah	r3, r3, r1
    fc60:	ebc2 4211 	rsb	r2, r2, r1, lsr #16
    fc64:	eb02 4223 	add.w	r2, r2, r3, asr #16
    fc68:	b29b      	uxth	r3, r3
    fc6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    fc6e:	4577      	cmp	r7, lr
    fc70:	f840 3b04 	str.w	r3, [r0], #4
    fc74:	ea4f 4222 	mov.w	r2, r2, asr #16
    fc78:	ea4f 431c 	mov.w	r3, ip, lsr #16
    fc7c:	d2dd      	bcs.n	fc3a <quorem+0x4a>
    fc7e:	9b00      	ldr	r3, [sp, #0]
    fc80:	f858 3003 	ldr.w	r3, [r8, r3]
    fc84:	b973      	cbnz	r3, fca4 <quorem+0xb4>
    fc86:	9b01      	ldr	r3, [sp, #4]
    fc88:	3b04      	subs	r3, #4
    fc8a:	4598      	cmp	r8, r3
    fc8c:	d304      	bcc.n	fc98 <quorem+0xa8>
    fc8e:	e007      	b.n	fca0 <quorem+0xb0>
    fc90:	4598      	cmp	r8, r3
    fc92:	f104 34ff 	add.w	r4, r4, #4294967295
    fc96:	d203      	bcs.n	fca0 <quorem+0xb0>
    fc98:	f853 2904 	ldr.w	r2, [r3], #-4
    fc9c:	2a00      	cmp	r2, #0
    fc9e:	d0f7      	beq.n	fc90 <quorem+0xa0>
    fca0:	f8c9 4010 	str.w	r4, [r9, #16]
    fca4:	4651      	mov	r1, sl
    fca6:	4648      	mov	r0, r9
    fca8:	f7fd fe38 	bl	d91c <__mcmp>
    fcac:	2800      	cmp	r0, #0
    fcae:	db2b      	blt.n	fd08 <quorem+0x118>
    fcb0:	3601      	adds	r6, #1
    fcb2:	4641      	mov	r1, r8
    fcb4:	2300      	movs	r3, #0
    fcb6:	f855 0b04 	ldr.w	r0, [r5], #4
    fcba:	f8d1 c000 	ldr.w	ip, [r1]
    fcbe:	b282      	uxth	r2, r0
    fcc0:	1a9a      	subs	r2, r3, r2
    fcc2:	0c03      	lsrs	r3, r0, #16
    fcc4:	fa12 f28c 	uxtah	r2, r2, ip
    fcc8:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
    fccc:	eb03 4322 	add.w	r3, r3, r2, asr #16
    fcd0:	b292      	uxth	r2, r2
    fcd2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    fcd6:	42af      	cmp	r7, r5
    fcd8:	f841 2b04 	str.w	r2, [r1], #4
    fcdc:	ea4f 4323 	mov.w	r3, r3, asr #16
    fce0:	d2e9      	bcs.n	fcb6 <quorem+0xc6>
    fce2:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
    fce6:	eb08 0384 	add.w	r3, r8, r4, lsl #2
    fcea:	b96a      	cbnz	r2, fd08 <quorem+0x118>
    fcec:	3b04      	subs	r3, #4
    fcee:	4598      	cmp	r8, r3
    fcf0:	d304      	bcc.n	fcfc <quorem+0x10c>
    fcf2:	e007      	b.n	fd04 <quorem+0x114>
    fcf4:	4598      	cmp	r8, r3
    fcf6:	f104 34ff 	add.w	r4, r4, #4294967295
    fcfa:	d203      	bcs.n	fd04 <quorem+0x114>
    fcfc:	f853 2904 	ldr.w	r2, [r3], #-4
    fd00:	2a00      	cmp	r2, #0
    fd02:	d0f7      	beq.n	fcf4 <quorem+0x104>
    fd04:	f8c9 4010 	str.w	r4, [r9, #16]
    fd08:	4630      	mov	r0, r6
    fd0a:	b003      	add	sp, #12
    fd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fd10:	2000      	movs	r0, #0
    fd12:	b003      	add	sp, #12
    fd14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000fd18 <_dtoa_r>:
    fd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fd1c:	6b81      	ldr	r1, [r0, #56]	; 0x38
    fd1e:	b099      	sub	sp, #100	; 0x64
    fd20:	4690      	mov	r8, r2
    fd22:	4699      	mov	r9, r3
    fd24:	e9cd 8904 	strd	r8, r9, [sp, #16]
    fd28:	9d25      	ldr	r5, [sp, #148]	; 0x94
    fd2a:	4604      	mov	r4, r0
    fd2c:	b141      	cbz	r1, fd40 <_dtoa_r+0x28>
    fd2e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    fd30:	604a      	str	r2, [r1, #4]
    fd32:	2301      	movs	r3, #1
    fd34:	4093      	lsls	r3, r2
    fd36:	608b      	str	r3, [r1, #8]
    fd38:	f7fd fb92 	bl	d460 <_Bfree>
    fd3c:	2300      	movs	r3, #0
    fd3e:	63a3      	str	r3, [r4, #56]	; 0x38
    fd40:	f1b9 0a00 	subs.w	sl, r9, #0
    fd44:	bfb4      	ite	lt
    fd46:	2301      	movlt	r3, #1
    fd48:	2300      	movge	r3, #0
    fd4a:	602b      	str	r3, [r5, #0]
    fd4c:	4b76      	ldr	r3, [pc, #472]	; (ff28 <_dtoa_r+0x210>)
    fd4e:	bfbc      	itt	lt
    fd50:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
    fd54:	f8cd a014 	strlt.w	sl, [sp, #20]
    fd58:	ea33 030a 	bics.w	r3, r3, sl
    fd5c:	f000 80ab 	beq.w	feb6 <_dtoa_r+0x19e>
    fd60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    fd64:	4610      	mov	r0, r2
    fd66:	4619      	mov	r1, r3
    fd68:	2200      	movs	r2, #0
    fd6a:	2300      	movs	r3, #0
    fd6c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    fd70:	f7fb fe36 	bl	b9e0 <__aeabi_dcmpeq>
    fd74:	4607      	mov	r7, r0
    fd76:	b178      	cbz	r0, fd98 <_dtoa_r+0x80>
    fd78:	9a24      	ldr	r2, [sp, #144]	; 0x90
    fd7a:	2301      	movs	r3, #1
    fd7c:	6013      	str	r3, [r2, #0]
    fd7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    fd80:	2b00      	cmp	r3, #0
    fd82:	f000 83ae 	beq.w	104e2 <_dtoa_r+0x7ca>
    fd86:	4b69      	ldr	r3, [pc, #420]	; (ff2c <_dtoa_r+0x214>)
    fd88:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fd8a:	6013      	str	r3, [r2, #0]
    fd8c:	3b01      	subs	r3, #1
    fd8e:	9303      	str	r3, [sp, #12]
    fd90:	9803      	ldr	r0, [sp, #12]
    fd92:	b019      	add	sp, #100	; 0x64
    fd94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fd98:	ab16      	add	r3, sp, #88	; 0x58
    fd9a:	9301      	str	r3, [sp, #4]
    fd9c:	ab17      	add	r3, sp, #92	; 0x5c
    fd9e:	9300      	str	r3, [sp, #0]
    fda0:	4620      	mov	r0, r4
    fda2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    fda6:	f7fd fe83 	bl	dab0 <__d2b>
    fdaa:	ea5f 561a 	movs.w	r6, sl, lsr #20
    fdae:	4605      	mov	r5, r0
    fdb0:	f040 8097 	bne.w	fee2 <_dtoa_r+0x1ca>
    fdb4:	e9dd 7616 	ldrd	r7, r6, [sp, #88]	; 0x58
    fdb8:	443e      	add	r6, r7
    fdba:	f206 4332 	addw	r3, r6, #1074	; 0x432
    fdbe:	2b20      	cmp	r3, #32
    fdc0:	f340 83a6 	ble.w	10510 <_dtoa_r+0x7f8>
    fdc4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
    fdc8:	fa0a fa03 	lsl.w	sl, sl, r3
    fdcc:	f206 4312 	addw	r3, r6, #1042	; 0x412
    fdd0:	fa28 f003 	lsr.w	r0, r8, r3
    fdd4:	ea4a 0000 	orr.w	r0, sl, r0
    fdd8:	f7fb fd32 	bl	b840 <__aeabi_ui2d>
    fddc:	2301      	movs	r3, #1
    fdde:	3e01      	subs	r6, #1
    fde0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    fde4:	930f      	str	r3, [sp, #60]	; 0x3c
    fde6:	4b52      	ldr	r3, [pc, #328]	; (ff30 <_dtoa_r+0x218>)
    fde8:	2200      	movs	r2, #0
    fdea:	f7fb fbeb 	bl	b5c4 <__aeabi_dsub>
    fdee:	a348      	add	r3, pc, #288	; (adr r3, ff10 <_dtoa_r+0x1f8>)
    fdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
    fdf4:	f002 fbd0 	bl	12598 <__aeabi_dmul>
    fdf8:	a347      	add	r3, pc, #284	; (adr r3, ff18 <_dtoa_r+0x200>)
    fdfa:	e9d3 2300 	ldrd	r2, r3, [r3]
    fdfe:	f7fb fbe3 	bl	b5c8 <__adddf3>
    fe02:	4680      	mov	r8, r0
    fe04:	4630      	mov	r0, r6
    fe06:	4689      	mov	r9, r1
    fe08:	f7fb fd2a 	bl	b860 <__aeabi_i2d>
    fe0c:	a344      	add	r3, pc, #272	; (adr r3, ff20 <_dtoa_r+0x208>)
    fe0e:	e9d3 2300 	ldrd	r2, r3, [r3]
    fe12:	f002 fbc1 	bl	12598 <__aeabi_dmul>
    fe16:	4602      	mov	r2, r0
    fe18:	460b      	mov	r3, r1
    fe1a:	4640      	mov	r0, r8
    fe1c:	4649      	mov	r1, r9
    fe1e:	f7fb fbd3 	bl	b5c8 <__adddf3>
    fe22:	4680      	mov	r8, r0
    fe24:	4689      	mov	r9, r1
    fe26:	f002 fdc9 	bl	129bc <__aeabi_d2iz>
    fe2a:	2200      	movs	r2, #0
    fe2c:	4683      	mov	fp, r0
    fe2e:	2300      	movs	r3, #0
    fe30:	4640      	mov	r0, r8
    fe32:	4649      	mov	r1, r9
    fe34:	f7fb fdde 	bl	b9f4 <__aeabi_dcmplt>
    fe38:	2800      	cmp	r0, #0
    fe3a:	f040 8345 	bne.w	104c8 <_dtoa_r+0x7b0>
    fe3e:	f1bb 0f16 	cmp.w	fp, #22
    fe42:	f200 8334 	bhi.w	104ae <_dtoa_r+0x796>
    fe46:	4b3b      	ldr	r3, [pc, #236]	; (ff34 <_dtoa_r+0x21c>)
    fe48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
    fe4c:	e9d3 2300 	ldrd	r2, r3, [r3]
    fe50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    fe54:	f7fb fdce 	bl	b9f4 <__aeabi_dcmplt>
    fe58:	2800      	cmp	r0, #0
    fe5a:	d071      	beq.n	ff40 <_dtoa_r+0x228>
    fe5c:	2300      	movs	r3, #0
    fe5e:	1bbf      	subs	r7, r7, r6
    fe60:	930e      	str	r3, [sp, #56]	; 0x38
    fe62:	1e7b      	subs	r3, r7, #1
    fe64:	f10b 3bff 	add.w	fp, fp, #4294967295
    fe68:	9306      	str	r3, [sp, #24]
    fe6a:	f100 8327 	bmi.w	104bc <_dtoa_r+0x7a4>
    fe6e:	2300      	movs	r3, #0
    fe70:	9309      	str	r3, [sp, #36]	; 0x24
    fe72:	f1bb 0f00 	cmp.w	fp, #0
    fe76:	da6a      	bge.n	ff4e <_dtoa_r+0x236>
    fe78:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fe7a:	f8cd b01c 	str.w	fp, [sp, #28]
    fe7e:	eba3 030b 	sub.w	r3, r3, fp
    fe82:	9309      	str	r3, [sp, #36]	; 0x24
    fe84:	f1cb 0300 	rsb	r3, fp, #0
    fe88:	930d      	str	r3, [sp, #52]	; 0x34
    fe8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fe8c:	2b09      	cmp	r3, #9
    fe8e:	f04f 0b00 	mov.w	fp, #0
    fe92:	d865      	bhi.n	ff60 <_dtoa_r+0x248>
    fe94:	2b05      	cmp	r3, #5
    fe96:	f340 8339 	ble.w	1050c <_dtoa_r+0x7f4>
    fe9a:	3b04      	subs	r3, #4
    fe9c:	9322      	str	r3, [sp, #136]	; 0x88
    fe9e:	2600      	movs	r6, #0
    fea0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fea2:	3b02      	subs	r3, #2
    fea4:	2b03      	cmp	r3, #3
    fea6:	f200 8667 	bhi.w	10b78 <_dtoa_r+0xe60>
    feaa:	e8df f013 	tbh	[pc, r3, lsl #1]
    feae:	044e      	.short	0x044e
    feb0:	0442044b 	.word	0x0442044b
    feb4:	0425      	.short	0x0425
    feb6:	9a24      	ldr	r2, [sp, #144]	; 0x90
    feb8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
    febc:	f242 730f 	movw	r3, #9999	; 0x270f
    fec0:	ea5a 0a08 	orrs.w	sl, sl, r8
    fec4:	6013      	str	r3, [r2, #0]
    fec6:	d11a      	bne.n	fefe <_dtoa_r+0x1e6>
    fec8:	9b26      	ldr	r3, [sp, #152]	; 0x98
    feca:	2b00      	cmp	r3, #0
    fecc:	f000 8663 	beq.w	10b96 <_dtoa_r+0xe7e>
    fed0:	4b19      	ldr	r3, [pc, #100]	; (ff38 <_dtoa_r+0x220>)
    fed2:	9303      	str	r3, [sp, #12]
    fed4:	3308      	adds	r3, #8
    fed6:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fed8:	9803      	ldr	r0, [sp, #12]
    feda:	6013      	str	r3, [r2, #0]
    fedc:	b019      	add	sp, #100	; 0x64
    fede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fee2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
    fee6:	f3c2 0313 	ubfx	r3, r2, #0, #20
    feea:	4608      	mov	r0, r1
    feec:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    fef0:	970f      	str	r7, [sp, #60]	; 0x3c
    fef2:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
    fef6:	9f16      	ldr	r7, [sp, #88]	; 0x58
    fef8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    fefc:	e773      	b.n	fde6 <_dtoa_r+0xce>
    fefe:	9b26      	ldr	r3, [sp, #152]	; 0x98
    ff00:	2b00      	cmp	r3, #0
    ff02:	f040 83db 	bne.w	106bc <_dtoa_r+0x9a4>
    ff06:	4b0d      	ldr	r3, [pc, #52]	; (ff3c <_dtoa_r+0x224>)
    ff08:	9303      	str	r3, [sp, #12]
    ff0a:	e741      	b.n	fd90 <_dtoa_r+0x78>
    ff0c:	f3af 8000 	nop.w
    ff10:	636f4361 	.word	0x636f4361
    ff14:	3fd287a7 	.word	0x3fd287a7
    ff18:	8b60c8b3 	.word	0x8b60c8b3
    ff1c:	3fc68a28 	.word	0x3fc68a28
    ff20:	509f79fb 	.word	0x509f79fb
    ff24:	3fd34413 	.word	0x3fd34413
    ff28:	7ff00000 	.word	0x7ff00000
    ff2c:	00012f19 	.word	0x00012f19
    ff30:	3ff80000 	.word	0x3ff80000
    ff34:	000143d0 	.word	0x000143d0
    ff38:	0001453c 	.word	0x0001453c
    ff3c:	00014548 	.word	0x00014548
    ff40:	1bbf      	subs	r7, r7, r6
    ff42:	1e7b      	subs	r3, r7, #1
    ff44:	9306      	str	r3, [sp, #24]
    ff46:	f100 847e 	bmi.w	10846 <_dtoa_r+0xb2e>
    ff4a:	900e      	str	r0, [sp, #56]	; 0x38
    ff4c:	9009      	str	r0, [sp, #36]	; 0x24
    ff4e:	9b06      	ldr	r3, [sp, #24]
    ff50:	445b      	add	r3, fp
    ff52:	e9cd 3b06 	strd	r3, fp, [sp, #24]
    ff56:	2300      	movs	r3, #0
    ff58:	930d      	str	r3, [sp, #52]	; 0x34
    ff5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ff5c:	2b09      	cmp	r3, #9
    ff5e:	d999      	bls.n	fe94 <_dtoa_r+0x17c>
    ff60:	2300      	movs	r3, #0
    ff62:	e9cd 3322 	strd	r3, r3, [sp, #136]	; 0x88
    ff66:	2601      	movs	r6, #1
    ff68:	f04f 33ff 	mov.w	r3, #4294967295
    ff6c:	960c      	str	r6, [sp, #48]	; 0x30
    ff6e:	9308      	str	r3, [sp, #32]
    ff70:	9b08      	ldr	r3, [sp, #32]
    ff72:	9312      	str	r3, [sp, #72]	; 0x48
    ff74:	2100      	movs	r1, #0
    ff76:	63e1      	str	r1, [r4, #60]	; 0x3c
    ff78:	4620      	mov	r0, r4
    ff7a:	f7fd fa4b 	bl	d414 <_Balloc>
    ff7e:	9003      	str	r0, [sp, #12]
    ff80:	2800      	cmp	r0, #0
    ff82:	f000 8601 	beq.w	10b88 <_dtoa_r+0xe70>
    ff86:	9b03      	ldr	r3, [sp, #12]
    ff88:	63a3      	str	r3, [r4, #56]	; 0x38
    ff8a:	9b08      	ldr	r3, [sp, #32]
    ff8c:	2b0e      	cmp	r3, #14
    ff8e:	f200 8113 	bhi.w	101b8 <_dtoa_r+0x4a0>
    ff92:	2e00      	cmp	r6, #0
    ff94:	f000 8110 	beq.w	101b8 <_dtoa_r+0x4a0>
    ff98:	9907      	ldr	r1, [sp, #28]
    ff9a:	2900      	cmp	r1, #0
    ff9c:	f340 8455 	ble.w	1084a <_dtoa_r+0xb32>
    ffa0:	4bae      	ldr	r3, [pc, #696]	; (1025c <_dtoa_r+0x544>)
    ffa2:	f001 020f 	and.w	r2, r1, #15
    ffa6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    ffaa:	ea4f 1821 	mov.w	r8, r1, asr #4
    ffae:	05c9      	lsls	r1, r1, #23
    ffb0:	e9d3 6700 	ldrd	r6, r7, [r3]
    ffb4:	f140 8411 	bpl.w	107da <_dtoa_r+0xac2>
    ffb8:	4ba9      	ldr	r3, [pc, #676]	; (10260 <_dtoa_r+0x548>)
    ffba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    ffbe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    ffc2:	f002 fc13 	bl	127ec <__aeabi_ddiv>
    ffc6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    ffca:	f008 080f 	and.w	r8, r8, #15
    ffce:	f04f 0a03 	mov.w	sl, #3
    ffd2:	f1b8 0f00 	cmp.w	r8, #0
    ffd6:	d013      	beq.n	10000 <_dtoa_r+0x2e8>
    ffd8:	f8df 9284 	ldr.w	r9, [pc, #644]	; 10260 <_dtoa_r+0x548>
    ffdc:	f018 0f01 	tst.w	r8, #1
    ffe0:	d009      	beq.n	fff6 <_dtoa_r+0x2de>
    ffe2:	4630      	mov	r0, r6
    ffe4:	4639      	mov	r1, r7
    ffe6:	e9d9 2300 	ldrd	r2, r3, [r9]
    ffea:	f002 fad5 	bl	12598 <__aeabi_dmul>
    ffee:	f10a 0a01 	add.w	sl, sl, #1
    fff2:	4606      	mov	r6, r0
    fff4:	460f      	mov	r7, r1
    fff6:	ea5f 0868 	movs.w	r8, r8, asr #1
    fffa:	f109 0908 	add.w	r9, r9, #8
    fffe:	d1ed      	bne.n	ffdc <_dtoa_r+0x2c4>
   10000:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   10004:	4632      	mov	r2, r6
   10006:	463b      	mov	r3, r7
   10008:	f002 fbf0 	bl	127ec <__aeabi_ddiv>
   1000c:	4680      	mov	r8, r0
   1000e:	4689      	mov	r9, r1
   10010:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10012:	b143      	cbz	r3, 10026 <_dtoa_r+0x30e>
   10014:	4b93      	ldr	r3, [pc, #588]	; (10264 <_dtoa_r+0x54c>)
   10016:	2200      	movs	r2, #0
   10018:	4640      	mov	r0, r8
   1001a:	4649      	mov	r1, r9
   1001c:	f7fb fcea 	bl	b9f4 <__aeabi_dcmplt>
   10020:	2800      	cmp	r0, #0
   10022:	f040 852a 	bne.w	10a7a <_dtoa_r+0xd62>
   10026:	4650      	mov	r0, sl
   10028:	f7fb fc1a 	bl	b860 <__aeabi_i2d>
   1002c:	4642      	mov	r2, r8
   1002e:	464b      	mov	r3, r9
   10030:	f002 fab2 	bl	12598 <__aeabi_dmul>
   10034:	4b8c      	ldr	r3, [pc, #560]	; (10268 <_dtoa_r+0x550>)
   10036:	2200      	movs	r2, #0
   10038:	f7fb fac6 	bl	b5c8 <__adddf3>
   1003c:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   10040:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   10044:	9311      	str	r3, [sp, #68]	; 0x44
   10046:	9b08      	ldr	r3, [sp, #32]
   10048:	2b00      	cmp	r3, #0
   1004a:	f000 8099 	beq.w	10180 <_dtoa_r+0x468>
   1004e:	9b07      	ldr	r3, [sp, #28]
   10050:	9314      	str	r3, [sp, #80]	; 0x50
   10052:	9b08      	ldr	r3, [sp, #32]
   10054:	9313      	str	r3, [sp, #76]	; 0x4c
   10056:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10058:	2b00      	cmp	r3, #0
   1005a:	f000 84a5 	beq.w	109a8 <_dtoa_r+0xc90>
   1005e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10060:	4b7e      	ldr	r3, [pc, #504]	; (1025c <_dtoa_r+0x544>)
   10062:	4982      	ldr	r1, [pc, #520]	; (1026c <_dtoa_r+0x554>)
   10064:	9e03      	ldr	r6, [sp, #12]
   10066:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1006a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1006e:	2000      	movs	r0, #0
   10070:	f002 fbbc 	bl	127ec <__aeabi_ddiv>
   10074:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   10078:	f7fb faa4 	bl	b5c4 <__aeabi_dsub>
   1007c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   10080:	4649      	mov	r1, r9
   10082:	4640      	mov	r0, r8
   10084:	f002 fc9a 	bl	129bc <__aeabi_d2iz>
   10088:	4607      	mov	r7, r0
   1008a:	f7fb fbe9 	bl	b860 <__aeabi_i2d>
   1008e:	4602      	mov	r2, r0
   10090:	460b      	mov	r3, r1
   10092:	4640      	mov	r0, r8
   10094:	4649      	mov	r1, r9
   10096:	f7fb fa95 	bl	b5c4 <__aeabi_dsub>
   1009a:	3730      	adds	r7, #48	; 0x30
   1009c:	4680      	mov	r8, r0
   1009e:	4689      	mov	r9, r1
   100a0:	4602      	mov	r2, r0
   100a2:	460b      	mov	r3, r1
   100a4:	f806 7b01 	strb.w	r7, [r6], #1
   100a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   100ac:	f7fb fcc0 	bl	ba30 <__aeabi_dcmpgt>
   100b0:	2800      	cmp	r0, #0
   100b2:	f040 8527 	bne.w	10b04 <_dtoa_r+0xdec>
   100b6:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
   100ba:	2700      	movs	r7, #0
   100bc:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   100c0:	9510      	str	r5, [sp, #64]	; 0x40
   100c2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   100c4:	9413      	str	r4, [sp, #76]	; 0x4c
   100c6:	e02a      	b.n	1011e <_dtoa_r+0x406>
   100c8:	3701      	adds	r7, #1
   100ca:	42af      	cmp	r7, r5
   100cc:	f280 852a 	bge.w	10b24 <_dtoa_r+0xe0c>
   100d0:	4b67      	ldr	r3, [pc, #412]	; (10270 <_dtoa_r+0x558>)
   100d2:	4650      	mov	r0, sl
   100d4:	4659      	mov	r1, fp
   100d6:	2200      	movs	r2, #0
   100d8:	f002 fa5e 	bl	12598 <__aeabi_dmul>
   100dc:	4b64      	ldr	r3, [pc, #400]	; (10270 <_dtoa_r+0x558>)
   100de:	2200      	movs	r2, #0
   100e0:	4682      	mov	sl, r0
   100e2:	468b      	mov	fp, r1
   100e4:	4640      	mov	r0, r8
   100e6:	4649      	mov	r1, r9
   100e8:	f002 fa56 	bl	12598 <__aeabi_dmul>
   100ec:	4689      	mov	r9, r1
   100ee:	4680      	mov	r8, r0
   100f0:	f002 fc64 	bl	129bc <__aeabi_d2iz>
   100f4:	4604      	mov	r4, r0
   100f6:	f7fb fbb3 	bl	b860 <__aeabi_i2d>
   100fa:	4602      	mov	r2, r0
   100fc:	460b      	mov	r3, r1
   100fe:	4640      	mov	r0, r8
   10100:	4649      	mov	r1, r9
   10102:	f7fb fa5f 	bl	b5c4 <__aeabi_dsub>
   10106:	3430      	adds	r4, #48	; 0x30
   10108:	f806 4b01 	strb.w	r4, [r6], #1
   1010c:	4652      	mov	r2, sl
   1010e:	465b      	mov	r3, fp
   10110:	4680      	mov	r8, r0
   10112:	4689      	mov	r9, r1
   10114:	f7fb fc6e 	bl	b9f4 <__aeabi_dcmplt>
   10118:	2800      	cmp	r0, #0
   1011a:	f040 84f1 	bne.w	10b00 <_dtoa_r+0xde8>
   1011e:	4642      	mov	r2, r8
   10120:	464b      	mov	r3, r9
   10122:	4950      	ldr	r1, [pc, #320]	; (10264 <_dtoa_r+0x54c>)
   10124:	2000      	movs	r0, #0
   10126:	f7fb fa4d 	bl	b5c4 <__aeabi_dsub>
   1012a:	4652      	mov	r2, sl
   1012c:	465b      	mov	r3, fp
   1012e:	f7fb fc61 	bl	b9f4 <__aeabi_dcmplt>
   10132:	2800      	cmp	r0, #0
   10134:	d0c8      	beq.n	100c8 <_dtoa_r+0x3b0>
   10136:	e9dd 4313 	ldrd	r4, r3, [sp, #76]	; 0x4c
   1013a:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1013c:	9a03      	ldr	r2, [sp, #12]
   1013e:	9307      	str	r3, [sp, #28]
   10140:	e002      	b.n	10148 <_dtoa_r+0x430>
   10142:	42b2      	cmp	r2, r6
   10144:	f000 84c6 	beq.w	10ad4 <_dtoa_r+0xdbc>
   10148:	46b1      	mov	r9, r6
   1014a:	f816 3d01 	ldrb.w	r3, [r6, #-1]!
   1014e:	2b39      	cmp	r3, #57	; 0x39
   10150:	d0f7      	beq.n	10142 <_dtoa_r+0x42a>
   10152:	3301      	adds	r3, #1
   10154:	b2db      	uxtb	r3, r3
   10156:	7033      	strb	r3, [r6, #0]
   10158:	9b07      	ldr	r3, [sp, #28]
   1015a:	3301      	adds	r3, #1
   1015c:	9307      	str	r3, [sp, #28]
   1015e:	e192      	b.n	10486 <_dtoa_r+0x76e>
   10160:	4650      	mov	r0, sl
   10162:	f7fb fb7d 	bl	b860 <__aeabi_i2d>
   10166:	4642      	mov	r2, r8
   10168:	464b      	mov	r3, r9
   1016a:	f002 fa15 	bl	12598 <__aeabi_dmul>
   1016e:	4b3e      	ldr	r3, [pc, #248]	; (10268 <_dtoa_r+0x550>)
   10170:	2200      	movs	r2, #0
   10172:	f7fb fa29 	bl	b5c8 <__adddf3>
   10176:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   1017a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   1017e:	9311      	str	r3, [sp, #68]	; 0x44
   10180:	4b3c      	ldr	r3, [pc, #240]	; (10274 <_dtoa_r+0x55c>)
   10182:	4640      	mov	r0, r8
   10184:	4649      	mov	r1, r9
   10186:	2200      	movs	r2, #0
   10188:	f7fb fa1c 	bl	b5c4 <__aeabi_dsub>
   1018c:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   10190:	4642      	mov	r2, r8
   10192:	464b      	mov	r3, r9
   10194:	4606      	mov	r6, r0
   10196:	460f      	mov	r7, r1
   10198:	f7fb fc4a 	bl	ba30 <__aeabi_dcmpgt>
   1019c:	4682      	mov	sl, r0
   1019e:	2800      	cmp	r0, #0
   101a0:	f040 84a8 	bne.w	10af4 <_dtoa_r+0xddc>
   101a4:	4642      	mov	r2, r8
   101a6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   101aa:	4630      	mov	r0, r6
   101ac:	4639      	mov	r1, r7
   101ae:	f7fb fc21 	bl	b9f4 <__aeabi_dcmplt>
   101b2:	2800      	cmp	r0, #0
   101b4:	f040 8345 	bne.w	10842 <_dtoa_r+0xb2a>
   101b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   101ba:	2b00      	cmp	r3, #0
   101bc:	f2c0 808c 	blt.w	102d8 <_dtoa_r+0x5c0>
   101c0:	9a07      	ldr	r2, [sp, #28]
   101c2:	2a0e      	cmp	r2, #14
   101c4:	f300 8088 	bgt.w	102d8 <_dtoa_r+0x5c0>
   101c8:	4b24      	ldr	r3, [pc, #144]	; (1025c <_dtoa_r+0x544>)
   101ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   101ce:	e9d3 ab00 	ldrd	sl, fp, [r3]
   101d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   101d4:	2b00      	cmp	r3, #0
   101d6:	da1b      	bge.n	10210 <_dtoa_r+0x4f8>
   101d8:	9b08      	ldr	r3, [sp, #32]
   101da:	2b00      	cmp	r3, #0
   101dc:	dc18      	bgt.n	10210 <_dtoa_r+0x4f8>
   101de:	f040 832e 	bne.w	1083e <_dtoa_r+0xb26>
   101e2:	4b24      	ldr	r3, [pc, #144]	; (10274 <_dtoa_r+0x55c>)
   101e4:	4650      	mov	r0, sl
   101e6:	2200      	movs	r2, #0
   101e8:	4659      	mov	r1, fp
   101ea:	f002 f9d5 	bl	12598 <__aeabi_dmul>
   101ee:	4602      	mov	r2, r0
   101f0:	460b      	mov	r3, r1
   101f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   101f6:	f7fb fc07 	bl	ba08 <__aeabi_dcmple>
   101fa:	f8dd a020 	ldr.w	sl, [sp, #32]
   101fe:	4656      	mov	r6, sl
   10200:	2800      	cmp	r0, #0
   10202:	f000 82b9 	beq.w	10778 <_dtoa_r+0xa60>
   10206:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   10208:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1020c:	43df      	mvns	r7, r3
   1020e:	e2bb      	b.n	10788 <_dtoa_r+0xa70>
   10210:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
   10214:	4652      	mov	r2, sl
   10216:	465b      	mov	r3, fp
   10218:	4638      	mov	r0, r7
   1021a:	4641      	mov	r1, r8
   1021c:	f002 fae6 	bl	127ec <__aeabi_ddiv>
   10220:	f002 fbcc 	bl	129bc <__aeabi_d2iz>
   10224:	4681      	mov	r9, r0
   10226:	9009      	str	r0, [sp, #36]	; 0x24
   10228:	f7fb fb1a 	bl	b860 <__aeabi_i2d>
   1022c:	4652      	mov	r2, sl
   1022e:	465b      	mov	r3, fp
   10230:	f002 f9b2 	bl	12598 <__aeabi_dmul>
   10234:	9e03      	ldr	r6, [sp, #12]
   10236:	460b      	mov	r3, r1
   10238:	4602      	mov	r2, r0
   1023a:	4641      	mov	r1, r8
   1023c:	4638      	mov	r0, r7
   1023e:	f7fb f9c1 	bl	b5c4 <__aeabi_dsub>
   10242:	f109 0330 	add.w	r3, r9, #48	; 0x30
   10246:	f806 3b01 	strb.w	r3, [r6], #1
   1024a:	9b08      	ldr	r3, [sp, #32]
   1024c:	2b01      	cmp	r3, #1
   1024e:	f000 835c 	beq.w	1090a <_dtoa_r+0xbf2>
   10252:	9406      	str	r4, [sp, #24]
   10254:	2701      	movs	r7, #1
   10256:	9504      	str	r5, [sp, #16]
   10258:	461c      	mov	r4, r3
   1025a:	e02a      	b.n	102b2 <_dtoa_r+0x59a>
   1025c:	000143d0 	.word	0x000143d0
   10260:	000143a8 	.word	0x000143a8
   10264:	3ff00000 	.word	0x3ff00000
   10268:	401c0000 	.word	0x401c0000
   1026c:	3fe00000 	.word	0x3fe00000
   10270:	40240000 	.word	0x40240000
   10274:	40140000 	.word	0x40140000
   10278:	4652      	mov	r2, sl
   1027a:	465b      	mov	r3, fp
   1027c:	4640      	mov	r0, r8
   1027e:	4649      	mov	r1, r9
   10280:	f002 fab4 	bl	127ec <__aeabi_ddiv>
   10284:	f002 fb9a 	bl	129bc <__aeabi_d2iz>
   10288:	4605      	mov	r5, r0
   1028a:	f7fb fae9 	bl	b860 <__aeabi_i2d>
   1028e:	4652      	mov	r2, sl
   10290:	465b      	mov	r3, fp
   10292:	f002 f981 	bl	12598 <__aeabi_dmul>
   10296:	3701      	adds	r7, #1
   10298:	460b      	mov	r3, r1
   1029a:	4602      	mov	r2, r0
   1029c:	4649      	mov	r1, r9
   1029e:	4640      	mov	r0, r8
   102a0:	f7fb f990 	bl	b5c4 <__aeabi_dsub>
   102a4:	f105 0330 	add.w	r3, r5, #48	; 0x30
   102a8:	42a7      	cmp	r7, r4
   102aa:	f806 3b01 	strb.w	r3, [r6], #1
   102ae:	f000 8329 	beq.w	10904 <_dtoa_r+0xbec>
   102b2:	4ba5      	ldr	r3, [pc, #660]	; (10548 <_dtoa_r+0x830>)
   102b4:	2200      	movs	r2, #0
   102b6:	f002 f96f 	bl	12598 <__aeabi_dmul>
   102ba:	2200      	movs	r2, #0
   102bc:	2300      	movs	r3, #0
   102be:	4680      	mov	r8, r0
   102c0:	4689      	mov	r9, r1
   102c2:	f7fb fb8d 	bl	b9e0 <__aeabi_dcmpeq>
   102c6:	2800      	cmp	r0, #0
   102c8:	d0d6      	beq.n	10278 <_dtoa_r+0x560>
   102ca:	9d04      	ldr	r5, [sp, #16]
   102cc:	9c06      	ldr	r4, [sp, #24]
   102ce:	9b07      	ldr	r3, [sp, #28]
   102d0:	3301      	adds	r3, #1
   102d2:	9307      	str	r3, [sp, #28]
   102d4:	46b1      	mov	r9, r6
   102d6:	e0d6      	b.n	10486 <_dtoa_r+0x76e>
   102d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   102da:	2a00      	cmp	r2, #0
   102dc:	f000 8107 	beq.w	104ee <_dtoa_r+0x7d6>
   102e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
   102e2:	2a01      	cmp	r2, #1
   102e4:	f340 8294 	ble.w	10810 <_dtoa_r+0xaf8>
   102e8:	9b08      	ldr	r3, [sp, #32]
   102ea:	f103 38ff 	add.w	r8, r3, #4294967295
   102ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   102f0:	4543      	cmp	r3, r8
   102f2:	f280 825e 	bge.w	107b2 <_dtoa_r+0xa9a>
   102f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   102f8:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   102fc:	eba8 0303 	sub.w	r3, r8, r3
   10300:	449b      	add	fp, r3
   10302:	f04f 0800 	mov.w	r8, #0
   10306:	9b08      	ldr	r3, [sp, #32]
   10308:	2b00      	cmp	r3, #0
   1030a:	f2c0 832f 	blt.w	1096c <_dtoa_r+0xc54>
   1030e:	9a06      	ldr	r2, [sp, #24]
   10310:	441a      	add	r2, r3
   10312:	9206      	str	r2, [sp, #24]
   10314:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10316:	4617      	mov	r7, r2
   10318:	441a      	add	r2, r3
   1031a:	9209      	str	r2, [sp, #36]	; 0x24
   1031c:	2101      	movs	r1, #1
   1031e:	4620      	mov	r0, r4
   10320:	f7fd f948 	bl	d5b4 <__i2b>
   10324:	4606      	mov	r6, r0
   10326:	b167      	cbz	r7, 10342 <_dtoa_r+0x62a>
   10328:	9906      	ldr	r1, [sp, #24]
   1032a:	2900      	cmp	r1, #0
   1032c:	460b      	mov	r3, r1
   1032e:	dd08      	ble.n	10342 <_dtoa_r+0x62a>
   10330:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10332:	42b9      	cmp	r1, r7
   10334:	bfa8      	it	ge
   10336:	463b      	movge	r3, r7
   10338:	1ad2      	subs	r2, r2, r3
   1033a:	1aff      	subs	r7, r7, r3
   1033c:	1acb      	subs	r3, r1, r3
   1033e:	9209      	str	r2, [sp, #36]	; 0x24
   10340:	9306      	str	r3, [sp, #24]
   10342:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10344:	b163      	cbz	r3, 10360 <_dtoa_r+0x648>
   10346:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10348:	2b00      	cmp	r3, #0
   1034a:	f000 82b6 	beq.w	108ba <_dtoa_r+0xba2>
   1034e:	f1b8 0f00 	cmp.w	r8, #0
   10352:	f300 8231 	bgt.w	107b8 <_dtoa_r+0xaa0>
   10356:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10358:	ebb3 0208 	subs.w	r2, r3, r8
   1035c:	f040 8316 	bne.w	1098c <_dtoa_r+0xc74>
   10360:	2101      	movs	r1, #1
   10362:	4620      	mov	r0, r4
   10364:	f7fd f926 	bl	d5b4 <__i2b>
   10368:	f1bb 0f00 	cmp.w	fp, #0
   1036c:	4682      	mov	sl, r0
   1036e:	f300 80d4 	bgt.w	1051a <_dtoa_r+0x802>
   10372:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10374:	2b01      	cmp	r3, #1
   10376:	f340 81a7 	ble.w	106c8 <_dtoa_r+0x9b0>
   1037a:	f04f 0900 	mov.w	r9, #0
   1037e:	2001      	movs	r0, #1
   10380:	f1bb 0f00 	cmp.w	fp, #0
   10384:	f040 80d5 	bne.w	10532 <_dtoa_r+0x81a>
   10388:	9b06      	ldr	r3, [sp, #24]
   1038a:	4418      	add	r0, r3
   1038c:	f010 001f 	ands.w	r0, r0, #31
   10390:	f000 8198 	beq.w	106c4 <_dtoa_r+0x9ac>
   10394:	f1c0 0320 	rsb	r3, r0, #32
   10398:	2b04      	cmp	r3, #4
   1039a:	f300 80ad 	bgt.w	104f8 <_dtoa_r+0x7e0>
   1039e:	f040 8224 	bne.w	107ea <_dtoa_r+0xad2>
   103a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   103a4:	2b00      	cmp	r3, #0
   103a6:	dd05      	ble.n	103b4 <_dtoa_r+0x69c>
   103a8:	4629      	mov	r1, r5
   103aa:	461a      	mov	r2, r3
   103ac:	4620      	mov	r0, r4
   103ae:	f7fd fa3d 	bl	d82c <__lshift>
   103b2:	4605      	mov	r5, r0
   103b4:	9b06      	ldr	r3, [sp, #24]
   103b6:	2b00      	cmp	r3, #0
   103b8:	dd05      	ble.n	103c6 <_dtoa_r+0x6ae>
   103ba:	4651      	mov	r1, sl
   103bc:	461a      	mov	r2, r3
   103be:	4620      	mov	r0, r4
   103c0:	f7fd fa34 	bl	d82c <__lshift>
   103c4:	4682      	mov	sl, r0
   103c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   103c8:	2b00      	cmp	r3, #0
   103ca:	f040 815c 	bne.w	10686 <_dtoa_r+0x96e>
   103ce:	9b08      	ldr	r3, [sp, #32]
   103d0:	2b00      	cmp	r3, #0
   103d2:	f340 8143 	ble.w	1065c <_dtoa_r+0x944>
   103d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   103d8:	2b00      	cmp	r3, #0
   103da:	f040 80c6 	bne.w	1056a <_dtoa_r+0x852>
   103de:	9b07      	ldr	r3, [sp, #28]
   103e0:	3301      	adds	r3, #1
   103e2:	9307      	str	r3, [sp, #28]
   103e4:	f8dd 800c 	ldr.w	r8, [sp, #12]
   103e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
   103ec:	2701      	movs	r7, #1
   103ee:	e007      	b.n	10400 <_dtoa_r+0x6e8>
   103f0:	4629      	mov	r1, r5
   103f2:	2300      	movs	r3, #0
   103f4:	220a      	movs	r2, #10
   103f6:	4620      	mov	r0, r4
   103f8:	f7fd f83c 	bl	d474 <__multadd>
   103fc:	3701      	adds	r7, #1
   103fe:	4605      	mov	r5, r0
   10400:	4651      	mov	r1, sl
   10402:	4628      	mov	r0, r5
   10404:	f7ff fbf4 	bl	fbf0 <quorem>
   10408:	45b9      	cmp	r9, r7
   1040a:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1040e:	f808 3b01 	strb.w	r3, [r8], #1
   10412:	dced      	bgt.n	103f0 <_dtoa_r+0x6d8>
   10414:	9a08      	ldr	r2, [sp, #32]
   10416:	2a00      	cmp	r2, #0
   10418:	bfc8      	it	gt
   1041a:	4693      	movgt	fp, r2
   1041c:	9a03      	ldr	r2, [sp, #12]
   1041e:	bfd8      	it	le
   10420:	f04f 0b01 	movle.w	fp, #1
   10424:	4493      	add	fp, r2
   10426:	2700      	movs	r7, #0
   10428:	4629      	mov	r1, r5
   1042a:	2201      	movs	r2, #1
   1042c:	4620      	mov	r0, r4
   1042e:	9304      	str	r3, [sp, #16]
   10430:	f7fd f9fc 	bl	d82c <__lshift>
   10434:	4651      	mov	r1, sl
   10436:	4605      	mov	r5, r0
   10438:	f7fd fa70 	bl	d91c <__mcmp>
   1043c:	2800      	cmp	r0, #0
   1043e:	f340 81dc 	ble.w	107fa <_dtoa_r+0xae2>
   10442:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   10446:	9a03      	ldr	r2, [sp, #12]
   10448:	f10b 3bff 	add.w	fp, fp, #4294967295
   1044c:	e004      	b.n	10458 <_dtoa_r+0x740>
   1044e:	455a      	cmp	r2, fp
   10450:	f000 81ee 	beq.w	10830 <_dtoa_r+0xb18>
   10454:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   10458:	2b39      	cmp	r3, #57	; 0x39
   1045a:	f10b 0901 	add.w	r9, fp, #1
   1045e:	d0f6      	beq.n	1044e <_dtoa_r+0x736>
   10460:	3301      	adds	r3, #1
   10462:	f88b 3000 	strb.w	r3, [fp]
   10466:	4651      	mov	r1, sl
   10468:	4620      	mov	r0, r4
   1046a:	f7fc fff9 	bl	d460 <_Bfree>
   1046e:	b156      	cbz	r6, 10486 <_dtoa_r+0x76e>
   10470:	b12f      	cbz	r7, 1047e <_dtoa_r+0x766>
   10472:	42b7      	cmp	r7, r6
   10474:	d003      	beq.n	1047e <_dtoa_r+0x766>
   10476:	4639      	mov	r1, r7
   10478:	4620      	mov	r0, r4
   1047a:	f7fc fff1 	bl	d460 <_Bfree>
   1047e:	4631      	mov	r1, r6
   10480:	4620      	mov	r0, r4
   10482:	f7fc ffed 	bl	d460 <_Bfree>
   10486:	4629      	mov	r1, r5
   10488:	4620      	mov	r0, r4
   1048a:	f7fc ffe9 	bl	d460 <_Bfree>
   1048e:	2300      	movs	r3, #0
   10490:	f889 3000 	strb.w	r3, [r9]
   10494:	9b24      	ldr	r3, [sp, #144]	; 0x90
   10496:	9a07      	ldr	r2, [sp, #28]
   10498:	601a      	str	r2, [r3, #0]
   1049a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1049c:	2b00      	cmp	r3, #0
   1049e:	f43f ac77 	beq.w	fd90 <_dtoa_r+0x78>
   104a2:	9803      	ldr	r0, [sp, #12]
   104a4:	f8c3 9000 	str.w	r9, [r3]
   104a8:	b019      	add	sp, #100	; 0x64
   104aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   104ae:	2301      	movs	r3, #1
   104b0:	1bbf      	subs	r7, r7, r6
   104b2:	930e      	str	r3, [sp, #56]	; 0x38
   104b4:	1e7b      	subs	r3, r7, #1
   104b6:	9306      	str	r3, [sp, #24]
   104b8:	f57f acd9 	bpl.w	fe6e <_dtoa_r+0x156>
   104bc:	f1c7 0301 	rsb	r3, r7, #1
   104c0:	9309      	str	r3, [sp, #36]	; 0x24
   104c2:	2300      	movs	r3, #0
   104c4:	9306      	str	r3, [sp, #24]
   104c6:	e4d4      	b.n	fe72 <_dtoa_r+0x15a>
   104c8:	4658      	mov	r0, fp
   104ca:	f7fb f9c9 	bl	b860 <__aeabi_i2d>
   104ce:	4642      	mov	r2, r8
   104d0:	464b      	mov	r3, r9
   104d2:	f7fb fa85 	bl	b9e0 <__aeabi_dcmpeq>
   104d6:	2800      	cmp	r0, #0
   104d8:	f47f acb1 	bne.w	fe3e <_dtoa_r+0x126>
   104dc:	f10b 3bff 	add.w	fp, fp, #4294967295
   104e0:	e4ad      	b.n	fe3e <_dtoa_r+0x126>
   104e2:	4b1a      	ldr	r3, [pc, #104]	; (1054c <_dtoa_r+0x834>)
   104e4:	9303      	str	r3, [sp, #12]
   104e6:	9803      	ldr	r0, [sp, #12]
   104e8:	b019      	add	sp, #100	; 0x64
   104ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   104ee:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   104f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
   104f4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   104f6:	e716      	b.n	10326 <_dtoa_r+0x60e>
   104f8:	f1c0 001c 	rsb	r0, r0, #28
   104fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   104fe:	4403      	add	r3, r0
   10500:	9309      	str	r3, [sp, #36]	; 0x24
   10502:	9b06      	ldr	r3, [sp, #24]
   10504:	4403      	add	r3, r0
   10506:	4407      	add	r7, r0
   10508:	9306      	str	r3, [sp, #24]
   1050a:	e74a      	b.n	103a2 <_dtoa_r+0x68a>
   1050c:	2601      	movs	r6, #1
   1050e:	e4c7      	b.n	fea0 <_dtoa_r+0x188>
   10510:	f1c3 0320 	rsb	r3, r3, #32
   10514:	fa08 f003 	lsl.w	r0, r8, r3
   10518:	e45e      	b.n	fdd8 <_dtoa_r+0xc0>
   1051a:	4601      	mov	r1, r0
   1051c:	465a      	mov	r2, fp
   1051e:	4620      	mov	r0, r4
   10520:	f7fd f924 	bl	d76c <__pow5mult>
   10524:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10526:	2b01      	cmp	r3, #1
   10528:	4682      	mov	sl, r0
   1052a:	f340 81ba 	ble.w	108a2 <_dtoa_r+0xb8a>
   1052e:	f04f 0900 	mov.w	r9, #0
   10532:	f8da 3010 	ldr.w	r3, [sl, #16]
   10536:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
   1053a:	6918      	ldr	r0, [r3, #16]
   1053c:	f7fc ffea 	bl	d514 <__hi0bits>
   10540:	f1c0 0020 	rsb	r0, r0, #32
   10544:	e720      	b.n	10388 <_dtoa_r+0x670>
   10546:	bf00      	nop
   10548:	40240000 	.word	0x40240000
   1054c:	00012f18 	.word	0x00012f18
   10550:	4631      	mov	r1, r6
   10552:	2300      	movs	r3, #0
   10554:	220a      	movs	r2, #10
   10556:	4620      	mov	r0, r4
   10558:	f7fc ff8c 	bl	d474 <__multadd>
   1055c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1055e:	2b00      	cmp	r3, #0
   10560:	4606      	mov	r6, r0
   10562:	f340 82f3 	ble.w	10b4c <_dtoa_r+0xe34>
   10566:	e9cd 8307 	strd	r8, r3, [sp, #28]
   1056a:	2f00      	cmp	r7, #0
   1056c:	f300 811a 	bgt.w	107a4 <_dtoa_r+0xa8c>
   10570:	f1b9 0f00 	cmp.w	r9, #0
   10574:	f040 81e3 	bne.w	1093e <_dtoa_r+0xc26>
   10578:	46b0      	mov	r8, r6
   1057a:	9b04      	ldr	r3, [sp, #16]
   1057c:	9f03      	ldr	r7, [sp, #12]
   1057e:	9908      	ldr	r1, [sp, #32]
   10580:	f003 0201 	and.w	r2, r3, #1
   10584:	1e7b      	subs	r3, r7, #1
   10586:	4419      	add	r1, r3
   10588:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1058a:	920c      	str	r2, [sp, #48]	; 0x30
   1058c:	4313      	orrs	r3, r2
   1058e:	9109      	str	r1, [sp, #36]	; 0x24
   10590:	930a      	str	r3, [sp, #40]	; 0x28
   10592:	4651      	mov	r1, sl
   10594:	4628      	mov	r0, r5
   10596:	f7ff fb2b 	bl	fbf0 <quorem>
   1059a:	4631      	mov	r1, r6
   1059c:	4683      	mov	fp, r0
   1059e:	4628      	mov	r0, r5
   105a0:	f7fd f9bc 	bl	d91c <__mcmp>
   105a4:	4642      	mov	r2, r8
   105a6:	4651      	mov	r1, sl
   105a8:	4681      	mov	r9, r0
   105aa:	4620      	mov	r0, r4
   105ac:	f7fd f9d6 	bl	d95c <__mdiff>
   105b0:	68c2      	ldr	r2, [r0, #12]
   105b2:	4601      	mov	r1, r0
   105b4:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   105b8:	2a00      	cmp	r2, #0
   105ba:	d142      	bne.n	10642 <_dtoa_r+0x92a>
   105bc:	9006      	str	r0, [sp, #24]
   105be:	4628      	mov	r0, r5
   105c0:	9308      	str	r3, [sp, #32]
   105c2:	f7fd f9ab 	bl	d91c <__mcmp>
   105c6:	9906      	ldr	r1, [sp, #24]
   105c8:	9004      	str	r0, [sp, #16]
   105ca:	4620      	mov	r0, r4
   105cc:	f7fc ff48 	bl	d460 <_Bfree>
   105d0:	9a04      	ldr	r2, [sp, #16]
   105d2:	9b08      	ldr	r3, [sp, #32]
   105d4:	b91a      	cbnz	r2, 105de <_dtoa_r+0x8c6>
   105d6:	990a      	ldr	r1, [sp, #40]	; 0x28
   105d8:	2900      	cmp	r1, #0
   105da:	f000 82a9 	beq.w	10b30 <_dtoa_r+0xe18>
   105de:	f1b9 0f00 	cmp.w	r9, #0
   105e2:	f2c0 8171 	blt.w	108c8 <_dtoa_r+0xbb0>
   105e6:	9922      	ldr	r1, [sp, #136]	; 0x88
   105e8:	ea49 0901 	orr.w	r9, r9, r1
   105ec:	990c      	ldr	r1, [sp, #48]	; 0x30
   105ee:	ea51 0909 	orrs.w	r9, r1, r9
   105f2:	f000 8169 	beq.w	108c8 <_dtoa_r+0xbb0>
   105f6:	2a00      	cmp	r2, #0
   105f8:	f300 81bc 	bgt.w	10974 <_dtoa_r+0xc5c>
   105fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   105fe:	703b      	strb	r3, [r7, #0]
   10600:	f107 0901 	add.w	r9, r7, #1
   10604:	4297      	cmp	r7, r2
   10606:	46cb      	mov	fp, r9
   10608:	f000 81ba 	beq.w	10980 <_dtoa_r+0xc68>
   1060c:	4629      	mov	r1, r5
   1060e:	2300      	movs	r3, #0
   10610:	220a      	movs	r2, #10
   10612:	4620      	mov	r0, r4
   10614:	f7fc ff2e 	bl	d474 <__multadd>
   10618:	4546      	cmp	r6, r8
   1061a:	4605      	mov	r5, r0
   1061c:	4631      	mov	r1, r6
   1061e:	f04f 0300 	mov.w	r3, #0
   10622:	f04f 020a 	mov.w	r2, #10
   10626:	4620      	mov	r0, r4
   10628:	d012      	beq.n	10650 <_dtoa_r+0x938>
   1062a:	f7fc ff23 	bl	d474 <__multadd>
   1062e:	4641      	mov	r1, r8
   10630:	4606      	mov	r6, r0
   10632:	2300      	movs	r3, #0
   10634:	220a      	movs	r2, #10
   10636:	4620      	mov	r0, r4
   10638:	f7fc ff1c 	bl	d474 <__multadd>
   1063c:	464f      	mov	r7, r9
   1063e:	4680      	mov	r8, r0
   10640:	e7a7      	b.n	10592 <_dtoa_r+0x87a>
   10642:	4620      	mov	r0, r4
   10644:	9304      	str	r3, [sp, #16]
   10646:	f7fc ff0b 	bl	d460 <_Bfree>
   1064a:	9b04      	ldr	r3, [sp, #16]
   1064c:	2201      	movs	r2, #1
   1064e:	e7c6      	b.n	105de <_dtoa_r+0x8c6>
   10650:	f7fc ff10 	bl	d474 <__multadd>
   10654:	464f      	mov	r7, r9
   10656:	4606      	mov	r6, r0
   10658:	4680      	mov	r8, r0
   1065a:	e79a      	b.n	10592 <_dtoa_r+0x87a>
   1065c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1065e:	2b02      	cmp	r3, #2
   10660:	dc79      	bgt.n	10756 <_dtoa_r+0xa3e>
   10662:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10664:	2b00      	cmp	r3, #0
   10666:	d180      	bne.n	1056a <_dtoa_r+0x852>
   10668:	9b07      	ldr	r3, [sp, #28]
   1066a:	4651      	mov	r1, sl
   1066c:	3301      	adds	r3, #1
   1066e:	4628      	mov	r0, r5
   10670:	9307      	str	r3, [sp, #28]
   10672:	f7ff fabd 	bl	fbf0 <quorem>
   10676:	f8dd b00c 	ldr.w	fp, [sp, #12]
   1067a:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1067e:	f80b 3b01 	strb.w	r3, [fp], #1
   10682:	2700      	movs	r7, #0
   10684:	e6d0      	b.n	10428 <_dtoa_r+0x710>
   10686:	4651      	mov	r1, sl
   10688:	4628      	mov	r0, r5
   1068a:	f7fd f947 	bl	d91c <__mcmp>
   1068e:	2800      	cmp	r0, #0
   10690:	f6bf ae9d 	bge.w	103ce <_dtoa_r+0x6b6>
   10694:	4629      	mov	r1, r5
   10696:	2300      	movs	r3, #0
   10698:	220a      	movs	r2, #10
   1069a:	4620      	mov	r0, r4
   1069c:	f7fc feea 	bl	d474 <__multadd>
   106a0:	9b07      	ldr	r3, [sp, #28]
   106a2:	f103 38ff 	add.w	r8, r3, #4294967295
   106a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   106a8:	4605      	mov	r5, r0
   106aa:	2b00      	cmp	r3, #0
   106ac:	f47f af50 	bne.w	10550 <_dtoa_r+0x838>
   106b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   106b2:	2b00      	cmp	r3, #0
   106b4:	f340 8243 	ble.w	10b3e <_dtoa_r+0xe26>
   106b8:	9308      	str	r3, [sp, #32]
   106ba:	e693      	b.n	103e4 <_dtoa_r+0x6cc>
   106bc:	4bb6      	ldr	r3, [pc, #728]	; (10998 <_dtoa_r+0xc80>)
   106be:	9303      	str	r3, [sp, #12]
   106c0:	3303      	adds	r3, #3
   106c2:	e408      	b.n	fed6 <_dtoa_r+0x1be>
   106c4:	201c      	movs	r0, #28
   106c6:	e719      	b.n	104fc <_dtoa_r+0x7e4>
   106c8:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   106cc:	2900      	cmp	r1, #0
   106ce:	f47f ae54 	bne.w	1037a <_dtoa_r+0x662>
   106d2:	f3c2 0313 	ubfx	r3, r2, #0, #20
   106d6:	2b00      	cmp	r3, #0
   106d8:	f47f ae4f 	bne.w	1037a <_dtoa_r+0x662>
   106dc:	4baf      	ldr	r3, [pc, #700]	; (1099c <_dtoa_r+0xc84>)
   106de:	4013      	ands	r3, r2
   106e0:	2b00      	cmp	r3, #0
   106e2:	f000 820b 	beq.w	10afc <_dtoa_r+0xde4>
   106e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   106e8:	3301      	adds	r3, #1
   106ea:	9309      	str	r3, [sp, #36]	; 0x24
   106ec:	9b06      	ldr	r3, [sp, #24]
   106ee:	3301      	adds	r3, #1
   106f0:	9306      	str	r3, [sp, #24]
   106f2:	f04f 0901 	mov.w	r9, #1
   106f6:	e642      	b.n	1037e <_dtoa_r+0x666>
   106f8:	2301      	movs	r3, #1
   106fa:	930c      	str	r3, [sp, #48]	; 0x30
   106fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   106fe:	9a07      	ldr	r2, [sp, #28]
   10700:	4413      	add	r3, r2
   10702:	9312      	str	r3, [sp, #72]	; 0x48
   10704:	3301      	adds	r3, #1
   10706:	2b01      	cmp	r3, #1
   10708:	461f      	mov	r7, r3
   1070a:	9308      	str	r3, [sp, #32]
   1070c:	bfb8      	it	lt
   1070e:	2701      	movlt	r7, #1
   10710:	2100      	movs	r1, #0
   10712:	2f17      	cmp	r7, #23
   10714:	63e1      	str	r1, [r4, #60]	; 0x3c
   10716:	f77f ac2f 	ble.w	ff78 <_dtoa_r+0x260>
   1071a:	2201      	movs	r2, #1
   1071c:	2304      	movs	r3, #4
   1071e:	005b      	lsls	r3, r3, #1
   10720:	f103 0014 	add.w	r0, r3, #20
   10724:	42b8      	cmp	r0, r7
   10726:	4611      	mov	r1, r2
   10728:	f102 0201 	add.w	r2, r2, #1
   1072c:	d9f7      	bls.n	1071e <_dtoa_r+0xa06>
   1072e:	63e1      	str	r1, [r4, #60]	; 0x3c
   10730:	e422      	b.n	ff78 <_dtoa_r+0x260>
   10732:	2301      	movs	r3, #1
   10734:	930c      	str	r3, [sp, #48]	; 0x30
   10736:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   10738:	2b00      	cmp	r3, #0
   1073a:	dd59      	ble.n	107f0 <_dtoa_r+0xad8>
   1073c:	9312      	str	r3, [sp, #72]	; 0x48
   1073e:	9308      	str	r3, [sp, #32]
   10740:	461f      	mov	r7, r3
   10742:	e7e5      	b.n	10710 <_dtoa_r+0x9f8>
   10744:	2300      	movs	r3, #0
   10746:	930c      	str	r3, [sp, #48]	; 0x30
   10748:	e7d8      	b.n	106fc <_dtoa_r+0x9e4>
   1074a:	2300      	movs	r3, #0
   1074c:	930c      	str	r3, [sp, #48]	; 0x30
   1074e:	e7f2      	b.n	10736 <_dtoa_r+0xa1e>
   10750:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10752:	e9cd 8307 	strd	r8, r3, [sp, #28]
   10756:	9b08      	ldr	r3, [sp, #32]
   10758:	2b00      	cmp	r3, #0
   1075a:	f47f ad54 	bne.w	10206 <_dtoa_r+0x4ee>
   1075e:	4651      	mov	r1, sl
   10760:	2205      	movs	r2, #5
   10762:	4620      	mov	r0, r4
   10764:	f7fc fe86 	bl	d474 <__multadd>
   10768:	4601      	mov	r1, r0
   1076a:	4682      	mov	sl, r0
   1076c:	4628      	mov	r0, r5
   1076e:	f7fd f8d5 	bl	d91c <__mcmp>
   10772:	2800      	cmp	r0, #0
   10774:	f77f ad47 	ble.w	10206 <_dtoa_r+0x4ee>
   10778:	9b03      	ldr	r3, [sp, #12]
   1077a:	9f07      	ldr	r7, [sp, #28]
   1077c:	2231      	movs	r2, #49	; 0x31
   1077e:	4698      	mov	r8, r3
   10780:	f803 2b01 	strb.w	r2, [r3], #1
   10784:	3701      	adds	r7, #1
   10786:	9303      	str	r3, [sp, #12]
   10788:	4651      	mov	r1, sl
   1078a:	4620      	mov	r0, r4
   1078c:	f7fc fe68 	bl	d460 <_Bfree>
   10790:	1c7b      	adds	r3, r7, #1
   10792:	f8dd 900c 	ldr.w	r9, [sp, #12]
   10796:	9307      	str	r3, [sp, #28]
   10798:	f8cd 800c 	str.w	r8, [sp, #12]
   1079c:	2e00      	cmp	r6, #0
   1079e:	f47f ae6e 	bne.w	1047e <_dtoa_r+0x766>
   107a2:	e670      	b.n	10486 <_dtoa_r+0x76e>
   107a4:	4631      	mov	r1, r6
   107a6:	463a      	mov	r2, r7
   107a8:	4620      	mov	r0, r4
   107aa:	f7fd f83f 	bl	d82c <__lshift>
   107ae:	4606      	mov	r6, r0
   107b0:	e6de      	b.n	10570 <_dtoa_r+0x858>
   107b2:	eba3 0808 	sub.w	r8, r3, r8
   107b6:	e5a6      	b.n	10306 <_dtoa_r+0x5ee>
   107b8:	4631      	mov	r1, r6
   107ba:	4642      	mov	r2, r8
   107bc:	4620      	mov	r0, r4
   107be:	f7fc ffd5 	bl	d76c <__pow5mult>
   107c2:	462a      	mov	r2, r5
   107c4:	4601      	mov	r1, r0
   107c6:	4606      	mov	r6, r0
   107c8:	4620      	mov	r0, r4
   107ca:	f7fc ff21 	bl	d610 <__multiply>
   107ce:	4629      	mov	r1, r5
   107d0:	4605      	mov	r5, r0
   107d2:	4620      	mov	r0, r4
   107d4:	f7fc fe44 	bl	d460 <_Bfree>
   107d8:	e5bd      	b.n	10356 <_dtoa_r+0x63e>
   107da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   107de:	f04f 0a02 	mov.w	sl, #2
   107e2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   107e6:	f7ff bbf4 	b.w	ffd2 <_dtoa_r+0x2ba>
   107ea:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   107ee:	e685      	b.n	104fc <_dtoa_r+0x7e4>
   107f0:	2301      	movs	r3, #1
   107f2:	9323      	str	r3, [sp, #140]	; 0x8c
   107f4:	9308      	str	r3, [sp, #32]
   107f6:	f7ff bbbb 	b.w	ff70 <_dtoa_r+0x258>
   107fa:	d103      	bne.n	10804 <_dtoa_r+0xaec>
   107fc:	9b04      	ldr	r3, [sp, #16]
   107fe:	07db      	lsls	r3, r3, #31
   10800:	f53f ae1f 	bmi.w	10442 <_dtoa_r+0x72a>
   10804:	46d9      	mov	r9, fp
   10806:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   1080a:	2b30      	cmp	r3, #48	; 0x30
   1080c:	d0fa      	beq.n	10804 <_dtoa_r+0xaec>
   1080e:	e62a      	b.n	10466 <_dtoa_r+0x74e>
   10810:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   10812:	2a00      	cmp	r2, #0
   10814:	f000 812d 	beq.w	10a72 <_dtoa_r+0xd5a>
   10818:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1081c:	9a06      	ldr	r2, [sp, #24]
   1081e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   10822:	441a      	add	r2, r3
   10824:	9206      	str	r2, [sp, #24]
   10826:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10828:	4617      	mov	r7, r2
   1082a:	441a      	add	r2, r3
   1082c:	9209      	str	r2, [sp, #36]	; 0x24
   1082e:	e575      	b.n	1031c <_dtoa_r+0x604>
   10830:	9b07      	ldr	r3, [sp, #28]
   10832:	9a03      	ldr	r2, [sp, #12]
   10834:	3301      	adds	r3, #1
   10836:	9307      	str	r3, [sp, #28]
   10838:	2331      	movs	r3, #49	; 0x31
   1083a:	7013      	strb	r3, [r2, #0]
   1083c:	e613      	b.n	10466 <_dtoa_r+0x74e>
   1083e:	f04f 0a00 	mov.w	sl, #0
   10842:	4656      	mov	r6, sl
   10844:	e4df      	b.n	10206 <_dtoa_r+0x4ee>
   10846:	900e      	str	r0, [sp, #56]	; 0x38
   10848:	e638      	b.n	104bc <_dtoa_r+0x7a4>
   1084a:	f000 813d 	beq.w	10ac8 <_dtoa_r+0xdb0>
   1084e:	9a07      	ldr	r2, [sp, #28]
   10850:	4b53      	ldr	r3, [pc, #332]	; (109a0 <_dtoa_r+0xc88>)
   10852:	4256      	negs	r6, r2
   10854:	f006 020f 	and.w	r2, r6, #15
   10858:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1085c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10860:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   10864:	f001 fe98 	bl	12598 <__aeabi_dmul>
   10868:	1136      	asrs	r6, r6, #4
   1086a:	4680      	mov	r8, r0
   1086c:	4689      	mov	r9, r1
   1086e:	f000 8178 	beq.w	10b62 <_dtoa_r+0xe4a>
   10872:	4f4c      	ldr	r7, [pc, #304]	; (109a4 <_dtoa_r+0xc8c>)
   10874:	2300      	movs	r3, #0
   10876:	f04f 0a02 	mov.w	sl, #2
   1087a:	07f2      	lsls	r2, r6, #31
   1087c:	d506      	bpl.n	1088c <_dtoa_r+0xb74>
   1087e:	e9d7 2300 	ldrd	r2, r3, [r7]
   10882:	f001 fe89 	bl	12598 <__aeabi_dmul>
   10886:	f10a 0a01 	add.w	sl, sl, #1
   1088a:	2301      	movs	r3, #1
   1088c:	1076      	asrs	r6, r6, #1
   1088e:	f107 0708 	add.w	r7, r7, #8
   10892:	d1f2      	bne.n	1087a <_dtoa_r+0xb62>
   10894:	2b00      	cmp	r3, #0
   10896:	f43f abbb 	beq.w	10010 <_dtoa_r+0x2f8>
   1089a:	4680      	mov	r8, r0
   1089c:	4689      	mov	r9, r1
   1089e:	f7ff bbb7 	b.w	10010 <_dtoa_r+0x2f8>
   108a2:	9b04      	ldr	r3, [sp, #16]
   108a4:	2b00      	cmp	r3, #0
   108a6:	f47f ae42 	bne.w	1052e <_dtoa_r+0x816>
   108aa:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   108ae:	f3c2 0313 	ubfx	r3, r2, #0, #20
   108b2:	2b00      	cmp	r3, #0
   108b4:	f43f af12 	beq.w	106dc <_dtoa_r+0x9c4>
   108b8:	e639      	b.n	1052e <_dtoa_r+0x816>
   108ba:	4629      	mov	r1, r5
   108bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   108be:	4620      	mov	r0, r4
   108c0:	f7fc ff54 	bl	d76c <__pow5mult>
   108c4:	4605      	mov	r5, r0
   108c6:	e54b      	b.n	10360 <_dtoa_r+0x648>
   108c8:	2a00      	cmp	r2, #0
   108ca:	dd12      	ble.n	108f2 <_dtoa_r+0xbda>
   108cc:	4629      	mov	r1, r5
   108ce:	2201      	movs	r2, #1
   108d0:	4620      	mov	r0, r4
   108d2:	9304      	str	r3, [sp, #16]
   108d4:	f7fc ffaa 	bl	d82c <__lshift>
   108d8:	4651      	mov	r1, sl
   108da:	4605      	mov	r5, r0
   108dc:	f7fd f81e 	bl	d91c <__mcmp>
   108e0:	2800      	cmp	r0, #0
   108e2:	9b04      	ldr	r3, [sp, #16]
   108e4:	f340 8118 	ble.w	10b18 <_dtoa_r+0xe00>
   108e8:	2b39      	cmp	r3, #57	; 0x39
   108ea:	f000 80f9 	beq.w	10ae0 <_dtoa_r+0xdc8>
   108ee:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   108f2:	46b9      	mov	r9, r7
   108f4:	f809 3b01 	strb.w	r3, [r9], #1
   108f8:	9b07      	ldr	r3, [sp, #28]
   108fa:	3301      	adds	r3, #1
   108fc:	4637      	mov	r7, r6
   108fe:	9307      	str	r3, [sp, #28]
   10900:	4646      	mov	r6, r8
   10902:	e5b0      	b.n	10466 <_dtoa_r+0x74e>
   10904:	9509      	str	r5, [sp, #36]	; 0x24
   10906:	9c06      	ldr	r4, [sp, #24]
   10908:	9d04      	ldr	r5, [sp, #16]
   1090a:	4602      	mov	r2, r0
   1090c:	460b      	mov	r3, r1
   1090e:	f7fa fe5b 	bl	b5c8 <__adddf3>
   10912:	4652      	mov	r2, sl
   10914:	465b      	mov	r3, fp
   10916:	4680      	mov	r8, r0
   10918:	4689      	mov	r9, r1
   1091a:	f7fb f889 	bl	ba30 <__aeabi_dcmpgt>
   1091e:	b960      	cbnz	r0, 1093a <_dtoa_r+0xc22>
   10920:	4652      	mov	r2, sl
   10922:	465b      	mov	r3, fp
   10924:	4640      	mov	r0, r8
   10926:	4649      	mov	r1, r9
   10928:	f7fb f85a 	bl	b9e0 <__aeabi_dcmpeq>
   1092c:	2800      	cmp	r0, #0
   1092e:	f43f acce 	beq.w	102ce <_dtoa_r+0x5b6>
   10932:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10934:	07d9      	lsls	r1, r3, #31
   10936:	f57f acca 	bpl.w	102ce <_dtoa_r+0x5b6>
   1093a:	9a03      	ldr	r2, [sp, #12]
   1093c:	e404      	b.n	10148 <_dtoa_r+0x430>
   1093e:	6871      	ldr	r1, [r6, #4]
   10940:	4620      	mov	r0, r4
   10942:	f7fc fd67 	bl	d414 <_Balloc>
   10946:	4607      	mov	r7, r0
   10948:	2800      	cmp	r0, #0
   1094a:	f000 810e 	beq.w	10b6a <_dtoa_r+0xe52>
   1094e:	6933      	ldr	r3, [r6, #16]
   10950:	3302      	adds	r3, #2
   10952:	009a      	lsls	r2, r3, #2
   10954:	f106 010c 	add.w	r1, r6, #12
   10958:	300c      	adds	r0, #12
   1095a:	f7f8 f8e9 	bl	8b30 <memcpy>
   1095e:	4639      	mov	r1, r7
   10960:	2201      	movs	r2, #1
   10962:	4620      	mov	r0, r4
   10964:	f7fc ff62 	bl	d82c <__lshift>
   10968:	4680      	mov	r8, r0
   1096a:	e606      	b.n	1057a <_dtoa_r+0x862>
   1096c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   10970:	1a9f      	subs	r7, r3, r2
   10972:	e4d3      	b.n	1031c <_dtoa_r+0x604>
   10974:	2b39      	cmp	r3, #57	; 0x39
   10976:	f000 80b3 	beq.w	10ae0 <_dtoa_r+0xdc8>
   1097a:	46b9      	mov	r9, r7
   1097c:	3301      	adds	r3, #1
   1097e:	e7b9      	b.n	108f4 <_dtoa_r+0xbdc>
   10980:	9a07      	ldr	r2, [sp, #28]
   10982:	3201      	adds	r2, #1
   10984:	4637      	mov	r7, r6
   10986:	9207      	str	r2, [sp, #28]
   10988:	4646      	mov	r6, r8
   1098a:	e54d      	b.n	10428 <_dtoa_r+0x710>
   1098c:	4629      	mov	r1, r5
   1098e:	4620      	mov	r0, r4
   10990:	f7fc feec 	bl	d76c <__pow5mult>
   10994:	4605      	mov	r5, r0
   10996:	e4e3      	b.n	10360 <_dtoa_r+0x648>
   10998:	00014548 	.word	0x00014548
   1099c:	7ff00000 	.word	0x7ff00000
   109a0:	000143d0 	.word	0x000143d0
   109a4:	000143a8 	.word	0x000143a8
   109a8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   109ac:	4981      	ldr	r1, [pc, #516]	; (10bb4 <_dtoa_r+0xe9c>)
   109ae:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
   109b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   109b6:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   109ba:	f001 fded 	bl	12598 <__aeabi_dmul>
   109be:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   109c2:	4649      	mov	r1, r9
   109c4:	4640      	mov	r0, r8
   109c6:	f001 fff9 	bl	129bc <__aeabi_d2iz>
   109ca:	4606      	mov	r6, r0
   109cc:	f7fa ff48 	bl	b860 <__aeabi_i2d>
   109d0:	460b      	mov	r3, r1
   109d2:	4602      	mov	r2, r0
   109d4:	4649      	mov	r1, r9
   109d6:	4640      	mov	r0, r8
   109d8:	f7fa fdf4 	bl	b5c4 <__aeabi_dsub>
   109dc:	9f03      	ldr	r7, [sp, #12]
   109de:	4653      	mov	r3, sl
   109e0:	3630      	adds	r6, #48	; 0x30
   109e2:	2b01      	cmp	r3, #1
   109e4:	f807 6b01 	strb.w	r6, [r7], #1
   109e8:	4680      	mov	r8, r0
   109ea:	4689      	mov	r9, r1
   109ec:	f000 80b7 	beq.w	10b5e <_dtoa_r+0xe46>
   109f0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   109f2:	9b03      	ldr	r3, [sp, #12]
   109f4:	441e      	add	r6, r3
   109f6:	4b70      	ldr	r3, [pc, #448]	; (10bb8 <_dtoa_r+0xea0>)
   109f8:	2200      	movs	r2, #0
   109fa:	4640      	mov	r0, r8
   109fc:	4649      	mov	r1, r9
   109fe:	f001 fdcb 	bl	12598 <__aeabi_dmul>
   10a02:	4689      	mov	r9, r1
   10a04:	4680      	mov	r8, r0
   10a06:	f001 ffd9 	bl	129bc <__aeabi_d2iz>
   10a0a:	4682      	mov	sl, r0
   10a0c:	f7fa ff28 	bl	b860 <__aeabi_i2d>
   10a10:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
   10a14:	4602      	mov	r2, r0
   10a16:	460b      	mov	r3, r1
   10a18:	4640      	mov	r0, r8
   10a1a:	4649      	mov	r1, r9
   10a1c:	f7fa fdd2 	bl	b5c4 <__aeabi_dsub>
   10a20:	f807 ab01 	strb.w	sl, [r7], #1
   10a24:	42be      	cmp	r6, r7
   10a26:	4680      	mov	r8, r0
   10a28:	4689      	mov	r9, r1
   10a2a:	d1e4      	bne.n	109f6 <_dtoa_r+0xcde>
   10a2c:	4b63      	ldr	r3, [pc, #396]	; (10bbc <_dtoa_r+0xea4>)
   10a2e:	2200      	movs	r2, #0
   10a30:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   10a34:	f7fa fdc8 	bl	b5c8 <__adddf3>
   10a38:	4642      	mov	r2, r8
   10a3a:	464b      	mov	r3, r9
   10a3c:	f7fa ffda 	bl	b9f4 <__aeabi_dcmplt>
   10a40:	2800      	cmp	r0, #0
   10a42:	d164      	bne.n	10b0e <_dtoa_r+0xdf6>
   10a44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   10a48:	495c      	ldr	r1, [pc, #368]	; (10bbc <_dtoa_r+0xea4>)
   10a4a:	2000      	movs	r0, #0
   10a4c:	f7fa fdba 	bl	b5c4 <__aeabi_dsub>
   10a50:	4642      	mov	r2, r8
   10a52:	464b      	mov	r3, r9
   10a54:	f7fa ffec 	bl	ba30 <__aeabi_dcmpgt>
   10a58:	2800      	cmp	r0, #0
   10a5a:	f43f abad 	beq.w	101b8 <_dtoa_r+0x4a0>
   10a5e:	46b1      	mov	r9, r6
   10a60:	3e01      	subs	r6, #1
   10a62:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   10a66:	2b30      	cmp	r3, #48	; 0x30
   10a68:	d0f9      	beq.n	10a5e <_dtoa_r+0xd46>
   10a6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   10a6c:	3301      	adds	r3, #1
   10a6e:	9307      	str	r3, [sp, #28]
   10a70:	e509      	b.n	10486 <_dtoa_r+0x76e>
   10a72:	9b16      	ldr	r3, [sp, #88]	; 0x58
   10a74:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   10a78:	e6d0      	b.n	1081c <_dtoa_r+0xb04>
   10a7a:	9b08      	ldr	r3, [sp, #32]
   10a7c:	2b00      	cmp	r3, #0
   10a7e:	f43f ab6f 	beq.w	10160 <_dtoa_r+0x448>
   10a82:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10a84:	2b00      	cmp	r3, #0
   10a86:	f77f ab97 	ble.w	101b8 <_dtoa_r+0x4a0>
   10a8a:	9a07      	ldr	r2, [sp, #28]
   10a8c:	3a01      	subs	r2, #1
   10a8e:	e9cd 3213 	strd	r3, r2, [sp, #76]	; 0x4c
   10a92:	4640      	mov	r0, r8
   10a94:	4b48      	ldr	r3, [pc, #288]	; (10bb8 <_dtoa_r+0xea0>)
   10a96:	2200      	movs	r2, #0
   10a98:	4649      	mov	r1, r9
   10a9a:	f001 fd7d 	bl	12598 <__aeabi_dmul>
   10a9e:	4680      	mov	r8, r0
   10aa0:	4689      	mov	r9, r1
   10aa2:	f10a 0001 	add.w	r0, sl, #1
   10aa6:	f7fa fedb 	bl	b860 <__aeabi_i2d>
   10aaa:	4642      	mov	r2, r8
   10aac:	464b      	mov	r3, r9
   10aae:	f001 fd73 	bl	12598 <__aeabi_dmul>
   10ab2:	4b43      	ldr	r3, [pc, #268]	; (10bc0 <_dtoa_r+0xea8>)
   10ab4:	2200      	movs	r2, #0
   10ab6:	f7fa fd87 	bl	b5c8 <__adddf3>
   10aba:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   10abe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   10ac2:	9311      	str	r3, [sp, #68]	; 0x44
   10ac4:	f7ff bac7 	b.w	10056 <_dtoa_r+0x33e>
   10ac8:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
   10acc:	f04f 0a02 	mov.w	sl, #2
   10ad0:	f7ff ba9e 	b.w	10010 <_dtoa_r+0x2f8>
   10ad4:	9b07      	ldr	r3, [sp, #28]
   10ad6:	3301      	adds	r3, #1
   10ad8:	9307      	str	r3, [sp, #28]
   10ada:	2331      	movs	r3, #49	; 0x31
   10adc:	f7ff bb3b 	b.w	10156 <_dtoa_r+0x43e>
   10ae0:	9b07      	ldr	r3, [sp, #28]
   10ae2:	46bb      	mov	fp, r7
   10ae4:	3301      	adds	r3, #1
   10ae6:	9307      	str	r3, [sp, #28]
   10ae8:	2339      	movs	r3, #57	; 0x39
   10aea:	4637      	mov	r7, r6
   10aec:	f80b 3b01 	strb.w	r3, [fp], #1
   10af0:	4646      	mov	r6, r8
   10af2:	e4a8      	b.n	10446 <_dtoa_r+0x72e>
   10af4:	f04f 0a00 	mov.w	sl, #0
   10af8:	4656      	mov	r6, sl
   10afa:	e63d      	b.n	10778 <_dtoa_r+0xa60>
   10afc:	4699      	mov	r9, r3
   10afe:	e43e      	b.n	1037e <_dtoa_r+0x666>
   10b00:	9d10      	ldr	r5, [sp, #64]	; 0x40
   10b02:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   10b04:	9b14      	ldr	r3, [sp, #80]	; 0x50
   10b06:	3301      	adds	r3, #1
   10b08:	9307      	str	r3, [sp, #28]
   10b0a:	46b1      	mov	r9, r6
   10b0c:	e4bb      	b.n	10486 <_dtoa_r+0x76e>
   10b0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   10b10:	9a03      	ldr	r2, [sp, #12]
   10b12:	9307      	str	r3, [sp, #28]
   10b14:	f7ff bb18 	b.w	10148 <_dtoa_r+0x430>
   10b18:	f47f aeeb 	bne.w	108f2 <_dtoa_r+0xbda>
   10b1c:	07da      	lsls	r2, r3, #31
   10b1e:	f57f aee8 	bpl.w	108f2 <_dtoa_r+0xbda>
   10b22:	e6e1      	b.n	108e8 <_dtoa_r+0xbd0>
   10b24:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
   10b28:	9d10      	ldr	r5, [sp, #64]	; 0x40
   10b2a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   10b2c:	f7ff bb44 	b.w	101b8 <_dtoa_r+0x4a0>
   10b30:	2b39      	cmp	r3, #57	; 0x39
   10b32:	d0d5      	beq.n	10ae0 <_dtoa_r+0xdc8>
   10b34:	f1b9 0f00 	cmp.w	r9, #0
   10b38:	f73f aed9 	bgt.w	108ee <_dtoa_r+0xbd6>
   10b3c:	e6d9      	b.n	108f2 <_dtoa_r+0xbda>
   10b3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10b40:	2b02      	cmp	r3, #2
   10b42:	f73f ae05 	bgt.w	10750 <_dtoa_r+0xa38>
   10b46:	f8cd 801c 	str.w	r8, [sp, #28]
   10b4a:	e58d      	b.n	10668 <_dtoa_r+0x950>
   10b4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10b4e:	2b02      	cmp	r3, #2
   10b50:	f73f adfe 	bgt.w	10750 <_dtoa_r+0xa38>
   10b54:	9b12      	ldr	r3, [sp, #72]	; 0x48
   10b56:	f8cd 801c 	str.w	r8, [sp, #28]
   10b5a:	9308      	str	r3, [sp, #32]
   10b5c:	e505      	b.n	1056a <_dtoa_r+0x852>
   10b5e:	463e      	mov	r6, r7
   10b60:	e764      	b.n	10a2c <_dtoa_r+0xd14>
   10b62:	f04f 0a02 	mov.w	sl, #2
   10b66:	f7ff ba53 	b.w	10010 <_dtoa_r+0x2f8>
   10b6a:	4b16      	ldr	r3, [pc, #88]	; (10bc4 <_dtoa_r+0xeac>)
   10b6c:	4816      	ldr	r0, [pc, #88]	; (10bc8 <_dtoa_r+0xeb0>)
   10b6e:	463a      	mov	r2, r7
   10b70:	f240 21ef 	movw	r1, #751	; 0x2ef
   10b74:	f7fe ffe0 	bl	fb38 <__assert_func>
   10b78:	2600      	movs	r6, #0
   10b7a:	63e6      	str	r6, [r4, #60]	; 0x3c
   10b7c:	4631      	mov	r1, r6
   10b7e:	4620      	mov	r0, r4
   10b80:	f7fc fc48 	bl	d414 <_Balloc>
   10b84:	9003      	str	r0, [sp, #12]
   10b86:	b950      	cbnz	r0, 10b9e <_dtoa_r+0xe86>
   10b88:	4b0e      	ldr	r3, [pc, #56]	; (10bc4 <_dtoa_r+0xeac>)
   10b8a:	480f      	ldr	r0, [pc, #60]	; (10bc8 <_dtoa_r+0xeb0>)
   10b8c:	2200      	movs	r2, #0
   10b8e:	f240 11af 	movw	r1, #431	; 0x1af
   10b92:	f7fe ffd1 	bl	fb38 <__assert_func>
   10b96:	4b0d      	ldr	r3, [pc, #52]	; (10bcc <_dtoa_r+0xeb4>)
   10b98:	9303      	str	r3, [sp, #12]
   10b9a:	f7ff b8f9 	b.w	fd90 <_dtoa_r+0x78>
   10b9e:	9b03      	ldr	r3, [sp, #12]
   10ba0:	63a3      	str	r3, [r4, #56]	; 0x38
   10ba2:	f04f 33ff 	mov.w	r3, #4294967295
   10ba6:	9312      	str	r3, [sp, #72]	; 0x48
   10ba8:	9308      	str	r3, [sp, #32]
   10baa:	2301      	movs	r3, #1
   10bac:	9623      	str	r6, [sp, #140]	; 0x8c
   10bae:	930c      	str	r3, [sp, #48]	; 0x30
   10bb0:	f7ff bb02 	b.w	101b8 <_dtoa_r+0x4a0>
   10bb4:	000143d0 	.word	0x000143d0
   10bb8:	40240000 	.word	0x40240000
   10bbc:	3fe00000 	.word	0x3fe00000
   10bc0:	401c0000 	.word	0x401c0000
   10bc4:	00014338 	.word	0x00014338
   10bc8:	0001454c 	.word	0x0001454c
   10bcc:	0001453c 	.word	0x0001453c

00010bd0 <_wcrtomb_r>:
   10bd0:	b570      	push	{r4, r5, r6, lr}
   10bd2:	4605      	mov	r5, r0
   10bd4:	b084      	sub	sp, #16
   10bd6:	b15b      	cbz	r3, 10bf0 <_wcrtomb_r+0x20>
   10bd8:	461c      	mov	r4, r3
   10bda:	b169      	cbz	r1, 10bf8 <_wcrtomb_r+0x28>
   10bdc:	4b0e      	ldr	r3, [pc, #56]	; (10c18 <_wcrtomb_r+0x48>)
   10bde:	4628      	mov	r0, r5
   10be0:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   10be4:	4623      	mov	r3, r4
   10be6:	47b0      	blx	r6
   10be8:	1c43      	adds	r3, r0, #1
   10bea:	d00f      	beq.n	10c0c <_wcrtomb_r+0x3c>
   10bec:	b004      	add	sp, #16
   10bee:	bd70      	pop	{r4, r5, r6, pc}
   10bf0:	f500 7482 	add.w	r4, r0, #260	; 0x104
   10bf4:	2900      	cmp	r1, #0
   10bf6:	d1f1      	bne.n	10bdc <_wcrtomb_r+0xc>
   10bf8:	4a07      	ldr	r2, [pc, #28]	; (10c18 <_wcrtomb_r+0x48>)
   10bfa:	4623      	mov	r3, r4
   10bfc:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   10c00:	4628      	mov	r0, r5
   10c02:	460a      	mov	r2, r1
   10c04:	a901      	add	r1, sp, #4
   10c06:	47b0      	blx	r6
   10c08:	1c43      	adds	r3, r0, #1
   10c0a:	d1ef      	bne.n	10bec <_wcrtomb_r+0x1c>
   10c0c:	2200      	movs	r2, #0
   10c0e:	238a      	movs	r3, #138	; 0x8a
   10c10:	6022      	str	r2, [r4, #0]
   10c12:	602b      	str	r3, [r5, #0]
   10c14:	b004      	add	sp, #16
   10c16:	bd70      	pop	{r4, r5, r6, pc}
   10c18:	1fff8ce4 	.word	0x1fff8ce4

00010c1c <_wcsrtombs_r>:
   10c1c:	b500      	push	{lr}
   10c1e:	b083      	sub	sp, #12
   10c20:	f8dd c010 	ldr.w	ip, [sp, #16]
   10c24:	e9cd 3c00 	strd	r3, ip, [sp]
   10c28:	f04f 33ff 	mov.w	r3, #4294967295
   10c2c:	f001 fbb6 	bl	1239c <_wcsnrtombs_r>
   10c30:	b003      	add	sp, #12
   10c32:	f85d fb04 	ldr.w	pc, [sp], #4
   10c36:	bf00      	nop

00010c38 <fiprintf>:
   10c38:	b40e      	push	{r1, r2, r3}
   10c3a:	b510      	push	{r4, lr}
   10c3c:	b083      	sub	sp, #12
   10c3e:	ab05      	add	r3, sp, #20
   10c40:	4c06      	ldr	r4, [pc, #24]	; (10c5c <fiprintf+0x24>)
   10c42:	f853 2b04 	ldr.w	r2, [r3], #4
   10c46:	9301      	str	r3, [sp, #4]
   10c48:	4601      	mov	r1, r0
   10c4a:	6820      	ldr	r0, [r4, #0]
   10c4c:	f000 f8c4 	bl	10dd8 <_vfiprintf_r>
   10c50:	b003      	add	sp, #12
   10c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10c56:	b003      	add	sp, #12
   10c58:	4770      	bx	lr
   10c5a:	bf00      	nop
   10c5c:	1fff8f70 	.word	0x1fff8f70

00010c60 <__ssprint_r>:
   10c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c64:	6893      	ldr	r3, [r2, #8]
   10c66:	6817      	ldr	r7, [r2, #0]
   10c68:	b083      	sub	sp, #12
   10c6a:	4692      	mov	sl, r2
   10c6c:	2b00      	cmp	r3, #0
   10c6e:	d070      	beq.n	10d52 <__ssprint_r+0xf2>
   10c70:	4681      	mov	r9, r0
   10c72:	688a      	ldr	r2, [r1, #8]
   10c74:	6808      	ldr	r0, [r1, #0]
   10c76:	460c      	mov	r4, r1
   10c78:	3708      	adds	r7, #8
   10c7a:	e043      	b.n	10d04 <__ssprint_r+0xa4>
   10c7c:	89a3      	ldrh	r3, [r4, #12]
   10c7e:	f413 6f90 	tst.w	r3, #1152	; 0x480
   10c82:	d02e      	beq.n	10ce2 <__ssprint_r+0x82>
   10c84:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   10c88:	eba0 0801 	sub.w	r8, r0, r1
   10c8c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   10c90:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   10c94:	f108 0001 	add.w	r0, r8, #1
   10c98:	1076      	asrs	r6, r6, #1
   10c9a:	4428      	add	r0, r5
   10c9c:	42b0      	cmp	r0, r6
   10c9e:	4632      	mov	r2, r6
   10ca0:	bf84      	itt	hi
   10ca2:	4606      	movhi	r6, r0
   10ca4:	4632      	movhi	r2, r6
   10ca6:	055b      	lsls	r3, r3, #21
   10ca8:	d537      	bpl.n	10d1a <__ssprint_r+0xba>
   10caa:	4611      	mov	r1, r2
   10cac:	4648      	mov	r0, r9
   10cae:	f7fb fa21 	bl	c0f4 <_malloc_r>
   10cb2:	9001      	str	r0, [sp, #4]
   10cb4:	2800      	cmp	r0, #0
   10cb6:	d03a      	beq.n	10d2e <__ssprint_r+0xce>
   10cb8:	4642      	mov	r2, r8
   10cba:	6921      	ldr	r1, [r4, #16]
   10cbc:	f7f7 ff38 	bl	8b30 <memcpy>
   10cc0:	89a2      	ldrh	r2, [r4, #12]
   10cc2:	9b01      	ldr	r3, [sp, #4]
   10cc4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   10cc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   10ccc:	81a2      	strh	r2, [r4, #12]
   10cce:	eba6 0208 	sub.w	r2, r6, r8
   10cd2:	eb03 0008 	add.w	r0, r3, r8
   10cd6:	6166      	str	r6, [r4, #20]
   10cd8:	60a2      	str	r2, [r4, #8]
   10cda:	6123      	str	r3, [r4, #16]
   10cdc:	6020      	str	r0, [r4, #0]
   10cde:	462e      	mov	r6, r5
   10ce0:	46a8      	mov	r8, r5
   10ce2:	4642      	mov	r2, r8
   10ce4:	4659      	mov	r1, fp
   10ce6:	f7fb fff7 	bl	ccd8 <memmove>
   10cea:	f8da 3008 	ldr.w	r3, [sl, #8]
   10cee:	68a2      	ldr	r2, [r4, #8]
   10cf0:	6820      	ldr	r0, [r4, #0]
   10cf2:	1b92      	subs	r2, r2, r6
   10cf4:	4440      	add	r0, r8
   10cf6:	1b5b      	subs	r3, r3, r5
   10cf8:	60a2      	str	r2, [r4, #8]
   10cfa:	6020      	str	r0, [r4, #0]
   10cfc:	f8ca 3008 	str.w	r3, [sl, #8]
   10d00:	b33b      	cbz	r3, 10d52 <__ssprint_r+0xf2>
   10d02:	3708      	adds	r7, #8
   10d04:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   10d08:	2d00      	cmp	r5, #0
   10d0a:	d0fa      	beq.n	10d02 <__ssprint_r+0xa2>
   10d0c:	42aa      	cmp	r2, r5
   10d0e:	4616      	mov	r6, r2
   10d10:	4690      	mov	r8, r2
   10d12:	d9b3      	bls.n	10c7c <__ssprint_r+0x1c>
   10d14:	462e      	mov	r6, r5
   10d16:	46a8      	mov	r8, r5
   10d18:	e7e3      	b.n	10ce2 <__ssprint_r+0x82>
   10d1a:	4648      	mov	r0, r9
   10d1c:	f7fb fca6 	bl	c66c <_realloc_r>
   10d20:	4603      	mov	r3, r0
   10d22:	2800      	cmp	r0, #0
   10d24:	d1d3      	bne.n	10cce <__ssprint_r+0x6e>
   10d26:	6921      	ldr	r1, [r4, #16]
   10d28:	4648      	mov	r0, r9
   10d2a:	f7fc fa57 	bl	d1dc <_free_r>
   10d2e:	89a3      	ldrh	r3, [r4, #12]
   10d30:	220c      	movs	r2, #12
   10d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10d36:	f8c9 2000 	str.w	r2, [r9]
   10d3a:	f04f 30ff 	mov.w	r0, #4294967295
   10d3e:	81a3      	strh	r3, [r4, #12]
   10d40:	2200      	movs	r2, #0
   10d42:	2300      	movs	r3, #0
   10d44:	f8ca 2008 	str.w	r2, [sl, #8]
   10d48:	f8ca 3004 	str.w	r3, [sl, #4]
   10d4c:	b003      	add	sp, #12
   10d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10d52:	2000      	movs	r0, #0
   10d54:	2300      	movs	r3, #0
   10d56:	f8ca 3004 	str.w	r3, [sl, #4]
   10d5a:	b003      	add	sp, #12
   10d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010d60 <__sprint_r.part.0>:
   10d60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d64:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   10d66:	049c      	lsls	r4, r3, #18
   10d68:	4690      	mov	r8, r2
   10d6a:	d52d      	bpl.n	10dc8 <__sprint_r.part.0+0x68>
   10d6c:	6893      	ldr	r3, [r2, #8]
   10d6e:	6812      	ldr	r2, [r2, #0]
   10d70:	b343      	cbz	r3, 10dc4 <__sprint_r.part.0+0x64>
   10d72:	468b      	mov	fp, r1
   10d74:	4606      	mov	r6, r0
   10d76:	f102 0908 	add.w	r9, r2, #8
   10d7a:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   10d7e:	ea5f 079a 	movs.w	r7, sl, lsr #2
   10d82:	d015      	beq.n	10db0 <__sprint_r.part.0+0x50>
   10d84:	3d04      	subs	r5, #4
   10d86:	2400      	movs	r4, #0
   10d88:	e001      	b.n	10d8e <__sprint_r.part.0+0x2e>
   10d8a:	42a7      	cmp	r7, r4
   10d8c:	d00e      	beq.n	10dac <__sprint_r.part.0+0x4c>
   10d8e:	f855 1f04 	ldr.w	r1, [r5, #4]!
   10d92:	465a      	mov	r2, fp
   10d94:	4630      	mov	r0, r6
   10d96:	f001 fa51 	bl	1223c <_fputwc_r>
   10d9a:	1c43      	adds	r3, r0, #1
   10d9c:	f104 0401 	add.w	r4, r4, #1
   10da0:	d1f3      	bne.n	10d8a <__sprint_r.part.0+0x2a>
   10da2:	2300      	movs	r3, #0
   10da4:	e9c8 3301 	strd	r3, r3, [r8, #4]
   10da8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10dac:	f8d8 3008 	ldr.w	r3, [r8, #8]
   10db0:	f02a 0a03 	bic.w	sl, sl, #3
   10db4:	eba3 030a 	sub.w	r3, r3, sl
   10db8:	f8c8 3008 	str.w	r3, [r8, #8]
   10dbc:	f109 0908 	add.w	r9, r9, #8
   10dc0:	2b00      	cmp	r3, #0
   10dc2:	d1da      	bne.n	10d7a <__sprint_r.part.0+0x1a>
   10dc4:	2000      	movs	r0, #0
   10dc6:	e7ec      	b.n	10da2 <__sprint_r.part.0+0x42>
   10dc8:	f001 f808 	bl	11ddc <__sfvwrite_r>
   10dcc:	2300      	movs	r3, #0
   10dce:	e9c8 3301 	strd	r3, r3, [r8, #4]
   10dd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10dd6:	bf00      	nop

00010dd8 <_vfiprintf_r>:
   10dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ddc:	b0c5      	sub	sp, #276	; 0x114
   10dde:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   10de2:	4683      	mov	fp, r0
   10de4:	9103      	str	r1, [sp, #12]
   10de6:	4616      	mov	r6, r2
   10de8:	2100      	movs	r1, #0
   10dea:	2208      	movs	r2, #8
   10dec:	4650      	mov	r0, sl
   10dee:	461c      	mov	r4, r3
   10df0:	9307      	str	r3, [sp, #28]
   10df2:	f7fb ffed 	bl	cdd0 <memset>
   10df6:	f1bb 0f00 	cmp.w	fp, #0
   10dfa:	d004      	beq.n	10e06 <_vfiprintf_r+0x2e>
   10dfc:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   10e00:	2b00      	cmp	r3, #0
   10e02:	f000 86a1 	beq.w	11b48 <_vfiprintf_r+0xd70>
   10e06:	9a03      	ldr	r2, [sp, #12]
   10e08:	6e53      	ldr	r3, [r2, #100]	; 0x64
   10e0a:	07db      	lsls	r3, r3, #31
   10e0c:	f140 851c 	bpl.w	11848 <_vfiprintf_r+0xa70>
   10e10:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   10e14:	b28a      	uxth	r2, r1
   10e16:	0495      	lsls	r5, r2, #18
   10e18:	d409      	bmi.n	10e2e <_vfiprintf_r+0x56>
   10e1a:	9b03      	ldr	r3, [sp, #12]
   10e1c:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   10e20:	8199      	strh	r1, [r3, #12]
   10e22:	b28a      	uxth	r2, r1
   10e24:	4619      	mov	r1, r3
   10e26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   10e28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   10e2c:	664b      	str	r3, [r1, #100]	; 0x64
   10e2e:	0710      	lsls	r0, r2, #28
   10e30:	f140 8104 	bpl.w	1103c <_vfiprintf_r+0x264>
   10e34:	9b03      	ldr	r3, [sp, #12]
   10e36:	691b      	ldr	r3, [r3, #16]
   10e38:	2b00      	cmp	r3, #0
   10e3a:	f000 80ff 	beq.w	1103c <_vfiprintf_r+0x264>
   10e3e:	f002 031a 	and.w	r3, r2, #26
   10e42:	2b0a      	cmp	r3, #10
   10e44:	f000 8108 	beq.w	11058 <_vfiprintf_r+0x280>
   10e48:	2300      	movs	r3, #0
   10e4a:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   10e4e:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   10e52:	aa1b      	add	r2, sp, #108	; 0x6c
   10e54:	930b      	str	r3, [sp, #44]	; 0x2c
   10e56:	9218      	str	r2, [sp, #96]	; 0x60
   10e58:	4691      	mov	r9, r2
   10e5a:	930c      	str	r3, [sp, #48]	; 0x30
   10e5c:	9305      	str	r3, [sp, #20]
   10e5e:	46b0      	mov	r8, r6
   10e60:	4644      	mov	r4, r8
   10e62:	4ba6      	ldr	r3, [pc, #664]	; (110fc <_vfiprintf_r+0x324>)
   10e64:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   10e68:	f7fc f836 	bl	ced8 <__locale_mb_cur_max>
   10e6c:	4622      	mov	r2, r4
   10e6e:	4603      	mov	r3, r0
   10e70:	a912      	add	r1, sp, #72	; 0x48
   10e72:	f8cd a000 	str.w	sl, [sp]
   10e76:	4658      	mov	r0, fp
   10e78:	47a8      	blx	r5
   10e7a:	2800      	cmp	r0, #0
   10e7c:	f000 8140 	beq.w	11100 <_vfiprintf_r+0x328>
   10e80:	f2c0 8133 	blt.w	110ea <_vfiprintf_r+0x312>
   10e84:	9a12      	ldr	r2, [sp, #72]	; 0x48
   10e86:	2a25      	cmp	r2, #37	; 0x25
   10e88:	4603      	mov	r3, r0
   10e8a:	d001      	beq.n	10e90 <_vfiprintf_r+0xb8>
   10e8c:	441c      	add	r4, r3
   10e8e:	e7e8      	b.n	10e62 <_vfiprintf_r+0x8a>
   10e90:	ebb4 0608 	subs.w	r6, r4, r8
   10e94:	4605      	mov	r5, r0
   10e96:	f040 8137 	bne.w	11108 <_vfiprintf_r+0x330>
   10e9a:	2300      	movs	r3, #0
   10e9c:	7861      	ldrb	r1, [r4, #1]
   10e9e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   10ea2:	f104 0801 	add.w	r8, r4, #1
   10ea6:	9306      	str	r3, [sp, #24]
   10ea8:	f04f 37ff 	mov.w	r7, #4294967295
   10eac:	461e      	mov	r6, r3
   10eae:	242b      	movs	r4, #43	; 0x2b
   10eb0:	f108 0801 	add.w	r8, r8, #1
   10eb4:	f1a1 0320 	sub.w	r3, r1, #32
   10eb8:	2b5a      	cmp	r3, #90	; 0x5a
   10eba:	f200 8165 	bhi.w	11188 <_vfiprintf_r+0x3b0>
   10ebe:	e8df f013 	tbh	[pc, r3, lsl #1]
   10ec2:	029f      	.short	0x029f
   10ec4:	01630163 	.word	0x01630163
   10ec8:	0163029a 	.word	0x0163029a
   10ecc:	01630163 	.word	0x01630163
   10ed0:	0163006a 	.word	0x0163006a
   10ed4:	02670163 	.word	0x02670163
   10ed8:	01630277 	.word	0x01630277
   10edc:	02810272 	.word	0x02810272
   10ee0:	027c0163 	.word	0x027c0163
   10ee4:	005b005b 	.word	0x005b005b
   10ee8:	005b005b 	.word	0x005b005b
   10eec:	005b005b 	.word	0x005b005b
   10ef0:	005b005b 	.word	0x005b005b
   10ef4:	0163005b 	.word	0x0163005b
   10ef8:	01630163 	.word	0x01630163
   10efc:	01630163 	.word	0x01630163
   10f00:	01630163 	.word	0x01630163
   10f04:	01630163 	.word	0x01630163
   10f08:	00840246 	.word	0x00840246
   10f0c:	01630163 	.word	0x01630163
   10f10:	01630163 	.word	0x01630163
   10f14:	01630163 	.word	0x01630163
   10f18:	01630163 	.word	0x01630163
   10f1c:	01630163 	.word	0x01630163
   10f20:	016300e2 	.word	0x016300e2
   10f24:	01630163 	.word	0x01630163
   10f28:	0163021d 	.word	0x0163021d
   10f2c:	016302c4 	.word	0x016302c4
   10f30:	05940163 	.word	0x05940163
   10f34:	01630163 	.word	0x01630163
   10f38:	01630163 	.word	0x01630163
   10f3c:	01630163 	.word	0x01630163
   10f40:	01630163 	.word	0x01630163
   10f44:	01630163 	.word	0x01630163
   10f48:	00860246 	.word	0x00860246
   10f4c:	01630163 	.word	0x01630163
   10f50:	02b70163 	.word	0x02b70163
   10f54:	007f0086 	.word	0x007f0086
   10f58:	02aa0163 	.word	0x02aa0163
   10f5c:	02e70163 	.word	0x02e70163
   10f60:	02d700e4 	.word	0x02d700e4
   10f64:	0163007f 	.word	0x0163007f
   10f68:	007c021d 	.word	0x007c021d
   10f6c:	01630572 	.word	0x01630572
   10f70:	05740163 	.word	0x05740163
   10f74:	007c0163 	.word	0x007c0163
   10f78:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   10f7c:	2200      	movs	r2, #0
   10f7e:	f818 1b01 	ldrb.w	r1, [r8], #1
   10f82:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   10f86:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   10f8a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   10f8e:	2b09      	cmp	r3, #9
   10f90:	d9f5      	bls.n	10f7e <_vfiprintf_r+0x1a6>
   10f92:	9206      	str	r2, [sp, #24]
   10f94:	e78e      	b.n	10eb4 <_vfiprintf_r+0xdc>
   10f96:	4658      	mov	r0, fp
   10f98:	f7fe fce8 	bl	f96c <_localeconv_r>
   10f9c:	6843      	ldr	r3, [r0, #4]
   10f9e:	930d      	str	r3, [sp, #52]	; 0x34
   10fa0:	4618      	mov	r0, r3
   10fa2:	f7fc f84d 	bl	d040 <strlen>
   10fa6:	900e      	str	r0, [sp, #56]	; 0x38
   10fa8:	4605      	mov	r5, r0
   10faa:	4658      	mov	r0, fp
   10fac:	f7fe fcde 	bl	f96c <_localeconv_r>
   10fb0:	6883      	ldr	r3, [r0, #8]
   10fb2:	930c      	str	r3, [sp, #48]	; 0x30
   10fb4:	2d00      	cmp	r5, #0
   10fb6:	f040 84df 	bne.w	11978 <_vfiprintf_r+0xba0>
   10fba:	f898 1000 	ldrb.w	r1, [r8]
   10fbe:	e777      	b.n	10eb0 <_vfiprintf_r+0xd8>
   10fc0:	f898 1000 	ldrb.w	r1, [r8]
   10fc4:	f046 0620 	orr.w	r6, r6, #32
   10fc8:	e772      	b.n	10eb0 <_vfiprintf_r+0xd8>
   10fca:	f046 0610 	orr.w	r6, r6, #16
   10fce:	06b4      	lsls	r4, r6, #26
   10fd0:	f140 8178 	bpl.w	112c4 <_vfiprintf_r+0x4ec>
   10fd4:	9b07      	ldr	r3, [sp, #28]
   10fd6:	3307      	adds	r3, #7
   10fd8:	f023 0307 	bic.w	r3, r3, #7
   10fdc:	461a      	mov	r2, r3
   10fde:	6859      	ldr	r1, [r3, #4]
   10fe0:	f852 3b08 	ldr.w	r3, [r2], #8
   10fe4:	9207      	str	r2, [sp, #28]
   10fe6:	460a      	mov	r2, r1
   10fe8:	2900      	cmp	r1, #0
   10fea:	f2c0 847a 	blt.w	118e2 <_vfiprintf_r+0xb0a>
   10fee:	1c79      	adds	r1, r7, #1
   10ff0:	f000 85a7 	beq.w	11b42 <_vfiprintf_r+0xd6a>
   10ff4:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   10ff8:	9102      	str	r1, [sp, #8]
   10ffa:	ea53 0102 	orrs.w	r1, r3, r2
   10ffe:	f000 8448 	beq.w	11892 <_vfiprintf_r+0xaba>
   11002:	2b0a      	cmp	r3, #10
   11004:	f172 0100 	sbcs.w	r1, r2, #0
   11008:	f080 8549 	bcs.w	11a9e <_vfiprintf_r+0xcc6>
   1100c:	3330      	adds	r3, #48	; 0x30
   1100e:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   11012:	9e02      	ldr	r6, [sp, #8]
   11014:	2301      	movs	r3, #1
   11016:	9304      	str	r3, [sp, #16]
   11018:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   1101c:	9b04      	ldr	r3, [sp, #16]
   1101e:	42bb      	cmp	r3, r7
   11020:	bfb8      	it	lt
   11022:	463b      	movlt	r3, r7
   11024:	9302      	str	r3, [sp, #8]
   11026:	2300      	movs	r3, #0
   11028:	9308      	str	r3, [sp, #32]
   1102a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   1102e:	2b00      	cmp	r3, #0
   11030:	f000 80b8 	beq.w	111a4 <_vfiprintf_r+0x3cc>
   11034:	9b02      	ldr	r3, [sp, #8]
   11036:	3301      	adds	r3, #1
   11038:	9302      	str	r3, [sp, #8]
   1103a:	e0b3      	b.n	111a4 <_vfiprintf_r+0x3cc>
   1103c:	9d03      	ldr	r5, [sp, #12]
   1103e:	4658      	mov	r0, fp
   11040:	4629      	mov	r1, r5
   11042:	f001 f83f 	bl	120c4 <__swsetup_r>
   11046:	2800      	cmp	r0, #0
   11048:	f040 8656 	bne.w	11cf8 <_vfiprintf_r+0xf20>
   1104c:	89aa      	ldrh	r2, [r5, #12]
   1104e:	f002 031a 	and.w	r3, r2, #26
   11052:	2b0a      	cmp	r3, #10
   11054:	f47f aef8 	bne.w	10e48 <_vfiprintf_r+0x70>
   11058:	9903      	ldr	r1, [sp, #12]
   1105a:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   1105e:	2b00      	cmp	r3, #0
   11060:	f6ff aef2 	blt.w	10e48 <_vfiprintf_r+0x70>
   11064:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   11066:	07db      	lsls	r3, r3, #31
   11068:	d402      	bmi.n	11070 <_vfiprintf_r+0x298>
   1106a:	0597      	lsls	r7, r2, #22
   1106c:	f140 8618 	bpl.w	11ca0 <_vfiprintf_r+0xec8>
   11070:	9903      	ldr	r1, [sp, #12]
   11072:	4623      	mov	r3, r4
   11074:	4632      	mov	r2, r6
   11076:	4658      	mov	r0, fp
   11078:	f000 fe70 	bl	11d5c <__sbprintf>
   1107c:	9005      	str	r0, [sp, #20]
   1107e:	9805      	ldr	r0, [sp, #20]
   11080:	b045      	add	sp, #276	; 0x114
   11082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11086:	f046 0610 	orr.w	r6, r6, #16
   1108a:	f016 0220 	ands.w	r2, r6, #32
   1108e:	f000 8126 	beq.w	112de <_vfiprintf_r+0x506>
   11092:	9b07      	ldr	r3, [sp, #28]
   11094:	3307      	adds	r3, #7
   11096:	f023 0307 	bic.w	r3, r3, #7
   1109a:	4619      	mov	r1, r3
   1109c:	685a      	ldr	r2, [r3, #4]
   1109e:	f851 3b08 	ldr.w	r3, [r1], #8
   110a2:	9107      	str	r1, [sp, #28]
   110a4:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   110a8:	9102      	str	r1, [sp, #8]
   110aa:	2100      	movs	r1, #0
   110ac:	2000      	movs	r0, #0
   110ae:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   110b2:	1c78      	adds	r0, r7, #1
   110b4:	f000 8200 	beq.w	114b8 <_vfiprintf_r+0x6e0>
   110b8:	9802      	ldr	r0, [sp, #8]
   110ba:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   110be:	ea53 0002 	orrs.w	r0, r3, r2
   110c2:	f040 81f8 	bne.w	114b6 <_vfiprintf_r+0x6de>
   110c6:	2f00      	cmp	r7, #0
   110c8:	f040 8543 	bne.w	11b52 <_vfiprintf_r+0xd7a>
   110cc:	2900      	cmp	r1, #0
   110ce:	f040 83e4 	bne.w	1189a <_vfiprintf_r+0xac2>
   110d2:	9b02      	ldr	r3, [sp, #8]
   110d4:	f013 0301 	ands.w	r3, r3, #1
   110d8:	9304      	str	r3, [sp, #16]
   110da:	f000 8420 	beq.w	1191e <_vfiprintf_r+0xb46>
   110de:	2330      	movs	r3, #48	; 0x30
   110e0:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   110e4:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   110e8:	e798      	b.n	1101c <_vfiprintf_r+0x244>
   110ea:	2208      	movs	r2, #8
   110ec:	2100      	movs	r1, #0
   110ee:	4650      	mov	r0, sl
   110f0:	f7fb fe6e 	bl	cdd0 <memset>
   110f4:	2301      	movs	r3, #1
   110f6:	441c      	add	r4, r3
   110f8:	e6b3      	b.n	10e62 <_vfiprintf_r+0x8a>
   110fa:	bf00      	nop
   110fc:	1fff8ce4 	.word	0x1fff8ce4
   11100:	ebb4 0608 	subs.w	r6, r4, r8
   11104:	4605      	mov	r5, r0
   11106:	d01a      	beq.n	1113e <_vfiprintf_r+0x366>
   11108:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1110a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1110c:	3301      	adds	r3, #1
   1110e:	4432      	add	r2, r6
   11110:	2b07      	cmp	r3, #7
   11112:	e9c9 8600 	strd	r8, r6, [r9]
   11116:	921a      	str	r2, [sp, #104]	; 0x68
   11118:	9319      	str	r3, [sp, #100]	; 0x64
   1111a:	dd1a      	ble.n	11152 <_vfiprintf_r+0x37a>
   1111c:	2a00      	cmp	r2, #0
   1111e:	f000 83b4 	beq.w	1188a <_vfiprintf_r+0xab2>
   11122:	9903      	ldr	r1, [sp, #12]
   11124:	aa18      	add	r2, sp, #96	; 0x60
   11126:	4658      	mov	r0, fp
   11128:	f7ff fe1a 	bl	10d60 <__sprint_r.part.0>
   1112c:	b9d8      	cbnz	r0, 11166 <_vfiprintf_r+0x38e>
   1112e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11132:	9b05      	ldr	r3, [sp, #20]
   11134:	4433      	add	r3, r6
   11136:	9305      	str	r3, [sp, #20]
   11138:	2d00      	cmp	r5, #0
   1113a:	f47f aeae 	bne.w	10e9a <_vfiprintf_r+0xc2>
   1113e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   11140:	2b00      	cmp	r3, #0
   11142:	f040 85ca 	bne.w	11cda <_vfiprintf_r+0xf02>
   11146:	9b03      	ldr	r3, [sp, #12]
   11148:	2200      	movs	r2, #0
   1114a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   1114e:	9219      	str	r2, [sp, #100]	; 0x64
   11150:	e00c      	b.n	1116c <_vfiprintf_r+0x394>
   11152:	f109 0908 	add.w	r9, r9, #8
   11156:	e7ec      	b.n	11132 <_vfiprintf_r+0x35a>
   11158:	46b3      	mov	fp, r6
   1115a:	9b08      	ldr	r3, [sp, #32]
   1115c:	b11b      	cbz	r3, 11166 <_vfiprintf_r+0x38e>
   1115e:	9908      	ldr	r1, [sp, #32]
   11160:	4658      	mov	r0, fp
   11162:	f7fc f83b 	bl	d1dc <_free_r>
   11166:	9b03      	ldr	r3, [sp, #12]
   11168:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   1116c:	9a03      	ldr	r2, [sp, #12]
   1116e:	6e52      	ldr	r2, [r2, #100]	; 0x64
   11170:	f012 0f01 	tst.w	r2, #1
   11174:	b29a      	uxth	r2, r3
   11176:	f000 809c 	beq.w	112b2 <_vfiprintf_r+0x4da>
   1117a:	0650      	lsls	r0, r2, #25
   1117c:	f100 85c8 	bmi.w	11d10 <_vfiprintf_r+0xf38>
   11180:	9805      	ldr	r0, [sp, #20]
   11182:	b045      	add	sp, #276	; 0x114
   11184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11188:	2900      	cmp	r1, #0
   1118a:	d0d8      	beq.n	1113e <_vfiprintf_r+0x366>
   1118c:	2300      	movs	r3, #0
   1118e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   11192:	2301      	movs	r3, #1
   11194:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   11198:	9302      	str	r3, [sp, #8]
   1119a:	9304      	str	r3, [sp, #16]
   1119c:	ac2b      	add	r4, sp, #172	; 0xac
   1119e:	2300      	movs	r3, #0
   111a0:	9308      	str	r3, [sp, #32]
   111a2:	461f      	mov	r7, r3
   111a4:	f016 0302 	ands.w	r3, r6, #2
   111a8:	9309      	str	r3, [sp, #36]	; 0x24
   111aa:	d002      	beq.n	111b2 <_vfiprintf_r+0x3da>
   111ac:	9b02      	ldr	r3, [sp, #8]
   111ae:	3302      	adds	r3, #2
   111b0:	9302      	str	r3, [sp, #8]
   111b2:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   111b6:	930a      	str	r3, [sp, #40]	; 0x28
   111b8:	d105      	bne.n	111c6 <_vfiprintf_r+0x3ee>
   111ba:	9b06      	ldr	r3, [sp, #24]
   111bc:	9a02      	ldr	r2, [sp, #8]
   111be:	1a9d      	subs	r5, r3, r2
   111c0:	2d00      	cmp	r5, #0
   111c2:	f300 8294 	bgt.w	116ee <_vfiprintf_r+0x916>
   111c6:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   111ca:	1c41      	adds	r1, r0, #1
   111cc:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   111d0:	b182      	cbz	r2, 111f4 <_vfiprintf_r+0x41c>
   111d2:	2201      	movs	r2, #1
   111d4:	3301      	adds	r3, #1
   111d6:	f8c9 2004 	str.w	r2, [r9, #4]
   111da:	2907      	cmp	r1, #7
   111dc:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   111e0:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   111e4:	f8c9 2000 	str.w	r2, [r9]
   111e8:	f300 8264 	bgt.w	116b4 <_vfiprintf_r+0x8dc>
   111ec:	4608      	mov	r0, r1
   111ee:	f109 0908 	add.w	r9, r9, #8
   111f2:	3101      	adds	r1, #1
   111f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   111f6:	b1da      	cbz	r2, 11230 <_vfiprintf_r+0x458>
   111f8:	aa11      	add	r2, sp, #68	; 0x44
   111fa:	3302      	adds	r3, #2
   111fc:	f8c9 2000 	str.w	r2, [r9]
   11200:	2907      	cmp	r1, #7
   11202:	f04f 0202 	mov.w	r2, #2
   11206:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   1120a:	f8c9 2004 	str.w	r2, [r9, #4]
   1120e:	f340 8269 	ble.w	116e4 <_vfiprintf_r+0x90c>
   11212:	2b00      	cmp	r3, #0
   11214:	f000 8358 	beq.w	118c8 <_vfiprintf_r+0xaf0>
   11218:	9903      	ldr	r1, [sp, #12]
   1121a:	aa18      	add	r2, sp, #96	; 0x60
   1121c:	4658      	mov	r0, fp
   1121e:	f7ff fd9f 	bl	10d60 <__sprint_r.part.0>
   11222:	2800      	cmp	r0, #0
   11224:	d199      	bne.n	1115a <_vfiprintf_r+0x382>
   11226:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1122a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1122e:	1c41      	adds	r1, r0, #1
   11230:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11232:	2a80      	cmp	r2, #128	; 0x80
   11234:	f000 8182 	beq.w	1153c <_vfiprintf_r+0x764>
   11238:	9a04      	ldr	r2, [sp, #16]
   1123a:	1abd      	subs	r5, r7, r2
   1123c:	2d00      	cmp	r5, #0
   1123e:	f300 81e0 	bgt.w	11602 <_vfiprintf_r+0x82a>
   11242:	9a04      	ldr	r2, [sp, #16]
   11244:	f8c9 4000 	str.w	r4, [r9]
   11248:	4413      	add	r3, r2
   1124a:	2907      	cmp	r1, #7
   1124c:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   11250:	f8c9 2004 	str.w	r2, [r9, #4]
   11254:	f340 816c 	ble.w	11530 <_vfiprintf_r+0x758>
   11258:	2b00      	cmp	r3, #0
   1125a:	f000 829e 	beq.w	1179a <_vfiprintf_r+0x9c2>
   1125e:	9903      	ldr	r1, [sp, #12]
   11260:	aa18      	add	r2, sp, #96	; 0x60
   11262:	4658      	mov	r0, fp
   11264:	f7ff fd7c 	bl	10d60 <__sprint_r.part.0>
   11268:	2800      	cmp	r0, #0
   1126a:	f47f af76 	bne.w	1115a <_vfiprintf_r+0x382>
   1126e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   11270:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11274:	0775      	lsls	r5, r6, #29
   11276:	d505      	bpl.n	11284 <_vfiprintf_r+0x4ac>
   11278:	9a06      	ldr	r2, [sp, #24]
   1127a:	9902      	ldr	r1, [sp, #8]
   1127c:	1a54      	subs	r4, r2, r1
   1127e:	2c00      	cmp	r4, #0
   11280:	f300 8295 	bgt.w	117ae <_vfiprintf_r+0x9d6>
   11284:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   11288:	9802      	ldr	r0, [sp, #8]
   1128a:	4281      	cmp	r1, r0
   1128c:	bfac      	ite	ge
   1128e:	1852      	addge	r2, r2, r1
   11290:	1812      	addlt	r2, r2, r0
   11292:	9205      	str	r2, [sp, #20]
   11294:	2b00      	cmp	r3, #0
   11296:	f040 81fe 	bne.w	11696 <_vfiprintf_r+0x8be>
   1129a:	9908      	ldr	r1, [sp, #32]
   1129c:	2300      	movs	r3, #0
   1129e:	9319      	str	r3, [sp, #100]	; 0x64
   112a0:	2900      	cmp	r1, #0
   112a2:	f000 8148 	beq.w	11536 <_vfiprintf_r+0x75e>
   112a6:	4658      	mov	r0, fp
   112a8:	f7fb ff98 	bl	d1dc <_free_r>
   112ac:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   112b0:	e5d6      	b.n	10e60 <_vfiprintf_r+0x88>
   112b2:	059c      	lsls	r4, r3, #22
   112b4:	f53f af61 	bmi.w	1117a <_vfiprintf_r+0x3a2>
   112b8:	9c03      	ldr	r4, [sp, #12]
   112ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
   112bc:	f7fb fea8 	bl	d010 <__retarget_lock_release_recursive>
   112c0:	89a2      	ldrh	r2, [r4, #12]
   112c2:	e75a      	b.n	1117a <_vfiprintf_r+0x3a2>
   112c4:	06f0      	lsls	r0, r6, #27
   112c6:	9a07      	ldr	r2, [sp, #28]
   112c8:	f100 833e 	bmi.w	11948 <_vfiprintf_r+0xb70>
   112cc:	0671      	lsls	r1, r6, #25
   112ce:	f140 8338 	bpl.w	11942 <_vfiprintf_r+0xb6a>
   112d2:	f932 3b04 	ldrsh.w	r3, [r2], #4
   112d6:	9207      	str	r2, [sp, #28]
   112d8:	17da      	asrs	r2, r3, #31
   112da:	4611      	mov	r1, r2
   112dc:	e684      	b.n	10fe8 <_vfiprintf_r+0x210>
   112de:	f016 0310 	ands.w	r3, r6, #16
   112e2:	9907      	ldr	r1, [sp, #28]
   112e4:	f040 8328 	bne.w	11938 <_vfiprintf_r+0xb60>
   112e8:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   112ec:	f000 8320 	beq.w	11930 <_vfiprintf_r+0xb58>
   112f0:	461a      	mov	r2, r3
   112f2:	f851 3b04 	ldr.w	r3, [r1], #4
   112f6:	9107      	str	r1, [sp, #28]
   112f8:	b29b      	uxth	r3, r3
   112fa:	e6d3      	b.n	110a4 <_vfiprintf_r+0x2cc>
   112fc:	9b07      	ldr	r3, [sp, #28]
   112fe:	461a      	mov	r2, r3
   11300:	2300      	movs	r3, #0
   11302:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   11306:	4613      	mov	r3, r2
   11308:	f853 4b04 	ldr.w	r4, [r3], #4
   1130c:	9302      	str	r3, [sp, #8]
   1130e:	2c00      	cmp	r4, #0
   11310:	f000 842d 	beq.w	11b6e <_vfiprintf_r+0xd96>
   11314:	2953      	cmp	r1, #83	; 0x53
   11316:	f000 838a 	beq.w	11a2e <_vfiprintf_r+0xc56>
   1131a:	f016 0510 	ands.w	r5, r6, #16
   1131e:	f040 8386 	bne.w	11a2e <_vfiprintf_r+0xc56>
   11322:	1c7b      	adds	r3, r7, #1
   11324:	f000 84cc 	beq.w	11cc0 <_vfiprintf_r+0xee8>
   11328:	463a      	mov	r2, r7
   1132a:	4629      	mov	r1, r5
   1132c:	4620      	mov	r0, r4
   1132e:	f7fe fb37 	bl	f9a0 <memchr>
   11332:	9008      	str	r0, [sp, #32]
   11334:	2800      	cmp	r0, #0
   11336:	f000 84b8 	beq.w	11caa <_vfiprintf_r+0xed2>
   1133a:	1b03      	subs	r3, r0, r4
   1133c:	9a02      	ldr	r2, [sp, #8]
   1133e:	9304      	str	r3, [sp, #16]
   11340:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   11344:	462f      	mov	r7, r5
   11346:	9207      	str	r2, [sp, #28]
   11348:	9302      	str	r3, [sp, #8]
   1134a:	9508      	str	r5, [sp, #32]
   1134c:	e66d      	b.n	1102a <_vfiprintf_r+0x252>
   1134e:	2943      	cmp	r1, #67	; 0x43
   11350:	d002      	beq.n	11358 <_vfiprintf_r+0x580>
   11352:	06f5      	lsls	r5, r6, #27
   11354:	f140 8352 	bpl.w	119fc <_vfiprintf_r+0xc24>
   11358:	9d07      	ldr	r5, [sp, #28]
   1135a:	2208      	movs	r2, #8
   1135c:	2100      	movs	r1, #0
   1135e:	a816      	add	r0, sp, #88	; 0x58
   11360:	ac2b      	add	r4, sp, #172	; 0xac
   11362:	f7fb fd35 	bl	cdd0 <memset>
   11366:	ab16      	add	r3, sp, #88	; 0x58
   11368:	f855 2b04 	ldr.w	r2, [r5], #4
   1136c:	4621      	mov	r1, r4
   1136e:	4658      	mov	r0, fp
   11370:	f7ff fc2e 	bl	10bd0 <_wcrtomb_r>
   11374:	4603      	mov	r3, r0
   11376:	3301      	adds	r3, #1
   11378:	9004      	str	r0, [sp, #16]
   1137a:	f000 84ce 	beq.w	11d1a <_vfiprintf_r+0xf42>
   1137e:	9b04      	ldr	r3, [sp, #16]
   11380:	9507      	str	r5, [sp, #28]
   11382:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   11386:	9302      	str	r3, [sp, #8]
   11388:	2300      	movs	r3, #0
   1138a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   1138e:	e706      	b.n	1119e <_vfiprintf_r+0x3c6>
   11390:	9b07      	ldr	r3, [sp, #28]
   11392:	f853 2b04 	ldr.w	r2, [r3], #4
   11396:	9206      	str	r2, [sp, #24]
   11398:	2a00      	cmp	r2, #0
   1139a:	f280 82bb 	bge.w	11914 <_vfiprintf_r+0xb3c>
   1139e:	9a06      	ldr	r2, [sp, #24]
   113a0:	4252      	negs	r2, r2
   113a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   113a6:	f898 1000 	ldrb.w	r1, [r8]
   113aa:	f046 0604 	orr.w	r6, r6, #4
   113ae:	e57f      	b.n	10eb0 <_vfiprintf_r+0xd8>
   113b0:	f898 1000 	ldrb.w	r1, [r8]
   113b4:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   113b8:	e57a      	b.n	10eb0 <_vfiprintf_r+0xd8>
   113ba:	f898 1000 	ldrb.w	r1, [r8]
   113be:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   113c2:	e575      	b.n	10eb0 <_vfiprintf_r+0xd8>
   113c4:	4642      	mov	r2, r8
   113c6:	f812 1b01 	ldrb.w	r1, [r2], #1
   113ca:	292a      	cmp	r1, #42	; 0x2a
   113cc:	f000 84b0 	beq.w	11d30 <_vfiprintf_r+0xf58>
   113d0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   113d4:	2b09      	cmp	r3, #9
   113d6:	4690      	mov	r8, r2
   113d8:	f04f 0700 	mov.w	r7, #0
   113dc:	f63f ad6a 	bhi.w	10eb4 <_vfiprintf_r+0xdc>
   113e0:	f818 1b01 	ldrb.w	r1, [r8], #1
   113e4:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   113e8:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   113ec:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   113f0:	2b09      	cmp	r3, #9
   113f2:	d9f5      	bls.n	113e0 <_vfiprintf_r+0x608>
   113f4:	e55e      	b.n	10eb4 <_vfiprintf_r+0xdc>
   113f6:	f898 1000 	ldrb.w	r1, [r8]
   113fa:	f046 0601 	orr.w	r6, r6, #1
   113fe:	e557      	b.n	10eb0 <_vfiprintf_r+0xd8>
   11400:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   11404:	2b00      	cmp	r3, #0
   11406:	f47f add8 	bne.w	10fba <_vfiprintf_r+0x1e2>
   1140a:	2320      	movs	r3, #32
   1140c:	f898 1000 	ldrb.w	r1, [r8]
   11410:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   11414:	e54c      	b.n	10eb0 <_vfiprintf_r+0xd8>
   11416:	f898 1000 	ldrb.w	r1, [r8]
   1141a:	296c      	cmp	r1, #108	; 0x6c
   1141c:	bf03      	ittte	eq
   1141e:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   11422:	f046 0620 	orreq.w	r6, r6, #32
   11426:	f108 0801 	addeq.w	r8, r8, #1
   1142a:	f046 0610 	orrne.w	r6, r6, #16
   1142e:	e53f      	b.n	10eb0 <_vfiprintf_r+0xd8>
   11430:	f898 1000 	ldrb.w	r1, [r8]
   11434:	2968      	cmp	r1, #104	; 0x68
   11436:	bf03      	ittte	eq
   11438:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   1143c:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   11440:	f108 0801 	addeq.w	r8, r8, #1
   11444:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   11448:	e532      	b.n	10eb0 <_vfiprintf_r+0xd8>
   1144a:	f046 0310 	orr.w	r3, r6, #16
   1144e:	9302      	str	r3, [sp, #8]
   11450:	9b02      	ldr	r3, [sp, #8]
   11452:	f013 0220 	ands.w	r2, r3, #32
   11456:	f000 8225 	beq.w	118a4 <_vfiprintf_r+0xacc>
   1145a:	9b07      	ldr	r3, [sp, #28]
   1145c:	3307      	adds	r3, #7
   1145e:	f023 0307 	bic.w	r3, r3, #7
   11462:	4619      	mov	r1, r3
   11464:	685a      	ldr	r2, [r3, #4]
   11466:	f851 3b08 	ldr.w	r3, [r1], #8
   1146a:	9107      	str	r1, [sp, #28]
   1146c:	2101      	movs	r1, #1
   1146e:	e61d      	b.n	110ac <_vfiprintf_r+0x2d4>
   11470:	9a07      	ldr	r2, [sp, #28]
   11472:	f046 0302 	orr.w	r3, r6, #2
   11476:	9302      	str	r3, [sp, #8]
   11478:	f852 3b04 	ldr.w	r3, [r2], #4
   1147c:	9207      	str	r2, [sp, #28]
   1147e:	f647 0230 	movw	r2, #30768	; 0x7830
   11482:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   11486:	4aa1      	ldr	r2, [pc, #644]	; (1170c <_vfiprintf_r+0x934>)
   11488:	920b      	str	r2, [sp, #44]	; 0x2c
   1148a:	2102      	movs	r1, #2
   1148c:	2200      	movs	r2, #0
   1148e:	e60d      	b.n	110ac <_vfiprintf_r+0x2d4>
   11490:	06b7      	lsls	r7, r6, #26
   11492:	f100 8267 	bmi.w	11964 <_vfiprintf_r+0xb8c>
   11496:	06f5      	lsls	r5, r6, #27
   11498:	f100 8361 	bmi.w	11b5e <_vfiprintf_r+0xd86>
   1149c:	0674      	lsls	r4, r6, #25
   1149e:	f100 83ee 	bmi.w	11c7e <_vfiprintf_r+0xea6>
   114a2:	05b0      	lsls	r0, r6, #22
   114a4:	f140 835b 	bpl.w	11b5e <_vfiprintf_r+0xd86>
   114a8:	9b07      	ldr	r3, [sp, #28]
   114aa:	9905      	ldr	r1, [sp, #20]
   114ac:	f853 2b04 	ldr.w	r2, [r3], #4
   114b0:	9307      	str	r3, [sp, #28]
   114b2:	7011      	strb	r1, [r2, #0]
   114b4:	e4d4      	b.n	10e60 <_vfiprintf_r+0x88>
   114b6:	9602      	str	r6, [sp, #8]
   114b8:	2901      	cmp	r1, #1
   114ba:	f43f ada2 	beq.w	11002 <_vfiprintf_r+0x22a>
   114be:	2902      	cmp	r1, #2
   114c0:	ac44      	add	r4, sp, #272	; 0x110
   114c2:	d111      	bne.n	114e8 <_vfiprintf_r+0x710>
   114c4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   114c6:	f003 010f 	and.w	r1, r3, #15
   114ca:	091b      	lsrs	r3, r3, #4
   114cc:	5c41      	ldrb	r1, [r0, r1]
   114ce:	f804 1d01 	strb.w	r1, [r4, #-1]!
   114d2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   114d6:	0912      	lsrs	r2, r2, #4
   114d8:	ea53 0102 	orrs.w	r1, r3, r2
   114dc:	d1f3      	bne.n	114c6 <_vfiprintf_r+0x6ee>
   114de:	9e02      	ldr	r6, [sp, #8]
   114e0:	ab44      	add	r3, sp, #272	; 0x110
   114e2:	1b1b      	subs	r3, r3, r4
   114e4:	9304      	str	r3, [sp, #16]
   114e6:	e599      	b.n	1101c <_vfiprintf_r+0x244>
   114e8:	f003 0107 	and.w	r1, r3, #7
   114ec:	08db      	lsrs	r3, r3, #3
   114ee:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   114f2:	08d2      	lsrs	r2, r2, #3
   114f4:	3130      	adds	r1, #48	; 0x30
   114f6:	ea53 0502 	orrs.w	r5, r3, r2
   114fa:	4620      	mov	r0, r4
   114fc:	f804 1d01 	strb.w	r1, [r4, #-1]!
   11500:	d1f2      	bne.n	114e8 <_vfiprintf_r+0x710>
   11502:	9e02      	ldr	r6, [sp, #8]
   11504:	07f3      	lsls	r3, r6, #31
   11506:	d5eb      	bpl.n	114e0 <_vfiprintf_r+0x708>
   11508:	2930      	cmp	r1, #48	; 0x30
   1150a:	d0e8      	beq.n	114de <_vfiprintf_r+0x706>
   1150c:	2330      	movs	r3, #48	; 0x30
   1150e:	3802      	subs	r0, #2
   11510:	f804 3c01 	strb.w	r3, [r4, #-1]
   11514:	ab44      	add	r3, sp, #272	; 0x110
   11516:	1a1b      	subs	r3, r3, r0
   11518:	9e02      	ldr	r6, [sp, #8]
   1151a:	9304      	str	r3, [sp, #16]
   1151c:	4604      	mov	r4, r0
   1151e:	e57d      	b.n	1101c <_vfiprintf_r+0x244>
   11520:	9b04      	ldr	r3, [sp, #16]
   11522:	941b      	str	r4, [sp, #108]	; 0x6c
   11524:	2201      	movs	r2, #1
   11526:	931c      	str	r3, [sp, #112]	; 0x70
   11528:	931a      	str	r3, [sp, #104]	; 0x68
   1152a:	9219      	str	r2, [sp, #100]	; 0x64
   1152c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11530:	f109 0908 	add.w	r9, r9, #8
   11534:	e69e      	b.n	11274 <_vfiprintf_r+0x49c>
   11536:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1153a:	e491      	b.n	10e60 <_vfiprintf_r+0x88>
   1153c:	9a06      	ldr	r2, [sp, #24]
   1153e:	9d02      	ldr	r5, [sp, #8]
   11540:	1b55      	subs	r5, r2, r5
   11542:	2d00      	cmp	r5, #0
   11544:	f77f ae78 	ble.w	11238 <_vfiprintf_r+0x460>
   11548:	2d10      	cmp	r5, #16
   1154a:	f340 83d3 	ble.w	11cf4 <_vfiprintf_r+0xf1c>
   1154e:	4619      	mov	r1, r3
   11550:	4643      	mov	r3, r8
   11552:	9409      	str	r4, [sp, #36]	; 0x24
   11554:	46b8      	mov	r8, r7
   11556:	9c03      	ldr	r4, [sp, #12]
   11558:	4637      	mov	r7, r6
   1155a:	465e      	mov	r6, fp
   1155c:	469b      	mov	fp, r3
   1155e:	e007      	b.n	11570 <_vfiprintf_r+0x798>
   11560:	f100 0c02 	add.w	ip, r0, #2
   11564:	f109 0908 	add.w	r9, r9, #8
   11568:	4610      	mov	r0, r2
   1156a:	3d10      	subs	r5, #16
   1156c:	2d10      	cmp	r5, #16
   1156e:	dd1f      	ble.n	115b0 <_vfiprintf_r+0x7d8>
   11570:	4b67      	ldr	r3, [pc, #412]	; (11710 <_vfiprintf_r+0x938>)
   11572:	f8c9 3000 	str.w	r3, [r9]
   11576:	1c42      	adds	r2, r0, #1
   11578:	3110      	adds	r1, #16
   1157a:	2310      	movs	r3, #16
   1157c:	2a07      	cmp	r2, #7
   1157e:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   11582:	f8c9 3004 	str.w	r3, [r9, #4]
   11586:	ddeb      	ble.n	11560 <_vfiprintf_r+0x788>
   11588:	aa18      	add	r2, sp, #96	; 0x60
   1158a:	2900      	cmp	r1, #0
   1158c:	f000 808c 	beq.w	116a8 <_vfiprintf_r+0x8d0>
   11590:	4621      	mov	r1, r4
   11592:	4630      	mov	r0, r6
   11594:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11598:	f7ff fbe2 	bl	10d60 <__sprint_r.part.0>
   1159c:	2800      	cmp	r0, #0
   1159e:	f47f addb 	bne.w	11158 <_vfiprintf_r+0x380>
   115a2:	e9dd 0119 	ldrd	r0, r1, [sp, #100]	; 0x64
   115a6:	3d10      	subs	r5, #16
   115a8:	2d10      	cmp	r5, #16
   115aa:	f100 0c01 	add.w	ip, r0, #1
   115ae:	dcdf      	bgt.n	11570 <_vfiprintf_r+0x798>
   115b0:	465a      	mov	r2, fp
   115b2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   115b4:	46b3      	mov	fp, r6
   115b6:	460b      	mov	r3, r1
   115b8:	463e      	mov	r6, r7
   115ba:	4647      	mov	r7, r8
   115bc:	4690      	mov	r8, r2
   115be:	4a54      	ldr	r2, [pc, #336]	; (11710 <_vfiprintf_r+0x938>)
   115c0:	f8c9 5004 	str.w	r5, [r9, #4]
   115c4:	442b      	add	r3, r5
   115c6:	f1bc 0f07 	cmp.w	ip, #7
   115ca:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   115ce:	f8c9 2000 	str.w	r2, [r9]
   115d2:	f340 81a7 	ble.w	11924 <_vfiprintf_r+0xb4c>
   115d6:	2b00      	cmp	r3, #0
   115d8:	f000 832c 	beq.w	11c34 <_vfiprintf_r+0xe5c>
   115dc:	9903      	ldr	r1, [sp, #12]
   115de:	aa18      	add	r2, sp, #96	; 0x60
   115e0:	4658      	mov	r0, fp
   115e2:	f7ff fbbd 	bl	10d60 <__sprint_r.part.0>
   115e6:	2800      	cmp	r0, #0
   115e8:	f47f adb7 	bne.w	1115a <_vfiprintf_r+0x382>
   115ec:	9a04      	ldr	r2, [sp, #16]
   115ee:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   115f2:	1abd      	subs	r5, r7, r2
   115f4:	2d00      	cmp	r5, #0
   115f6:	f100 0101 	add.w	r1, r0, #1
   115fa:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   115fe:	f77f ae20 	ble.w	11242 <_vfiprintf_r+0x46a>
   11602:	2d10      	cmp	r5, #16
   11604:	dd32      	ble.n	1166c <_vfiprintf_r+0x894>
   11606:	4619      	mov	r1, r3
   11608:	4643      	mov	r3, r8
   1160a:	9409      	str	r4, [sp, #36]	; 0x24
   1160c:	46b0      	mov	r8, r6
   1160e:	9c03      	ldr	r4, [sp, #12]
   11610:	465e      	mov	r6, fp
   11612:	2710      	movs	r7, #16
   11614:	469b      	mov	fp, r3
   11616:	e007      	b.n	11628 <_vfiprintf_r+0x850>
   11618:	f100 0c02 	add.w	ip, r0, #2
   1161c:	f109 0908 	add.w	r9, r9, #8
   11620:	4610      	mov	r0, r2
   11622:	3d10      	subs	r5, #16
   11624:	2d10      	cmp	r5, #16
   11626:	dd1a      	ble.n	1165e <_vfiprintf_r+0x886>
   11628:	1c42      	adds	r2, r0, #1
   1162a:	4b39      	ldr	r3, [pc, #228]	; (11710 <_vfiprintf_r+0x938>)
   1162c:	3110      	adds	r1, #16
   1162e:	2a07      	cmp	r2, #7
   11630:	e9c9 3700 	strd	r3, r7, [r9]
   11634:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   11638:	ddee      	ble.n	11618 <_vfiprintf_r+0x840>
   1163a:	aa18      	add	r2, sp, #96	; 0x60
   1163c:	b329      	cbz	r1, 1168a <_vfiprintf_r+0x8b2>
   1163e:	4621      	mov	r1, r4
   11640:	4630      	mov	r0, r6
   11642:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11646:	f7ff fb8b 	bl	10d60 <__sprint_r.part.0>
   1164a:	2800      	cmp	r0, #0
   1164c:	f47f ad84 	bne.w	11158 <_vfiprintf_r+0x380>
   11650:	e9dd 0119 	ldrd	r0, r1, [sp, #100]	; 0x64
   11654:	3d10      	subs	r5, #16
   11656:	2d10      	cmp	r5, #16
   11658:	f100 0c01 	add.w	ip, r0, #1
   1165c:	dce4      	bgt.n	11628 <_vfiprintf_r+0x850>
   1165e:	465a      	mov	r2, fp
   11660:	9c09      	ldr	r4, [sp, #36]	; 0x24
   11662:	460b      	mov	r3, r1
   11664:	46b3      	mov	fp, r6
   11666:	4661      	mov	r1, ip
   11668:	4646      	mov	r6, r8
   1166a:	4690      	mov	r8, r2
   1166c:	4a28      	ldr	r2, [pc, #160]	; (11710 <_vfiprintf_r+0x938>)
   1166e:	f8c9 5004 	str.w	r5, [r9, #4]
   11672:	442b      	add	r3, r5
   11674:	2907      	cmp	r1, #7
   11676:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   1167a:	f8c9 2000 	str.w	r2, [r9]
   1167e:	f300 80f3 	bgt.w	11868 <_vfiprintf_r+0xa90>
   11682:	f109 0908 	add.w	r9, r9, #8
   11686:	3101      	adds	r1, #1
   11688:	e5db      	b.n	11242 <_vfiprintf_r+0x46a>
   1168a:	f04f 0c01 	mov.w	ip, #1
   1168e:	4608      	mov	r0, r1
   11690:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11694:	e7c5      	b.n	11622 <_vfiprintf_r+0x84a>
   11696:	9903      	ldr	r1, [sp, #12]
   11698:	aa18      	add	r2, sp, #96	; 0x60
   1169a:	4658      	mov	r0, fp
   1169c:	f7ff fb60 	bl	10d60 <__sprint_r.part.0>
   116a0:	2800      	cmp	r0, #0
   116a2:	f43f adfa 	beq.w	1129a <_vfiprintf_r+0x4c2>
   116a6:	e558      	b.n	1115a <_vfiprintf_r+0x382>
   116a8:	f04f 0c01 	mov.w	ip, #1
   116ac:	4608      	mov	r0, r1
   116ae:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   116b2:	e75a      	b.n	1156a <_vfiprintf_r+0x792>
   116b4:	2b00      	cmp	r3, #0
   116b6:	f000 810c 	beq.w	118d2 <_vfiprintf_r+0xafa>
   116ba:	9903      	ldr	r1, [sp, #12]
   116bc:	aa18      	add	r2, sp, #96	; 0x60
   116be:	4658      	mov	r0, fp
   116c0:	f7ff fb4e 	bl	10d60 <__sprint_r.part.0>
   116c4:	2800      	cmp	r0, #0
   116c6:	f47f ad48 	bne.w	1115a <_vfiprintf_r+0x382>
   116ca:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   116ce:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   116d2:	1c41      	adds	r1, r0, #1
   116d4:	e58e      	b.n	111f4 <_vfiprintf_r+0x41c>
   116d6:	2302      	movs	r3, #2
   116d8:	aa11      	add	r2, sp, #68	; 0x44
   116da:	931c      	str	r3, [sp, #112]	; 0x70
   116dc:	921b      	str	r2, [sp, #108]	; 0x6c
   116de:	2101      	movs	r1, #1
   116e0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   116e4:	4608      	mov	r0, r1
   116e6:	f109 0908 	add.w	r9, r9, #8
   116ea:	1c41      	adds	r1, r0, #1
   116ec:	e5a0      	b.n	11230 <_vfiprintf_r+0x458>
   116ee:	2d10      	cmp	r5, #16
   116f0:	f340 82e2 	ble.w	11cb8 <_vfiprintf_r+0xee0>
   116f4:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   116f8:	4618      	mov	r0, r3
   116fa:	4643      	mov	r3, r8
   116fc:	940f      	str	r4, [sp, #60]	; 0x3c
   116fe:	46b8      	mov	r8, r7
   11700:	9c03      	ldr	r4, [sp, #12]
   11702:	4637      	mov	r7, r6
   11704:	465e      	mov	r6, fp
   11706:	469b      	mov	fp, r3
   11708:	e00c      	b.n	11724 <_vfiprintf_r+0x94c>
   1170a:	bf00      	nop
   1170c:	000144ac 	.word	0x000144ac
   11710:	000145b8 	.word	0x000145b8
   11714:	f101 0c02 	add.w	ip, r1, #2
   11718:	f109 0908 	add.w	r9, r9, #8
   1171c:	4611      	mov	r1, r2
   1171e:	3d10      	subs	r5, #16
   11720:	2d10      	cmp	r5, #16
   11722:	dd1d      	ble.n	11760 <_vfiprintf_r+0x988>
   11724:	4bb2      	ldr	r3, [pc, #712]	; (119f0 <_vfiprintf_r+0xc18>)
   11726:	f8c9 3000 	str.w	r3, [r9]
   1172a:	1c4a      	adds	r2, r1, #1
   1172c:	3010      	adds	r0, #16
   1172e:	2310      	movs	r3, #16
   11730:	2a07      	cmp	r2, #7
   11732:	e9cd 2019 	strd	r2, r0, [sp, #100]	; 0x64
   11736:	f8c9 3004 	str.w	r3, [r9, #4]
   1173a:	ddeb      	ble.n	11714 <_vfiprintf_r+0x93c>
   1173c:	aa18      	add	r2, sp, #96	; 0x60
   1173e:	b330      	cbz	r0, 1178e <_vfiprintf_r+0x9b6>
   11740:	4621      	mov	r1, r4
   11742:	4630      	mov	r0, r6
   11744:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11748:	f7ff fb0a 	bl	10d60 <__sprint_r.part.0>
   1174c:	2800      	cmp	r0, #0
   1174e:	f47f ad03 	bne.w	11158 <_vfiprintf_r+0x380>
   11752:	e9dd 1019 	ldrd	r1, r0, [sp, #100]	; 0x64
   11756:	3d10      	subs	r5, #16
   11758:	2d10      	cmp	r5, #16
   1175a:	f101 0c01 	add.w	ip, r1, #1
   1175e:	dce1      	bgt.n	11724 <_vfiprintf_r+0x94c>
   11760:	465a      	mov	r2, fp
   11762:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   11764:	4603      	mov	r3, r0
   11766:	46b3      	mov	fp, r6
   11768:	4660      	mov	r0, ip
   1176a:	463e      	mov	r6, r7
   1176c:	4647      	mov	r7, r8
   1176e:	4690      	mov	r8, r2
   11770:	4a9f      	ldr	r2, [pc, #636]	; (119f0 <_vfiprintf_r+0xc18>)
   11772:	f8c9 5004 	str.w	r5, [r9, #4]
   11776:	442b      	add	r3, r5
   11778:	2807      	cmp	r0, #7
   1177a:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   1177e:	f8c9 2000 	str.w	r2, [r9]
   11782:	f300 80b6 	bgt.w	118f2 <_vfiprintf_r+0xb1a>
   11786:	f109 0908 	add.w	r9, r9, #8
   1178a:	1c41      	adds	r1, r0, #1
   1178c:	e51e      	b.n	111cc <_vfiprintf_r+0x3f4>
   1178e:	4601      	mov	r1, r0
   11790:	f04f 0c01 	mov.w	ip, #1
   11794:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11798:	e7c1      	b.n	1171e <_vfiprintf_r+0x946>
   1179a:	0776      	lsls	r6, r6, #29
   1179c:	9319      	str	r3, [sp, #100]	; 0x64
   1179e:	d54a      	bpl.n	11836 <_vfiprintf_r+0xa5e>
   117a0:	9a06      	ldr	r2, [sp, #24]
   117a2:	9902      	ldr	r1, [sp, #8]
   117a4:	1a54      	subs	r4, r2, r1
   117a6:	2c00      	cmp	r4, #0
   117a8:	dd45      	ble.n	11836 <_vfiprintf_r+0xa5e>
   117aa:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   117ae:	2c10      	cmp	r4, #16
   117b0:	f340 829d 	ble.w	11cee <_vfiprintf_r+0xf16>
   117b4:	9919      	ldr	r1, [sp, #100]	; 0x64
   117b6:	9e03      	ldr	r6, [sp, #12]
   117b8:	2510      	movs	r5, #16
   117ba:	e006      	b.n	117ca <_vfiprintf_r+0x9f2>
   117bc:	1c88      	adds	r0, r1, #2
   117be:	f109 0908 	add.w	r9, r9, #8
   117c2:	4611      	mov	r1, r2
   117c4:	3c10      	subs	r4, #16
   117c6:	2c10      	cmp	r4, #16
   117c8:	dd1a      	ble.n	11800 <_vfiprintf_r+0xa28>
   117ca:	1c4a      	adds	r2, r1, #1
   117cc:	4888      	ldr	r0, [pc, #544]	; (119f0 <_vfiprintf_r+0xc18>)
   117ce:	3310      	adds	r3, #16
   117d0:	2a07      	cmp	r2, #7
   117d2:	e9c9 0500 	strd	r0, r5, [r9]
   117d6:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   117da:	ddef      	ble.n	117bc <_vfiprintf_r+0x9e4>
   117dc:	aa18      	add	r2, sp, #96	; 0x60
   117de:	b32b      	cbz	r3, 1182c <_vfiprintf_r+0xa54>
   117e0:	4631      	mov	r1, r6
   117e2:	4658      	mov	r0, fp
   117e4:	f7ff fabc 	bl	10d60 <__sprint_r.part.0>
   117e8:	2800      	cmp	r0, #0
   117ea:	f47f acb6 	bne.w	1115a <_vfiprintf_r+0x382>
   117ee:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   117f2:	3c10      	subs	r4, #16
   117f4:	2c10      	cmp	r4, #16
   117f6:	f101 0001 	add.w	r0, r1, #1
   117fa:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   117fe:	dce4      	bgt.n	117ca <_vfiprintf_r+0x9f2>
   11800:	4a7b      	ldr	r2, [pc, #492]	; (119f0 <_vfiprintf_r+0xc18>)
   11802:	f8c9 4004 	str.w	r4, [r9, #4]
   11806:	4423      	add	r3, r4
   11808:	2807      	cmp	r0, #7
   1180a:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   1180e:	f8c9 2000 	str.w	r2, [r9]
   11812:	f77f ad37 	ble.w	11284 <_vfiprintf_r+0x4ac>
   11816:	b173      	cbz	r3, 11836 <_vfiprintf_r+0xa5e>
   11818:	9903      	ldr	r1, [sp, #12]
   1181a:	aa18      	add	r2, sp, #96	; 0x60
   1181c:	4658      	mov	r0, fp
   1181e:	f7ff fa9f 	bl	10d60 <__sprint_r.part.0>
   11822:	2800      	cmp	r0, #0
   11824:	f47f ac99 	bne.w	1115a <_vfiprintf_r+0x382>
   11828:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1182a:	e52b      	b.n	11284 <_vfiprintf_r+0x4ac>
   1182c:	2001      	movs	r0, #1
   1182e:	4619      	mov	r1, r3
   11830:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11834:	e7c6      	b.n	117c4 <_vfiprintf_r+0x9ec>
   11836:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   1183a:	9902      	ldr	r1, [sp, #8]
   1183c:	428a      	cmp	r2, r1
   1183e:	bfac      	ite	ge
   11840:	189b      	addge	r3, r3, r2
   11842:	185b      	addlt	r3, r3, r1
   11844:	9305      	str	r3, [sp, #20]
   11846:	e528      	b.n	1129a <_vfiprintf_r+0x4c2>
   11848:	9b03      	ldr	r3, [sp, #12]
   1184a:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
   1184e:	058f      	lsls	r7, r1, #22
   11850:	b28a      	uxth	r2, r1
   11852:	f53f aae0 	bmi.w	10e16 <_vfiprintf_r+0x3e>
   11856:	461d      	mov	r5, r3
   11858:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1185a:	f7fb fbd7 	bl	d00c <__retarget_lock_acquire_recursive>
   1185e:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   11862:	b28a      	uxth	r2, r1
   11864:	f7ff bad7 	b.w	10e16 <_vfiprintf_r+0x3e>
   11868:	2b00      	cmp	r3, #0
   1186a:	f43f ae59 	beq.w	11520 <_vfiprintf_r+0x748>
   1186e:	9903      	ldr	r1, [sp, #12]
   11870:	aa18      	add	r2, sp, #96	; 0x60
   11872:	4658      	mov	r0, fp
   11874:	f7ff fa74 	bl	10d60 <__sprint_r.part.0>
   11878:	2800      	cmp	r0, #0
   1187a:	f47f ac6e 	bne.w	1115a <_vfiprintf_r+0x382>
   1187e:	9919      	ldr	r1, [sp, #100]	; 0x64
   11880:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   11882:	3101      	adds	r1, #1
   11884:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11888:	e4db      	b.n	11242 <_vfiprintf_r+0x46a>
   1188a:	9219      	str	r2, [sp, #100]	; 0x64
   1188c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11890:	e44f      	b.n	11132 <_vfiprintf_r+0x35a>
   11892:	2f00      	cmp	r7, #0
   11894:	f47f abba 	bne.w	1100c <_vfiprintf_r+0x234>
   11898:	9e02      	ldr	r6, [sp, #8]
   1189a:	2700      	movs	r7, #0
   1189c:	9704      	str	r7, [sp, #16]
   1189e:	ac44      	add	r4, sp, #272	; 0x110
   118a0:	f7ff bbbc 	b.w	1101c <_vfiprintf_r+0x244>
   118a4:	9b02      	ldr	r3, [sp, #8]
   118a6:	f013 0310 	ands.w	r3, r3, #16
   118aa:	d154      	bne.n	11956 <_vfiprintf_r+0xb7e>
   118ac:	9a02      	ldr	r2, [sp, #8]
   118ae:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   118b2:	f000 8167 	beq.w	11b84 <_vfiprintf_r+0xdac>
   118b6:	9907      	ldr	r1, [sp, #28]
   118b8:	461a      	mov	r2, r3
   118ba:	f851 3b04 	ldr.w	r3, [r1], #4
   118be:	9107      	str	r1, [sp, #28]
   118c0:	b29b      	uxth	r3, r3
   118c2:	2101      	movs	r1, #1
   118c4:	f7ff bbf2 	b.w	110ac <_vfiprintf_r+0x2d4>
   118c8:	2101      	movs	r1, #1
   118ca:	4618      	mov	r0, r3
   118cc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   118d0:	e4ae      	b.n	11230 <_vfiprintf_r+0x458>
   118d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   118d4:	2a00      	cmp	r2, #0
   118d6:	d15e      	bne.n	11996 <_vfiprintf_r+0xbbe>
   118d8:	4618      	mov	r0, r3
   118da:	2101      	movs	r1, #1
   118dc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   118e0:	e4a6      	b.n	11230 <_vfiprintf_r+0x458>
   118e2:	425b      	negs	r3, r3
   118e4:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   118e8:	9602      	str	r6, [sp, #8]
   118ea:	202d      	movs	r0, #45	; 0x2d
   118ec:	2101      	movs	r1, #1
   118ee:	f7ff bbde 	b.w	110ae <_vfiprintf_r+0x2d6>
   118f2:	2b00      	cmp	r3, #0
   118f4:	f000 808d 	beq.w	11a12 <_vfiprintf_r+0xc3a>
   118f8:	9903      	ldr	r1, [sp, #12]
   118fa:	aa18      	add	r2, sp, #96	; 0x60
   118fc:	4658      	mov	r0, fp
   118fe:	f7ff fa2f 	bl	10d60 <__sprint_r.part.0>
   11902:	2800      	cmp	r0, #0
   11904:	f47f ac29 	bne.w	1115a <_vfiprintf_r+0x382>
   11908:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1190c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11910:	1c41      	adds	r1, r0, #1
   11912:	e45b      	b.n	111cc <_vfiprintf_r+0x3f4>
   11914:	f898 1000 	ldrb.w	r1, [r8]
   11918:	9307      	str	r3, [sp, #28]
   1191a:	f7ff bac9 	b.w	10eb0 <_vfiprintf_r+0xd8>
   1191e:	ac44      	add	r4, sp, #272	; 0x110
   11920:	f7ff bb7c 	b.w	1101c <_vfiprintf_r+0x244>
   11924:	f109 0908 	add.w	r9, r9, #8
   11928:	f10c 0101 	add.w	r1, ip, #1
   1192c:	4660      	mov	r0, ip
   1192e:	e483      	b.n	11238 <_vfiprintf_r+0x460>
   11930:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   11934:	f040 8191 	bne.w	11c5a <_vfiprintf_r+0xe82>
   11938:	f851 3b04 	ldr.w	r3, [r1], #4
   1193c:	9107      	str	r1, [sp, #28]
   1193e:	f7ff bbb1 	b.w	110a4 <_vfiprintf_r+0x2cc>
   11942:	05b3      	lsls	r3, r6, #22
   11944:	f100 8182 	bmi.w	11c4c <_vfiprintf_r+0xe74>
   11948:	f852 3b04 	ldr.w	r3, [r2], #4
   1194c:	9207      	str	r2, [sp, #28]
   1194e:	17da      	asrs	r2, r3, #31
   11950:	4611      	mov	r1, r2
   11952:	f7ff bb49 	b.w	10fe8 <_vfiprintf_r+0x210>
   11956:	9907      	ldr	r1, [sp, #28]
   11958:	f851 3b04 	ldr.w	r3, [r1], #4
   1195c:	9107      	str	r1, [sp, #28]
   1195e:	2101      	movs	r1, #1
   11960:	f7ff bba4 	b.w	110ac <_vfiprintf_r+0x2d4>
   11964:	9b07      	ldr	r3, [sp, #28]
   11966:	9805      	ldr	r0, [sp, #20]
   11968:	f853 1b04 	ldr.w	r1, [r3], #4
   1196c:	9307      	str	r3, [sp, #28]
   1196e:	17c2      	asrs	r2, r0, #31
   11970:	e9c1 0200 	strd	r0, r2, [r1]
   11974:	f7ff ba74 	b.w	10e60 <_vfiprintf_r+0x88>
   11978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1197a:	2b00      	cmp	r3, #0
   1197c:	f43f ab1d 	beq.w	10fba <_vfiprintf_r+0x1e2>
   11980:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11982:	781b      	ldrb	r3, [r3, #0]
   11984:	2b00      	cmp	r3, #0
   11986:	f43f ab18 	beq.w	10fba <_vfiprintf_r+0x1e2>
   1198a:	f898 1000 	ldrb.w	r1, [r8]
   1198e:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   11992:	f7ff ba8d 	b.w	10eb0 <_vfiprintf_r+0xd8>
   11996:	2302      	movs	r3, #2
   11998:	aa11      	add	r2, sp, #68	; 0x44
   1199a:	931c      	str	r3, [sp, #112]	; 0x70
   1199c:	921b      	str	r2, [sp, #108]	; 0x6c
   1199e:	2001      	movs	r0, #1
   119a0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   119a4:	e69f      	b.n	116e6 <_vfiprintf_r+0x90e>
   119a6:	9602      	str	r6, [sp, #8]
   119a8:	e552      	b.n	11450 <_vfiprintf_r+0x678>
   119aa:	4b12      	ldr	r3, [pc, #72]	; (119f4 <_vfiprintf_r+0xc1c>)
   119ac:	930b      	str	r3, [sp, #44]	; 0x2c
   119ae:	f016 0220 	ands.w	r2, r6, #32
   119b2:	d05f      	beq.n	11a74 <_vfiprintf_r+0xc9c>
   119b4:	9b07      	ldr	r3, [sp, #28]
   119b6:	3307      	adds	r3, #7
   119b8:	f023 0307 	bic.w	r3, r3, #7
   119bc:	4618      	mov	r0, r3
   119be:	685a      	ldr	r2, [r3, #4]
   119c0:	f850 3b08 	ldr.w	r3, [r0], #8
   119c4:	9007      	str	r0, [sp, #28]
   119c6:	07f4      	lsls	r4, r6, #31
   119c8:	d509      	bpl.n	119de <_vfiprintf_r+0xc06>
   119ca:	ea53 0002 	orrs.w	r0, r3, r2
   119ce:	d006      	beq.n	119de <_vfiprintf_r+0xc06>
   119d0:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   119d4:	2130      	movs	r1, #48	; 0x30
   119d6:	f046 0602 	orr.w	r6, r6, #2
   119da:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   119de:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   119e2:	9102      	str	r1, [sp, #8]
   119e4:	2102      	movs	r1, #2
   119e6:	f7ff bb61 	b.w	110ac <_vfiprintf_r+0x2d4>
   119ea:	4b03      	ldr	r3, [pc, #12]	; (119f8 <_vfiprintf_r+0xc20>)
   119ec:	930b      	str	r3, [sp, #44]	; 0x2c
   119ee:	e7de      	b.n	119ae <_vfiprintf_r+0xbd6>
   119f0:	000145a8 	.word	0x000145a8
   119f4:	000144ac 	.word	0x000144ac
   119f8:	000144c0 	.word	0x000144c0
   119fc:	9b07      	ldr	r3, [sp, #28]
   119fe:	2101      	movs	r1, #1
   11a00:	f853 2b04 	ldr.w	r2, [r3], #4
   11a04:	9102      	str	r1, [sp, #8]
   11a06:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   11a0a:	9307      	str	r3, [sp, #28]
   11a0c:	9104      	str	r1, [sp, #16]
   11a0e:	ac2b      	add	r4, sp, #172	; 0xac
   11a10:	e4ba      	b.n	11388 <_vfiprintf_r+0x5b0>
   11a12:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   11a16:	2a00      	cmp	r2, #0
   11a18:	f040 8126 	bne.w	11c68 <_vfiprintf_r+0xe90>
   11a1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11a1e:	2a00      	cmp	r2, #0
   11a20:	f47f ae59 	bne.w	116d6 <_vfiprintf_r+0x8fe>
   11a24:	4618      	mov	r0, r3
   11a26:	2101      	movs	r1, #1
   11a28:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11a2c:	e404      	b.n	11238 <_vfiprintf_r+0x460>
   11a2e:	2100      	movs	r1, #0
   11a30:	2208      	movs	r2, #8
   11a32:	a816      	add	r0, sp, #88	; 0x58
   11a34:	9413      	str	r4, [sp, #76]	; 0x4c
   11a36:	f7fb f9cb 	bl	cdd0 <memset>
   11a3a:	1c79      	adds	r1, r7, #1
   11a3c:	f000 80b2 	beq.w	11ba4 <_vfiprintf_r+0xdcc>
   11a40:	2500      	movs	r5, #0
   11a42:	9407      	str	r4, [sp, #28]
   11a44:	462c      	mov	r4, r5
   11a46:	e00c      	b.n	11a62 <_vfiprintf_r+0xc8a>
   11a48:	a92b      	add	r1, sp, #172	; 0xac
   11a4a:	4658      	mov	r0, fp
   11a4c:	f7ff f8c0 	bl	10bd0 <_wcrtomb_r>
   11a50:	1c42      	adds	r2, r0, #1
   11a52:	4420      	add	r0, r4
   11a54:	f000 8161 	beq.w	11d1a <_vfiprintf_r+0xf42>
   11a58:	42b8      	cmp	r0, r7
   11a5a:	dc08      	bgt.n	11a6e <_vfiprintf_r+0xc96>
   11a5c:	f000 8165 	beq.w	11d2a <_vfiprintf_r+0xf52>
   11a60:	4604      	mov	r4, r0
   11a62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11a64:	5952      	ldr	r2, [r2, r5]
   11a66:	ab16      	add	r3, sp, #88	; 0x58
   11a68:	3504      	adds	r5, #4
   11a6a:	2a00      	cmp	r2, #0
   11a6c:	d1ec      	bne.n	11a48 <_vfiprintf_r+0xc70>
   11a6e:	9404      	str	r4, [sp, #16]
   11a70:	9c07      	ldr	r4, [sp, #28]
   11a72:	e0a5      	b.n	11bc0 <_vfiprintf_r+0xde8>
   11a74:	f016 0310 	ands.w	r3, r6, #16
   11a78:	9807      	ldr	r0, [sp, #28]
   11a7a:	d10c      	bne.n	11a96 <_vfiprintf_r+0xcbe>
   11a7c:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   11a80:	d005      	beq.n	11a8e <_vfiprintf_r+0xcb6>
   11a82:	461a      	mov	r2, r3
   11a84:	f850 3b04 	ldr.w	r3, [r0], #4
   11a88:	9007      	str	r0, [sp, #28]
   11a8a:	b29b      	uxth	r3, r3
   11a8c:	e79b      	b.n	119c6 <_vfiprintf_r+0xbee>
   11a8e:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   11a92:	f040 80d5 	bne.w	11c40 <_vfiprintf_r+0xe68>
   11a96:	f850 3b04 	ldr.w	r3, [r0], #4
   11a9a:	9007      	str	r0, [sp, #28]
   11a9c:	e793      	b.n	119c6 <_vfiprintf_r+0xbee>
   11a9e:	9902      	ldr	r1, [sp, #8]
   11aa0:	f8cd 8020 	str.w	r8, [sp, #32]
   11aa4:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   11aa8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   11aac:	9704      	str	r7, [sp, #16]
   11aae:	f04f 0c00 	mov.w	ip, #0
   11ab2:	ac44      	add	r4, sp, #272	; 0x110
   11ab4:	e005      	b.n	11ac2 <_vfiprintf_r+0xcea>
   11ab6:	2b0a      	cmp	r3, #10
   11ab8:	f172 0200 	sbcs.w	r2, r2, #0
   11abc:	d336      	bcc.n	11b2c <_vfiprintf_r+0xd54>
   11abe:	463b      	mov	r3, r7
   11ac0:	462a      	mov	r2, r5
   11ac2:	f8df e290 	ldr.w	lr, [pc, #656]	; 11d54 <_vfiprintf_r+0xf7c>
   11ac6:	1899      	adds	r1, r3, r2
   11ac8:	f141 0100 	adc.w	r1, r1, #0
   11acc:	fbae 0501 	umull	r0, r5, lr, r1
   11ad0:	f025 0003 	bic.w	r0, r5, #3
   11ad4:	eb00 0095 	add.w	r0, r0, r5, lsr #2
   11ad8:	1a09      	subs	r1, r1, r0
   11ada:	1a58      	subs	r0, r3, r1
   11adc:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   11ae0:	f162 0700 	sbc.w	r7, r2, #0
   11ae4:	fb05 f500 	mul.w	r5, r5, r0
   11ae8:	fb0e 5507 	mla	r5, lr, r7, r5
   11aec:	fba0 700e 	umull	r7, r0, r0, lr
   11af0:	4405      	add	r5, r0
   11af2:	f007 0e01 	and.w	lr, r7, #1
   11af6:	2005      	movs	r0, #5
   11af8:	fbae 0e00 	umull	r0, lr, lr, r0
   11afc:	1840      	adds	r0, r0, r1
   11afe:	087f      	lsrs	r7, r7, #1
   11b00:	3030      	adds	r0, #48	; 0x30
   11b02:	f804 0c01 	strb.w	r0, [r4, #-1]
   11b06:	ea47 77c5 	orr.w	r7, r7, r5, lsl #31
   11b0a:	f10c 0c01 	add.w	ip, ip, #1
   11b0e:	3c01      	subs	r4, #1
   11b10:	086d      	lsrs	r5, r5, #1
   11b12:	2e00      	cmp	r6, #0
   11b14:	d0cf      	beq.n	11ab6 <_vfiprintf_r+0xcde>
   11b16:	f898 1000 	ldrb.w	r1, [r8]
   11b1a:	4561      	cmp	r1, ip
   11b1c:	d1cb      	bne.n	11ab6 <_vfiprintf_r+0xcde>
   11b1e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   11b22:	d0c8      	beq.n	11ab6 <_vfiprintf_r+0xcde>
   11b24:	2b0a      	cmp	r3, #10
   11b26:	f172 0200 	sbcs.w	r2, r2, #0
   11b2a:	d26c      	bcs.n	11c06 <_vfiprintf_r+0xe2e>
   11b2c:	ab44      	add	r3, sp, #272	; 0x110
   11b2e:	1b1b      	subs	r3, r3, r4
   11b30:	9f04      	ldr	r7, [sp, #16]
   11b32:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   11b36:	9e02      	ldr	r6, [sp, #8]
   11b38:	f8dd 8020 	ldr.w	r8, [sp, #32]
   11b3c:	9304      	str	r3, [sp, #16]
   11b3e:	f7ff ba6d 	b.w	1101c <_vfiprintf_r+0x244>
   11b42:	9602      	str	r6, [sp, #8]
   11b44:	f7ff ba5d 	b.w	11002 <_vfiprintf_r+0x22a>
   11b48:	4658      	mov	r0, fp
   11b4a:	f7fb f811 	bl	cb70 <__sinit>
   11b4e:	f7ff b95a 	b.w	10e06 <_vfiprintf_r+0x2e>
   11b52:	2901      	cmp	r1, #1
   11b54:	9602      	str	r6, [sp, #8]
   11b56:	f47f acb2 	bne.w	114be <_vfiprintf_r+0x6e6>
   11b5a:	f7ff ba57 	b.w	1100c <_vfiprintf_r+0x234>
   11b5e:	9b07      	ldr	r3, [sp, #28]
   11b60:	9905      	ldr	r1, [sp, #20]
   11b62:	f853 2b04 	ldr.w	r2, [r3], #4
   11b66:	6011      	str	r1, [r2, #0]
   11b68:	9307      	str	r3, [sp, #28]
   11b6a:	f7ff b979 	b.w	10e60 <_vfiprintf_r+0x88>
   11b6e:	2f06      	cmp	r7, #6
   11b70:	463b      	mov	r3, r7
   11b72:	9a02      	ldr	r2, [sp, #8]
   11b74:	4c78      	ldr	r4, [pc, #480]	; (11d58 <_vfiprintf_r+0xf80>)
   11b76:	9207      	str	r2, [sp, #28]
   11b78:	bf28      	it	cs
   11b7a:	2306      	movcs	r3, #6
   11b7c:	9304      	str	r3, [sp, #16]
   11b7e:	9302      	str	r3, [sp, #8]
   11b80:	f7ff bb0d 	b.w	1119e <_vfiprintf_r+0x3c6>
   11b84:	9b02      	ldr	r3, [sp, #8]
   11b86:	9907      	ldr	r1, [sp, #28]
   11b88:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   11b8c:	bf14      	ite	ne
   11b8e:	f851 3b04 	ldrne.w	r3, [r1], #4
   11b92:	f851 3b04 	ldreq.w	r3, [r1], #4
   11b96:	9107      	str	r1, [sp, #28]
   11b98:	bf1c      	itt	ne
   11b9a:	4602      	movne	r2, r0
   11b9c:	b2db      	uxtbne	r3, r3
   11b9e:	2101      	movs	r1, #1
   11ba0:	f7ff ba84 	b.w	110ac <_vfiprintf_r+0x2d4>
   11ba4:	ab16      	add	r3, sp, #88	; 0x58
   11ba6:	9300      	str	r3, [sp, #0]
   11ba8:	2300      	movs	r3, #0
   11baa:	4619      	mov	r1, r3
   11bac:	aa13      	add	r2, sp, #76	; 0x4c
   11bae:	4658      	mov	r0, fp
   11bb0:	f7ff f834 	bl	10c1c <_wcsrtombs_r>
   11bb4:	4603      	mov	r3, r0
   11bb6:	3301      	adds	r3, #1
   11bb8:	9004      	str	r0, [sp, #16]
   11bba:	f000 80ae 	beq.w	11d1a <_vfiprintf_r+0xf42>
   11bbe:	9413      	str	r4, [sp, #76]	; 0x4c
   11bc0:	9b04      	ldr	r3, [sp, #16]
   11bc2:	b37b      	cbz	r3, 11c24 <_vfiprintf_r+0xe4c>
   11bc4:	2b63      	cmp	r3, #99	; 0x63
   11bc6:	dc62      	bgt.n	11c8e <_vfiprintf_r+0xeb6>
   11bc8:	2300      	movs	r3, #0
   11bca:	9308      	str	r3, [sp, #32]
   11bcc:	ac2b      	add	r4, sp, #172	; 0xac
   11bce:	2208      	movs	r2, #8
   11bd0:	2100      	movs	r1, #0
   11bd2:	a816      	add	r0, sp, #88	; 0x58
   11bd4:	f7fb f8fc 	bl	cdd0 <memset>
   11bd8:	9d04      	ldr	r5, [sp, #16]
   11bda:	ab16      	add	r3, sp, #88	; 0x58
   11bdc:	9300      	str	r3, [sp, #0]
   11bde:	aa13      	add	r2, sp, #76	; 0x4c
   11be0:	462b      	mov	r3, r5
   11be2:	4621      	mov	r1, r4
   11be4:	4658      	mov	r0, fp
   11be6:	f7ff f819 	bl	10c1c <_wcsrtombs_r>
   11bea:	4285      	cmp	r5, r0
   11bec:	f040 80ab 	bne.w	11d46 <_vfiprintf_r+0xf6e>
   11bf0:	9b02      	ldr	r3, [sp, #8]
   11bf2:	9a04      	ldr	r2, [sp, #16]
   11bf4:	9307      	str	r3, [sp, #28]
   11bf6:	2300      	movs	r3, #0
   11bf8:	54a3      	strb	r3, [r4, r2]
   11bfa:	461f      	mov	r7, r3
   11bfc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   11c00:	9302      	str	r3, [sp, #8]
   11c02:	f7ff ba12 	b.w	1102a <_vfiprintf_r+0x252>
   11c06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11c08:	990d      	ldr	r1, [sp, #52]	; 0x34
   11c0a:	1ae4      	subs	r4, r4, r3
   11c0c:	461a      	mov	r2, r3
   11c0e:	4620      	mov	r0, r4
   11c10:	f7fb f930 	bl	ce74 <strncpy>
   11c14:	f898 3001 	ldrb.w	r3, [r8, #1]
   11c18:	b10b      	cbz	r3, 11c1e <_vfiprintf_r+0xe46>
   11c1a:	f108 0801 	add.w	r8, r8, #1
   11c1e:	f04f 0c00 	mov.w	ip, #0
   11c22:	e74c      	b.n	11abe <_vfiprintf_r+0xce6>
   11c24:	9b02      	ldr	r3, [sp, #8]
   11c26:	9307      	str	r3, [sp, #28]
   11c28:	9b04      	ldr	r3, [sp, #16]
   11c2a:	9302      	str	r3, [sp, #8]
   11c2c:	461f      	mov	r7, r3
   11c2e:	9308      	str	r3, [sp, #32]
   11c30:	f7ff b9fb 	b.w	1102a <_vfiprintf_r+0x252>
   11c34:	2101      	movs	r1, #1
   11c36:	4618      	mov	r0, r3
   11c38:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11c3c:	f7ff bafc 	b.w	11238 <_vfiprintf_r+0x460>
   11c40:	f850 3b04 	ldr.w	r3, [r0], #4
   11c44:	9007      	str	r0, [sp, #28]
   11c46:	4622      	mov	r2, r4
   11c48:	b2db      	uxtb	r3, r3
   11c4a:	e6bc      	b.n	119c6 <_vfiprintf_r+0xbee>
   11c4c:	f912 3b04 	ldrsb.w	r3, [r2], #4
   11c50:	9207      	str	r2, [sp, #28]
   11c52:	17da      	asrs	r2, r3, #31
   11c54:	4611      	mov	r1, r2
   11c56:	f7ff b9c7 	b.w	10fe8 <_vfiprintf_r+0x210>
   11c5a:	f851 3b04 	ldr.w	r3, [r1], #4
   11c5e:	9107      	str	r1, [sp, #28]
   11c60:	4602      	mov	r2, r0
   11c62:	b2db      	uxtb	r3, r3
   11c64:	f7ff ba1e 	b.w	110a4 <_vfiprintf_r+0x2cc>
   11c68:	2301      	movs	r3, #1
   11c6a:	931c      	str	r3, [sp, #112]	; 0x70
   11c6c:	2101      	movs	r1, #1
   11c6e:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   11c72:	931b      	str	r3, [sp, #108]	; 0x6c
   11c74:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11c78:	460b      	mov	r3, r1
   11c7a:	f7ff bab7 	b.w	111ec <_vfiprintf_r+0x414>
   11c7e:	9b07      	ldr	r3, [sp, #28]
   11c80:	9905      	ldr	r1, [sp, #20]
   11c82:	f853 2b04 	ldr.w	r2, [r3], #4
   11c86:	9307      	str	r3, [sp, #28]
   11c88:	8011      	strh	r1, [r2, #0]
   11c8a:	f7ff b8e9 	b.w	10e60 <_vfiprintf_r+0x88>
   11c8e:	1c59      	adds	r1, r3, #1
   11c90:	4658      	mov	r0, fp
   11c92:	f7fa fa2f 	bl	c0f4 <_malloc_r>
   11c96:	4604      	mov	r4, r0
   11c98:	2800      	cmp	r0, #0
   11c9a:	d03e      	beq.n	11d1a <_vfiprintf_r+0xf42>
   11c9c:	9008      	str	r0, [sp, #32]
   11c9e:	e796      	b.n	11bce <_vfiprintf_r+0xdf6>
   11ca0:	6d88      	ldr	r0, [r1, #88]	; 0x58
   11ca2:	f7fb f9b5 	bl	d010 <__retarget_lock_release_recursive>
   11ca6:	f7ff b9e3 	b.w	11070 <_vfiprintf_r+0x298>
   11caa:	9b02      	ldr	r3, [sp, #8]
   11cac:	9704      	str	r7, [sp, #16]
   11cae:	9702      	str	r7, [sp, #8]
   11cb0:	9307      	str	r3, [sp, #28]
   11cb2:	9f08      	ldr	r7, [sp, #32]
   11cb4:	f7ff b9b9 	b.w	1102a <_vfiprintf_r+0x252>
   11cb8:	9819      	ldr	r0, [sp, #100]	; 0x64
   11cba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   11cbc:	3001      	adds	r0, #1
   11cbe:	e557      	b.n	11770 <_vfiprintf_r+0x998>
   11cc0:	9b02      	ldr	r3, [sp, #8]
   11cc2:	9307      	str	r3, [sp, #28]
   11cc4:	4620      	mov	r0, r4
   11cc6:	f7fb f9bb 	bl	d040 <strlen>
   11cca:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   11cce:	462f      	mov	r7, r5
   11cd0:	9004      	str	r0, [sp, #16]
   11cd2:	9302      	str	r3, [sp, #8]
   11cd4:	9508      	str	r5, [sp, #32]
   11cd6:	f7ff b9a8 	b.w	1102a <_vfiprintf_r+0x252>
   11cda:	9903      	ldr	r1, [sp, #12]
   11cdc:	aa18      	add	r2, sp, #96	; 0x60
   11cde:	4658      	mov	r0, fp
   11ce0:	f7ff f83e 	bl	10d60 <__sprint_r.part.0>
   11ce4:	2800      	cmp	r0, #0
   11ce6:	f43f aa2e 	beq.w	11146 <_vfiprintf_r+0x36e>
   11cea:	f7ff ba3c 	b.w	11166 <_vfiprintf_r+0x38e>
   11cee:	9819      	ldr	r0, [sp, #100]	; 0x64
   11cf0:	3001      	adds	r0, #1
   11cf2:	e585      	b.n	11800 <_vfiprintf_r+0xa28>
   11cf4:	468c      	mov	ip, r1
   11cf6:	e462      	b.n	115be <_vfiprintf_r+0x7e6>
   11cf8:	9b03      	ldr	r3, [sp, #12]
   11cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   11cfc:	07d9      	lsls	r1, r3, #31
   11cfe:	d407      	bmi.n	11d10 <_vfiprintf_r+0xf38>
   11d00:	9b03      	ldr	r3, [sp, #12]
   11d02:	899b      	ldrh	r3, [r3, #12]
   11d04:	059a      	lsls	r2, r3, #22
   11d06:	d403      	bmi.n	11d10 <_vfiprintf_r+0xf38>
   11d08:	9b03      	ldr	r3, [sp, #12]
   11d0a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   11d0c:	f7fb f980 	bl	d010 <__retarget_lock_release_recursive>
   11d10:	f04f 33ff 	mov.w	r3, #4294967295
   11d14:	9305      	str	r3, [sp, #20]
   11d16:	f7ff ba33 	b.w	11180 <_vfiprintf_r+0x3a8>
   11d1a:	9a03      	ldr	r2, [sp, #12]
   11d1c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   11d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11d24:	8193      	strh	r3, [r2, #12]
   11d26:	f7ff ba21 	b.w	1116c <_vfiprintf_r+0x394>
   11d2a:	9c07      	ldr	r4, [sp, #28]
   11d2c:	9704      	str	r7, [sp, #16]
   11d2e:	e747      	b.n	11bc0 <_vfiprintf_r+0xde8>
   11d30:	9b07      	ldr	r3, [sp, #28]
   11d32:	f898 1001 	ldrb.w	r1, [r8, #1]
   11d36:	f853 7b04 	ldr.w	r7, [r3], #4
   11d3a:	9307      	str	r3, [sp, #28]
   11d3c:	4690      	mov	r8, r2
   11d3e:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   11d42:	f7ff b8b5 	b.w	10eb0 <_vfiprintf_r+0xd8>
   11d46:	9a03      	ldr	r2, [sp, #12]
   11d48:	8993      	ldrh	r3, [r2, #12]
   11d4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11d4e:	8193      	strh	r3, [r2, #12]
   11d50:	f7ff ba03 	b.w	1115a <_vfiprintf_r+0x382>
   11d54:	cccccccd 	.word	0xcccccccd
   11d58:	000144d4 	.word	0x000144d4

00011d5c <__sbprintf>:
   11d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   11d5e:	461f      	mov	r7, r3
   11d60:	898b      	ldrh	r3, [r1, #12]
   11d62:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   11d66:	f023 0302 	bic.w	r3, r3, #2
   11d6a:	f8ad 300c 	strh.w	r3, [sp, #12]
   11d6e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   11d70:	9319      	str	r3, [sp, #100]	; 0x64
   11d72:	89cb      	ldrh	r3, [r1, #14]
   11d74:	f8ad 300e 	strh.w	r3, [sp, #14]
   11d78:	69cb      	ldr	r3, [r1, #28]
   11d7a:	9307      	str	r3, [sp, #28]
   11d7c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   11d7e:	9309      	str	r3, [sp, #36]	; 0x24
   11d80:	ab1a      	add	r3, sp, #104	; 0x68
   11d82:	9300      	str	r3, [sp, #0]
   11d84:	9304      	str	r3, [sp, #16]
   11d86:	f44f 6380 	mov.w	r3, #1024	; 0x400
   11d8a:	4615      	mov	r5, r2
   11d8c:	4606      	mov	r6, r0
   11d8e:	9302      	str	r3, [sp, #8]
   11d90:	9305      	str	r3, [sp, #20]
   11d92:	a816      	add	r0, sp, #88	; 0x58
   11d94:	2300      	movs	r3, #0
   11d96:	460c      	mov	r4, r1
   11d98:	9306      	str	r3, [sp, #24]
   11d9a:	f7fb f933 	bl	d004 <__retarget_lock_init_recursive>
   11d9e:	462a      	mov	r2, r5
   11da0:	463b      	mov	r3, r7
   11da2:	4669      	mov	r1, sp
   11da4:	4630      	mov	r0, r6
   11da6:	f7ff f817 	bl	10dd8 <_vfiprintf_r>
   11daa:	1e05      	subs	r5, r0, #0
   11dac:	db07      	blt.n	11dbe <__sbprintf+0x62>
   11dae:	4669      	mov	r1, sp
   11db0:	4630      	mov	r0, r6
   11db2:	f7fd fdb1 	bl	f918 <_fflush_r>
   11db6:	2800      	cmp	r0, #0
   11db8:	bf18      	it	ne
   11dba:	f04f 35ff 	movne.w	r5, #4294967295
   11dbe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   11dc2:	065b      	lsls	r3, r3, #25
   11dc4:	d503      	bpl.n	11dce <__sbprintf+0x72>
   11dc6:	89a3      	ldrh	r3, [r4, #12]
   11dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11dcc:	81a3      	strh	r3, [r4, #12]
   11dce:	9816      	ldr	r0, [sp, #88]	; 0x58
   11dd0:	f7fb f91a 	bl	d008 <__retarget_lock_close_recursive>
   11dd4:	4628      	mov	r0, r5
   11dd6:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   11dda:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011ddc <__sfvwrite_r>:
   11ddc:	6893      	ldr	r3, [r2, #8]
   11dde:	2b00      	cmp	r3, #0
   11de0:	f000 8081 	beq.w	11ee6 <__sfvwrite_r+0x10a>
   11de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11de8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   11dec:	460c      	mov	r4, r1
   11dee:	0719      	lsls	r1, r3, #28
   11df0:	4680      	mov	r8, r0
   11df2:	b083      	sub	sp, #12
   11df4:	4617      	mov	r7, r2
   11df6:	b298      	uxth	r0, r3
   11df8:	d523      	bpl.n	11e42 <__sfvwrite_r+0x66>
   11dfa:	6923      	ldr	r3, [r4, #16]
   11dfc:	b30b      	cbz	r3, 11e42 <__sfvwrite_r+0x66>
   11dfe:	f010 0302 	ands.w	r3, r0, #2
   11e02:	683d      	ldr	r5, [r7, #0]
   11e04:	d02b      	beq.n	11e5e <__sfvwrite_r+0x82>
   11e06:	f04f 0a00 	mov.w	sl, #0
   11e0a:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 120c0 <__sfvwrite_r+0x2e4>
   11e0e:	4656      	mov	r6, sl
   11e10:	455e      	cmp	r6, fp
   11e12:	4633      	mov	r3, r6
   11e14:	4652      	mov	r2, sl
   11e16:	bf28      	it	cs
   11e18:	465b      	movcs	r3, fp
   11e1a:	4640      	mov	r0, r8
   11e1c:	2e00      	cmp	r6, #0
   11e1e:	d04f      	beq.n	11ec0 <__sfvwrite_r+0xe4>
   11e20:	69e1      	ldr	r1, [r4, #28]
   11e22:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   11e26:	47e0      	blx	ip
   11e28:	2800      	cmp	r0, #0
   11e2a:	dd52      	ble.n	11ed2 <__sfvwrite_r+0xf6>
   11e2c:	68bb      	ldr	r3, [r7, #8]
   11e2e:	1a1b      	subs	r3, r3, r0
   11e30:	4482      	add	sl, r0
   11e32:	1a36      	subs	r6, r6, r0
   11e34:	60bb      	str	r3, [r7, #8]
   11e36:	2b00      	cmp	r3, #0
   11e38:	d1ea      	bne.n	11e10 <__sfvwrite_r+0x34>
   11e3a:	2000      	movs	r0, #0
   11e3c:	b003      	add	sp, #12
   11e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e42:	4621      	mov	r1, r4
   11e44:	4640      	mov	r0, r8
   11e46:	f000 f93d 	bl	120c4 <__swsetup_r>
   11e4a:	2800      	cmp	r0, #0
   11e4c:	f040 8134 	bne.w	120b8 <__sfvwrite_r+0x2dc>
   11e50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11e54:	683d      	ldr	r5, [r7, #0]
   11e56:	b298      	uxth	r0, r3
   11e58:	f010 0302 	ands.w	r3, r0, #2
   11e5c:	d1d3      	bne.n	11e06 <__sfvwrite_r+0x2a>
   11e5e:	f010 0901 	ands.w	r9, r0, #1
   11e62:	d142      	bne.n	11eea <__sfvwrite_r+0x10e>
   11e64:	464e      	mov	r6, r9
   11e66:	b33e      	cbz	r6, 11eb8 <__sfvwrite_r+0xdc>
   11e68:	0582      	lsls	r2, r0, #22
   11e6a:	f8d4 b008 	ldr.w	fp, [r4, #8]
   11e6e:	f140 8081 	bpl.w	11f74 <__sfvwrite_r+0x198>
   11e72:	45b3      	cmp	fp, r6
   11e74:	465a      	mov	r2, fp
   11e76:	f200 80b1 	bhi.w	11fdc <__sfvwrite_r+0x200>
   11e7a:	f410 6f90 	tst.w	r0, #1152	; 0x480
   11e7e:	f040 80be 	bne.w	11ffe <__sfvwrite_r+0x222>
   11e82:	6820      	ldr	r0, [r4, #0]
   11e84:	9201      	str	r2, [sp, #4]
   11e86:	4649      	mov	r1, r9
   11e88:	f7fa ff26 	bl	ccd8 <memmove>
   11e8c:	68a3      	ldr	r3, [r4, #8]
   11e8e:	9a01      	ldr	r2, [sp, #4]
   11e90:	eba3 010b 	sub.w	r1, r3, fp
   11e94:	6823      	ldr	r3, [r4, #0]
   11e96:	60a1      	str	r1, [r4, #8]
   11e98:	4413      	add	r3, r2
   11e9a:	46b2      	mov	sl, r6
   11e9c:	6023      	str	r3, [r4, #0]
   11e9e:	2600      	movs	r6, #0
   11ea0:	68bb      	ldr	r3, [r7, #8]
   11ea2:	eba3 030a 	sub.w	r3, r3, sl
   11ea6:	44d1      	add	r9, sl
   11ea8:	60bb      	str	r3, [r7, #8]
   11eaa:	2b00      	cmp	r3, #0
   11eac:	d0c5      	beq.n	11e3a <__sfvwrite_r+0x5e>
   11eae:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   11eb2:	b280      	uxth	r0, r0
   11eb4:	2e00      	cmp	r6, #0
   11eb6:	d1d7      	bne.n	11e68 <__sfvwrite_r+0x8c>
   11eb8:	e9d5 9600 	ldrd	r9, r6, [r5]
   11ebc:	3508      	adds	r5, #8
   11ebe:	e7d2      	b.n	11e66 <__sfvwrite_r+0x8a>
   11ec0:	e9d5 a600 	ldrd	sl, r6, [r5]
   11ec4:	3508      	adds	r5, #8
   11ec6:	e7a3      	b.n	11e10 <__sfvwrite_r+0x34>
   11ec8:	4621      	mov	r1, r4
   11eca:	4640      	mov	r0, r8
   11ecc:	f7fd fd24 	bl	f918 <_fflush_r>
   11ed0:	b380      	cbz	r0, 11f34 <__sfvwrite_r+0x158>
   11ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   11ed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11eda:	f04f 30ff 	mov.w	r0, #4294967295
   11ede:	81a3      	strh	r3, [r4, #12]
   11ee0:	b003      	add	sp, #12
   11ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ee6:	2000      	movs	r0, #0
   11ee8:	4770      	bx	lr
   11eea:	461e      	mov	r6, r3
   11eec:	46ba      	mov	sl, r7
   11eee:	4699      	mov	r9, r3
   11ef0:	4618      	mov	r0, r3
   11ef2:	461f      	mov	r7, r3
   11ef4:	b366      	cbz	r6, 11f50 <__sfvwrite_r+0x174>
   11ef6:	b388      	cbz	r0, 11f5c <__sfvwrite_r+0x180>
   11ef8:	464a      	mov	r2, r9
   11efa:	e9d4 c304 	ldrd	ip, r3, [r4, #16]
   11efe:	6820      	ldr	r0, [r4, #0]
   11f00:	68a1      	ldr	r1, [r4, #8]
   11f02:	42b2      	cmp	r2, r6
   11f04:	bf28      	it	cs
   11f06:	4632      	movcs	r2, r6
   11f08:	4560      	cmp	r0, ip
   11f0a:	d904      	bls.n	11f16 <__sfvwrite_r+0x13a>
   11f0c:	eb01 0b03 	add.w	fp, r1, r3
   11f10:	455a      	cmp	r2, fp
   11f12:	f300 80a7 	bgt.w	12064 <__sfvwrite_r+0x288>
   11f16:	4293      	cmp	r3, r2
   11f18:	dc64      	bgt.n	11fe4 <__sfvwrite_r+0x208>
   11f1a:	69e1      	ldr	r1, [r4, #28]
   11f1c:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   11f20:	463a      	mov	r2, r7
   11f22:	4640      	mov	r0, r8
   11f24:	47e0      	blx	ip
   11f26:	f1b0 0b00 	subs.w	fp, r0, #0
   11f2a:	ddd2      	ble.n	11ed2 <__sfvwrite_r+0xf6>
   11f2c:	ebb9 090b 	subs.w	r9, r9, fp
   11f30:	d0ca      	beq.n	11ec8 <__sfvwrite_r+0xec>
   11f32:	2001      	movs	r0, #1
   11f34:	f8da 3008 	ldr.w	r3, [sl, #8]
   11f38:	eba3 030b 	sub.w	r3, r3, fp
   11f3c:	445f      	add	r7, fp
   11f3e:	eba6 060b 	sub.w	r6, r6, fp
   11f42:	f8ca 3008 	str.w	r3, [sl, #8]
   11f46:	2b00      	cmp	r3, #0
   11f48:	f43f af77 	beq.w	11e3a <__sfvwrite_r+0x5e>
   11f4c:	2e00      	cmp	r6, #0
   11f4e:	d1d2      	bne.n	11ef6 <__sfvwrite_r+0x11a>
   11f50:	686e      	ldr	r6, [r5, #4]
   11f52:	462b      	mov	r3, r5
   11f54:	3508      	adds	r5, #8
   11f56:	2e00      	cmp	r6, #0
   11f58:	d0fa      	beq.n	11f50 <__sfvwrite_r+0x174>
   11f5a:	681f      	ldr	r7, [r3, #0]
   11f5c:	4632      	mov	r2, r6
   11f5e:	210a      	movs	r1, #10
   11f60:	4638      	mov	r0, r7
   11f62:	f7fd fd1d 	bl	f9a0 <memchr>
   11f66:	2800      	cmp	r0, #0
   11f68:	f000 809d 	beq.w	120a6 <__sfvwrite_r+0x2ca>
   11f6c:	3001      	adds	r0, #1
   11f6e:	eba0 0907 	sub.w	r9, r0, r7
   11f72:	e7c1      	b.n	11ef8 <__sfvwrite_r+0x11c>
   11f74:	6820      	ldr	r0, [r4, #0]
   11f76:	6923      	ldr	r3, [r4, #16]
   11f78:	4298      	cmp	r0, r3
   11f7a:	d817      	bhi.n	11fac <__sfvwrite_r+0x1d0>
   11f7c:	6962      	ldr	r2, [r4, #20]
   11f7e:	42b2      	cmp	r2, r6
   11f80:	d814      	bhi.n	11fac <__sfvwrite_r+0x1d0>
   11f82:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   11f86:	42b3      	cmp	r3, r6
   11f88:	bf28      	it	cs
   11f8a:	4633      	movcs	r3, r6
   11f8c:	69e1      	ldr	r1, [r4, #28]
   11f8e:	fb93 f3f2 	sdiv	r3, r3, r2
   11f92:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   11f96:	fb02 f303 	mul.w	r3, r2, r3
   11f9a:	4640      	mov	r0, r8
   11f9c:	464a      	mov	r2, r9
   11f9e:	47e0      	blx	ip
   11fa0:	f1b0 0a00 	subs.w	sl, r0, #0
   11fa4:	dd95      	ble.n	11ed2 <__sfvwrite_r+0xf6>
   11fa6:	eba6 060a 	sub.w	r6, r6, sl
   11faa:	e779      	b.n	11ea0 <__sfvwrite_r+0xc4>
   11fac:	45b3      	cmp	fp, r6
   11fae:	46da      	mov	sl, fp
   11fb0:	bf28      	it	cs
   11fb2:	46b2      	movcs	sl, r6
   11fb4:	4652      	mov	r2, sl
   11fb6:	4649      	mov	r1, r9
   11fb8:	f7fa fe8e 	bl	ccd8 <memmove>
   11fbc:	68a3      	ldr	r3, [r4, #8]
   11fbe:	6822      	ldr	r2, [r4, #0]
   11fc0:	eba3 030a 	sub.w	r3, r3, sl
   11fc4:	4452      	add	r2, sl
   11fc6:	60a3      	str	r3, [r4, #8]
   11fc8:	6022      	str	r2, [r4, #0]
   11fca:	2b00      	cmp	r3, #0
   11fcc:	d1eb      	bne.n	11fa6 <__sfvwrite_r+0x1ca>
   11fce:	4621      	mov	r1, r4
   11fd0:	4640      	mov	r0, r8
   11fd2:	f7fd fca1 	bl	f918 <_fflush_r>
   11fd6:	2800      	cmp	r0, #0
   11fd8:	d0e5      	beq.n	11fa6 <__sfvwrite_r+0x1ca>
   11fda:	e77a      	b.n	11ed2 <__sfvwrite_r+0xf6>
   11fdc:	6820      	ldr	r0, [r4, #0]
   11fde:	46b3      	mov	fp, r6
   11fe0:	4632      	mov	r2, r6
   11fe2:	e74f      	b.n	11e84 <__sfvwrite_r+0xa8>
   11fe4:	4639      	mov	r1, r7
   11fe6:	9201      	str	r2, [sp, #4]
   11fe8:	f7fa fe76 	bl	ccd8 <memmove>
   11fec:	9a01      	ldr	r2, [sp, #4]
   11fee:	68a3      	ldr	r3, [r4, #8]
   11ff0:	1a9b      	subs	r3, r3, r2
   11ff2:	60a3      	str	r3, [r4, #8]
   11ff4:	6823      	ldr	r3, [r4, #0]
   11ff6:	4413      	add	r3, r2
   11ff8:	6023      	str	r3, [r4, #0]
   11ffa:	4693      	mov	fp, r2
   11ffc:	e796      	b.n	11f2c <__sfvwrite_r+0x150>
   11ffe:	6823      	ldr	r3, [r4, #0]
   12000:	6921      	ldr	r1, [r4, #16]
   12002:	eba3 0b01 	sub.w	fp, r3, r1
   12006:	6963      	ldr	r3, [r4, #20]
   12008:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   1200c:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   12010:	f10b 0301 	add.w	r3, fp, #1
   12014:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   12018:	4433      	add	r3, r6
   1201a:	4553      	cmp	r3, sl
   1201c:	4652      	mov	r2, sl
   1201e:	bf84      	itt	hi
   12020:	469a      	movhi	sl, r3
   12022:	4652      	movhi	r2, sl
   12024:	0543      	lsls	r3, r0, #21
   12026:	d52c      	bpl.n	12082 <__sfvwrite_r+0x2a6>
   12028:	4611      	mov	r1, r2
   1202a:	4640      	mov	r0, r8
   1202c:	f7fa f862 	bl	c0f4 <_malloc_r>
   12030:	2800      	cmp	r0, #0
   12032:	d03b      	beq.n	120ac <__sfvwrite_r+0x2d0>
   12034:	465a      	mov	r2, fp
   12036:	6921      	ldr	r1, [r4, #16]
   12038:	9001      	str	r0, [sp, #4]
   1203a:	f7f6 fd79 	bl	8b30 <memcpy>
   1203e:	89a2      	ldrh	r2, [r4, #12]
   12040:	9b01      	ldr	r3, [sp, #4]
   12042:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   12046:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1204a:	81a2      	strh	r2, [r4, #12]
   1204c:	eb03 000b 	add.w	r0, r3, fp
   12050:	6123      	str	r3, [r4, #16]
   12052:	ebaa 030b 	sub.w	r3, sl, fp
   12056:	f8c4 a014 	str.w	sl, [r4, #20]
   1205a:	60a3      	str	r3, [r4, #8]
   1205c:	6020      	str	r0, [r4, #0]
   1205e:	46b3      	mov	fp, r6
   12060:	4632      	mov	r2, r6
   12062:	e70f      	b.n	11e84 <__sfvwrite_r+0xa8>
   12064:	4639      	mov	r1, r7
   12066:	465a      	mov	r2, fp
   12068:	f7fa fe36 	bl	ccd8 <memmove>
   1206c:	6823      	ldr	r3, [r4, #0]
   1206e:	445b      	add	r3, fp
   12070:	6023      	str	r3, [r4, #0]
   12072:	4621      	mov	r1, r4
   12074:	4640      	mov	r0, r8
   12076:	f7fd fc4f 	bl	f918 <_fflush_r>
   1207a:	2800      	cmp	r0, #0
   1207c:	f43f af56 	beq.w	11f2c <__sfvwrite_r+0x150>
   12080:	e727      	b.n	11ed2 <__sfvwrite_r+0xf6>
   12082:	4640      	mov	r0, r8
   12084:	f7fa faf2 	bl	c66c <_realloc_r>
   12088:	4603      	mov	r3, r0
   1208a:	2800      	cmp	r0, #0
   1208c:	d1de      	bne.n	1204c <__sfvwrite_r+0x270>
   1208e:	6921      	ldr	r1, [r4, #16]
   12090:	4640      	mov	r0, r8
   12092:	f7fb f8a3 	bl	d1dc <_free_r>
   12096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1209a:	220c      	movs	r2, #12
   1209c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   120a0:	f8c8 2000 	str.w	r2, [r8]
   120a4:	e717      	b.n	11ed6 <__sfvwrite_r+0xfa>
   120a6:	1c72      	adds	r2, r6, #1
   120a8:	4691      	mov	r9, r2
   120aa:	e726      	b.n	11efa <__sfvwrite_r+0x11e>
   120ac:	220c      	movs	r2, #12
   120ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   120b2:	f8c8 2000 	str.w	r2, [r8]
   120b6:	e70e      	b.n	11ed6 <__sfvwrite_r+0xfa>
   120b8:	f04f 30ff 	mov.w	r0, #4294967295
   120bc:	e6be      	b.n	11e3c <__sfvwrite_r+0x60>
   120be:	bf00      	nop
   120c0:	7ffffc00 	.word	0x7ffffc00

000120c4 <__swsetup_r>:
   120c4:	b538      	push	{r3, r4, r5, lr}
   120c6:	4b31      	ldr	r3, [pc, #196]	; (1218c <__swsetup_r+0xc8>)
   120c8:	681b      	ldr	r3, [r3, #0]
   120ca:	4605      	mov	r5, r0
   120cc:	460c      	mov	r4, r1
   120ce:	b113      	cbz	r3, 120d6 <__swsetup_r+0x12>
   120d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   120d2:	2a00      	cmp	r2, #0
   120d4:	d04e      	beq.n	12174 <__swsetup_r+0xb0>
   120d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   120da:	0718      	lsls	r0, r3, #28
   120dc:	b29a      	uxth	r2, r3
   120de:	d51c      	bpl.n	1211a <__swsetup_r+0x56>
   120e0:	6921      	ldr	r1, [r4, #16]
   120e2:	b329      	cbz	r1, 12130 <__swsetup_r+0x6c>
   120e4:	f012 0001 	ands.w	r0, r2, #1
   120e8:	d007      	beq.n	120fa <__swsetup_r+0x36>
   120ea:	2000      	movs	r0, #0
   120ec:	60a0      	str	r0, [r4, #8]
   120ee:	6960      	ldr	r0, [r4, #20]
   120f0:	4240      	negs	r0, r0
   120f2:	61a0      	str	r0, [r4, #24]
   120f4:	b139      	cbz	r1, 12106 <__swsetup_r+0x42>
   120f6:	2000      	movs	r0, #0
   120f8:	bd38      	pop	{r3, r4, r5, pc}
   120fa:	0795      	lsls	r5, r2, #30
   120fc:	bf58      	it	pl
   120fe:	6960      	ldrpl	r0, [r4, #20]
   12100:	60a0      	str	r0, [r4, #8]
   12102:	2900      	cmp	r1, #0
   12104:	d1f7      	bne.n	120f6 <__swsetup_r+0x32>
   12106:	0612      	lsls	r2, r2, #24
   12108:	bf58      	it	pl
   1210a:	4608      	movpl	r0, r1
   1210c:	d5f4      	bpl.n	120f8 <__swsetup_r+0x34>
   1210e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12112:	81a3      	strh	r3, [r4, #12]
   12114:	f04f 30ff 	mov.w	r0, #4294967295
   12118:	bd38      	pop	{r3, r4, r5, pc}
   1211a:	06d1      	lsls	r1, r2, #27
   1211c:	d52e      	bpl.n	1217c <__swsetup_r+0xb8>
   1211e:	0752      	lsls	r2, r2, #29
   12120:	d414      	bmi.n	1214c <__swsetup_r+0x88>
   12122:	6921      	ldr	r1, [r4, #16]
   12124:	f043 0308 	orr.w	r3, r3, #8
   12128:	81a3      	strh	r3, [r4, #12]
   1212a:	b29a      	uxth	r2, r3
   1212c:	2900      	cmp	r1, #0
   1212e:	d1d9      	bne.n	120e4 <__swsetup_r+0x20>
   12130:	f402 7020 	and.w	r0, r2, #640	; 0x280
   12134:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   12138:	d0d4      	beq.n	120e4 <__swsetup_r+0x20>
   1213a:	4621      	mov	r1, r4
   1213c:	4628      	mov	r0, r5
   1213e:	f000 f93f 	bl	123c0 <__smakebuf_r>
   12142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   12146:	6921      	ldr	r1, [r4, #16]
   12148:	b29a      	uxth	r2, r3
   1214a:	e7cb      	b.n	120e4 <__swsetup_r+0x20>
   1214c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1214e:	b151      	cbz	r1, 12166 <__swsetup_r+0xa2>
   12150:	f104 0240 	add.w	r2, r4, #64	; 0x40
   12154:	4291      	cmp	r1, r2
   12156:	d004      	beq.n	12162 <__swsetup_r+0x9e>
   12158:	4628      	mov	r0, r5
   1215a:	f7fb f83f 	bl	d1dc <_free_r>
   1215e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   12162:	2200      	movs	r2, #0
   12164:	6322      	str	r2, [r4, #48]	; 0x30
   12166:	6921      	ldr	r1, [r4, #16]
   12168:	2200      	movs	r2, #0
   1216a:	e9c4 1200 	strd	r1, r2, [r4]
   1216e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   12172:	e7d7      	b.n	12124 <__swsetup_r+0x60>
   12174:	4618      	mov	r0, r3
   12176:	f7fa fcfb 	bl	cb70 <__sinit>
   1217a:	e7ac      	b.n	120d6 <__swsetup_r+0x12>
   1217c:	2209      	movs	r2, #9
   1217e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12182:	602a      	str	r2, [r5, #0]
   12184:	f04f 30ff 	mov.w	r0, #4294967295
   12188:	81a3      	strh	r3, [r4, #12]
   1218a:	bd38      	pop	{r3, r4, r5, pc}
   1218c:	1fff8f70 	.word	0x1fff8f70

00012190 <__fputwc>:
   12190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12194:	b083      	sub	sp, #12
   12196:	4607      	mov	r7, r0
   12198:	4688      	mov	r8, r1
   1219a:	4614      	mov	r4, r2
   1219c:	f7fa fe9c 	bl	ced8 <__locale_mb_cur_max>
   121a0:	2801      	cmp	r0, #1
   121a2:	d103      	bne.n	121ac <__fputwc+0x1c>
   121a4:	f108 33ff 	add.w	r3, r8, #4294967295
   121a8:	2bfe      	cmp	r3, #254	; 0xfe
   121aa:	d937      	bls.n	1221c <__fputwc+0x8c>
   121ac:	f10d 0904 	add.w	r9, sp, #4
   121b0:	4642      	mov	r2, r8
   121b2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   121b6:	4649      	mov	r1, r9
   121b8:	4638      	mov	r0, r7
   121ba:	f7fe fd09 	bl	10bd0 <_wcrtomb_r>
   121be:	1c42      	adds	r2, r0, #1
   121c0:	4606      	mov	r6, r0
   121c2:	d033      	beq.n	1222c <__fputwc+0x9c>
   121c4:	b328      	cbz	r0, 12212 <__fputwc+0x82>
   121c6:	f89d c004 	ldrb.w	ip, [sp, #4]
   121ca:	2500      	movs	r5, #0
   121cc:	e009      	b.n	121e2 <__fputwc+0x52>
   121ce:	6823      	ldr	r3, [r4, #0]
   121d0:	1c5a      	adds	r2, r3, #1
   121d2:	6022      	str	r2, [r4, #0]
   121d4:	f883 c000 	strb.w	ip, [r3]
   121d8:	3501      	adds	r5, #1
   121da:	42b5      	cmp	r5, r6
   121dc:	d219      	bcs.n	12212 <__fputwc+0x82>
   121de:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   121e2:	68a3      	ldr	r3, [r4, #8]
   121e4:	3b01      	subs	r3, #1
   121e6:	2b00      	cmp	r3, #0
   121e8:	60a3      	str	r3, [r4, #8]
   121ea:	daf0      	bge.n	121ce <__fputwc+0x3e>
   121ec:	f8d4 e018 	ldr.w	lr, [r4, #24]
   121f0:	4573      	cmp	r3, lr
   121f2:	4661      	mov	r1, ip
   121f4:	4622      	mov	r2, r4
   121f6:	4638      	mov	r0, r7
   121f8:	db02      	blt.n	12200 <__fputwc+0x70>
   121fa:	f1bc 0f0a 	cmp.w	ip, #10
   121fe:	d1e6      	bne.n	121ce <__fputwc+0x3e>
   12200:	f000 f94a 	bl	12498 <__swbuf_r>
   12204:	1c43      	adds	r3, r0, #1
   12206:	d1e7      	bne.n	121d8 <__fputwc+0x48>
   12208:	4606      	mov	r6, r0
   1220a:	4630      	mov	r0, r6
   1220c:	b003      	add	sp, #12
   1220e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12212:	4646      	mov	r6, r8
   12214:	4630      	mov	r0, r6
   12216:	b003      	add	sp, #12
   12218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1221c:	fa5f fc88 	uxtb.w	ip, r8
   12220:	f88d c004 	strb.w	ip, [sp, #4]
   12224:	4606      	mov	r6, r0
   12226:	f10d 0904 	add.w	r9, sp, #4
   1222a:	e7ce      	b.n	121ca <__fputwc+0x3a>
   1222c:	89a3      	ldrh	r3, [r4, #12]
   1222e:	4630      	mov	r0, r6
   12230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12234:	81a3      	strh	r3, [r4, #12]
   12236:	b003      	add	sp, #12
   12238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001223c <_fputwc_r>:
   1223c:	b530      	push	{r4, r5, lr}
   1223e:	6e53      	ldr	r3, [r2, #100]	; 0x64
   12240:	f013 0f01 	tst.w	r3, #1
   12244:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   12248:	4614      	mov	r4, r2
   1224a:	b083      	sub	sp, #12
   1224c:	4605      	mov	r5, r0
   1224e:	b29a      	uxth	r2, r3
   12250:	d101      	bne.n	12256 <_fputwc_r+0x1a>
   12252:	0598      	lsls	r0, r3, #22
   12254:	d51c      	bpl.n	12290 <_fputwc_r+0x54>
   12256:	0490      	lsls	r0, r2, #18
   12258:	d406      	bmi.n	12268 <_fputwc_r+0x2c>
   1225a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1225c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   12260:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   12264:	81a3      	strh	r3, [r4, #12]
   12266:	6662      	str	r2, [r4, #100]	; 0x64
   12268:	4622      	mov	r2, r4
   1226a:	4628      	mov	r0, r5
   1226c:	f7ff ff90 	bl	12190 <__fputwc>
   12270:	6e63      	ldr	r3, [r4, #100]	; 0x64
   12272:	07da      	lsls	r2, r3, #31
   12274:	4605      	mov	r5, r0
   12276:	d402      	bmi.n	1227e <_fputwc_r+0x42>
   12278:	89a3      	ldrh	r3, [r4, #12]
   1227a:	059b      	lsls	r3, r3, #22
   1227c:	d502      	bpl.n	12284 <_fputwc_r+0x48>
   1227e:	4628      	mov	r0, r5
   12280:	b003      	add	sp, #12
   12282:	bd30      	pop	{r4, r5, pc}
   12284:	6da0      	ldr	r0, [r4, #88]	; 0x58
   12286:	f7fa fec3 	bl	d010 <__retarget_lock_release_recursive>
   1228a:	4628      	mov	r0, r5
   1228c:	b003      	add	sp, #12
   1228e:	bd30      	pop	{r4, r5, pc}
   12290:	6da0      	ldr	r0, [r4, #88]	; 0x58
   12292:	9101      	str	r1, [sp, #4]
   12294:	f7fa feba 	bl	d00c <__retarget_lock_acquire_recursive>
   12298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1229c:	9901      	ldr	r1, [sp, #4]
   1229e:	b29a      	uxth	r2, r3
   122a0:	e7d9      	b.n	12256 <_fputwc_r+0x1a>
   122a2:	bf00      	nop

000122a4 <_wcsnrtombs_l>:
   122a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122a8:	b089      	sub	sp, #36	; 0x24
   122aa:	e9dd 8a13 	ldrd	r8, sl, [sp, #76]	; 0x4c
   122ae:	9f12      	ldr	r7, [sp, #72]	; 0x48
   122b0:	9101      	str	r1, [sp, #4]
   122b2:	4681      	mov	r9, r0
   122b4:	9203      	str	r2, [sp, #12]
   122b6:	461e      	mov	r6, r3
   122b8:	f1b8 0f00 	cmp.w	r8, #0
   122bc:	d055      	beq.n	1236a <_wcsnrtombs_l+0xc6>
   122be:	9b01      	ldr	r3, [sp, #4]
   122c0:	2b00      	cmp	r3, #0
   122c2:	d057      	beq.n	12374 <_wcsnrtombs_l+0xd0>
   122c4:	9b03      	ldr	r3, [sp, #12]
   122c6:	681d      	ldr	r5, [r3, #0]
   122c8:	2f00      	cmp	r7, #0
   122ca:	d063      	beq.n	12394 <_wcsnrtombs_l+0xf0>
   122cc:	1e74      	subs	r4, r6, #1
   122ce:	b32e      	cbz	r6, 1231c <_wcsnrtombs_l+0x78>
   122d0:	9b01      	ldr	r3, [sp, #4]
   122d2:	9302      	str	r3, [sp, #8]
   122d4:	3d04      	subs	r5, #4
   122d6:	2600      	movs	r6, #0
   122d8:	e00a      	b.n	122f0 <_wcsnrtombs_l+0x4c>
   122da:	9b01      	ldr	r3, [sp, #4]
   122dc:	bb13      	cbnz	r3, 12324 <_wcsnrtombs_l+0x80>
   122de:	682a      	ldr	r2, [r5, #0]
   122e0:	2a00      	cmp	r2, #0
   122e2:	d035      	beq.n	12350 <_wcsnrtombs_l+0xac>
   122e4:	45bc      	cmp	ip, r7
   122e6:	d257      	bcs.n	12398 <_wcsnrtombs_l+0xf4>
   122e8:	3c01      	subs	r4, #1
   122ea:	1c63      	adds	r3, r4, #1
   122ec:	4666      	mov	r6, ip
   122ee:	d015      	beq.n	1231c <_wcsnrtombs_l+0x78>
   122f0:	f8d8 3000 	ldr.w	r3, [r8]
   122f4:	f855 2f04 	ldr.w	r2, [r5, #4]!
   122f8:	9300      	str	r3, [sp, #0]
   122fa:	f8da c0e0 	ldr.w	ip, [sl, #224]	; 0xe0
   122fe:	f8d8 b004 	ldr.w	fp, [r8, #4]
   12302:	4643      	mov	r3, r8
   12304:	a905      	add	r1, sp, #20
   12306:	4648      	mov	r0, r9
   12308:	47e0      	blx	ip
   1230a:	1c42      	adds	r2, r0, #1
   1230c:	d037      	beq.n	1237e <_wcsnrtombs_l+0xda>
   1230e:	eb00 0c06 	add.w	ip, r0, r6
   12312:	45bc      	cmp	ip, r7
   12314:	d9e1      	bls.n	122da <_wcsnrtombs_l+0x36>
   12316:	9b00      	ldr	r3, [sp, #0]
   12318:	e9c8 3b00 	strd	r3, fp, [r8]
   1231c:	4630      	mov	r0, r6
   1231e:	b009      	add	sp, #36	; 0x24
   12320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12324:	2800      	cmp	r0, #0
   12326:	dd0c      	ble.n	12342 <_wcsnrtombs_l+0x9e>
   12328:	9b02      	ldr	r3, [sp, #8]
   1232a:	4418      	add	r0, r3
   1232c:	1e5a      	subs	r2, r3, #1
   1232e:	a905      	add	r1, sp, #20
   12330:	f100 3eff 	add.w	lr, r0, #4294967295
   12334:	f811 3b01 	ldrb.w	r3, [r1], #1
   12338:	f802 3f01 	strb.w	r3, [r2, #1]!
   1233c:	4572      	cmp	r2, lr
   1233e:	d1f9      	bne.n	12334 <_wcsnrtombs_l+0x90>
   12340:	9002      	str	r0, [sp, #8]
   12342:	9b03      	ldr	r3, [sp, #12]
   12344:	681a      	ldr	r2, [r3, #0]
   12346:	3204      	adds	r2, #4
   12348:	601a      	str	r2, [r3, #0]
   1234a:	682a      	ldr	r2, [r5, #0]
   1234c:	2a00      	cmp	r2, #0
   1234e:	d1c9      	bne.n	122e4 <_wcsnrtombs_l+0x40>
   12350:	9b01      	ldr	r3, [sp, #4]
   12352:	b10b      	cbz	r3, 12358 <_wcsnrtombs_l+0xb4>
   12354:	9b03      	ldr	r3, [sp, #12]
   12356:	601a      	str	r2, [r3, #0]
   12358:	f10c 36ff 	add.w	r6, ip, #4294967295
   1235c:	2200      	movs	r2, #0
   1235e:	4630      	mov	r0, r6
   12360:	f8c8 2000 	str.w	r2, [r8]
   12364:	b009      	add	sp, #36	; 0x24
   12366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1236a:	9b01      	ldr	r3, [sp, #4]
   1236c:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   12370:	2b00      	cmp	r3, #0
   12372:	d1a7      	bne.n	122c4 <_wcsnrtombs_l+0x20>
   12374:	9b03      	ldr	r3, [sp, #12]
   12376:	f04f 37ff 	mov.w	r7, #4294967295
   1237a:	681d      	ldr	r5, [r3, #0]
   1237c:	e7a6      	b.n	122cc <_wcsnrtombs_l+0x28>
   1237e:	4606      	mov	r6, r0
   12380:	218a      	movs	r1, #138	; 0x8a
   12382:	2200      	movs	r2, #0
   12384:	4630      	mov	r0, r6
   12386:	f8c9 1000 	str.w	r1, [r9]
   1238a:	f8c8 2000 	str.w	r2, [r8]
   1238e:	b009      	add	sp, #36	; 0x24
   12390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12394:	463e      	mov	r6, r7
   12396:	e7c1      	b.n	1231c <_wcsnrtombs_l+0x78>
   12398:	4666      	mov	r6, ip
   1239a:	e7bf      	b.n	1231c <_wcsnrtombs_l+0x78>

0001239c <_wcsnrtombs_r>:
   1239c:	b510      	push	{r4, lr}
   1239e:	b084      	sub	sp, #16
   123a0:	4c05      	ldr	r4, [pc, #20]	; (123b8 <_wcsnrtombs_r+0x1c>)
   123a2:	9806      	ldr	r0, [sp, #24]
   123a4:	9000      	str	r0, [sp, #0]
   123a6:	9807      	ldr	r0, [sp, #28]
   123a8:	9001      	str	r0, [sp, #4]
   123aa:	4804      	ldr	r0, [pc, #16]	; (123bc <_wcsnrtombs_r+0x20>)
   123ac:	6800      	ldr	r0, [r0, #0]
   123ae:	9402      	str	r4, [sp, #8]
   123b0:	f7ff ff78 	bl	122a4 <_wcsnrtombs_l>
   123b4:	b004      	add	sp, #16
   123b6:	bd10      	pop	{r4, pc}
   123b8:	1fff8ce4 	.word	0x1fff8ce4
   123bc:	1fff8f70 	.word	0x1fff8f70

000123c0 <__smakebuf_r>:
   123c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   123c4:	898b      	ldrh	r3, [r1, #12]
   123c6:	460c      	mov	r4, r1
   123c8:	0799      	lsls	r1, r3, #30
   123ca:	b096      	sub	sp, #88	; 0x58
   123cc:	d508      	bpl.n	123e0 <__smakebuf_r+0x20>
   123ce:	f104 0343 	add.w	r3, r4, #67	; 0x43
   123d2:	2201      	movs	r2, #1
   123d4:	e9c4 3204 	strd	r3, r2, [r4, #16]
   123d8:	6023      	str	r3, [r4, #0]
   123da:	b016      	add	sp, #88	; 0x58
   123dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   123e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   123e4:	2900      	cmp	r1, #0
   123e6:	4606      	mov	r6, r0
   123e8:	db25      	blt.n	12436 <__smakebuf_r+0x76>
   123ea:	466a      	mov	r2, sp
   123ec:	f000 f8ac 	bl	12548 <_fstat_r>
   123f0:	2800      	cmp	r0, #0
   123f2:	db1f      	blt.n	12434 <__smakebuf_r+0x74>
   123f4:	9d01      	ldr	r5, [sp, #4]
   123f6:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   123fa:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   123fe:	fab5 f585 	clz	r5, r5
   12402:	f44f 6880 	mov.w	r8, #1024	; 0x400
   12406:	096d      	lsrs	r5, r5, #5
   12408:	f44f 6700 	mov.w	r7, #2048	; 0x800
   1240c:	4641      	mov	r1, r8
   1240e:	4630      	mov	r0, r6
   12410:	f7f9 fe70 	bl	c0f4 <_malloc_r>
   12414:	b1e0      	cbz	r0, 12450 <__smakebuf_r+0x90>
   12416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1241a:	f8c4 8014 	str.w	r8, [r4, #20]
   1241e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   12422:	6020      	str	r0, [r4, #0]
   12424:	6120      	str	r0, [r4, #16]
   12426:	81a3      	strh	r3, [r4, #12]
   12428:	bb35      	cbnz	r5, 12478 <__smakebuf_r+0xb8>
   1242a:	433b      	orrs	r3, r7
   1242c:	81a3      	strh	r3, [r4, #12]
   1242e:	b016      	add	sp, #88	; 0x58
   12430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12434:	89a3      	ldrh	r3, [r4, #12]
   12436:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   1243a:	d019      	beq.n	12470 <__smakebuf_r+0xb0>
   1243c:	f04f 0840 	mov.w	r8, #64	; 0x40
   12440:	2500      	movs	r5, #0
   12442:	4641      	mov	r1, r8
   12444:	4630      	mov	r0, r6
   12446:	462f      	mov	r7, r5
   12448:	f7f9 fe54 	bl	c0f4 <_malloc_r>
   1244c:	2800      	cmp	r0, #0
   1244e:	d1e2      	bne.n	12416 <__smakebuf_r+0x56>
   12450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   12454:	059a      	lsls	r2, r3, #22
   12456:	d4c0      	bmi.n	123da <__smakebuf_r+0x1a>
   12458:	f023 0303 	bic.w	r3, r3, #3
   1245c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   12460:	f043 0302 	orr.w	r3, r3, #2
   12464:	2101      	movs	r1, #1
   12466:	e9c4 2104 	strd	r2, r1, [r4, #16]
   1246a:	81a3      	strh	r3, [r4, #12]
   1246c:	6022      	str	r2, [r4, #0]
   1246e:	e7b4      	b.n	123da <__smakebuf_r+0x1a>
   12470:	f44f 6880 	mov.w	r8, #1024	; 0x400
   12474:	462f      	mov	r7, r5
   12476:	e7c9      	b.n	1240c <__smakebuf_r+0x4c>
   12478:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1247c:	4630      	mov	r0, r6
   1247e:	f000 f879 	bl	12574 <_isatty_r>
   12482:	b910      	cbnz	r0, 1248a <__smakebuf_r+0xca>
   12484:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   12488:	e7cf      	b.n	1242a <__smakebuf_r+0x6a>
   1248a:	89a3      	ldrh	r3, [r4, #12]
   1248c:	f023 0303 	bic.w	r3, r3, #3
   12490:	f043 0301 	orr.w	r3, r3, #1
   12494:	b21b      	sxth	r3, r3
   12496:	e7c8      	b.n	1242a <__smakebuf_r+0x6a>

00012498 <__swbuf_r>:
   12498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1249a:	460d      	mov	r5, r1
   1249c:	4614      	mov	r4, r2
   1249e:	4606      	mov	r6, r0
   124a0:	b110      	cbz	r0, 124a8 <__swbuf_r+0x10>
   124a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   124a4:	2b00      	cmp	r3, #0
   124a6:	d04c      	beq.n	12542 <__swbuf_r+0xaa>
   124a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   124ac:	69a3      	ldr	r3, [r4, #24]
   124ae:	60a3      	str	r3, [r4, #8]
   124b0:	0717      	lsls	r7, r2, #28
   124b2:	b290      	uxth	r0, r2
   124b4:	d51b      	bpl.n	124ee <__swbuf_r+0x56>
   124b6:	6923      	ldr	r3, [r4, #16]
   124b8:	b1cb      	cbz	r3, 124ee <__swbuf_r+0x56>
   124ba:	b2ed      	uxtb	r5, r5
   124bc:	0481      	lsls	r1, r0, #18
   124be:	462f      	mov	r7, r5
   124c0:	d522      	bpl.n	12508 <__swbuf_r+0x70>
   124c2:	6822      	ldr	r2, [r4, #0]
   124c4:	6961      	ldr	r1, [r4, #20]
   124c6:	1ad3      	subs	r3, r2, r3
   124c8:	4299      	cmp	r1, r3
   124ca:	dd29      	ble.n	12520 <__swbuf_r+0x88>
   124cc:	3301      	adds	r3, #1
   124ce:	68a1      	ldr	r1, [r4, #8]
   124d0:	3901      	subs	r1, #1
   124d2:	60a1      	str	r1, [r4, #8]
   124d4:	1c51      	adds	r1, r2, #1
   124d6:	6021      	str	r1, [r4, #0]
   124d8:	7015      	strb	r5, [r2, #0]
   124da:	6962      	ldr	r2, [r4, #20]
   124dc:	429a      	cmp	r2, r3
   124de:	d027      	beq.n	12530 <__swbuf_r+0x98>
   124e0:	89a3      	ldrh	r3, [r4, #12]
   124e2:	07db      	lsls	r3, r3, #31
   124e4:	d501      	bpl.n	124ea <__swbuf_r+0x52>
   124e6:	2d0a      	cmp	r5, #10
   124e8:	d022      	beq.n	12530 <__swbuf_r+0x98>
   124ea:	4638      	mov	r0, r7
   124ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   124ee:	4621      	mov	r1, r4
   124f0:	4630      	mov	r0, r6
   124f2:	f7ff fde7 	bl	120c4 <__swsetup_r>
   124f6:	bb08      	cbnz	r0, 1253c <__swbuf_r+0xa4>
   124f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   124fc:	6923      	ldr	r3, [r4, #16]
   124fe:	b290      	uxth	r0, r2
   12500:	b2ed      	uxtb	r5, r5
   12502:	0481      	lsls	r1, r0, #18
   12504:	462f      	mov	r7, r5
   12506:	d4dc      	bmi.n	124c2 <__swbuf_r+0x2a>
   12508:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1250c:	81a2      	strh	r2, [r4, #12]
   1250e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   12510:	6961      	ldr	r1, [r4, #20]
   12512:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   12516:	6662      	str	r2, [r4, #100]	; 0x64
   12518:	6822      	ldr	r2, [r4, #0]
   1251a:	1ad3      	subs	r3, r2, r3
   1251c:	4299      	cmp	r1, r3
   1251e:	dcd5      	bgt.n	124cc <__swbuf_r+0x34>
   12520:	4621      	mov	r1, r4
   12522:	4630      	mov	r0, r6
   12524:	f7fd f9f8 	bl	f918 <_fflush_r>
   12528:	b940      	cbnz	r0, 1253c <__swbuf_r+0xa4>
   1252a:	6822      	ldr	r2, [r4, #0]
   1252c:	2301      	movs	r3, #1
   1252e:	e7ce      	b.n	124ce <__swbuf_r+0x36>
   12530:	4621      	mov	r1, r4
   12532:	4630      	mov	r0, r6
   12534:	f7fd f9f0 	bl	f918 <_fflush_r>
   12538:	2800      	cmp	r0, #0
   1253a:	d0d6      	beq.n	124ea <__swbuf_r+0x52>
   1253c:	f04f 37ff 	mov.w	r7, #4294967295
   12540:	e7d3      	b.n	124ea <__swbuf_r+0x52>
   12542:	f7fa fb15 	bl	cb70 <__sinit>
   12546:	e7af      	b.n	124a8 <__swbuf_r+0x10>

00012548 <_fstat_r>:
   12548:	b570      	push	{r4, r5, r6, lr}
   1254a:	460c      	mov	r4, r1
   1254c:	4d08      	ldr	r5, [pc, #32]	; (12570 <_fstat_r+0x28>)
   1254e:	4603      	mov	r3, r0
   12550:	2600      	movs	r6, #0
   12552:	4620      	mov	r0, r4
   12554:	4611      	mov	r1, r2
   12556:	461c      	mov	r4, r3
   12558:	602e      	str	r6, [r5, #0]
   1255a:	f7f6 fc07 	bl	8d6c <_fstat>
   1255e:	1c43      	adds	r3, r0, #1
   12560:	d000      	beq.n	12564 <_fstat_r+0x1c>
   12562:	bd70      	pop	{r4, r5, r6, pc}
   12564:	682b      	ldr	r3, [r5, #0]
   12566:	2b00      	cmp	r3, #0
   12568:	d0fb      	beq.n	12562 <_fstat_r+0x1a>
   1256a:	6023      	str	r3, [r4, #0]
   1256c:	bd70      	pop	{r4, r5, r6, pc}
   1256e:	bf00      	nop
   12570:	1fffb880 	.word	0x1fffb880

00012574 <_isatty_r>:
   12574:	b538      	push	{r3, r4, r5, lr}
   12576:	4d07      	ldr	r5, [pc, #28]	; (12594 <_isatty_r+0x20>)
   12578:	2200      	movs	r2, #0
   1257a:	4604      	mov	r4, r0
   1257c:	4608      	mov	r0, r1
   1257e:	602a      	str	r2, [r5, #0]
   12580:	f7f6 fbfa 	bl	8d78 <_isatty>
   12584:	1c43      	adds	r3, r0, #1
   12586:	d000      	beq.n	1258a <_isatty_r+0x16>
   12588:	bd38      	pop	{r3, r4, r5, pc}
   1258a:	682b      	ldr	r3, [r5, #0]
   1258c:	2b00      	cmp	r3, #0
   1258e:	d0fb      	beq.n	12588 <_isatty_r+0x14>
   12590:	6023      	str	r3, [r4, #0]
   12592:	bd38      	pop	{r3, r4, r5, pc}
   12594:	1fffb880 	.word	0x1fffb880

00012598 <__aeabi_dmul>:
   12598:	b570      	push	{r4, r5, r6, lr}
   1259a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1259e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   125a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   125a6:	bf1d      	ittte	ne
   125a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   125ac:	ea94 0f0c 	teqne	r4, ip
   125b0:	ea95 0f0c 	teqne	r5, ip
   125b4:	f000 f8de 	bleq	12774 <__aeabi_dmul+0x1dc>
   125b8:	442c      	add	r4, r5
   125ba:	ea81 0603 	eor.w	r6, r1, r3
   125be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   125c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   125c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   125ca:	bf18      	it	ne
   125cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   125d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   125d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   125d8:	d038      	beq.n	1264c <__aeabi_dmul+0xb4>
   125da:	fba0 ce02 	umull	ip, lr, r0, r2
   125de:	f04f 0500 	mov.w	r5, #0
   125e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   125e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   125ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   125ee:	f04f 0600 	mov.w	r6, #0
   125f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   125f6:	f09c 0f00 	teq	ip, #0
   125fa:	bf18      	it	ne
   125fc:	f04e 0e01 	orrne.w	lr, lr, #1
   12600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   12604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   12608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1260c:	d204      	bcs.n	12618 <__aeabi_dmul+0x80>
   1260e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   12612:	416d      	adcs	r5, r5
   12614:	eb46 0606 	adc.w	r6, r6, r6
   12618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1261c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   12620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   12624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   12628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1262c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   12630:	bf88      	it	hi
   12632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   12636:	d81e      	bhi.n	12676 <__aeabi_dmul+0xde>
   12638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1263c:	bf08      	it	eq
   1263e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   12642:	f150 0000 	adcs.w	r0, r0, #0
   12646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1264a:	bd70      	pop	{r4, r5, r6, pc}
   1264c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   12650:	ea46 0101 	orr.w	r1, r6, r1
   12654:	ea40 0002 	orr.w	r0, r0, r2
   12658:	ea81 0103 	eor.w	r1, r1, r3
   1265c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   12660:	bfc2      	ittt	gt
   12662:	ebd4 050c 	rsbsgt	r5, r4, ip
   12666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1266a:	bd70      	popgt	{r4, r5, r6, pc}
   1266c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   12670:	f04f 0e00 	mov.w	lr, #0
   12674:	3c01      	subs	r4, #1
   12676:	f300 80ab 	bgt.w	127d0 <__aeabi_dmul+0x238>
   1267a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1267e:	bfde      	ittt	le
   12680:	2000      	movle	r0, #0
   12682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   12686:	bd70      	pople	{r4, r5, r6, pc}
   12688:	f1c4 0400 	rsb	r4, r4, #0
   1268c:	3c20      	subs	r4, #32
   1268e:	da35      	bge.n	126fc <__aeabi_dmul+0x164>
   12690:	340c      	adds	r4, #12
   12692:	dc1b      	bgt.n	126cc <__aeabi_dmul+0x134>
   12694:	f104 0414 	add.w	r4, r4, #20
   12698:	f1c4 0520 	rsb	r5, r4, #32
   1269c:	fa00 f305 	lsl.w	r3, r0, r5
   126a0:	fa20 f004 	lsr.w	r0, r0, r4
   126a4:	fa01 f205 	lsl.w	r2, r1, r5
   126a8:	ea40 0002 	orr.w	r0, r0, r2
   126ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   126b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   126b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   126b8:	fa21 f604 	lsr.w	r6, r1, r4
   126bc:	eb42 0106 	adc.w	r1, r2, r6
   126c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   126c4:	bf08      	it	eq
   126c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   126ca:	bd70      	pop	{r4, r5, r6, pc}
   126cc:	f1c4 040c 	rsb	r4, r4, #12
   126d0:	f1c4 0520 	rsb	r5, r4, #32
   126d4:	fa00 f304 	lsl.w	r3, r0, r4
   126d8:	fa20 f005 	lsr.w	r0, r0, r5
   126dc:	fa01 f204 	lsl.w	r2, r1, r4
   126e0:	ea40 0002 	orr.w	r0, r0, r2
   126e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   126e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   126ec:	f141 0100 	adc.w	r1, r1, #0
   126f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   126f4:	bf08      	it	eq
   126f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   126fa:	bd70      	pop	{r4, r5, r6, pc}
   126fc:	f1c4 0520 	rsb	r5, r4, #32
   12700:	fa00 f205 	lsl.w	r2, r0, r5
   12704:	ea4e 0e02 	orr.w	lr, lr, r2
   12708:	fa20 f304 	lsr.w	r3, r0, r4
   1270c:	fa01 f205 	lsl.w	r2, r1, r5
   12710:	ea43 0302 	orr.w	r3, r3, r2
   12714:	fa21 f004 	lsr.w	r0, r1, r4
   12718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1271c:	fa21 f204 	lsr.w	r2, r1, r4
   12720:	ea20 0002 	bic.w	r0, r0, r2
   12724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   12728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1272c:	bf08      	it	eq
   1272e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   12732:	bd70      	pop	{r4, r5, r6, pc}
   12734:	f094 0f00 	teq	r4, #0
   12738:	d10f      	bne.n	1275a <__aeabi_dmul+0x1c2>
   1273a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1273e:	0040      	lsls	r0, r0, #1
   12740:	eb41 0101 	adc.w	r1, r1, r1
   12744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12748:	bf08      	it	eq
   1274a:	3c01      	subeq	r4, #1
   1274c:	d0f7      	beq.n	1273e <__aeabi_dmul+0x1a6>
   1274e:	ea41 0106 	orr.w	r1, r1, r6
   12752:	f095 0f00 	teq	r5, #0
   12756:	bf18      	it	ne
   12758:	4770      	bxne	lr
   1275a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1275e:	0052      	lsls	r2, r2, #1
   12760:	eb43 0303 	adc.w	r3, r3, r3
   12764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   12768:	bf08      	it	eq
   1276a:	3d01      	subeq	r5, #1
   1276c:	d0f7      	beq.n	1275e <__aeabi_dmul+0x1c6>
   1276e:	ea43 0306 	orr.w	r3, r3, r6
   12772:	4770      	bx	lr
   12774:	ea94 0f0c 	teq	r4, ip
   12778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1277c:	bf18      	it	ne
   1277e:	ea95 0f0c 	teqne	r5, ip
   12782:	d00c      	beq.n	1279e <__aeabi_dmul+0x206>
   12784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   12788:	bf18      	it	ne
   1278a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1278e:	d1d1      	bne.n	12734 <__aeabi_dmul+0x19c>
   12790:	ea81 0103 	eor.w	r1, r1, r3
   12794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   12798:	f04f 0000 	mov.w	r0, #0
   1279c:	bd70      	pop	{r4, r5, r6, pc}
   1279e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   127a2:	bf06      	itte	eq
   127a4:	4610      	moveq	r0, r2
   127a6:	4619      	moveq	r1, r3
   127a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   127ac:	d019      	beq.n	127e2 <__aeabi_dmul+0x24a>
   127ae:	ea94 0f0c 	teq	r4, ip
   127b2:	d102      	bne.n	127ba <__aeabi_dmul+0x222>
   127b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   127b8:	d113      	bne.n	127e2 <__aeabi_dmul+0x24a>
   127ba:	ea95 0f0c 	teq	r5, ip
   127be:	d105      	bne.n	127cc <__aeabi_dmul+0x234>
   127c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   127c4:	bf1c      	itt	ne
   127c6:	4610      	movne	r0, r2
   127c8:	4619      	movne	r1, r3
   127ca:	d10a      	bne.n	127e2 <__aeabi_dmul+0x24a>
   127cc:	ea81 0103 	eor.w	r1, r1, r3
   127d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   127d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   127d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   127dc:	f04f 0000 	mov.w	r0, #0
   127e0:	bd70      	pop	{r4, r5, r6, pc}
   127e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   127e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   127ea:	bd70      	pop	{r4, r5, r6, pc}

000127ec <__aeabi_ddiv>:
   127ec:	b570      	push	{r4, r5, r6, lr}
   127ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   127f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   127f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   127fa:	bf1d      	ittte	ne
   127fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   12800:	ea94 0f0c 	teqne	r4, ip
   12804:	ea95 0f0c 	teqne	r5, ip
   12808:	f000 f8a7 	bleq	1295a <__aeabi_ddiv+0x16e>
   1280c:	eba4 0405 	sub.w	r4, r4, r5
   12810:	ea81 0e03 	eor.w	lr, r1, r3
   12814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   12818:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1281c:	f000 8088 	beq.w	12930 <__aeabi_ddiv+0x144>
   12820:	ea4f 3303 	mov.w	r3, r3, lsl #12
   12824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   12828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1282c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   12830:	ea4f 2202 	mov.w	r2, r2, lsl #8
   12834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   12838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1283c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   12840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   12844:	429d      	cmp	r5, r3
   12846:	bf08      	it	eq
   12848:	4296      	cmpeq	r6, r2
   1284a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1284e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   12852:	d202      	bcs.n	1285a <__aeabi_ddiv+0x6e>
   12854:	085b      	lsrs	r3, r3, #1
   12856:	ea4f 0232 	mov.w	r2, r2, rrx
   1285a:	1ab6      	subs	r6, r6, r2
   1285c:	eb65 0503 	sbc.w	r5, r5, r3
   12860:	085b      	lsrs	r3, r3, #1
   12862:	ea4f 0232 	mov.w	r2, r2, rrx
   12866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   1286a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   1286e:	ebb6 0e02 	subs.w	lr, r6, r2
   12872:	eb75 0e03 	sbcs.w	lr, r5, r3
   12876:	bf22      	ittt	cs
   12878:	1ab6      	subcs	r6, r6, r2
   1287a:	4675      	movcs	r5, lr
   1287c:	ea40 000c 	orrcs.w	r0, r0, ip
   12880:	085b      	lsrs	r3, r3, #1
   12882:	ea4f 0232 	mov.w	r2, r2, rrx
   12886:	ebb6 0e02 	subs.w	lr, r6, r2
   1288a:	eb75 0e03 	sbcs.w	lr, r5, r3
   1288e:	bf22      	ittt	cs
   12890:	1ab6      	subcs	r6, r6, r2
   12892:	4675      	movcs	r5, lr
   12894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   12898:	085b      	lsrs	r3, r3, #1
   1289a:	ea4f 0232 	mov.w	r2, r2, rrx
   1289e:	ebb6 0e02 	subs.w	lr, r6, r2
   128a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   128a6:	bf22      	ittt	cs
   128a8:	1ab6      	subcs	r6, r6, r2
   128aa:	4675      	movcs	r5, lr
   128ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   128b0:	085b      	lsrs	r3, r3, #1
   128b2:	ea4f 0232 	mov.w	r2, r2, rrx
   128b6:	ebb6 0e02 	subs.w	lr, r6, r2
   128ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   128be:	bf22      	ittt	cs
   128c0:	1ab6      	subcs	r6, r6, r2
   128c2:	4675      	movcs	r5, lr
   128c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   128c8:	ea55 0e06 	orrs.w	lr, r5, r6
   128cc:	d018      	beq.n	12900 <__aeabi_ddiv+0x114>
   128ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   128d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   128d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   128da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   128de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   128e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   128e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   128ea:	d1c0      	bne.n	1286e <__aeabi_ddiv+0x82>
   128ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   128f0:	d10b      	bne.n	1290a <__aeabi_ddiv+0x11e>
   128f2:	ea41 0100 	orr.w	r1, r1, r0
   128f6:	f04f 0000 	mov.w	r0, #0
   128fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   128fe:	e7b6      	b.n	1286e <__aeabi_ddiv+0x82>
   12900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   12904:	bf04      	itt	eq
   12906:	4301      	orreq	r1, r0
   12908:	2000      	moveq	r0, #0
   1290a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1290e:	bf88      	it	hi
   12910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   12914:	f63f aeaf 	bhi.w	12676 <__aeabi_dmul+0xde>
   12918:	ebb5 0c03 	subs.w	ip, r5, r3
   1291c:	bf04      	itt	eq
   1291e:	ebb6 0c02 	subseq.w	ip, r6, r2
   12922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   12926:	f150 0000 	adcs.w	r0, r0, #0
   1292a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1292e:	bd70      	pop	{r4, r5, r6, pc}
   12930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   12934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   12938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1293c:	bfc2      	ittt	gt
   1293e:	ebd4 050c 	rsbsgt	r5, r4, ip
   12942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   12946:	bd70      	popgt	{r4, r5, r6, pc}
   12948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1294c:	f04f 0e00 	mov.w	lr, #0
   12950:	3c01      	subs	r4, #1
   12952:	e690      	b.n	12676 <__aeabi_dmul+0xde>
   12954:	ea45 0e06 	orr.w	lr, r5, r6
   12958:	e68d      	b.n	12676 <__aeabi_dmul+0xde>
   1295a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1295e:	ea94 0f0c 	teq	r4, ip
   12962:	bf08      	it	eq
   12964:	ea95 0f0c 	teqeq	r5, ip
   12968:	f43f af3b 	beq.w	127e2 <__aeabi_dmul+0x24a>
   1296c:	ea94 0f0c 	teq	r4, ip
   12970:	d10a      	bne.n	12988 <__aeabi_ddiv+0x19c>
   12972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   12976:	f47f af34 	bne.w	127e2 <__aeabi_dmul+0x24a>
   1297a:	ea95 0f0c 	teq	r5, ip
   1297e:	f47f af25 	bne.w	127cc <__aeabi_dmul+0x234>
   12982:	4610      	mov	r0, r2
   12984:	4619      	mov	r1, r3
   12986:	e72c      	b.n	127e2 <__aeabi_dmul+0x24a>
   12988:	ea95 0f0c 	teq	r5, ip
   1298c:	d106      	bne.n	1299c <__aeabi_ddiv+0x1b0>
   1298e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   12992:	f43f aefd 	beq.w	12790 <__aeabi_dmul+0x1f8>
   12996:	4610      	mov	r0, r2
   12998:	4619      	mov	r1, r3
   1299a:	e722      	b.n	127e2 <__aeabi_dmul+0x24a>
   1299c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   129a0:	bf18      	it	ne
   129a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   129a6:	f47f aec5 	bne.w	12734 <__aeabi_dmul+0x19c>
   129aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   129ae:	f47f af0d 	bne.w	127cc <__aeabi_dmul+0x234>
   129b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   129b6:	f47f aeeb 	bne.w	12790 <__aeabi_dmul+0x1f8>
   129ba:	e712      	b.n	127e2 <__aeabi_dmul+0x24a>

000129bc <__aeabi_d2iz>:
   129bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   129c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   129c4:	d215      	bcs.n	129f2 <__aeabi_d2iz+0x36>
   129c6:	d511      	bpl.n	129ec <__aeabi_d2iz+0x30>
   129c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   129cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   129d0:	d912      	bls.n	129f8 <__aeabi_d2iz+0x3c>
   129d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   129d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   129da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   129de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   129e2:	fa23 f002 	lsr.w	r0, r3, r2
   129e6:	bf18      	it	ne
   129e8:	4240      	negne	r0, r0
   129ea:	4770      	bx	lr
   129ec:	f04f 0000 	mov.w	r0, #0
   129f0:	4770      	bx	lr
   129f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   129f6:	d105      	bne.n	12a04 <__aeabi_d2iz+0x48>
   129f8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   129fc:	bf08      	it	eq
   129fe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   12a02:	4770      	bx	lr
   12a04:	f04f 0000 	mov.w	r0, #0
   12a08:	4770      	bx	lr
   12a0a:	bf00      	nop
   12a0c:	44202020 	.word	0x44202020
   12a10:	47554245 	.word	0x47554245
   12a14:	6c614220 	.word	0x6c614220
   12a18:	65636e61 	.word	0x65636e61
   12a1c:	49202d20 	.word	0x49202d20
   12a20:	20203a44 	.word	0x20203a44
   12a24:	00002020 	.word	0x00002020
   12a28:	20202020 	.word	0x20202020
   12a2c:	00000000 	.word	0x00000000
   12a30:	20202020 	.word	0x20202020
   12a34:	3a736f70 	.word	0x3a736f70
   12a38:	00000020 	.word	0x00000020
   12a3c:	202d2020 	.word	0x202d2020
   12a40:	ffff0020 	.word	0xffff0020
   12a44:	75646f4d 	.word	0x75646f4d
   12a48:	3a73656c 	.word	0x3a73656c
   12a4c:	20692520 	.word	0x20692520
   12a50:	6c654320 	.word	0x6c654320
   12a54:	203a736c 	.word	0x203a736c
   12a58:	20206925 	.word	0x20206925
   12a5c:	746c6f56 	.word	0x746c6f56
   12a60:	3a656761 	.word	0x3a656761
   12a64:	56662520 	.word	0x56662520
   12a68:	41202020 	.word	0x41202020
   12a6c:	43206776 	.word	0x43206776
   12a70:	206c6c65 	.word	0x206c6c65
   12a74:	746c6f56 	.word	0x746c6f56
   12a78:	3a656761 	.word	0x3a656761
   12a7c:	56662520 	.word	0x56662520
   12a80:	20202020 	.word	0x20202020
   12a84:	67764120 	.word	0x67764120
   12a88:	6d655420 	.word	0x6d655420
   12a8c:	25203a70 	.word	0x25203a70
   12a90:	00204366 	.word	0x00204366
   12a94:	20202020 	.word	0x20202020
   12a98:	20202020 	.word	0x20202020
   12a9c:	20202020 	.word	0x20202020
   12aa0:	20202020 	.word	0x20202020
   12aa4:	20202020 	.word	0x20202020
   12aa8:	20202020 	.word	0x20202020
   12aac:	20202020 	.word	0x20202020
   12ab0:	4d202020 	.word	0x4d202020
   12ab4:	6c75646f 	.word	0x6c75646f
   12ab8:	25232065 	.word	0x25232065
   12abc:	00000069 	.word	0x00000069
   12ac0:	6f562020 	.word	0x6f562020
   12ac4:	6761746c 	.word	0x6761746c
   12ac8:	25203a65 	.word	0x25203a65
   12acc:	20205666 	.word	0x20205666
   12ad0:	66252820 	.word	0x66252820
   12ad4:	66252d56 	.word	0x66252d56
   12ad8:	20202956 	.word	0x20202956
   12adc:	54202020 	.word	0x54202020
   12ae0:	65706d65 	.word	0x65706d65
   12ae4:	75746172 	.word	0x75746172
   12ae8:	3a736572 	.word	0x3a736572
   12aec:	66252820 	.word	0x66252820
   12af0:	66252d43 	.word	0x66252d43
   12af4:	00002943 	.word	0x00002943
   12af8:	4f4d2020 	.word	0x4f4d2020
   12afc:	454c5544 	.word	0x454c5544
   12b00:	20534920 	.word	0x20534920
   12b04:	4c554146 	.word	0x4c554146
   12b08:	3a444554 	.word	0x3a444554
   12b0c:	00000000 	.word	0x00000000
   12b10:	20202020 	.word	0x20202020
   12b14:	7265764f 	.word	0x7265764f
   12b18:	746c6f76 	.word	0x746c6f76
   12b1c:	20656761 	.word	0x20656761
   12b20:	6c6c6543 	.word	0x6c6c6543
   12b24:	6d754e20 	.word	0x6d754e20
   12b28:	73726562 	.word	0x73726562
   12b2c:	2d312820 	.word	0x2d312820
   12b30:	203a2936 	.word	0x203a2936
   12b34:	00000000 	.word	0x00000000
   12b38:	20202020 	.word	0x20202020
   12b3c:	65646e55 	.word	0x65646e55
   12b40:	6c6f7672 	.word	0x6c6f7672
   12b44:	65676174 	.word	0x65676174
   12b48:	6c654320 	.word	0x6c654320
   12b4c:	754e206c 	.word	0x754e206c
   12b50:	7265626d 	.word	0x7265626d
   12b54:	31282073 	.word	0x31282073
   12b58:	3a29362d 	.word	0x3a29362d
   12b5c:	00000020 	.word	0x00000020
   12b60:	20202020 	.word	0x20202020
   12b64:	20435243 	.word	0x20435243
   12b68:	6f727265 	.word	0x6f727265
   12b6c:	6e692072 	.word	0x6e692072
   12b70:	63657220 	.word	0x63657220
   12b74:	65766965 	.word	0x65766965
   12b78:	61702064 	.word	0x61702064
   12b7c:	74656b63 	.word	0x74656b63
   12b80:	00000000 	.word	0x00000000
   12b84:	20202020 	.word	0x20202020
   12b88:	65776f50 	.word	0x65776f50
   12b8c:	6e6f2072 	.word	0x6e6f2072
   12b90:	73657220 	.word	0x73657220
   12b94:	68207465 	.word	0x68207465
   12b98:	6f207361 	.word	0x6f207361
   12b9c:	72756363 	.word	0x72756363
   12ba0:	00646572 	.word	0x00646572
   12ba4:	20202020 	.word	0x20202020
   12ba8:	74736554 	.word	0x74736554
   12bac:	75616620 	.word	0x75616620
   12bb0:	6120746c 	.word	0x6120746c
   12bb4:	76697463 	.word	0x76697463
   12bb8:	00000065 	.word	0x00000065
   12bbc:	20202020 	.word	0x20202020
   12bc0:	65746e49 	.word	0x65746e49
   12bc4:	6c616e72 	.word	0x6c616e72
   12bc8:	67657220 	.word	0x67657220
   12bcc:	65747369 	.word	0x65747369
   12bd0:	69207372 	.word	0x69207372
   12bd4:	6e6f636e 	.word	0x6e6f636e
   12bd8:	74736973 	.word	0x74736973
   12bdc:	00746e65 	.word	0x00746e65
   12be0:	4f4d2020 	.word	0x4f4d2020
   12be4:	454c5544 	.word	0x454c5544
   12be8:	53414820 	.word	0x53414820
   12bec:	454c4120 	.word	0x454c4120
   12bf0:	3a535452 	.word	0x3a535452
   12bf4:	00000000 	.word	0x00000000
   12bf8:	20202020 	.word	0x20202020
   12bfc:	7265764f 	.word	0x7265764f
   12c00:	6d657420 	.word	0x6d657420
   12c04:	61726570 	.word	0x61726570
   12c08:	65727574 	.word	0x65727574
   12c0c:	206e6f20 	.word	0x206e6f20
   12c10:	00315354 	.word	0x00315354
   12c14:	20202020 	.word	0x20202020
   12c18:	7265764f 	.word	0x7265764f
   12c1c:	6d657420 	.word	0x6d657420
   12c20:	61726570 	.word	0x61726570
   12c24:	65727574 	.word	0x65727574
   12c28:	206e6f20 	.word	0x206e6f20
   12c2c:	00325354 	.word	0x00325354
   12c30:	20202020 	.word	0x20202020
   12c34:	65656c53 	.word	0x65656c53
   12c38:	6f6d2070 	.word	0x6f6d2070
   12c3c:	61206564 	.word	0x61206564
   12c40:	76697463 	.word	0x76697463
   12c44:	00000065 	.word	0x00000065
   12c48:	20202020 	.word	0x20202020
   12c4c:	72656854 	.word	0x72656854
   12c50:	206c616d 	.word	0x206c616d
   12c54:	74756873 	.word	0x74756873
   12c58:	6e776f64 	.word	0x6e776f64
   12c5c:	74636120 	.word	0x74636120
   12c60:	00657669 	.word	0x00657669
   12c64:	20202020 	.word	0x20202020
   12c68:	74736554 	.word	0x74736554
   12c6c:	656c4120 	.word	0x656c4120
   12c70:	00007472 	.word	0x00007472
   12c74:	20202020 	.word	0x20202020
   12c78:	2050544f 	.word	0x2050544f
   12c7c:	4f525045 	.word	0x4f525045
   12c80:	6e55204d 	.word	0x6e55204d
   12c84:	72726f63 	.word	0x72726f63
   12c88:	61746365 	.word	0x61746365
   12c8c:	20656c62 	.word	0x20656c62
   12c90:	6f727245 	.word	0x6f727245
   12c94:	00000072 	.word	0x00000072
   12c98:	20202020 	.word	0x20202020
   12c9c:	554f5247 	.word	0x554f5247
   12ca0:	52203350 	.word	0x52203350
   12ca4:	20736765 	.word	0x20736765
   12ca8:	61766e49 	.word	0x61766e49
   12cac:	0064696c 	.word	0x0064696c
   12cb0:	20202020 	.word	0x20202020
   12cb4:	72646441 	.word	0x72646441
   12cb8:	20737365 	.word	0x20737365
   12cbc:	20746f6e 	.word	0x20746f6e
   12cc0:	69676572 	.word	0x69676572
   12cc4:	72657473 	.word	0x72657473
   12cc8:	ff006465 	.word	0xff006465
   12ccc:	75646f4d 	.word	0x75646f4d
   12cd0:	3a73656c 	.word	0x3a73656c
   12cd4:	20692520 	.word	0x20692520
   12cd8:	6c6c6543 	.word	0x6c6c6543
   12cdc:	25203a73 	.word	0x25203a73
   12ce0:	74532069 	.word	0x74532069
   12ce4:	676e6972 	.word	0x676e6972
   12ce8:	25203a73 	.word	0x25203a73
   12cec:	56202069 	.word	0x56202069
   12cf0:	61746c6f 	.word	0x61746c6f
   12cf4:	203a6567 	.word	0x203a6567
   12cf8:	20566625 	.word	0x20566625
   12cfc:	76412020 	.word	0x76412020
   12d00:	65432067 	.word	0x65432067
   12d04:	56206c6c 	.word	0x56206c6c
   12d08:	61746c6f 	.word	0x61746c6f
   12d0c:	203a6567 	.word	0x203a6567
   12d10:	20566625 	.word	0x20566625
   12d14:	776f4c20 	.word	0x776f4c20
   12d18:	6c654320 	.word	0x6c654320
   12d1c:	6f56206c 	.word	0x6f56206c
   12d20:	6761746c 	.word	0x6761746c
   12d24:	25203a65 	.word	0x25203a65
   12d28:	20205666 	.word	0x20205666
   12d2c:	67694820 	.word	0x67694820
   12d30:	65432068 	.word	0x65432068
   12d34:	56206c6c 	.word	0x56206c6c
   12d38:	61746c6f 	.word	0x61746c6f
   12d3c:	203a6567 	.word	0x203a6567
   12d40:	20566625 	.word	0x20566625
   12d44:	746c6544 	.word	0x746c6544
   12d48:	6f562061 	.word	0x6f562061
   12d4c:	6761746c 	.word	0x6761746c
   12d50:	25203a65 	.word	0x25203a65
   12d54:	20566d7a 	.word	0x20566d7a
   12d58:	76412020 	.word	0x76412020
   12d5c:	65542067 	.word	0x65542067
   12d60:	203a706d 	.word	0x203a706d
   12d64:	20436625 	.word	0x20436625
   12d68:	00000000 	.word	0x00000000
   12d6c:	75646f4d 	.word	0x75646f4d
   12d70:	2320656c 	.word	0x2320656c
   12d74:	00000000 	.word	0x00000000
   12d78:	00000056 	.word	0x00000056
   12d7c:	65432020 	.word	0x65432020
   12d80:	002d6c6c 	.word	0x002d6c6c
   12d84:	20202020 	.word	0x20202020
   12d88:	20202020 	.word	0x20202020
   12d8c:	20202020 	.word	0x20202020
   12d90:	00202020 	.word	0x00202020
   12d94:	6d655420 	.word	0x6d655420
   12d98:	3a312070 	.word	0x3a312070
   12d9c:	ffff0020 	.word	0xffff0020
   12da0:	ffff002c 	.word	0xffff002c
   12da4:	00007830 	.word	0x00007830
   12da8:	00006230 	.word	0x00006230
   12dac:	00000054 	.word	0x00000054
   12db0:	00000046 	.word	0x00000046
   12db4:	45555254 	.word	0x45555254
   12db8:	00000000 	.word	0x00000000
   12dbc:	534c4146 	.word	0x534c4146
   12dc0:	ffff0045 	.word	0xffff0045
   12dc4:	65736552 	.word	0x65736552
   12dc8:	6e697474 	.word	0x6e697474
   12dcc:	6f742067 	.word	0x6f742067
   12dd0:	63616620 	.word	0x63616620
   12dd4:	79726f74 	.word	0x79726f74
   12dd8:	66656420 	.word	0x66656420
   12ddc:	746c7561 	.word	0x746c7561
   12de0:	ffff0073 	.word	0xffff0073
   12de4:	20434f53 	.word	0x20434f53
   12de8:	0000203a 	.word	0x0000203a
   12dec:	75662020 	.word	0x75662020
   12df0:	70206c65 	.word	0x70206c65
   12df4:	3a206d77 	.word	0x3a206d77
   12df8:	ffff0020 	.word	0xffff0020
   12dfc:	20534d42 	.word	0x20534d42
   12e00:	74617453 	.word	0x74617453
   12e04:	3a207375 	.word	0x3a207375
   12e08:	00000020 	.word	0x00000020
   12e0c:	20535345 	.word	0x20535345
   12e10:	65646f4d 	.word	0x65646f4d
   12e14:	00000020 	.word	0x00000020
   12e18:	6e55203a 	.word	0x6e55203a
   12e1c:	56726564 	.word	0x56726564
   12e20:	61746c6f 	.word	0x61746c6f
   12e24:	00206567 	.word	0x00206567
   12e28:	764f203a 	.word	0x764f203a
   12e2c:	6f567265 	.word	0x6f567265
   12e30:	6761746c 	.word	0x6761746c
   12e34:	00002065 	.word	0x00002065
   12e38:	6543203a 	.word	0x6543203a
   12e3c:	49206c6c 	.word	0x49206c6c
   12e40:	6c61626d 	.word	0x6c61626d
   12e44:	65636e61 	.word	0x65636e61
   12e48:	00000020 	.word	0x00000020
   12e4c:	764f203a 	.word	0x764f203a
   12e50:	54207265 	.word	0x54207265
   12e54:	20706d65 	.word	0x20706d65
   12e58:	00000000 	.word	0x00000000
   12e5c:	6e55203a 	.word	0x6e55203a
   12e60:	20726564 	.word	0x20726564
   12e64:	706d6554 	.word	0x706d6554
   12e68:	00000020 	.word	0x00000020
   12e6c:	764f203a 	.word	0x764f203a
   12e70:	6f567265 	.word	0x6f567265
   12e74:	6761746c 	.word	0x6761746c
   12e78:	74532065 	.word	0x74532065
   12e7c:	6761726f 	.word	0x6761726f
   12e80:	00002065 	.word	0x00002065
   12e84:	4e55203a 	.word	0x4e55203a
   12e88:	70706168 	.word	0x70706168
   12e8c:	00003a79 	.word	0x00003a79
   12e90:	6148203a 	.word	0x6148203a
   12e94:	20797070 	.word	0x20797070
   12e98:	00000000 	.word	0x00000000
   12e9c:	6f6f4220 	.word	0x6f6f4220
   12ea0:	00002074 	.word	0x00002074
   12ea4:	61655220 	.word	0x61655220
   12ea8:	00207964 	.word	0x00207964
   12eac:	65725020 	.word	0x65725020
   12eb0:	72616863 	.word	0x72616863
   12eb4:	00206567 	.word	0x00206567
   12eb8:	69724420 	.word	0x69724420
   12ebc:	00206576 	.word	0x00206576
   12ec0:	61684320 	.word	0x61684320
   12ec4:	20656772 	.word	0x20656772
   12ec8:	00000000 	.word	0x00000000
   12ecc:	72724520 	.word	0x72724520
   12ed0:	0020726f 	.word	0x0020726f
   12ed4:	4341207c 	.word	0x4341207c
   12ed8:	65725020 	.word	0x65725020
   12edc:	746e6573 	.word	0x746e6573
   12ee0:	00007c20 	.word	0x00007c20
   12ee4:	654b207c 	.word	0x654b207c
   12ee8:	4e4f2079 	.word	0x4e4f2079
   12eec:	00007c20 	.word	0x00007c20
   12ef0:	6c61427c 	.word	0x6c61427c
   12ef4:	69636e61 	.word	0x69636e61
   12ef8:	4120676e 	.word	0x4120676e
   12efc:	76697463 	.word	0x76697463
   12f00:	00000065 	.word	0x00000065
   12f04:	3a74754f 	.word	0x3a74754f
   12f08:	00000000 	.word	0x00000000
   12f0c:	6e6f4320 	.word	0x6e6f4320
   12f10:	00003a74 	.word	0x00003a74
   12f14:	00000031 	.word	0x00000031
   12f18:	00000030 	.word	0x00000030
   12f1c:	3a6e4920 	.word	0x3a6e4920
   12f20:	ffffff00 	.word	0xffffff00
   12f24:	20776f4c 	.word	0x20776f4c
   12f28:	676e6152 	.word	0x676e6152
   12f2c:	00203a65 	.word	0x00203a65
   12f30:	676e6953 	.word	0x676e6953
   12f34:	4920656c 	.word	0x4920656c
   12f38:	00203a6e 	.word	0x00203a6e
   12f3c:	756c6156 	.word	0x756c6156
   12f40:	44412065 	.word	0x44412065
   12f44:	203a3043 	.word	0x203a3043
   12f48:	00000000 	.word	0x00000000
   12f4c:	00416d20 	.word	0x00416d20
   12f50:	68676948 	.word	0x68676948
   12f54:	6e615220 	.word	0x6e615220
   12f58:	203a6567 	.word	0x203a6567
   12f5c:	00000000 	.word	0x00000000
   12f60:	0000416d 	.word	0x0000416d
   12f64:	00207c20 	.word	0x00207c20
   12f68:	2020416d 	.word	0x2020416d
   12f6c:	ffffff00 	.word	0xffffff00
   12f70:	2f2f2f2f 	.word	0x2f2f2f2f
   12f74:	2f2f2f2f 	.word	0x2f2f2f2f
   12f78:	2f2f2f2f 	.word	0x2f2f2f2f
   12f7c:	2f2f2f2f 	.word	0x2f2f2f2f
   12f80:	2f2f2f2f 	.word	0x2f2f2f2f
   12f84:	2f2f2f2f 	.word	0x2f2f2f2f
   12f88:	2f2f2f2f 	.word	0x2f2f2f2f
   12f8c:	2f2f2f2f 	.word	0x2f2f2f2f
   12f90:	2f2f2f2f 	.word	0x2f2f2f2f
   12f94:	2f2f2f2f 	.word	0x2f2f2f2f
   12f98:	434f5320 	.word	0x434f5320
   12f9c:	54455320 	.word	0x54455320
   12fa0:	2f2f2f20 	.word	0x2f2f2f20
   12fa4:	2f2f2f2f 	.word	0x2f2f2f2f
   12fa8:	2f2f2f2f 	.word	0x2f2f2f2f
   12fac:	2f2f2f2f 	.word	0x2f2f2f2f
   12fb0:	2f2f2f2f 	.word	0x2f2f2f2f
   12fb4:	2f2f2f2f 	.word	0x2f2f2f2f
   12fb8:	2f2f2f2f 	.word	0x2f2f2f2f
   12fbc:	2f2f2f2f 	.word	0x2f2f2f2f
   12fc0:	2f2f2f2f 	.word	0x2f2f2f2f
   12fc4:	2f2f2f2f 	.word	0x2f2f2f2f
   12fc8:	0000002f 	.word	0x0000002f
   12fcc:	20776f4c 	.word	0x20776f4c
   12fd0:	676e6152 	.word	0x676e6152
   12fd4:	00002065 	.word	0x00002065
   12fd8:	68676948 	.word	0x68676948
   12fdc:	6e615220 	.word	0x6e615220
   12fe0:	00006567 	.word	0x00006567
   12fe4:	6c616e41 	.word	0x6c616e41
   12fe8:	6575676f 	.word	0x6575676f
   12fec:	6e695320 	.word	0x6e695320
   12ff0:	20656c67 	.word	0x20656c67
   12ff4:	00000000 	.word	0x00000000
   12ff8:	624e4143 	.word	0x624e4143
   12ffc:	00207375 	.word	0x00207375
   13000:	4f532025 	.word	0x4f532025
   13004:	00002043 	.word	0x00002043
   13008:	0068416d 	.word	0x0068416d
   1300c:	6c6c7570 	.word	0x6c6c7570
   13010:	206e6920 	.word	0x206e6920
   13014:	3654554f 	.word	0x3654554f
   13018:	00000000 	.word	0x00000000
   1301c:	6c6c7570 	.word	0x6c6c7570
   13020:	206e6920 	.word	0x206e6920
   13024:	3754554f 	.word	0x3754554f
   13028:	ffffff00 	.word	0xffffff00
   1302c:	6c614320 	.word	0x6c614320
   13030:	61726269 	.word	0x61726269
   13034:	676e6974 	.word	0x676e6974
   13038:	72754320 	.word	0x72754320
   1303c:	746e6572 	.word	0x746e6572
   13040:	66664f20 	.word	0x66664f20
   13044:	20746573 	.word	0x20746573
   13048:	3a3a3a3a 	.word	0x3a3a3a3a
   1304c:	0000203a 	.word	0x0000203a
   13050:	0000002e 	.word	0x0000002e
   13054:	72756320 	.word	0x72756320
   13058:	746e6572 	.word	0x746e6572
   1305c:	66666f20 	.word	0x66666f20
   13060:	20746573 	.word	0x20746573
   13064:	61632031 	.word	0x61632031
   13068:	7262696c 	.word	0x7262696c
   1306c:	64657461 	.word	0x64657461
   13070:	00000020 	.word	0x00000020
   13074:	72756320 	.word	0x72756320
   13078:	746e6572 	.word	0x746e6572
   1307c:	66666f20 	.word	0x66666f20
   13080:	20746573 	.word	0x20746573
   13084:	61632032 	.word	0x61632032
   13088:	7262696c 	.word	0x7262696c
   1308c:	64657461 	.word	0x64657461
   13090:	ffff0020 	.word	0xffff0020
   13094:	0020416d 	.word	0x0020416d
   13098:	65747845 	.word	0x65747845
   1309c:	6465646e 	.word	0x6465646e
   130a0:	3a444920 	.word	0x3a444920
   130a4:	25783020 	.word	0x25783020
   130a8:	586c382e 	.word	0x586c382e
   130ac:	4c442020 	.word	0x4c442020
   130b0:	25203a43 	.word	0x25203a43
   130b4:	20206431 	.word	0x20206431
   130b8:	61746144 	.word	0x61746144
   130bc:	0000003a 	.word	0x0000003a
   130c0:	2578302c 	.word	0x2578302c
   130c4:	586c332e 	.word	0x586c332e
   130c8:	6c61662c 	.word	0x6c61662c
   130cc:	252c6573 	.word	0x252c6573
   130d0:	00006431 	.word	0x00006431
   130d4:	4d455220 	.word	0x4d455220
   130d8:	2045544f 	.word	0x2045544f
   130dc:	55514552 	.word	0x55514552
   130e0:	20545345 	.word	0x20545345
   130e4:	4d415246 	.word	0x4d415246
   130e8:	00000045 	.word	0x00000045
   130ec:	7830202c 	.word	0x7830202c
   130f0:	58322e25 	.word	0x58322e25
   130f4:	ffffff00 	.word	0xffffff00
   130f8:	75706e49 	.word	0x75706e49
   130fc:	00203a74 	.word	0x00203a74
   13100:	4e4f2031 	.word	0x4e4f2031
   13104:	00002020 	.word	0x00002020
   13108:	464f2031 	.word	0x464f2031
   1310c:	00002046 	.word	0x00002046
   13110:	4e4f2032 	.word	0x4e4f2032
   13114:	00002020 	.word	0x00002020
   13118:	464f2032 	.word	0x464f2032
   1311c:	00002046 	.word	0x00002046
   13120:	4e4f2033 	.word	0x4e4f2033
   13124:	00002020 	.word	0x00002020
   13128:	464f2033 	.word	0x464f2033
   1312c:	00002046 	.word	0x00002046
   13130:	4e4f2034 	.word	0x4e4f2034
   13134:	00002020 	.word	0x00002020
   13138:	464f2034 	.word	0x464f2034
   1313c:	ff002046 	.word	0xff002046
   13140:	74617473 	.word	0x74617473
   13144:	7478742e 	.word	0x7478742e
   13148:	0000003d 	.word	0x0000003d
   1314c:	74634120 	.word	0x74634120
   13150:	20657669 	.word	0x20657669
   13154:	00000000 	.word	0x00000000
   13158:	2e636f73 	.word	0x2e636f73
   1315c:	3d6c6176 	.word	0x3d6c6176
   13160:	00000000 	.word	0x00000000
   13164:	31636f73 	.word	0x31636f73
   13168:	6c61762e 	.word	0x6c61762e
   1316c:	0000003d 	.word	0x0000003d
   13170:	72727563 	.word	0x72727563
   13174:	2e746e65 	.word	0x2e746e65
   13178:	3d6c6176 	.word	0x3d6c6176
   1317c:	00000000 	.word	0x00000000
   13180:	706d6574 	.word	0x706d6574
   13184:	6c61762e 	.word	0x6c61762e
   13188:	0000003d 	.word	0x0000003d
   1318c:	706d6574 	.word	0x706d6574
   13190:	2e776f6c 	.word	0x2e776f6c
   13194:	3d6c6176 	.word	0x3d6c6176
   13198:	00000000 	.word	0x00000000
   1319c:	706d6574 	.word	0x706d6574
   131a0:	68676968 	.word	0x68676968
   131a4:	6c61762e 	.word	0x6c61762e
   131a8:	0000003d 	.word	0x0000003d
   131ac:	746c6f76 	.word	0x746c6f76
   131b0:	6c61762e 	.word	0x6c61762e
   131b4:	0000003d 	.word	0x0000003d
   131b8:	63776f6c 	.word	0x63776f6c
   131bc:	2e6c6c65 	.word	0x2e6c6c65
   131c0:	3d6c6176 	.word	0x3d6c6176
   131c4:	00000000 	.word	0x00000000
   131c8:	68676968 	.word	0x68676968
   131cc:	6c6c6563 	.word	0x6c6c6563
   131d0:	6c61762e 	.word	0x6c61762e
   131d4:	0000003d 	.word	0x0000003d
   131d8:	6c6c6563 	.word	0x6c6c6563
   131dc:	746c6564 	.word	0x746c6564
   131e0:	61762e61 	.word	0x61762e61
   131e4:	00003d6c 	.word	0x00003d6c
   131e8:	6c6c6563 	.word	0x6c6c6563
   131ec:	2e6c6162 	.word	0x2e6c6162
   131f0:	3d6c6176 	.word	0x3d6c6176
   131f4:	00000000 	.word	0x00000000
   131f8:	6d726966 	.word	0x6d726966
   131fc:	6c61762e 	.word	0x6c61762e
   13200:	ffff003d 	.word	0xffff003d
   13204:	20544547 	.word	0x20544547
   13208:	41544144 	.word	0x41544144
   1320c:	4f524620 	.word	0x4f524620
   13210:	4449204d 	.word	0x4449204d
   13214:	ff00203a 	.word	0xff00203a
   13218:	20746573 	.word	0x20746573
   1321c:	206e6163 	.word	0x206e6163
   13220:	65746172 	.word	0x65746172
   13224:	006b6f20 	.word	0x006b6f20
   13228:	20746573 	.word	0x20746573
   1322c:	206e6163 	.word	0x206e6163
   13230:	65746172 	.word	0x65746172
   13234:	69616620 	.word	0x69616620
   13238:	0000006c 	.word	0x0000006c
   1323c:	6e6f7257 	.word	0x6e6f7257
   13240:	41432067 	.word	0x41432067
   13244:	7053204e 	.word	0x7053204e
   13248:	00646565 	.word	0x00646565
   1324c:	72617453 	.word	0x72617453
   13250:	676e6974 	.word	0x676e6974
   13254:	21707520 	.word	0x21707520
   13258:	00000000 	.word	0x00000000
   1325c:	706d6953 	.word	0x706d6953
   13260:	20534d42 	.word	0x20534d42
   13264:	56203256 	.word	0x56203256
   13268:	2d746c6f 	.word	0x2d746c6f
   1326c:	65706d41 	.word	0x65706d41
   13270:	00006172 	.word	0x00006172
   13274:	73616552 	.word	0x73616552
   13278:	66206e6f 	.word	0x66206e6f
   1327c:	6c20726f 	.word	0x6c20726f
   13280:	20747361 	.word	0x20747361
   13284:	65736552 	.word	0x65736552
   13288:	00203a74 	.word	0x00203a74
   1328c:	706f7453 	.word	0x706f7453
   13290:	646f4d20 	.word	0x646f4d20
   13294:	63412065 	.word	0x63412065
   13298:	776f6e6b 	.word	0x776f6e6b
   1329c:	6764656c 	.word	0x6764656c
   132a0:	72452065 	.word	0x72452065
   132a4:	20726f72 	.word	0x20726f72
   132a8:	65736552 	.word	0x65736552
   132ac:	00000074 	.word	0x00000074
   132b0:	2d4d444d 	.word	0x2d4d444d
   132b4:	52205041 	.word	0x52205041
   132b8:	74657365 	.word	0x74657365
   132bc:	00000000 	.word	0x00000000
   132c0:	74666f53 	.word	0x74666f53
   132c4:	65726177 	.word	0x65726177
   132c8:	73655220 	.word	0x73655220
   132cc:	00007465 	.word	0x00007465
   132d0:	65726f43 	.word	0x65726f43
   132d4:	636f4c20 	.word	0x636f4c20
   132d8:	2070756b 	.word	0x2070756b
   132dc:	6e657645 	.word	0x6e657645
   132e0:	65522074 	.word	0x65522074
   132e4:	00746573 	.word	0x00746573
   132e8:	65776f50 	.word	0x65776f50
   132ec:	6e6f2d72 	.word	0x6e6f2d72
   132f0:	73655220 	.word	0x73655220
   132f4:	00007465 	.word	0x00007465
   132f8:	65747845 	.word	0x65747845
   132fc:	6c616e72 	.word	0x6c616e72
   13300:	6e695020 	.word	0x6e695020
   13304:	73655220 	.word	0x73655220
   13308:	00007465 	.word	0x00007465
   1330c:	63746157 	.word	0x63746157
   13310:	676f6468 	.word	0x676f6468
   13314:	504f4328 	.word	0x504f4328
   13318:	65522029 	.word	0x65522029
   1331c:	00746573 	.word	0x00746573
   13320:	73736f4c 	.word	0x73736f4c
   13324:	20666f20 	.word	0x20666f20
   13328:	65747845 	.word	0x65747845
   1332c:	6c616e72 	.word	0x6c616e72
   13330:	6f6c4320 	.word	0x6f6c4320
   13334:	52206b63 	.word	0x52206b63
   13338:	74657365 	.word	0x74657365
   1333c:	00000000 	.word	0x00000000
   13340:	73736f4c 	.word	0x73736f4c
   13344:	20666f20 	.word	0x20666f20
   13348:	6b636f4c 	.word	0x6b636f4c
   1334c:	206e6920 	.word	0x206e6920
   13350:	204c4c50 	.word	0x204c4c50
   13354:	65736552 	.word	0x65736552
   13358:	00000074 	.word	0x00000074
   1335c:	2d776f4c 	.word	0x2d776f4c
   13360:	746c6f76 	.word	0x746c6f76
   13364:	20656761 	.word	0x20656761
   13368:	65746544 	.word	0x65746544
   1336c:	52207463 	.word	0x52207463
   13370:	74657365 	.word	0x74657365
   13374:	00000000 	.word	0x00000000
   13378:	72617453 	.word	0x72617453
   1337c:	20646574 	.word	0x20646574
   13380:	69726573 	.word	0x69726573
   13384:	69206c61 	.word	0x69206c61
   13388:	7265746e 	.word	0x7265746e
   1338c:	65636166 	.word	0x65636166
   13390:	ffffff00 	.word	0xffffff00
   13394:	6e6f7257 	.word	0x6e6f7257
   13398:	61422067 	.word	0x61422067
   1339c:	52206475 	.word	0x52206475
   133a0:	00657461 	.word	0x00657461
   133a4:	646f4320 	.word	0x646f4320
   133a8:	53206465 	.word	0x53206465
   133ac:	69747465 	.word	0x69747465
   133b0:	2073676e 	.word	0x2073676e
   133b4:	64616f4c 	.word	0x64616f4c
   133b8:	00206465 	.word	0x00206465
   133bc:	68416d20 	.word	0x68416d20
   133c0:	73655220 	.word	0x73655220
   133c4:	00207465 	.word	0x00207465
   133c8:	202d2031 	.word	0x202d2031
   133cc:	69726553 	.word	0x69726553
   133d0:	50206c61 	.word	0x50206c61
   133d4:	2074726f 	.word	0x2074726f
   133d8:	636e7546 	.word	0x636e7546
   133dc:	6e6f6974 	.word	0x6e6f6974
   133e0:	0000003a 	.word	0x0000003a
   133e4:	656e6f4e 	.word	0x656e6f4e
   133e8:	00000000 	.word	0x00000000
   133ec:	206e6143 	.word	0x206e6143
   133f0:	20737542 	.word	0x20737542
   133f4:	61707845 	.word	0x61707845
   133f8:	6f69736e 	.word	0x6f69736e
   133fc:	0000006e 	.word	0x0000006e
   13400:	202d2032 	.word	0x202d2032
   13404:	69726553 	.word	0x69726553
   13408:	43206c61 	.word	0x43206c61
   1340c:	53206e61 	.word	0x53206e61
   13410:	64656570 	.word	0x64656570
   13414:	0000003a 	.word	0x0000003a
   13418:	70626b20 	.word	0x70626b20
   1341c:	00000073 	.word	0x00000073
   13420:	202d2033 	.word	0x202d2033
   13424:	746c6f56 	.word	0x746c6f56
   13428:	44434420 	.word	0x44434420
   1342c:	65722043 	.word	0x65722043
   13430:	73657571 	.word	0x73657571
   13434:	00003a74 	.word	0x00003a74
   13438:	00005620 	.word	0x00005620
   1343c:	202d2034 	.word	0x202d2034
   13440:	69726553 	.word	0x69726553
   13444:	42206c61 	.word	0x42206c61
   13448:	20647561 	.word	0x20647561
   1344c:	65746152 	.word	0x65746152
   13450:	00000020 	.word	0x00000020
   13454:	202d2071 	.word	0x202d2071
   13458:	62206f47 	.word	0x62206f47
   1345c:	206b6361 	.word	0x206b6361
   13460:	6d206f74 	.word	0x6d206f74
   13464:	00756e65 	.word	0x00756e65
   13468:	202d2031 	.word	0x202d2031
   1346c:	706d6554 	.word	0x706d6554
   13470:	6e655320 	.word	0x6e655320
   13474:	20726f73 	.word	0x20726f73
   13478:	74746553 	.word	0x74746553
   1347c:	3a676e69 	.word	0x3a676e69
   13480:	00000000 	.word	0x00000000
   13484:	202d2032 	.word	0x202d2032
   13488:	746c6f56 	.word	0x746c6f56
   1348c:	20656761 	.word	0x20656761
   13490:	65646e55 	.word	0x65646e55
   13494:	68572072 	.word	0x68572072
   13498:	20686369 	.word	0x20686369
   1349c:	49206f54 	.word	0x49206f54
   134a0:	726f6e67 	.word	0x726f6e67
   134a4:	65432065 	.word	0x65432065
   134a8:	3a736c6c 	.word	0x3a736c6c
   134ac:	00000000 	.word	0x00000000
   134b0:	0000566d 	.word	0x0000566d
   134b4:	202d2031 	.word	0x202d2031
   134b8:	6c6c6543 	.word	0x6c6c6543
   134bc:	61684320 	.word	0x61684320
   134c0:	20656772 	.word	0x20656772
   134c4:	746c6f56 	.word	0x746c6f56
   134c8:	20656761 	.word	0x20656761
   134cc:	696d694c 	.word	0x696d694c
   134d0:	65532074 	.word	0x65532074
   134d4:	696f7074 	.word	0x696f7074
   134d8:	203a746e 	.word	0x203a746e
   134dc:	00000000 	.word	0x00000000
   134e0:	202d2032 	.word	0x202d2032
   134e4:	72616843 	.word	0x72616843
   134e8:	48206567 	.word	0x48206567
   134ec:	65747379 	.word	0x65747379
   134f0:	73697372 	.word	0x73697372
   134f4:	0000203a 	.word	0x0000203a
   134f8:	202d2033 	.word	0x202d2033
   134fc:	6b636150 	.word	0x6b636150
   13500:	78614d20 	.word	0x78614d20
   13504:	61684320 	.word	0x61684320
   13508:	20656772 	.word	0x20656772
   1350c:	72727543 	.word	0x72727543
   13510:	3a746e65 	.word	0x3a746e65
   13514:	00000020 	.word	0x00000020
   13518:	50202d34 	.word	0x50202d34
   1351c:	206b6361 	.word	0x206b6361
   13520:	20646e45 	.word	0x20646e45
   13524:	4320666f 	.word	0x4320666f
   13528:	67726168 	.word	0x67726168
   1352c:	75432065 	.word	0x75432065
   13530:	6e657272 	.word	0x6e657272
   13534:	00203a74 	.word	0x00203a74
   13538:	43202d35 	.word	0x43202d35
   1353c:	67726168 	.word	0x67726168
   13540:	54207265 	.word	0x54207265
   13544:	3a657079 	.word	0x3a657079
   13548:	00000020 	.word	0x00000020
   1354c:	616c6552 	.word	0x616c6552
   13550:	6f432079 	.word	0x6f432079
   13554:	6f72746e 	.word	0x6f72746e
   13558:	0000006c 	.word	0x0000006c
   1355c:	73757242 	.word	0x73757242
   13560:	4c4e2061 	.word	0x4c4e2061
   13564:	78783547 	.word	0x78783547
   13568:	00000000 	.word	0x00000000
   1356c:	746c6f56 	.word	0x746c6f56
   13570:	61684320 	.word	0x61684320
   13574:	72656772 	.word	0x72656772
   13578:	00000000 	.word	0x00000000
   1357c:	65746c45 	.word	0x65746c45
   13580:	6843206b 	.word	0x6843206b
   13584:	65677261 	.word	0x65677261
   13588:	00000072 	.word	0x00000072
   1358c:	6f636c45 	.word	0x6f636c45
   13590:	6843206e 	.word	0x6843206e
   13594:	65677261 	.word	0x65677261
   13598:	00000072 	.word	0x00000072
   1359c:	74636956 	.word	0x74636956
   135a0:	2f6e6f72 	.word	0x2f6e6f72
   135a4:	00414d53 	.word	0x00414d53
   135a8:	61646f43 	.word	0x61646f43
   135ac:	00000000 	.word	0x00000000
   135b0:	43202d36 	.word	0x43202d36
   135b4:	67726168 	.word	0x67726168
   135b8:	43207265 	.word	0x43207265
   135bc:	4d206e61 	.word	0x4d206e61
   135c0:	53206773 	.word	0x53206773
   135c4:	203a6470 	.word	0x203a6470
   135c8:	00000000 	.word	0x00000000
   135cc:	0000536d 	.word	0x0000536d
   135d0:	202d2037 	.word	0x202d2037
   135d4:	72616843 	.word	0x72616843
   135d8:	20726567 	.word	0x20726567
   135dc:	43205648 	.word	0x43205648
   135e0:	656e6e6f 	.word	0x656e6e6f
   135e4:	6f697463 	.word	0x6f697463
   135e8:	00203a6e 	.word	0x00203a6e
   135ec:	68654220 	.word	0x68654220
   135f0:	20646e69 	.word	0x20646e69
   135f4:	746e6f43 	.word	0x746e6f43
   135f8:	6f746361 	.word	0x6f746361
   135fc:	00007372 	.word	0x00007372
   13600:	65726944 	.word	0x65726944
   13604:	54207463 	.word	0x54207463
   13608:	6142206f 	.word	0x6142206f
   1360c:	72657474 	.word	0x72657474
   13610:	56482079 	.word	0x56482079
   13614:	00000000 	.word	0x00000000
   13618:	72616c41 	.word	0x72616c41
   1361c:	6e61206d 	.word	0x6e61206d
   13620:	61572064 	.word	0x61572064
   13624:	6e696e72 	.word	0x6e696e72
   13628:	65532067 	.word	0x65532067
   1362c:	6e697474 	.word	0x6e697474
   13630:	4d207367 	.word	0x4d207367
   13634:	00756e65 	.word	0x00756e65
   13638:	202d2031 	.word	0x202d2031
   1363c:	746c6f56 	.word	0x746c6f56
   13640:	20656761 	.word	0x20656761
   13644:	6e726157 	.word	0x6e726157
   13648:	20676e69 	.word	0x20676e69
   1364c:	7366664f 	.word	0x7366664f
   13650:	203a7465 	.word	0x203a7465
   13654:	00000000 	.word	0x00000000
   13658:	202d2032 	.word	0x202d2032
   1365c:	6c6c6543 	.word	0x6c6c6543
   13660:	6c6f5620 	.word	0x6c6f5620
   13664:	65676174 	.word	0x65676174
   13668:	66694420 	.word	0x66694420
   1366c:	65726566 	.word	0x65726566
   13670:	2065636e 	.word	0x2065636e
   13674:	72616c41 	.word	0x72616c41
   13678:	00203a6d 	.word	0x00203a6d
   1367c:	202d2033 	.word	0x202d2033
   13680:	706d6554 	.word	0x706d6554
   13684:	72615720 	.word	0x72615720
   13688:	676e696e 	.word	0x676e696e
   1368c:	66664f20 	.word	0x66664f20
   13690:	3a746573 	.word	0x3a746573
   13694:	00000020 	.word	0x00000020
   13698:	00004320 	.word	0x00004320
   1369c:	202d2034 	.word	0x202d2034
   136a0:	7265764f 	.word	0x7265764f
   136a4:	646e6120 	.word	0x646e6120
   136a8:	646e5520 	.word	0x646e5520
   136ac:	56207265 	.word	0x56207265
   136b0:	61746c6f 	.word	0x61746c6f
   136b4:	44206567 	.word	0x44206567
   136b8:	79616c65 	.word	0x79616c65
   136bc:	0000203a 	.word	0x0000203a
   136c0:	00536d20 	.word	0x00536d20
   136c4:	746e6f43 	.word	0x746e6f43
   136c8:	6f746361 	.word	0x6f746361
   136cc:	6e612072 	.word	0x6e612072
   136d0:	61472064 	.word	0x61472064
   136d4:	20656775 	.word	0x20656775
   136d8:	74746553 	.word	0x74746553
   136dc:	73676e69 	.word	0x73676e69
   136e0:	6e654d20 	.word	0x6e654d20
   136e4:	00000075 	.word	0x00000075
   136e8:	202d2031 	.word	0x202d2031
   136ec:	43657250 	.word	0x43657250
   136f0:	67726168 	.word	0x67726168
   136f4:	69542065 	.word	0x69542065
   136f8:	3a72656d 	.word	0x3a72656d
   136fc:	00000020 	.word	0x00000020
   13700:	202d2032 	.word	0x202d2032
   13704:	43657250 	.word	0x43657250
   13708:	67726168 	.word	0x67726168
   1370c:	69462065 	.word	0x69462065
   13710:	6873696e 	.word	0x6873696e
   13714:	72754320 	.word	0x72754320
   13718:	746e6572 	.word	0x746e6572
   1371c:	0000203a 	.word	0x0000203a
   13720:	202d2033 	.word	0x202d2033
   13724:	204d5750 	.word	0x204d5750
   13728:	746e6f63 	.word	0x746e6f63
   1372c:	6f746361 	.word	0x6f746361
   13730:	6f482072 	.word	0x6f482072
   13734:	3020646c 	.word	0x3020646c
   13738:	3535322d 	.word	0x3535322d
   1373c:	00003a20 	.word	0x00003a20
   13740:	202d2034 	.word	0x202d2034
   13744:	204d5750 	.word	0x204d5750
   13748:	20726f66 	.word	0x20726f66
   1374c:	67756147 	.word	0x67756147
   13750:	6f4c2065 	.word	0x6f4c2065
   13754:	2d302077 	.word	0x2d302077
   13758:	20353532 	.word	0x20353532
   1375c:	0000003a 	.word	0x0000003a
   13760:	202d2035 	.word	0x202d2035
   13764:	204d5750 	.word	0x204d5750
   13768:	20726f66 	.word	0x20726f66
   1376c:	67756147 	.word	0x67756147
   13770:	69482065 	.word	0x69482065
   13774:	30206867 	.word	0x30206867
   13778:	3535322d 	.word	0x3535322d
   1377c:	00003a20 	.word	0x00003a20
   13780:	75626544 	.word	0x75626544
   13784:	65532067 	.word	0x65532067
   13788:	6e697474 	.word	0x6e697474
   1378c:	4d207367 	.word	0x4d207367
   13790:	00756e65 	.word	0x00756e65
   13794:	67676f54 	.word	0x67676f54
   13798:	6f20656c 	.word	0x6f20656c
   1379c:	666f2f6e 	.word	0x666f2f6e
   137a0:	00000066 	.word	0x00000066
   137a4:	202d2031 	.word	0x202d2031
   137a8:	206e6143 	.word	0x206e6143
   137ac:	75626544 	.word	0x75626544
   137b0:	003a2067 	.word	0x003a2067
   137b4:	202d2032 	.word	0x202d2032
   137b8:	72727543 	.word	0x72727543
   137bc:	20746e65 	.word	0x20746e65
   137c0:	75626544 	.word	0x75626544
   137c4:	003a2067 	.word	0x003a2067
   137c8:	202d2033 	.word	0x202d2033
   137cc:	7074754f 	.word	0x7074754f
   137d0:	43207475 	.word	0x43207475
   137d4:	6b636568 	.word	0x6b636568
   137d8:	00003a20 	.word	0x00003a20
   137dc:	202d2034 	.word	0x202d2034
   137e0:	75706e49 	.word	0x75706e49
   137e4:	68432074 	.word	0x68432074
   137e8:	206b6365 	.word	0x206b6365
   137ec:	0000003a 	.word	0x0000003a
   137f0:	202d2035 	.word	0x202d2035
   137f4:	20535345 	.word	0x20535345
   137f8:	65646f6d 	.word	0x65646f6d
   137fc:	00003a20 	.word	0x00003a20
   13800:	202d2036 	.word	0x202d2036
   13804:	6c6c6543 	.word	0x6c6c6543
   13808:	72502073 	.word	0x72502073
   1380c:	6e657365 	.word	0x6e657365
   13810:	65522074 	.word	0x65522074
   13814:	20746573 	.word	0x20746573
   13818:	0000003a 	.word	0x0000003a
   1381c:	202d2037 	.word	0x202d2037
   13820:	67756147 	.word	0x67756147
   13824:	65442065 	.word	0x65442065
   13828:	20677562 	.word	0x20677562
   1382c:	0000003a 	.word	0x0000003a
   13830:	202d2038 	.word	0x202d2038
   13834:	20565343 	.word	0x20565343
   13838:	7074754f 	.word	0x7074754f
   1383c:	3a207475 	.word	0x3a207475
   13840:	00000000 	.word	0x00000000
   13844:	202d2039 	.word	0x202d2039
   13848:	69636544 	.word	0x69636544
   1384c:	206c616d 	.word	0x206c616d
   13850:	63616c50 	.word	0x63616c50
   13854:	74207365 	.word	0x74207365
   13858:	6853206f 	.word	0x6853206f
   1385c:	3a20776f 	.word	0x3a20776f
   13860:	00000000 	.word	0x00000000
   13864:	202d2030 	.word	0x202d2030
   13868:	70736944 	.word	0x70736944
   1386c:	2079616c 	.word	0x2079616c
   13870:	5320726f 	.word	0x5320726f
   13874:	61697265 	.word	0x61697265
   13878:	694d206c 	.word	0x694d206c
   1387c:	726f7272 	.word	0x726f7272
   13880:	00003a20 	.word	0x00003a20
   13884:	73694420 	.word	0x73694420
   13888:	79616c70 	.word	0x79616c70
   1388c:	74614420 	.word	0x74614420
   13890:	00000061 	.word	0x00000061
   13894:	72655320 	.word	0x72655320
   13898:	206c6169 	.word	0x206c6169
   1389c:	7272694d 	.word	0x7272694d
   138a0:	0000726f 	.word	0x0000726f
   138a4:	202d2061 	.word	0x202d2061
   138a8:	206e6143 	.word	0x206e6143
   138ac:	75626544 	.word	0x75626544
   138b0:	65532067 	.word	0x65532067
   138b4:	6c616972 	.word	0x6c616972
   138b8:	0000003a 	.word	0x0000003a
   138bc:	72727543 	.word	0x72727543
   138c0:	20746e65 	.word	0x20746e65
   138c4:	736e6553 	.word	0x736e6553
   138c8:	4320726f 	.word	0x4320726f
   138cc:	62696c61 	.word	0x62696c61
   138d0:	69746172 	.word	0x69746172
   138d4:	4d206e6f 	.word	0x4d206e6f
   138d8:	00756e65 	.word	0x00756e65
   138dc:	202d2063 	.word	0x202d2063
   138e0:	63206f54 	.word	0x63206f54
   138e4:	62696c61 	.word	0x62696c61
   138e8:	65746172 	.word	0x65746172
   138ec:	6e657320 	.word	0x6e657320
   138f0:	20726f73 	.word	0x20726f73
   138f4:	7366666f 	.word	0x7366666f
   138f8:	00007465 	.word	0x00007465
   138fc:	202d2073 	.word	0x202d2073
   13900:	72727543 	.word	0x72727543
   13904:	20746e65 	.word	0x20746e65
   13908:	736e6553 	.word	0x736e6553
   1390c:	5420726f 	.word	0x5420726f
   13910:	20657079 	.word	0x20657079
   13914:	0000203a 	.word	0x0000203a
   13918:	616e4120 	.word	0x616e4120
   1391c:	75676f6c 	.word	0x75676f6c
   13920:	75442065 	.word	0x75442065
   13924:	43206c61 	.word	0x43206c61
   13928:	65727275 	.word	0x65727275
   1392c:	5320746e 	.word	0x5320746e
   13930:	6f736e65 	.word	0x6f736e65
   13934:	00002072 	.word	0x00002072
   13938:	616e4120 	.word	0x616e4120
   1393c:	75676f6c 	.word	0x75676f6c
   13940:	69532065 	.word	0x69532065
   13944:	656c676e 	.word	0x656c676e
   13948:	72754320 	.word	0x72754320
   1394c:	746e6572 	.word	0x746e6572
   13950:	6e655320 	.word	0x6e655320
   13954:	20726f73 	.word	0x20726f73
   13958:	00000000 	.word	0x00000000
   1395c:	6e614320 	.word	0x6e614320
   13960:	20737562 	.word	0x20737562
   13964:	72727543 	.word	0x72727543
   13968:	20746e65 	.word	0x20746e65
   1396c:	736e6553 	.word	0x736e6553
   13970:	0020726f 	.word	0x0020726f
   13974:	65646e55 	.word	0x65646e55
   13978:	656e6966 	.word	0x656e6966
   1397c:	00000064 	.word	0x00000064
   13980:	202d2031 	.word	0x202d2031
   13984:	65766e69 	.word	0x65766e69
   13988:	63207472 	.word	0x63207472
   1398c:	65727275 	.word	0x65727275
   13990:	3a20746e 	.word	0x3a20746e
   13994:	00000000 	.word	0x00000000
   13998:	202d2032 	.word	0x202d2032
   1399c:	65727550 	.word	0x65727550
   139a0:	6c6f5620 	.word	0x6c6f5620
   139a4:	65676174 	.word	0x65676174
   139a8:	73616220 	.word	0x73616220
   139ac:	53206465 	.word	0x53206465
   139b0:	3a20434f 	.word	0x3a20434f
   139b4:	00000000 	.word	0x00000000
   139b8:	202d2033 	.word	0x202d2033
   139bc:	72727543 	.word	0x72727543
   139c0:	20746e65 	.word	0x20746e65
   139c4:	746c754d 	.word	0x746c754d
   139c8:	696c7069 	.word	0x696c7069
   139cc:	69746163 	.word	0x69746163
   139d0:	3a206e6f 	.word	0x3a206e6f
   139d4:	00000000 	.word	0x00000000
   139d8:	202d2034 	.word	0x202d2034
   139dc:	6c616e41 	.word	0x6c616e41
   139e0:	6575676f 	.word	0x6575676f
   139e4:	776f4c20 	.word	0x776f4c20
   139e8:	6e615220 	.word	0x6e615220
   139ec:	43206567 	.word	0x43206567
   139f0:	3a766e6f 	.word	0x3a766e6f
   139f4:	00000000 	.word	0x00000000
   139f8:	2f566d20 	.word	0x2f566d20
   139fc:	00000041 	.word	0x00000041
   13a00:	202d2035 	.word	0x202d2035
   13a04:	6c616e41 	.word	0x6c616e41
   13a08:	6575676f 	.word	0x6575676f
   13a0c:	67694820 	.word	0x67694820
   13a10:	61522068 	.word	0x61522068
   13a14:	2065676e 	.word	0x2065676e
   13a18:	766e6f43 	.word	0x766e6f43
   13a1c:	0000003a 	.word	0x0000003a
   13a20:	202d2036 	.word	0x202d2036
   13a24:	72727543 	.word	0x72727543
   13a28:	20746e65 	.word	0x20746e65
   13a2c:	736e6553 	.word	0x736e6553
   13a30:	4420726f 	.word	0x4420726f
   13a34:	62646165 	.word	0x62646165
   13a38:	3a646e61 	.word	0x3a646e61
   13a3c:	00000000 	.word	0x00000000
   13a40:	00566d20 	.word	0x00566d20
   13a44:	202d2038 	.word	0x202d2038
   13a48:	72727543 	.word	0x72727543
   13a4c:	20746e65 	.word	0x20746e65
   13a50:	6e616843 	.word	0x6e616843
   13a54:	206c656e 	.word	0x206c656e
   13a58:	6e616843 	.word	0x6e616843
   13a5c:	764f6567 	.word	0x764f6567
   13a60:	003a7265 	.word	0x003a7265
   13a64:	00004120 	.word	0x00004120
   13a68:	74746142 	.word	0x74746142
   13a6c:	20797265 	.word	0x20797265
   13a70:	74746553 	.word	0x74746553
   13a74:	73676e69 	.word	0x73676e69
   13a78:	6e654d20 	.word	0x6e654d20
   13a7c:	00000075 	.word	0x00000075
   13a80:	202d2072 	.word	0x202d2072
   13a84:	65736552 	.word	0x65736552
   13a88:	48412074 	.word	0x48412074
   13a8c:	756f6320 	.word	0x756f6320
   13a90:	7265746e 	.word	0x7265746e
   13a94:	00000000 	.word	0x00000000
   13a98:	202d2066 	.word	0x202d2066
   13a9c:	65736552 	.word	0x65736552
   13aa0:	6f742074 	.word	0x6f742074
   13aa4:	646f4320 	.word	0x646f4320
   13aa8:	53206465 	.word	0x53206465
   13aac:	69747465 	.word	0x69747465
   13ab0:	0073676e 	.word	0x0073676e
   13ab4:	202d2031 	.word	0x202d2031
   13ab8:	6c6c6543 	.word	0x6c6c6543
   13abc:	65764f20 	.word	0x65764f20
   13ac0:	6f562072 	.word	0x6f562072
   13ac4:	6761746c 	.word	0x6761746c
   13ac8:	65532065 	.word	0x65532065
   13acc:	696f7074 	.word	0x696f7074
   13ad0:	203a746e 	.word	0x203a746e
   13ad4:	00000000 	.word	0x00000000
   13ad8:	202d2032 	.word	0x202d2032
   13adc:	6c6c6543 	.word	0x6c6c6543
   13ae0:	646e5520 	.word	0x646e5520
   13ae4:	56207265 	.word	0x56207265
   13ae8:	61746c6f 	.word	0x61746c6f
   13aec:	53206567 	.word	0x53206567
   13af0:	6f707465 	.word	0x6f707465
   13af4:	3a746e69 	.word	0x3a746e69
   13af8:	00000020 	.word	0x00000020
   13afc:	202d2033 	.word	0x202d2033
   13b00:	7265764f 	.word	0x7265764f
   13b04:	6d655420 	.word	0x6d655420
   13b08:	61726570 	.word	0x61726570
   13b0c:	65727574 	.word	0x65727574
   13b10:	74655320 	.word	0x74655320
   13b14:	6e696f70 	.word	0x6e696f70
   13b18:	00203a74 	.word	0x00203a74
   13b1c:	00000043 	.word	0x00000043
   13b20:	202d2034 	.word	0x202d2034
   13b24:	65646e55 	.word	0x65646e55
   13b28:	65542072 	.word	0x65542072
   13b2c:	7265706d 	.word	0x7265706d
   13b30:	72757461 	.word	0x72757461
   13b34:	65532065 	.word	0x65532065
   13b38:	696f7074 	.word	0x696f7074
   13b3c:	203a746e 	.word	0x203a746e
   13b40:	00000000 	.word	0x00000000
   13b44:	202d2035 	.word	0x202d2035
   13b48:	6c6c6543 	.word	0x6c6c6543
   13b4c:	6c614220 	.word	0x6c614220
   13b50:	65636e61 	.word	0x65636e61
   13b54:	6c6f5620 	.word	0x6c6f5620
   13b58:	65676174 	.word	0x65676174
   13b5c:	74655320 	.word	0x74655320
   13b60:	6e696f70 	.word	0x6e696f70
   13b64:	00203a74 	.word	0x00203a74
   13b68:	202d2036 	.word	0x202d2036
   13b6c:	616c6142 	.word	0x616c6142
   13b70:	2065636e 	.word	0x2065636e
   13b74:	746c6f56 	.word	0x746c6f56
   13b78:	20656761 	.word	0x20656761
   13b7c:	74737948 	.word	0x74737948
   13b80:	69737265 	.word	0x69737265
   13b84:	00203a73 	.word	0x00203a73
   13b88:	202d2037 	.word	0x202d2037
   13b8c:	42206841 	.word	0x42206841
   13b90:	65747461 	.word	0x65747461
   13b94:	43207972 	.word	0x43207972
   13b98:	63617061 	.word	0x63617061
   13b9c:	3a797469 	.word	0x3a797469
   13ba0:	00000020 	.word	0x00000020
   13ba4:	00006841 	.word	0x00006841
   13ba8:	202d2038 	.word	0x202d2038
   13bac:	6b636150 	.word	0x6b636150
   13bb0:	78614d20 	.word	0x78614d20
   13bb4:	73694420 	.word	0x73694420
   13bb8:	72616863 	.word	0x72616863
   13bbc:	203a6567 	.word	0x203a6567
   13bc0:	00000000 	.word	0x00000000
   13bc4:	202d2039 	.word	0x202d2039
   13bc8:	6c6c6543 	.word	0x6c6c6543
   13bcc:	73694420 	.word	0x73694420
   13bd0:	72616863 	.word	0x72616863
   13bd4:	56206567 	.word	0x56206567
   13bd8:	61746c6f 	.word	0x61746c6f
   13bdc:	4c206567 	.word	0x4c206567
   13be0:	74696d69 	.word	0x74696d69
   13be4:	74655320 	.word	0x74655320
   13be8:	6e696f70 	.word	0x6e696f70
   13bec:	00203a74 	.word	0x00203a74
   13bf0:	202d2030 	.word	0x202d2030
   13bf4:	76616c53 	.word	0x76616c53
   13bf8:	74732065 	.word	0x74732065
   13bfc:	676e6972 	.word	0x676e6972
   13c00:	6e692073 	.word	0x6e692073
   13c04:	72617020 	.word	0x72617020
   13c08:	656c6c61 	.word	0x656c6c61
   13c0c:	00203a6c 	.word	0x00203a6c
   13c10:	202d2061 	.word	0x202d2061
   13c14:	6c6c6543 	.word	0x6c6c6543
   13c18:	6e692073 	.word	0x6e692073
   13c1c:	72655320 	.word	0x72655320
   13c20:	20736569 	.word	0x20736569
   13c24:	20726570 	.word	0x20726570
   13c28:	69727453 	.word	0x69727453
   13c2c:	203a676e 	.word	0x203a676e
   13c30:	00000000 	.word	0x00000000
   13c34:	202d2062 	.word	0x202d2062
   13c38:	70746573 	.word	0x70746573
   13c3c:	746e696f 	.word	0x746e696f
   13c40:	203a3120 	.word	0x203a3120
   13c44:	00000000 	.word	0x00000000
   13c48:	202d2063 	.word	0x202d2063
   13c4c:	20434f53 	.word	0x20434f53
   13c50:	70746573 	.word	0x70746573
   13c54:	746e696f 	.word	0x746e696f
   13c58:	003a3120 	.word	0x003a3120
   13c5c:	00000025 	.word	0x00000025
   13c60:	202d2064 	.word	0x202d2064
   13c64:	70746573 	.word	0x70746573
   13c68:	746e696f 	.word	0x746e696f
   13c6c:	203a3220 	.word	0x203a3220
   13c70:	00000000 	.word	0x00000000
   13c74:	202d2065 	.word	0x202d2065
   13c78:	20434f53 	.word	0x20434f53
   13c7c:	70746573 	.word	0x70746573
   13c80:	746e696f 	.word	0x746e696f
   13c84:	203a3220 	.word	0x203a3220
   13c88:	00000000 	.word	0x00000000
   13c8c:	202d2067 	.word	0x202d2067
   13c90:	726f7453 	.word	0x726f7453
   13c94:	20656761 	.word	0x20656761
   13c98:	70746553 	.word	0x70746553
   13c9c:	746e696f 	.word	0x746e696f
   13ca0:	0000203a 	.word	0x0000203a
   13ca4:	202d2068 	.word	0x202d2068
   13ca8:	63736944 	.word	0x63736944
   13cac:	67726168 	.word	0x67726168
   13cb0:	75432065 	.word	0x75432065
   13cb4:	6e657272 	.word	0x6e657272
   13cb8:	61542074 	.word	0x61542074
   13cbc:	20726570 	.word	0x20726570
   13cc0:	7366664f 	.word	0x7366664f
   13cc4:	203a7465 	.word	0x203a7465
   13cc8:	00000000 	.word	0x00000000
   13ccc:	554e454d 	.word	0x554e454d
   13cd0:	00000000 	.word	0x00000000
   13cd4:	75626544 	.word	0x75626544
   13cd8:	6e696767 	.word	0x6e696767
   13cdc:	61502067 	.word	0x61502067
   13ce0:	64657375 	.word	0x64657375
   13ce4:	00000000 	.word	0x00000000
   13ce8:	6d726946 	.word	0x6d726946
   13cec:	65726177 	.word	0x65726177
   13cf0:	72655620 	.word	0x72655620
   13cf4:	6e6f6973 	.word	0x6e6f6973
   13cf8:	00203a20 	.word	0x00203a20
   13cfc:	202d2062 	.word	0x202d2062
   13d00:	74746142 	.word	0x74746142
   13d04:	20797265 	.word	0x20797265
   13d08:	74746553 	.word	0x74746553
   13d0c:	73676e69 	.word	0x73676e69
   13d10:	00000000 	.word	0x00000000
   13d14:	202d2061 	.word	0x202d2061
   13d18:	72616c41 	.word	0x72616c41
   13d1c:	6e61206d 	.word	0x6e61206d
   13d20:	61572064 	.word	0x61572064
   13d24:	6e696e72 	.word	0x6e696e72
   13d28:	65532067 	.word	0x65532067
   13d2c:	6e697474 	.word	0x6e697474
   13d30:	00007367 	.word	0x00007367
   13d34:	202d2065 	.word	0x202d2065
   13d38:	72616843 	.word	0x72616843
   13d3c:	676e6967 	.word	0x676e6967
   13d40:	74655320 	.word	0x74655320
   13d44:	676e6974 	.word	0x676e6974
   13d48:	00000073 	.word	0x00000073
   13d4c:	202d2063 	.word	0x202d2063
   13d50:	72727543 	.word	0x72727543
   13d54:	20746e65 	.word	0x20746e65
   13d58:	736e6553 	.word	0x736e6553
   13d5c:	4320726f 	.word	0x4320726f
   13d60:	62696c61 	.word	0x62696c61
   13d64:	69746172 	.word	0x69746172
   13d68:	00006e6f 	.word	0x00006e6f
   13d6c:	202d206b 	.word	0x202d206b
   13d70:	746e6f43 	.word	0x746e6f43
   13d74:	6f746361 	.word	0x6f746361
   13d78:	6e612072 	.word	0x6e612072
   13d7c:	61472064 	.word	0x61472064
   13d80:	20656775 	.word	0x20656775
   13d84:	74746553 	.word	0x74746553
   13d88:	73676e69 	.word	0x73676e69
   13d8c:	00000000 	.word	0x00000000
   13d90:	202d2069 	.word	0x202d2069
   13d94:	6f6e6749 	.word	0x6f6e6749
   13d98:	56206572 	.word	0x56206572
   13d9c:	65756c61 	.word	0x65756c61
   13da0:	74655320 	.word	0x74655320
   13da4:	676e6974 	.word	0x676e6974
   13da8:	00000073 	.word	0x00000073
   13dac:	202d2078 	.word	0x202d2078
   13db0:	61707845 	.word	0x61707845
   13db4:	6f69736e 	.word	0x6f69736e
   13db8:	6553206e 	.word	0x6553206e
   13dbc:	6e697474 	.word	0x6e697474
   13dc0:	00007367 	.word	0x00007367
   13dc4:	202d2064 	.word	0x202d2064
   13dc8:	75626544 	.word	0x75626544
   13dcc:	65532067 	.word	0x65532067
   13dd0:	6e697474 	.word	0x6e697474
   13dd4:	00007367 	.word	0x00007367
   13dd8:	202d2052 	.word	0x202d2052
   13ddc:	74736552 	.word	0x74736552
   13de0:	20747261 	.word	0x20747261
   13de4:	00534d42 	.word	0x00534d42
   13de8:	202d2071 	.word	0x202d2071
   13dec:	74697865 	.word	0x74697865
   13df0:	6e656d20 	.word	0x6e656d20
   13df4:	ffff0075 	.word	0xffff0075
   13df8:	21202020 	.word	0x21202020
   13dfc:	53202121 	.word	0x53202121
   13e00:	65697265 	.word	0x65697265
   13e04:	65432073 	.word	0x65432073
   13e08:	20736c6c 	.word	0x20736c6c
   13e0c:	6c756146 	.word	0x6c756146
   13e10:	21212074 	.word	0x21212074
   13e14:	ffff0021 	.word	0xffff0021
   13e18:	726f6241 	.word	0x726f6241
   13e1c:	6e692074 	.word	0x6e692074
   13e20:	4e414320 	.word	0x4e414320
   13e24:	67656220 	.word	0x67656220
   13e28:	202e6e69 	.word	0x202e6e69
   13e2c:	6c756f43 	.word	0x6c756f43
   13e30:	74276e64 	.word	0x74276e64
   13e34:	6e696620 	.word	0x6e696620
   13e38:	20612064 	.word	0x20612064
   13e3c:	74697573 	.word	0x74697573
   13e40:	656c6261 	.word	0x656c6261
   13e44:	75616220 	.word	0x75616220
   13e48:	6f632064 	.word	0x6f632064
   13e4c:	6769666e 	.word	0x6769666e
   13e50:	ffff0021 	.word	0xffff0021

00013e54 <ADC::diff_table_ADC0>:
   13e54:	03248022                                ".$.

00013e58 <ADC::diff_table_ADC1>:
   13e58:	80240322                                ".$.

00013e5c <ADC::channel2sc1aADC0>:
   13e5c:	09080e05 07060c0d 1300040f 0e051f03     ................
   13e6c:	0c0d0908 040f0706 1f1f1f1f 1f1f1f1f     ................
   13e7c:	53401f1f 161a5f43 1e1d1b17              ..@SC_......

00013e88 <ADC::channel2sc1aADC1>:
   13e88:	09081f1f 1f1f1f1f 1f031f1f 1f1f1300     ................
   13e98:	1f1f0908 1f1f1f1f 05851f1f 84070604     ................
   13ea8:	5f431f1f 121a5340 1e1d1b1f              ..C_@S......

00013eb4 <SPIClass::spi0_hardware>:
   13eb4:	4004803c 00001000 00001a04 00007fff     <..@............
   13ec4:	00001011 00007e09 0000080c 00000200     .....~..........
   13ed4:	00000200 0000070b 00000240 00000200     ........@.......
   13ee4:	00000e0d 00000240 00000200 0609020a     ....@...........
   13ef4:	16151714 0000000f 00000200 00000200     ................
   13f04:	00000200 00000200 00000200 00000200     ................
   13f14:	00000200 00000200 00000200 02020101     ................
   13f24:	08080404 00000010 002b2b2b 532b5441     ........+++.AT+S
   13f34:	0d64253d 0000000a 512b5441 ff000a0d     =%d.....AT+Q....
   13f44:	432b5441 6425303d 00000a0d 432b5441     AT+C=0%d....AT+C
   13f54:	0d64253d                                 =%d...

00013f5a <_serialEvent_default>:
   13f5a:	                                         ..

00013f5c <vtable for HardwareSerial2>:
	...
   13f64:	0000827d 000082a1 00008331 0000832d     }.......1...-...
   13f74:	00008329 00008325 00008321 00008245     )...%...!...E...
   13f84:	00008301 000082fd 000082f5 000082ed     ................
   13f94:	000082e5 000082d5 000082c5 000082c1     ................
   13fa4:	000082b9 000082b1 00008355 00008375     ........U...u...
   13fb4:	00008395 00008335 00008289 00008271     ....5.......q...

00013fc4 <vtable for HardwareSerial3>:
	...
   13fcc:	000083ed 00008411 000084a1 0000849d     ................
   13fdc:	00008499 00008495 00008491 000083b5     ................
   13fec:	00008471 0000846d 00008465 0000845d     q...m...e...]...
   13ffc:	00008455 00008445 00008435 00008431     U...E...5...1...
   1400c:	00008429 00008421 000084c5 000084e5     )...!...........
   1401c:	00008505 000084a5 000083f9 000083e1     ................
   1402c:	006e616e 00666e69 0066766f 037ff06f     nan.inf.ovf.o...
   1403c:	78037003 0f80f013 4770d0fb              .p.x......pG

00014048 <digital_pin_to_info_PGM>:
   14048:	43fe0840 4004a040 43fe0844 4004a044     @..C@..@D..CD..@
   14058:	43fe1800 4004c000 43fe0030 40049030     ...C...@0..C0..@
   14068:	43fe0034 40049034 43fe181c 4004c01c     4..C4..@...C...@
   14078:	43fe1810 4004c010 43fe1808 4004c008     ...C...@...C...@
   14088:	43fe180c 4004c00c 43fe100c 4004b00c     ...C...@...C...@
   14098:	43fe1010 4004b010 43fe1018 4004b018     ...C...@...C...@
   140a8:	43fe101c 4004b01c 43fe1014 4004b014     ...C...@...C...@
   140b8:	43fe1804 4004c004 43fe1000 4004b000     ...C...@...C...@
   140c8:	43fe0800 4004a000 43fe0804 4004a004     ...C...@...C...@
   140d8:	43fe080c 4004a00c 43fe0808 4004a008     ...C...@...C...@
   140e8:	43fe1814 4004c014 43fe1818 4004c018     ...C...@...C...@
   140f8:	43fe1004 4004b004 43fe1008 4004b008     ...C...@...C...@
   14108:	43fe0014 40049014 43fe084c 4004a04c     ...C...@L..CL..@
   14118:	43fe2004 4004d004 43fe1024 4004b024     . .C...@$..C$..@
   14128:	43fe1020 4004b020 43fe1028 4004b028      ..C ..@(..C(..@
   14138:	43fe102c 4004b02c 43fe2000 4004d000     ,..C,..@. .C...@
   14148:	43fe0848 4004a048 43fe0010 40049010     H..CH..@...C...@

00014158 <vtable for usb_serial_class>:
	...
   14160:	0000ad99 0000ad91 0000ad8d 0000ad89     ................
   14170:	0000ad85 0000ad81 0000ad7d 0000ad79     ........}...y...

00014180 <usb_descriptor_list>:
   14180:	00000100 1fff8868 00000012 00000200     ....h...........
   14190:	1fff8824 00000043 00000300 1fff887c     $...C.......|...
   141a0:	00000000 04090301 1fff8880 00000000     ................
   141b0:	04090302 1fff8898 00000000 04090303     ................
   141c0:	1fff88b0 00000000 00000000 00000000     ................
   141d0:	00000000                                ....

000141d4 <usb_endpoint_config_table>:
   141d4:	15191500 3f000000 bf000000 3f317180     .......?.....q1?
   141e4:	bf317180 3717f7d1 b717f7d1              .q1....7....

000141f0 <_ctype_>:
   141f0:	20202000 20202020 28282020 20282828     .         ((((( 
   14200:	20202020 20202020 20202020 20202020                     
   14210:	10108820 10101010 10101010 10101010      ...............
   14220:	04040410 04040404 10040404 10101010     ................
   14230:	41411010 41414141 01010101 01010101     ..AAAAAA........
   14240:	01010101 01010101 01010101 10101010     ................
   14250:	42421010 42424242 02020202 02020202     ..BBBBBB........
   14260:	02020202 02020202 02020202 10101010     ................
   14270:	00000020 00000000 00000000 00000000      ...............
	...
   142f0:	ffffff00 435f434c 414c4c4f 00004554     ....LC_COLLATE..
   14300:	435f434c 45505954 00000000 4d5f434c     LC_CTYPE....LC_M
   14310:	54454e4f 00595241 4e5f434c 52454d55     ONETARY.LC_NUMER
   14320:	00004349 545f434c 00454d49 4d5f434c     IC..LC_TIME.LC_M
   14330:	41535345 00534547 6c6c6142 7320636f     ESSAGES.Balloc s
   14340:	65636375 64656465 00000000 7461642f     ucceeded..../dat
   14350:	656a2f61 6e696b6e 6f772f73 70736b72     a/jenkins/worksp
   14360:	2f656361 2d554e47 6c6f6f74 69616863     ace/GNU-toolchai
   14370:	72612f6e 31312d6d 6372732f 77656e2f     n/arm-11/src/new
   14380:	2d62696c 77677963 6e2f6e69 696c7765     lib-cygwin/newli
   14390:	696c2f62 732f6362 696c6474 706d2f62     b/libc/stdlib/mp
   143a0:	2e636572 ffff0063                       rec.c...

000143a8 <__mprec_bigtens>:
   143a8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   143b8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   143c8:	7f73bf3c 75154fdd                       <.s..O.u

000143d0 <__mprec_tens>:
   143d0:	00000000 3ff00000 00000000 40240000     .......?......$@
   143e0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   143f0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   14400:	00000000 412e8480 00000000 416312d0     .......A......cA
   14410:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   14420:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   14430:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   14440:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   14450:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   14460:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   14470:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   14480:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   14490:	79d99db4 44ea7843 00000005 00000019     ...yCx.D........
   144a0:	0000007d 00464e49 004e414e 33323130     }...INF.NAN.0123
   144b0:	37363534 62613938 66656463 00000000     456789abcdef....
   144c0:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   144d0:	00000000 6c756e28 ff00296c 20202020     ....(null)..    
   144e0:	20202020 20202020 20202020 30303030                 0000
   144f0:	30303030 30303030 30303030 7566202c     000000000000, fu
   14500:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   14510:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   14520:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   14530:	2520656e 25732564 ff000a73 69666e49     ne %d%s%s...Infi
   14540:	7974696e 00000000 004e614e 7461642f     nity....NaN./dat
   14550:	656a2f61 6e696b6e 6f772f73 70736b72     a/jenkins/worksp
   14560:	2f656361 2d554e47 6c6f6f74 69616863     ace/GNU-toolchai
   14570:	72612f6e 31312d6d 6372732f 77656e2f     n/arm-11/src/new
   14580:	2d62696c 77677963 6e2f6e69 696c7765     lib-cygwin/newli
   14590:	696c2f62 732f6362 696c6474 74642f62     b/libc/stdlib/dt
   145a0:	632e616f ffffff00 20202020 20202020     oa.c....        
   145b0:	20202020 20202020 30303030 30303030             00000000
   145c0:	30303030 30303030                       00000000

000145c8 <_init>:
   145c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   145ca:	bf00      	nop
   145cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   145ce:	bc08      	pop	{r3}
   145d0:	469e      	mov	lr, r3
   145d2:	4770      	bx	lr

000145d4 <__init_array_start>:
   145d4:	0000d11d 	.word	0x0000d11d

000145d8 <__frame_dummy_init_array_entry>:
   145d8:	00000435 000040c9 000075dd 00007e19     5....@...u...~..

Disassembly of section .fini:

000145e8 <_fini>:
   145e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   145ea:	bf00      	nop
